import{S as zra,i as Wra,s as Qra,e as a,k as l,w as F,t as o,M as Ura,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Hra,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as $ft}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Jra($){let g,v,p,m,_,d,h,Ao,zi,tm,ft,Wi,Qi,d8,am,Oe,Qe,Ui,Xn,c8,zn,Wn,f8,Hi,Qn,m8,Ji,nm,ja;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),zi=a("code"),tm=o("model_type"),ft=o(" attribute is set to the same key you use when registering the config (here "),Wi=a("code"),Qi=o('"new-model"'),d8=o(")."),am=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ui=a("code"),Xn=o("NewModel"),c8=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),f8=o(`, make sure its
`),Hi=a("code"),Qn=o("config_class"),m8=o(` attribute is set to the same class you use when registering the model (here
`),Ji=a("code"),nm=o("NewModelConfig"),ja=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var sP=s(p);m=r(sP,"NewModelConfig"),sP.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Yi=s(d);h=r(Yi,"PretrainedConfig"),Yi.forEach(t),Ao=r(Ae,`, make sure its
`),zi=n(Ae,"CODE",{});var lP=s(zi);tm=r(lP,"model_type"),lP.forEach(t),ft=r(Ae," attribute is set to the same key you use when registering the config (here "),Wi=n(Ae,"CODE",{});var iP=s(Wi);Qi=r(iP,'"new-model"'),iP.forEach(t),d8=r(Ae,")."),Ae.forEach(t),am=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),Ui=n(Lo,"CODE",{});var Da=s(Ui);Xn=r(Da,"NewModel"),Da.forEach(t),c8=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var dP=s(zn);Wn=r(dP,"PreTrainedModel"),dP.forEach(t),f8=r(Lo,`, make sure its
`),Hi=n(Lo,"CODE",{});var sm=s(Hi);Qn=r(sm,"config_class"),sm.forEach(t),m8=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Ji=n(Lo,"CODE",{});var cP=s(Ji);nm=r(cP,"NewModelConfig"),cP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,zi),e(zi,tm),e(g,ft),e(g,Wi),e(Wi,Qi),e(g,d8),b(Ue,am,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,Ui),e(Ui,Xn),e(Oe,c8),e(Oe,zn),e(zn,Wn),e(Oe,f8),e(Oe,Hi),e(Hi,Qn),e(Oe,m8),e(Oe,Ji),e(Ji,nm),e(Oe,ja)},d(Ue){Ue&&t(g),Ue&&t(am),Ue&&t(Oe)}}}function Yra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kra($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zra($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ota($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zaa($){let g,v,p,m,_,d,h,Ao,zi,tm,ft,Wi,Qi,d8,am,Oe,Qe,Ui,Xn,c8,zn,Wn,f8,Hi,Qn,m8,Ji,nm,ja,Ue,Ae,sP,Yi,lP,iP,Lo,Da,dP,sm,cP,gKe,VQe,Ki,lm,Ose,g8,hKe,Vse,pKe,XQe,Un,_Ke,Xse,uKe,bKe,zse,vKe,FKe,zQe,h8,WQe,fP,TKe,QQe,im,UQe,Zi,dm,Wse,p8,MKe,Qse,EKe,HQe,yo,_8,CKe,u8,wKe,mP,AKe,LKe,yKe,b8,xKe,Use,$Ke,kKe,SKe,kr,v8,RKe,Hse,PKe,BKe,ed,IKe,Jse,NKe,qKe,Yse,jKe,DKe,GKe,A,cm,Kse,OKe,VKe,gP,XKe,zKe,WKe,fm,Zse,QKe,UKe,hP,HKe,JKe,YKe,mm,ele,KKe,ZKe,pP,eZe,oZe,rZe,gm,ole,tZe,aZe,_P,nZe,sZe,lZe,hm,rle,iZe,dZe,uP,cZe,fZe,mZe,pm,tle,gZe,hZe,bP,pZe,_Ze,uZe,_m,ale,bZe,vZe,vP,FZe,TZe,MZe,um,nle,EZe,CZe,FP,wZe,AZe,LZe,bm,sle,yZe,xZe,TP,$Ze,kZe,SZe,vm,lle,RZe,PZe,MP,BZe,IZe,NZe,Fm,ile,qZe,jZe,EP,DZe,GZe,OZe,Tm,dle,VZe,XZe,CP,zZe,WZe,QZe,Mm,cle,UZe,HZe,wP,JZe,YZe,KZe,Em,fle,ZZe,eeo,AP,oeo,reo,teo,Cm,mle,aeo,neo,LP,seo,leo,ieo,wm,gle,deo,ceo,yP,feo,meo,geo,Am,hle,heo,peo,xP,_eo,ueo,beo,Lm,ple,veo,Feo,$P,Teo,Meo,Eeo,ym,_le,Ceo,weo,kP,Aeo,Leo,yeo,xm,ule,xeo,$eo,SP,keo,Seo,Reo,$m,ble,Peo,Beo,RP,Ieo,Neo,qeo,km,vle,jeo,Deo,PP,Geo,Oeo,Veo,Sm,Fle,Xeo,zeo,BP,Weo,Qeo,Ueo,Rm,Tle,Heo,Jeo,IP,Yeo,Keo,Zeo,Pm,Mle,eoo,ooo,NP,roo,too,aoo,Bm,Ele,noo,soo,qP,loo,ioo,doo,Im,Cle,coo,foo,jP,moo,goo,hoo,Nm,wle,poo,_oo,DP,uoo,boo,voo,qm,Ale,Foo,Too,GP,Moo,Eoo,Coo,jm,Lle,woo,Aoo,OP,Loo,yoo,xoo,Dm,yle,$oo,koo,VP,Soo,Roo,Poo,Gm,xle,Boo,Ioo,XP,Noo,qoo,joo,Om,$le,Doo,Goo,zP,Ooo,Voo,Xoo,Vm,kle,zoo,Woo,WP,Qoo,Uoo,Hoo,Xm,Sle,Joo,Yoo,QP,Koo,Zoo,ero,zm,Rle,oro,rro,UP,tro,aro,nro,Wm,Ple,sro,lro,HP,iro,dro,cro,Qm,Ble,fro,mro,JP,gro,hro,pro,Um,Ile,_ro,uro,YP,bro,vro,Fro,Hm,Nle,Tro,Mro,KP,Ero,Cro,wro,Jm,qle,Aro,Lro,ZP,yro,xro,$ro,Ym,jle,kro,Sro,eB,Rro,Pro,Bro,Km,Dle,Iro,Nro,oB,qro,jro,Dro,Zm,Gle,Gro,Oro,rB,Vro,Xro,zro,eg,Ole,Wro,Qro,tB,Uro,Hro,Jro,og,Vle,Yro,Kro,aB,Zro,eto,oto,rg,Xle,rto,tto,nB,ato,nto,sto,tg,zle,lto,ito,sB,dto,cto,fto,ag,Wle,mto,gto,lB,hto,pto,_to,ng,Qle,uto,bto,iB,vto,Fto,Tto,sg,Ule,Mto,Eto,dB,Cto,wto,Ato,lg,Hle,Lto,yto,cB,xto,$to,kto,ig,Jle,Sto,Rto,fB,Pto,Bto,Ito,dg,Yle,Nto,qto,mB,jto,Dto,Gto,cg,Kle,Oto,Vto,gB,Xto,zto,Wto,fg,Zle,Qto,Uto,hB,Hto,Jto,Yto,mg,eie,Kto,Zto,pB,eao,oao,rao,gg,oie,tao,aao,_B,nao,sao,lao,hg,rie,iao,dao,uB,cao,fao,mao,pg,tie,gao,hao,bB,pao,_ao,uao,_g,aie,bao,vao,vB,Fao,Tao,Mao,ug,nie,Eao,Cao,FB,wao,Aao,Lao,bg,sie,yao,xao,TB,$ao,kao,Sao,vg,lie,Rao,Pao,MB,Bao,Iao,Nao,Fg,iie,qao,jao,EB,Dao,Gao,Oao,Tg,die,Vao,Xao,CB,zao,Wao,Qao,Mg,cie,Uao,Hao,wB,Jao,Yao,Kao,Eg,fie,Zao,eno,AB,ono,rno,tno,Cg,mie,ano,nno,LB,sno,lno,ino,wg,gie,dno,cno,yB,fno,mno,gno,Ag,hie,hno,pno,xB,_no,uno,bno,Lg,pie,vno,Fno,$B,Tno,Mno,Eno,yg,_ie,Cno,wno,kB,Ano,Lno,yno,xg,uie,xno,$no,SB,kno,Sno,Rno,$g,bie,Pno,Bno,RB,Ino,Nno,qno,kg,vie,jno,Dno,PB,Gno,Ono,Vno,Sg,Fie,Xno,zno,BB,Wno,Qno,Uno,Rg,Tie,Hno,Jno,IB,Yno,Kno,Zno,Pg,Mie,eso,oso,NB,rso,tso,aso,Bg,Eie,nso,sso,qB,lso,iso,dso,Ig,Cie,cso,fso,jB,mso,gso,hso,Ng,wie,pso,_so,DB,uso,bso,vso,qg,Aie,Fso,Tso,GB,Mso,Eso,Cso,jg,Lie,wso,Aso,OB,Lso,yso,xso,Dg,yie,$so,kso,VB,Sso,Rso,Pso,Gg,xie,Bso,Iso,XB,Nso,qso,jso,Og,$ie,Dso,Gso,zB,Oso,Vso,Xso,Vg,kie,zso,Wso,WB,Qso,Uso,Hso,Xg,Sie,Jso,Yso,QB,Kso,Zso,elo,zg,Rie,olo,rlo,UB,tlo,alo,nlo,Wg,Pie,slo,llo,HB,ilo,dlo,clo,Qg,Bie,flo,mlo,JB,glo,hlo,plo,Ug,Iie,_lo,ulo,YB,blo,vlo,Flo,Hg,Nie,Tlo,Mlo,KB,Elo,Clo,wlo,Jg,qie,Alo,Llo,ZB,ylo,xlo,$lo,Yg,jie,klo,Slo,eI,Rlo,Plo,Blo,Kg,Die,Ilo,Nlo,oI,qlo,jlo,Dlo,Zg,Gie,Glo,Olo,rI,Vlo,Xlo,zlo,eh,Oie,Wlo,Qlo,tI,Ulo,Hlo,Jlo,oh,Vie,Ylo,Klo,aI,Zlo,eio,oio,rh,Xie,rio,tio,nI,aio,nio,sio,th,zie,lio,iio,sI,dio,cio,fio,ah,Wie,mio,gio,lI,hio,pio,_io,nh,Qie,uio,bio,iI,vio,Fio,Tio,sh,Uie,Mio,Eio,dI,Cio,wio,Aio,lh,Hie,Lio,yio,cI,xio,$io,kio,ih,Jie,Sio,Rio,fI,Pio,Bio,Iio,dh,Yie,Nio,qio,mI,jio,Dio,Gio,ch,Kie,Oio,Vio,gI,Xio,zio,Wio,fh,Zie,Qio,Uio,hI,Hio,Jio,Yio,mh,ede,Kio,Zio,pI,edo,odo,rdo,gh,ode,tdo,ado,_I,ndo,sdo,ldo,hh,rde,ido,ddo,uI,cdo,fdo,mdo,ph,tde,gdo,hdo,bI,pdo,_do,udo,_h,ade,bdo,vdo,vI,Fdo,Tdo,Mdo,uh,nde,Edo,Cdo,FI,wdo,Ado,Ldo,bh,sde,ydo,xdo,TI,$do,kdo,Sdo,vh,lde,Rdo,Pdo,MI,Bdo,Ido,Ndo,Fh,ide,qdo,jdo,EI,Ddo,Gdo,Odo,Th,dde,Vdo,Xdo,CI,zdo,Wdo,Qdo,Mh,cde,Udo,Hdo,wI,Jdo,Ydo,Kdo,Eh,fde,Zdo,eco,AI,oco,rco,tco,Ch,aco,wh,F8,nco,mde,sco,JQe,od,Ah,gde,T8,lco,hde,ico,YQe,xo,M8,dco,E8,cco,LI,fco,mco,gco,C8,hco,pde,pco,_co,uco,Sr,w8,bco,_de,vco,Fco,Ga,Tco,ude,Mco,Eco,bde,Cco,wco,vde,Aco,Lco,yco,k,Hn,Fde,xco,$co,yI,kco,Sco,xI,Rco,Pco,Bco,Jn,Tde,Ico,Nco,$I,qco,jco,kI,Dco,Gco,Oco,Yn,Mde,Vco,Xco,SI,zco,Wco,RI,Qco,Uco,Hco,Kn,Ede,Jco,Yco,PI,Kco,Zco,BI,efo,ofo,rfo,Zn,Cde,tfo,afo,II,nfo,sfo,NI,lfo,ifo,dfo,Lh,wde,cfo,ffo,qI,mfo,gfo,hfo,yh,Ade,pfo,_fo,jI,ufo,bfo,vfo,es,Lde,Ffo,Tfo,DI,Mfo,Efo,GI,Cfo,wfo,Afo,os,yde,Lfo,yfo,OI,xfo,$fo,VI,kfo,Sfo,Rfo,rs,xde,Pfo,Bfo,XI,Ifo,Nfo,zI,qfo,jfo,Dfo,ts,$de,Gfo,Ofo,WI,Vfo,Xfo,QI,zfo,Wfo,Qfo,xh,kde,Ufo,Hfo,UI,Jfo,Yfo,Kfo,$h,Sde,Zfo,emo,HI,omo,rmo,tmo,kh,Rde,amo,nmo,JI,smo,lmo,imo,as,Pde,dmo,cmo,YI,fmo,mmo,KI,gmo,hmo,pmo,Sh,Bde,_mo,umo,ZI,bmo,vmo,Fmo,ns,Ide,Tmo,Mmo,eN,Emo,Cmo,oN,wmo,Amo,Lmo,ss,Nde,ymo,xmo,rN,$mo,kmo,tN,Smo,Rmo,Pmo,ls,qde,Bmo,Imo,aN,Nmo,qmo,nN,jmo,Dmo,Gmo,is,jde,Omo,Vmo,sN,Xmo,zmo,lN,Wmo,Qmo,Umo,Rh,Dde,Hmo,Jmo,iN,Ymo,Kmo,Zmo,ds,Gde,ego,ogo,dN,rgo,tgo,cN,ago,ngo,sgo,cs,Ode,lgo,igo,fN,dgo,cgo,mN,fgo,mgo,ggo,fs,Vde,hgo,pgo,gN,_go,ugo,hN,bgo,vgo,Fgo,ms,Xde,Tgo,Mgo,pN,Ego,Cgo,_N,wgo,Ago,Lgo,gs,zde,ygo,xgo,uN,$go,kgo,bN,Sgo,Rgo,Pgo,hs,Wde,Bgo,Igo,vN,Ngo,qgo,FN,jgo,Dgo,Ggo,Ph,Qde,Ogo,Vgo,TN,Xgo,zgo,Wgo,ps,Ude,Qgo,Ugo,MN,Hgo,Jgo,EN,Ygo,Kgo,Zgo,Bh,Hde,eho,oho,CN,rho,tho,aho,_s,Jde,nho,sho,wN,lho,iho,AN,dho,cho,fho,us,Yde,mho,gho,LN,hho,pho,yN,_ho,uho,bho,bs,Kde,vho,Fho,xN,Tho,Mho,$N,Eho,Cho,who,Ih,Zde,Aho,Lho,kN,yho,xho,$ho,vs,ece,kho,Sho,SN,Rho,Pho,RN,Bho,Iho,Nho,Fs,oce,qho,jho,PN,Dho,Gho,BN,Oho,Vho,Xho,Ts,rce,zho,Who,IN,Qho,Uho,NN,Hho,Jho,Yho,Nh,tce,Kho,Zho,qN,epo,opo,rpo,Ms,ace,tpo,apo,jN,npo,spo,DN,lpo,ipo,dpo,Es,nce,cpo,fpo,GN,mpo,gpo,ON,hpo,ppo,_po,Cs,sce,upo,bpo,VN,vpo,Fpo,XN,Tpo,Mpo,Epo,ws,lce,Cpo,wpo,zN,Apo,Lpo,WN,ypo,xpo,$po,As,ice,kpo,Spo,QN,Rpo,Ppo,UN,Bpo,Ipo,Npo,Ls,dce,qpo,jpo,HN,Dpo,Gpo,JN,Opo,Vpo,Xpo,ys,cce,zpo,Wpo,YN,Qpo,Upo,KN,Hpo,Jpo,Ypo,xs,fce,Kpo,Zpo,ZN,e_o,o_o,eq,r_o,t_o,a_o,qh,mce,n_o,s_o,oq,l_o,i_o,d_o,$s,gce,c_o,f_o,rq,m_o,g_o,tq,h_o,p_o,__o,jh,hce,u_o,b_o,aq,v_o,F_o,T_o,Dh,pce,M_o,E_o,nq,C_o,w_o,A_o,ks,_ce,L_o,y_o,sq,x_o,$_o,lq,k_o,S_o,R_o,Ss,uce,P_o,B_o,iq,I_o,N_o,dq,q_o,j_o,D_o,Rs,bce,G_o,O_o,cq,V_o,X_o,fq,z_o,W_o,Q_o,Gh,vce,U_o,H_o,mq,J_o,Y_o,K_o,Ps,Fce,Z_o,euo,gq,ouo,ruo,hq,tuo,auo,nuo,Bs,Tce,suo,luo,pq,iuo,duo,_q,cuo,fuo,muo,Is,Mce,guo,huo,uq,puo,_uo,bq,uuo,buo,vuo,Ns,Ece,Fuo,Tuo,vq,Muo,Euo,Fq,Cuo,wuo,Auo,qs,Cce,Luo,yuo,Tq,xuo,$uo,Mq,kuo,Suo,Ruo,js,wce,Puo,Buo,Eq,Iuo,Nuo,Cq,quo,juo,Duo,Ds,Ace,Guo,Ouo,wq,Vuo,Xuo,Aq,zuo,Wuo,Quo,Gs,Lce,Uuo,Huo,Lq,Juo,Yuo,yq,Kuo,Zuo,e2o,Oh,yce,o2o,r2o,xq,t2o,a2o,n2o,Os,xce,s2o,l2o,$q,i2o,d2o,kq,c2o,f2o,m2o,Vs,$ce,g2o,h2o,Sq,p2o,_2o,Rq,u2o,b2o,v2o,Vh,kce,F2o,T2o,Pq,M2o,E2o,C2o,Xs,Sce,w2o,A2o,Bq,L2o,y2o,Iq,x2o,$2o,k2o,Xh,Rce,S2o,R2o,Nq,P2o,B2o,I2o,zh,Pce,N2o,q2o,qq,j2o,D2o,G2o,zs,Bce,O2o,V2o,jq,X2o,z2o,Dq,W2o,Q2o,U2o,Wh,Ice,H2o,J2o,Gq,Y2o,K2o,Z2o,Ws,Nce,e1o,o1o,Oq,r1o,t1o,Vq,a1o,n1o,s1o,Qs,qce,l1o,i1o,Xq,d1o,c1o,zq,f1o,m1o,g1o,Us,jce,h1o,p1o,Wq,_1o,u1o,Qq,b1o,v1o,F1o,Hs,Dce,T1o,M1o,Uq,E1o,C1o,Hq,w1o,A1o,L1o,Js,Gce,y1o,x1o,Jq,$1o,k1o,Yq,S1o,R1o,P1o,Ys,Oce,B1o,I1o,Kq,N1o,q1o,Zq,j1o,D1o,G1o,Qh,Vce,O1o,V1o,ej,X1o,z1o,W1o,Uh,Xce,Q1o,U1o,oj,H1o,J1o,Y1o,Ks,zce,K1o,Z1o,rj,e4o,o4o,tj,r4o,t4o,a4o,Zs,Wce,n4o,s4o,aj,l4o,i4o,nj,d4o,c4o,f4o,el,Qce,m4o,g4o,sj,h4o,p4o,lj,_4o,u4o,b4o,Hh,Uce,v4o,F4o,ij,T4o,M4o,E4o,Jh,Hce,C4o,w4o,dj,A4o,L4o,y4o,Yh,Jce,x4o,$4o,cj,k4o,S4o,R4o,ol,Yce,P4o,B4o,fj,I4o,N4o,mj,q4o,j4o,D4o,rl,Kce,G4o,O4o,gj,V4o,X4o,hj,z4o,W4o,Q4o,Kh,Zce,U4o,H4o,pj,J4o,Y4o,K4o,Zh,efe,Z4o,ebo,_j,obo,rbo,tbo,ep,ofe,abo,nbo,uj,sbo,lbo,ibo,tl,rfe,dbo,cbo,bj,fbo,mbo,vj,gbo,hbo,pbo,op,tfe,_bo,ubo,Fj,bbo,vbo,Fbo,rp,afe,Tbo,Mbo,Tj,Ebo,Cbo,wbo,al,nfe,Abo,Lbo,Mj,ybo,xbo,Ej,$bo,kbo,Sbo,nl,sfe,Rbo,Pbo,Cj,Bbo,Ibo,wj,Nbo,qbo,jbo,sl,lfe,Dbo,Gbo,Aj,Obo,Vbo,Lj,Xbo,zbo,Wbo,ll,ife,Qbo,Ubo,yj,Hbo,Jbo,xj,Ybo,Kbo,Zbo,tp,evo,ap,A8,ovo,dfe,rvo,KQe,rd,np,cfe,L8,tvo,ffe,avo,ZQe,$o,y8,nvo,x8,svo,$j,lvo,ivo,dvo,$8,cvo,mfe,fvo,mvo,gvo,He,k8,hvo,gfe,pvo,_vo,Oa,uvo,hfe,bvo,vvo,pfe,Fvo,Tvo,_fe,Mvo,Evo,Cvo,Q,sp,ufe,wvo,Avo,kj,Lvo,yvo,xvo,lp,bfe,$vo,kvo,Sj,Svo,Rvo,Pvo,ip,vfe,Bvo,Ivo,Rj,Nvo,qvo,jvo,dp,Ffe,Dvo,Gvo,Pj,Ovo,Vvo,Xvo,cp,Tfe,zvo,Wvo,Bj,Qvo,Uvo,Hvo,fp,Mfe,Jvo,Yvo,Ij,Kvo,Zvo,e5o,mp,Efe,o5o,r5o,Nj,t5o,a5o,n5o,gp,Cfe,s5o,l5o,qj,i5o,d5o,c5o,hp,wfe,f5o,m5o,jj,g5o,h5o,p5o,pp,Afe,_5o,u5o,Dj,b5o,v5o,F5o,_p,Lfe,T5o,M5o,Gj,E5o,C5o,w5o,up,yfe,A5o,L5o,Oj,y5o,x5o,$5o,bp,xfe,k5o,S5o,Vj,R5o,P5o,B5o,vp,$fe,I5o,N5o,Xj,q5o,j5o,D5o,Fp,kfe,G5o,O5o,zj,V5o,X5o,z5o,Tp,Sfe,W5o,Q5o,Wj,U5o,H5o,J5o,Mp,Rfe,Y5o,K5o,Qj,Z5o,eFo,oFo,Ep,Pfe,rFo,tFo,Uj,aFo,nFo,sFo,Cp,Bfe,lFo,iFo,Hj,dFo,cFo,fFo,wp,Ife,mFo,gFo,Jj,hFo,pFo,_Fo,Ap,Nfe,uFo,bFo,Yj,vFo,FFo,TFo,Lp,qfe,MFo,EFo,Kj,CFo,wFo,AFo,yp,jfe,LFo,yFo,Zj,xFo,$Fo,kFo,xp,Dfe,SFo,RFo,eD,PFo,BFo,IFo,$p,Gfe,NFo,qFo,oD,jFo,DFo,GFo,kp,Ofe,OFo,VFo,rD,XFo,zFo,WFo,Sp,Vfe,QFo,UFo,tD,HFo,JFo,YFo,Rp,Xfe,KFo,ZFo,aD,eTo,oTo,rTo,Pp,zfe,tTo,aTo,nD,nTo,sTo,lTo,Bp,Wfe,iTo,dTo,sD,cTo,fTo,mTo,Ip,Qfe,gTo,hTo,lD,pTo,_To,uTo,Np,Ufe,bTo,vTo,iD,FTo,TTo,MTo,qp,Hfe,ETo,CTo,dD,wTo,ATo,LTo,jp,Jfe,yTo,xTo,cD,$To,kTo,STo,Dp,Yfe,RTo,PTo,fD,BTo,ITo,NTo,Gp,Kfe,qTo,jTo,mD,DTo,GTo,OTo,Op,Zfe,VTo,XTo,gD,zTo,WTo,QTo,Vp,eme,UTo,HTo,hD,JTo,YTo,KTo,Xp,ZTo,zp,e7o,Wp,S8,o7o,ome,r7o,eUe,td,Qp,rme,R8,t7o,tme,a7o,oUe,ko,P8,n7o,B8,s7o,pD,l7o,i7o,d7o,I8,c7o,ame,f7o,m7o,g7o,Je,N8,h7o,nme,p7o,_7o,ad,u7o,sme,b7o,v7o,lme,F7o,T7o,M7o,ie,Up,ime,E7o,C7o,_D,w7o,A7o,L7o,Hp,dme,y7o,x7o,uD,$7o,k7o,S7o,Jp,cme,R7o,P7o,bD,B7o,I7o,N7o,Yp,fme,q7o,j7o,vD,D7o,G7o,O7o,Kp,mme,V7o,X7o,FD,z7o,W7o,Q7o,Zp,gme,U7o,H7o,TD,J7o,Y7o,K7o,e_,hme,Z7o,eMo,MD,oMo,rMo,tMo,o_,pme,aMo,nMo,ED,sMo,lMo,iMo,r_,_me,dMo,cMo,CD,fMo,mMo,gMo,t_,ume,hMo,pMo,wD,_Mo,uMo,bMo,a_,bme,vMo,FMo,AD,TMo,MMo,EMo,n_,vme,CMo,wMo,LD,AMo,LMo,yMo,s_,Fme,xMo,$Mo,yD,kMo,SMo,RMo,l_,Tme,PMo,BMo,xD,IMo,NMo,qMo,i_,Mme,jMo,DMo,$D,GMo,OMo,VMo,d_,Eme,XMo,zMo,kD,WMo,QMo,UMo,c_,Cme,HMo,JMo,SD,YMo,KMo,ZMo,f_,wme,eEo,oEo,RD,rEo,tEo,aEo,m_,Ame,nEo,sEo,PD,lEo,iEo,dEo,g_,Lme,cEo,fEo,BD,mEo,gEo,hEo,h_,pEo,p_,_Eo,__,q8,uEo,yme,bEo,rUe,nd,u_,xme,j8,vEo,$me,FEo,tUe,So,D8,TEo,sd,MEo,ID,EEo,CEo,ND,wEo,AEo,LEo,G8,yEo,kme,xEo,$Eo,kEo,mt,O8,SEo,Sme,REo,PEo,ld,BEo,Rme,IEo,NEo,qD,qEo,jEo,DEo,b_,GEo,Ye,V8,OEo,Pme,VEo,XEo,Va,zEo,Bme,WEo,QEo,Ime,UEo,HEo,Nme,JEo,YEo,KEo,y,v_,qme,ZEo,eCo,jD,oCo,rCo,tCo,F_,jme,aCo,nCo,DD,sCo,lCo,iCo,T_,Dme,dCo,cCo,GD,fCo,mCo,gCo,M_,Gme,hCo,pCo,OD,_Co,uCo,bCo,E_,Ome,vCo,FCo,VD,TCo,MCo,ECo,C_,Vme,CCo,wCo,XD,ACo,LCo,yCo,w_,Xme,xCo,$Co,zD,kCo,SCo,RCo,A_,zme,PCo,BCo,WD,ICo,NCo,qCo,L_,Wme,jCo,DCo,QD,GCo,OCo,VCo,y_,Qme,XCo,zCo,UD,WCo,QCo,UCo,x_,Ume,HCo,JCo,HD,YCo,KCo,ZCo,$_,Hme,e3o,o3o,JD,r3o,t3o,a3o,k_,Jme,n3o,s3o,YD,l3o,i3o,d3o,S_,Yme,c3o,f3o,KD,m3o,g3o,h3o,R_,Kme,p3o,_3o,ZD,u3o,b3o,v3o,P_,Zme,F3o,T3o,eG,M3o,E3o,C3o,B_,ege,w3o,A3o,oG,L3o,y3o,x3o,I_,oge,$3o,k3o,rG,S3o,R3o,P3o,N_,rge,B3o,I3o,tG,N3o,q3o,j3o,q_,tge,D3o,G3o,aG,O3o,V3o,X3o,j_,age,z3o,W3o,nG,Q3o,U3o,H3o,D_,nge,J3o,Y3o,sG,K3o,Z3o,e0o,G_,sge,o0o,r0o,lG,t0o,a0o,n0o,O_,lge,s0o,l0o,iG,i0o,d0o,c0o,V_,ige,f0o,m0o,dG,g0o,h0o,p0o,X_,dge,_0o,u0o,cG,b0o,v0o,F0o,z_,cge,T0o,M0o,fG,E0o,C0o,w0o,W_,fge,A0o,L0o,mG,y0o,x0o,$0o,Q_,mge,k0o,S0o,gG,R0o,P0o,B0o,U_,gge,I0o,N0o,hG,q0o,j0o,D0o,H_,hge,G0o,O0o,pG,V0o,X0o,z0o,J_,pge,W0o,Q0o,_G,U0o,H0o,J0o,Y_,_ge,Y0o,K0o,uG,Z0o,ewo,owo,K_,uge,rwo,two,bG,awo,nwo,swo,Z_,bge,lwo,iwo,vG,dwo,cwo,fwo,il,vge,mwo,gwo,FG,hwo,pwo,TG,_wo,uwo,bwo,eu,Fge,vwo,Fwo,MG,Two,Mwo,Ewo,ou,Tge,Cwo,wwo,EG,Awo,Lwo,ywo,ru,Mge,xwo,$wo,CG,kwo,Swo,Rwo,tu,Ege,Pwo,Bwo,wG,Iwo,Nwo,qwo,au,Cge,jwo,Dwo,AG,Gwo,Owo,Vwo,nu,wge,Xwo,zwo,LG,Wwo,Qwo,Uwo,su,Age,Hwo,Jwo,yG,Ywo,Kwo,Zwo,lu,Lge,e6o,o6o,xG,r6o,t6o,a6o,iu,yge,n6o,s6o,$G,l6o,i6o,d6o,du,xge,c6o,f6o,kG,m6o,g6o,h6o,cu,$ge,p6o,_6o,SG,u6o,b6o,v6o,fu,kge,F6o,T6o,RG,M6o,E6o,C6o,mu,Sge,w6o,A6o,PG,L6o,y6o,x6o,gu,Rge,$6o,k6o,BG,S6o,R6o,P6o,hu,Pge,B6o,I6o,IG,N6o,q6o,j6o,pu,Bge,D6o,G6o,NG,O6o,V6o,X6o,_u,Ige,z6o,W6o,qG,Q6o,U6o,H6o,uu,Nge,J6o,Y6o,jG,K6o,Z6o,eAo,bu,qge,oAo,rAo,DG,tAo,aAo,nAo,vu,jge,sAo,lAo,GG,iAo,dAo,cAo,Fu,Dge,fAo,mAo,OG,gAo,hAo,pAo,Tu,Gge,_Ao,uAo,VG,bAo,vAo,FAo,Mu,Oge,TAo,MAo,XG,EAo,CAo,wAo,Eu,Vge,AAo,LAo,zG,yAo,xAo,$Ao,Cu,Xge,kAo,SAo,WG,RAo,PAo,BAo,wu,zge,IAo,NAo,QG,qAo,jAo,DAo,Au,Wge,GAo,OAo,UG,VAo,XAo,zAo,Lu,Qge,WAo,QAo,HG,UAo,HAo,JAo,yu,Uge,YAo,KAo,JG,ZAo,eLo,oLo,xu,Hge,rLo,tLo,YG,aLo,nLo,sLo,$u,Jge,lLo,iLo,KG,dLo,cLo,fLo,ku,Yge,mLo,gLo,ZG,hLo,pLo,_Lo,Su,Kge,uLo,bLo,eO,vLo,FLo,TLo,Ru,Zge,MLo,ELo,oO,CLo,wLo,ALo,Pu,ehe,LLo,yLo,rO,xLo,$Lo,kLo,Bu,ohe,SLo,RLo,tO,PLo,BLo,ILo,Iu,rhe,NLo,qLo,aO,jLo,DLo,GLo,Nu,the,OLo,VLo,nO,XLo,zLo,WLo,qu,ahe,QLo,ULo,sO,HLo,JLo,YLo,ju,nhe,KLo,ZLo,lO,eyo,oyo,ryo,Du,she,tyo,ayo,iO,nyo,syo,lyo,Gu,lhe,iyo,dyo,dO,cyo,fyo,myo,Ou,ihe,gyo,hyo,cO,pyo,_yo,uyo,Vu,dhe,byo,vyo,fO,Fyo,Tyo,Myo,Xu,che,Eyo,Cyo,mO,wyo,Ayo,Lyo,zu,fhe,yyo,xyo,gO,$yo,kyo,Syo,Wu,mhe,Ryo,Pyo,hO,Byo,Iyo,Nyo,Qu,ghe,qyo,jyo,pO,Dyo,Gyo,Oyo,Uu,hhe,Vyo,Xyo,_O,zyo,Wyo,Qyo,Hu,phe,Uyo,Hyo,uO,Jyo,Yyo,Kyo,Ju,_he,Zyo,e8o,bO,o8o,r8o,t8o,Yu,uhe,a8o,n8o,vO,s8o,l8o,i8o,Ku,bhe,d8o,c8o,FO,f8o,m8o,g8o,Zu,vhe,h8o,p8o,TO,_8o,u8o,b8o,e2,Fhe,v8o,F8o,MO,T8o,M8o,E8o,o2,The,C8o,w8o,EO,A8o,L8o,y8o,r2,Mhe,x8o,$8o,CO,k8o,S8o,R8o,t2,Ehe,P8o,B8o,wO,I8o,N8o,q8o,a2,Che,j8o,D8o,AO,G8o,O8o,V8o,n2,whe,X8o,z8o,LO,W8o,Q8o,U8o,s2,Ahe,H8o,J8o,yO,Y8o,K8o,Z8o,l2,Lhe,e9o,o9o,xO,r9o,t9o,a9o,i2,yhe,n9o,s9o,$O,l9o,i9o,d9o,d2,xhe,c9o,f9o,kO,m9o,g9o,h9o,c2,$he,p9o,_9o,SO,u9o,b9o,v9o,f2,khe,F9o,T9o,RO,M9o,E9o,C9o,m2,She,w9o,A9o,PO,L9o,y9o,x9o,g2,Rhe,$9o,k9o,BO,S9o,R9o,P9o,h2,Phe,B9o,I9o,IO,N9o,q9o,j9o,p2,Bhe,D9o,G9o,NO,O9o,V9o,X9o,_2,Ihe,z9o,W9o,qO,Q9o,U9o,H9o,u2,Nhe,J9o,Y9o,jO,K9o,Z9o,exo,b2,qhe,oxo,rxo,DO,txo,axo,nxo,v2,jhe,sxo,lxo,GO,ixo,dxo,cxo,F2,Dhe,fxo,mxo,OO,gxo,hxo,pxo,T2,Ghe,_xo,uxo,VO,bxo,vxo,Fxo,M2,Ohe,Txo,Mxo,XO,Exo,Cxo,wxo,E2,Vhe,Axo,Lxo,zO,yxo,xxo,$xo,C2,Xhe,kxo,Sxo,WO,Rxo,Pxo,Bxo,w2,zhe,Ixo,Nxo,QO,qxo,jxo,Dxo,A2,Gxo,Whe,Oxo,Vxo,Qhe,Xxo,zxo,L2,aUe,id,y2,Uhe,X8,Wxo,Hhe,Qxo,nUe,Ro,z8,Uxo,dd,Hxo,UO,Jxo,Yxo,HO,Kxo,Zxo,e$o,W8,o$o,Jhe,r$o,t$o,a$o,gt,Q8,n$o,Yhe,s$o,l$o,cd,i$o,Khe,d$o,c$o,JO,f$o,m$o,g$o,x2,h$o,Ke,U8,p$o,Zhe,_$o,u$o,Xa,b$o,epe,v$o,F$o,ope,T$o,M$o,rpe,E$o,C$o,w$o,G,$2,tpe,A$o,L$o,YO,y$o,x$o,$$o,k2,ape,k$o,S$o,KO,R$o,P$o,B$o,S2,npe,I$o,N$o,ZO,q$o,j$o,D$o,R2,spe,G$o,O$o,eV,V$o,X$o,z$o,P2,lpe,W$o,Q$o,oV,U$o,H$o,J$o,B2,ipe,Y$o,K$o,rV,Z$o,eko,oko,I2,dpe,rko,tko,tV,ako,nko,sko,N2,cpe,lko,iko,aV,dko,cko,fko,q2,fpe,mko,gko,nV,hko,pko,_ko,j2,mpe,uko,bko,sV,vko,Fko,Tko,D2,gpe,Mko,Eko,lV,Cko,wko,Ako,G2,hpe,Lko,yko,iV,xko,$ko,kko,O2,ppe,Sko,Rko,dV,Pko,Bko,Iko,V2,_pe,Nko,qko,cV,jko,Dko,Gko,X2,upe,Oko,Vko,fV,Xko,zko,Wko,z2,bpe,Qko,Uko,mV,Hko,Jko,Yko,W2,vpe,Kko,Zko,gV,eSo,oSo,rSo,Q2,Fpe,tSo,aSo,hV,nSo,sSo,lSo,U2,Tpe,iSo,dSo,pV,cSo,fSo,mSo,H2,Mpe,gSo,hSo,_V,pSo,_So,uSo,J2,Epe,bSo,vSo,uV,FSo,TSo,MSo,Y2,Cpe,ESo,CSo,bV,wSo,ASo,LSo,K2,wpe,ySo,xSo,vV,$So,kSo,SSo,Z2,Ape,RSo,PSo,FV,BSo,ISo,NSo,e1,Lpe,qSo,jSo,TV,DSo,GSo,OSo,o1,ype,VSo,XSo,MV,zSo,WSo,QSo,r1,xpe,USo,HSo,EV,JSo,YSo,KSo,t1,$pe,ZSo,eRo,CV,oRo,rRo,tRo,a1,kpe,aRo,nRo,wV,sRo,lRo,iRo,n1,Spe,dRo,cRo,AV,fRo,mRo,gRo,s1,Rpe,hRo,pRo,LV,_Ro,uRo,bRo,l1,Ppe,vRo,FRo,yV,TRo,MRo,ERo,i1,Bpe,CRo,wRo,xV,ARo,LRo,yRo,d1,Ipe,xRo,$Ro,$V,kRo,SRo,RRo,c1,Npe,PRo,BRo,kV,IRo,NRo,qRo,f1,qpe,jRo,DRo,SV,GRo,ORo,VRo,m1,jpe,XRo,zRo,RV,WRo,QRo,URo,g1,Dpe,HRo,JRo,PV,YRo,KRo,ZRo,h1,Gpe,ePo,oPo,BV,rPo,tPo,aPo,p1,Ope,nPo,sPo,IV,lPo,iPo,dPo,_1,Vpe,cPo,fPo,NV,mPo,gPo,hPo,u1,Xpe,pPo,_Po,qV,uPo,bPo,vPo,b1,zpe,FPo,TPo,jV,MPo,EPo,CPo,v1,Wpe,wPo,APo,DV,LPo,yPo,xPo,F1,Qpe,$Po,kPo,GV,SPo,RPo,PPo,T1,Upe,BPo,IPo,OV,NPo,qPo,jPo,M1,Hpe,DPo,GPo,VV,OPo,VPo,XPo,E1,zPo,Jpe,WPo,QPo,Ype,UPo,HPo,C1,sUe,fd,w1,Kpe,H8,JPo,Zpe,YPo,lUe,Po,J8,KPo,md,ZPo,XV,eBo,oBo,zV,rBo,tBo,aBo,Y8,nBo,e_e,sBo,lBo,iBo,ht,K8,dBo,o_e,cBo,fBo,gd,mBo,r_e,gBo,hBo,WV,pBo,_Bo,uBo,A1,bBo,Ze,Z8,vBo,t_e,FBo,TBo,za,MBo,a_e,EBo,CBo,n_e,wBo,ABo,s_e,LBo,yBo,xBo,z,L1,l_e,$Bo,kBo,QV,SBo,RBo,PBo,y1,i_e,BBo,IBo,UV,NBo,qBo,jBo,x1,d_e,DBo,GBo,HV,OBo,VBo,XBo,$1,c_e,zBo,WBo,JV,QBo,UBo,HBo,k1,f_e,JBo,YBo,YV,KBo,ZBo,eIo,S1,m_e,oIo,rIo,KV,tIo,aIo,nIo,R1,g_e,sIo,lIo,ZV,iIo,dIo,cIo,P1,h_e,fIo,mIo,eX,gIo,hIo,pIo,B1,p_e,_Io,uIo,oX,bIo,vIo,FIo,I1,__e,TIo,MIo,rX,EIo,CIo,wIo,N1,u_e,AIo,LIo,tX,yIo,xIo,$Io,q1,b_e,kIo,SIo,aX,RIo,PIo,BIo,j1,v_e,IIo,NIo,nX,qIo,jIo,DIo,D1,F_e,GIo,OIo,sX,VIo,XIo,zIo,G1,T_e,WIo,QIo,lX,UIo,HIo,JIo,O1,M_e,YIo,KIo,iX,ZIo,eNo,oNo,V1,E_e,rNo,tNo,dX,aNo,nNo,sNo,X1,C_e,lNo,iNo,cX,dNo,cNo,fNo,z1,w_e,mNo,gNo,fX,hNo,pNo,_No,W1,A_e,uNo,bNo,mX,vNo,FNo,TNo,Q1,L_e,MNo,ENo,gX,CNo,wNo,ANo,U1,y_e,LNo,yNo,hX,xNo,$No,kNo,H1,x_e,SNo,RNo,pX,PNo,BNo,INo,J1,$_e,NNo,qNo,_X,jNo,DNo,GNo,Y1,k_e,ONo,VNo,uX,XNo,zNo,WNo,K1,S_e,QNo,UNo,bX,HNo,JNo,YNo,Z1,R_e,KNo,ZNo,vX,eqo,oqo,rqo,e4,P_e,tqo,aqo,FX,nqo,sqo,lqo,o4,B_e,iqo,dqo,TX,cqo,fqo,mqo,r4,I_e,gqo,hqo,MX,pqo,_qo,uqo,t4,N_e,bqo,vqo,EX,Fqo,Tqo,Mqo,a4,q_e,Eqo,Cqo,CX,wqo,Aqo,Lqo,n4,j_e,yqo,xqo,wX,$qo,kqo,Sqo,s4,D_e,Rqo,Pqo,AX,Bqo,Iqo,Nqo,l4,G_e,qqo,jqo,LX,Dqo,Gqo,Oqo,i4,O_e,Vqo,Xqo,yX,zqo,Wqo,Qqo,d4,V_e,Uqo,Hqo,xX,Jqo,Yqo,Kqo,c4,X_e,Zqo,ejo,$X,ojo,rjo,tjo,f4,z_e,ajo,njo,kX,sjo,ljo,ijo,m4,W_e,djo,cjo,SX,fjo,mjo,gjo,g4,hjo,Q_e,pjo,_jo,U_e,ujo,bjo,h4,iUe,hd,p4,H_e,e9,vjo,J_e,Fjo,dUe,Bo,o9,Tjo,pd,Mjo,RX,Ejo,Cjo,PX,wjo,Ajo,Ljo,r9,yjo,Y_e,xjo,$jo,kjo,pt,t9,Sjo,K_e,Rjo,Pjo,_d,Bjo,Z_e,Ijo,Njo,BX,qjo,jjo,Djo,_4,Gjo,eo,a9,Ojo,eue,Vjo,Xjo,Wa,zjo,oue,Wjo,Qjo,rue,Ujo,Hjo,tue,Jjo,Yjo,Kjo,U,u4,aue,Zjo,eDo,IX,oDo,rDo,tDo,b4,nue,aDo,nDo,NX,sDo,lDo,iDo,v4,sue,dDo,cDo,qX,fDo,mDo,gDo,F4,lue,hDo,pDo,jX,_Do,uDo,bDo,T4,iue,vDo,FDo,DX,TDo,MDo,EDo,M4,due,CDo,wDo,GX,ADo,LDo,yDo,E4,cue,xDo,$Do,OX,kDo,SDo,RDo,C4,fue,PDo,BDo,VX,IDo,NDo,qDo,w4,mue,jDo,DDo,XX,GDo,ODo,VDo,A4,gue,XDo,zDo,zX,WDo,QDo,UDo,L4,hue,HDo,JDo,WX,YDo,KDo,ZDo,y4,pue,eGo,oGo,QX,rGo,tGo,aGo,x4,_ue,nGo,sGo,UX,lGo,iGo,dGo,$4,uue,cGo,fGo,HX,mGo,gGo,hGo,k4,bue,pGo,_Go,JX,uGo,bGo,vGo,S4,vue,FGo,TGo,YX,MGo,EGo,CGo,R4,Fue,wGo,AGo,KX,LGo,yGo,xGo,P4,Tue,$Go,kGo,ZX,SGo,RGo,PGo,B4,Mue,BGo,IGo,ez,NGo,qGo,jGo,I4,Eue,DGo,GGo,oz,OGo,VGo,XGo,N4,Cue,zGo,WGo,rz,QGo,UGo,HGo,q4,wue,JGo,YGo,tz,KGo,ZGo,eOo,j4,Aue,oOo,rOo,az,tOo,aOo,nOo,D4,Lue,sOo,lOo,nz,iOo,dOo,cOo,G4,yue,fOo,mOo,sz,gOo,hOo,pOo,O4,xue,_Oo,uOo,lz,bOo,vOo,FOo,V4,$ue,TOo,MOo,iz,EOo,COo,wOo,X4,kue,AOo,LOo,dz,yOo,xOo,$Oo,z4,Sue,kOo,SOo,cz,ROo,POo,BOo,W4,Rue,IOo,NOo,fz,qOo,jOo,DOo,Q4,Pue,GOo,OOo,mz,VOo,XOo,zOo,U4,Bue,WOo,QOo,gz,UOo,HOo,JOo,H4,Iue,YOo,KOo,hz,ZOo,eVo,oVo,J4,Nue,rVo,tVo,que,aVo,nVo,sVo,Y4,jue,lVo,iVo,pz,dVo,cVo,fVo,K4,Due,mVo,gVo,_z,hVo,pVo,_Vo,Z4,Gue,uVo,bVo,uz,vVo,FVo,TVo,eb,Oue,MVo,EVo,bz,CVo,wVo,AVo,ob,LVo,Vue,yVo,xVo,Xue,$Vo,kVo,rb,cUe,ud,tb,zue,n9,SVo,Wue,RVo,fUe,Io,s9,PVo,bd,BVo,vz,IVo,NVo,Fz,qVo,jVo,DVo,l9,GVo,Que,OVo,VVo,XVo,_t,i9,zVo,Uue,WVo,QVo,vd,UVo,Hue,HVo,JVo,Tz,YVo,KVo,ZVo,ab,eXo,oo,d9,oXo,Jue,rXo,tXo,Qa,aXo,Yue,nXo,sXo,Kue,lXo,iXo,Zue,dXo,cXo,fXo,me,nb,e2e,mXo,gXo,Mz,hXo,pXo,_Xo,sb,o2e,uXo,bXo,Ez,vXo,FXo,TXo,lb,r2e,MXo,EXo,Cz,CXo,wXo,AXo,ib,t2e,LXo,yXo,wz,xXo,$Xo,kXo,db,a2e,SXo,RXo,Az,PXo,BXo,IXo,cb,n2e,NXo,qXo,Lz,jXo,DXo,GXo,fb,s2e,OXo,VXo,yz,XXo,zXo,WXo,mb,l2e,QXo,UXo,xz,HXo,JXo,YXo,gb,i2e,KXo,ZXo,$z,ezo,ozo,rzo,hb,d2e,tzo,azo,kz,nzo,szo,lzo,pb,c2e,izo,dzo,Sz,czo,fzo,mzo,_b,f2e,gzo,hzo,Rz,pzo,_zo,uzo,ub,m2e,bzo,vzo,Pz,Fzo,Tzo,Mzo,bb,g2e,Ezo,Czo,Bz,wzo,Azo,Lzo,vb,h2e,yzo,xzo,Iz,$zo,kzo,Szo,Fb,p2e,Rzo,Pzo,Nz,Bzo,Izo,Nzo,Tb,_2e,qzo,jzo,qz,Dzo,Gzo,Ozo,Mb,u2e,Vzo,Xzo,jz,zzo,Wzo,Qzo,Eb,b2e,Uzo,Hzo,Dz,Jzo,Yzo,Kzo,Cb,Zzo,v2e,eWo,oWo,F2e,rWo,tWo,wb,mUe,Fd,Ab,T2e,c9,aWo,M2e,nWo,gUe,No,f9,sWo,Td,lWo,Gz,iWo,dWo,Oz,cWo,fWo,mWo,m9,gWo,E2e,hWo,pWo,_Wo,ut,g9,uWo,C2e,bWo,vWo,Md,FWo,w2e,TWo,MWo,Vz,EWo,CWo,wWo,Lb,AWo,ro,h9,LWo,A2e,yWo,xWo,Ua,$Wo,L2e,kWo,SWo,y2e,RWo,PWo,x2e,BWo,IWo,NWo,N,yb,$2e,qWo,jWo,Xz,DWo,GWo,OWo,xb,k2e,VWo,XWo,zz,zWo,WWo,QWo,$b,S2e,UWo,HWo,Wz,JWo,YWo,KWo,kb,R2e,ZWo,eQo,Qz,oQo,rQo,tQo,Sb,P2e,aQo,nQo,Uz,sQo,lQo,iQo,Rb,B2e,dQo,cQo,Hz,fQo,mQo,gQo,Pb,I2e,hQo,pQo,Jz,_Qo,uQo,bQo,Bb,N2e,vQo,FQo,Yz,TQo,MQo,EQo,Ib,q2e,CQo,wQo,Kz,AQo,LQo,yQo,Nb,j2e,xQo,$Qo,Zz,kQo,SQo,RQo,qb,D2e,PQo,BQo,eW,IQo,NQo,qQo,jb,G2e,jQo,DQo,oW,GQo,OQo,VQo,Db,O2e,XQo,zQo,rW,WQo,QQo,UQo,Gb,V2e,HQo,JQo,tW,YQo,KQo,ZQo,Ob,X2e,eUo,oUo,aW,rUo,tUo,aUo,Vb,z2e,nUo,sUo,nW,lUo,iUo,dUo,Xb,W2e,cUo,fUo,sW,mUo,gUo,hUo,zb,Q2e,pUo,_Uo,lW,uUo,bUo,vUo,Wb,U2e,FUo,TUo,iW,MUo,EUo,CUo,Qb,H2e,wUo,AUo,dW,LUo,yUo,xUo,Ub,J2e,$Uo,kUo,cW,SUo,RUo,PUo,Hb,Y2e,BUo,IUo,fW,NUo,qUo,jUo,Jb,K2e,DUo,GUo,mW,OUo,VUo,XUo,Yb,Z2e,zUo,WUo,gW,QUo,UUo,HUo,Kb,e1e,JUo,YUo,hW,KUo,ZUo,eHo,Zb,o1e,oHo,rHo,pW,tHo,aHo,nHo,ev,r1e,sHo,lHo,_W,iHo,dHo,cHo,ov,t1e,fHo,mHo,uW,gHo,hHo,pHo,rv,a1e,_Ho,uHo,bW,bHo,vHo,FHo,tv,n1e,THo,MHo,vW,EHo,CHo,wHo,av,s1e,AHo,LHo,FW,yHo,xHo,$Ho,nv,l1e,kHo,SHo,TW,RHo,PHo,BHo,sv,i1e,IHo,NHo,MW,qHo,jHo,DHo,lv,d1e,GHo,OHo,EW,VHo,XHo,zHo,iv,c1e,WHo,QHo,CW,UHo,HHo,JHo,dv,f1e,YHo,KHo,wW,ZHo,eJo,oJo,cv,m1e,rJo,tJo,AW,aJo,nJo,sJo,fv,g1e,lJo,iJo,LW,dJo,cJo,fJo,mv,h1e,mJo,gJo,yW,hJo,pJo,_Jo,gv,p1e,uJo,bJo,xW,vJo,FJo,TJo,hv,_1e,MJo,EJo,$W,CJo,wJo,AJo,pv,u1e,LJo,yJo,kW,xJo,$Jo,kJo,_v,b1e,SJo,RJo,SW,PJo,BJo,IJo,uv,v1e,NJo,qJo,RW,jJo,DJo,GJo,bv,F1e,OJo,VJo,PW,XJo,zJo,WJo,vv,T1e,QJo,UJo,BW,HJo,JJo,YJo,Fv,M1e,KJo,ZJo,IW,eYo,oYo,rYo,Tv,E1e,tYo,aYo,NW,nYo,sYo,lYo,Mv,C1e,iYo,dYo,qW,cYo,fYo,mYo,Ev,w1e,gYo,hYo,jW,pYo,_Yo,uYo,Cv,A1e,bYo,vYo,DW,FYo,TYo,MYo,wv,L1e,EYo,CYo,GW,wYo,AYo,LYo,Av,yYo,y1e,xYo,$Yo,x1e,kYo,SYo,Lv,hUe,Ed,yv,$1e,p9,RYo,k1e,PYo,pUe,qo,_9,BYo,Cd,IYo,OW,NYo,qYo,VW,jYo,DYo,GYo,u9,OYo,S1e,VYo,XYo,zYo,bt,b9,WYo,R1e,QYo,UYo,wd,HYo,P1e,JYo,YYo,XW,KYo,ZYo,eKo,xv,oKo,to,v9,rKo,B1e,tKo,aKo,Ha,nKo,I1e,sKo,lKo,N1e,iKo,dKo,q1e,cKo,fKo,mKo,Z,$v,j1e,gKo,hKo,zW,pKo,_Ko,uKo,kv,D1e,bKo,vKo,WW,FKo,TKo,MKo,Sv,G1e,EKo,CKo,QW,wKo,AKo,LKo,Rv,O1e,yKo,xKo,UW,$Ko,kKo,SKo,Pv,V1e,RKo,PKo,HW,BKo,IKo,NKo,Bv,X1e,qKo,jKo,JW,DKo,GKo,OKo,Iv,z1e,VKo,XKo,YW,zKo,WKo,QKo,Nv,W1e,UKo,HKo,KW,JKo,YKo,KKo,qv,Q1e,ZKo,eZo,ZW,oZo,rZo,tZo,jv,U1e,aZo,nZo,eQ,sZo,lZo,iZo,Dv,H1e,dZo,cZo,oQ,fZo,mZo,gZo,Gv,J1e,hZo,pZo,rQ,_Zo,uZo,bZo,Ov,Y1e,vZo,FZo,tQ,TZo,MZo,EZo,Vv,K1e,CZo,wZo,aQ,AZo,LZo,yZo,Xv,Z1e,xZo,$Zo,nQ,kZo,SZo,RZo,zv,e4e,PZo,BZo,sQ,IZo,NZo,qZo,Wv,o4e,jZo,DZo,lQ,GZo,OZo,VZo,Qv,r4e,XZo,zZo,iQ,WZo,QZo,UZo,Uv,t4e,HZo,JZo,dQ,YZo,KZo,ZZo,Hv,a4e,eer,oer,cQ,rer,ter,aer,Jv,n4e,ner,ser,fQ,ler,ier,der,Yv,s4e,cer,fer,mQ,mer,ger,her,Kv,l4e,per,_er,gQ,uer,ber,ver,Zv,i4e,Fer,Ter,hQ,Mer,Eer,Cer,e5,d4e,wer,Aer,pQ,Ler,yer,xer,o5,c4e,$er,ker,_Q,Ser,Rer,Per,r5,f4e,Ber,Ier,uQ,Ner,qer,jer,t5,m4e,Der,Ger,bQ,Oer,Ver,Xer,a5,g4e,zer,Wer,vQ,Qer,Uer,Her,n5,h4e,Jer,Yer,FQ,Ker,Zer,eor,s5,p4e,oor,ror,TQ,tor,aor,nor,l5,sor,_4e,lor,ior,u4e,dor,cor,i5,_Ue,Ad,d5,b4e,F9,mor,v4e,gor,uUe,jo,T9,hor,Ld,por,MQ,_or,uor,EQ,bor,vor,For,M9,Tor,F4e,Mor,Eor,Cor,vt,E9,wor,T4e,Aor,Lor,yd,yor,M4e,xor,$or,CQ,kor,Sor,Ror,c5,Por,ao,C9,Bor,E4e,Ior,Nor,Ja,qor,C4e,jor,Dor,w4e,Gor,Oor,A4e,Vor,Xor,zor,Do,f5,L4e,Wor,Qor,wQ,Uor,Hor,Jor,m5,y4e,Yor,Kor,AQ,Zor,err,orr,g5,x4e,rrr,trr,LQ,arr,nrr,srr,h5,$4e,lrr,irr,yQ,drr,crr,frr,p5,k4e,mrr,grr,xQ,hrr,prr,_rr,_5,S4e,urr,brr,$Q,vrr,Frr,Trr,u5,Mrr,R4e,Err,Crr,P4e,wrr,Arr,b5,bUe,xd,v5,B4e,w9,Lrr,I4e,yrr,vUe,Go,A9,xrr,$d,$rr,kQ,krr,Srr,SQ,Rrr,Prr,Brr,L9,Irr,N4e,Nrr,qrr,jrr,Ft,y9,Drr,q4e,Grr,Orr,kd,Vrr,j4e,Xrr,zrr,RQ,Wrr,Qrr,Urr,F5,Hrr,no,x9,Jrr,D4e,Yrr,Krr,Ya,Zrr,G4e,etr,otr,O4e,rtr,ttr,V4e,atr,ntr,str,H,T5,X4e,ltr,itr,PQ,dtr,ctr,ftr,M5,z4e,mtr,gtr,BQ,htr,ptr,_tr,E5,W4e,utr,btr,IQ,vtr,Ftr,Ttr,C5,Q4e,Mtr,Etr,NQ,Ctr,wtr,Atr,w5,U4e,Ltr,ytr,qQ,xtr,$tr,ktr,A5,H4e,Str,Rtr,jQ,Ptr,Btr,Itr,L5,J4e,Ntr,qtr,DQ,jtr,Dtr,Gtr,y5,Y4e,Otr,Vtr,GQ,Xtr,ztr,Wtr,x5,K4e,Qtr,Utr,OQ,Htr,Jtr,Ytr,$5,Z4e,Ktr,Ztr,VQ,ear,oar,rar,k5,ebe,tar,aar,XQ,nar,sar,lar,S5,obe,iar,dar,zQ,car,far,mar,R5,rbe,gar,har,WQ,par,_ar,uar,P5,tbe,bar,Far,QQ,Tar,Mar,Ear,B5,abe,Car,war,UQ,Aar,Lar,yar,I5,nbe,xar,$ar,HQ,kar,Sar,Rar,N5,sbe,Par,Bar,JQ,Iar,Nar,qar,q5,lbe,jar,Dar,YQ,Gar,Oar,Var,j5,ibe,Xar,zar,KQ,War,Qar,Uar,D5,dbe,Har,Jar,ZQ,Yar,Kar,Zar,G5,cbe,enr,onr,eU,rnr,tnr,anr,O5,fbe,nnr,snr,oU,lnr,inr,dnr,V5,mbe,cnr,fnr,rU,mnr,gnr,hnr,X5,gbe,pnr,_nr,tU,unr,bnr,vnr,z5,hbe,Fnr,Tnr,aU,Mnr,Enr,Cnr,W5,pbe,wnr,Anr,nU,Lnr,ynr,xnr,Q5,_be,$nr,knr,sU,Snr,Rnr,Pnr,U5,ube,Bnr,Inr,lU,Nnr,qnr,jnr,H5,bbe,Dnr,Gnr,iU,Onr,Vnr,Xnr,J5,vbe,znr,Wnr,dU,Qnr,Unr,Hnr,Y5,Fbe,Jnr,Ynr,cU,Knr,Znr,esr,K5,Tbe,osr,rsr,fU,tsr,asr,nsr,Z5,Mbe,ssr,lsr,mU,isr,dsr,csr,eF,Ebe,fsr,msr,gU,gsr,hsr,psr,oF,Cbe,_sr,usr,hU,bsr,vsr,Fsr,rF,wbe,Tsr,Msr,pU,Esr,Csr,wsr,tF,Abe,Asr,Lsr,_U,ysr,xsr,$sr,aF,ksr,Lbe,Ssr,Rsr,ybe,Psr,Bsr,nF,FUe,Sd,sF,xbe,$9,Isr,$be,Nsr,TUe,Oo,k9,qsr,Rd,jsr,uU,Dsr,Gsr,bU,Osr,Vsr,Xsr,S9,zsr,kbe,Wsr,Qsr,Usr,Tt,R9,Hsr,Sbe,Jsr,Ysr,Pd,Ksr,Rbe,Zsr,elr,vU,olr,rlr,tlr,lF,alr,so,P9,nlr,Pbe,slr,llr,Ka,ilr,Bbe,dlr,clr,Ibe,flr,mlr,Nbe,glr,hlr,plr,V,iF,qbe,_lr,ulr,FU,blr,vlr,Flr,dF,jbe,Tlr,Mlr,TU,Elr,Clr,wlr,cF,Dbe,Alr,Llr,MU,ylr,xlr,$lr,fF,Gbe,klr,Slr,EU,Rlr,Plr,Blr,mF,Obe,Ilr,Nlr,CU,qlr,jlr,Dlr,gF,Vbe,Glr,Olr,wU,Vlr,Xlr,zlr,hF,Xbe,Wlr,Qlr,AU,Ulr,Hlr,Jlr,pF,zbe,Ylr,Klr,LU,Zlr,eir,oir,_F,Wbe,rir,tir,yU,air,nir,sir,uF,Qbe,lir,iir,xU,dir,cir,fir,bF,Ube,mir,gir,$U,hir,pir,_ir,vF,Hbe,uir,bir,kU,vir,Fir,Tir,FF,Jbe,Mir,Eir,SU,Cir,wir,Air,TF,Ybe,Lir,yir,RU,xir,$ir,kir,MF,Kbe,Sir,Rir,PU,Pir,Bir,Iir,EF,Zbe,Nir,qir,BU,jir,Dir,Gir,CF,eve,Oir,Vir,IU,Xir,zir,Wir,wF,ove,Qir,Uir,NU,Hir,Jir,Yir,AF,rve,Kir,Zir,qU,edr,odr,rdr,LF,tve,tdr,adr,jU,ndr,sdr,ldr,yF,ave,idr,ddr,DU,cdr,fdr,mdr,xF,nve,gdr,hdr,GU,pdr,_dr,udr,$F,sve,bdr,vdr,OU,Fdr,Tdr,Mdr,kF,lve,Edr,Cdr,VU,wdr,Adr,Ldr,SF,ive,ydr,xdr,XU,$dr,kdr,Sdr,RF,dve,Rdr,Pdr,zU,Bdr,Idr,Ndr,PF,cve,qdr,jdr,WU,Ddr,Gdr,Odr,BF,fve,Vdr,Xdr,QU,zdr,Wdr,Qdr,IF,mve,Udr,Hdr,UU,Jdr,Ydr,Kdr,NF,gve,Zdr,ecr,HU,ocr,rcr,tcr,qF,hve,acr,ncr,JU,scr,lcr,icr,jF,pve,dcr,ccr,YU,fcr,mcr,gcr,DF,_ve,hcr,pcr,KU,_cr,ucr,bcr,GF,uve,vcr,Fcr,ZU,Tcr,Mcr,Ecr,OF,bve,Ccr,wcr,eH,Acr,Lcr,ycr,VF,vve,xcr,$cr,oH,kcr,Scr,Rcr,XF,Fve,Pcr,Bcr,rH,Icr,Ncr,qcr,zF,Tve,jcr,Dcr,tH,Gcr,Ocr,Vcr,WF,Mve,Xcr,zcr,aH,Wcr,Qcr,Ucr,QF,Eve,Hcr,Jcr,nH,Ycr,Kcr,Zcr,UF,Cve,efr,ofr,sH,rfr,tfr,afr,HF,wve,nfr,sfr,lH,lfr,ifr,dfr,JF,Ave,cfr,ffr,iH,mfr,gfr,hfr,YF,pfr,Lve,_fr,ufr,yve,bfr,vfr,KF,MUe,Bd,ZF,xve,B9,Ffr,$ve,Tfr,EUe,Vo,I9,Mfr,Id,Efr,dH,Cfr,wfr,cH,Afr,Lfr,yfr,N9,xfr,kve,$fr,kfr,Sfr,Mt,q9,Rfr,Sve,Pfr,Bfr,Nd,Ifr,Rve,Nfr,qfr,fH,jfr,Dfr,Gfr,eT,Ofr,lo,j9,Vfr,Pve,Xfr,zfr,Za,Wfr,Bve,Qfr,Ufr,Ive,Hfr,Jfr,Nve,Yfr,Kfr,Zfr,qve,oT,jve,emr,omr,mH,rmr,tmr,amr,rT,nmr,Dve,smr,lmr,Gve,imr,dmr,tT,CUe,qd,aT,Ove,D9,cmr,Vve,fmr,wUe,Xo,G9,mmr,jd,gmr,gH,hmr,pmr,hH,_mr,umr,bmr,O9,vmr,Xve,Fmr,Tmr,Mmr,Et,V9,Emr,zve,Cmr,wmr,Dd,Amr,Wve,Lmr,ymr,pH,xmr,$mr,kmr,nT,Smr,io,X9,Rmr,Qve,Pmr,Bmr,en,Imr,Uve,Nmr,qmr,Hve,jmr,Dmr,Jve,Gmr,Omr,Vmr,be,sT,Yve,Xmr,zmr,_H,Wmr,Qmr,Umr,lT,Kve,Hmr,Jmr,uH,Ymr,Kmr,Zmr,iT,Zve,egr,ogr,bH,rgr,tgr,agr,dT,e5e,ngr,sgr,vH,lgr,igr,dgr,dl,o5e,cgr,fgr,FH,mgr,ggr,TH,hgr,pgr,_gr,cT,r5e,ugr,bgr,MH,vgr,Fgr,Tgr,cl,t5e,Mgr,Egr,EH,Cgr,wgr,CH,Agr,Lgr,ygr,fT,a5e,xgr,$gr,wH,kgr,Sgr,Rgr,Ct,n5e,Pgr,Bgr,AH,Igr,Ngr,LH,qgr,jgr,yH,Dgr,Ggr,Ogr,mT,s5e,Vgr,Xgr,xH,zgr,Wgr,Qgr,gT,l5e,Ugr,Hgr,$H,Jgr,Ygr,Kgr,hT,i5e,Zgr,ehr,kH,ohr,rhr,thr,pT,d5e,ahr,nhr,SH,shr,lhr,ihr,_T,c5e,dhr,chr,RH,fhr,mhr,ghr,uT,f5e,hhr,phr,PH,_hr,uhr,bhr,bT,m5e,vhr,Fhr,BH,Thr,Mhr,Ehr,vT,g5e,Chr,whr,IH,Ahr,Lhr,yhr,FT,xhr,h5e,$hr,khr,p5e,Shr,Rhr,TT,AUe,Gd,MT,_5e,z9,Phr,u5e,Bhr,LUe,zo,W9,Ihr,Od,Nhr,NH,qhr,jhr,qH,Dhr,Ghr,Ohr,Q9,Vhr,b5e,Xhr,zhr,Whr,wt,U9,Qhr,v5e,Uhr,Hhr,Vd,Jhr,F5e,Yhr,Khr,jH,Zhr,epr,opr,ET,rpr,co,H9,tpr,T5e,apr,npr,on,spr,M5e,lpr,ipr,E5e,dpr,cpr,C5e,fpr,mpr,gpr,w5e,CT,A5e,hpr,ppr,DH,_pr,upr,bpr,wT,vpr,L5e,Fpr,Tpr,y5e,Mpr,Epr,AT,yUe,Xd,LT,x5e,J9,Cpr,$5e,wpr,xUe,Wo,Y9,Apr,zd,Lpr,GH,ypr,xpr,OH,$pr,kpr,Spr,K9,Rpr,k5e,Ppr,Bpr,Ipr,At,Z9,Npr,S5e,qpr,jpr,Wd,Dpr,R5e,Gpr,Opr,VH,Vpr,Xpr,zpr,yT,Wpr,fo,ex,Qpr,P5e,Upr,Hpr,rn,Jpr,B5e,Ypr,Kpr,I5e,Zpr,e_r,N5e,o_r,r_r,t_r,q5e,xT,j5e,a_r,n_r,XH,s_r,l_r,i_r,$T,d_r,D5e,c_r,f_r,G5e,m_r,g_r,kT,$Ue,Qd,ST,O5e,ox,h_r,V5e,p_r,kUe,Qo,rx,__r,Ud,u_r,zH,b_r,v_r,WH,F_r,T_r,M_r,tx,E_r,X5e,C_r,w_r,A_r,Lt,ax,L_r,z5e,y_r,x_r,Hd,$_r,W5e,k_r,S_r,QH,R_r,P_r,B_r,RT,I_r,mo,nx,N_r,Q5e,q_r,j_r,tn,D_r,U5e,G_r,O_r,H5e,V_r,X_r,J5e,z_r,W_r,Q_r,Y5e,PT,K5e,U_r,H_r,UH,J_r,Y_r,K_r,BT,Z_r,Z5e,eur,our,eFe,rur,tur,IT,SUe,Jd,NT,oFe,sx,aur,rFe,nur,RUe,Uo,lx,sur,Yd,lur,HH,iur,dur,JH,cur,fur,mur,ix,gur,tFe,hur,pur,_ur,yt,dx,uur,aFe,bur,vur,Kd,Fur,nFe,Tur,Mur,YH,Eur,Cur,wur,qT,Aur,go,cx,Lur,sFe,yur,xur,an,$ur,lFe,kur,Sur,iFe,Rur,Pur,dFe,Bur,Iur,Nur,Pe,jT,cFe,qur,jur,KH,Dur,Gur,Our,DT,fFe,Vur,Xur,ZH,zur,Wur,Qur,GT,mFe,Uur,Hur,eJ,Jur,Yur,Kur,OT,gFe,Zur,e2r,oJ,o2r,r2r,t2r,VT,hFe,a2r,n2r,rJ,s2r,l2r,i2r,XT,pFe,d2r,c2r,tJ,f2r,m2r,g2r,zT,_Fe,h2r,p2r,aJ,_2r,u2r,b2r,WT,uFe,v2r,F2r,nJ,T2r,M2r,E2r,QT,bFe,C2r,w2r,sJ,A2r,L2r,y2r,UT,x2r,vFe,$2r,k2r,FFe,S2r,R2r,HT,PUe,Zd,JT,TFe,fx,P2r,MFe,B2r,BUe,Ho,mx,I2r,ec,N2r,lJ,q2r,j2r,iJ,D2r,G2r,O2r,gx,V2r,EFe,X2r,z2r,W2r,xt,hx,Q2r,CFe,U2r,H2r,oc,J2r,wFe,Y2r,K2r,dJ,Z2r,e1r,o1r,YT,r1r,ho,px,t1r,AFe,a1r,n1r,nn,s1r,LFe,l1r,i1r,yFe,d1r,c1r,xFe,f1r,m1r,g1r,st,KT,$Fe,h1r,p1r,cJ,_1r,u1r,b1r,ZT,kFe,v1r,F1r,fJ,T1r,M1r,E1r,e7,SFe,C1r,w1r,mJ,A1r,L1r,y1r,o7,RFe,x1r,$1r,gJ,k1r,S1r,R1r,r7,PFe,P1r,B1r,hJ,I1r,N1r,q1r,t7,j1r,BFe,D1r,G1r,IFe,O1r,V1r,a7,IUe,rc,n7,NFe,_x,X1r,qFe,z1r,NUe,Jo,ux,W1r,tc,Q1r,pJ,U1r,H1r,_J,J1r,Y1r,K1r,bx,Z1r,jFe,e4r,o4r,r4r,$t,vx,t4r,DFe,a4r,n4r,ac,s4r,GFe,l4r,i4r,uJ,d4r,c4r,f4r,s7,m4r,po,Fx,g4r,OFe,h4r,p4r,sn,_4r,VFe,u4r,b4r,XFe,v4r,F4r,zFe,T4r,M4r,E4r,Le,l7,WFe,C4r,w4r,bJ,A4r,L4r,y4r,i7,QFe,x4r,$4r,vJ,k4r,S4r,R4r,d7,UFe,P4r,B4r,FJ,I4r,N4r,q4r,c7,HFe,j4r,D4r,TJ,G4r,O4r,V4r,f7,JFe,X4r,z4r,MJ,W4r,Q4r,U4r,m7,YFe,H4r,J4r,EJ,Y4r,K4r,Z4r,g7,KFe,ebr,obr,CJ,rbr,tbr,abr,h7,ZFe,nbr,sbr,wJ,lbr,ibr,dbr,p7,eTe,cbr,fbr,AJ,mbr,gbr,hbr,_7,oTe,pbr,_br,LJ,ubr,bbr,vbr,u7,Fbr,rTe,Tbr,Mbr,tTe,Ebr,Cbr,b7,qUe,nc,v7,aTe,Tx,wbr,nTe,Abr,jUe,Yo,Mx,Lbr,sc,ybr,yJ,xbr,$br,xJ,kbr,Sbr,Rbr,Ex,Pbr,sTe,Bbr,Ibr,Nbr,kt,Cx,qbr,lTe,jbr,Dbr,lc,Gbr,iTe,Obr,Vbr,$J,Xbr,zbr,Wbr,F7,Qbr,_o,wx,Ubr,dTe,Hbr,Jbr,ln,Ybr,cTe,Kbr,Zbr,fTe,evr,ovr,mTe,rvr,tvr,avr,Ax,T7,gTe,nvr,svr,kJ,lvr,ivr,dvr,M7,hTe,cvr,fvr,SJ,mvr,gvr,hvr,E7,pvr,pTe,_vr,uvr,_Te,bvr,vvr,C7,DUe,ic,w7,uTe,Lx,Fvr,bTe,Tvr,GUe,Ko,yx,Mvr,dc,Evr,RJ,Cvr,wvr,PJ,Avr,Lvr,yvr,xx,xvr,vTe,$vr,kvr,Svr,St,$x,Rvr,FTe,Pvr,Bvr,cc,Ivr,TTe,Nvr,qvr,BJ,jvr,Dvr,Gvr,A7,Ovr,uo,kx,Vvr,MTe,Xvr,zvr,dn,Wvr,ETe,Qvr,Uvr,CTe,Hvr,Jvr,wTe,Yvr,Kvr,Zvr,lt,L7,ATe,e5r,o5r,IJ,r5r,t5r,a5r,y7,LTe,n5r,s5r,NJ,l5r,i5r,d5r,x7,yTe,c5r,f5r,qJ,m5r,g5r,h5r,$7,xTe,p5r,_5r,jJ,u5r,b5r,v5r,k7,$Te,F5r,T5r,DJ,M5r,E5r,C5r,S7,w5r,kTe,A5r,L5r,STe,y5r,x5r,R7,OUe,fc,P7,RTe,Sx,$5r,PTe,k5r,VUe,Zo,Rx,S5r,mc,R5r,GJ,P5r,B5r,OJ,I5r,N5r,q5r,Px,j5r,BTe,D5r,G5r,O5r,Rt,Bx,V5r,ITe,X5r,z5r,gc,W5r,NTe,Q5r,U5r,VJ,H5r,J5r,Y5r,B7,K5r,bo,Ix,Z5r,qTe,eFr,oFr,cn,rFr,jTe,tFr,aFr,DTe,nFr,sFr,GTe,lFr,iFr,dFr,fn,I7,OTe,cFr,fFr,XJ,mFr,gFr,hFr,N7,VTe,pFr,_Fr,zJ,uFr,bFr,vFr,q7,XTe,FFr,TFr,WJ,MFr,EFr,CFr,j7,zTe,wFr,AFr,QJ,LFr,yFr,xFr,D7,$Fr,WTe,kFr,SFr,QTe,RFr,PFr,G7,XUe,hc,O7,UTe,Nx,BFr,HTe,IFr,zUe,er,qx,NFr,pc,qFr,UJ,jFr,DFr,HJ,GFr,OFr,VFr,jx,XFr,JTe,zFr,WFr,QFr,Pt,Dx,UFr,YTe,HFr,JFr,_c,YFr,KTe,KFr,ZFr,JJ,eTr,oTr,rTr,V7,tTr,vo,Gx,aTr,ZTe,nTr,sTr,mn,lTr,e7e,iTr,dTr,o7e,cTr,fTr,r7e,mTr,gTr,hTr,Ox,X7,t7e,pTr,_Tr,YJ,uTr,bTr,vTr,z7,a7e,FTr,TTr,KJ,MTr,ETr,CTr,W7,wTr,n7e,ATr,LTr,s7e,yTr,xTr,Q7,WUe,uc,U7,l7e,Vx,$Tr,i7e,kTr,QUe,or,Xx,STr,bc,RTr,ZJ,PTr,BTr,eY,ITr,NTr,qTr,zx,jTr,d7e,DTr,GTr,OTr,Bt,Wx,VTr,c7e,XTr,zTr,vc,WTr,f7e,QTr,UTr,oY,HTr,JTr,YTr,H7,KTr,Fo,Qx,ZTr,m7e,e7r,o7r,gn,r7r,g7e,t7r,a7r,h7e,n7r,s7r,p7e,l7r,i7r,d7r,_7e,J7,u7e,c7r,f7r,rY,m7r,g7r,h7r,Y7,p7r,b7e,_7r,u7r,v7e,b7r,v7r,K7,UUe,Fc,Z7,F7e,Ux,F7r,T7e,T7r,HUe,rr,Hx,M7r,Tc,E7r,tY,C7r,w7r,aY,A7r,L7r,y7r,Jx,x7r,M7e,$7r,k7r,S7r,It,Yx,R7r,E7e,P7r,B7r,Mc,I7r,C7e,N7r,q7r,nY,j7r,D7r,G7r,eM,O7r,To,Kx,V7r,w7e,X7r,z7r,hn,W7r,A7e,Q7r,U7r,L7e,H7r,J7r,y7e,Y7r,K7r,Z7r,it,oM,x7e,eMr,oMr,sY,rMr,tMr,aMr,rM,$7e,nMr,sMr,lY,lMr,iMr,dMr,tM,k7e,cMr,fMr,iY,mMr,gMr,hMr,aM,S7e,pMr,_Mr,dY,uMr,bMr,vMr,nM,R7e,FMr,TMr,cY,MMr,EMr,CMr,sM,wMr,P7e,AMr,LMr,B7e,yMr,xMr,lM,JUe,Ec,iM,I7e,Zx,$Mr,N7e,kMr,YUe,tr,e$,SMr,Cc,RMr,fY,PMr,BMr,mY,IMr,NMr,qMr,o$,jMr,q7e,DMr,GMr,OMr,Nt,r$,VMr,j7e,XMr,zMr,wc,WMr,D7e,QMr,UMr,gY,HMr,JMr,YMr,dM,KMr,Mo,t$,ZMr,G7e,eEr,oEr,pn,rEr,O7e,tEr,aEr,V7e,nEr,sEr,X7e,lEr,iEr,dEr,z7e,cM,W7e,cEr,fEr,hY,mEr,gEr,hEr,fM,pEr,Q7e,_Er,uEr,U7e,bEr,vEr,mM,KUe,Ac,gM,H7e,a$,FEr,J7e,TEr,ZUe,ar,n$,MEr,Lc,EEr,pY,CEr,wEr,_Y,AEr,LEr,yEr,s$,xEr,Y7e,$Er,kEr,SEr,qt,l$,REr,K7e,PEr,BEr,yc,IEr,Z7e,NEr,qEr,uY,jEr,DEr,GEr,hM,OEr,Rr,i$,VEr,eMe,XEr,zEr,_n,WEr,oMe,QEr,UEr,rMe,HEr,JEr,tMe,YEr,KEr,ZEr,q,pM,aMe,eCr,oCr,bY,rCr,tCr,aCr,_M,nMe,nCr,sCr,vY,lCr,iCr,dCr,uM,sMe,cCr,fCr,FY,mCr,gCr,hCr,bM,lMe,pCr,_Cr,TY,uCr,bCr,vCr,vM,iMe,FCr,TCr,MY,MCr,ECr,CCr,FM,dMe,wCr,ACr,EY,LCr,yCr,xCr,TM,cMe,$Cr,kCr,CY,SCr,RCr,PCr,MM,fMe,BCr,ICr,wY,NCr,qCr,jCr,EM,mMe,DCr,GCr,AY,OCr,VCr,XCr,CM,gMe,zCr,WCr,LY,QCr,UCr,HCr,wM,hMe,JCr,YCr,yY,KCr,ZCr,e3r,AM,pMe,o3r,r3r,xY,t3r,a3r,n3r,LM,_Me,s3r,l3r,$Y,i3r,d3r,c3r,yM,uMe,f3r,m3r,kY,g3r,h3r,p3r,xM,bMe,_3r,u3r,SY,b3r,v3r,F3r,$M,vMe,T3r,M3r,RY,E3r,C3r,w3r,kM,FMe,A3r,L3r,PY,y3r,x3r,$3r,SM,TMe,k3r,S3r,BY,R3r,P3r,B3r,fl,MMe,I3r,N3r,IY,q3r,j3r,NY,D3r,G3r,O3r,RM,EMe,V3r,X3r,qY,z3r,W3r,Q3r,PM,CMe,U3r,H3r,jY,J3r,Y3r,K3r,BM,wMe,Z3r,e0r,DY,o0r,r0r,t0r,IM,AMe,a0r,n0r,GY,s0r,l0r,i0r,NM,LMe,d0r,c0r,OY,f0r,m0r,g0r,qM,yMe,h0r,p0r,VY,_0r,u0r,b0r,jM,xMe,v0r,F0r,XY,T0r,M0r,E0r,DM,$Me,C0r,w0r,zY,A0r,L0r,y0r,GM,kMe,x0r,$0r,WY,k0r,S0r,R0r,OM,SMe,P0r,B0r,QY,I0r,N0r,q0r,VM,RMe,j0r,D0r,UY,G0r,O0r,V0r,XM,PMe,X0r,z0r,HY,W0r,Q0r,U0r,zM,BMe,H0r,J0r,JY,Y0r,K0r,Z0r,WM,IMe,ewr,owr,YY,rwr,twr,awr,QM,NMe,nwr,swr,KY,lwr,iwr,dwr,UM,qMe,cwr,fwr,ZY,mwr,gwr,hwr,HM,jMe,pwr,_wr,eK,uwr,bwr,vwr,JM,DMe,Fwr,Twr,oK,Mwr,Ewr,Cwr,YM,GMe,wwr,Awr,rK,Lwr,ywr,xwr,KM,OMe,$wr,kwr,tK,Swr,Rwr,Pwr,ZM,VMe,Bwr,Iwr,aK,Nwr,qwr,jwr,eE,XMe,Dwr,Gwr,nK,Owr,Vwr,Xwr,oE,zMe,zwr,Wwr,sK,Qwr,Uwr,Hwr,rE,WMe,Jwr,Ywr,lK,Kwr,Zwr,e6r,tE,QMe,o6r,r6r,iK,t6r,a6r,n6r,aE,UMe,s6r,l6r,dK,i6r,d6r,c6r,nE,HMe,f6r,m6r,cK,g6r,h6r,p6r,sE,JMe,_6r,u6r,fK,b6r,v6r,F6r,lE,YMe,T6r,M6r,mK,E6r,C6r,w6r,iE,KMe,A6r,L6r,gK,y6r,x6r,$6r,dE,ZMe,k6r,S6r,hK,R6r,P6r,B6r,cE,eEe,I6r,N6r,pK,q6r,j6r,D6r,fE,eHe,xc,mE,oEe,d$,G6r,rEe,O6r,oHe,nr,c$,V6r,$c,X6r,_K,z6r,W6r,uK,Q6r,U6r,H6r,f$,J6r,tEe,Y6r,K6r,Z6r,jt,m$,eAr,aEe,oAr,rAr,kc,tAr,nEe,aAr,nAr,bK,sAr,lAr,iAr,gE,dAr,Pr,g$,cAr,sEe,fAr,mAr,un,gAr,lEe,hAr,pAr,iEe,_Ar,uAr,dEe,bAr,vAr,FAr,se,hE,cEe,TAr,MAr,vK,EAr,CAr,wAr,pE,fEe,AAr,LAr,FK,yAr,xAr,$Ar,_E,mEe,kAr,SAr,TK,RAr,PAr,BAr,uE,gEe,IAr,NAr,MK,qAr,jAr,DAr,bE,hEe,GAr,OAr,EK,VAr,XAr,zAr,vE,pEe,WAr,QAr,CK,UAr,HAr,JAr,FE,_Ee,YAr,KAr,wK,ZAr,eLr,oLr,TE,uEe,rLr,tLr,AK,aLr,nLr,sLr,ME,bEe,lLr,iLr,LK,dLr,cLr,fLr,EE,vEe,mLr,gLr,yK,hLr,pLr,_Lr,CE,FEe,uLr,bLr,xK,vLr,FLr,TLr,wE,TEe,MLr,ELr,$K,CLr,wLr,ALr,AE,MEe,LLr,yLr,kK,xLr,$Lr,kLr,LE,EEe,SLr,RLr,SK,PLr,BLr,ILr,yE,CEe,NLr,qLr,RK,jLr,DLr,GLr,xE,wEe,OLr,VLr,PK,XLr,zLr,WLr,$E,AEe,QLr,ULr,BK,HLr,JLr,YLr,kE,LEe,KLr,ZLr,IK,eyr,oyr,ryr,SE,yEe,tyr,ayr,NK,nyr,syr,lyr,RE,xEe,iyr,dyr,qK,cyr,fyr,myr,PE,$Ee,gyr,hyr,jK,pyr,_yr,uyr,BE,kEe,byr,vyr,DK,Fyr,Tyr,Myr,IE,SEe,Eyr,Cyr,GK,wyr,Ayr,Lyr,NE,rHe,Sc,qE,REe,h$,yyr,PEe,xyr,tHe,sr,p$,$yr,Rc,kyr,OK,Syr,Ryr,VK,Pyr,Byr,Iyr,_$,Nyr,BEe,qyr,jyr,Dyr,Dt,u$,Gyr,IEe,Oyr,Vyr,Pc,Xyr,NEe,zyr,Wyr,XK,Qyr,Uyr,Hyr,jE,Jyr,Br,b$,Yyr,qEe,Kyr,Zyr,bn,e8r,jEe,o8r,r8r,DEe,t8r,a8r,GEe,n8r,s8r,l8r,Me,DE,OEe,i8r,d8r,zK,c8r,f8r,m8r,GE,VEe,g8r,h8r,WK,p8r,_8r,u8r,OE,XEe,b8r,v8r,QK,F8r,T8r,M8r,VE,zEe,E8r,C8r,UK,w8r,A8r,L8r,XE,WEe,y8r,x8r,HK,$8r,k8r,S8r,zE,QEe,R8r,P8r,JK,B8r,I8r,N8r,WE,UEe,q8r,j8r,YK,D8r,G8r,O8r,QE,HEe,V8r,X8r,KK,z8r,W8r,Q8r,UE,JEe,U8r,H8r,ZK,J8r,Y8r,K8r,HE,YEe,Z8r,e9r,eZ,o9r,r9r,t9r,JE,KEe,a9r,n9r,oZ,s9r,l9r,i9r,YE,ZEe,d9r,c9r,rZ,f9r,m9r,g9r,KE,eCe,h9r,p9r,tZ,_9r,u9r,b9r,ZE,aHe,Bc,eC,oCe,v$,v9r,rCe,F9r,nHe,lr,F$,T9r,Ic,M9r,aZ,E9r,C9r,nZ,w9r,A9r,L9r,T$,y9r,tCe,x9r,$9r,k9r,Gt,M$,S9r,aCe,R9r,P9r,Nc,B9r,nCe,I9r,N9r,sZ,q9r,j9r,D9r,oC,G9r,Ir,E$,O9r,sCe,V9r,X9r,vn,z9r,lCe,W9r,Q9r,iCe,U9r,H9r,dCe,J9r,Y9r,K9r,Ve,rC,cCe,Z9r,exr,lZ,oxr,rxr,txr,tC,fCe,axr,nxr,iZ,sxr,lxr,ixr,ml,mCe,dxr,cxr,dZ,fxr,mxr,cZ,gxr,hxr,pxr,aC,gCe,_xr,uxr,fZ,bxr,vxr,Fxr,nC,hCe,Txr,Mxr,mZ,Exr,Cxr,wxr,sC,pCe,Axr,Lxr,gZ,yxr,xxr,$xr,lC,_Ce,kxr,Sxr,hZ,Rxr,Pxr,Bxr,iC,uCe,Ixr,Nxr,pZ,qxr,jxr,Dxr,dC,sHe,qc,cC,bCe,C$,Gxr,vCe,Oxr,lHe,ir,w$,Vxr,jc,Xxr,_Z,zxr,Wxr,uZ,Qxr,Uxr,Hxr,A$,Jxr,FCe,Yxr,Kxr,Zxr,Ot,L$,e$r,TCe,o$r,r$r,Dc,t$r,MCe,a$r,n$r,bZ,s$r,l$r,i$r,fC,d$r,Nr,y$,c$r,ECe,f$r,m$r,Fn,g$r,CCe,h$r,p$r,wCe,_$r,u$r,ACe,b$r,v$r,F$r,x$,mC,LCe,T$r,M$r,vZ,E$r,C$r,w$r,gC,yCe,A$r,L$r,FZ,y$r,x$r,$$r,hC,iHe,Gc,pC,xCe,$$,k$r,$Ce,S$r,dHe,dr,k$,R$r,Oc,P$r,TZ,B$r,I$r,MZ,N$r,q$r,j$r,S$,D$r,kCe,G$r,O$r,V$r,Vt,R$,X$r,SCe,z$r,W$r,Vc,Q$r,RCe,U$r,H$r,EZ,J$r,Y$r,K$r,_C,Z$r,qr,P$,ekr,PCe,okr,rkr,Tn,tkr,BCe,akr,nkr,ICe,skr,lkr,NCe,ikr,dkr,ckr,de,uC,qCe,fkr,mkr,CZ,gkr,hkr,pkr,bC,jCe,_kr,ukr,wZ,bkr,vkr,Fkr,vC,DCe,Tkr,Mkr,AZ,Ekr,Ckr,wkr,FC,GCe,Akr,Lkr,LZ,ykr,xkr,$kr,TC,OCe,kkr,Skr,yZ,Rkr,Pkr,Bkr,MC,VCe,Ikr,Nkr,xZ,qkr,jkr,Dkr,EC,XCe,Gkr,Okr,$Z,Vkr,Xkr,zkr,CC,zCe,Wkr,Qkr,kZ,Ukr,Hkr,Jkr,wC,WCe,Ykr,Kkr,SZ,Zkr,eSr,oSr,AC,QCe,rSr,tSr,RZ,aSr,nSr,sSr,LC,UCe,lSr,iSr,PZ,dSr,cSr,fSr,yC,HCe,mSr,gSr,BZ,hSr,pSr,_Sr,xC,JCe,uSr,bSr,IZ,vSr,FSr,TSr,$C,YCe,MSr,ESr,NZ,CSr,wSr,ASr,kC,KCe,LSr,ySr,qZ,xSr,$Sr,kSr,SC,ZCe,SSr,RSr,jZ,PSr,BSr,ISr,RC,e3e,NSr,qSr,DZ,jSr,DSr,GSr,PC,o3e,OSr,VSr,GZ,XSr,zSr,WSr,BC,r3e,QSr,USr,OZ,HSr,JSr,YSr,IC,t3e,KSr,ZSr,VZ,eRr,oRr,rRr,NC,cHe,Xc,qC,a3e,B$,tRr,n3e,aRr,fHe,cr,I$,nRr,zc,sRr,XZ,lRr,iRr,zZ,dRr,cRr,fRr,N$,mRr,s3e,gRr,hRr,pRr,Xt,q$,_Rr,l3e,uRr,bRr,Wc,vRr,i3e,FRr,TRr,WZ,MRr,ERr,CRr,jC,wRr,jr,j$,ARr,d3e,LRr,yRr,Mn,xRr,c3e,$Rr,kRr,f3e,SRr,RRr,m3e,PRr,BRr,IRr,ye,DC,g3e,NRr,qRr,QZ,jRr,DRr,GRr,GC,h3e,ORr,VRr,UZ,XRr,zRr,WRr,OC,p3e,QRr,URr,HZ,HRr,JRr,YRr,VC,_3e,KRr,ZRr,JZ,ePr,oPr,rPr,XC,u3e,tPr,aPr,YZ,nPr,sPr,lPr,zC,b3e,iPr,dPr,KZ,cPr,fPr,mPr,WC,v3e,gPr,hPr,ZZ,pPr,_Pr,uPr,QC,F3e,bPr,vPr,eee,FPr,TPr,MPr,UC,T3e,EPr,CPr,oee,wPr,APr,LPr,HC,M3e,yPr,xPr,ree,$Pr,kPr,SPr,JC,mHe,Qc,YC,E3e,D$,RPr,C3e,PPr,gHe,fr,G$,BPr,Uc,IPr,tee,NPr,qPr,aee,jPr,DPr,GPr,O$,OPr,w3e,VPr,XPr,zPr,zt,V$,WPr,A3e,QPr,UPr,Hc,HPr,L3e,JPr,YPr,nee,KPr,ZPr,eBr,KC,oBr,Dr,X$,rBr,y3e,tBr,aBr,En,nBr,x3e,sBr,lBr,$3e,iBr,dBr,k3e,cBr,fBr,mBr,te,ZC,S3e,gBr,hBr,see,pBr,_Br,uBr,e3,R3e,bBr,vBr,lee,FBr,TBr,MBr,o3,P3e,EBr,CBr,iee,wBr,ABr,LBr,r3,B3e,yBr,xBr,dee,$Br,kBr,SBr,t3,I3e,RBr,PBr,cee,BBr,IBr,NBr,a3,N3e,qBr,jBr,fee,DBr,GBr,OBr,n3,q3e,VBr,XBr,mee,zBr,WBr,QBr,s3,j3e,UBr,HBr,gee,JBr,YBr,KBr,l3,D3e,ZBr,eIr,hee,oIr,rIr,tIr,i3,G3e,aIr,nIr,pee,sIr,lIr,iIr,d3,O3e,dIr,cIr,_ee,fIr,mIr,gIr,c3,V3e,hIr,pIr,uee,_Ir,uIr,bIr,f3,X3e,vIr,FIr,bee,TIr,MIr,EIr,m3,z3e,CIr,wIr,vee,AIr,LIr,yIr,g3,W3e,xIr,$Ir,Fee,kIr,SIr,RIr,h3,Q3e,PIr,BIr,Tee,IIr,NIr,qIr,p3,U3e,jIr,DIr,Mee,GIr,OIr,VIr,_3,H3e,XIr,zIr,Eee,WIr,QIr,UIr,u3,J3e,HIr,JIr,Cee,YIr,KIr,ZIr,b3,Y3e,eNr,oNr,wee,rNr,tNr,aNr,v3,K3e,nNr,sNr,Aee,lNr,iNr,dNr,F3,Z3e,cNr,fNr,Lee,mNr,gNr,hNr,T3,e0e,pNr,_Nr,yee,uNr,bNr,vNr,M3,o0e,FNr,TNr,xee,MNr,ENr,CNr,E3,r0e,wNr,ANr,$ee,LNr,yNr,xNr,C3,t0e,$Nr,kNr,kee,SNr,RNr,PNr,w3,hHe,Jc,A3,a0e,z$,BNr,n0e,INr,pHe,mr,W$,NNr,Yc,qNr,See,jNr,DNr,Ree,GNr,ONr,VNr,Q$,XNr,s0e,zNr,WNr,QNr,Wt,U$,UNr,l0e,HNr,JNr,Kc,YNr,i0e,KNr,ZNr,Pee,eqr,oqr,rqr,L3,tqr,Gr,H$,aqr,d0e,nqr,sqr,Cn,lqr,c0e,iqr,dqr,f0e,cqr,fqr,m0e,mqr,gqr,hqr,ve,y3,g0e,pqr,_qr,Bee,uqr,bqr,vqr,x3,h0e,Fqr,Tqr,Iee,Mqr,Eqr,Cqr,$3,p0e,wqr,Aqr,Nee,Lqr,yqr,xqr,k3,_0e,$qr,kqr,qee,Sqr,Rqr,Pqr,S3,u0e,Bqr,Iqr,jee,Nqr,qqr,jqr,R3,b0e,Dqr,Gqr,Dee,Oqr,Vqr,Xqr,P3,v0e,zqr,Wqr,Gee,Qqr,Uqr,Hqr,B3,F0e,Jqr,Yqr,Oee,Kqr,Zqr,ejr,I3,T0e,ojr,rjr,Vee,tjr,ajr,njr,N3,M0e,sjr,ljr,Xee,ijr,djr,cjr,q3,E0e,fjr,mjr,zee,gjr,hjr,pjr,j3,C0e,_jr,ujr,Wee,bjr,vjr,Fjr,D3,w0e,Tjr,Mjr,Qee,Ejr,Cjr,wjr,G3,A0e,Ajr,Ljr,Uee,yjr,xjr,$jr,O3,L0e,kjr,Sjr,Hee,Rjr,Pjr,Bjr,V3,y0e,Ijr,Njr,Jee,qjr,jjr,Djr,X3,x0e,Gjr,Ojr,Yee,Vjr,Xjr,zjr,z3,_He,Zc,W3,$0e,J$,Wjr,k0e,Qjr,uHe,gr,Y$,Ujr,ef,Hjr,Kee,Jjr,Yjr,Zee,Kjr,Zjr,eDr,K$,oDr,S0e,rDr,tDr,aDr,Qt,Z$,nDr,R0e,sDr,lDr,of,iDr,P0e,dDr,cDr,eoe,fDr,mDr,gDr,Q3,hDr,Or,ek,pDr,B0e,_Dr,uDr,wn,bDr,I0e,vDr,FDr,N0e,TDr,MDr,q0e,EDr,CDr,wDr,ok,U3,j0e,ADr,LDr,ooe,yDr,xDr,$Dr,H3,D0e,kDr,SDr,roe,RDr,PDr,BDr,J3,bHe,rf,Y3,G0e,rk,IDr,O0e,NDr,vHe,hr,tk,qDr,tf,jDr,toe,DDr,GDr,aoe,ODr,VDr,XDr,ak,zDr,V0e,WDr,QDr,UDr,Ut,nk,HDr,X0e,JDr,YDr,af,KDr,z0e,ZDr,eGr,noe,oGr,rGr,tGr,K3,aGr,Vr,sk,nGr,W0e,sGr,lGr,An,iGr,Q0e,dGr,cGr,U0e,fGr,mGr,H0e,gGr,hGr,pGr,J0e,Z3,Y0e,_Gr,uGr,soe,bGr,vGr,FGr,e0,FHe,nf,o0,K0e,lk,TGr,Z0e,MGr,THe,pr,ik,EGr,sf,CGr,loe,wGr,AGr,ioe,LGr,yGr,xGr,dk,$Gr,ewe,kGr,SGr,RGr,Ht,ck,PGr,owe,BGr,IGr,lf,NGr,rwe,qGr,jGr,doe,DGr,GGr,OGr,r0,VGr,Xr,fk,XGr,twe,zGr,WGr,Ln,QGr,awe,UGr,HGr,nwe,JGr,YGr,swe,KGr,ZGr,eOr,ce,t0,lwe,oOr,rOr,coe,tOr,aOr,nOr,a0,iwe,sOr,lOr,foe,iOr,dOr,cOr,n0,dwe,fOr,mOr,moe,gOr,hOr,pOr,s0,cwe,_Or,uOr,goe,bOr,vOr,FOr,l0,fwe,TOr,MOr,hoe,EOr,COr,wOr,i0,mwe,AOr,LOr,poe,yOr,xOr,$Or,d0,gwe,kOr,SOr,_oe,ROr,POr,BOr,c0,hwe,IOr,NOr,uoe,qOr,jOr,DOr,f0,pwe,GOr,OOr,boe,VOr,XOr,zOr,m0,_we,WOr,QOr,voe,UOr,HOr,JOr,g0,uwe,YOr,KOr,Foe,ZOr,eVr,oVr,h0,bwe,rVr,tVr,Toe,aVr,nVr,sVr,p0,vwe,lVr,iVr,Moe,dVr,cVr,fVr,_0,Fwe,mVr,gVr,Eoe,hVr,pVr,_Vr,u0,Twe,uVr,bVr,Coe,vVr,FVr,TVr,b0,Mwe,MVr,EVr,woe,CVr,wVr,AVr,v0,Ewe,LVr,yVr,Aoe,xVr,$Vr,kVr,F0,Cwe,SVr,RVr,Loe,PVr,BVr,IVr,T0,wwe,NVr,qVr,yoe,jVr,DVr,GVr,M0,Awe,OVr,VVr,xoe,XVr,zVr,WVr,E0,MHe,df,C0,Lwe,mk,QVr,ywe,UVr,EHe,_r,gk,HVr,cf,JVr,$oe,YVr,KVr,koe,ZVr,eXr,oXr,hk,rXr,xwe,tXr,aXr,nXr,Jt,pk,sXr,$we,lXr,iXr,ff,dXr,kwe,cXr,fXr,Soe,mXr,gXr,hXr,w0,pXr,zr,_k,_Xr,Swe,uXr,bXr,yn,vXr,Rwe,FXr,TXr,Pwe,MXr,EXr,Bwe,CXr,wXr,AXr,fe,A0,Iwe,LXr,yXr,Roe,xXr,$Xr,kXr,L0,Nwe,SXr,RXr,Poe,PXr,BXr,IXr,y0,qwe,NXr,qXr,Boe,jXr,DXr,GXr,x0,jwe,OXr,VXr,Ioe,XXr,zXr,WXr,$0,Dwe,QXr,UXr,Noe,HXr,JXr,YXr,k0,Gwe,KXr,ZXr,qoe,ezr,ozr,rzr,S0,Owe,tzr,azr,joe,nzr,szr,lzr,R0,Vwe,izr,dzr,Doe,czr,fzr,mzr,P0,Xwe,gzr,hzr,Goe,pzr,_zr,uzr,B0,zwe,bzr,vzr,Ooe,Fzr,Tzr,Mzr,I0,Wwe,Ezr,Czr,Voe,wzr,Azr,Lzr,N0,Qwe,yzr,xzr,Xoe,$zr,kzr,Szr,q0,Uwe,Rzr,Pzr,zoe,Bzr,Izr,Nzr,j0,Hwe,qzr,jzr,Woe,Dzr,Gzr,Ozr,D0,Jwe,Vzr,Xzr,Qoe,zzr,Wzr,Qzr,G0,Ywe,Uzr,Hzr,Uoe,Jzr,Yzr,Kzr,O0,Kwe,Zzr,eWr,Hoe,oWr,rWr,tWr,V0,Zwe,aWr,nWr,Joe,sWr,lWr,iWr,X0,e6e,dWr,cWr,Yoe,fWr,mWr,gWr,z0,o6e,hWr,pWr,Koe,_Wr,uWr,bWr,W0,CHe,mf,Q0,r6e,uk,vWr,t6e,FWr,wHe,ur,bk,TWr,gf,MWr,Zoe,EWr,CWr,ere,wWr,AWr,LWr,vk,yWr,a6e,xWr,$Wr,kWr,Yt,Fk,SWr,n6e,RWr,PWr,hf,BWr,s6e,IWr,NWr,ore,qWr,jWr,DWr,U0,GWr,Wr,Tk,OWr,l6e,VWr,XWr,xn,zWr,i6e,WWr,QWr,d6e,UWr,HWr,c6e,JWr,YWr,KWr,f6e,H0,m6e,ZWr,eQr,rre,oQr,rQr,tQr,J0,AHe,pf,Y0,g6e,Mk,aQr,h6e,nQr,LHe,br,Ek,sQr,_f,lQr,tre,iQr,dQr,are,cQr,fQr,mQr,Ck,gQr,p6e,hQr,pQr,_Qr,Kt,wk,uQr,_6e,bQr,vQr,uf,FQr,u6e,TQr,MQr,nre,EQr,CQr,wQr,K0,AQr,Qr,Ak,LQr,b6e,yQr,xQr,$n,$Qr,v6e,kQr,SQr,F6e,RQr,PQr,T6e,BQr,IQr,NQr,M6e,Z0,E6e,qQr,jQr,sre,DQr,GQr,OQr,ew,yHe,bf,ow,C6e,Lk,VQr,w6e,XQr,xHe,vr,yk,zQr,vf,WQr,lre,QQr,UQr,ire,HQr,JQr,YQr,xk,KQr,A6e,ZQr,eUr,oUr,Zt,$k,rUr,L6e,tUr,aUr,Ff,nUr,y6e,sUr,lUr,dre,iUr,dUr,cUr,rw,fUr,Ur,kk,mUr,x6e,gUr,hUr,kn,pUr,$6e,_Ur,uUr,k6e,bUr,vUr,S6e,FUr,TUr,MUr,re,tw,R6e,EUr,CUr,cre,wUr,AUr,LUr,aw,P6e,yUr,xUr,fre,$Ur,kUr,SUr,nw,B6e,RUr,PUr,mre,BUr,IUr,NUr,sw,I6e,qUr,jUr,gre,DUr,GUr,OUr,lw,N6e,VUr,XUr,hre,zUr,WUr,QUr,iw,q6e,UUr,HUr,pre,JUr,YUr,KUr,dw,j6e,ZUr,eHr,_re,oHr,rHr,tHr,cw,D6e,aHr,nHr,ure,sHr,lHr,iHr,fw,G6e,dHr,cHr,bre,fHr,mHr,gHr,mw,O6e,hHr,pHr,vre,_Hr,uHr,bHr,gw,V6e,vHr,FHr,Fre,THr,MHr,EHr,hw,X6e,CHr,wHr,Tre,AHr,LHr,yHr,pw,z6e,xHr,$Hr,Mre,kHr,SHr,RHr,_w,W6e,PHr,BHr,Ere,IHr,NHr,qHr,uw,Q6e,jHr,DHr,Cre,GHr,OHr,VHr,bw,U6e,XHr,zHr,wre,WHr,QHr,UHr,vw,H6e,HHr,JHr,Are,YHr,KHr,ZHr,Fw,J6e,eJr,oJr,Lre,rJr,tJr,aJr,Tw,Y6e,nJr,sJr,yre,lJr,iJr,dJr,Mw,K6e,cJr,fJr,xre,mJr,gJr,hJr,Ew,Z6e,pJr,_Jr,$re,uJr,bJr,vJr,Cw,eAe,FJr,TJr,kre,MJr,EJr,CJr,ww,oAe,wJr,AJr,Sre,LJr,yJr,xJr,Aw,rAe,$Jr,kJr,Rre,SJr,RJr,PJr,Lw,tAe,BJr,IJr,Pre,NJr,qJr,jJr,yw,aAe,DJr,GJr,Bre,OJr,VJr,XJr,xw,nAe,zJr,WJr,Ire,QJr,UJr,HJr,$w,$He,Tf,kw,sAe,Sk,JJr,lAe,YJr,kHe,Fr,Rk,KJr,Mf,ZJr,Nre,eYr,oYr,qre,rYr,tYr,aYr,Pk,nYr,iAe,sYr,lYr,iYr,ea,Bk,dYr,dAe,cYr,fYr,Ef,mYr,cAe,gYr,hYr,jre,pYr,_Yr,uYr,Sw,bYr,Hr,Ik,vYr,fAe,FYr,TYr,Sn,MYr,mAe,EYr,CYr,gAe,wYr,AYr,hAe,LYr,yYr,xYr,xe,Rw,pAe,$Yr,kYr,Dre,SYr,RYr,PYr,Pw,_Ae,BYr,IYr,Gre,NYr,qYr,jYr,Bw,uAe,DYr,GYr,Ore,OYr,VYr,XYr,Iw,bAe,zYr,WYr,Vre,QYr,UYr,HYr,Nw,vAe,JYr,YYr,Xre,KYr,ZYr,eKr,qw,FAe,oKr,rKr,zre,tKr,aKr,nKr,jw,TAe,sKr,lKr,Wre,iKr,dKr,cKr,Dw,MAe,fKr,mKr,Qre,gKr,hKr,pKr,Gw,EAe,_Kr,uKr,Ure,bKr,vKr,FKr,Ow,CAe,TKr,MKr,Hre,EKr,CKr,wKr,Vw,SHe,Cf,Xw,wAe,Nk,AKr,AAe,LKr,RHe,Tr,qk,yKr,wf,xKr,Jre,$Kr,kKr,Yre,SKr,RKr,PKr,jk,BKr,LAe,IKr,NKr,qKr,oa,Dk,jKr,yAe,DKr,GKr,Af,OKr,xAe,VKr,XKr,Kre,zKr,WKr,QKr,zw,UKr,Jr,Gk,HKr,$Ae,JKr,YKr,Rn,KKr,kAe,ZKr,eZr,SAe,oZr,rZr,RAe,tZr,aZr,nZr,Ee,Ww,PAe,sZr,lZr,Zre,iZr,dZr,cZr,Qw,BAe,fZr,mZr,ete,gZr,hZr,pZr,Uw,IAe,_Zr,uZr,ote,bZr,vZr,FZr,Hw,NAe,TZr,MZr,rte,EZr,CZr,wZr,Jw,qAe,AZr,LZr,tte,yZr,xZr,$Zr,Yw,jAe,kZr,SZr,ate,RZr,PZr,BZr,Kw,DAe,IZr,NZr,nte,qZr,jZr,DZr,Zw,GAe,GZr,OZr,ste,VZr,XZr,zZr,e6,OAe,WZr,QZr,lte,UZr,HZr,JZr,o6,VAe,YZr,KZr,ite,ZZr,eet,oet,r6,XAe,ret,tet,dte,aet,net,set,t6,zAe,iet,det,cte,cet,fet,met,a6,WAe,get,het,fte,pet,_et,uet,n6,PHe,Lf,s6,QAe,Ok,bet,UAe,vet,BHe,Mr,Vk,Fet,yf,Tet,mte,Met,Eet,gte,Cet,wet,Aet,Xk,Let,HAe,yet,xet,$et,ra,zk,ket,JAe,Set,Ret,xf,Pet,YAe,Bet,Iet,hte,Net,qet,jet,l6,Det,Yr,Wk,Get,KAe,Oet,Vet,Pn,Xet,ZAe,zet,Wet,eLe,Qet,Uet,oLe,Het,Jet,Yet,$e,i6,rLe,Ket,Zet,pte,eot,oot,rot,d6,tLe,tot,aot,_te,not,sot,lot,c6,aLe,iot,dot,ute,cot,fot,mot,f6,nLe,got,hot,bte,pot,_ot,uot,m6,sLe,bot,vot,vte,Fot,Tot,Mot,g6,lLe,Eot,Cot,Fte,wot,Aot,Lot,h6,iLe,yot,xot,Tte,$ot,kot,Sot,p6,dLe,Rot,Pot,Mte,Bot,Iot,Not,_6,cLe,qot,jot,Ete,Dot,Got,Oot,u6,fLe,Vot,Xot,Cte,zot,Wot,Qot,b6,IHe,$f,v6,mLe,Qk,Uot,gLe,Hot,NHe,Er,Uk,Jot,kf,Yot,wte,Kot,Zot,Ate,ert,ort,rrt,Hk,trt,hLe,art,nrt,srt,ta,Jk,lrt,pLe,irt,drt,Sf,crt,_Le,frt,mrt,Lte,grt,hrt,prt,F6,_rt,Kr,Yk,urt,uLe,brt,vrt,Bn,Frt,bLe,Trt,Mrt,vLe,Ert,Crt,FLe,wrt,Art,Lrt,ke,T6,TLe,yrt,xrt,yte,$rt,krt,Srt,M6,MLe,Rrt,Prt,xte,Brt,Irt,Nrt,E6,ELe,qrt,jrt,$te,Drt,Grt,Ort,C6,CLe,Vrt,Xrt,kte,zrt,Wrt,Qrt,w6,wLe,Urt,Hrt,Ste,Jrt,Yrt,Krt,A6,ALe,Zrt,ett,Rte,ott,rtt,ttt,L6,LLe,att,ntt,Pte,stt,ltt,itt,y6,yLe,dtt,ctt,Bte,ftt,mtt,gtt,x6,xLe,htt,ptt,Ite,_tt,utt,btt,$6,$Le,vtt,Ftt,Nte,Ttt,Mtt,Ett,k6,qHe,Rf,S6,kLe,Kk,Ctt,SLe,wtt,jHe,Cr,Zk,Att,Pf,Ltt,qte,ytt,xtt,jte,$tt,ktt,Stt,eS,Rtt,RLe,Ptt,Btt,Itt,aa,oS,Ntt,PLe,qtt,jtt,Bf,Dtt,BLe,Gtt,Ott,Dte,Vtt,Xtt,ztt,R6,Wtt,Zr,rS,Qtt,ILe,Utt,Htt,In,Jtt,NLe,Ytt,Ktt,qLe,Ztt,eat,jLe,oat,rat,tat,Se,P6,DLe,aat,nat,Gte,sat,lat,iat,B6,GLe,dat,cat,Ote,fat,mat,gat,I6,OLe,hat,pat,Vte,_at,uat,bat,N6,VLe,vat,Fat,Xte,Tat,Mat,Eat,q6,XLe,Cat,wat,zte,Aat,Lat,yat,j6,zLe,xat,$at,Wte,kat,Sat,Rat,D6,WLe,Pat,Bat,Qte,Iat,Nat,qat,G6,QLe,jat,Dat,Ute,Gat,Oat,Vat,O6,ULe,Xat,zat,Hte,Wat,Qat,Uat,V6,HLe,Hat,Jat,Jte,Yat,Kat,Zat,X6,DHe,If,z6,JLe,tS,ent,YLe,ont,GHe,wr,aS,rnt,Nf,tnt,Yte,ant,nnt,Kte,snt,lnt,int,nS,dnt,KLe,cnt,fnt,mnt,na,sS,gnt,ZLe,hnt,pnt,qf,_nt,eye,unt,bnt,Zte,vnt,Fnt,Tnt,W6,Mnt,et,lS,Ent,oye,Cnt,wnt,Nn,Ant,rye,Lnt,ynt,tye,xnt,$nt,aye,knt,Snt,Rnt,Re,Q6,nye,Pnt,Bnt,eae,Int,Nnt,qnt,U6,sye,jnt,Dnt,oae,Gnt,Ont,Vnt,H6,lye,Xnt,znt,rae,Wnt,Qnt,Unt,J6,iye,Hnt,Jnt,tae,Ynt,Knt,Znt,Y6,dye,est,ost,aae,rst,tst,ast,K6,cye,nst,sst,nae,lst,ist,dst,Z6,fye,cst,fst,sae,mst,gst,hst,eA,mye,pst,_st,lae,ust,bst,vst,oA,gye,Fst,Tst,iae,Mst,Est,Cst,rA,hye,wst,Ast,dae,Lst,yst,xst,tA,OHe,jf,aA,pye,iS,$st,_ye,kst,VHe,Ar,dS,Sst,Df,Rst,cae,Pst,Bst,fae,Ist,Nst,qst,cS,jst,uye,Dst,Gst,Ost,sa,fS,Vst,bye,Xst,zst,Gf,Wst,vye,Qst,Ust,mae,Hst,Jst,Yst,nA,Kst,ot,mS,Zst,Fye,elt,olt,qn,rlt,Tye,tlt,alt,Mye,nlt,slt,Eye,llt,ilt,dlt,Xe,sA,Cye,clt,flt,gae,mlt,glt,hlt,lA,wye,plt,_lt,hae,ult,blt,vlt,iA,Aye,Flt,Tlt,pae,Mlt,Elt,Clt,dA,Lye,wlt,Alt,_ae,Llt,ylt,xlt,cA,yye,$lt,klt,uae,Slt,Rlt,Plt,fA,xye,Blt,Ilt,bae,Nlt,qlt,jlt,mA,$ye,Dlt,Glt,vae,Olt,Vlt,Xlt,gA,kye,zlt,Wlt,Fae,Qlt,Ult,Hlt,hA,XHe,Of,pA,Sye,gS,Jlt,Rye,Ylt,zHe,Lr,hS,Klt,Vf,Zlt,Tae,eit,oit,Mae,rit,tit,ait,pS,nit,Pye,sit,lit,iit,la,_S,dit,Bye,cit,fit,Xf,mit,Iye,git,hit,Eae,pit,_it,uit,_A,bit,rt,uS,vit,Nye,Fit,Tit,jn,Mit,qye,Eit,Cit,jye,wit,Ait,Dye,Lit,yit,xit,ze,uA,Gye,$it,kit,Cae,Sit,Rit,Pit,bA,Oye,Bit,Iit,wae,Nit,qit,jit,vA,Vye,Dit,Git,Aae,Oit,Vit,Xit,FA,Xye,zit,Wit,Lae,Qit,Uit,Hit,TA,zye,Jit,Yit,yae,Kit,Zit,edt,MA,Wye,odt,rdt,xae,tdt,adt,ndt,EA,Qye,sdt,ldt,$ae,idt,ddt,cdt,CA,Uye,fdt,mdt,kae,gdt,hdt,pdt,wA,WHe,zf,AA,Hye,bS,_dt,Jye,udt,QHe,yr,vS,bdt,Wf,vdt,Sae,Fdt,Tdt,Rae,Mdt,Edt,Cdt,FS,wdt,Yye,Adt,Ldt,ydt,ia,TS,xdt,Kye,$dt,kdt,Qf,Sdt,Zye,Rdt,Pdt,Pae,Bdt,Idt,Ndt,LA,qdt,tt,MS,jdt,e8e,Ddt,Gdt,Dn,Odt,o8e,Vdt,Xdt,r8e,zdt,Wdt,t8e,Qdt,Udt,Hdt,a8e,yA,n8e,Jdt,Ydt,Bae,Kdt,Zdt,ect,xA,UHe,Uf,$A,s8e,ES,oct,l8e,rct,HHe,xr,CS,tct,Hf,act,Iae,nct,sct,Nae,lct,ict,dct,wS,cct,i8e,fct,mct,gct,da,AS,hct,d8e,pct,_ct,Jf,uct,c8e,bct,vct,qae,Fct,Tct,Mct,kA,Ect,at,LS,Cct,f8e,wct,Act,Gn,Lct,m8e,yct,xct,g8e,$ct,kct,h8e,Sct,Rct,Pct,yS,SA,p8e,Bct,Ict,jae,Nct,qct,jct,RA,_8e,Dct,Gct,Dae,Oct,Vct,Xct,PA,JHe,Yf,BA,u8e,xS,zct,b8e,Wct,YHe,$r,$S,Qct,Kf,Uct,Gae,Hct,Jct,Oae,Yct,Kct,Zct,kS,eft,v8e,oft,rft,tft,ca,SS,aft,F8e,nft,sft,Zf,lft,T8e,ift,dft,Vae,cft,fft,mft,IA,gft,nt,RS,hft,M8e,pft,_ft,On,uft,E8e,bft,vft,C8e,Fft,Tft,w8e,Mft,Eft,Cft,A8e,NA,L8e,wft,Aft,Xae,Lft,yft,xft,qA,KHe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),g8=new oe({}),h8=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),im=new $ft({props:{warning:!0,$$slots:{default:[Jra]},$$scope:{ctx:$}}}),p8=new oe({}),_8=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L625"}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L648"}}),Ch=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Yra]},$$scope:{ctx:$}}}),F8=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/configuration_auto.py#L771"}}),T8=new oe({}),M8=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L424"}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17254/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L438"}}),tp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Kra]},$$scope:{ctx:$}}}),A8=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/tokenization_auto.py#L639"}}),L8=new oe({}),y8=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17254/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Xp=new $ft({props:{$$slots:{default:[Zra]},$$scope:{ctx:$}}}),zp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[eta]},$$scope:{ctx:$}}}),S8=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),R8=new oe({}),P8=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L91"}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L105"}}),h_=new $ft({props:{$$slots:{default:[ota]},$$scope:{ctx:$}}}),p_=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[rta]},$$scope:{ctx:$}}}),q8=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/processing_auto.py#L258"}}),j8=new oe({}),D8=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L808"}}),O8=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),b_=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[tta]},$$scope:{ctx:$}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),L2=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[ata]},$$scope:{ctx:$}}}),X8=new oe({}),z8=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L815"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),x2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[nta]},$$scope:{ctx:$}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),C1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sta]},$$scope:{ctx:$}}}),H8=new oe({}),J8=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L830"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),A1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[lta]},$$scope:{ctx:$}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ita]},$$scope:{ctx:$}}}),e9=new oe({}),o9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L837"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[dta]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cta]},$$scope:{ctx:$}}}),n9=new oe({}),s9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L844"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fta]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mta]},$$scope:{ctx:$}}}),c9=new oe({}),f9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L853"}}),g9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[gta]},$$scope:{ctx:$}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Lv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hta]},$$scope:{ctx:$}}}),p9=new oe({}),_9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L898"}}),b9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[pta]},$$scope:{ctx:$}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_ta]},$$scope:{ctx:$}}}),F9=new oe({}),T9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L905"}}),E9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uta]},$$scope:{ctx:$}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bta]},$$scope:{ctx:$}}}),w9=new oe({}),A9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L891"}}),y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[vta]},$$scope:{ctx:$}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Fta]},$$scope:{ctx:$}}}),$9=new oe({}),k9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L862"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Tta]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Mta]},$$scope:{ctx:$}}}),B9=new oe({}),I9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L869"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Eta]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Cta]},$$scope:{ctx:$}}}),D9=new oe({}),G9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L914"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17254/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[wta]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ata]},$$scope:{ctx:$}}}),z9=new oe({}),W9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L953"}}),U9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Lta]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[yta]},$$scope:{ctx:$}}}),J9=new oe({}),Y9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L960"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),ox=new oe({}),rx=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L880"}}),ax=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[kta]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),sx=new oe({}),lx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L967"}}),dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Rta]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),fx=new oe({}),mx=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L990"}}),hx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),a7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),_x=new oe({}),ux=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L974"}}),vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),Tx=new oe({}),Mx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L981"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),C7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),Lx=new oe({}),yx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L999"}}),$x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),A7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),R7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),Sx=new oe({}),Rx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L1006"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),B7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),G7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),Nx=new oe({}),qx=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L946"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),V7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L921"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),H7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),K7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),Ux=new oe({}),Hx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L928"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),Zx=new oe({}),e$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_auto.py#L937"}}),r$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Yta]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Kta]},$$scope:{ctx:$}}}),a$=new oe({}),n$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Zta]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[eaa]},$$scope:{ctx:$}}}),d$=new oe({}),c$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),m$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[oaa]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[raa]},$$scope:{ctx:$}}}),h$=new oe({}),p$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),u$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[taa]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[aaa]},$$scope:{ctx:$}}}),v$=new oe({}),F$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),M$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_17254/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[naa]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[saa]},$$scope:{ctx:$}}}),C$=new oe({}),w$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L463"}}),L$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[laa]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[iaa]},$$scope:{ctx:$}}}),$$=new oe({}),k$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),R$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[daa]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[caa]},$$scope:{ctx:$}}}),B$=new oe({}),I$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),q$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[faa]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[maa]},$$scope:{ctx:$}}}),D$=new oe({}),G$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),V$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[gaa]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[haa]},$$scope:{ctx:$}}}),z$=new oe({}),W$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),U$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[paa]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_aa]},$$scope:{ctx:$}}}),J$=new oe({}),Y$=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uaa]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[baa]},$$scope:{ctx:$}}}),rk=new oe({}),tk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),nk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[vaa]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Faa]},$$scope:{ctx:$}}}),lk=new oe({}),ik=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),ck=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Taa]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Maa]},$$scope:{ctx:$}}}),mk=new oe({}),gk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),pk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Eaa]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Caa]},$$scope:{ctx:$}}}),uk=new oe({}),bk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),Fk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[waa]},$$scope:{ctx:$}}}),Tk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Aaa]},$$scope:{ctx:$}}}),Mk=new oe({}),Ek=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),wk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Laa]},$$scope:{ctx:$}}}),Ak=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yaa]},$$scope:{ctx:$}}}),Lk=new oe({}),yk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),$k=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[xaa]},$$scope:{ctx:$}}}),kk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),Sk=new oe({}),Rk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),Ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),Vw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Saa]},$$scope:{ctx:$}}}),Nk=new oe({}),qk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Dk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),Gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Paa]},$$scope:{ctx:$}}}),Ok=new oe({}),Vk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),zk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),Wk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),Qk=new oe({}),Uk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Jk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),Yk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),k6=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),Kk=new oe({}),Zk=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),oS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),R6=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),rS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),tS=new oe({}),aS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),sS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Gaa]},$$scope:{ctx:$}}}),lS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),tA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Oaa]},$$scope:{ctx:$}}}),iS=new oe({}),dS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),fS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),nA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Vaa]},$$scope:{ctx:$}}}),mS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Xaa]},$$scope:{ctx:$}}}),gS=new oe({}),hS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),_S=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[zaa]},$$scope:{ctx:$}}}),uS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),wA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Waa]},$$scope:{ctx:$}}}),bS=new oe({}),vS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),TS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Qaa]},$$scope:{ctx:$}}}),MS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),xA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Uaa]},$$scope:{ctx:$}}}),ES=new oe({}),CS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),AS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),kA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Haa]},$$scope:{ctx:$}}}),LS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),PA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),xS=new oe({}),$S=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),SS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L389"}}),IA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),RS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17254/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17254/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17254/src/transformers/models/auto/auto_factory.py#L417"}}),qA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Kaa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),zi=o("Auto Classes"),tm=l(),ft=a("p"),Wi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Qi=a("code"),d8=o("from_pretrained()"),am=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ui=o("Instantiating one of "),Xn=a("a"),c8=o("AutoConfig"),zn=o(", "),Wn=a("a"),f8=o("AutoModel"),Hi=o(`, and
`),Qn=a("a"),m8=o("AutoTokenizer"),Ji=o(" will directly create a class of the relevant architecture. For instance"),nm=l(),F(ja.$$.fragment),Ue=l(),Ae=a("p"),sP=o("will create a model that is an instance of "),Yi=a("a"),lP=o("BertModel"),iP=o("."),Lo=l(),Da=a("p"),dP=o("There is one class of "),sm=a("code"),cP=o("AutoModel"),gKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VQe=l(),Ki=a("h2"),lm=a("a"),Ose=a("span"),F(g8.$$.fragment),hKe=l(),Vse=a("span"),pKe=o("Extending the Auto Classes"),XQe=l(),Un=a("p"),_Ke=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xse=a("code"),uKe=o("NewModel"),bKe=o(", make sure you have a "),zse=a("code"),vKe=o("NewModelConfig"),FKe=o(` then you can add those to the auto
classes like this:`),zQe=l(),F(h8.$$.fragment),WQe=l(),fP=a("p"),TKe=o("You will then be able to use the auto classes like you would usually do!"),QQe=l(),F(im.$$.fragment),UQe=l(),Zi=a("h2"),dm=a("a"),Wse=a("span"),F(p8.$$.fragment),MKe=l(),Qse=a("span"),EKe=o("AutoConfig"),HQe=l(),yo=a("div"),F(_8.$$.fragment),CKe=l(),u8=a("p"),wKe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mP=a("a"),AKe=o("from_pretrained()"),LKe=o(" class method."),yKe=l(),b8=a("p"),xKe=o("This class cannot be instantiated directly using "),Use=a("code"),$Ke=o("__init__()"),kKe=o(" (throws an error)."),SKe=l(),kr=a("div"),F(v8.$$.fragment),RKe=l(),Hse=a("p"),PKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),BKe=l(),ed=a("p"),IKe=o("The configuration class to instantiate is selected based on the "),Jse=a("code"),NKe=o("model_type"),qKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yse=a("code"),jKe=o("pretrained_model_name_or_path"),DKe=o(":"),GKe=l(),A=a("ul"),cm=a("li"),Kse=a("strong"),OKe=o("albert"),VKe=o(" \u2014 "),gP=a("a"),XKe=o("AlbertConfig"),zKe=o(" (ALBERT model)"),WKe=l(),fm=a("li"),Zse=a("strong"),QKe=o("bart"),UKe=o(" \u2014 "),hP=a("a"),HKe=o("BartConfig"),JKe=o(" (BART model)"),YKe=l(),mm=a("li"),ele=a("strong"),KKe=o("beit"),ZKe=o(" \u2014 "),pP=a("a"),eZe=o("BeitConfig"),oZe=o(" (BEiT model)"),rZe=l(),gm=a("li"),ole=a("strong"),tZe=o("bert"),aZe=o(" \u2014 "),_P=a("a"),nZe=o("BertConfig"),sZe=o(" (BERT model)"),lZe=l(),hm=a("li"),rle=a("strong"),iZe=o("bert-generation"),dZe=o(" \u2014 "),uP=a("a"),cZe=o("BertGenerationConfig"),fZe=o(" (Bert Generation model)"),mZe=l(),pm=a("li"),tle=a("strong"),gZe=o("big_bird"),hZe=o(" \u2014 "),bP=a("a"),pZe=o("BigBirdConfig"),_Ze=o(" (BigBird model)"),uZe=l(),_m=a("li"),ale=a("strong"),bZe=o("bigbird_pegasus"),vZe=o(" \u2014 "),vP=a("a"),FZe=o("BigBirdPegasusConfig"),TZe=o(" (BigBird-Pegasus model)"),MZe=l(),um=a("li"),nle=a("strong"),EZe=o("blenderbot"),CZe=o(" \u2014 "),FP=a("a"),wZe=o("BlenderbotConfig"),AZe=o(" (Blenderbot model)"),LZe=l(),bm=a("li"),sle=a("strong"),yZe=o("blenderbot-small"),xZe=o(" \u2014 "),TP=a("a"),$Ze=o("BlenderbotSmallConfig"),kZe=o(" (BlenderbotSmall model)"),SZe=l(),vm=a("li"),lle=a("strong"),RZe=o("bloom"),PZe=o(" \u2014 "),MP=a("a"),BZe=o("BloomConfig"),IZe=o(" (BLOOM model)"),NZe=l(),Fm=a("li"),ile=a("strong"),qZe=o("camembert"),jZe=o(" \u2014 "),EP=a("a"),DZe=o("CamembertConfig"),GZe=o(" (CamemBERT model)"),OZe=l(),Tm=a("li"),dle=a("strong"),VZe=o("canine"),XZe=o(" \u2014 "),CP=a("a"),zZe=o("CanineConfig"),WZe=o(" (CANINE model)"),QZe=l(),Mm=a("li"),cle=a("strong"),UZe=o("clip"),HZe=o(" \u2014 "),wP=a("a"),JZe=o("CLIPConfig"),YZe=o(" (CLIP model)"),KZe=l(),Em=a("li"),fle=a("strong"),ZZe=o("codegen"),eeo=o(" \u2014 "),AP=a("a"),oeo=o("CodeGenConfig"),reo=o(" (CodeGen model)"),teo=l(),Cm=a("li"),mle=a("strong"),aeo=o("convbert"),neo=o(" \u2014 "),LP=a("a"),seo=o("ConvBertConfig"),leo=o(" (ConvBERT model)"),ieo=l(),wm=a("li"),gle=a("strong"),deo=o("convnext"),ceo=o(" \u2014 "),yP=a("a"),feo=o("ConvNextConfig"),meo=o(" (ConvNeXT model)"),geo=l(),Am=a("li"),hle=a("strong"),heo=o("ctrl"),peo=o(" \u2014 "),xP=a("a"),_eo=o("CTRLConfig"),ueo=o(" (CTRL model)"),beo=l(),Lm=a("li"),ple=a("strong"),veo=o("cvt"),Feo=o(" \u2014 "),$P=a("a"),Teo=o("CvtConfig"),Meo=o(" (CvT model)"),Eeo=l(),ym=a("li"),_le=a("strong"),Ceo=o("data2vec-audio"),weo=o(" \u2014 "),kP=a("a"),Aeo=o("Data2VecAudioConfig"),Leo=o(" (Data2VecAudio model)"),yeo=l(),xm=a("li"),ule=a("strong"),xeo=o("data2vec-text"),$eo=o(" \u2014 "),SP=a("a"),keo=o("Data2VecTextConfig"),Seo=o(" (Data2VecText model)"),Reo=l(),$m=a("li"),ble=a("strong"),Peo=o("data2vec-vision"),Beo=o(" \u2014 "),RP=a("a"),Ieo=o("Data2VecVisionConfig"),Neo=o(" (Data2VecVision model)"),qeo=l(),km=a("li"),vle=a("strong"),jeo=o("deberta"),Deo=o(" \u2014 "),PP=a("a"),Geo=o("DebertaConfig"),Oeo=o(" (DeBERTa model)"),Veo=l(),Sm=a("li"),Fle=a("strong"),Xeo=o("deberta-v2"),zeo=o(" \u2014 "),BP=a("a"),Weo=o("DebertaV2Config"),Qeo=o(" (DeBERTa-v2 model)"),Ueo=l(),Rm=a("li"),Tle=a("strong"),Heo=o("decision_transformer"),Jeo=o(" \u2014 "),IP=a("a"),Yeo=o("DecisionTransformerConfig"),Keo=o(" (Decision Transformer model)"),Zeo=l(),Pm=a("li"),Mle=a("strong"),eoo=o("deit"),ooo=o(" \u2014 "),NP=a("a"),roo=o("DeiTConfig"),too=o(" (DeiT model)"),aoo=l(),Bm=a("li"),Ele=a("strong"),noo=o("detr"),soo=o(" \u2014 "),qP=a("a"),loo=o("DetrConfig"),ioo=o(" (DETR model)"),doo=l(),Im=a("li"),Cle=a("strong"),coo=o("distilbert"),foo=o(" \u2014 "),jP=a("a"),moo=o("DistilBertConfig"),goo=o(" (DistilBERT model)"),hoo=l(),Nm=a("li"),wle=a("strong"),poo=o("donut-swin"),_oo=o(" \u2014 "),DP=a("a"),uoo=o("DonutSwinConfig"),boo=o(" (DonutSwin model)"),voo=l(),qm=a("li"),Ale=a("strong"),Foo=o("dpr"),Too=o(" \u2014 "),GP=a("a"),Moo=o("DPRConfig"),Eoo=o(" (DPR model)"),Coo=l(),jm=a("li"),Lle=a("strong"),woo=o("dpt"),Aoo=o(" \u2014 "),OP=a("a"),Loo=o("DPTConfig"),yoo=o(" (DPT model)"),xoo=l(),Dm=a("li"),yle=a("strong"),$oo=o("electra"),koo=o(" \u2014 "),VP=a("a"),Soo=o("ElectraConfig"),Roo=o(" (ELECTRA model)"),Poo=l(),Gm=a("li"),xle=a("strong"),Boo=o("encoder-decoder"),Ioo=o(" \u2014 "),XP=a("a"),Noo=o("EncoderDecoderConfig"),qoo=o(" (Encoder decoder model)"),joo=l(),Om=a("li"),$le=a("strong"),Doo=o("flaubert"),Goo=o(" \u2014 "),zP=a("a"),Ooo=o("FlaubertConfig"),Voo=o(" (FlauBERT model)"),Xoo=l(),Vm=a("li"),kle=a("strong"),zoo=o("flava"),Woo=o(" \u2014 "),WP=a("a"),Qoo=o("FlavaConfig"),Uoo=o(" (FLAVA model)"),Hoo=l(),Xm=a("li"),Sle=a("strong"),Joo=o("fnet"),Yoo=o(" \u2014 "),QP=a("a"),Koo=o("FNetConfig"),Zoo=o(" (FNet model)"),ero=l(),zm=a("li"),Rle=a("strong"),oro=o("fsmt"),rro=o(" \u2014 "),UP=a("a"),tro=o("FSMTConfig"),aro=o(" (FairSeq Machine-Translation model)"),nro=l(),Wm=a("li"),Ple=a("strong"),sro=o("funnel"),lro=o(" \u2014 "),HP=a("a"),iro=o("FunnelConfig"),dro=o(" (Funnel Transformer model)"),cro=l(),Qm=a("li"),Ble=a("strong"),fro=o("glpn"),mro=o(" \u2014 "),JP=a("a"),gro=o("GLPNConfig"),hro=o(" (GLPN model)"),pro=l(),Um=a("li"),Ile=a("strong"),_ro=o("gpt2"),uro=o(" \u2014 "),YP=a("a"),bro=o("GPT2Config"),vro=o(" (OpenAI GPT-2 model)"),Fro=l(),Hm=a("li"),Nle=a("strong"),Tro=o("gpt_neo"),Mro=o(" \u2014 "),KP=a("a"),Ero=o("GPTNeoConfig"),Cro=o(" (GPT Neo model)"),wro=l(),Jm=a("li"),qle=a("strong"),Aro=o("gpt_neox"),Lro=o(" \u2014 "),ZP=a("a"),yro=o("GPTNeoXConfig"),xro=o(" (GPT NeoX model)"),$ro=l(),Ym=a("li"),jle=a("strong"),kro=o("gptj"),Sro=o(" \u2014 "),eB=a("a"),Rro=o("GPTJConfig"),Pro=o(" (GPT-J model)"),Bro=l(),Km=a("li"),Dle=a("strong"),Iro=o("groupvit"),Nro=o(" \u2014 "),oB=a("a"),qro=o("GroupViTConfig"),jro=o(" (GroupViT model)"),Dro=l(),Zm=a("li"),Gle=a("strong"),Gro=o("hubert"),Oro=o(" \u2014 "),rB=a("a"),Vro=o("HubertConfig"),Xro=o(" (Hubert model)"),zro=l(),eg=a("li"),Ole=a("strong"),Wro=o("ibert"),Qro=o(" \u2014 "),tB=a("a"),Uro=o("IBertConfig"),Hro=o(" (I-BERT model)"),Jro=l(),og=a("li"),Vle=a("strong"),Yro=o("imagegpt"),Kro=o(" \u2014 "),aB=a("a"),Zro=o("ImageGPTConfig"),eto=o(" (ImageGPT model)"),oto=l(),rg=a("li"),Xle=a("strong"),rto=o("layoutlm"),tto=o(" \u2014 "),nB=a("a"),ato=o("LayoutLMConfig"),nto=o(" (LayoutLM model)"),sto=l(),tg=a("li"),zle=a("strong"),lto=o("layoutlmv2"),ito=o(" \u2014 "),sB=a("a"),dto=o("LayoutLMv2Config"),cto=o(" (LayoutLMv2 model)"),fto=l(),ag=a("li"),Wle=a("strong"),mto=o("layoutlmv3"),gto=o(" \u2014 "),lB=a("a"),hto=o("LayoutLMv3Config"),pto=o(" (LayoutLMv3 model)"),_to=l(),ng=a("li"),Qle=a("strong"),uto=o("led"),bto=o(" \u2014 "),iB=a("a"),vto=o("LEDConfig"),Fto=o(" (LED model)"),Tto=l(),sg=a("li"),Ule=a("strong"),Mto=o("levit"),Eto=o(" \u2014 "),dB=a("a"),Cto=o("LevitConfig"),wto=o(" (LeViT model)"),Ato=l(),lg=a("li"),Hle=a("strong"),Lto=o("longformer"),yto=o(" \u2014 "),cB=a("a"),xto=o("LongformerConfig"),$to=o(" (Longformer model)"),kto=l(),ig=a("li"),Jle=a("strong"),Sto=o("longt5"),Rto=o(" \u2014 "),fB=a("a"),Pto=o("LongT5Config"),Bto=o(" (LongT5 model)"),Ito=l(),dg=a("li"),Yle=a("strong"),Nto=o("luke"),qto=o(" \u2014 "),mB=a("a"),jto=o("LukeConfig"),Dto=o(" (LUKE model)"),Gto=l(),cg=a("li"),Kle=a("strong"),Oto=o("lxmert"),Vto=o(" \u2014 "),gB=a("a"),Xto=o("LxmertConfig"),zto=o(" (LXMERT model)"),Wto=l(),fg=a("li"),Zle=a("strong"),Qto=o("m2m_100"),Uto=o(" \u2014 "),hB=a("a"),Hto=o("M2M100Config"),Jto=o(" (M2M100 model)"),Yto=l(),mg=a("li"),eie=a("strong"),Kto=o("marian"),Zto=o(" \u2014 "),pB=a("a"),eao=o("MarianConfig"),oao=o(" (Marian model)"),rao=l(),gg=a("li"),oie=a("strong"),tao=o("maskformer"),aao=o(" \u2014 "),_B=a("a"),nao=o("MaskFormerConfig"),sao=o(" (MaskFormer model)"),lao=l(),hg=a("li"),rie=a("strong"),iao=o("mbart"),dao=o(" \u2014 "),uB=a("a"),cao=o("MBartConfig"),fao=o(" (mBART model)"),mao=l(),pg=a("li"),tie=a("strong"),gao=o("mctct"),hao=o(" \u2014 "),bB=a("a"),pao=o("MCTCTConfig"),_ao=o(" (M-CTC-T model)"),uao=l(),_g=a("li"),aie=a("strong"),bao=o("megatron-bert"),vao=o(" \u2014 "),vB=a("a"),Fao=o("MegatronBertConfig"),Tao=o(" (Megatron-BERT model)"),Mao=l(),ug=a("li"),nie=a("strong"),Eao=o("mobilebert"),Cao=o(" \u2014 "),FB=a("a"),wao=o("MobileBertConfig"),Aao=o(" (MobileBERT model)"),Lao=l(),bg=a("li"),sie=a("strong"),yao=o("mobilevit"),xao=o(" \u2014 "),TB=a("a"),$ao=o("MobileViTConfig"),kao=o(" (MobileViT model)"),Sao=l(),vg=a("li"),lie=a("strong"),Rao=o("mpnet"),Pao=o(" \u2014 "),MB=a("a"),Bao=o("MPNetConfig"),Iao=o(" (MPNet model)"),Nao=l(),Fg=a("li"),iie=a("strong"),qao=o("mt5"),jao=o(" \u2014 "),EB=a("a"),Dao=o("MT5Config"),Gao=o(" (MT5 model)"),Oao=l(),Tg=a("li"),die=a("strong"),Vao=o("mvp"),Xao=o(" \u2014 "),CB=a("a"),zao=o("MvpConfig"),Wao=o(" (MVP model)"),Qao=l(),Mg=a("li"),cie=a("strong"),Uao=o("nezha"),Hao=o(" \u2014 "),wB=a("a"),Jao=o("NezhaConfig"),Yao=o(" (Nezha model)"),Kao=l(),Eg=a("li"),fie=a("strong"),Zao=o("nystromformer"),eno=o(" \u2014 "),AB=a("a"),ono=o("NystromformerConfig"),rno=o(" (Nystr\xF6mformer model)"),tno=l(),Cg=a("li"),mie=a("strong"),ano=o("openai-gpt"),nno=o(" \u2014 "),LB=a("a"),sno=o("OpenAIGPTConfig"),lno=o(" (OpenAI GPT model)"),ino=l(),wg=a("li"),gie=a("strong"),dno=o("opt"),cno=o(" \u2014 "),yB=a("a"),fno=o("OPTConfig"),mno=o(" (OPT model)"),gno=l(),Ag=a("li"),hie=a("strong"),hno=o("owlvit"),pno=o(" \u2014 "),xB=a("a"),_no=o("OwlViTConfig"),uno=o(" (OWL-ViT model)"),bno=l(),Lg=a("li"),pie=a("strong"),vno=o("pegasus"),Fno=o(" \u2014 "),$B=a("a"),Tno=o("PegasusConfig"),Mno=o(" (Pegasus model)"),Eno=l(),yg=a("li"),_ie=a("strong"),Cno=o("perceiver"),wno=o(" \u2014 "),kB=a("a"),Ano=o("PerceiverConfig"),Lno=o(" (Perceiver model)"),yno=l(),xg=a("li"),uie=a("strong"),xno=o("plbart"),$no=o(" \u2014 "),SB=a("a"),kno=o("PLBartConfig"),Sno=o(" (PLBart model)"),Rno=l(),$g=a("li"),bie=a("strong"),Pno=o("poolformer"),Bno=o(" \u2014 "),RB=a("a"),Ino=o("PoolFormerConfig"),Nno=o(" (PoolFormer model)"),qno=l(),kg=a("li"),vie=a("strong"),jno=o("prophetnet"),Dno=o(" \u2014 "),PB=a("a"),Gno=o("ProphetNetConfig"),Ono=o(" (ProphetNet model)"),Vno=l(),Sg=a("li"),Fie=a("strong"),Xno=o("qdqbert"),zno=o(" \u2014 "),BB=a("a"),Wno=o("QDQBertConfig"),Qno=o(" (QDQBert model)"),Uno=l(),Rg=a("li"),Tie=a("strong"),Hno=o("rag"),Jno=o(" \u2014 "),IB=a("a"),Yno=o("RagConfig"),Kno=o(" (RAG model)"),Zno=l(),Pg=a("li"),Mie=a("strong"),eso=o("realm"),oso=o(" \u2014 "),NB=a("a"),rso=o("RealmConfig"),tso=o(" (REALM model)"),aso=l(),Bg=a("li"),Eie=a("strong"),nso=o("reformer"),sso=o(" \u2014 "),qB=a("a"),lso=o("ReformerConfig"),iso=o(" (Reformer model)"),dso=l(),Ig=a("li"),Cie=a("strong"),cso=o("regnet"),fso=o(" \u2014 "),jB=a("a"),mso=o("RegNetConfig"),gso=o(" (RegNet model)"),hso=l(),Ng=a("li"),wie=a("strong"),pso=o("rembert"),_so=o(" \u2014 "),DB=a("a"),uso=o("RemBertConfig"),bso=o(" (RemBERT model)"),vso=l(),qg=a("li"),Aie=a("strong"),Fso=o("resnet"),Tso=o(" \u2014 "),GB=a("a"),Mso=o("ResNetConfig"),Eso=o(" (ResNet model)"),Cso=l(),jg=a("li"),Lie=a("strong"),wso=o("retribert"),Aso=o(" \u2014 "),OB=a("a"),Lso=o("RetriBertConfig"),yso=o(" (RetriBERT model)"),xso=l(),Dg=a("li"),yie=a("strong"),$so=o("roberta"),kso=o(" \u2014 "),VB=a("a"),Sso=o("RobertaConfig"),Rso=o(" (RoBERTa model)"),Pso=l(),Gg=a("li"),xie=a("strong"),Bso=o("roformer"),Iso=o(" \u2014 "),XB=a("a"),Nso=o("RoFormerConfig"),qso=o(" (RoFormer model)"),jso=l(),Og=a("li"),$ie=a("strong"),Dso=o("segformer"),Gso=o(" \u2014 "),zB=a("a"),Oso=o("SegformerConfig"),Vso=o(" (SegFormer model)"),Xso=l(),Vg=a("li"),kie=a("strong"),zso=o("sew"),Wso=o(" \u2014 "),WB=a("a"),Qso=o("SEWConfig"),Uso=o(" (SEW model)"),Hso=l(),Xg=a("li"),Sie=a("strong"),Jso=o("sew-d"),Yso=o(" \u2014 "),QB=a("a"),Kso=o("SEWDConfig"),Zso=o(" (SEW-D model)"),elo=l(),zg=a("li"),Rie=a("strong"),olo=o("speech-encoder-decoder"),rlo=o(" \u2014 "),UB=a("a"),tlo=o("SpeechEncoderDecoderConfig"),alo=o(" (Speech Encoder decoder model)"),nlo=l(),Wg=a("li"),Pie=a("strong"),slo=o("speech_to_text"),llo=o(" \u2014 "),HB=a("a"),ilo=o("Speech2TextConfig"),dlo=o(" (Speech2Text model)"),clo=l(),Qg=a("li"),Bie=a("strong"),flo=o("speech_to_text_2"),mlo=o(" \u2014 "),JB=a("a"),glo=o("Speech2Text2Config"),hlo=o(" (Speech2Text2 model)"),plo=l(),Ug=a("li"),Iie=a("strong"),_lo=o("splinter"),ulo=o(" \u2014 "),YB=a("a"),blo=o("SplinterConfig"),vlo=o(" (Splinter model)"),Flo=l(),Hg=a("li"),Nie=a("strong"),Tlo=o("squeezebert"),Mlo=o(" \u2014 "),KB=a("a"),Elo=o("SqueezeBertConfig"),Clo=o(" (SqueezeBERT model)"),wlo=l(),Jg=a("li"),qie=a("strong"),Alo=o("swin"),Llo=o(" \u2014 "),ZB=a("a"),ylo=o("SwinConfig"),xlo=o(" (Swin Transformer model)"),$lo=l(),Yg=a("li"),jie=a("strong"),klo=o("swinv2"),Slo=o(" \u2014 "),eI=a("a"),Rlo=o("Swinv2Config"),Plo=o(" (Swin Transformer V2 model)"),Blo=l(),Kg=a("li"),Die=a("strong"),Ilo=o("t5"),Nlo=o(" \u2014 "),oI=a("a"),qlo=o("T5Config"),jlo=o(" (T5 model)"),Dlo=l(),Zg=a("li"),Gie=a("strong"),Glo=o("tapas"),Olo=o(" \u2014 "),rI=a("a"),Vlo=o("TapasConfig"),Xlo=o(" (TAPAS model)"),zlo=l(),eh=a("li"),Oie=a("strong"),Wlo=o("trajectory_transformer"),Qlo=o(" \u2014 "),tI=a("a"),Ulo=o("TrajectoryTransformerConfig"),Hlo=o(" (Trajectory Transformer model)"),Jlo=l(),oh=a("li"),Vie=a("strong"),Ylo=o("transfo-xl"),Klo=o(" \u2014 "),aI=a("a"),Zlo=o("TransfoXLConfig"),eio=o(" (Transformer-XL model)"),oio=l(),rh=a("li"),Xie=a("strong"),rio=o("trocr"),tio=o(" \u2014 "),nI=a("a"),aio=o("TrOCRConfig"),nio=o(" (TrOCR model)"),sio=l(),th=a("li"),zie=a("strong"),lio=o("unispeech"),iio=o(" \u2014 "),sI=a("a"),dio=o("UniSpeechConfig"),cio=o(" (UniSpeech model)"),fio=l(),ah=a("li"),Wie=a("strong"),mio=o("unispeech-sat"),gio=o(" \u2014 "),lI=a("a"),hio=o("UniSpeechSatConfig"),pio=o(" (UniSpeechSat model)"),_io=l(),nh=a("li"),Qie=a("strong"),uio=o("van"),bio=o(" \u2014 "),iI=a("a"),vio=o("VanConfig"),Fio=o(" (VAN model)"),Tio=l(),sh=a("li"),Uie=a("strong"),Mio=o("videomae"),Eio=o(" \u2014 "),dI=a("a"),Cio=o("VideoMAEConfig"),wio=o(" (VideoMAE model)"),Aio=l(),lh=a("li"),Hie=a("strong"),Lio=o("vilt"),yio=o(" \u2014 "),cI=a("a"),xio=o("ViltConfig"),$io=o(" (ViLT model)"),kio=l(),ih=a("li"),Jie=a("strong"),Sio=o("vision-encoder-decoder"),Rio=o(" \u2014 "),fI=a("a"),Pio=o("VisionEncoderDecoderConfig"),Bio=o(" (Vision Encoder decoder model)"),Iio=l(),dh=a("li"),Yie=a("strong"),Nio=o("vision-text-dual-encoder"),qio=o(" \u2014 "),mI=a("a"),jio=o("VisionTextDualEncoderConfig"),Dio=o(" (VisionTextDualEncoder model)"),Gio=l(),ch=a("li"),Kie=a("strong"),Oio=o("visual_bert"),Vio=o(" \u2014 "),gI=a("a"),Xio=o("VisualBertConfig"),zio=o(" (VisualBERT model)"),Wio=l(),fh=a("li"),Zie=a("strong"),Qio=o("vit"),Uio=o(" \u2014 "),hI=a("a"),Hio=o("ViTConfig"),Jio=o(" (ViT model)"),Yio=l(),mh=a("li"),ede=a("strong"),Kio=o("vit_mae"),Zio=o(" \u2014 "),pI=a("a"),edo=o("ViTMAEConfig"),odo=o(" (ViTMAE model)"),rdo=l(),gh=a("li"),ode=a("strong"),tdo=o("wav2vec2"),ado=o(" \u2014 "),_I=a("a"),ndo=o("Wav2Vec2Config"),sdo=o(" (Wav2Vec2 model)"),ldo=l(),hh=a("li"),rde=a("strong"),ido=o("wav2vec2-conformer"),ddo=o(" \u2014 "),uI=a("a"),cdo=o("Wav2Vec2ConformerConfig"),fdo=o(" (Wav2Vec2-Conformer model)"),mdo=l(),ph=a("li"),tde=a("strong"),gdo=o("wavlm"),hdo=o(" \u2014 "),bI=a("a"),pdo=o("WavLMConfig"),_do=o(" (WavLM model)"),udo=l(),_h=a("li"),ade=a("strong"),bdo=o("xglm"),vdo=o(" \u2014 "),vI=a("a"),Fdo=o("XGLMConfig"),Tdo=o(" (XGLM model)"),Mdo=l(),uh=a("li"),nde=a("strong"),Edo=o("xlm"),Cdo=o(" \u2014 "),FI=a("a"),wdo=o("XLMConfig"),Ado=o(" (XLM model)"),Ldo=l(),bh=a("li"),sde=a("strong"),ydo=o("xlm-prophetnet"),xdo=o(" \u2014 "),TI=a("a"),$do=o("XLMProphetNetConfig"),kdo=o(" (XLM-ProphetNet model)"),Sdo=l(),vh=a("li"),lde=a("strong"),Rdo=o("xlm-roberta"),Pdo=o(" \u2014 "),MI=a("a"),Bdo=o("XLMRobertaConfig"),Ido=o(" (XLM-RoBERTa model)"),Ndo=l(),Fh=a("li"),ide=a("strong"),qdo=o("xlm-roberta-xl"),jdo=o(" \u2014 "),EI=a("a"),Ddo=o("XLMRobertaXLConfig"),Gdo=o(" (XLM-RoBERTa-XL model)"),Odo=l(),Th=a("li"),dde=a("strong"),Vdo=o("xlnet"),Xdo=o(" \u2014 "),CI=a("a"),zdo=o("XLNetConfig"),Wdo=o(" (XLNet model)"),Qdo=l(),Mh=a("li"),cde=a("strong"),Udo=o("yolos"),Hdo=o(" \u2014 "),wI=a("a"),Jdo=o("YolosConfig"),Ydo=o(" (YOLOS model)"),Kdo=l(),Eh=a("li"),fde=a("strong"),Zdo=o("yoso"),eco=o(" \u2014 "),AI=a("a"),oco=o("YosoConfig"),rco=o(" (YOSO model)"),tco=l(),F(Ch.$$.fragment),aco=l(),wh=a("div"),F(F8.$$.fragment),nco=l(),mde=a("p"),sco=o("Register a new configuration for this class."),JQe=l(),od=a("h2"),Ah=a("a"),gde=a("span"),F(T8.$$.fragment),lco=l(),hde=a("span"),ico=o("AutoTokenizer"),YQe=l(),xo=a("div"),F(M8.$$.fragment),dco=l(),E8=a("p"),cco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LI=a("a"),fco=o("AutoTokenizer.from_pretrained()"),mco=o(" class method."),gco=l(),C8=a("p"),hco=o("This class cannot be instantiated directly using "),pde=a("code"),pco=o("__init__()"),_co=o(" (throws an error)."),uco=l(),Sr=a("div"),F(w8.$$.fragment),bco=l(),_de=a("p"),vco=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Fco=l(),Ga=a("p"),Tco=o("The tokenizer class to instantiate is selected based on the "),ude=a("code"),Mco=o("model_type"),Eco=o(` property of the config object (either
passed as an argument or loaded from `),bde=a("code"),Cco=o("pretrained_model_name_or_path"),wco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=a("code"),Aco=o("pretrained_model_name_or_path"),Lco=o(":"),yco=l(),k=a("ul"),Hn=a("li"),Fde=a("strong"),xco=o("albert"),$co=o(" \u2014 "),yI=a("a"),kco=o("AlbertTokenizer"),Sco=o(" or "),xI=a("a"),Rco=o("AlbertTokenizerFast"),Pco=o(" (ALBERT model)"),Bco=l(),Jn=a("li"),Tde=a("strong"),Ico=o("bart"),Nco=o(" \u2014 "),$I=a("a"),qco=o("BartTokenizer"),jco=o(" or "),kI=a("a"),Dco=o("BartTokenizerFast"),Gco=o(" (BART model)"),Oco=l(),Yn=a("li"),Mde=a("strong"),Vco=o("barthez"),Xco=o(" \u2014 "),SI=a("a"),zco=o("BarthezTokenizer"),Wco=o(" or "),RI=a("a"),Qco=o("BarthezTokenizerFast"),Uco=o(" (BARThez model)"),Hco=l(),Kn=a("li"),Ede=a("strong"),Jco=o("bartpho"),Yco=o(" \u2014 "),PI=a("a"),Kco=o("BartphoTokenizer"),Zco=o(" or "),BI=a("a"),efo=o("BartphoTokenizerFast"),ofo=o(" (BARTpho model)"),rfo=l(),Zn=a("li"),Cde=a("strong"),tfo=o("bert"),afo=o(" \u2014 "),II=a("a"),nfo=o("BertTokenizer"),sfo=o(" or "),NI=a("a"),lfo=o("BertTokenizerFast"),ifo=o(" (BERT model)"),dfo=l(),Lh=a("li"),wde=a("strong"),cfo=o("bert-generation"),ffo=o(" \u2014 "),qI=a("a"),mfo=o("BertGenerationTokenizer"),gfo=o(" (Bert Generation model)"),hfo=l(),yh=a("li"),Ade=a("strong"),pfo=o("bert-japanese"),_fo=o(" \u2014 "),jI=a("a"),ufo=o("BertJapaneseTokenizer"),bfo=o(" (BertJapanese model)"),vfo=l(),es=a("li"),Lde=a("strong"),Ffo=o("bertweet"),Tfo=o(" \u2014 "),DI=a("a"),Mfo=o("BertweetTokenizer"),Efo=o(" or "),GI=a("a"),Cfo=o("BertweetTokenizerFast"),wfo=o(" (BERTweet model)"),Afo=l(),os=a("li"),yde=a("strong"),Lfo=o("big_bird"),yfo=o(" \u2014 "),OI=a("a"),xfo=o("BigBirdTokenizer"),$fo=o(" or "),VI=a("a"),kfo=o("BigBirdTokenizerFast"),Sfo=o(" (BigBird model)"),Rfo=l(),rs=a("li"),xde=a("strong"),Pfo=o("bigbird_pegasus"),Bfo=o(" \u2014 "),XI=a("a"),Ifo=o("PegasusTokenizer"),Nfo=o(" or "),zI=a("a"),qfo=o("PegasusTokenizerFast"),jfo=o(" (BigBird-Pegasus model)"),Dfo=l(),ts=a("li"),$de=a("strong"),Gfo=o("blenderbot"),Ofo=o(" \u2014 "),WI=a("a"),Vfo=o("BlenderbotTokenizer"),Xfo=o(" or "),QI=a("a"),zfo=o("BlenderbotTokenizerFast"),Wfo=o(" (Blenderbot model)"),Qfo=l(),xh=a("li"),kde=a("strong"),Ufo=o("blenderbot-small"),Hfo=o(" \u2014 "),UI=a("a"),Jfo=o("BlenderbotSmallTokenizer"),Yfo=o(" (BlenderbotSmall model)"),Kfo=l(),$h=a("li"),Sde=a("strong"),Zfo=o("bloom"),emo=o(" \u2014 "),HI=a("a"),omo=o("BloomTokenizerFast"),rmo=o(" (BLOOM model)"),tmo=l(),kh=a("li"),Rde=a("strong"),amo=o("byt5"),nmo=o(" \u2014 "),JI=a("a"),smo=o("ByT5Tokenizer"),lmo=o(" (ByT5 model)"),imo=l(),as=a("li"),Pde=a("strong"),dmo=o("camembert"),cmo=o(" \u2014 "),YI=a("a"),fmo=o("CamembertTokenizer"),mmo=o(" or "),KI=a("a"),gmo=o("CamembertTokenizerFast"),hmo=o(" (CamemBERT model)"),pmo=l(),Sh=a("li"),Bde=a("strong"),_mo=o("canine"),umo=o(" \u2014 "),ZI=a("a"),bmo=o("CanineTokenizer"),vmo=o(" (CANINE model)"),Fmo=l(),ns=a("li"),Ide=a("strong"),Tmo=o("clip"),Mmo=o(" \u2014 "),eN=a("a"),Emo=o("CLIPTokenizer"),Cmo=o(" or "),oN=a("a"),wmo=o("CLIPTokenizerFast"),Amo=o(" (CLIP model)"),Lmo=l(),ss=a("li"),Nde=a("strong"),ymo=o("codegen"),xmo=o(" \u2014 "),rN=a("a"),$mo=o("CodeGenTokenizer"),kmo=o(" or "),tN=a("a"),Smo=o("CodeGenTokenizerFast"),Rmo=o(" (CodeGen model)"),Pmo=l(),ls=a("li"),qde=a("strong"),Bmo=o("convbert"),Imo=o(" \u2014 "),aN=a("a"),Nmo=o("ConvBertTokenizer"),qmo=o(" or "),nN=a("a"),jmo=o("ConvBertTokenizerFast"),Dmo=o(" (ConvBERT model)"),Gmo=l(),is=a("li"),jde=a("strong"),Omo=o("cpm"),Vmo=o(" \u2014 "),sN=a("a"),Xmo=o("CpmTokenizer"),zmo=o(" or "),lN=a("a"),Wmo=o("CpmTokenizerFast"),Qmo=o(" (CPM model)"),Umo=l(),Rh=a("li"),Dde=a("strong"),Hmo=o("ctrl"),Jmo=o(" \u2014 "),iN=a("a"),Ymo=o("CTRLTokenizer"),Kmo=o(" (CTRL model)"),Zmo=l(),ds=a("li"),Gde=a("strong"),ego=o("data2vec-text"),ogo=o(" \u2014 "),dN=a("a"),rgo=o("RobertaTokenizer"),tgo=o(" or "),cN=a("a"),ago=o("RobertaTokenizerFast"),ngo=o(" (Data2VecText model)"),sgo=l(),cs=a("li"),Ode=a("strong"),lgo=o("deberta"),igo=o(" \u2014 "),fN=a("a"),dgo=o("DebertaTokenizer"),cgo=o(" or "),mN=a("a"),fgo=o("DebertaTokenizerFast"),mgo=o(" (DeBERTa model)"),ggo=l(),fs=a("li"),Vde=a("strong"),hgo=o("deberta-v2"),pgo=o(" \u2014 "),gN=a("a"),_go=o("DebertaV2Tokenizer"),ugo=o(" or "),hN=a("a"),bgo=o("DebertaV2TokenizerFast"),vgo=o(" (DeBERTa-v2 model)"),Fgo=l(),ms=a("li"),Xde=a("strong"),Tgo=o("distilbert"),Mgo=o(" \u2014 "),pN=a("a"),Ego=o("DistilBertTokenizer"),Cgo=o(" or "),_N=a("a"),wgo=o("DistilBertTokenizerFast"),Ago=o(" (DistilBERT model)"),Lgo=l(),gs=a("li"),zde=a("strong"),ygo=o("dpr"),xgo=o(" \u2014 "),uN=a("a"),$go=o("DPRQuestionEncoderTokenizer"),kgo=o(" or "),bN=a("a"),Sgo=o("DPRQuestionEncoderTokenizerFast"),Rgo=o(" (DPR model)"),Pgo=l(),hs=a("li"),Wde=a("strong"),Bgo=o("electra"),Igo=o(" \u2014 "),vN=a("a"),Ngo=o("ElectraTokenizer"),qgo=o(" or "),FN=a("a"),jgo=o("ElectraTokenizerFast"),Dgo=o(" (ELECTRA model)"),Ggo=l(),Ph=a("li"),Qde=a("strong"),Ogo=o("flaubert"),Vgo=o(" \u2014 "),TN=a("a"),Xgo=o("FlaubertTokenizer"),zgo=o(" (FlauBERT model)"),Wgo=l(),ps=a("li"),Ude=a("strong"),Qgo=o("fnet"),Ugo=o(" \u2014 "),MN=a("a"),Hgo=o("FNetTokenizer"),Jgo=o(" or "),EN=a("a"),Ygo=o("FNetTokenizerFast"),Kgo=o(" (FNet model)"),Zgo=l(),Bh=a("li"),Hde=a("strong"),eho=o("fsmt"),oho=o(" \u2014 "),CN=a("a"),rho=o("FSMTTokenizer"),tho=o(" (FairSeq Machine-Translation model)"),aho=l(),_s=a("li"),Jde=a("strong"),nho=o("funnel"),sho=o(" \u2014 "),wN=a("a"),lho=o("FunnelTokenizer"),iho=o(" or "),AN=a("a"),dho=o("FunnelTokenizerFast"),cho=o(" (Funnel Transformer model)"),fho=l(),us=a("li"),Yde=a("strong"),mho=o("gpt2"),gho=o(" \u2014 "),LN=a("a"),hho=o("GPT2Tokenizer"),pho=o(" or "),yN=a("a"),_ho=o("GPT2TokenizerFast"),uho=o(" (OpenAI GPT-2 model)"),bho=l(),bs=a("li"),Kde=a("strong"),vho=o("gpt_neo"),Fho=o(" \u2014 "),xN=a("a"),Tho=o("GPT2Tokenizer"),Mho=o(" or "),$N=a("a"),Eho=o("GPT2TokenizerFast"),Cho=o(" (GPT Neo model)"),who=l(),Ih=a("li"),Zde=a("strong"),Aho=o("gpt_neox"),Lho=o(" \u2014 "),kN=a("a"),yho=o("GPTNeoXTokenizerFast"),xho=o(" (GPT NeoX model)"),$ho=l(),vs=a("li"),ece=a("strong"),kho=o("gptj"),Sho=o(" \u2014 "),SN=a("a"),Rho=o("GPT2Tokenizer"),Pho=o(" or "),RN=a("a"),Bho=o("GPT2TokenizerFast"),Iho=o(" (GPT-J model)"),Nho=l(),Fs=a("li"),oce=a("strong"),qho=o("groupvit"),jho=o(" \u2014 "),PN=a("a"),Dho=o("CLIPTokenizer"),Gho=o(" or "),BN=a("a"),Oho=o("CLIPTokenizerFast"),Vho=o(" (GroupViT model)"),Xho=l(),Ts=a("li"),rce=a("strong"),zho=o("herbert"),Who=o(" \u2014 "),IN=a("a"),Qho=o("HerbertTokenizer"),Uho=o(" or "),NN=a("a"),Hho=o("HerbertTokenizerFast"),Jho=o(" (HerBERT model)"),Yho=l(),Nh=a("li"),tce=a("strong"),Kho=o("hubert"),Zho=o(" \u2014 "),qN=a("a"),epo=o("Wav2Vec2CTCTokenizer"),opo=o(" (Hubert model)"),rpo=l(),Ms=a("li"),ace=a("strong"),tpo=o("ibert"),apo=o(" \u2014 "),jN=a("a"),npo=o("RobertaTokenizer"),spo=o(" or "),DN=a("a"),lpo=o("RobertaTokenizerFast"),ipo=o(" (I-BERT model)"),dpo=l(),Es=a("li"),nce=a("strong"),cpo=o("layoutlm"),fpo=o(" \u2014 "),GN=a("a"),mpo=o("LayoutLMTokenizer"),gpo=o(" or "),ON=a("a"),hpo=o("LayoutLMTokenizerFast"),ppo=o(" (LayoutLM model)"),_po=l(),Cs=a("li"),sce=a("strong"),upo=o("layoutlmv2"),bpo=o(" \u2014 "),VN=a("a"),vpo=o("LayoutLMv2Tokenizer"),Fpo=o(" or "),XN=a("a"),Tpo=o("LayoutLMv2TokenizerFast"),Mpo=o(" (LayoutLMv2 model)"),Epo=l(),ws=a("li"),lce=a("strong"),Cpo=o("layoutlmv3"),wpo=o(" \u2014 "),zN=a("a"),Apo=o("LayoutLMv3Tokenizer"),Lpo=o(" or "),WN=a("a"),ypo=o("LayoutLMv3TokenizerFast"),xpo=o(" (LayoutLMv3 model)"),$po=l(),As=a("li"),ice=a("strong"),kpo=o("layoutxlm"),Spo=o(" \u2014 "),QN=a("a"),Rpo=o("LayoutXLMTokenizer"),Ppo=o(" or "),UN=a("a"),Bpo=o("LayoutXLMTokenizerFast"),Ipo=o(" (LayoutXLM model)"),Npo=l(),Ls=a("li"),dce=a("strong"),qpo=o("led"),jpo=o(" \u2014 "),HN=a("a"),Dpo=o("LEDTokenizer"),Gpo=o(" or "),JN=a("a"),Opo=o("LEDTokenizerFast"),Vpo=o(" (LED model)"),Xpo=l(),ys=a("li"),cce=a("strong"),zpo=o("longformer"),Wpo=o(" \u2014 "),YN=a("a"),Qpo=o("LongformerTokenizer"),Upo=o(" or "),KN=a("a"),Hpo=o("LongformerTokenizerFast"),Jpo=o(" (Longformer model)"),Ypo=l(),xs=a("li"),fce=a("strong"),Kpo=o("longt5"),Zpo=o(" \u2014 "),ZN=a("a"),e_o=o("T5Tokenizer"),o_o=o(" or "),eq=a("a"),r_o=o("T5TokenizerFast"),t_o=o(" (LongT5 model)"),a_o=l(),qh=a("li"),mce=a("strong"),n_o=o("luke"),s_o=o(" \u2014 "),oq=a("a"),l_o=o("LukeTokenizer"),i_o=o(" (LUKE model)"),d_o=l(),$s=a("li"),gce=a("strong"),c_o=o("lxmert"),f_o=o(" \u2014 "),rq=a("a"),m_o=o("LxmertTokenizer"),g_o=o(" or "),tq=a("a"),h_o=o("LxmertTokenizerFast"),p_o=o(" (LXMERT model)"),__o=l(),jh=a("li"),hce=a("strong"),u_o=o("m2m_100"),b_o=o(" \u2014 "),aq=a("a"),v_o=o("M2M100Tokenizer"),F_o=o(" (M2M100 model)"),T_o=l(),Dh=a("li"),pce=a("strong"),M_o=o("marian"),E_o=o(" \u2014 "),nq=a("a"),C_o=o("MarianTokenizer"),w_o=o(" (Marian model)"),A_o=l(),ks=a("li"),_ce=a("strong"),L_o=o("mbart"),y_o=o(" \u2014 "),sq=a("a"),x_o=o("MBartTokenizer"),$_o=o(" or "),lq=a("a"),k_o=o("MBartTokenizerFast"),S_o=o(" (mBART model)"),R_o=l(),Ss=a("li"),uce=a("strong"),P_o=o("mbart50"),B_o=o(" \u2014 "),iq=a("a"),I_o=o("MBart50Tokenizer"),N_o=o(" or "),dq=a("a"),q_o=o("MBart50TokenizerFast"),j_o=o(" (mBART-50 model)"),D_o=l(),Rs=a("li"),bce=a("strong"),G_o=o("megatron-bert"),O_o=o(" \u2014 "),cq=a("a"),V_o=o("BertTokenizer"),X_o=o(" or "),fq=a("a"),z_o=o("BertTokenizerFast"),W_o=o(" (Megatron-BERT model)"),Q_o=l(),Gh=a("li"),vce=a("strong"),U_o=o("mluke"),H_o=o(" \u2014 "),mq=a("a"),J_o=o("MLukeTokenizer"),Y_o=o(" (mLUKE model)"),K_o=l(),Ps=a("li"),Fce=a("strong"),Z_o=o("mobilebert"),euo=o(" \u2014 "),gq=a("a"),ouo=o("MobileBertTokenizer"),ruo=o(" or "),hq=a("a"),tuo=o("MobileBertTokenizerFast"),auo=o(" (MobileBERT model)"),nuo=l(),Bs=a("li"),Tce=a("strong"),suo=o("mpnet"),luo=o(" \u2014 "),pq=a("a"),iuo=o("MPNetTokenizer"),duo=o(" or "),_q=a("a"),cuo=o("MPNetTokenizerFast"),fuo=o(" (MPNet model)"),muo=l(),Is=a("li"),Mce=a("strong"),guo=o("mt5"),huo=o(" \u2014 "),uq=a("a"),puo=o("MT5Tokenizer"),_uo=o(" or "),bq=a("a"),uuo=o("MT5TokenizerFast"),buo=o(" (MT5 model)"),vuo=l(),Ns=a("li"),Ece=a("strong"),Fuo=o("mvp"),Tuo=o(" \u2014 "),vq=a("a"),Muo=o("MvpTokenizer"),Euo=o(" or "),Fq=a("a"),Cuo=o("MvpTokenizerFast"),wuo=o(" (MVP model)"),Auo=l(),qs=a("li"),Cce=a("strong"),Luo=o("nezha"),yuo=o(" \u2014 "),Tq=a("a"),xuo=o("BertTokenizer"),$uo=o(" or "),Mq=a("a"),kuo=o("BertTokenizerFast"),Suo=o(" (Nezha model)"),Ruo=l(),js=a("li"),wce=a("strong"),Puo=o("nllb"),Buo=o(" \u2014 "),Eq=a("a"),Iuo=o("NllbTokenizer"),Nuo=o(" or "),Cq=a("a"),quo=o("NllbTokenizerFast"),juo=o(" (NLLB model)"),Duo=l(),Ds=a("li"),Ace=a("strong"),Guo=o("nystromformer"),Ouo=o(" \u2014 "),wq=a("a"),Vuo=o("AlbertTokenizer"),Xuo=o(" or "),Aq=a("a"),zuo=o("AlbertTokenizerFast"),Wuo=o(" (Nystr\xF6mformer model)"),Quo=l(),Gs=a("li"),Lce=a("strong"),Uuo=o("openai-gpt"),Huo=o(" \u2014 "),Lq=a("a"),Juo=o("OpenAIGPTTokenizer"),Yuo=o(" or "),yq=a("a"),Kuo=o("OpenAIGPTTokenizerFast"),Zuo=o(" (OpenAI GPT model)"),e2o=l(),Oh=a("li"),yce=a("strong"),o2o=o("opt"),r2o=o(" \u2014 "),xq=a("a"),t2o=o("GPT2Tokenizer"),a2o=o(" (OPT model)"),n2o=l(),Os=a("li"),xce=a("strong"),s2o=o("owlvit"),l2o=o(" \u2014 "),$q=a("a"),i2o=o("CLIPTokenizer"),d2o=o(" or "),kq=a("a"),c2o=o("CLIPTokenizerFast"),f2o=o(" (OWL-ViT model)"),m2o=l(),Vs=a("li"),$ce=a("strong"),g2o=o("pegasus"),h2o=o(" \u2014 "),Sq=a("a"),p2o=o("PegasusTokenizer"),_2o=o(" or "),Rq=a("a"),u2o=o("PegasusTokenizerFast"),b2o=o(" (Pegasus model)"),v2o=l(),Vh=a("li"),kce=a("strong"),F2o=o("perceiver"),T2o=o(" \u2014 "),Pq=a("a"),M2o=o("PerceiverTokenizer"),E2o=o(" (Perceiver model)"),C2o=l(),Xs=a("li"),Sce=a("strong"),w2o=o("phobert"),A2o=o(" \u2014 "),Bq=a("a"),L2o=o("PhobertTokenizer"),y2o=o(" or "),Iq=a("a"),x2o=o("PhobertTokenizerFast"),$2o=o(" (PhoBERT model)"),k2o=l(),Xh=a("li"),Rce=a("strong"),S2o=o("plbart"),R2o=o(" \u2014 "),Nq=a("a"),P2o=o("PLBartTokenizer"),B2o=o(" (PLBart model)"),I2o=l(),zh=a("li"),Pce=a("strong"),N2o=o("prophetnet"),q2o=o(" \u2014 "),qq=a("a"),j2o=o("ProphetNetTokenizer"),D2o=o(" (ProphetNet model)"),G2o=l(),zs=a("li"),Bce=a("strong"),O2o=o("qdqbert"),V2o=o(" \u2014 "),jq=a("a"),X2o=o("BertTokenizer"),z2o=o(" or "),Dq=a("a"),W2o=o("BertTokenizerFast"),Q2o=o(" (QDQBert model)"),U2o=l(),Wh=a("li"),Ice=a("strong"),H2o=o("rag"),J2o=o(" \u2014 "),Gq=a("a"),Y2o=o("RagTokenizer"),K2o=o(" (RAG model)"),Z2o=l(),Ws=a("li"),Nce=a("strong"),e1o=o("realm"),o1o=o(" \u2014 "),Oq=a("a"),r1o=o("RealmTokenizer"),t1o=o(" or "),Vq=a("a"),a1o=o("RealmTokenizerFast"),n1o=o(" (REALM model)"),s1o=l(),Qs=a("li"),qce=a("strong"),l1o=o("reformer"),i1o=o(" \u2014 "),Xq=a("a"),d1o=o("ReformerTokenizer"),c1o=o(" or "),zq=a("a"),f1o=o("ReformerTokenizerFast"),m1o=o(" (Reformer model)"),g1o=l(),Us=a("li"),jce=a("strong"),h1o=o("rembert"),p1o=o(" \u2014 "),Wq=a("a"),_1o=o("RemBertTokenizer"),u1o=o(" or "),Qq=a("a"),b1o=o("RemBertTokenizerFast"),v1o=o(" (RemBERT model)"),F1o=l(),Hs=a("li"),Dce=a("strong"),T1o=o("retribert"),M1o=o(" \u2014 "),Uq=a("a"),E1o=o("RetriBertTokenizer"),C1o=o(" or "),Hq=a("a"),w1o=o("RetriBertTokenizerFast"),A1o=o(" (RetriBERT model)"),L1o=l(),Js=a("li"),Gce=a("strong"),y1o=o("roberta"),x1o=o(" \u2014 "),Jq=a("a"),$1o=o("RobertaTokenizer"),k1o=o(" or "),Yq=a("a"),S1o=o("RobertaTokenizerFast"),R1o=o(" (RoBERTa model)"),P1o=l(),Ys=a("li"),Oce=a("strong"),B1o=o("roformer"),I1o=o(" \u2014 "),Kq=a("a"),N1o=o("RoFormerTokenizer"),q1o=o(" or "),Zq=a("a"),j1o=o("RoFormerTokenizerFast"),D1o=o(" (RoFormer model)"),G1o=l(),Qh=a("li"),Vce=a("strong"),O1o=o("speech_to_text"),V1o=o(" \u2014 "),ej=a("a"),X1o=o("Speech2TextTokenizer"),z1o=o(" (Speech2Text model)"),W1o=l(),Uh=a("li"),Xce=a("strong"),Q1o=o("speech_to_text_2"),U1o=o(" \u2014 "),oj=a("a"),H1o=o("Speech2Text2Tokenizer"),J1o=o(" (Speech2Text2 model)"),Y1o=l(),Ks=a("li"),zce=a("strong"),K1o=o("splinter"),Z1o=o(" \u2014 "),rj=a("a"),e4o=o("SplinterTokenizer"),o4o=o(" or "),tj=a("a"),r4o=o("SplinterTokenizerFast"),t4o=o(" (Splinter model)"),a4o=l(),Zs=a("li"),Wce=a("strong"),n4o=o("squeezebert"),s4o=o(" \u2014 "),aj=a("a"),l4o=o("SqueezeBertTokenizer"),i4o=o(" or "),nj=a("a"),d4o=o("SqueezeBertTokenizerFast"),c4o=o(" (SqueezeBERT model)"),f4o=l(),el=a("li"),Qce=a("strong"),m4o=o("t5"),g4o=o(" \u2014 "),sj=a("a"),h4o=o("T5Tokenizer"),p4o=o(" or "),lj=a("a"),_4o=o("T5TokenizerFast"),u4o=o(" (T5 model)"),b4o=l(),Hh=a("li"),Uce=a("strong"),v4o=o("tapas"),F4o=o(" \u2014 "),ij=a("a"),T4o=o("TapasTokenizer"),M4o=o(" (TAPAS model)"),E4o=l(),Jh=a("li"),Hce=a("strong"),C4o=o("tapex"),w4o=o(" \u2014 "),dj=a("a"),A4o=o("TapexTokenizer"),L4o=o(" (TAPEX model)"),y4o=l(),Yh=a("li"),Jce=a("strong"),x4o=o("transfo-xl"),$4o=o(" \u2014 "),cj=a("a"),k4o=o("TransfoXLTokenizer"),S4o=o(" (Transformer-XL model)"),R4o=l(),ol=a("li"),Yce=a("strong"),P4o=o("vilt"),B4o=o(" \u2014 "),fj=a("a"),I4o=o("BertTokenizer"),N4o=o(" or "),mj=a("a"),q4o=o("BertTokenizerFast"),j4o=o(" (ViLT model)"),D4o=l(),rl=a("li"),Kce=a("strong"),G4o=o("visual_bert"),O4o=o(" \u2014 "),gj=a("a"),V4o=o("BertTokenizer"),X4o=o(" or "),hj=a("a"),z4o=o("BertTokenizerFast"),W4o=o(" (VisualBERT model)"),Q4o=l(),Kh=a("li"),Zce=a("strong"),U4o=o("wav2vec2"),H4o=o(" \u2014 "),pj=a("a"),J4o=o("Wav2Vec2CTCTokenizer"),Y4o=o(" (Wav2Vec2 model)"),K4o=l(),Zh=a("li"),efe=a("strong"),Z4o=o("wav2vec2-conformer"),ebo=o(" \u2014 "),_j=a("a"),obo=o("Wav2Vec2CTCTokenizer"),rbo=o(" (Wav2Vec2-Conformer model)"),tbo=l(),ep=a("li"),ofe=a("strong"),abo=o("wav2vec2_phoneme"),nbo=o(" \u2014 "),uj=a("a"),sbo=o("Wav2Vec2PhonemeCTCTokenizer"),lbo=o(" (Wav2Vec2Phoneme model)"),ibo=l(),tl=a("li"),rfe=a("strong"),dbo=o("xglm"),cbo=o(" \u2014 "),bj=a("a"),fbo=o("XGLMTokenizer"),mbo=o(" or "),vj=a("a"),gbo=o("XGLMTokenizerFast"),hbo=o(" (XGLM model)"),pbo=l(),op=a("li"),tfe=a("strong"),_bo=o("xlm"),ubo=o(" \u2014 "),Fj=a("a"),bbo=o("XLMTokenizer"),vbo=o(" (XLM model)"),Fbo=l(),rp=a("li"),afe=a("strong"),Tbo=o("xlm-prophetnet"),Mbo=o(" \u2014 "),Tj=a("a"),Ebo=o("XLMProphetNetTokenizer"),Cbo=o(" (XLM-ProphetNet model)"),wbo=l(),al=a("li"),nfe=a("strong"),Abo=o("xlm-roberta"),Lbo=o(" \u2014 "),Mj=a("a"),ybo=o("XLMRobertaTokenizer"),xbo=o(" or "),Ej=a("a"),$bo=o("XLMRobertaTokenizerFast"),kbo=o(" (XLM-RoBERTa model)"),Sbo=l(),nl=a("li"),sfe=a("strong"),Rbo=o("xlm-roberta-xl"),Pbo=o(" \u2014 "),Cj=a("a"),Bbo=o("RobertaTokenizer"),Ibo=o(" or "),wj=a("a"),Nbo=o("RobertaTokenizerFast"),qbo=o(" (XLM-RoBERTa-XL model)"),jbo=l(),sl=a("li"),lfe=a("strong"),Dbo=o("xlnet"),Gbo=o(" \u2014 "),Aj=a("a"),Obo=o("XLNetTokenizer"),Vbo=o(" or "),Lj=a("a"),Xbo=o("XLNetTokenizerFast"),zbo=o(" (XLNet model)"),Wbo=l(),ll=a("li"),ife=a("strong"),Qbo=o("yoso"),Ubo=o(" \u2014 "),yj=a("a"),Hbo=o("AlbertTokenizer"),Jbo=o(" or "),xj=a("a"),Ybo=o("AlbertTokenizerFast"),Kbo=o(" (YOSO model)"),Zbo=l(),F(tp.$$.fragment),evo=l(),ap=a("div"),F(A8.$$.fragment),ovo=l(),dfe=a("p"),rvo=o("Register a new tokenizer in this mapping."),KQe=l(),rd=a("h2"),np=a("a"),cfe=a("span"),F(L8.$$.fragment),tvo=l(),ffe=a("span"),avo=o("AutoFeatureExtractor"),ZQe=l(),$o=a("div"),F(y8.$$.fragment),nvo=l(),x8=a("p"),svo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$j=a("a"),lvo=o("AutoFeatureExtractor.from_pretrained()"),ivo=o(" class method."),dvo=l(),$8=a("p"),cvo=o("This class cannot be instantiated directly using "),mfe=a("code"),fvo=o("__init__()"),mvo=o(" (throws an error)."),gvo=l(),He=a("div"),F(k8.$$.fragment),hvo=l(),gfe=a("p"),pvo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_vo=l(),Oa=a("p"),uvo=o("The feature extractor class to instantiate is selected based on the "),hfe=a("code"),bvo=o("model_type"),vvo=o(` property of the config object
(either passed as an argument or loaded from `),pfe=a("code"),Fvo=o("pretrained_model_name_or_path"),Tvo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),_fe=a("code"),Mvo=o("pretrained_model_name_or_path"),Evo=o(":"),Cvo=l(),Q=a("ul"),sp=a("li"),ufe=a("strong"),wvo=o("beit"),Avo=o(" \u2014 "),kj=a("a"),Lvo=o("BeitFeatureExtractor"),yvo=o(" (BEiT model)"),xvo=l(),lp=a("li"),bfe=a("strong"),$vo=o("clip"),kvo=o(" \u2014 "),Sj=a("a"),Svo=o("CLIPFeatureExtractor"),Rvo=o(" (CLIP model)"),Pvo=l(),ip=a("li"),vfe=a("strong"),Bvo=o("convnext"),Ivo=o(" \u2014 "),Rj=a("a"),Nvo=o("ConvNextFeatureExtractor"),qvo=o(" (ConvNeXT model)"),jvo=l(),dp=a("li"),Ffe=a("strong"),Dvo=o("cvt"),Gvo=o(" \u2014 "),Pj=a("a"),Ovo=o("ConvNextFeatureExtractor"),Vvo=o(" (CvT model)"),Xvo=l(),cp=a("li"),Tfe=a("strong"),zvo=o("data2vec-audio"),Wvo=o(" \u2014 "),Bj=a("a"),Qvo=o("Wav2Vec2FeatureExtractor"),Uvo=o(" (Data2VecAudio model)"),Hvo=l(),fp=a("li"),Mfe=a("strong"),Jvo=o("data2vec-vision"),Yvo=o(" \u2014 "),Ij=a("a"),Kvo=o("BeitFeatureExtractor"),Zvo=o(" (Data2VecVision model)"),e5o=l(),mp=a("li"),Efe=a("strong"),o5o=o("deit"),r5o=o(" \u2014 "),Nj=a("a"),t5o=o("DeiTFeatureExtractor"),a5o=o(" (DeiT model)"),n5o=l(),gp=a("li"),Cfe=a("strong"),s5o=o("detr"),l5o=o(" \u2014 "),qj=a("a"),i5o=o("DetrFeatureExtractor"),d5o=o(" (DETR model)"),c5o=l(),hp=a("li"),wfe=a("strong"),f5o=o("donut"),m5o=o(" \u2014 "),jj=a("a"),g5o=o("DonutFeatureExtractor"),h5o=o(" (Donut model)"),p5o=l(),pp=a("li"),Afe=a("strong"),_5o=o("dpt"),u5o=o(" \u2014 "),Dj=a("a"),b5o=o("DPTFeatureExtractor"),v5o=o(" (DPT model)"),F5o=l(),_p=a("li"),Lfe=a("strong"),T5o=o("flava"),M5o=o(" \u2014 "),Gj=a("a"),E5o=o("FlavaFeatureExtractor"),C5o=o(" (FLAVA model)"),w5o=l(),up=a("li"),yfe=a("strong"),A5o=o("glpn"),L5o=o(" \u2014 "),Oj=a("a"),y5o=o("GLPNFeatureExtractor"),x5o=o(" (GLPN model)"),$5o=l(),bp=a("li"),xfe=a("strong"),k5o=o("groupvit"),S5o=o(" \u2014 "),Vj=a("a"),R5o=o("CLIPFeatureExtractor"),P5o=o(" (GroupViT model)"),B5o=l(),vp=a("li"),$fe=a("strong"),I5o=o("hubert"),N5o=o(" \u2014 "),Xj=a("a"),q5o=o("Wav2Vec2FeatureExtractor"),j5o=o(" (Hubert model)"),D5o=l(),Fp=a("li"),kfe=a("strong"),G5o=o("imagegpt"),O5o=o(" \u2014 "),zj=a("a"),V5o=o("ImageGPTFeatureExtractor"),X5o=o(" (ImageGPT model)"),z5o=l(),Tp=a("li"),Sfe=a("strong"),W5o=o("layoutlmv2"),Q5o=o(" \u2014 "),Wj=a("a"),U5o=o("LayoutLMv2FeatureExtractor"),H5o=o(" (LayoutLMv2 model)"),J5o=l(),Mp=a("li"),Rfe=a("strong"),Y5o=o("layoutlmv3"),K5o=o(" \u2014 "),Qj=a("a"),Z5o=o("LayoutLMv3FeatureExtractor"),eFo=o(" (LayoutLMv3 model)"),oFo=l(),Ep=a("li"),Pfe=a("strong"),rFo=o("levit"),tFo=o(" \u2014 "),Uj=a("a"),aFo=o("LevitFeatureExtractor"),nFo=o(" (LeViT model)"),sFo=l(),Cp=a("li"),Bfe=a("strong"),lFo=o("maskformer"),iFo=o(" \u2014 "),Hj=a("a"),dFo=o("MaskFormerFeatureExtractor"),cFo=o(" (MaskFormer model)"),fFo=l(),wp=a("li"),Ife=a("strong"),mFo=o("mctct"),gFo=o(" \u2014 "),Jj=a("a"),hFo=o("MCTCTFeatureExtractor"),pFo=o(" (M-CTC-T model)"),_Fo=l(),Ap=a("li"),Nfe=a("strong"),uFo=o("mobilevit"),bFo=o(" \u2014 "),Yj=a("a"),vFo=o("MobileViTFeatureExtractor"),FFo=o(" (MobileViT model)"),TFo=l(),Lp=a("li"),qfe=a("strong"),MFo=o("owlvit"),EFo=o(" \u2014 "),Kj=a("a"),CFo=o("OwlViTFeatureExtractor"),wFo=o(" (OWL-ViT model)"),AFo=l(),yp=a("li"),jfe=a("strong"),LFo=o("perceiver"),yFo=o(" \u2014 "),Zj=a("a"),xFo=o("PerceiverFeatureExtractor"),$Fo=o(" (Perceiver model)"),kFo=l(),xp=a("li"),Dfe=a("strong"),SFo=o("poolformer"),RFo=o(" \u2014 "),eD=a("a"),PFo=o("PoolFormerFeatureExtractor"),BFo=o(" (PoolFormer model)"),IFo=l(),$p=a("li"),Gfe=a("strong"),NFo=o("regnet"),qFo=o(" \u2014 "),oD=a("a"),jFo=o("ConvNextFeatureExtractor"),DFo=o(" (RegNet model)"),GFo=l(),kp=a("li"),Ofe=a("strong"),OFo=o("resnet"),VFo=o(" \u2014 "),rD=a("a"),XFo=o("ConvNextFeatureExtractor"),zFo=o(" (ResNet model)"),WFo=l(),Sp=a("li"),Vfe=a("strong"),QFo=o("segformer"),UFo=o(" \u2014 "),tD=a("a"),HFo=o("SegformerFeatureExtractor"),JFo=o(" (SegFormer model)"),YFo=l(),Rp=a("li"),Xfe=a("strong"),KFo=o("speech_to_text"),ZFo=o(" \u2014 "),aD=a("a"),eTo=o("Speech2TextFeatureExtractor"),oTo=o(" (Speech2Text model)"),rTo=l(),Pp=a("li"),zfe=a("strong"),tTo=o("swin"),aTo=o(" \u2014 "),nD=a("a"),nTo=o("ViTFeatureExtractor"),sTo=o(" (Swin Transformer model)"),lTo=l(),Bp=a("li"),Wfe=a("strong"),iTo=o("swinv2"),dTo=o(" \u2014 "),sD=a("a"),cTo=o("ViTFeatureExtractor"),fTo=o(" (Swin Transformer V2 model)"),mTo=l(),Ip=a("li"),Qfe=a("strong"),gTo=o("van"),hTo=o(" \u2014 "),lD=a("a"),pTo=o("ConvNextFeatureExtractor"),_To=o(" (VAN model)"),uTo=l(),Np=a("li"),Ufe=a("strong"),bTo=o("videomae"),vTo=o(" \u2014 "),iD=a("a"),FTo=o("ViTFeatureExtractor"),TTo=o(" (VideoMAE model)"),MTo=l(),qp=a("li"),Hfe=a("strong"),ETo=o("vilt"),CTo=o(" \u2014 "),dD=a("a"),wTo=o("ViltFeatureExtractor"),ATo=o(" (ViLT model)"),LTo=l(),jp=a("li"),Jfe=a("strong"),yTo=o("vit"),xTo=o(" \u2014 "),cD=a("a"),$To=o("ViTFeatureExtractor"),kTo=o(" (ViT model)"),STo=l(),Dp=a("li"),Yfe=a("strong"),RTo=o("vit_mae"),PTo=o(" \u2014 "),fD=a("a"),BTo=o("ViTFeatureExtractor"),ITo=o(" (ViTMAE model)"),NTo=l(),Gp=a("li"),Kfe=a("strong"),qTo=o("wav2vec2"),jTo=o(" \u2014 "),mD=a("a"),DTo=o("Wav2Vec2FeatureExtractor"),GTo=o(" (Wav2Vec2 model)"),OTo=l(),Op=a("li"),Zfe=a("strong"),VTo=o("wav2vec2-conformer"),XTo=o(" \u2014 "),gD=a("a"),zTo=o("Wav2Vec2FeatureExtractor"),WTo=o(" (Wav2Vec2-Conformer model)"),QTo=l(),Vp=a("li"),eme=a("strong"),UTo=o("yolos"),HTo=o(" \u2014 "),hD=a("a"),JTo=o("YolosFeatureExtractor"),YTo=o(" (YOLOS model)"),KTo=l(),F(Xp.$$.fragment),ZTo=l(),F(zp.$$.fragment),e7o=l(),Wp=a("div"),F(S8.$$.fragment),o7o=l(),ome=a("p"),r7o=o("Register a new feature extractor for this class."),eUe=l(),td=a("h2"),Qp=a("a"),rme=a("span"),F(R8.$$.fragment),t7o=l(),tme=a("span"),a7o=o("AutoProcessor"),oUe=l(),ko=a("div"),F(P8.$$.fragment),n7o=l(),B8=a("p"),s7o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),pD=a("a"),l7o=o("AutoProcessor.from_pretrained()"),i7o=o(" class method."),d7o=l(),I8=a("p"),c7o=o("This class cannot be instantiated directly using "),ame=a("code"),f7o=o("__init__()"),m7o=o(" (throws an error)."),g7o=l(),Je=a("div"),F(N8.$$.fragment),h7o=l(),nme=a("p"),p7o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),_7o=l(),ad=a("p"),u7o=o("The processor class to instantiate is selected based on the "),sme=a("code"),b7o=o("model_type"),v7o=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),F7o=o("pretrained_model_name_or_path"),T7o=o(" if possible):"),M7o=l(),ie=a("ul"),Up=a("li"),ime=a("strong"),E7o=o("clip"),C7o=o(" \u2014 "),_D=a("a"),w7o=o("CLIPProcessor"),A7o=o(" (CLIP model)"),L7o=l(),Hp=a("li"),dme=a("strong"),y7o=o("donut"),x7o=o(" \u2014 "),uD=a("a"),$7o=o("DonutProcessor"),k7o=o(" (Donut model)"),S7o=l(),Jp=a("li"),cme=a("strong"),R7o=o("flava"),P7o=o(" \u2014 "),bD=a("a"),B7o=o("FlavaProcessor"),I7o=o(" (FLAVA model)"),N7o=l(),Yp=a("li"),fme=a("strong"),q7o=o("groupvit"),j7o=o(" \u2014 "),vD=a("a"),D7o=o("CLIPProcessor"),G7o=o(" (GroupViT model)"),O7o=l(),Kp=a("li"),mme=a("strong"),V7o=o("layoutlmv2"),X7o=o(" \u2014 "),FD=a("a"),z7o=o("LayoutLMv2Processor"),W7o=o(" (LayoutLMv2 model)"),Q7o=l(),Zp=a("li"),gme=a("strong"),U7o=o("layoutlmv3"),H7o=o(" \u2014 "),TD=a("a"),J7o=o("LayoutLMv3Processor"),Y7o=o(" (LayoutLMv3 model)"),K7o=l(),e_=a("li"),hme=a("strong"),Z7o=o("layoutxlm"),eMo=o(" \u2014 "),MD=a("a"),oMo=o("LayoutXLMProcessor"),rMo=o(" (LayoutXLM model)"),tMo=l(),o_=a("li"),pme=a("strong"),aMo=o("owlvit"),nMo=o(" \u2014 "),ED=a("a"),sMo=o("OwlViTProcessor"),lMo=o(" (OWL-ViT model)"),iMo=l(),r_=a("li"),_me=a("strong"),dMo=o("sew"),cMo=o(" \u2014 "),CD=a("a"),fMo=o("Wav2Vec2Processor"),mMo=o(" (SEW model)"),gMo=l(),t_=a("li"),ume=a("strong"),hMo=o("sew-d"),pMo=o(" \u2014 "),wD=a("a"),_Mo=o("Wav2Vec2Processor"),uMo=o(" (SEW-D model)"),bMo=l(),a_=a("li"),bme=a("strong"),vMo=o("speech_to_text"),FMo=o(" \u2014 "),AD=a("a"),TMo=o("Speech2TextProcessor"),MMo=o(" (Speech2Text model)"),EMo=l(),n_=a("li"),vme=a("strong"),CMo=o("speech_to_text_2"),wMo=o(" \u2014 "),LD=a("a"),AMo=o("Speech2Text2Processor"),LMo=o(" (Speech2Text2 model)"),yMo=l(),s_=a("li"),Fme=a("strong"),xMo=o("trocr"),$Mo=o(" \u2014 "),yD=a("a"),kMo=o("TrOCRProcessor"),SMo=o(" (TrOCR model)"),RMo=l(),l_=a("li"),Tme=a("strong"),PMo=o("unispeech"),BMo=o(" \u2014 "),xD=a("a"),IMo=o("Wav2Vec2Processor"),NMo=o(" (UniSpeech model)"),qMo=l(),i_=a("li"),Mme=a("strong"),jMo=o("unispeech-sat"),DMo=o(" \u2014 "),$D=a("a"),GMo=o("Wav2Vec2Processor"),OMo=o(" (UniSpeechSat model)"),VMo=l(),d_=a("li"),Eme=a("strong"),XMo=o("vilt"),zMo=o(" \u2014 "),kD=a("a"),WMo=o("ViltProcessor"),QMo=o(" (ViLT model)"),UMo=l(),c_=a("li"),Cme=a("strong"),HMo=o("vision-text-dual-encoder"),JMo=o(" \u2014 "),SD=a("a"),YMo=o("VisionTextDualEncoderProcessor"),KMo=o(" (VisionTextDualEncoder model)"),ZMo=l(),f_=a("li"),wme=a("strong"),eEo=o("wav2vec2"),oEo=o(" \u2014 "),RD=a("a"),rEo=o("Wav2Vec2Processor"),tEo=o(" (Wav2Vec2 model)"),aEo=l(),m_=a("li"),Ame=a("strong"),nEo=o("wav2vec2-conformer"),sEo=o(" \u2014 "),PD=a("a"),lEo=o("Wav2Vec2Processor"),iEo=o(" (Wav2Vec2-Conformer model)"),dEo=l(),g_=a("li"),Lme=a("strong"),cEo=o("wavlm"),fEo=o(" \u2014 "),BD=a("a"),mEo=o("Wav2Vec2Processor"),gEo=o(" (WavLM model)"),hEo=l(),F(h_.$$.fragment),pEo=l(),F(p_.$$.fragment),_Eo=l(),__=a("div"),F(q8.$$.fragment),uEo=l(),yme=a("p"),bEo=o("Register a new processor for this class."),rUe=l(),nd=a("h2"),u_=a("a"),xme=a("span"),F(j8.$$.fragment),vEo=l(),$me=a("span"),FEo=o("AutoModel"),tUe=l(),So=a("div"),F(D8.$$.fragment),TEo=l(),sd=a("p"),MEo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ID=a("a"),EEo=o("from_pretrained()"),CEo=o(" class method or the "),ND=a("a"),wEo=o("from_config()"),AEo=o(` class
method.`),LEo=l(),G8=a("p"),yEo=o("This class cannot be instantiated directly using "),kme=a("code"),xEo=o("__init__()"),$Eo=o(" (throws an error)."),kEo=l(),mt=a("div"),F(O8.$$.fragment),SEo=l(),Sme=a("p"),REo=o("Instantiates one of the base model classes of the library from a configuration."),PEo=l(),ld=a("p"),BEo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),IEo=o("not"),NEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),qEo=o("from_pretrained()"),jEo=o(" to load the model weights."),DEo=l(),F(b_.$$.fragment),GEo=l(),Ye=a("div"),F(V8.$$.fragment),OEo=l(),Pme=a("p"),VEo=o("Instantiate one of the base model classes of the library from a pretrained model."),XEo=l(),Va=a("p"),zEo=o("The model class to instantiate is selected based on the "),Bme=a("code"),WEo=o("model_type"),QEo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),UEo=o("pretrained_model_name_or_path"),HEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),JEo=o("pretrained_model_name_or_path"),YEo=o(":"),KEo=l(),y=a("ul"),v_=a("li"),qme=a("strong"),ZEo=o("albert"),eCo=o(" \u2014 "),jD=a("a"),oCo=o("AlbertModel"),rCo=o(" (ALBERT model)"),tCo=l(),F_=a("li"),jme=a("strong"),aCo=o("bart"),nCo=o(" \u2014 "),DD=a("a"),sCo=o("BartModel"),lCo=o(" (BART model)"),iCo=l(),T_=a("li"),Dme=a("strong"),dCo=o("beit"),cCo=o(" \u2014 "),GD=a("a"),fCo=o("BeitModel"),mCo=o(" (BEiT model)"),gCo=l(),M_=a("li"),Gme=a("strong"),hCo=o("bert"),pCo=o(" \u2014 "),OD=a("a"),_Co=o("BertModel"),uCo=o(" (BERT model)"),bCo=l(),E_=a("li"),Ome=a("strong"),vCo=o("bert-generation"),FCo=o(" \u2014 "),VD=a("a"),TCo=o("BertGenerationEncoder"),MCo=o(" (Bert Generation model)"),ECo=l(),C_=a("li"),Vme=a("strong"),CCo=o("big_bird"),wCo=o(" \u2014 "),XD=a("a"),ACo=o("BigBirdModel"),LCo=o(" (BigBird model)"),yCo=l(),w_=a("li"),Xme=a("strong"),xCo=o("bigbird_pegasus"),$Co=o(" \u2014 "),zD=a("a"),kCo=o("BigBirdPegasusModel"),SCo=o(" (BigBird-Pegasus model)"),RCo=l(),A_=a("li"),zme=a("strong"),PCo=o("blenderbot"),BCo=o(" \u2014 "),WD=a("a"),ICo=o("BlenderbotModel"),NCo=o(" (Blenderbot model)"),qCo=l(),L_=a("li"),Wme=a("strong"),jCo=o("blenderbot-small"),DCo=o(" \u2014 "),QD=a("a"),GCo=o("BlenderbotSmallModel"),OCo=o(" (BlenderbotSmall model)"),VCo=l(),y_=a("li"),Qme=a("strong"),XCo=o("bloom"),zCo=o(" \u2014 "),UD=a("a"),WCo=o("BloomModel"),QCo=o(" (BLOOM model)"),UCo=l(),x_=a("li"),Ume=a("strong"),HCo=o("camembert"),JCo=o(" \u2014 "),HD=a("a"),YCo=o("CamembertModel"),KCo=o(" (CamemBERT model)"),ZCo=l(),$_=a("li"),Hme=a("strong"),e3o=o("canine"),o3o=o(" \u2014 "),JD=a("a"),r3o=o("CanineModel"),t3o=o(" (CANINE model)"),a3o=l(),k_=a("li"),Jme=a("strong"),n3o=o("clip"),s3o=o(" \u2014 "),YD=a("a"),l3o=o("CLIPModel"),i3o=o(" (CLIP model)"),d3o=l(),S_=a("li"),Yme=a("strong"),c3o=o("codegen"),f3o=o(" \u2014 "),KD=a("a"),m3o=o("CodeGenModel"),g3o=o(" (CodeGen model)"),h3o=l(),R_=a("li"),Kme=a("strong"),p3o=o("convbert"),_3o=o(" \u2014 "),ZD=a("a"),u3o=o("ConvBertModel"),b3o=o(" (ConvBERT model)"),v3o=l(),P_=a("li"),Zme=a("strong"),F3o=o("convnext"),T3o=o(" \u2014 "),eG=a("a"),M3o=o("ConvNextModel"),E3o=o(" (ConvNeXT model)"),C3o=l(),B_=a("li"),ege=a("strong"),w3o=o("ctrl"),A3o=o(" \u2014 "),oG=a("a"),L3o=o("CTRLModel"),y3o=o(" (CTRL model)"),x3o=l(),I_=a("li"),oge=a("strong"),$3o=o("cvt"),k3o=o(" \u2014 "),rG=a("a"),S3o=o("CvtModel"),R3o=o(" (CvT model)"),P3o=l(),N_=a("li"),rge=a("strong"),B3o=o("data2vec-audio"),I3o=o(" \u2014 "),tG=a("a"),N3o=o("Data2VecAudioModel"),q3o=o(" (Data2VecAudio model)"),j3o=l(),q_=a("li"),tge=a("strong"),D3o=o("data2vec-text"),G3o=o(" \u2014 "),aG=a("a"),O3o=o("Data2VecTextModel"),V3o=o(" (Data2VecText model)"),X3o=l(),j_=a("li"),age=a("strong"),z3o=o("data2vec-vision"),W3o=o(" \u2014 "),nG=a("a"),Q3o=o("Data2VecVisionModel"),U3o=o(" (Data2VecVision model)"),H3o=l(),D_=a("li"),nge=a("strong"),J3o=o("deberta"),Y3o=o(" \u2014 "),sG=a("a"),K3o=o("DebertaModel"),Z3o=o(" (DeBERTa model)"),e0o=l(),G_=a("li"),sge=a("strong"),o0o=o("deberta-v2"),r0o=o(" \u2014 "),lG=a("a"),t0o=o("DebertaV2Model"),a0o=o(" (DeBERTa-v2 model)"),n0o=l(),O_=a("li"),lge=a("strong"),s0o=o("decision_transformer"),l0o=o(" \u2014 "),iG=a("a"),i0o=o("DecisionTransformerModel"),d0o=o(" (Decision Transformer model)"),c0o=l(),V_=a("li"),ige=a("strong"),f0o=o("deit"),m0o=o(" \u2014 "),dG=a("a"),g0o=o("DeiTModel"),h0o=o(" (DeiT model)"),p0o=l(),X_=a("li"),dge=a("strong"),_0o=o("detr"),u0o=o(" \u2014 "),cG=a("a"),b0o=o("DetrModel"),v0o=o(" (DETR model)"),F0o=l(),z_=a("li"),cge=a("strong"),T0o=o("distilbert"),M0o=o(" \u2014 "),fG=a("a"),E0o=o("DistilBertModel"),C0o=o(" (DistilBERT model)"),w0o=l(),W_=a("li"),fge=a("strong"),A0o=o("donut-swin"),L0o=o(" \u2014 "),mG=a("a"),y0o=o("DonutSwinModel"),x0o=o(" (DonutSwin model)"),$0o=l(),Q_=a("li"),mge=a("strong"),k0o=o("dpr"),S0o=o(" \u2014 "),gG=a("a"),R0o=o("DPRQuestionEncoder"),P0o=o(" (DPR model)"),B0o=l(),U_=a("li"),gge=a("strong"),I0o=o("dpt"),N0o=o(" \u2014 "),hG=a("a"),q0o=o("DPTModel"),j0o=o(" (DPT model)"),D0o=l(),H_=a("li"),hge=a("strong"),G0o=o("electra"),O0o=o(" \u2014 "),pG=a("a"),V0o=o("ElectraModel"),X0o=o(" (ELECTRA model)"),z0o=l(),J_=a("li"),pge=a("strong"),W0o=o("flaubert"),Q0o=o(" \u2014 "),_G=a("a"),U0o=o("FlaubertModel"),H0o=o(" (FlauBERT model)"),J0o=l(),Y_=a("li"),_ge=a("strong"),Y0o=o("flava"),K0o=o(" \u2014 "),uG=a("a"),Z0o=o("FlavaModel"),ewo=o(" (FLAVA model)"),owo=l(),K_=a("li"),uge=a("strong"),rwo=o("fnet"),two=o(" \u2014 "),bG=a("a"),awo=o("FNetModel"),nwo=o(" (FNet model)"),swo=l(),Z_=a("li"),bge=a("strong"),lwo=o("fsmt"),iwo=o(" \u2014 "),vG=a("a"),dwo=o("FSMTModel"),cwo=o(" (FairSeq Machine-Translation model)"),fwo=l(),il=a("li"),vge=a("strong"),mwo=o("funnel"),gwo=o(" \u2014 "),FG=a("a"),hwo=o("FunnelModel"),pwo=o(" or "),TG=a("a"),_wo=o("FunnelBaseModel"),uwo=o(" (Funnel Transformer model)"),bwo=l(),eu=a("li"),Fge=a("strong"),vwo=o("glpn"),Fwo=o(" \u2014 "),MG=a("a"),Two=o("GLPNModel"),Mwo=o(" (GLPN model)"),Ewo=l(),ou=a("li"),Tge=a("strong"),Cwo=o("gpt2"),wwo=o(" \u2014 "),EG=a("a"),Awo=o("GPT2Model"),Lwo=o(" (OpenAI GPT-2 model)"),ywo=l(),ru=a("li"),Mge=a("strong"),xwo=o("gpt_neo"),$wo=o(" \u2014 "),CG=a("a"),kwo=o("GPTNeoModel"),Swo=o(" (GPT Neo model)"),Rwo=l(),tu=a("li"),Ege=a("strong"),Pwo=o("gpt_neox"),Bwo=o(" \u2014 "),wG=a("a"),Iwo=o("GPTNeoXModel"),Nwo=o(" (GPT NeoX model)"),qwo=l(),au=a("li"),Cge=a("strong"),jwo=o("gptj"),Dwo=o(" \u2014 "),AG=a("a"),Gwo=o("GPTJModel"),Owo=o(" (GPT-J model)"),Vwo=l(),nu=a("li"),wge=a("strong"),Xwo=o("groupvit"),zwo=o(" \u2014 "),LG=a("a"),Wwo=o("GroupViTModel"),Qwo=o(" (GroupViT model)"),Uwo=l(),su=a("li"),Age=a("strong"),Hwo=o("hubert"),Jwo=o(" \u2014 "),yG=a("a"),Ywo=o("HubertModel"),Kwo=o(" (Hubert model)"),Zwo=l(),lu=a("li"),Lge=a("strong"),e6o=o("ibert"),o6o=o(" \u2014 "),xG=a("a"),r6o=o("IBertModel"),t6o=o(" (I-BERT model)"),a6o=l(),iu=a("li"),yge=a("strong"),n6o=o("imagegpt"),s6o=o(" \u2014 "),$G=a("a"),l6o=o("ImageGPTModel"),i6o=o(" (ImageGPT model)"),d6o=l(),du=a("li"),xge=a("strong"),c6o=o("layoutlm"),f6o=o(" \u2014 "),kG=a("a"),m6o=o("LayoutLMModel"),g6o=o(" (LayoutLM model)"),h6o=l(),cu=a("li"),$ge=a("strong"),p6o=o("layoutlmv2"),_6o=o(" \u2014 "),SG=a("a"),u6o=o("LayoutLMv2Model"),b6o=o(" (LayoutLMv2 model)"),v6o=l(),fu=a("li"),kge=a("strong"),F6o=o("layoutlmv3"),T6o=o(" \u2014 "),RG=a("a"),M6o=o("LayoutLMv3Model"),E6o=o(" (LayoutLMv3 model)"),C6o=l(),mu=a("li"),Sge=a("strong"),w6o=o("led"),A6o=o(" \u2014 "),PG=a("a"),L6o=o("LEDModel"),y6o=o(" (LED model)"),x6o=l(),gu=a("li"),Rge=a("strong"),$6o=o("levit"),k6o=o(" \u2014 "),BG=a("a"),S6o=o("LevitModel"),R6o=o(" (LeViT model)"),P6o=l(),hu=a("li"),Pge=a("strong"),B6o=o("longformer"),I6o=o(" \u2014 "),IG=a("a"),N6o=o("LongformerModel"),q6o=o(" (Longformer model)"),j6o=l(),pu=a("li"),Bge=a("strong"),D6o=o("longt5"),G6o=o(" \u2014 "),NG=a("a"),O6o=o("LongT5Model"),V6o=o(" (LongT5 model)"),X6o=l(),_u=a("li"),Ige=a("strong"),z6o=o("luke"),W6o=o(" \u2014 "),qG=a("a"),Q6o=o("LukeModel"),U6o=o(" (LUKE model)"),H6o=l(),uu=a("li"),Nge=a("strong"),J6o=o("lxmert"),Y6o=o(" \u2014 "),jG=a("a"),K6o=o("LxmertModel"),Z6o=o(" (LXMERT model)"),eAo=l(),bu=a("li"),qge=a("strong"),oAo=o("m2m_100"),rAo=o(" \u2014 "),DG=a("a"),tAo=o("M2M100Model"),aAo=o(" (M2M100 model)"),nAo=l(),vu=a("li"),jge=a("strong"),sAo=o("marian"),lAo=o(" \u2014 "),GG=a("a"),iAo=o("MarianModel"),dAo=o(" (Marian model)"),cAo=l(),Fu=a("li"),Dge=a("strong"),fAo=o("maskformer"),mAo=o(" \u2014 "),OG=a("a"),gAo=o("MaskFormerModel"),hAo=o(" (MaskFormer model)"),pAo=l(),Tu=a("li"),Gge=a("strong"),_Ao=o("mbart"),uAo=o(" \u2014 "),VG=a("a"),bAo=o("MBartModel"),vAo=o(" (mBART model)"),FAo=l(),Mu=a("li"),Oge=a("strong"),TAo=o("mctct"),MAo=o(" \u2014 "),XG=a("a"),EAo=o("MCTCTModel"),CAo=o(" (M-CTC-T model)"),wAo=l(),Eu=a("li"),Vge=a("strong"),AAo=o("megatron-bert"),LAo=o(" \u2014 "),zG=a("a"),yAo=o("MegatronBertModel"),xAo=o(" (Megatron-BERT model)"),$Ao=l(),Cu=a("li"),Xge=a("strong"),kAo=o("mobilebert"),SAo=o(" \u2014 "),WG=a("a"),RAo=o("MobileBertModel"),PAo=o(" (MobileBERT model)"),BAo=l(),wu=a("li"),zge=a("strong"),IAo=o("mobilevit"),NAo=o(" \u2014 "),QG=a("a"),qAo=o("MobileViTModel"),jAo=o(" (MobileViT model)"),DAo=l(),Au=a("li"),Wge=a("strong"),GAo=o("mpnet"),OAo=o(" \u2014 "),UG=a("a"),VAo=o("MPNetModel"),XAo=o(" (MPNet model)"),zAo=l(),Lu=a("li"),Qge=a("strong"),WAo=o("mt5"),QAo=o(" \u2014 "),HG=a("a"),UAo=o("MT5Model"),HAo=o(" (MT5 model)"),JAo=l(),yu=a("li"),Uge=a("strong"),YAo=o("mvp"),KAo=o(" \u2014 "),JG=a("a"),ZAo=o("MvpModel"),eLo=o(" (MVP model)"),oLo=l(),xu=a("li"),Hge=a("strong"),rLo=o("nezha"),tLo=o(" \u2014 "),YG=a("a"),aLo=o("NezhaModel"),nLo=o(" (Nezha model)"),sLo=l(),$u=a("li"),Jge=a("strong"),lLo=o("nllb"),iLo=o(" \u2014 "),KG=a("a"),dLo=o("M2M100Model"),cLo=o(" (NLLB model)"),fLo=l(),ku=a("li"),Yge=a("strong"),mLo=o("nystromformer"),gLo=o(" \u2014 "),ZG=a("a"),hLo=o("NystromformerModel"),pLo=o(" (Nystr\xF6mformer model)"),_Lo=l(),Su=a("li"),Kge=a("strong"),uLo=o("openai-gpt"),bLo=o(" \u2014 "),eO=a("a"),vLo=o("OpenAIGPTModel"),FLo=o(" (OpenAI GPT model)"),TLo=l(),Ru=a("li"),Zge=a("strong"),MLo=o("opt"),ELo=o(" \u2014 "),oO=a("a"),CLo=o("OPTModel"),wLo=o(" (OPT model)"),ALo=l(),Pu=a("li"),ehe=a("strong"),LLo=o("owlvit"),yLo=o(" \u2014 "),rO=a("a"),xLo=o("OwlViTModel"),$Lo=o(" (OWL-ViT model)"),kLo=l(),Bu=a("li"),ohe=a("strong"),SLo=o("pegasus"),RLo=o(" \u2014 "),tO=a("a"),PLo=o("PegasusModel"),BLo=o(" (Pegasus model)"),ILo=l(),Iu=a("li"),rhe=a("strong"),NLo=o("perceiver"),qLo=o(" \u2014 "),aO=a("a"),jLo=o("PerceiverModel"),DLo=o(" (Perceiver model)"),GLo=l(),Nu=a("li"),the=a("strong"),OLo=o("plbart"),VLo=o(" \u2014 "),nO=a("a"),XLo=o("PLBartModel"),zLo=o(" (PLBart model)"),WLo=l(),qu=a("li"),ahe=a("strong"),QLo=o("poolformer"),ULo=o(" \u2014 "),sO=a("a"),HLo=o("PoolFormerModel"),JLo=o(" (PoolFormer model)"),YLo=l(),ju=a("li"),nhe=a("strong"),KLo=o("prophetnet"),ZLo=o(" \u2014 "),lO=a("a"),eyo=o("ProphetNetModel"),oyo=o(" (ProphetNet model)"),ryo=l(),Du=a("li"),she=a("strong"),tyo=o("qdqbert"),ayo=o(" \u2014 "),iO=a("a"),nyo=o("QDQBertModel"),syo=o(" (QDQBert model)"),lyo=l(),Gu=a("li"),lhe=a("strong"),iyo=o("reformer"),dyo=o(" \u2014 "),dO=a("a"),cyo=o("ReformerModel"),fyo=o(" (Reformer model)"),myo=l(),Ou=a("li"),ihe=a("strong"),gyo=o("regnet"),hyo=o(" \u2014 "),cO=a("a"),pyo=o("RegNetModel"),_yo=o(" (RegNet model)"),uyo=l(),Vu=a("li"),dhe=a("strong"),byo=o("rembert"),vyo=o(" \u2014 "),fO=a("a"),Fyo=o("RemBertModel"),Tyo=o(" (RemBERT model)"),Myo=l(),Xu=a("li"),che=a("strong"),Eyo=o("resnet"),Cyo=o(" \u2014 "),mO=a("a"),wyo=o("ResNetModel"),Ayo=o(" (ResNet model)"),Lyo=l(),zu=a("li"),fhe=a("strong"),yyo=o("retribert"),xyo=o(" \u2014 "),gO=a("a"),$yo=o("RetriBertModel"),kyo=o(" (RetriBERT model)"),Syo=l(),Wu=a("li"),mhe=a("strong"),Ryo=o("roberta"),Pyo=o(" \u2014 "),hO=a("a"),Byo=o("RobertaModel"),Iyo=o(" (RoBERTa model)"),Nyo=l(),Qu=a("li"),ghe=a("strong"),qyo=o("roformer"),jyo=o(" \u2014 "),pO=a("a"),Dyo=o("RoFormerModel"),Gyo=o(" (RoFormer model)"),Oyo=l(),Uu=a("li"),hhe=a("strong"),Vyo=o("segformer"),Xyo=o(" \u2014 "),_O=a("a"),zyo=o("SegformerModel"),Wyo=o(" (SegFormer model)"),Qyo=l(),Hu=a("li"),phe=a("strong"),Uyo=o("sew"),Hyo=o(" \u2014 "),uO=a("a"),Jyo=o("SEWModel"),Yyo=o(" (SEW model)"),Kyo=l(),Ju=a("li"),_he=a("strong"),Zyo=o("sew-d"),e8o=o(" \u2014 "),bO=a("a"),o8o=o("SEWDModel"),r8o=o(" (SEW-D model)"),t8o=l(),Yu=a("li"),uhe=a("strong"),a8o=o("speech_to_text"),n8o=o(" \u2014 "),vO=a("a"),s8o=o("Speech2TextModel"),l8o=o(" (Speech2Text model)"),i8o=l(),Ku=a("li"),bhe=a("strong"),d8o=o("splinter"),c8o=o(" \u2014 "),FO=a("a"),f8o=o("SplinterModel"),m8o=o(" (Splinter model)"),g8o=l(),Zu=a("li"),vhe=a("strong"),h8o=o("squeezebert"),p8o=o(" \u2014 "),TO=a("a"),_8o=o("SqueezeBertModel"),u8o=o(" (SqueezeBERT model)"),b8o=l(),e2=a("li"),Fhe=a("strong"),v8o=o("swin"),F8o=o(" \u2014 "),MO=a("a"),T8o=o("SwinModel"),M8o=o(" (Swin Transformer model)"),E8o=l(),o2=a("li"),The=a("strong"),C8o=o("swinv2"),w8o=o(" \u2014 "),EO=a("a"),A8o=o("Swinv2Model"),L8o=o(" (Swin Transformer V2 model)"),y8o=l(),r2=a("li"),Mhe=a("strong"),x8o=o("t5"),$8o=o(" \u2014 "),CO=a("a"),k8o=o("T5Model"),S8o=o(" (T5 model)"),R8o=l(),t2=a("li"),Ehe=a("strong"),P8o=o("tapas"),B8o=o(" \u2014 "),wO=a("a"),I8o=o("TapasModel"),N8o=o(" (TAPAS model)"),q8o=l(),a2=a("li"),Che=a("strong"),j8o=o("trajectory_transformer"),D8o=o(" \u2014 "),AO=a("a"),G8o=o("TrajectoryTransformerModel"),O8o=o(" (Trajectory Transformer model)"),V8o=l(),n2=a("li"),whe=a("strong"),X8o=o("transfo-xl"),z8o=o(" \u2014 "),LO=a("a"),W8o=o("TransfoXLModel"),Q8o=o(" (Transformer-XL model)"),U8o=l(),s2=a("li"),Ahe=a("strong"),H8o=o("unispeech"),J8o=o(" \u2014 "),yO=a("a"),Y8o=o("UniSpeechModel"),K8o=o(" (UniSpeech model)"),Z8o=l(),l2=a("li"),Lhe=a("strong"),e9o=o("unispeech-sat"),o9o=o(" \u2014 "),xO=a("a"),r9o=o("UniSpeechSatModel"),t9o=o(" (UniSpeechSat model)"),a9o=l(),i2=a("li"),yhe=a("strong"),n9o=o("van"),s9o=o(" \u2014 "),$O=a("a"),l9o=o("VanModel"),i9o=o(" (VAN model)"),d9o=l(),d2=a("li"),xhe=a("strong"),c9o=o("videomae"),f9o=o(" \u2014 "),kO=a("a"),m9o=o("VideoMAEModel"),g9o=o(" (VideoMAE model)"),h9o=l(),c2=a("li"),$he=a("strong"),p9o=o("vilt"),_9o=o(" \u2014 "),SO=a("a"),u9o=o("ViltModel"),b9o=o(" (ViLT model)"),v9o=l(),f2=a("li"),khe=a("strong"),F9o=o("vision-text-dual-encoder"),T9o=o(" \u2014 "),RO=a("a"),M9o=o("VisionTextDualEncoderModel"),E9o=o(" (VisionTextDualEncoder model)"),C9o=l(),m2=a("li"),She=a("strong"),w9o=o("visual_bert"),A9o=o(" \u2014 "),PO=a("a"),L9o=o("VisualBertModel"),y9o=o(" (VisualBERT model)"),x9o=l(),g2=a("li"),Rhe=a("strong"),$9o=o("vit"),k9o=o(" \u2014 "),BO=a("a"),S9o=o("ViTModel"),R9o=o(" (ViT model)"),P9o=l(),h2=a("li"),Phe=a("strong"),B9o=o("vit_mae"),I9o=o(" \u2014 "),IO=a("a"),N9o=o("ViTMAEModel"),q9o=o(" (ViTMAE model)"),j9o=l(),p2=a("li"),Bhe=a("strong"),D9o=o("wav2vec2"),G9o=o(" \u2014 "),NO=a("a"),O9o=o("Wav2Vec2Model"),V9o=o(" (Wav2Vec2 model)"),X9o=l(),_2=a("li"),Ihe=a("strong"),z9o=o("wav2vec2-conformer"),W9o=o(" \u2014 "),qO=a("a"),Q9o=o("Wav2Vec2ConformerModel"),U9o=o(" (Wav2Vec2-Conformer model)"),H9o=l(),u2=a("li"),Nhe=a("strong"),J9o=o("wavlm"),Y9o=o(" \u2014 "),jO=a("a"),K9o=o("WavLMModel"),Z9o=o(" (WavLM model)"),exo=l(),b2=a("li"),qhe=a("strong"),oxo=o("xglm"),rxo=o(" \u2014 "),DO=a("a"),txo=o("XGLMModel"),axo=o(" (XGLM model)"),nxo=l(),v2=a("li"),jhe=a("strong"),sxo=o("xlm"),lxo=o(" \u2014 "),GO=a("a"),ixo=o("XLMModel"),dxo=o(" (XLM model)"),cxo=l(),F2=a("li"),Dhe=a("strong"),fxo=o("xlm-prophetnet"),mxo=o(" \u2014 "),OO=a("a"),gxo=o("XLMProphetNetModel"),hxo=o(" (XLM-ProphetNet model)"),pxo=l(),T2=a("li"),Ghe=a("strong"),_xo=o("xlm-roberta"),uxo=o(" \u2014 "),VO=a("a"),bxo=o("XLMRobertaModel"),vxo=o(" (XLM-RoBERTa model)"),Fxo=l(),M2=a("li"),Ohe=a("strong"),Txo=o("xlm-roberta-xl"),Mxo=o(" \u2014 "),XO=a("a"),Exo=o("XLMRobertaXLModel"),Cxo=o(" (XLM-RoBERTa-XL model)"),wxo=l(),E2=a("li"),Vhe=a("strong"),Axo=o("xlnet"),Lxo=o(" \u2014 "),zO=a("a"),yxo=o("XLNetModel"),xxo=o(" (XLNet model)"),$xo=l(),C2=a("li"),Xhe=a("strong"),kxo=o("yolos"),Sxo=o(" \u2014 "),WO=a("a"),Rxo=o("YolosModel"),Pxo=o(" (YOLOS model)"),Bxo=l(),w2=a("li"),zhe=a("strong"),Ixo=o("yoso"),Nxo=o(" \u2014 "),QO=a("a"),qxo=o("YosoModel"),jxo=o(" (YOSO model)"),Dxo=l(),A2=a("p"),Gxo=o("The model is set in evaluation mode by default using "),Whe=a("code"),Oxo=o("model.eval()"),Vxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=a("code"),Xxo=o("model.train()"),zxo=l(),F(L2.$$.fragment),aUe=l(),id=a("h2"),y2=a("a"),Uhe=a("span"),F(X8.$$.fragment),Wxo=l(),Hhe=a("span"),Qxo=o("AutoModelForPreTraining"),nUe=l(),Ro=a("div"),F(z8.$$.fragment),Uxo=l(),dd=a("p"),Hxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UO=a("a"),Jxo=o("from_pretrained()"),Yxo=o(" class method or the "),HO=a("a"),Kxo=o("from_config()"),Zxo=o(` class
method.`),e$o=l(),W8=a("p"),o$o=o("This class cannot be instantiated directly using "),Jhe=a("code"),r$o=o("__init__()"),t$o=o(" (throws an error)."),a$o=l(),gt=a("div"),F(Q8.$$.fragment),n$o=l(),Yhe=a("p"),s$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l$o=l(),cd=a("p"),i$o=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),d$o=o("not"),c$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),f$o=o("from_pretrained()"),m$o=o(" to load the model weights."),g$o=l(),F(x2.$$.fragment),h$o=l(),Ke=a("div"),F(U8.$$.fragment),p$o=l(),Zhe=a("p"),_$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),u$o=l(),Xa=a("p"),b$o=o("The model class to instantiate is selected based on the "),epe=a("code"),v$o=o("model_type"),F$o=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),T$o=o("pretrained_model_name_or_path"),M$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),E$o=o("pretrained_model_name_or_path"),C$o=o(":"),w$o=l(),G=a("ul"),$2=a("li"),tpe=a("strong"),A$o=o("albert"),L$o=o(" \u2014 "),YO=a("a"),y$o=o("AlbertForPreTraining"),x$o=o(" (ALBERT model)"),$$o=l(),k2=a("li"),ape=a("strong"),k$o=o("bart"),S$o=o(" \u2014 "),KO=a("a"),R$o=o("BartForConditionalGeneration"),P$o=o(" (BART model)"),B$o=l(),S2=a("li"),npe=a("strong"),I$o=o("bert"),N$o=o(" \u2014 "),ZO=a("a"),q$o=o("BertForPreTraining"),j$o=o(" (BERT model)"),D$o=l(),R2=a("li"),spe=a("strong"),G$o=o("big_bird"),O$o=o(" \u2014 "),eV=a("a"),V$o=o("BigBirdForPreTraining"),X$o=o(" (BigBird model)"),z$o=l(),P2=a("li"),lpe=a("strong"),W$o=o("bloom"),Q$o=o(" \u2014 "),oV=a("a"),U$o=o("BloomForCausalLM"),H$o=o(" (BLOOM model)"),J$o=l(),B2=a("li"),ipe=a("strong"),Y$o=o("camembert"),K$o=o(" \u2014 "),rV=a("a"),Z$o=o("CamembertForMaskedLM"),eko=o(" (CamemBERT model)"),oko=l(),I2=a("li"),dpe=a("strong"),rko=o("ctrl"),tko=o(" \u2014 "),tV=a("a"),ako=o("CTRLLMHeadModel"),nko=o(" (CTRL model)"),sko=l(),N2=a("li"),cpe=a("strong"),lko=o("data2vec-text"),iko=o(" \u2014 "),aV=a("a"),dko=o("Data2VecTextForMaskedLM"),cko=o(" (Data2VecText model)"),fko=l(),q2=a("li"),fpe=a("strong"),mko=o("deberta"),gko=o(" \u2014 "),nV=a("a"),hko=o("DebertaForMaskedLM"),pko=o(" (DeBERTa model)"),_ko=l(),j2=a("li"),mpe=a("strong"),uko=o("deberta-v2"),bko=o(" \u2014 "),sV=a("a"),vko=o("DebertaV2ForMaskedLM"),Fko=o(" (DeBERTa-v2 model)"),Tko=l(),D2=a("li"),gpe=a("strong"),Mko=o("distilbert"),Eko=o(" \u2014 "),lV=a("a"),Cko=o("DistilBertForMaskedLM"),wko=o(" (DistilBERT model)"),Ako=l(),G2=a("li"),hpe=a("strong"),Lko=o("electra"),yko=o(" \u2014 "),iV=a("a"),xko=o("ElectraForPreTraining"),$ko=o(" (ELECTRA model)"),kko=l(),O2=a("li"),ppe=a("strong"),Sko=o("flaubert"),Rko=o(" \u2014 "),dV=a("a"),Pko=o("FlaubertWithLMHeadModel"),Bko=o(" (FlauBERT model)"),Iko=l(),V2=a("li"),_pe=a("strong"),Nko=o("flava"),qko=o(" \u2014 "),cV=a("a"),jko=o("FlavaForPreTraining"),Dko=o(" (FLAVA model)"),Gko=l(),X2=a("li"),upe=a("strong"),Oko=o("fnet"),Vko=o(" \u2014 "),fV=a("a"),Xko=o("FNetForPreTraining"),zko=o(" (FNet model)"),Wko=l(),z2=a("li"),bpe=a("strong"),Qko=o("fsmt"),Uko=o(" \u2014 "),mV=a("a"),Hko=o("FSMTForConditionalGeneration"),Jko=o(" (FairSeq Machine-Translation model)"),Yko=l(),W2=a("li"),vpe=a("strong"),Kko=o("funnel"),Zko=o(" \u2014 "),gV=a("a"),eSo=o("FunnelForPreTraining"),oSo=o(" (Funnel Transformer model)"),rSo=l(),Q2=a("li"),Fpe=a("strong"),tSo=o("gpt2"),aSo=o(" \u2014 "),hV=a("a"),nSo=o("GPT2LMHeadModel"),sSo=o(" (OpenAI GPT-2 model)"),lSo=l(),U2=a("li"),Tpe=a("strong"),iSo=o("ibert"),dSo=o(" \u2014 "),pV=a("a"),cSo=o("IBertForMaskedLM"),fSo=o(" (I-BERT model)"),mSo=l(),H2=a("li"),Mpe=a("strong"),gSo=o("layoutlm"),hSo=o(" \u2014 "),_V=a("a"),pSo=o("LayoutLMForMaskedLM"),_So=o(" (LayoutLM model)"),uSo=l(),J2=a("li"),Epe=a("strong"),bSo=o("longformer"),vSo=o(" \u2014 "),uV=a("a"),FSo=o("LongformerForMaskedLM"),TSo=o(" (Longformer model)"),MSo=l(),Y2=a("li"),Cpe=a("strong"),ESo=o("luke"),CSo=o(" \u2014 "),bV=a("a"),wSo=o("LukeForMaskedLM"),ASo=o(" (LUKE model)"),LSo=l(),K2=a("li"),wpe=a("strong"),ySo=o("lxmert"),xSo=o(" \u2014 "),vV=a("a"),$So=o("LxmertForPreTraining"),kSo=o(" (LXMERT model)"),SSo=l(),Z2=a("li"),Ape=a("strong"),RSo=o("megatron-bert"),PSo=o(" \u2014 "),FV=a("a"),BSo=o("MegatronBertForPreTraining"),ISo=o(" (Megatron-BERT model)"),NSo=l(),e1=a("li"),Lpe=a("strong"),qSo=o("mobilebert"),jSo=o(" \u2014 "),TV=a("a"),DSo=o("MobileBertForPreTraining"),GSo=o(" (MobileBERT model)"),OSo=l(),o1=a("li"),ype=a("strong"),VSo=o("mpnet"),XSo=o(" \u2014 "),MV=a("a"),zSo=o("MPNetForMaskedLM"),WSo=o(" (MPNet model)"),QSo=l(),r1=a("li"),xpe=a("strong"),USo=o("mvp"),HSo=o(" \u2014 "),EV=a("a"),JSo=o("MvpForConditionalGeneration"),YSo=o(" (MVP model)"),KSo=l(),t1=a("li"),$pe=a("strong"),ZSo=o("nezha"),eRo=o(" \u2014 "),CV=a("a"),oRo=o("NezhaForPreTraining"),rRo=o(" (Nezha model)"),tRo=l(),a1=a("li"),kpe=a("strong"),aRo=o("openai-gpt"),nRo=o(" \u2014 "),wV=a("a"),sRo=o("OpenAIGPTLMHeadModel"),lRo=o(" (OpenAI GPT model)"),iRo=l(),n1=a("li"),Spe=a("strong"),dRo=o("retribert"),cRo=o(" \u2014 "),AV=a("a"),fRo=o("RetriBertModel"),mRo=o(" (RetriBERT model)"),gRo=l(),s1=a("li"),Rpe=a("strong"),hRo=o("roberta"),pRo=o(" \u2014 "),LV=a("a"),_Ro=o("RobertaForMaskedLM"),uRo=o(" (RoBERTa model)"),bRo=l(),l1=a("li"),Ppe=a("strong"),vRo=o("splinter"),FRo=o(" \u2014 "),yV=a("a"),TRo=o("SplinterForPreTraining"),MRo=o(" (Splinter model)"),ERo=l(),i1=a("li"),Bpe=a("strong"),CRo=o("squeezebert"),wRo=o(" \u2014 "),xV=a("a"),ARo=o("SqueezeBertForMaskedLM"),LRo=o(" (SqueezeBERT model)"),yRo=l(),d1=a("li"),Ipe=a("strong"),xRo=o("t5"),$Ro=o(" \u2014 "),$V=a("a"),kRo=o("T5ForConditionalGeneration"),SRo=o(" (T5 model)"),RRo=l(),c1=a("li"),Npe=a("strong"),PRo=o("tapas"),BRo=o(" \u2014 "),kV=a("a"),IRo=o("TapasForMaskedLM"),NRo=o(" (TAPAS model)"),qRo=l(),f1=a("li"),qpe=a("strong"),jRo=o("transfo-xl"),DRo=o(" \u2014 "),SV=a("a"),GRo=o("TransfoXLLMHeadModel"),ORo=o(" (Transformer-XL model)"),VRo=l(),m1=a("li"),jpe=a("strong"),XRo=o("unispeech"),zRo=o(" \u2014 "),RV=a("a"),WRo=o("UniSpeechForPreTraining"),QRo=o(" (UniSpeech model)"),URo=l(),g1=a("li"),Dpe=a("strong"),HRo=o("unispeech-sat"),JRo=o(" \u2014 "),PV=a("a"),YRo=o("UniSpeechSatForPreTraining"),KRo=o(" (UniSpeechSat model)"),ZRo=l(),h1=a("li"),Gpe=a("strong"),ePo=o("videomae"),oPo=o(" \u2014 "),BV=a("a"),rPo=o("VideoMAEForPreTraining"),tPo=o(" (VideoMAE model)"),aPo=l(),p1=a("li"),Ope=a("strong"),nPo=o("visual_bert"),sPo=o(" \u2014 "),IV=a("a"),lPo=o("VisualBertForPreTraining"),iPo=o(" (VisualBERT model)"),dPo=l(),_1=a("li"),Vpe=a("strong"),cPo=o("vit_mae"),fPo=o(" \u2014 "),NV=a("a"),mPo=o("ViTMAEForPreTraining"),gPo=o(" (ViTMAE model)"),hPo=l(),u1=a("li"),Xpe=a("strong"),pPo=o("wav2vec2"),_Po=o(" \u2014 "),qV=a("a"),uPo=o("Wav2Vec2ForPreTraining"),bPo=o(" (Wav2Vec2 model)"),vPo=l(),b1=a("li"),zpe=a("strong"),FPo=o("wav2vec2-conformer"),TPo=o(" \u2014 "),jV=a("a"),MPo=o("Wav2Vec2ConformerForPreTraining"),EPo=o(" (Wav2Vec2-Conformer model)"),CPo=l(),v1=a("li"),Wpe=a("strong"),wPo=o("xlm"),APo=o(" \u2014 "),DV=a("a"),LPo=o("XLMWithLMHeadModel"),yPo=o(" (XLM model)"),xPo=l(),F1=a("li"),Qpe=a("strong"),$Po=o("xlm-roberta"),kPo=o(" \u2014 "),GV=a("a"),SPo=o("XLMRobertaForMaskedLM"),RPo=o(" (XLM-RoBERTa model)"),PPo=l(),T1=a("li"),Upe=a("strong"),BPo=o("xlm-roberta-xl"),IPo=o(" \u2014 "),OV=a("a"),NPo=o("XLMRobertaXLForMaskedLM"),qPo=o(" (XLM-RoBERTa-XL model)"),jPo=l(),M1=a("li"),Hpe=a("strong"),DPo=o("xlnet"),GPo=o(" \u2014 "),VV=a("a"),OPo=o("XLNetLMHeadModel"),VPo=o(" (XLNet model)"),XPo=l(),E1=a("p"),zPo=o("The model is set in evaluation mode by default using "),Jpe=a("code"),WPo=o("model.eval()"),QPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=a("code"),UPo=o("model.train()"),HPo=l(),F(C1.$$.fragment),sUe=l(),fd=a("h2"),w1=a("a"),Kpe=a("span"),F(H8.$$.fragment),JPo=l(),Zpe=a("span"),YPo=o("AutoModelForCausalLM"),lUe=l(),Po=a("div"),F(J8.$$.fragment),KPo=l(),md=a("p"),ZPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XV=a("a"),eBo=o("from_pretrained()"),oBo=o(" class method or the "),zV=a("a"),rBo=o("from_config()"),tBo=o(` class
method.`),aBo=l(),Y8=a("p"),nBo=o("This class cannot be instantiated directly using "),e_e=a("code"),sBo=o("__init__()"),lBo=o(" (throws an error)."),iBo=l(),ht=a("div"),F(K8.$$.fragment),dBo=l(),o_e=a("p"),cBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fBo=l(),gd=a("p"),mBo=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),gBo=o("not"),hBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),pBo=o("from_pretrained()"),_Bo=o(" to load the model weights."),uBo=l(),F(A1.$$.fragment),bBo=l(),Ze=a("div"),F(Z8.$$.fragment),vBo=l(),t_e=a("p"),FBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),TBo=l(),za=a("p"),MBo=o("The model class to instantiate is selected based on the "),a_e=a("code"),EBo=o("model_type"),CBo=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),wBo=o("pretrained_model_name_or_path"),ABo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),LBo=o("pretrained_model_name_or_path"),yBo=o(":"),xBo=l(),z=a("ul"),L1=a("li"),l_e=a("strong"),$Bo=o("bart"),kBo=o(" \u2014 "),QV=a("a"),SBo=o("BartForCausalLM"),RBo=o(" (BART model)"),PBo=l(),y1=a("li"),i_e=a("strong"),BBo=o("bert"),IBo=o(" \u2014 "),UV=a("a"),NBo=o("BertLMHeadModel"),qBo=o(" (BERT model)"),jBo=l(),x1=a("li"),d_e=a("strong"),DBo=o("bert-generation"),GBo=o(" \u2014 "),HV=a("a"),OBo=o("BertGenerationDecoder"),VBo=o(" (Bert Generation model)"),XBo=l(),$1=a("li"),c_e=a("strong"),zBo=o("big_bird"),WBo=o(" \u2014 "),JV=a("a"),QBo=o("BigBirdForCausalLM"),UBo=o(" (BigBird model)"),HBo=l(),k1=a("li"),f_e=a("strong"),JBo=o("bigbird_pegasus"),YBo=o(" \u2014 "),YV=a("a"),KBo=o("BigBirdPegasusForCausalLM"),ZBo=o(" (BigBird-Pegasus model)"),eIo=l(),S1=a("li"),m_e=a("strong"),oIo=o("blenderbot"),rIo=o(" \u2014 "),KV=a("a"),tIo=o("BlenderbotForCausalLM"),aIo=o(" (Blenderbot model)"),nIo=l(),R1=a("li"),g_e=a("strong"),sIo=o("blenderbot-small"),lIo=o(" \u2014 "),ZV=a("a"),iIo=o("BlenderbotSmallForCausalLM"),dIo=o(" (BlenderbotSmall model)"),cIo=l(),P1=a("li"),h_e=a("strong"),fIo=o("bloom"),mIo=o(" \u2014 "),eX=a("a"),gIo=o("BloomForCausalLM"),hIo=o(" (BLOOM model)"),pIo=l(),B1=a("li"),p_e=a("strong"),_Io=o("camembert"),uIo=o(" \u2014 "),oX=a("a"),bIo=o("CamembertForCausalLM"),vIo=o(" (CamemBERT model)"),FIo=l(),I1=a("li"),__e=a("strong"),TIo=o("codegen"),MIo=o(" \u2014 "),rX=a("a"),EIo=o("CodeGenForCausalLM"),CIo=o(" (CodeGen model)"),wIo=l(),N1=a("li"),u_e=a("strong"),AIo=o("ctrl"),LIo=o(" \u2014 "),tX=a("a"),yIo=o("CTRLLMHeadModel"),xIo=o(" (CTRL model)"),$Io=l(),q1=a("li"),b_e=a("strong"),kIo=o("data2vec-text"),SIo=o(" \u2014 "),aX=a("a"),RIo=o("Data2VecTextForCausalLM"),PIo=o(" (Data2VecText model)"),BIo=l(),j1=a("li"),v_e=a("strong"),IIo=o("electra"),NIo=o(" \u2014 "),nX=a("a"),qIo=o("ElectraForCausalLM"),jIo=o(" (ELECTRA model)"),DIo=l(),D1=a("li"),F_e=a("strong"),GIo=o("gpt2"),OIo=o(" \u2014 "),sX=a("a"),VIo=o("GPT2LMHeadModel"),XIo=o(" (OpenAI GPT-2 model)"),zIo=l(),G1=a("li"),T_e=a("strong"),WIo=o("gpt_neo"),QIo=o(" \u2014 "),lX=a("a"),UIo=o("GPTNeoForCausalLM"),HIo=o(" (GPT Neo model)"),JIo=l(),O1=a("li"),M_e=a("strong"),YIo=o("gpt_neox"),KIo=o(" \u2014 "),iX=a("a"),ZIo=o("GPTNeoXForCausalLM"),eNo=o(" (GPT NeoX model)"),oNo=l(),V1=a("li"),E_e=a("strong"),rNo=o("gptj"),tNo=o(" \u2014 "),dX=a("a"),aNo=o("GPTJForCausalLM"),nNo=o(" (GPT-J model)"),sNo=l(),X1=a("li"),C_e=a("strong"),lNo=o("marian"),iNo=o(" \u2014 "),cX=a("a"),dNo=o("MarianForCausalLM"),cNo=o(" (Marian model)"),fNo=l(),z1=a("li"),w_e=a("strong"),mNo=o("mbart"),gNo=o(" \u2014 "),fX=a("a"),hNo=o("MBartForCausalLM"),pNo=o(" (mBART model)"),_No=l(),W1=a("li"),A_e=a("strong"),uNo=o("megatron-bert"),bNo=o(" \u2014 "),mX=a("a"),vNo=o("MegatronBertForCausalLM"),FNo=o(" (Megatron-BERT model)"),TNo=l(),Q1=a("li"),L_e=a("strong"),MNo=o("mvp"),ENo=o(" \u2014 "),gX=a("a"),CNo=o("MvpForCausalLM"),wNo=o(" (MVP model)"),ANo=l(),U1=a("li"),y_e=a("strong"),LNo=o("openai-gpt"),yNo=o(" \u2014 "),hX=a("a"),xNo=o("OpenAIGPTLMHeadModel"),$No=o(" (OpenAI GPT model)"),kNo=l(),H1=a("li"),x_e=a("strong"),SNo=o("opt"),RNo=o(" \u2014 "),pX=a("a"),PNo=o("OPTForCausalLM"),BNo=o(" (OPT model)"),INo=l(),J1=a("li"),$_e=a("strong"),NNo=o("pegasus"),qNo=o(" \u2014 "),_X=a("a"),jNo=o("PegasusForCausalLM"),DNo=o(" (Pegasus model)"),GNo=l(),Y1=a("li"),k_e=a("strong"),ONo=o("plbart"),VNo=o(" \u2014 "),uX=a("a"),XNo=o("PLBartForCausalLM"),zNo=o(" (PLBart model)"),WNo=l(),K1=a("li"),S_e=a("strong"),QNo=o("prophetnet"),UNo=o(" \u2014 "),bX=a("a"),HNo=o("ProphetNetForCausalLM"),JNo=o(" (ProphetNet model)"),YNo=l(),Z1=a("li"),R_e=a("strong"),KNo=o("qdqbert"),ZNo=o(" \u2014 "),vX=a("a"),eqo=o("QDQBertLMHeadModel"),oqo=o(" (QDQBert model)"),rqo=l(),e4=a("li"),P_e=a("strong"),tqo=o("reformer"),aqo=o(" \u2014 "),FX=a("a"),nqo=o("ReformerModelWithLMHead"),sqo=o(" (Reformer model)"),lqo=l(),o4=a("li"),B_e=a("strong"),iqo=o("rembert"),dqo=o(" \u2014 "),TX=a("a"),cqo=o("RemBertForCausalLM"),fqo=o(" (RemBERT model)"),mqo=l(),r4=a("li"),I_e=a("strong"),gqo=o("roberta"),hqo=o(" \u2014 "),MX=a("a"),pqo=o("RobertaForCausalLM"),_qo=o(" (RoBERTa model)"),uqo=l(),t4=a("li"),N_e=a("strong"),bqo=o("roformer"),vqo=o(" \u2014 "),EX=a("a"),Fqo=o("RoFormerForCausalLM"),Tqo=o(" (RoFormer model)"),Mqo=l(),a4=a("li"),q_e=a("strong"),Eqo=o("speech_to_text_2"),Cqo=o(" \u2014 "),CX=a("a"),wqo=o("Speech2Text2ForCausalLM"),Aqo=o(" (Speech2Text2 model)"),Lqo=l(),n4=a("li"),j_e=a("strong"),yqo=o("transfo-xl"),xqo=o(" \u2014 "),wX=a("a"),$qo=o("TransfoXLLMHeadModel"),kqo=o(" (Transformer-XL model)"),Sqo=l(),s4=a("li"),D_e=a("strong"),Rqo=o("trocr"),Pqo=o(" \u2014 "),AX=a("a"),Bqo=o("TrOCRForCausalLM"),Iqo=o(" (TrOCR model)"),Nqo=l(),l4=a("li"),G_e=a("strong"),qqo=o("xglm"),jqo=o(" \u2014 "),LX=a("a"),Dqo=o("XGLMForCausalLM"),Gqo=o(" (XGLM model)"),Oqo=l(),i4=a("li"),O_e=a("strong"),Vqo=o("xlm"),Xqo=o(" \u2014 "),yX=a("a"),zqo=o("XLMWithLMHeadModel"),Wqo=o(" (XLM model)"),Qqo=l(),d4=a("li"),V_e=a("strong"),Uqo=o("xlm-prophetnet"),Hqo=o(" \u2014 "),xX=a("a"),Jqo=o("XLMProphetNetForCausalLM"),Yqo=o(" (XLM-ProphetNet model)"),Kqo=l(),c4=a("li"),X_e=a("strong"),Zqo=o("xlm-roberta"),ejo=o(" \u2014 "),$X=a("a"),ojo=o("XLMRobertaForCausalLM"),rjo=o(" (XLM-RoBERTa model)"),tjo=l(),f4=a("li"),z_e=a("strong"),ajo=o("xlm-roberta-xl"),njo=o(" \u2014 "),kX=a("a"),sjo=o("XLMRobertaXLForCausalLM"),ljo=o(" (XLM-RoBERTa-XL model)"),ijo=l(),m4=a("li"),W_e=a("strong"),djo=o("xlnet"),cjo=o(" \u2014 "),SX=a("a"),fjo=o("XLNetLMHeadModel"),mjo=o(" (XLNet model)"),gjo=l(),g4=a("p"),hjo=o("The model is set in evaluation mode by default using "),Q_e=a("code"),pjo=o("model.eval()"),_jo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=a("code"),ujo=o("model.train()"),bjo=l(),F(h4.$$.fragment),iUe=l(),hd=a("h2"),p4=a("a"),H_e=a("span"),F(e9.$$.fragment),vjo=l(),J_e=a("span"),Fjo=o("AutoModelForMaskedLM"),dUe=l(),Bo=a("div"),F(o9.$$.fragment),Tjo=l(),pd=a("p"),Mjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RX=a("a"),Ejo=o("from_pretrained()"),Cjo=o(" class method or the "),PX=a("a"),wjo=o("from_config()"),Ajo=o(` class
method.`),Ljo=l(),r9=a("p"),yjo=o("This class cannot be instantiated directly using "),Y_e=a("code"),xjo=o("__init__()"),$jo=o(" (throws an error)."),kjo=l(),pt=a("div"),F(t9.$$.fragment),Sjo=l(),K_e=a("p"),Rjo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pjo=l(),_d=a("p"),Bjo=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),Ijo=o("not"),Njo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=a("a"),qjo=o("from_pretrained()"),jjo=o(" to load the model weights."),Djo=l(),F(_4.$$.fragment),Gjo=l(),eo=a("div"),F(a9.$$.fragment),Ojo=l(),eue=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Xjo=l(),Wa=a("p"),zjo=o("The model class to instantiate is selected based on the "),oue=a("code"),Wjo=o("model_type"),Qjo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),Ujo=o("pretrained_model_name_or_path"),Hjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(":"),Kjo=l(),U=a("ul"),u4=a("li"),aue=a("strong"),Zjo=o("albert"),eDo=o(" \u2014 "),IX=a("a"),oDo=o("AlbertForMaskedLM"),rDo=o(" (ALBERT model)"),tDo=l(),b4=a("li"),nue=a("strong"),aDo=o("bart"),nDo=o(" \u2014 "),NX=a("a"),sDo=o("BartForConditionalGeneration"),lDo=o(" (BART model)"),iDo=l(),v4=a("li"),sue=a("strong"),dDo=o("bert"),cDo=o(" \u2014 "),qX=a("a"),fDo=o("BertForMaskedLM"),mDo=o(" (BERT model)"),gDo=l(),F4=a("li"),lue=a("strong"),hDo=o("big_bird"),pDo=o(" \u2014 "),jX=a("a"),_Do=o("BigBirdForMaskedLM"),uDo=o(" (BigBird model)"),bDo=l(),T4=a("li"),iue=a("strong"),vDo=o("camembert"),FDo=o(" \u2014 "),DX=a("a"),TDo=o("CamembertForMaskedLM"),MDo=o(" (CamemBERT model)"),EDo=l(),M4=a("li"),due=a("strong"),CDo=o("convbert"),wDo=o(" \u2014 "),GX=a("a"),ADo=o("ConvBertForMaskedLM"),LDo=o(" (ConvBERT model)"),yDo=l(),E4=a("li"),cue=a("strong"),xDo=o("data2vec-text"),$Do=o(" \u2014 "),OX=a("a"),kDo=o("Data2VecTextForMaskedLM"),SDo=o(" (Data2VecText model)"),RDo=l(),C4=a("li"),fue=a("strong"),PDo=o("deberta"),BDo=o(" \u2014 "),VX=a("a"),IDo=o("DebertaForMaskedLM"),NDo=o(" (DeBERTa model)"),qDo=l(),w4=a("li"),mue=a("strong"),jDo=o("deberta-v2"),DDo=o(" \u2014 "),XX=a("a"),GDo=o("DebertaV2ForMaskedLM"),ODo=o(" (DeBERTa-v2 model)"),VDo=l(),A4=a("li"),gue=a("strong"),XDo=o("distilbert"),zDo=o(" \u2014 "),zX=a("a"),WDo=o("DistilBertForMaskedLM"),QDo=o(" (DistilBERT model)"),UDo=l(),L4=a("li"),hue=a("strong"),HDo=o("electra"),JDo=o(" \u2014 "),WX=a("a"),YDo=o("ElectraForMaskedLM"),KDo=o(" (ELECTRA model)"),ZDo=l(),y4=a("li"),pue=a("strong"),eGo=o("flaubert"),oGo=o(" \u2014 "),QX=a("a"),rGo=o("FlaubertWithLMHeadModel"),tGo=o(" (FlauBERT model)"),aGo=l(),x4=a("li"),_ue=a("strong"),nGo=o("fnet"),sGo=o(" \u2014 "),UX=a("a"),lGo=o("FNetForMaskedLM"),iGo=o(" (FNet model)"),dGo=l(),$4=a("li"),uue=a("strong"),cGo=o("funnel"),fGo=o(" \u2014 "),HX=a("a"),mGo=o("FunnelForMaskedLM"),gGo=o(" (Funnel Transformer model)"),hGo=l(),k4=a("li"),bue=a("strong"),pGo=o("ibert"),_Go=o(" \u2014 "),JX=a("a"),uGo=o("IBertForMaskedLM"),bGo=o(" (I-BERT model)"),vGo=l(),S4=a("li"),vue=a("strong"),FGo=o("layoutlm"),TGo=o(" \u2014 "),YX=a("a"),MGo=o("LayoutLMForMaskedLM"),EGo=o(" (LayoutLM model)"),CGo=l(),R4=a("li"),Fue=a("strong"),wGo=o("longformer"),AGo=o(" \u2014 "),KX=a("a"),LGo=o("LongformerForMaskedLM"),yGo=o(" (Longformer model)"),xGo=l(),P4=a("li"),Tue=a("strong"),$Go=o("luke"),kGo=o(" \u2014 "),ZX=a("a"),SGo=o("LukeForMaskedLM"),RGo=o(" (LUKE model)"),PGo=l(),B4=a("li"),Mue=a("strong"),BGo=o("mbart"),IGo=o(" \u2014 "),ez=a("a"),NGo=o("MBartForConditionalGeneration"),qGo=o(" (mBART model)"),jGo=l(),I4=a("li"),Eue=a("strong"),DGo=o("megatron-bert"),GGo=o(" \u2014 "),oz=a("a"),OGo=o("MegatronBertForMaskedLM"),VGo=o(" (Megatron-BERT model)"),XGo=l(),N4=a("li"),Cue=a("strong"),zGo=o("mobilebert"),WGo=o(" \u2014 "),rz=a("a"),QGo=o("MobileBertForMaskedLM"),UGo=o(" (MobileBERT model)"),HGo=l(),q4=a("li"),wue=a("strong"),JGo=o("mpnet"),YGo=o(" \u2014 "),tz=a("a"),KGo=o("MPNetForMaskedLM"),ZGo=o(" (MPNet model)"),eOo=l(),j4=a("li"),Aue=a("strong"),oOo=o("mvp"),rOo=o(" \u2014 "),az=a("a"),tOo=o("MvpForConditionalGeneration"),aOo=o(" (MVP model)"),nOo=l(),D4=a("li"),Lue=a("strong"),sOo=o("nezha"),lOo=o(" \u2014 "),nz=a("a"),iOo=o("NezhaForMaskedLM"),dOo=o(" (Nezha model)"),cOo=l(),G4=a("li"),yue=a("strong"),fOo=o("nystromformer"),mOo=o(" \u2014 "),sz=a("a"),gOo=o("NystromformerForMaskedLM"),hOo=o(" (Nystr\xF6mformer model)"),pOo=l(),O4=a("li"),xue=a("strong"),_Oo=o("perceiver"),uOo=o(" \u2014 "),lz=a("a"),bOo=o("PerceiverForMaskedLM"),vOo=o(" (Perceiver model)"),FOo=l(),V4=a("li"),$ue=a("strong"),TOo=o("qdqbert"),MOo=o(" \u2014 "),iz=a("a"),EOo=o("QDQBertForMaskedLM"),COo=o(" (QDQBert model)"),wOo=l(),X4=a("li"),kue=a("strong"),AOo=o("reformer"),LOo=o(" \u2014 "),dz=a("a"),yOo=o("ReformerForMaskedLM"),xOo=o(" (Reformer model)"),$Oo=l(),z4=a("li"),Sue=a("strong"),kOo=o("rembert"),SOo=o(" \u2014 "),cz=a("a"),ROo=o("RemBertForMaskedLM"),POo=o(" (RemBERT model)"),BOo=l(),W4=a("li"),Rue=a("strong"),IOo=o("roberta"),NOo=o(" \u2014 "),fz=a("a"),qOo=o("RobertaForMaskedLM"),jOo=o(" (RoBERTa model)"),DOo=l(),Q4=a("li"),Pue=a("strong"),GOo=o("roformer"),OOo=o(" \u2014 "),mz=a("a"),VOo=o("RoFormerForMaskedLM"),XOo=o(" (RoFormer model)"),zOo=l(),U4=a("li"),Bue=a("strong"),WOo=o("squeezebert"),QOo=o(" \u2014 "),gz=a("a"),UOo=o("SqueezeBertForMaskedLM"),HOo=o(" (SqueezeBERT model)"),JOo=l(),H4=a("li"),Iue=a("strong"),YOo=o("tapas"),KOo=o(" \u2014 "),hz=a("a"),ZOo=o("TapasForMaskedLM"),eVo=o(" (TAPAS model)"),oVo=l(),J4=a("li"),Nue=a("strong"),rVo=o("wav2vec2"),tVo=o(" \u2014 "),que=a("code"),aVo=o("Wav2Vec2ForMaskedLM"),nVo=o(" (Wav2Vec2 model)"),sVo=l(),Y4=a("li"),jue=a("strong"),lVo=o("xlm"),iVo=o(" \u2014 "),pz=a("a"),dVo=o("XLMWithLMHeadModel"),cVo=o(" (XLM model)"),fVo=l(),K4=a("li"),Due=a("strong"),mVo=o("xlm-roberta"),gVo=o(" \u2014 "),_z=a("a"),hVo=o("XLMRobertaForMaskedLM"),pVo=o(" (XLM-RoBERTa model)"),_Vo=l(),Z4=a("li"),Gue=a("strong"),uVo=o("xlm-roberta-xl"),bVo=o(" \u2014 "),uz=a("a"),vVo=o("XLMRobertaXLForMaskedLM"),FVo=o(" (XLM-RoBERTa-XL model)"),TVo=l(),eb=a("li"),Oue=a("strong"),MVo=o("yoso"),EVo=o(" \u2014 "),bz=a("a"),CVo=o("YosoForMaskedLM"),wVo=o(" (YOSO model)"),AVo=l(),ob=a("p"),LVo=o("The model is set in evaluation mode by default using "),Vue=a("code"),yVo=o("model.eval()"),xVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=a("code"),$Vo=o("model.train()"),kVo=l(),F(rb.$$.fragment),cUe=l(),ud=a("h2"),tb=a("a"),zue=a("span"),F(n9.$$.fragment),SVo=l(),Wue=a("span"),RVo=o("AutoModelForSeq2SeqLM"),fUe=l(),Io=a("div"),F(s9.$$.fragment),PVo=l(),bd=a("p"),BVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vz=a("a"),IVo=o("from_pretrained()"),NVo=o(" class method or the "),Fz=a("a"),qVo=o("from_config()"),jVo=o(` class
method.`),DVo=l(),l9=a("p"),GVo=o("This class cannot be instantiated directly using "),Que=a("code"),OVo=o("__init__()"),VVo=o(" (throws an error)."),XVo=l(),_t=a("div"),F(i9.$$.fragment),zVo=l(),Uue=a("p"),WVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QVo=l(),vd=a("p"),UVo=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),HVo=o("not"),JVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),YVo=o("from_pretrained()"),KVo=o(" to load the model weights."),ZVo=l(),F(ab.$$.fragment),eXo=l(),oo=a("div"),F(d9.$$.fragment),oXo=l(),Jue=a("p"),rXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tXo=l(),Qa=a("p"),aXo=o("The model class to instantiate is selected based on the "),Yue=a("code"),nXo=o("model_type"),sXo=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),dXo=o("pretrained_model_name_or_path"),cXo=o(":"),fXo=l(),me=a("ul"),nb=a("li"),e2e=a("strong"),mXo=o("bart"),gXo=o(" \u2014 "),Mz=a("a"),hXo=o("BartForConditionalGeneration"),pXo=o(" (BART model)"),_Xo=l(),sb=a("li"),o2e=a("strong"),uXo=o("bigbird_pegasus"),bXo=o(" \u2014 "),Ez=a("a"),vXo=o("BigBirdPegasusForConditionalGeneration"),FXo=o(" (BigBird-Pegasus model)"),TXo=l(),lb=a("li"),r2e=a("strong"),MXo=o("blenderbot"),EXo=o(" \u2014 "),Cz=a("a"),CXo=o("BlenderbotForConditionalGeneration"),wXo=o(" (Blenderbot model)"),AXo=l(),ib=a("li"),t2e=a("strong"),LXo=o("blenderbot-small"),yXo=o(" \u2014 "),wz=a("a"),xXo=o("BlenderbotSmallForConditionalGeneration"),$Xo=o(" (BlenderbotSmall model)"),kXo=l(),db=a("li"),a2e=a("strong"),SXo=o("encoder-decoder"),RXo=o(" \u2014 "),Az=a("a"),PXo=o("EncoderDecoderModel"),BXo=o(" (Encoder decoder model)"),IXo=l(),cb=a("li"),n2e=a("strong"),NXo=o("fsmt"),qXo=o(" \u2014 "),Lz=a("a"),jXo=o("FSMTForConditionalGeneration"),DXo=o(" (FairSeq Machine-Translation model)"),GXo=l(),fb=a("li"),s2e=a("strong"),OXo=o("led"),VXo=o(" \u2014 "),yz=a("a"),XXo=o("LEDForConditionalGeneration"),zXo=o(" (LED model)"),WXo=l(),mb=a("li"),l2e=a("strong"),QXo=o("longt5"),UXo=o(" \u2014 "),xz=a("a"),HXo=o("LongT5ForConditionalGeneration"),JXo=o(" (LongT5 model)"),YXo=l(),gb=a("li"),i2e=a("strong"),KXo=o("m2m_100"),ZXo=o(" \u2014 "),$z=a("a"),ezo=o("M2M100ForConditionalGeneration"),ozo=o(" (M2M100 model)"),rzo=l(),hb=a("li"),d2e=a("strong"),tzo=o("marian"),azo=o(" \u2014 "),kz=a("a"),nzo=o("MarianMTModel"),szo=o(" (Marian model)"),lzo=l(),pb=a("li"),c2e=a("strong"),izo=o("mbart"),dzo=o(" \u2014 "),Sz=a("a"),czo=o("MBartForConditionalGeneration"),fzo=o(" (mBART model)"),mzo=l(),_b=a("li"),f2e=a("strong"),gzo=o("mt5"),hzo=o(" \u2014 "),Rz=a("a"),pzo=o("MT5ForConditionalGeneration"),_zo=o(" (MT5 model)"),uzo=l(),ub=a("li"),m2e=a("strong"),bzo=o("mvp"),vzo=o(" \u2014 "),Pz=a("a"),Fzo=o("MvpForConditionalGeneration"),Tzo=o(" (MVP model)"),Mzo=l(),bb=a("li"),g2e=a("strong"),Ezo=o("nllb"),Czo=o(" \u2014 "),Bz=a("a"),wzo=o("M2M100ForConditionalGeneration"),Azo=o(" (NLLB model)"),Lzo=l(),vb=a("li"),h2e=a("strong"),yzo=o("pegasus"),xzo=o(" \u2014 "),Iz=a("a"),$zo=o("PegasusForConditionalGeneration"),kzo=o(" (Pegasus model)"),Szo=l(),Fb=a("li"),p2e=a("strong"),Rzo=o("plbart"),Pzo=o(" \u2014 "),Nz=a("a"),Bzo=o("PLBartForConditionalGeneration"),Izo=o(" (PLBart model)"),Nzo=l(),Tb=a("li"),_2e=a("strong"),qzo=o("prophetnet"),jzo=o(" \u2014 "),qz=a("a"),Dzo=o("ProphetNetForConditionalGeneration"),Gzo=o(" (ProphetNet model)"),Ozo=l(),Mb=a("li"),u2e=a("strong"),Vzo=o("t5"),Xzo=o(" \u2014 "),jz=a("a"),zzo=o("T5ForConditionalGeneration"),Wzo=o(" (T5 model)"),Qzo=l(),Eb=a("li"),b2e=a("strong"),Uzo=o("xlm-prophetnet"),Hzo=o(" \u2014 "),Dz=a("a"),Jzo=o("XLMProphetNetForConditionalGeneration"),Yzo=o(" (XLM-ProphetNet model)"),Kzo=l(),Cb=a("p"),Zzo=o("The model is set in evaluation mode by default using "),v2e=a("code"),eWo=o("model.eval()"),oWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=a("code"),rWo=o("model.train()"),tWo=l(),F(wb.$$.fragment),mUe=l(),Fd=a("h2"),Ab=a("a"),T2e=a("span"),F(c9.$$.fragment),aWo=l(),M2e=a("span"),nWo=o("AutoModelForSequenceClassification"),gUe=l(),No=a("div"),F(f9.$$.fragment),sWo=l(),Td=a("p"),lWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gz=a("a"),iWo=o("from_pretrained()"),dWo=o(" class method or the "),Oz=a("a"),cWo=o("from_config()"),fWo=o(` class
method.`),mWo=l(),m9=a("p"),gWo=o("This class cannot be instantiated directly using "),E2e=a("code"),hWo=o("__init__()"),pWo=o(" (throws an error)."),_Wo=l(),ut=a("div"),F(g9.$$.fragment),uWo=l(),C2e=a("p"),bWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vWo=l(),Md=a("p"),FWo=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),TWo=o("not"),MWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),EWo=o("from_pretrained()"),CWo=o(" to load the model weights."),wWo=l(),F(Lb.$$.fragment),AWo=l(),ro=a("div"),F(h9.$$.fragment),LWo=l(),A2e=a("p"),yWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xWo=l(),Ua=a("p"),$Wo=o("The model class to instantiate is selected based on the "),L2e=a("code"),kWo=o("model_type"),SWo=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),RWo=o("pretrained_model_name_or_path"),PWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),BWo=o("pretrained_model_name_or_path"),IWo=o(":"),NWo=l(),N=a("ul"),yb=a("li"),$2e=a("strong"),qWo=o("albert"),jWo=o(" \u2014 "),Xz=a("a"),DWo=o("AlbertForSequenceClassification"),GWo=o(" (ALBERT model)"),OWo=l(),xb=a("li"),k2e=a("strong"),VWo=o("bart"),XWo=o(" \u2014 "),zz=a("a"),zWo=o("BartForSequenceClassification"),WWo=o(" (BART model)"),QWo=l(),$b=a("li"),S2e=a("strong"),UWo=o("bert"),HWo=o(" \u2014 "),Wz=a("a"),JWo=o("BertForSequenceClassification"),YWo=o(" (BERT model)"),KWo=l(),kb=a("li"),R2e=a("strong"),ZWo=o("big_bird"),eQo=o(" \u2014 "),Qz=a("a"),oQo=o("BigBirdForSequenceClassification"),rQo=o(" (BigBird model)"),tQo=l(),Sb=a("li"),P2e=a("strong"),aQo=o("bigbird_pegasus"),nQo=o(" \u2014 "),Uz=a("a"),sQo=o("BigBirdPegasusForSequenceClassification"),lQo=o(" (BigBird-Pegasus model)"),iQo=l(),Rb=a("li"),B2e=a("strong"),dQo=o("bloom"),cQo=o(" \u2014 "),Hz=a("a"),fQo=o("BloomForSequenceClassification"),mQo=o(" (BLOOM model)"),gQo=l(),Pb=a("li"),I2e=a("strong"),hQo=o("camembert"),pQo=o(" \u2014 "),Jz=a("a"),_Qo=o("CamembertForSequenceClassification"),uQo=o(" (CamemBERT model)"),bQo=l(),Bb=a("li"),N2e=a("strong"),vQo=o("canine"),FQo=o(" \u2014 "),Yz=a("a"),TQo=o("CanineForSequenceClassification"),MQo=o(" (CANINE model)"),EQo=l(),Ib=a("li"),q2e=a("strong"),CQo=o("convbert"),wQo=o(" \u2014 "),Kz=a("a"),AQo=o("ConvBertForSequenceClassification"),LQo=o(" (ConvBERT model)"),yQo=l(),Nb=a("li"),j2e=a("strong"),xQo=o("ctrl"),$Qo=o(" \u2014 "),Zz=a("a"),kQo=o("CTRLForSequenceClassification"),SQo=o(" (CTRL model)"),RQo=l(),qb=a("li"),D2e=a("strong"),PQo=o("data2vec-text"),BQo=o(" \u2014 "),eW=a("a"),IQo=o("Data2VecTextForSequenceClassification"),NQo=o(" (Data2VecText model)"),qQo=l(),jb=a("li"),G2e=a("strong"),jQo=o("deberta"),DQo=o(" \u2014 "),oW=a("a"),GQo=o("DebertaForSequenceClassification"),OQo=o(" (DeBERTa model)"),VQo=l(),Db=a("li"),O2e=a("strong"),XQo=o("deberta-v2"),zQo=o(" \u2014 "),rW=a("a"),WQo=o("DebertaV2ForSequenceClassification"),QQo=o(" (DeBERTa-v2 model)"),UQo=l(),Gb=a("li"),V2e=a("strong"),HQo=o("distilbert"),JQo=o(" \u2014 "),tW=a("a"),YQo=o("DistilBertForSequenceClassification"),KQo=o(" (DistilBERT model)"),ZQo=l(),Ob=a("li"),X2e=a("strong"),eUo=o("electra"),oUo=o(" \u2014 "),aW=a("a"),rUo=o("ElectraForSequenceClassification"),tUo=o(" (ELECTRA model)"),aUo=l(),Vb=a("li"),z2e=a("strong"),nUo=o("flaubert"),sUo=o(" \u2014 "),nW=a("a"),lUo=o("FlaubertForSequenceClassification"),iUo=o(" (FlauBERT model)"),dUo=l(),Xb=a("li"),W2e=a("strong"),cUo=o("fnet"),fUo=o(" \u2014 "),sW=a("a"),mUo=o("FNetForSequenceClassification"),gUo=o(" (FNet model)"),hUo=l(),zb=a("li"),Q2e=a("strong"),pUo=o("funnel"),_Uo=o(" \u2014 "),lW=a("a"),uUo=o("FunnelForSequenceClassification"),bUo=o(" (Funnel Transformer model)"),vUo=l(),Wb=a("li"),U2e=a("strong"),FUo=o("gpt2"),TUo=o(" \u2014 "),iW=a("a"),MUo=o("GPT2ForSequenceClassification"),EUo=o(" (OpenAI GPT-2 model)"),CUo=l(),Qb=a("li"),H2e=a("strong"),wUo=o("gpt_neo"),AUo=o(" \u2014 "),dW=a("a"),LUo=o("GPTNeoForSequenceClassification"),yUo=o(" (GPT Neo model)"),xUo=l(),Ub=a("li"),J2e=a("strong"),$Uo=o("gptj"),kUo=o(" \u2014 "),cW=a("a"),SUo=o("GPTJForSequenceClassification"),RUo=o(" (GPT-J model)"),PUo=l(),Hb=a("li"),Y2e=a("strong"),BUo=o("ibert"),IUo=o(" \u2014 "),fW=a("a"),NUo=o("IBertForSequenceClassification"),qUo=o(" (I-BERT model)"),jUo=l(),Jb=a("li"),K2e=a("strong"),DUo=o("layoutlm"),GUo=o(" \u2014 "),mW=a("a"),OUo=o("LayoutLMForSequenceClassification"),VUo=o(" (LayoutLM model)"),XUo=l(),Yb=a("li"),Z2e=a("strong"),zUo=o("layoutlmv2"),WUo=o(" \u2014 "),gW=a("a"),QUo=o("LayoutLMv2ForSequenceClassification"),UUo=o(" (LayoutLMv2 model)"),HUo=l(),Kb=a("li"),e1e=a("strong"),JUo=o("layoutlmv3"),YUo=o(" \u2014 "),hW=a("a"),KUo=o("LayoutLMv3ForSequenceClassification"),ZUo=o(" (LayoutLMv3 model)"),eHo=l(),Zb=a("li"),o1e=a("strong"),oHo=o("led"),rHo=o(" \u2014 "),pW=a("a"),tHo=o("LEDForSequenceClassification"),aHo=o(" (LED model)"),nHo=l(),ev=a("li"),r1e=a("strong"),sHo=o("longformer"),lHo=o(" \u2014 "),_W=a("a"),iHo=o("LongformerForSequenceClassification"),dHo=o(" (Longformer model)"),cHo=l(),ov=a("li"),t1e=a("strong"),fHo=o("luke"),mHo=o(" \u2014 "),uW=a("a"),gHo=o("LukeForSequenceClassification"),hHo=o(" (LUKE model)"),pHo=l(),rv=a("li"),a1e=a("strong"),_Ho=o("mbart"),uHo=o(" \u2014 "),bW=a("a"),bHo=o("MBartForSequenceClassification"),vHo=o(" (mBART model)"),FHo=l(),tv=a("li"),n1e=a("strong"),THo=o("megatron-bert"),MHo=o(" \u2014 "),vW=a("a"),EHo=o("MegatronBertForSequenceClassification"),CHo=o(" (Megatron-BERT model)"),wHo=l(),av=a("li"),s1e=a("strong"),AHo=o("mobilebert"),LHo=o(" \u2014 "),FW=a("a"),yHo=o("MobileBertForSequenceClassification"),xHo=o(" (MobileBERT model)"),$Ho=l(),nv=a("li"),l1e=a("strong"),kHo=o("mpnet"),SHo=o(" \u2014 "),TW=a("a"),RHo=o("MPNetForSequenceClassification"),PHo=o(" (MPNet model)"),BHo=l(),sv=a("li"),i1e=a("strong"),IHo=o("mvp"),NHo=o(" \u2014 "),MW=a("a"),qHo=o("MvpForSequenceClassification"),jHo=o(" (MVP model)"),DHo=l(),lv=a("li"),d1e=a("strong"),GHo=o("nezha"),OHo=o(" \u2014 "),EW=a("a"),VHo=o("NezhaForSequenceClassification"),XHo=o(" (Nezha model)"),zHo=l(),iv=a("li"),c1e=a("strong"),WHo=o("nystromformer"),QHo=o(" \u2014 "),CW=a("a"),UHo=o("NystromformerForSequenceClassification"),HHo=o(" (Nystr\xF6mformer model)"),JHo=l(),dv=a("li"),f1e=a("strong"),YHo=o("openai-gpt"),KHo=o(" \u2014 "),wW=a("a"),ZHo=o("OpenAIGPTForSequenceClassification"),eJo=o(" (OpenAI GPT model)"),oJo=l(),cv=a("li"),m1e=a("strong"),rJo=o("opt"),tJo=o(" \u2014 "),AW=a("a"),aJo=o("OPTForSequenceClassification"),nJo=o(" (OPT model)"),sJo=l(),fv=a("li"),g1e=a("strong"),lJo=o("perceiver"),iJo=o(" \u2014 "),LW=a("a"),dJo=o("PerceiverForSequenceClassification"),cJo=o(" (Perceiver model)"),fJo=l(),mv=a("li"),h1e=a("strong"),mJo=o("plbart"),gJo=o(" \u2014 "),yW=a("a"),hJo=o("PLBartForSequenceClassification"),pJo=o(" (PLBart model)"),_Jo=l(),gv=a("li"),p1e=a("strong"),uJo=o("qdqbert"),bJo=o(" \u2014 "),xW=a("a"),vJo=o("QDQBertForSequenceClassification"),FJo=o(" (QDQBert model)"),TJo=l(),hv=a("li"),_1e=a("strong"),MJo=o("reformer"),EJo=o(" \u2014 "),$W=a("a"),CJo=o("ReformerForSequenceClassification"),wJo=o(" (Reformer model)"),AJo=l(),pv=a("li"),u1e=a("strong"),LJo=o("rembert"),yJo=o(" \u2014 "),kW=a("a"),xJo=o("RemBertForSequenceClassification"),$Jo=o(" (RemBERT model)"),kJo=l(),_v=a("li"),b1e=a("strong"),SJo=o("roberta"),RJo=o(" \u2014 "),SW=a("a"),PJo=o("RobertaForSequenceClassification"),BJo=o(" (RoBERTa model)"),IJo=l(),uv=a("li"),v1e=a("strong"),NJo=o("roformer"),qJo=o(" \u2014 "),RW=a("a"),jJo=o("RoFormerForSequenceClassification"),DJo=o(" (RoFormer model)"),GJo=l(),bv=a("li"),F1e=a("strong"),OJo=o("squeezebert"),VJo=o(" \u2014 "),PW=a("a"),XJo=o("SqueezeBertForSequenceClassification"),zJo=o(" (SqueezeBERT model)"),WJo=l(),vv=a("li"),T1e=a("strong"),QJo=o("tapas"),UJo=o(" \u2014 "),BW=a("a"),HJo=o("TapasForSequenceClassification"),JJo=o(" (TAPAS model)"),YJo=l(),Fv=a("li"),M1e=a("strong"),KJo=o("transfo-xl"),ZJo=o(" \u2014 "),IW=a("a"),eYo=o("TransfoXLForSequenceClassification"),oYo=o(" (Transformer-XL model)"),rYo=l(),Tv=a("li"),E1e=a("strong"),tYo=o("xlm"),aYo=o(" \u2014 "),NW=a("a"),nYo=o("XLMForSequenceClassification"),sYo=o(" (XLM model)"),lYo=l(),Mv=a("li"),C1e=a("strong"),iYo=o("xlm-roberta"),dYo=o(" \u2014 "),qW=a("a"),cYo=o("XLMRobertaForSequenceClassification"),fYo=o(" (XLM-RoBERTa model)"),mYo=l(),Ev=a("li"),w1e=a("strong"),gYo=o("xlm-roberta-xl"),hYo=o(" \u2014 "),jW=a("a"),pYo=o("XLMRobertaXLForSequenceClassification"),_Yo=o(" (XLM-RoBERTa-XL model)"),uYo=l(),Cv=a("li"),A1e=a("strong"),bYo=o("xlnet"),vYo=o(" \u2014 "),DW=a("a"),FYo=o("XLNetForSequenceClassification"),TYo=o(" (XLNet model)"),MYo=l(),wv=a("li"),L1e=a("strong"),EYo=o("yoso"),CYo=o(" \u2014 "),GW=a("a"),wYo=o("YosoForSequenceClassification"),AYo=o(" (YOSO model)"),LYo=l(),Av=a("p"),yYo=o("The model is set in evaluation mode by default using "),y1e=a("code"),xYo=o("model.eval()"),$Yo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=a("code"),kYo=o("model.train()"),SYo=l(),F(Lv.$$.fragment),hUe=l(),Ed=a("h2"),yv=a("a"),$1e=a("span"),F(p9.$$.fragment),RYo=l(),k1e=a("span"),PYo=o("AutoModelForMultipleChoice"),pUe=l(),qo=a("div"),F(_9.$$.fragment),BYo=l(),Cd=a("p"),IYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OW=a("a"),NYo=o("from_pretrained()"),qYo=o(" class method or the "),VW=a("a"),jYo=o("from_config()"),DYo=o(` class
method.`),GYo=l(),u9=a("p"),OYo=o("This class cannot be instantiated directly using "),S1e=a("code"),VYo=o("__init__()"),XYo=o(" (throws an error)."),zYo=l(),bt=a("div"),F(b9.$$.fragment),WYo=l(),R1e=a("p"),QYo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UYo=l(),wd=a("p"),HYo=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),JYo=o("not"),YYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),KYo=o("from_pretrained()"),ZYo=o(" to load the model weights."),eKo=l(),F(xv.$$.fragment),oKo=l(),to=a("div"),F(v9.$$.fragment),rKo=l(),B1e=a("p"),tKo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aKo=l(),Ha=a("p"),nKo=o("The model class to instantiate is selected based on the "),I1e=a("code"),sKo=o("model_type"),lKo=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),iKo=o("pretrained_model_name_or_path"),dKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=a("code"),cKo=o("pretrained_model_name_or_path"),fKo=o(":"),mKo=l(),Z=a("ul"),$v=a("li"),j1e=a("strong"),gKo=o("albert"),hKo=o(" \u2014 "),zW=a("a"),pKo=o("AlbertForMultipleChoice"),_Ko=o(" (ALBERT model)"),uKo=l(),kv=a("li"),D1e=a("strong"),bKo=o("bert"),vKo=o(" \u2014 "),WW=a("a"),FKo=o("BertForMultipleChoice"),TKo=o(" (BERT model)"),MKo=l(),Sv=a("li"),G1e=a("strong"),EKo=o("big_bird"),CKo=o(" \u2014 "),QW=a("a"),wKo=o("BigBirdForMultipleChoice"),AKo=o(" (BigBird model)"),LKo=l(),Rv=a("li"),O1e=a("strong"),yKo=o("camembert"),xKo=o(" \u2014 "),UW=a("a"),$Ko=o("CamembertForMultipleChoice"),kKo=o(" (CamemBERT model)"),SKo=l(),Pv=a("li"),V1e=a("strong"),RKo=o("canine"),PKo=o(" \u2014 "),HW=a("a"),BKo=o("CanineForMultipleChoice"),IKo=o(" (CANINE model)"),NKo=l(),Bv=a("li"),X1e=a("strong"),qKo=o("convbert"),jKo=o(" \u2014 "),JW=a("a"),DKo=o("ConvBertForMultipleChoice"),GKo=o(" (ConvBERT model)"),OKo=l(),Iv=a("li"),z1e=a("strong"),VKo=o("data2vec-text"),XKo=o(" \u2014 "),YW=a("a"),zKo=o("Data2VecTextForMultipleChoice"),WKo=o(" (Data2VecText model)"),QKo=l(),Nv=a("li"),W1e=a("strong"),UKo=o("deberta-v2"),HKo=o(" \u2014 "),KW=a("a"),JKo=o("DebertaV2ForMultipleChoice"),YKo=o(" (DeBERTa-v2 model)"),KKo=l(),qv=a("li"),Q1e=a("strong"),ZKo=o("distilbert"),eZo=o(" \u2014 "),ZW=a("a"),oZo=o("DistilBertForMultipleChoice"),rZo=o(" (DistilBERT model)"),tZo=l(),jv=a("li"),U1e=a("strong"),aZo=o("electra"),nZo=o(" \u2014 "),eQ=a("a"),sZo=o("ElectraForMultipleChoice"),lZo=o(" (ELECTRA model)"),iZo=l(),Dv=a("li"),H1e=a("strong"),dZo=o("flaubert"),cZo=o(" \u2014 "),oQ=a("a"),fZo=o("FlaubertForMultipleChoice"),mZo=o(" (FlauBERT model)"),gZo=l(),Gv=a("li"),J1e=a("strong"),hZo=o("fnet"),pZo=o(" \u2014 "),rQ=a("a"),_Zo=o("FNetForMultipleChoice"),uZo=o(" (FNet model)"),bZo=l(),Ov=a("li"),Y1e=a("strong"),vZo=o("funnel"),FZo=o(" \u2014 "),tQ=a("a"),TZo=o("FunnelForMultipleChoice"),MZo=o(" (Funnel Transformer model)"),EZo=l(),Vv=a("li"),K1e=a("strong"),CZo=o("ibert"),wZo=o(" \u2014 "),aQ=a("a"),AZo=o("IBertForMultipleChoice"),LZo=o(" (I-BERT model)"),yZo=l(),Xv=a("li"),Z1e=a("strong"),xZo=o("longformer"),$Zo=o(" \u2014 "),nQ=a("a"),kZo=o("LongformerForMultipleChoice"),SZo=o(" (Longformer model)"),RZo=l(),zv=a("li"),e4e=a("strong"),PZo=o("luke"),BZo=o(" \u2014 "),sQ=a("a"),IZo=o("LukeForMultipleChoice"),NZo=o(" (LUKE model)"),qZo=l(),Wv=a("li"),o4e=a("strong"),jZo=o("megatron-bert"),DZo=o(" \u2014 "),lQ=a("a"),GZo=o("MegatronBertForMultipleChoice"),OZo=o(" (Megatron-BERT model)"),VZo=l(),Qv=a("li"),r4e=a("strong"),XZo=o("mobilebert"),zZo=o(" \u2014 "),iQ=a("a"),WZo=o("MobileBertForMultipleChoice"),QZo=o(" (MobileBERT model)"),UZo=l(),Uv=a("li"),t4e=a("strong"),HZo=o("mpnet"),JZo=o(" \u2014 "),dQ=a("a"),YZo=o("MPNetForMultipleChoice"),KZo=o(" (MPNet model)"),ZZo=l(),Hv=a("li"),a4e=a("strong"),eer=o("nezha"),oer=o(" \u2014 "),cQ=a("a"),rer=o("NezhaForMultipleChoice"),ter=o(" (Nezha model)"),aer=l(),Jv=a("li"),n4e=a("strong"),ner=o("nystromformer"),ser=o(" \u2014 "),fQ=a("a"),ler=o("NystromformerForMultipleChoice"),ier=o(" (Nystr\xF6mformer model)"),der=l(),Yv=a("li"),s4e=a("strong"),cer=o("qdqbert"),fer=o(" \u2014 "),mQ=a("a"),mer=o("QDQBertForMultipleChoice"),ger=o(" (QDQBert model)"),her=l(),Kv=a("li"),l4e=a("strong"),per=o("rembert"),_er=o(" \u2014 "),gQ=a("a"),uer=o("RemBertForMultipleChoice"),ber=o(" (RemBERT model)"),ver=l(),Zv=a("li"),i4e=a("strong"),Fer=o("roberta"),Ter=o(" \u2014 "),hQ=a("a"),Mer=o("RobertaForMultipleChoice"),Eer=o(" (RoBERTa model)"),Cer=l(),e5=a("li"),d4e=a("strong"),wer=o("roformer"),Aer=o(" \u2014 "),pQ=a("a"),Ler=o("RoFormerForMultipleChoice"),yer=o(" (RoFormer model)"),xer=l(),o5=a("li"),c4e=a("strong"),$er=o("squeezebert"),ker=o(" \u2014 "),_Q=a("a"),Ser=o("SqueezeBertForMultipleChoice"),Rer=o(" (SqueezeBERT model)"),Per=l(),r5=a("li"),f4e=a("strong"),Ber=o("xlm"),Ier=o(" \u2014 "),uQ=a("a"),Ner=o("XLMForMultipleChoice"),qer=o(" (XLM model)"),jer=l(),t5=a("li"),m4e=a("strong"),Der=o("xlm-roberta"),Ger=o(" \u2014 "),bQ=a("a"),Oer=o("XLMRobertaForMultipleChoice"),Ver=o(" (XLM-RoBERTa model)"),Xer=l(),a5=a("li"),g4e=a("strong"),zer=o("xlm-roberta-xl"),Wer=o(" \u2014 "),vQ=a("a"),Qer=o("XLMRobertaXLForMultipleChoice"),Uer=o(" (XLM-RoBERTa-XL model)"),Her=l(),n5=a("li"),h4e=a("strong"),Jer=o("xlnet"),Yer=o(" \u2014 "),FQ=a("a"),Ker=o("XLNetForMultipleChoice"),Zer=o(" (XLNet model)"),eor=l(),s5=a("li"),p4e=a("strong"),oor=o("yoso"),ror=o(" \u2014 "),TQ=a("a"),tor=o("YosoForMultipleChoice"),aor=o(" (YOSO model)"),nor=l(),l5=a("p"),sor=o("The model is set in evaluation mode by default using "),_4e=a("code"),lor=o("model.eval()"),ior=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u4e=a("code"),dor=o("model.train()"),cor=l(),F(i5.$$.fragment),_Ue=l(),Ad=a("h2"),d5=a("a"),b4e=a("span"),F(F9.$$.fragment),mor=l(),v4e=a("span"),gor=o("AutoModelForNextSentencePrediction"),uUe=l(),jo=a("div"),F(T9.$$.fragment),hor=l(),Ld=a("p"),por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MQ=a("a"),_or=o("from_pretrained()"),uor=o(" class method or the "),EQ=a("a"),bor=o("from_config()"),vor=o(` class
method.`),For=l(),M9=a("p"),Tor=o("This class cannot be instantiated directly using "),F4e=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),Cor=l(),vt=a("div"),F(E9.$$.fragment),wor=l(),T4e=a("p"),Aor=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lor=l(),yd=a("p"),yor=o(`Note:
Loading a model from its configuration file does `),M4e=a("strong"),xor=o("not"),$or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),kor=o("from_pretrained()"),Sor=o(" to load the model weights."),Ror=l(),F(c5.$$.fragment),Por=l(),ao=a("div"),F(C9.$$.fragment),Bor=l(),E4e=a("p"),Ior=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nor=l(),Ja=a("p"),qor=o("The model class to instantiate is selected based on the "),C4e=a("code"),jor=o("model_type"),Dor=o(` property of the config object (either
passed as an argument or loaded from `),w4e=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=a("code"),Vor=o("pretrained_model_name_or_path"),Xor=o(":"),zor=l(),Do=a("ul"),f5=a("li"),L4e=a("strong"),Wor=o("bert"),Qor=o(" \u2014 "),wQ=a("a"),Uor=o("BertForNextSentencePrediction"),Hor=o(" (BERT model)"),Jor=l(),m5=a("li"),y4e=a("strong"),Yor=o("fnet"),Kor=o(" \u2014 "),AQ=a("a"),Zor=o("FNetForNextSentencePrediction"),err=o(" (FNet model)"),orr=l(),g5=a("li"),x4e=a("strong"),rrr=o("megatron-bert"),trr=o(" \u2014 "),LQ=a("a"),arr=o("MegatronBertForNextSentencePrediction"),nrr=o(" (Megatron-BERT model)"),srr=l(),h5=a("li"),$4e=a("strong"),lrr=o("mobilebert"),irr=o(" \u2014 "),yQ=a("a"),drr=o("MobileBertForNextSentencePrediction"),crr=o(" (MobileBERT model)"),frr=l(),p5=a("li"),k4e=a("strong"),mrr=o("nezha"),grr=o(" \u2014 "),xQ=a("a"),hrr=o("NezhaForNextSentencePrediction"),prr=o(" (Nezha model)"),_rr=l(),_5=a("li"),S4e=a("strong"),urr=o("qdqbert"),brr=o(" \u2014 "),$Q=a("a"),vrr=o("QDQBertForNextSentencePrediction"),Frr=o(" (QDQBert model)"),Trr=l(),u5=a("p"),Mrr=o("The model is set in evaluation mode by default using "),R4e=a("code"),Err=o("model.eval()"),Crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P4e=a("code"),wrr=o("model.train()"),Arr=l(),F(b5.$$.fragment),bUe=l(),xd=a("h2"),v5=a("a"),B4e=a("span"),F(w9.$$.fragment),Lrr=l(),I4e=a("span"),yrr=o("AutoModelForTokenClassification"),vUe=l(),Go=a("div"),F(A9.$$.fragment),xrr=l(),$d=a("p"),$rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kQ=a("a"),krr=o("from_pretrained()"),Srr=o(" class method or the "),SQ=a("a"),Rrr=o("from_config()"),Prr=o(` class
method.`),Brr=l(),L9=a("p"),Irr=o("This class cannot be instantiated directly using "),N4e=a("code"),Nrr=o("__init__()"),qrr=o(" (throws an error)."),jrr=l(),Ft=a("div"),F(y9.$$.fragment),Drr=l(),q4e=a("p"),Grr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Orr=l(),kd=a("p"),Vrr=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),Xrr=o("not"),zrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),Wrr=o("from_pretrained()"),Qrr=o(" to load the model weights."),Urr=l(),F(F5.$$.fragment),Hrr=l(),no=a("div"),F(x9.$$.fragment),Jrr=l(),D4e=a("p"),Yrr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Krr=l(),Ya=a("p"),Zrr=o("The model class to instantiate is selected based on the "),G4e=a("code"),etr=o("model_type"),otr=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),atr=o("pretrained_model_name_or_path"),ntr=o(":"),str=l(),H=a("ul"),T5=a("li"),X4e=a("strong"),ltr=o("albert"),itr=o(" \u2014 "),PQ=a("a"),dtr=o("AlbertForTokenClassification"),ctr=o(" (ALBERT model)"),ftr=l(),M5=a("li"),z4e=a("strong"),mtr=o("bert"),gtr=o(" \u2014 "),BQ=a("a"),htr=o("BertForTokenClassification"),ptr=o(" (BERT model)"),_tr=l(),E5=a("li"),W4e=a("strong"),utr=o("big_bird"),btr=o(" \u2014 "),IQ=a("a"),vtr=o("BigBirdForTokenClassification"),Ftr=o(" (BigBird model)"),Ttr=l(),C5=a("li"),Q4e=a("strong"),Mtr=o("bloom"),Etr=o(" \u2014 "),NQ=a("a"),Ctr=o("BloomForTokenClassification"),wtr=o(" (BLOOM model)"),Atr=l(),w5=a("li"),U4e=a("strong"),Ltr=o("camembert"),ytr=o(" \u2014 "),qQ=a("a"),xtr=o("CamembertForTokenClassification"),$tr=o(" (CamemBERT model)"),ktr=l(),A5=a("li"),H4e=a("strong"),Str=o("canine"),Rtr=o(" \u2014 "),jQ=a("a"),Ptr=o("CanineForTokenClassification"),Btr=o(" (CANINE model)"),Itr=l(),L5=a("li"),J4e=a("strong"),Ntr=o("convbert"),qtr=o(" \u2014 "),DQ=a("a"),jtr=o("ConvBertForTokenClassification"),Dtr=o(" (ConvBERT model)"),Gtr=l(),y5=a("li"),Y4e=a("strong"),Otr=o("data2vec-text"),Vtr=o(" \u2014 "),GQ=a("a"),Xtr=o("Data2VecTextForTokenClassification"),ztr=o(" (Data2VecText model)"),Wtr=l(),x5=a("li"),K4e=a("strong"),Qtr=o("deberta"),Utr=o(" \u2014 "),OQ=a("a"),Htr=o("DebertaForTokenClassification"),Jtr=o(" (DeBERTa model)"),Ytr=l(),$5=a("li"),Z4e=a("strong"),Ktr=o("deberta-v2"),Ztr=o(" \u2014 "),VQ=a("a"),ear=o("DebertaV2ForTokenClassification"),oar=o(" (DeBERTa-v2 model)"),rar=l(),k5=a("li"),ebe=a("strong"),tar=o("distilbert"),aar=o(" \u2014 "),XQ=a("a"),nar=o("DistilBertForTokenClassification"),sar=o(" (DistilBERT model)"),lar=l(),S5=a("li"),obe=a("strong"),iar=o("electra"),dar=o(" \u2014 "),zQ=a("a"),car=o("ElectraForTokenClassification"),far=o(" (ELECTRA model)"),mar=l(),R5=a("li"),rbe=a("strong"),gar=o("flaubert"),har=o(" \u2014 "),WQ=a("a"),par=o("FlaubertForTokenClassification"),_ar=o(" (FlauBERT model)"),uar=l(),P5=a("li"),tbe=a("strong"),bar=o("fnet"),Far=o(" \u2014 "),QQ=a("a"),Tar=o("FNetForTokenClassification"),Mar=o(" (FNet model)"),Ear=l(),B5=a("li"),abe=a("strong"),Car=o("funnel"),war=o(" \u2014 "),UQ=a("a"),Aar=o("FunnelForTokenClassification"),Lar=o(" (Funnel Transformer model)"),yar=l(),I5=a("li"),nbe=a("strong"),xar=o("gpt2"),$ar=o(" \u2014 "),HQ=a("a"),kar=o("GPT2ForTokenClassification"),Sar=o(" (OpenAI GPT-2 model)"),Rar=l(),N5=a("li"),sbe=a("strong"),Par=o("ibert"),Bar=o(" \u2014 "),JQ=a("a"),Iar=o("IBertForTokenClassification"),Nar=o(" (I-BERT model)"),qar=l(),q5=a("li"),lbe=a("strong"),jar=o("layoutlm"),Dar=o(" \u2014 "),YQ=a("a"),Gar=o("LayoutLMForTokenClassification"),Oar=o(" (LayoutLM model)"),Var=l(),j5=a("li"),ibe=a("strong"),Xar=o("layoutlmv2"),zar=o(" \u2014 "),KQ=a("a"),War=o("LayoutLMv2ForTokenClassification"),Qar=o(" (LayoutLMv2 model)"),Uar=l(),D5=a("li"),dbe=a("strong"),Har=o("layoutlmv3"),Jar=o(" \u2014 "),ZQ=a("a"),Yar=o("LayoutLMv3ForTokenClassification"),Kar=o(" (LayoutLMv3 model)"),Zar=l(),G5=a("li"),cbe=a("strong"),enr=o("longformer"),onr=o(" \u2014 "),eU=a("a"),rnr=o("LongformerForTokenClassification"),tnr=o(" (Longformer model)"),anr=l(),O5=a("li"),fbe=a("strong"),nnr=o("luke"),snr=o(" \u2014 "),oU=a("a"),lnr=o("LukeForTokenClassification"),inr=o(" (LUKE model)"),dnr=l(),V5=a("li"),mbe=a("strong"),cnr=o("megatron-bert"),fnr=o(" \u2014 "),rU=a("a"),mnr=o("MegatronBertForTokenClassification"),gnr=o(" (Megatron-BERT model)"),hnr=l(),X5=a("li"),gbe=a("strong"),pnr=o("mobilebert"),_nr=o(" \u2014 "),tU=a("a"),unr=o("MobileBertForTokenClassification"),bnr=o(" (MobileBERT model)"),vnr=l(),z5=a("li"),hbe=a("strong"),Fnr=o("mpnet"),Tnr=o(" \u2014 "),aU=a("a"),Mnr=o("MPNetForTokenClassification"),Enr=o(" (MPNet model)"),Cnr=l(),W5=a("li"),pbe=a("strong"),wnr=o("nezha"),Anr=o(" \u2014 "),nU=a("a"),Lnr=o("NezhaForTokenClassification"),ynr=o(" (Nezha model)"),xnr=l(),Q5=a("li"),_be=a("strong"),$nr=o("nystromformer"),knr=o(" \u2014 "),sU=a("a"),Snr=o("NystromformerForTokenClassification"),Rnr=o(" (Nystr\xF6mformer model)"),Pnr=l(),U5=a("li"),ube=a("strong"),Bnr=o("qdqbert"),Inr=o(" \u2014 "),lU=a("a"),Nnr=o("QDQBertForTokenClassification"),qnr=o(" (QDQBert model)"),jnr=l(),H5=a("li"),bbe=a("strong"),Dnr=o("rembert"),Gnr=o(" \u2014 "),iU=a("a"),Onr=o("RemBertForTokenClassification"),Vnr=o(" (RemBERT model)"),Xnr=l(),J5=a("li"),vbe=a("strong"),znr=o("roberta"),Wnr=o(" \u2014 "),dU=a("a"),Qnr=o("RobertaForTokenClassification"),Unr=o(" (RoBERTa model)"),Hnr=l(),Y5=a("li"),Fbe=a("strong"),Jnr=o("roformer"),Ynr=o(" \u2014 "),cU=a("a"),Knr=o("RoFormerForTokenClassification"),Znr=o(" (RoFormer model)"),esr=l(),K5=a("li"),Tbe=a("strong"),osr=o("squeezebert"),rsr=o(" \u2014 "),fU=a("a"),tsr=o("SqueezeBertForTokenClassification"),asr=o(" (SqueezeBERT model)"),nsr=l(),Z5=a("li"),Mbe=a("strong"),ssr=o("xlm"),lsr=o(" \u2014 "),mU=a("a"),isr=o("XLMForTokenClassification"),dsr=o(" (XLM model)"),csr=l(),eF=a("li"),Ebe=a("strong"),fsr=o("xlm-roberta"),msr=o(" \u2014 "),gU=a("a"),gsr=o("XLMRobertaForTokenClassification"),hsr=o(" (XLM-RoBERTa model)"),psr=l(),oF=a("li"),Cbe=a("strong"),_sr=o("xlm-roberta-xl"),usr=o(" \u2014 "),hU=a("a"),bsr=o("XLMRobertaXLForTokenClassification"),vsr=o(" (XLM-RoBERTa-XL model)"),Fsr=l(),rF=a("li"),wbe=a("strong"),Tsr=o("xlnet"),Msr=o(" \u2014 "),pU=a("a"),Esr=o("XLNetForTokenClassification"),Csr=o(" (XLNet model)"),wsr=l(),tF=a("li"),Abe=a("strong"),Asr=o("yoso"),Lsr=o(" \u2014 "),_U=a("a"),ysr=o("YosoForTokenClassification"),xsr=o(" (YOSO model)"),$sr=l(),aF=a("p"),ksr=o("The model is set in evaluation mode by default using "),Lbe=a("code"),Ssr=o("model.eval()"),Rsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=a("code"),Psr=o("model.train()"),Bsr=l(),F(nF.$$.fragment),FUe=l(),Sd=a("h2"),sF=a("a"),xbe=a("span"),F($9.$$.fragment),Isr=l(),$be=a("span"),Nsr=o("AutoModelForQuestionAnswering"),TUe=l(),Oo=a("div"),F(k9.$$.fragment),qsr=l(),Rd=a("p"),jsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uU=a("a"),Dsr=o("from_pretrained()"),Gsr=o(" class method or the "),bU=a("a"),Osr=o("from_config()"),Vsr=o(` class
method.`),Xsr=l(),S9=a("p"),zsr=o("This class cannot be instantiated directly using "),kbe=a("code"),Wsr=o("__init__()"),Qsr=o(" (throws an error)."),Usr=l(),Tt=a("div"),F(R9.$$.fragment),Hsr=l(),Sbe=a("p"),Jsr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ysr=l(),Pd=a("p"),Ksr=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),Zsr=o("not"),elr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),olr=o("from_pretrained()"),rlr=o(" to load the model weights."),tlr=l(),F(lF.$$.fragment),alr=l(),so=a("div"),F(P9.$$.fragment),nlr=l(),Pbe=a("p"),slr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),llr=l(),Ka=a("p"),ilr=o("The model class to instantiate is selected based on the "),Bbe=a("code"),dlr=o("model_type"),clr=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),flr=o("pretrained_model_name_or_path"),mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),glr=o("pretrained_model_name_or_path"),hlr=o(":"),plr=l(),V=a("ul"),iF=a("li"),qbe=a("strong"),_lr=o("albert"),ulr=o(" \u2014 "),FU=a("a"),blr=o("AlbertForQuestionAnswering"),vlr=o(" (ALBERT model)"),Flr=l(),dF=a("li"),jbe=a("strong"),Tlr=o("bart"),Mlr=o(" \u2014 "),TU=a("a"),Elr=o("BartForQuestionAnswering"),Clr=o(" (BART model)"),wlr=l(),cF=a("li"),Dbe=a("strong"),Alr=o("bert"),Llr=o(" \u2014 "),MU=a("a"),ylr=o("BertForQuestionAnswering"),xlr=o(" (BERT model)"),$lr=l(),fF=a("li"),Gbe=a("strong"),klr=o("big_bird"),Slr=o(" \u2014 "),EU=a("a"),Rlr=o("BigBirdForQuestionAnswering"),Plr=o(" (BigBird model)"),Blr=l(),mF=a("li"),Obe=a("strong"),Ilr=o("bigbird_pegasus"),Nlr=o(" \u2014 "),CU=a("a"),qlr=o("BigBirdPegasusForQuestionAnswering"),jlr=o(" (BigBird-Pegasus model)"),Dlr=l(),gF=a("li"),Vbe=a("strong"),Glr=o("camembert"),Olr=o(" \u2014 "),wU=a("a"),Vlr=o("CamembertForQuestionAnswering"),Xlr=o(" (CamemBERT model)"),zlr=l(),hF=a("li"),Xbe=a("strong"),Wlr=o("canine"),Qlr=o(" \u2014 "),AU=a("a"),Ulr=o("CanineForQuestionAnswering"),Hlr=o(" (CANINE model)"),Jlr=l(),pF=a("li"),zbe=a("strong"),Ylr=o("convbert"),Klr=o(" \u2014 "),LU=a("a"),Zlr=o("ConvBertForQuestionAnswering"),eir=o(" (ConvBERT model)"),oir=l(),_F=a("li"),Wbe=a("strong"),rir=o("data2vec-text"),tir=o(" \u2014 "),yU=a("a"),air=o("Data2VecTextForQuestionAnswering"),nir=o(" (Data2VecText model)"),sir=l(),uF=a("li"),Qbe=a("strong"),lir=o("deberta"),iir=o(" \u2014 "),xU=a("a"),dir=o("DebertaForQuestionAnswering"),cir=o(" (DeBERTa model)"),fir=l(),bF=a("li"),Ube=a("strong"),mir=o("deberta-v2"),gir=o(" \u2014 "),$U=a("a"),hir=o("DebertaV2ForQuestionAnswering"),pir=o(" (DeBERTa-v2 model)"),_ir=l(),vF=a("li"),Hbe=a("strong"),uir=o("distilbert"),bir=o(" \u2014 "),kU=a("a"),vir=o("DistilBertForQuestionAnswering"),Fir=o(" (DistilBERT model)"),Tir=l(),FF=a("li"),Jbe=a("strong"),Mir=o("electra"),Eir=o(" \u2014 "),SU=a("a"),Cir=o("ElectraForQuestionAnswering"),wir=o(" (ELECTRA model)"),Air=l(),TF=a("li"),Ybe=a("strong"),Lir=o("flaubert"),yir=o(" \u2014 "),RU=a("a"),xir=o("FlaubertForQuestionAnsweringSimple"),$ir=o(" (FlauBERT model)"),kir=l(),MF=a("li"),Kbe=a("strong"),Sir=o("fnet"),Rir=o(" \u2014 "),PU=a("a"),Pir=o("FNetForQuestionAnswering"),Bir=o(" (FNet model)"),Iir=l(),EF=a("li"),Zbe=a("strong"),Nir=o("funnel"),qir=o(" \u2014 "),BU=a("a"),jir=o("FunnelForQuestionAnswering"),Dir=o(" (Funnel Transformer model)"),Gir=l(),CF=a("li"),eve=a("strong"),Oir=o("gptj"),Vir=o(" \u2014 "),IU=a("a"),Xir=o("GPTJForQuestionAnswering"),zir=o(" (GPT-J model)"),Wir=l(),wF=a("li"),ove=a("strong"),Qir=o("ibert"),Uir=o(" \u2014 "),NU=a("a"),Hir=o("IBertForQuestionAnswering"),Jir=o(" (I-BERT model)"),Yir=l(),AF=a("li"),rve=a("strong"),Kir=o("layoutlmv2"),Zir=o(" \u2014 "),qU=a("a"),edr=o("LayoutLMv2ForQuestionAnswering"),odr=o(" (LayoutLMv2 model)"),rdr=l(),LF=a("li"),tve=a("strong"),tdr=o("layoutlmv3"),adr=o(" \u2014 "),jU=a("a"),ndr=o("LayoutLMv3ForQuestionAnswering"),sdr=o(" (LayoutLMv3 model)"),ldr=l(),yF=a("li"),ave=a("strong"),idr=o("led"),ddr=o(" \u2014 "),DU=a("a"),cdr=o("LEDForQuestionAnswering"),fdr=o(" (LED model)"),mdr=l(),xF=a("li"),nve=a("strong"),gdr=o("longformer"),hdr=o(" \u2014 "),GU=a("a"),pdr=o("LongformerForQuestionAnswering"),_dr=o(" (Longformer model)"),udr=l(),$F=a("li"),sve=a("strong"),bdr=o("luke"),vdr=o(" \u2014 "),OU=a("a"),Fdr=o("LukeForQuestionAnswering"),Tdr=o(" (LUKE model)"),Mdr=l(),kF=a("li"),lve=a("strong"),Edr=o("lxmert"),Cdr=o(" \u2014 "),VU=a("a"),wdr=o("LxmertForQuestionAnswering"),Adr=o(" (LXMERT model)"),Ldr=l(),SF=a("li"),ive=a("strong"),ydr=o("mbart"),xdr=o(" \u2014 "),XU=a("a"),$dr=o("MBartForQuestionAnswering"),kdr=o(" (mBART model)"),Sdr=l(),RF=a("li"),dve=a("strong"),Rdr=o("megatron-bert"),Pdr=o(" \u2014 "),zU=a("a"),Bdr=o("MegatronBertForQuestionAnswering"),Idr=o(" (Megatron-BERT model)"),Ndr=l(),PF=a("li"),cve=a("strong"),qdr=o("mobilebert"),jdr=o(" \u2014 "),WU=a("a"),Ddr=o("MobileBertForQuestionAnswering"),Gdr=o(" (MobileBERT model)"),Odr=l(),BF=a("li"),fve=a("strong"),Vdr=o("mpnet"),Xdr=o(" \u2014 "),QU=a("a"),zdr=o("MPNetForQuestionAnswering"),Wdr=o(" (MPNet model)"),Qdr=l(),IF=a("li"),mve=a("strong"),Udr=o("mvp"),Hdr=o(" \u2014 "),UU=a("a"),Jdr=o("MvpForQuestionAnswering"),Ydr=o(" (MVP model)"),Kdr=l(),NF=a("li"),gve=a("strong"),Zdr=o("nezha"),ecr=o(" \u2014 "),HU=a("a"),ocr=o("NezhaForQuestionAnswering"),rcr=o(" (Nezha model)"),tcr=l(),qF=a("li"),hve=a("strong"),acr=o("nystromformer"),ncr=o(" \u2014 "),JU=a("a"),scr=o("NystromformerForQuestionAnswering"),lcr=o(" (Nystr\xF6mformer model)"),icr=l(),jF=a("li"),pve=a("strong"),dcr=o("qdqbert"),ccr=o(" \u2014 "),YU=a("a"),fcr=o("QDQBertForQuestionAnswering"),mcr=o(" (QDQBert model)"),gcr=l(),DF=a("li"),_ve=a("strong"),hcr=o("reformer"),pcr=o(" \u2014 "),KU=a("a"),_cr=o("ReformerForQuestionAnswering"),ucr=o(" (Reformer model)"),bcr=l(),GF=a("li"),uve=a("strong"),vcr=o("rembert"),Fcr=o(" \u2014 "),ZU=a("a"),Tcr=o("RemBertForQuestionAnswering"),Mcr=o(" (RemBERT model)"),Ecr=l(),OF=a("li"),bve=a("strong"),Ccr=o("roberta"),wcr=o(" \u2014 "),eH=a("a"),Acr=o("RobertaForQuestionAnswering"),Lcr=o(" (RoBERTa model)"),ycr=l(),VF=a("li"),vve=a("strong"),xcr=o("roformer"),$cr=o(" \u2014 "),oH=a("a"),kcr=o("RoFormerForQuestionAnswering"),Scr=o(" (RoFormer model)"),Rcr=l(),XF=a("li"),Fve=a("strong"),Pcr=o("splinter"),Bcr=o(" \u2014 "),rH=a("a"),Icr=o("SplinterForQuestionAnswering"),Ncr=o(" (Splinter model)"),qcr=l(),zF=a("li"),Tve=a("strong"),jcr=o("squeezebert"),Dcr=o(" \u2014 "),tH=a("a"),Gcr=o("SqueezeBertForQuestionAnswering"),Ocr=o(" (SqueezeBERT model)"),Vcr=l(),WF=a("li"),Mve=a("strong"),Xcr=o("xlm"),zcr=o(" \u2014 "),aH=a("a"),Wcr=o("XLMForQuestionAnsweringSimple"),Qcr=o(" (XLM model)"),Ucr=l(),QF=a("li"),Eve=a("strong"),Hcr=o("xlm-roberta"),Jcr=o(" \u2014 "),nH=a("a"),Ycr=o("XLMRobertaForQuestionAnswering"),Kcr=o(" (XLM-RoBERTa model)"),Zcr=l(),UF=a("li"),Cve=a("strong"),efr=o("xlm-roberta-xl"),ofr=o(" \u2014 "),sH=a("a"),rfr=o("XLMRobertaXLForQuestionAnswering"),tfr=o(" (XLM-RoBERTa-XL model)"),afr=l(),HF=a("li"),wve=a("strong"),nfr=o("xlnet"),sfr=o(" \u2014 "),lH=a("a"),lfr=o("XLNetForQuestionAnsweringSimple"),ifr=o(" (XLNet model)"),dfr=l(),JF=a("li"),Ave=a("strong"),cfr=o("yoso"),ffr=o(" \u2014 "),iH=a("a"),mfr=o("YosoForQuestionAnswering"),gfr=o(" (YOSO model)"),hfr=l(),YF=a("p"),pfr=o("The model is set in evaluation mode by default using "),Lve=a("code"),_fr=o("model.eval()"),ufr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=a("code"),bfr=o("model.train()"),vfr=l(),F(KF.$$.fragment),MUe=l(),Bd=a("h2"),ZF=a("a"),xve=a("span"),F(B9.$$.fragment),Ffr=l(),$ve=a("span"),Tfr=o("AutoModelForTableQuestionAnswering"),EUe=l(),Vo=a("div"),F(I9.$$.fragment),Mfr=l(),Id=a("p"),Efr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dH=a("a"),Cfr=o("from_pretrained()"),wfr=o(" class method or the "),cH=a("a"),Afr=o("from_config()"),Lfr=o(` class
method.`),yfr=l(),N9=a("p"),xfr=o("This class cannot be instantiated directly using "),kve=a("code"),$fr=o("__init__()"),kfr=o(" (throws an error)."),Sfr=l(),Mt=a("div"),F(q9.$$.fragment),Rfr=l(),Sve=a("p"),Pfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Bfr=l(),Nd=a("p"),Ifr=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),Nfr=o("not"),qfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),jfr=o("from_pretrained()"),Dfr=o(" to load the model weights."),Gfr=l(),F(eT.$$.fragment),Ofr=l(),lo=a("div"),F(j9.$$.fragment),Vfr=l(),Pve=a("p"),Xfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zfr=l(),Za=a("p"),Wfr=o("The model class to instantiate is selected based on the "),Bve=a("code"),Qfr=o("model_type"),Ufr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),Hfr=o("pretrained_model_name_or_path"),Jfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),Yfr=o("pretrained_model_name_or_path"),Kfr=o(":"),Zfr=l(),qve=a("ul"),oT=a("li"),jve=a("strong"),emr=o("tapas"),omr=o(" \u2014 "),mH=a("a"),rmr=o("TapasForQuestionAnswering"),tmr=o(" (TAPAS model)"),amr=l(),rT=a("p"),nmr=o("The model is set in evaluation mode by default using "),Dve=a("code"),smr=o("model.eval()"),lmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gve=a("code"),imr=o("model.train()"),dmr=l(),F(tT.$$.fragment),CUe=l(),qd=a("h2"),aT=a("a"),Ove=a("span"),F(D9.$$.fragment),cmr=l(),Vve=a("span"),fmr=o("AutoModelForImageClassification"),wUe=l(),Xo=a("div"),F(G9.$$.fragment),mmr=l(),jd=a("p"),gmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gH=a("a"),hmr=o("from_pretrained()"),pmr=o(" class method or the "),hH=a("a"),_mr=o("from_config()"),umr=o(` class
method.`),bmr=l(),O9=a("p"),vmr=o("This class cannot be instantiated directly using "),Xve=a("code"),Fmr=o("__init__()"),Tmr=o(" (throws an error)."),Mmr=l(),Et=a("div"),F(V9.$$.fragment),Emr=l(),zve=a("p"),Cmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wmr=l(),Dd=a("p"),Amr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),Lmr=o("not"),ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),xmr=o("from_pretrained()"),$mr=o(" to load the model weights."),kmr=l(),F(nT.$$.fragment),Smr=l(),io=a("div"),F(X9.$$.fragment),Rmr=l(),Qve=a("p"),Pmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bmr=l(),en=a("p"),Imr=o("The model class to instantiate is selected based on the "),Uve=a("code"),Nmr=o("model_type"),qmr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),jmr=o("pretrained_model_name_or_path"),Dmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),Gmr=o("pretrained_model_name_or_path"),Omr=o(":"),Vmr=l(),be=a("ul"),sT=a("li"),Yve=a("strong"),Xmr=o("beit"),zmr=o(" \u2014 "),_H=a("a"),Wmr=o("BeitForImageClassification"),Qmr=o(" (BEiT model)"),Umr=l(),lT=a("li"),Kve=a("strong"),Hmr=o("convnext"),Jmr=o(" \u2014 "),uH=a("a"),Ymr=o("ConvNextForImageClassification"),Kmr=o(" (ConvNeXT model)"),Zmr=l(),iT=a("li"),Zve=a("strong"),egr=o("cvt"),ogr=o(" \u2014 "),bH=a("a"),rgr=o("CvtForImageClassification"),tgr=o(" (CvT model)"),agr=l(),dT=a("li"),e5e=a("strong"),ngr=o("data2vec-vision"),sgr=o(" \u2014 "),vH=a("a"),lgr=o("Data2VecVisionForImageClassification"),igr=o(" (Data2VecVision model)"),dgr=l(),dl=a("li"),o5e=a("strong"),cgr=o("deit"),fgr=o(" \u2014 "),FH=a("a"),mgr=o("DeiTForImageClassification"),ggr=o(" or "),TH=a("a"),hgr=o("DeiTForImageClassificationWithTeacher"),pgr=o(" (DeiT model)"),_gr=l(),cT=a("li"),r5e=a("strong"),ugr=o("imagegpt"),bgr=o(" \u2014 "),MH=a("a"),vgr=o("ImageGPTForImageClassification"),Fgr=o(" (ImageGPT model)"),Tgr=l(),cl=a("li"),t5e=a("strong"),Mgr=o("levit"),Egr=o(" \u2014 "),EH=a("a"),Cgr=o("LevitForImageClassification"),wgr=o(" or "),CH=a("a"),Agr=o("LevitForImageClassificationWithTeacher"),Lgr=o(" (LeViT model)"),ygr=l(),fT=a("li"),a5e=a("strong"),xgr=o("mobilevit"),$gr=o(" \u2014 "),wH=a("a"),kgr=o("MobileViTForImageClassification"),Sgr=o(" (MobileViT model)"),Rgr=l(),Ct=a("li"),n5e=a("strong"),Pgr=o("perceiver"),Bgr=o(" \u2014 "),AH=a("a"),Igr=o("PerceiverForImageClassificationLearned"),Ngr=o(" or "),LH=a("a"),qgr=o("PerceiverForImageClassificationFourier"),jgr=o(" or "),yH=a("a"),Dgr=o("PerceiverForImageClassificationConvProcessing"),Ggr=o(" (Perceiver model)"),Ogr=l(),mT=a("li"),s5e=a("strong"),Vgr=o("poolformer"),Xgr=o(" \u2014 "),xH=a("a"),zgr=o("PoolFormerForImageClassification"),Wgr=o(" (PoolFormer model)"),Qgr=l(),gT=a("li"),l5e=a("strong"),Ugr=o("regnet"),Hgr=o(" \u2014 "),$H=a("a"),Jgr=o("RegNetForImageClassification"),Ygr=o(" (RegNet model)"),Kgr=l(),hT=a("li"),i5e=a("strong"),Zgr=o("resnet"),ehr=o(" \u2014 "),kH=a("a"),ohr=o("ResNetForImageClassification"),rhr=o(" (ResNet model)"),thr=l(),pT=a("li"),d5e=a("strong"),ahr=o("segformer"),nhr=o(" \u2014 "),SH=a("a"),shr=o("SegformerForImageClassification"),lhr=o(" (SegFormer model)"),ihr=l(),_T=a("li"),c5e=a("strong"),dhr=o("swin"),chr=o(" \u2014 "),RH=a("a"),fhr=o("SwinForImageClassification"),mhr=o(" (Swin Transformer model)"),ghr=l(),uT=a("li"),f5e=a("strong"),hhr=o("swinv2"),phr=o(" \u2014 "),PH=a("a"),_hr=o("Swinv2ForImageClassification"),uhr=o(" (Swin Transformer V2 model)"),bhr=l(),bT=a("li"),m5e=a("strong"),vhr=o("van"),Fhr=o(" \u2014 "),BH=a("a"),Thr=o("VanForImageClassification"),Mhr=o(" (VAN model)"),Ehr=l(),vT=a("li"),g5e=a("strong"),Chr=o("vit"),whr=o(" \u2014 "),IH=a("a"),Ahr=o("ViTForImageClassification"),Lhr=o(" (ViT model)"),yhr=l(),FT=a("p"),xhr=o("The model is set in evaluation mode by default using "),h5e=a("code"),$hr=o("model.eval()"),khr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p5e=a("code"),Shr=o("model.train()"),Rhr=l(),F(TT.$$.fragment),AUe=l(),Gd=a("h2"),MT=a("a"),_5e=a("span"),F(z9.$$.fragment),Phr=l(),u5e=a("span"),Bhr=o("AutoModelForVideoClassification"),LUe=l(),zo=a("div"),F(W9.$$.fragment),Ihr=l(),Od=a("p"),Nhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),NH=a("a"),qhr=o("from_pretrained()"),jhr=o(" class method or the "),qH=a("a"),Dhr=o("from_config()"),Ghr=o(` class
method.`),Ohr=l(),Q9=a("p"),Vhr=o("This class cannot be instantiated directly using "),b5e=a("code"),Xhr=o("__init__()"),zhr=o(" (throws an error)."),Whr=l(),wt=a("div"),F(U9.$$.fragment),Qhr=l(),v5e=a("p"),Uhr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Hhr=l(),Vd=a("p"),Jhr=o(`Note:
Loading a model from its configuration file does `),F5e=a("strong"),Yhr=o("not"),Khr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),Zhr=o("from_pretrained()"),epr=o(" to load the model weights."),opr=l(),F(ET.$$.fragment),rpr=l(),co=a("div"),F(H9.$$.fragment),tpr=l(),T5e=a("p"),apr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),npr=l(),on=a("p"),spr=o("The model class to instantiate is selected based on the "),M5e=a("code"),lpr=o("model_type"),ipr=o(` property of the config object (either
passed as an argument or loaded from `),E5e=a("code"),dpr=o("pretrained_model_name_or_path"),cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(":"),gpr=l(),w5e=a("ul"),CT=a("li"),A5e=a("strong"),hpr=o("videomae"),ppr=o(" \u2014 "),DH=a("a"),_pr=o("VideoMAEForVideoClassification"),upr=o(" (VideoMAE model)"),bpr=l(),wT=a("p"),vpr=o("The model is set in evaluation mode by default using "),L5e=a("code"),Fpr=o("model.eval()"),Tpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y5e=a("code"),Mpr=o("model.train()"),Epr=l(),F(AT.$$.fragment),yUe=l(),Xd=a("h2"),LT=a("a"),x5e=a("span"),F(J9.$$.fragment),Cpr=l(),$5e=a("span"),wpr=o("AutoModelForVision2Seq"),xUe=l(),Wo=a("div"),F(Y9.$$.fragment),Apr=l(),zd=a("p"),Lpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GH=a("a"),ypr=o("from_pretrained()"),xpr=o(" class method or the "),OH=a("a"),$pr=o("from_config()"),kpr=o(` class
method.`),Spr=l(),K9=a("p"),Rpr=o("This class cannot be instantiated directly using "),k5e=a("code"),Ppr=o("__init__()"),Bpr=o(" (throws an error)."),Ipr=l(),At=a("div"),F(Z9.$$.fragment),Npr=l(),S5e=a("p"),qpr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jpr=l(),Wd=a("p"),Dpr=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),Gpr=o("not"),Opr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),Vpr=o("from_pretrained()"),Xpr=o(" to load the model weights."),zpr=l(),F(yT.$$.fragment),Wpr=l(),fo=a("div"),F(ex.$$.fragment),Qpr=l(),P5e=a("p"),Upr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hpr=l(),rn=a("p"),Jpr=o("The model class to instantiate is selected based on the "),B5e=a("code"),Ypr=o("model_type"),Kpr=o(` property of the config object (either
passed as an argument or loaded from `),I5e=a("code"),Zpr=o("pretrained_model_name_or_path"),e_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(":"),t_r=l(),q5e=a("ul"),xT=a("li"),j5e=a("strong"),a_r=o("vision-encoder-decoder"),n_r=o(" \u2014 "),XH=a("a"),s_r=o("VisionEncoderDecoderModel"),l_r=o(" (Vision Encoder decoder model)"),i_r=l(),$T=a("p"),d_r=o("The model is set in evaluation mode by default using "),D5e=a("code"),c_r=o("model.eval()"),f_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G5e=a("code"),m_r=o("model.train()"),g_r=l(),F(kT.$$.fragment),$Ue=l(),Qd=a("h2"),ST=a("a"),O5e=a("span"),F(ox.$$.fragment),h_r=l(),V5e=a("span"),p_r=o("AutoModelForVisualQuestionAnswering"),kUe=l(),Qo=a("div"),F(rx.$$.fragment),__r=l(),Ud=a("p"),u_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),zH=a("a"),b_r=o("from_pretrained()"),v_r=o(" class method or the "),WH=a("a"),F_r=o("from_config()"),T_r=o(` class
method.`),M_r=l(),tx=a("p"),E_r=o("This class cannot be instantiated directly using "),X5e=a("code"),C_r=o("__init__()"),w_r=o(" (throws an error)."),A_r=l(),Lt=a("div"),F(ax.$$.fragment),L_r=l(),z5e=a("p"),y_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),x_r=l(),Hd=a("p"),$_r=o(`Note:
Loading a model from its configuration file does `),W5e=a("strong"),k_r=o("not"),S_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),R_r=o("from_pretrained()"),P_r=o(" to load the model weights."),B_r=l(),F(RT.$$.fragment),I_r=l(),mo=a("div"),F(nx.$$.fragment),N_r=l(),Q5e=a("p"),q_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),j_r=l(),tn=a("p"),D_r=o("The model class to instantiate is selected based on the "),U5e=a("code"),G_r=o("model_type"),O_r=o(` property of the config object (either
passed as an argument or loaded from `),H5e=a("code"),V_r=o("pretrained_model_name_or_path"),X_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=a("code"),z_r=o("pretrained_model_name_or_path"),W_r=o(":"),Q_r=l(),Y5e=a("ul"),PT=a("li"),K5e=a("strong"),U_r=o("vilt"),H_r=o(" \u2014 "),UH=a("a"),J_r=o("ViltForQuestionAnswering"),Y_r=o(" (ViLT model)"),K_r=l(),BT=a("p"),Z_r=o("The model is set in evaluation mode by default using "),Z5e=a("code"),eur=o("model.eval()"),our=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eFe=a("code"),rur=o("model.train()"),tur=l(),F(IT.$$.fragment),SUe=l(),Jd=a("h2"),NT=a("a"),oFe=a("span"),F(sx.$$.fragment),aur=l(),rFe=a("span"),nur=o("AutoModelForAudioClassification"),RUe=l(),Uo=a("div"),F(lx.$$.fragment),sur=l(),Yd=a("p"),lur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HH=a("a"),iur=o("from_pretrained()"),dur=o(" class method or the "),JH=a("a"),cur=o("from_config()"),fur=o(` class
method.`),mur=l(),ix=a("p"),gur=o("This class cannot be instantiated directly using "),tFe=a("code"),hur=o("__init__()"),pur=o(" (throws an error)."),_ur=l(),yt=a("div"),F(dx.$$.fragment),uur=l(),aFe=a("p"),bur=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),vur=l(),Kd=a("p"),Fur=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),Tur=o("not"),Mur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),Eur=o("from_pretrained()"),Cur=o(" to load the model weights."),wur=l(),F(qT.$$.fragment),Aur=l(),go=a("div"),F(cx.$$.fragment),Lur=l(),sFe=a("p"),yur=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xur=l(),an=a("p"),$ur=o("The model class to instantiate is selected based on the "),lFe=a("code"),kur=o("model_type"),Sur=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),Rur=o("pretrained_model_name_or_path"),Pur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),Bur=o("pretrained_model_name_or_path"),Iur=o(":"),Nur=l(),Pe=a("ul"),jT=a("li"),cFe=a("strong"),qur=o("data2vec-audio"),jur=o(" \u2014 "),KH=a("a"),Dur=o("Data2VecAudioForSequenceClassification"),Gur=o(" (Data2VecAudio model)"),Our=l(),DT=a("li"),fFe=a("strong"),Vur=o("hubert"),Xur=o(" \u2014 "),ZH=a("a"),zur=o("HubertForSequenceClassification"),Wur=o(" (Hubert model)"),Qur=l(),GT=a("li"),mFe=a("strong"),Uur=o("sew"),Hur=o(" \u2014 "),eJ=a("a"),Jur=o("SEWForSequenceClassification"),Yur=o(" (SEW model)"),Kur=l(),OT=a("li"),gFe=a("strong"),Zur=o("sew-d"),e2r=o(" \u2014 "),oJ=a("a"),o2r=o("SEWDForSequenceClassification"),r2r=o(" (SEW-D model)"),t2r=l(),VT=a("li"),hFe=a("strong"),a2r=o("unispeech"),n2r=o(" \u2014 "),rJ=a("a"),s2r=o("UniSpeechForSequenceClassification"),l2r=o(" (UniSpeech model)"),i2r=l(),XT=a("li"),pFe=a("strong"),d2r=o("unispeech-sat"),c2r=o(" \u2014 "),tJ=a("a"),f2r=o("UniSpeechSatForSequenceClassification"),m2r=o(" (UniSpeechSat model)"),g2r=l(),zT=a("li"),_Fe=a("strong"),h2r=o("wav2vec2"),p2r=o(" \u2014 "),aJ=a("a"),_2r=o("Wav2Vec2ForSequenceClassification"),u2r=o(" (Wav2Vec2 model)"),b2r=l(),WT=a("li"),uFe=a("strong"),v2r=o("wav2vec2-conformer"),F2r=o(" \u2014 "),nJ=a("a"),T2r=o("Wav2Vec2ConformerForSequenceClassification"),M2r=o(" (Wav2Vec2-Conformer model)"),E2r=l(),QT=a("li"),bFe=a("strong"),C2r=o("wavlm"),w2r=o(" \u2014 "),sJ=a("a"),A2r=o("WavLMForSequenceClassification"),L2r=o(" (WavLM model)"),y2r=l(),UT=a("p"),x2r=o("The model is set in evaluation mode by default using "),vFe=a("code"),$2r=o("model.eval()"),k2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=a("code"),S2r=o("model.train()"),R2r=l(),F(HT.$$.fragment),PUe=l(),Zd=a("h2"),JT=a("a"),TFe=a("span"),F(fx.$$.fragment),P2r=l(),MFe=a("span"),B2r=o("AutoModelForAudioFrameClassification"),BUe=l(),Ho=a("div"),F(mx.$$.fragment),I2r=l(),ec=a("p"),N2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),lJ=a("a"),q2r=o("from_pretrained()"),j2r=o(" class method or the "),iJ=a("a"),D2r=o("from_config()"),G2r=o(` class
method.`),O2r=l(),gx=a("p"),V2r=o("This class cannot be instantiated directly using "),EFe=a("code"),X2r=o("__init__()"),z2r=o(" (throws an error)."),W2r=l(),xt=a("div"),F(hx.$$.fragment),Q2r=l(),CFe=a("p"),U2r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),H2r=l(),oc=a("p"),J2r=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),Y2r=o("not"),K2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),Z2r=o("from_pretrained()"),e1r=o(" to load the model weights."),o1r=l(),F(YT.$$.fragment),r1r=l(),ho=a("div"),F(px.$$.fragment),t1r=l(),AFe=a("p"),a1r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),n1r=l(),nn=a("p"),s1r=o("The model class to instantiate is selected based on the "),LFe=a("code"),l1r=o("model_type"),i1r=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),d1r=o("pretrained_model_name_or_path"),c1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),f1r=o("pretrained_model_name_or_path"),m1r=o(":"),g1r=l(),st=a("ul"),KT=a("li"),$Fe=a("strong"),h1r=o("data2vec-audio"),p1r=o(" \u2014 "),cJ=a("a"),_1r=o("Data2VecAudioForAudioFrameClassification"),u1r=o(" (Data2VecAudio model)"),b1r=l(),ZT=a("li"),kFe=a("strong"),v1r=o("unispeech-sat"),F1r=o(" \u2014 "),fJ=a("a"),T1r=o("UniSpeechSatForAudioFrameClassification"),M1r=o(" (UniSpeechSat model)"),E1r=l(),e7=a("li"),SFe=a("strong"),C1r=o("wav2vec2"),w1r=o(" \u2014 "),mJ=a("a"),A1r=o("Wav2Vec2ForAudioFrameClassification"),L1r=o(" (Wav2Vec2 model)"),y1r=l(),o7=a("li"),RFe=a("strong"),x1r=o("wav2vec2-conformer"),$1r=o(" \u2014 "),gJ=a("a"),k1r=o("Wav2Vec2ConformerForAudioFrameClassification"),S1r=o(" (Wav2Vec2-Conformer model)"),R1r=l(),r7=a("li"),PFe=a("strong"),P1r=o("wavlm"),B1r=o(" \u2014 "),hJ=a("a"),I1r=o("WavLMForAudioFrameClassification"),N1r=o(" (WavLM model)"),q1r=l(),t7=a("p"),j1r=o("The model is set in evaluation mode by default using "),BFe=a("code"),D1r=o("model.eval()"),G1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=a("code"),O1r=o("model.train()"),V1r=l(),F(a7.$$.fragment),IUe=l(),rc=a("h2"),n7=a("a"),NFe=a("span"),F(_x.$$.fragment),X1r=l(),qFe=a("span"),z1r=o("AutoModelForCTC"),NUe=l(),Jo=a("div"),F(ux.$$.fragment),W1r=l(),tc=a("p"),Q1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pJ=a("a"),U1r=o("from_pretrained()"),H1r=o(" class method or the "),_J=a("a"),J1r=o("from_config()"),Y1r=o(` class
method.`),K1r=l(),bx=a("p"),Z1r=o("This class cannot be instantiated directly using "),jFe=a("code"),e4r=o("__init__()"),o4r=o(" (throws an error)."),r4r=l(),$t=a("div"),F(vx.$$.fragment),t4r=l(),DFe=a("p"),a4r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),n4r=l(),ac=a("p"),s4r=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),l4r=o("not"),i4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),d4r=o("from_pretrained()"),c4r=o(" to load the model weights."),f4r=l(),F(s7.$$.fragment),m4r=l(),po=a("div"),F(Fx.$$.fragment),g4r=l(),OFe=a("p"),h4r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),p4r=l(),sn=a("p"),_4r=o("The model class to instantiate is selected based on the "),VFe=a("code"),u4r=o("model_type"),b4r=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),v4r=o("pretrained_model_name_or_path"),F4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),T4r=o("pretrained_model_name_or_path"),M4r=o(":"),E4r=l(),Le=a("ul"),l7=a("li"),WFe=a("strong"),C4r=o("data2vec-audio"),w4r=o(" \u2014 "),bJ=a("a"),A4r=o("Data2VecAudioForCTC"),L4r=o(" (Data2VecAudio model)"),y4r=l(),i7=a("li"),QFe=a("strong"),x4r=o("hubert"),$4r=o(" \u2014 "),vJ=a("a"),k4r=o("HubertForCTC"),S4r=o(" (Hubert model)"),R4r=l(),d7=a("li"),UFe=a("strong"),P4r=o("mctct"),B4r=o(" \u2014 "),FJ=a("a"),I4r=o("MCTCTForCTC"),N4r=o(" (M-CTC-T model)"),q4r=l(),c7=a("li"),HFe=a("strong"),j4r=o("sew"),D4r=o(" \u2014 "),TJ=a("a"),G4r=o("SEWForCTC"),O4r=o(" (SEW model)"),V4r=l(),f7=a("li"),JFe=a("strong"),X4r=o("sew-d"),z4r=o(" \u2014 "),MJ=a("a"),W4r=o("SEWDForCTC"),Q4r=o(" (SEW-D model)"),U4r=l(),m7=a("li"),YFe=a("strong"),H4r=o("unispeech"),J4r=o(" \u2014 "),EJ=a("a"),Y4r=o("UniSpeechForCTC"),K4r=o(" (UniSpeech model)"),Z4r=l(),g7=a("li"),KFe=a("strong"),ebr=o("unispeech-sat"),obr=o(" \u2014 "),CJ=a("a"),rbr=o("UniSpeechSatForCTC"),tbr=o(" (UniSpeechSat model)"),abr=l(),h7=a("li"),ZFe=a("strong"),nbr=o("wav2vec2"),sbr=o(" \u2014 "),wJ=a("a"),lbr=o("Wav2Vec2ForCTC"),ibr=o(" (Wav2Vec2 model)"),dbr=l(),p7=a("li"),eTe=a("strong"),cbr=o("wav2vec2-conformer"),fbr=o(" \u2014 "),AJ=a("a"),mbr=o("Wav2Vec2ConformerForCTC"),gbr=o(" (Wav2Vec2-Conformer model)"),hbr=l(),_7=a("li"),oTe=a("strong"),pbr=o("wavlm"),_br=o(" \u2014 "),LJ=a("a"),ubr=o("WavLMForCTC"),bbr=o(" (WavLM model)"),vbr=l(),u7=a("p"),Fbr=o("The model is set in evaluation mode by default using "),rTe=a("code"),Tbr=o("model.eval()"),Mbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tTe=a("code"),Ebr=o("model.train()"),Cbr=l(),F(b7.$$.fragment),qUe=l(),nc=a("h2"),v7=a("a"),aTe=a("span"),F(Tx.$$.fragment),wbr=l(),nTe=a("span"),Abr=o("AutoModelForSpeechSeq2Seq"),jUe=l(),Yo=a("div"),F(Mx.$$.fragment),Lbr=l(),sc=a("p"),ybr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yJ=a("a"),xbr=o("from_pretrained()"),$br=o(" class method or the "),xJ=a("a"),kbr=o("from_config()"),Sbr=o(` class
method.`),Rbr=l(),Ex=a("p"),Pbr=o("This class cannot be instantiated directly using "),sTe=a("code"),Bbr=o("__init__()"),Ibr=o(" (throws an error)."),Nbr=l(),kt=a("div"),F(Cx.$$.fragment),qbr=l(),lTe=a("p"),jbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dbr=l(),lc=a("p"),Gbr=o(`Note:
Loading a model from its configuration file does `),iTe=a("strong"),Obr=o("not"),Vbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),Xbr=o("from_pretrained()"),zbr=o(" to load the model weights."),Wbr=l(),F(F7.$$.fragment),Qbr=l(),_o=a("div"),F(wx.$$.fragment),Ubr=l(),dTe=a("p"),Hbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Jbr=l(),ln=a("p"),Ybr=o("The model class to instantiate is selected based on the "),cTe=a("code"),Kbr=o("model_type"),Zbr=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),rvr=o("pretrained_model_name_or_path"),tvr=o(":"),avr=l(),Ax=a("ul"),T7=a("li"),gTe=a("strong"),nvr=o("speech-encoder-decoder"),svr=o(" \u2014 "),kJ=a("a"),lvr=o("SpeechEncoderDecoderModel"),ivr=o(" (Speech Encoder decoder model)"),dvr=l(),M7=a("li"),hTe=a("strong"),cvr=o("speech_to_text"),fvr=o(" \u2014 "),SJ=a("a"),mvr=o("Speech2TextForConditionalGeneration"),gvr=o(" (Speech2Text model)"),hvr=l(),E7=a("p"),pvr=o("The model is set in evaluation mode by default using "),pTe=a("code"),_vr=o("model.eval()"),uvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Te=a("code"),bvr=o("model.train()"),vvr=l(),F(C7.$$.fragment),DUe=l(),ic=a("h2"),w7=a("a"),uTe=a("span"),F(Lx.$$.fragment),Fvr=l(),bTe=a("span"),Tvr=o("AutoModelForAudioXVector"),GUe=l(),Ko=a("div"),F(yx.$$.fragment),Mvr=l(),dc=a("p"),Evr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RJ=a("a"),Cvr=o("from_pretrained()"),wvr=o(" class method or the "),PJ=a("a"),Avr=o("from_config()"),Lvr=o(` class
method.`),yvr=l(),xx=a("p"),xvr=o("This class cannot be instantiated directly using "),vTe=a("code"),$vr=o("__init__()"),kvr=o(" (throws an error)."),Svr=l(),St=a("div"),F($x.$$.fragment),Rvr=l(),FTe=a("p"),Pvr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Bvr=l(),cc=a("p"),Ivr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),Nvr=o("not"),qvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),jvr=o("from_pretrained()"),Dvr=o(" to load the model weights."),Gvr=l(),F(A7.$$.fragment),Ovr=l(),uo=a("div"),F(kx.$$.fragment),Vvr=l(),MTe=a("p"),Xvr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),zvr=l(),dn=a("p"),Wvr=o("The model class to instantiate is selected based on the "),ETe=a("code"),Qvr=o("model_type"),Uvr=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),Hvr=o("pretrained_model_name_or_path"),Jvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),Yvr=o("pretrained_model_name_or_path"),Kvr=o(":"),Zvr=l(),lt=a("ul"),L7=a("li"),ATe=a("strong"),e5r=o("data2vec-audio"),o5r=o(" \u2014 "),IJ=a("a"),r5r=o("Data2VecAudioForXVector"),t5r=o(" (Data2VecAudio model)"),a5r=l(),y7=a("li"),LTe=a("strong"),n5r=o("unispeech-sat"),s5r=o(" \u2014 "),NJ=a("a"),l5r=o("UniSpeechSatForXVector"),i5r=o(" (UniSpeechSat model)"),d5r=l(),x7=a("li"),yTe=a("strong"),c5r=o("wav2vec2"),f5r=o(" \u2014 "),qJ=a("a"),m5r=o("Wav2Vec2ForXVector"),g5r=o(" (Wav2Vec2 model)"),h5r=l(),$7=a("li"),xTe=a("strong"),p5r=o("wav2vec2-conformer"),_5r=o(" \u2014 "),jJ=a("a"),u5r=o("Wav2Vec2ConformerForXVector"),b5r=o(" (Wav2Vec2-Conformer model)"),v5r=l(),k7=a("li"),$Te=a("strong"),F5r=o("wavlm"),T5r=o(" \u2014 "),DJ=a("a"),M5r=o("WavLMForXVector"),E5r=o(" (WavLM model)"),C5r=l(),S7=a("p"),w5r=o("The model is set in evaluation mode by default using "),kTe=a("code"),A5r=o("model.eval()"),L5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),STe=a("code"),y5r=o("model.train()"),x5r=l(),F(R7.$$.fragment),OUe=l(),fc=a("h2"),P7=a("a"),RTe=a("span"),F(Sx.$$.fragment),$5r=l(),PTe=a("span"),k5r=o("AutoModelForMaskedImageModeling"),VUe=l(),Zo=a("div"),F(Rx.$$.fragment),S5r=l(),mc=a("p"),R5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),GJ=a("a"),P5r=o("from_pretrained()"),B5r=o(" class method or the "),OJ=a("a"),I5r=o("from_config()"),N5r=o(` class
method.`),q5r=l(),Px=a("p"),j5r=o("This class cannot be instantiated directly using "),BTe=a("code"),D5r=o("__init__()"),G5r=o(" (throws an error)."),O5r=l(),Rt=a("div"),F(Bx.$$.fragment),V5r=l(),ITe=a("p"),X5r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),z5r=l(),gc=a("p"),W5r=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),Q5r=o("not"),U5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),H5r=o("from_pretrained()"),J5r=o(" to load the model weights."),Y5r=l(),F(B7.$$.fragment),K5r=l(),bo=a("div"),F(Ix.$$.fragment),Z5r=l(),qTe=a("p"),eFr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),oFr=l(),cn=a("p"),rFr=o("The model class to instantiate is selected based on the "),jTe=a("code"),tFr=o("model_type"),aFr=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),nFr=o("pretrained_model_name_or_path"),sFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),lFr=o("pretrained_model_name_or_path"),iFr=o(":"),dFr=l(),fn=a("ul"),I7=a("li"),OTe=a("strong"),cFr=o("deit"),fFr=o(" \u2014 "),XJ=a("a"),mFr=o("DeiTForMaskedImageModeling"),gFr=o(" (DeiT model)"),hFr=l(),N7=a("li"),VTe=a("strong"),pFr=o("swin"),_Fr=o(" \u2014 "),zJ=a("a"),uFr=o("SwinForMaskedImageModeling"),bFr=o(" (Swin Transformer model)"),vFr=l(),q7=a("li"),XTe=a("strong"),FFr=o("swinv2"),TFr=o(" \u2014 "),WJ=a("a"),MFr=o("Swinv2ForMaskedImageModeling"),EFr=o(" (Swin Transformer V2 model)"),CFr=l(),j7=a("li"),zTe=a("strong"),wFr=o("vit"),AFr=o(" \u2014 "),QJ=a("a"),LFr=o("ViTForMaskedImageModeling"),yFr=o(" (ViT model)"),xFr=l(),D7=a("p"),$Fr=o("The model is set in evaluation mode by default using "),WTe=a("code"),kFr=o("model.eval()"),SFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QTe=a("code"),RFr=o("model.train()"),PFr=l(),F(G7.$$.fragment),XUe=l(),hc=a("h2"),O7=a("a"),UTe=a("span"),F(Nx.$$.fragment),BFr=l(),HTe=a("span"),IFr=o("AutoModelForObjectDetection"),zUe=l(),er=a("div"),F(qx.$$.fragment),NFr=l(),pc=a("p"),qFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),UJ=a("a"),jFr=o("from_pretrained()"),DFr=o(" class method or the "),HJ=a("a"),GFr=o("from_config()"),OFr=o(` class
method.`),VFr=l(),jx=a("p"),XFr=o("This class cannot be instantiated directly using "),JTe=a("code"),zFr=o("__init__()"),WFr=o(" (throws an error)."),QFr=l(),Pt=a("div"),F(Dx.$$.fragment),UFr=l(),YTe=a("p"),HFr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),JFr=l(),_c=a("p"),YFr=o(`Note:
Loading a model from its configuration file does `),KTe=a("strong"),KFr=o("not"),ZFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),eTr=o("from_pretrained()"),oTr=o(" to load the model weights."),rTr=l(),F(V7.$$.fragment),tTr=l(),vo=a("div"),F(Gx.$$.fragment),aTr=l(),ZTe=a("p"),nTr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sTr=l(),mn=a("p"),lTr=o("The model class to instantiate is selected based on the "),e7e=a("code"),iTr=o("model_type"),dTr=o(` property of the config object (either
passed as an argument or loaded from `),o7e=a("code"),cTr=o("pretrained_model_name_or_path"),fTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=a("code"),mTr=o("pretrained_model_name_or_path"),gTr=o(":"),hTr=l(),Ox=a("ul"),X7=a("li"),t7e=a("strong"),pTr=o("detr"),_Tr=o(" \u2014 "),YJ=a("a"),uTr=o("DetrForObjectDetection"),bTr=o(" (DETR model)"),vTr=l(),z7=a("li"),a7e=a("strong"),FTr=o("yolos"),TTr=o(" \u2014 "),KJ=a("a"),MTr=o("YolosForObjectDetection"),ETr=o(" (YOLOS model)"),CTr=l(),W7=a("p"),wTr=o("The model is set in evaluation mode by default using "),n7e=a("code"),ATr=o("model.eval()"),LTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s7e=a("code"),yTr=o("model.train()"),xTr=l(),F(Q7.$$.fragment),WUe=l(),uc=a("h2"),U7=a("a"),l7e=a("span"),F(Vx.$$.fragment),$Tr=l(),i7e=a("span"),kTr=o("AutoModelForImageSegmentation"),QUe=l(),or=a("div"),F(Xx.$$.fragment),STr=l(),bc=a("p"),RTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZJ=a("a"),PTr=o("from_pretrained()"),BTr=o(" class method or the "),eY=a("a"),ITr=o("from_config()"),NTr=o(` class
method.`),qTr=l(),zx=a("p"),jTr=o("This class cannot be instantiated directly using "),d7e=a("code"),DTr=o("__init__()"),GTr=o(" (throws an error)."),OTr=l(),Bt=a("div"),F(Wx.$$.fragment),VTr=l(),c7e=a("p"),XTr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),zTr=l(),vc=a("p"),WTr=o(`Note:
Loading a model from its configuration file does `),f7e=a("strong"),QTr=o("not"),UTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),HTr=o("from_pretrained()"),JTr=o(" to load the model weights."),YTr=l(),F(H7.$$.fragment),KTr=l(),Fo=a("div"),F(Qx.$$.fragment),ZTr=l(),m7e=a("p"),e7r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),o7r=l(),gn=a("p"),r7r=o("The model class to instantiate is selected based on the "),g7e=a("code"),t7r=o("model_type"),a7r=o(` property of the config object (either
passed as an argument or loaded from `),h7e=a("code"),n7r=o("pretrained_model_name_or_path"),s7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=a("code"),l7r=o("pretrained_model_name_or_path"),i7r=o(":"),d7r=l(),_7e=a("ul"),J7=a("li"),u7e=a("strong"),c7r=o("detr"),f7r=o(" \u2014 "),rY=a("a"),m7r=o("DetrForSegmentation"),g7r=o(" (DETR model)"),h7r=l(),Y7=a("p"),p7r=o("The model is set in evaluation mode by default using "),b7e=a("code"),_7r=o("model.eval()"),u7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v7e=a("code"),b7r=o("model.train()"),v7r=l(),F(K7.$$.fragment),UUe=l(),Fc=a("h2"),Z7=a("a"),F7e=a("span"),F(Ux.$$.fragment),F7r=l(),T7e=a("span"),T7r=o("AutoModelForSemanticSegmentation"),HUe=l(),rr=a("div"),F(Hx.$$.fragment),M7r=l(),Tc=a("p"),E7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tY=a("a"),C7r=o("from_pretrained()"),w7r=o(" class method or the "),aY=a("a"),A7r=o("from_config()"),L7r=o(` class
method.`),y7r=l(),Jx=a("p"),x7r=o("This class cannot be instantiated directly using "),M7e=a("code"),$7r=o("__init__()"),k7r=o(" (throws an error)."),S7r=l(),It=a("div"),F(Yx.$$.fragment),R7r=l(),E7e=a("p"),P7r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),B7r=l(),Mc=a("p"),I7r=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),N7r=o("not"),q7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),j7r=o("from_pretrained()"),D7r=o(" to load the model weights."),G7r=l(),F(eM.$$.fragment),O7r=l(),To=a("div"),F(Kx.$$.fragment),V7r=l(),w7e=a("p"),X7r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),z7r=l(),hn=a("p"),W7r=o("The model class to instantiate is selected based on the "),A7e=a("code"),Q7r=o("model_type"),U7r=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),H7r=o("pretrained_model_name_or_path"),J7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),Y7r=o("pretrained_model_name_or_path"),K7r=o(":"),Z7r=l(),it=a("ul"),oM=a("li"),x7e=a("strong"),eMr=o("beit"),oMr=o(" \u2014 "),sY=a("a"),rMr=o("BeitForSemanticSegmentation"),tMr=o(" (BEiT model)"),aMr=l(),rM=a("li"),$7e=a("strong"),nMr=o("data2vec-vision"),sMr=o(" \u2014 "),lY=a("a"),lMr=o("Data2VecVisionForSemanticSegmentation"),iMr=o(" (Data2VecVision model)"),dMr=l(),tM=a("li"),k7e=a("strong"),cMr=o("dpt"),fMr=o(" \u2014 "),iY=a("a"),mMr=o("DPTForSemanticSegmentation"),gMr=o(" (DPT model)"),hMr=l(),aM=a("li"),S7e=a("strong"),pMr=o("mobilevit"),_Mr=o(" \u2014 "),dY=a("a"),uMr=o("MobileViTForSemanticSegmentation"),bMr=o(" (MobileViT model)"),vMr=l(),nM=a("li"),R7e=a("strong"),FMr=o("segformer"),TMr=o(" \u2014 "),cY=a("a"),MMr=o("SegformerForSemanticSegmentation"),EMr=o(" (SegFormer model)"),CMr=l(),sM=a("p"),wMr=o("The model is set in evaluation mode by default using "),P7e=a("code"),AMr=o("model.eval()"),LMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B7e=a("code"),yMr=o("model.train()"),xMr=l(),F(lM.$$.fragment),JUe=l(),Ec=a("h2"),iM=a("a"),I7e=a("span"),F(Zx.$$.fragment),$Mr=l(),N7e=a("span"),kMr=o("AutoModelForInstanceSegmentation"),YUe=l(),tr=a("div"),F(e$.$$.fragment),SMr=l(),Cc=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fY=a("a"),PMr=o("from_pretrained()"),BMr=o(" class method or the "),mY=a("a"),IMr=o("from_config()"),NMr=o(` class
method.`),qMr=l(),o$=a("p"),jMr=o("This class cannot be instantiated directly using "),q7e=a("code"),DMr=o("__init__()"),GMr=o(" (throws an error)."),OMr=l(),Nt=a("div"),F(r$.$$.fragment),VMr=l(),j7e=a("p"),XMr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zMr=l(),wc=a("p"),WMr=o(`Note:
Loading a model from its configuration file does `),D7e=a("strong"),QMr=o("not"),UMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),HMr=o("from_pretrained()"),JMr=o(" to load the model weights."),YMr=l(),F(dM.$$.fragment),KMr=l(),Mo=a("div"),F(t$.$$.fragment),ZMr=l(),G7e=a("p"),eEr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),oEr=l(),pn=a("p"),rEr=o("The model class to instantiate is selected based on the "),O7e=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),V7e=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),z7e=a("ul"),cM=a("li"),W7e=a("strong"),cEr=o("maskformer"),fEr=o(" \u2014 "),hY=a("a"),mEr=o("MaskFormerForInstanceSegmentation"),gEr=o(" (MaskFormer model)"),hEr=l(),fM=a("p"),pEr=o("The model is set in evaluation mode by default using "),Q7e=a("code"),_Er=o("model.eval()"),uEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U7e=a("code"),bEr=o("model.train()"),vEr=l(),F(mM.$$.fragment),KUe=l(),Ac=a("h2"),gM=a("a"),H7e=a("span"),F(a$.$$.fragment),FEr=l(),J7e=a("span"),TEr=o("TFAutoModel"),ZUe=l(),ar=a("div"),F(n$.$$.fragment),MEr=l(),Lc=a("p"),EEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pY=a("a"),CEr=o("from_pretrained()"),wEr=o(" class method or the "),_Y=a("a"),AEr=o("from_config()"),LEr=o(` class
method.`),yEr=l(),s$=a("p"),xEr=o("This class cannot be instantiated directly using "),Y7e=a("code"),$Er=o("__init__()"),kEr=o(" (throws an error)."),SEr=l(),qt=a("div"),F(l$.$$.fragment),REr=l(),K7e=a("p"),PEr=o("Instantiates one of the base model classes of the library from a configuration."),BEr=l(),yc=a("p"),IEr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),NEr=o("not"),qEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),jEr=o("from_pretrained()"),DEr=o(" to load the model weights."),GEr=l(),F(hM.$$.fragment),OEr=l(),Rr=a("div"),F(i$.$$.fragment),VEr=l(),eMe=a("p"),XEr=o("Instantiate one of the base model classes of the library from a pretrained model."),zEr=l(),_n=a("p"),WEr=o("The model class to instantiate is selected based on the "),oMe=a("code"),QEr=o("model_type"),UEr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),HEr=o("pretrained_model_name_or_path"),JEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),YEr=o("pretrained_model_name_or_path"),KEr=o(":"),ZEr=l(),q=a("ul"),pM=a("li"),aMe=a("strong"),eCr=o("albert"),oCr=o(" \u2014 "),bY=a("a"),rCr=o("TFAlbertModel"),tCr=o(" (ALBERT model)"),aCr=l(),_M=a("li"),nMe=a("strong"),nCr=o("bart"),sCr=o(" \u2014 "),vY=a("a"),lCr=o("TFBartModel"),iCr=o(" (BART model)"),dCr=l(),uM=a("li"),sMe=a("strong"),cCr=o("bert"),fCr=o(" \u2014 "),FY=a("a"),mCr=o("TFBertModel"),gCr=o(" (BERT model)"),hCr=l(),bM=a("li"),lMe=a("strong"),pCr=o("blenderbot"),_Cr=o(" \u2014 "),TY=a("a"),uCr=o("TFBlenderbotModel"),bCr=o(" (Blenderbot model)"),vCr=l(),vM=a("li"),iMe=a("strong"),FCr=o("blenderbot-small"),TCr=o(" \u2014 "),MY=a("a"),MCr=o("TFBlenderbotSmallModel"),ECr=o(" (BlenderbotSmall model)"),CCr=l(),FM=a("li"),dMe=a("strong"),wCr=o("camembert"),ACr=o(" \u2014 "),EY=a("a"),LCr=o("TFCamembertModel"),yCr=o(" (CamemBERT model)"),xCr=l(),TM=a("li"),cMe=a("strong"),$Cr=o("clip"),kCr=o(" \u2014 "),CY=a("a"),SCr=o("TFCLIPModel"),RCr=o(" (CLIP model)"),PCr=l(),MM=a("li"),fMe=a("strong"),BCr=o("convbert"),ICr=o(" \u2014 "),wY=a("a"),NCr=o("TFConvBertModel"),qCr=o(" (ConvBERT model)"),jCr=l(),EM=a("li"),mMe=a("strong"),DCr=o("convnext"),GCr=o(" \u2014 "),AY=a("a"),OCr=o("TFConvNextModel"),VCr=o(" (ConvNeXT model)"),XCr=l(),CM=a("li"),gMe=a("strong"),zCr=o("ctrl"),WCr=o(" \u2014 "),LY=a("a"),QCr=o("TFCTRLModel"),UCr=o(" (CTRL model)"),HCr=l(),wM=a("li"),hMe=a("strong"),JCr=o("data2vec-vision"),YCr=o(" \u2014 "),yY=a("a"),KCr=o("TFData2VecVisionModel"),ZCr=o(" (Data2VecVision model)"),e3r=l(),AM=a("li"),pMe=a("strong"),o3r=o("deberta"),r3r=o(" \u2014 "),xY=a("a"),t3r=o("TFDebertaModel"),a3r=o(" (DeBERTa model)"),n3r=l(),LM=a("li"),_Me=a("strong"),s3r=o("deberta-v2"),l3r=o(" \u2014 "),$Y=a("a"),i3r=o("TFDebertaV2Model"),d3r=o(" (DeBERTa-v2 model)"),c3r=l(),yM=a("li"),uMe=a("strong"),f3r=o("deit"),m3r=o(" \u2014 "),kY=a("a"),g3r=o("TFDeiTModel"),h3r=o(" (DeiT model)"),p3r=l(),xM=a("li"),bMe=a("strong"),_3r=o("distilbert"),u3r=o(" \u2014 "),SY=a("a"),b3r=o("TFDistilBertModel"),v3r=o(" (DistilBERT model)"),F3r=l(),$M=a("li"),vMe=a("strong"),T3r=o("dpr"),M3r=o(" \u2014 "),RY=a("a"),E3r=o("TFDPRQuestionEncoder"),C3r=o(" (DPR model)"),w3r=l(),kM=a("li"),FMe=a("strong"),A3r=o("electra"),L3r=o(" \u2014 "),PY=a("a"),y3r=o("TFElectraModel"),x3r=o(" (ELECTRA model)"),$3r=l(),SM=a("li"),TMe=a("strong"),k3r=o("flaubert"),S3r=o(" \u2014 "),BY=a("a"),R3r=o("TFFlaubertModel"),P3r=o(" (FlauBERT model)"),B3r=l(),fl=a("li"),MMe=a("strong"),I3r=o("funnel"),N3r=o(" \u2014 "),IY=a("a"),q3r=o("TFFunnelModel"),j3r=o(" or "),NY=a("a"),D3r=o("TFFunnelBaseModel"),G3r=o(" (Funnel Transformer model)"),O3r=l(),RM=a("li"),EMe=a("strong"),V3r=o("gpt2"),X3r=o(" \u2014 "),qY=a("a"),z3r=o("TFGPT2Model"),W3r=o(" (OpenAI GPT-2 model)"),Q3r=l(),PM=a("li"),CMe=a("strong"),U3r=o("gptj"),H3r=o(" \u2014 "),jY=a("a"),J3r=o("TFGPTJModel"),Y3r=o(" (GPT-J model)"),K3r=l(),BM=a("li"),wMe=a("strong"),Z3r=o("hubert"),e0r=o(" \u2014 "),DY=a("a"),o0r=o("TFHubertModel"),r0r=o(" (Hubert model)"),t0r=l(),IM=a("li"),AMe=a("strong"),a0r=o("layoutlm"),n0r=o(" \u2014 "),GY=a("a"),s0r=o("TFLayoutLMModel"),l0r=o(" (LayoutLM model)"),i0r=l(),NM=a("li"),LMe=a("strong"),d0r=o("led"),c0r=o(" \u2014 "),OY=a("a"),f0r=o("TFLEDModel"),m0r=o(" (LED model)"),g0r=l(),qM=a("li"),yMe=a("strong"),h0r=o("longformer"),p0r=o(" \u2014 "),VY=a("a"),_0r=o("TFLongformerModel"),u0r=o(" (Longformer model)"),b0r=l(),jM=a("li"),xMe=a("strong"),v0r=o("lxmert"),F0r=o(" \u2014 "),XY=a("a"),T0r=o("TFLxmertModel"),M0r=o(" (LXMERT model)"),E0r=l(),DM=a("li"),$Me=a("strong"),C0r=o("marian"),w0r=o(" \u2014 "),zY=a("a"),A0r=o("TFMarianModel"),L0r=o(" (Marian model)"),y0r=l(),GM=a("li"),kMe=a("strong"),x0r=o("mbart"),$0r=o(" \u2014 "),WY=a("a"),k0r=o("TFMBartModel"),S0r=o(" (mBART model)"),R0r=l(),OM=a("li"),SMe=a("strong"),P0r=o("mobilebert"),B0r=o(" \u2014 "),QY=a("a"),I0r=o("TFMobileBertModel"),N0r=o(" (MobileBERT model)"),q0r=l(),VM=a("li"),RMe=a("strong"),j0r=o("mpnet"),D0r=o(" \u2014 "),UY=a("a"),G0r=o("TFMPNetModel"),O0r=o(" (MPNet model)"),V0r=l(),XM=a("li"),PMe=a("strong"),X0r=o("mt5"),z0r=o(" \u2014 "),HY=a("a"),W0r=o("TFMT5Model"),Q0r=o(" (MT5 model)"),U0r=l(),zM=a("li"),BMe=a("strong"),H0r=o("openai-gpt"),J0r=o(" \u2014 "),JY=a("a"),Y0r=o("TFOpenAIGPTModel"),K0r=o(" (OpenAI GPT model)"),Z0r=l(),WM=a("li"),IMe=a("strong"),ewr=o("opt"),owr=o(" \u2014 "),YY=a("a"),rwr=o("TFOPTModel"),twr=o(" (OPT model)"),awr=l(),QM=a("li"),NMe=a("strong"),nwr=o("pegasus"),swr=o(" \u2014 "),KY=a("a"),lwr=o("TFPegasusModel"),iwr=o(" (Pegasus model)"),dwr=l(),UM=a("li"),qMe=a("strong"),cwr=o("regnet"),fwr=o(" \u2014 "),ZY=a("a"),mwr=o("TFRegNetModel"),gwr=o(" (RegNet model)"),hwr=l(),HM=a("li"),jMe=a("strong"),pwr=o("rembert"),_wr=o(" \u2014 "),eK=a("a"),uwr=o("TFRemBertModel"),bwr=o(" (RemBERT model)"),vwr=l(),JM=a("li"),DMe=a("strong"),Fwr=o("resnet"),Twr=o(" \u2014 "),oK=a("a"),Mwr=o("TFResNetModel"),Ewr=o(" (ResNet model)"),Cwr=l(),YM=a("li"),GMe=a("strong"),wwr=o("roberta"),Awr=o(" \u2014 "),rK=a("a"),Lwr=o("TFRobertaModel"),ywr=o(" (RoBERTa model)"),xwr=l(),KM=a("li"),OMe=a("strong"),$wr=o("roformer"),kwr=o(" \u2014 "),tK=a("a"),Swr=o("TFRoFormerModel"),Rwr=o(" (RoFormer model)"),Pwr=l(),ZM=a("li"),VMe=a("strong"),Bwr=o("segformer"),Iwr=o(" \u2014 "),aK=a("a"),Nwr=o("TFSegformerModel"),qwr=o(" (SegFormer model)"),jwr=l(),eE=a("li"),XMe=a("strong"),Dwr=o("speech_to_text"),Gwr=o(" \u2014 "),nK=a("a"),Owr=o("TFSpeech2TextModel"),Vwr=o(" (Speech2Text model)"),Xwr=l(),oE=a("li"),zMe=a("strong"),zwr=o("swin"),Wwr=o(" \u2014 "),sK=a("a"),Qwr=o("TFSwinModel"),Uwr=o(" (Swin Transformer model)"),Hwr=l(),rE=a("li"),WMe=a("strong"),Jwr=o("t5"),Ywr=o(" \u2014 "),lK=a("a"),Kwr=o("TFT5Model"),Zwr=o(" (T5 model)"),e6r=l(),tE=a("li"),QMe=a("strong"),o6r=o("tapas"),r6r=o(" \u2014 "),iK=a("a"),t6r=o("TFTapasModel"),a6r=o(" (TAPAS model)"),n6r=l(),aE=a("li"),UMe=a("strong"),s6r=o("transfo-xl"),l6r=o(" \u2014 "),dK=a("a"),i6r=o("TFTransfoXLModel"),d6r=o(" (Transformer-XL model)"),c6r=l(),nE=a("li"),HMe=a("strong"),f6r=o("vit"),m6r=o(" \u2014 "),cK=a("a"),g6r=o("TFViTModel"),h6r=o(" (ViT model)"),p6r=l(),sE=a("li"),JMe=a("strong"),_6r=o("vit_mae"),u6r=o(" \u2014 "),fK=a("a"),b6r=o("TFViTMAEModel"),v6r=o(" (ViTMAE model)"),F6r=l(),lE=a("li"),YMe=a("strong"),T6r=o("wav2vec2"),M6r=o(" \u2014 "),mK=a("a"),E6r=o("TFWav2Vec2Model"),C6r=o(" (Wav2Vec2 model)"),w6r=l(),iE=a("li"),KMe=a("strong"),A6r=o("xlm"),L6r=o(" \u2014 "),gK=a("a"),y6r=o("TFXLMModel"),x6r=o(" (XLM model)"),$6r=l(),dE=a("li"),ZMe=a("strong"),k6r=o("xlm-roberta"),S6r=o(" \u2014 "),hK=a("a"),R6r=o("TFXLMRobertaModel"),P6r=o(" (XLM-RoBERTa model)"),B6r=l(),cE=a("li"),eEe=a("strong"),I6r=o("xlnet"),N6r=o(" \u2014 "),pK=a("a"),q6r=o("TFXLNetModel"),j6r=o(" (XLNet model)"),D6r=l(),F(fE.$$.fragment),eHe=l(),xc=a("h2"),mE=a("a"),oEe=a("span"),F(d$.$$.fragment),G6r=l(),rEe=a("span"),O6r=o("TFAutoModelForPreTraining"),oHe=l(),nr=a("div"),F(c$.$$.fragment),V6r=l(),$c=a("p"),X6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_K=a("a"),z6r=o("from_pretrained()"),W6r=o(" class method or the "),uK=a("a"),Q6r=o("from_config()"),U6r=o(` class
method.`),H6r=l(),f$=a("p"),J6r=o("This class cannot be instantiated directly using "),tEe=a("code"),Y6r=o("__init__()"),K6r=o(" (throws an error)."),Z6r=l(),jt=a("div"),F(m$.$$.fragment),eAr=l(),aEe=a("p"),oAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rAr=l(),kc=a("p"),tAr=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),aAr=o("not"),nAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),sAr=o("from_pretrained()"),lAr=o(" to load the model weights."),iAr=l(),F(gE.$$.fragment),dAr=l(),Pr=a("div"),F(g$.$$.fragment),cAr=l(),sEe=a("p"),fAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mAr=l(),un=a("p"),gAr=o("The model class to instantiate is selected based on the "),lEe=a("code"),hAr=o("model_type"),pAr=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),_Ar=o("pretrained_model_name_or_path"),uAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(":"),FAr=l(),se=a("ul"),hE=a("li"),cEe=a("strong"),TAr=o("albert"),MAr=o(" \u2014 "),vK=a("a"),EAr=o("TFAlbertForPreTraining"),CAr=o(" (ALBERT model)"),wAr=l(),pE=a("li"),fEe=a("strong"),AAr=o("bart"),LAr=o(" \u2014 "),FK=a("a"),yAr=o("TFBartForConditionalGeneration"),xAr=o(" (BART model)"),$Ar=l(),_E=a("li"),mEe=a("strong"),kAr=o("bert"),SAr=o(" \u2014 "),TK=a("a"),RAr=o("TFBertForPreTraining"),PAr=o(" (BERT model)"),BAr=l(),uE=a("li"),gEe=a("strong"),IAr=o("camembert"),NAr=o(" \u2014 "),MK=a("a"),qAr=o("TFCamembertForMaskedLM"),jAr=o(" (CamemBERT model)"),DAr=l(),bE=a("li"),hEe=a("strong"),GAr=o("ctrl"),OAr=o(" \u2014 "),EK=a("a"),VAr=o("TFCTRLLMHeadModel"),XAr=o(" (CTRL model)"),zAr=l(),vE=a("li"),pEe=a("strong"),WAr=o("distilbert"),QAr=o(" \u2014 "),CK=a("a"),UAr=o("TFDistilBertForMaskedLM"),HAr=o(" (DistilBERT model)"),JAr=l(),FE=a("li"),_Ee=a("strong"),YAr=o("electra"),KAr=o(" \u2014 "),wK=a("a"),ZAr=o("TFElectraForPreTraining"),eLr=o(" (ELECTRA model)"),oLr=l(),TE=a("li"),uEe=a("strong"),rLr=o("flaubert"),tLr=o(" \u2014 "),AK=a("a"),aLr=o("TFFlaubertWithLMHeadModel"),nLr=o(" (FlauBERT model)"),sLr=l(),ME=a("li"),bEe=a("strong"),lLr=o("funnel"),iLr=o(" \u2014 "),LK=a("a"),dLr=o("TFFunnelForPreTraining"),cLr=o(" (Funnel Transformer model)"),fLr=l(),EE=a("li"),vEe=a("strong"),mLr=o("gpt2"),gLr=o(" \u2014 "),yK=a("a"),hLr=o("TFGPT2LMHeadModel"),pLr=o(" (OpenAI GPT-2 model)"),_Lr=l(),CE=a("li"),FEe=a("strong"),uLr=o("layoutlm"),bLr=o(" \u2014 "),xK=a("a"),vLr=o("TFLayoutLMForMaskedLM"),FLr=o(" (LayoutLM model)"),TLr=l(),wE=a("li"),TEe=a("strong"),MLr=o("lxmert"),ELr=o(" \u2014 "),$K=a("a"),CLr=o("TFLxmertForPreTraining"),wLr=o(" (LXMERT model)"),ALr=l(),AE=a("li"),MEe=a("strong"),LLr=o("mobilebert"),yLr=o(" \u2014 "),kK=a("a"),xLr=o("TFMobileBertForPreTraining"),$Lr=o(" (MobileBERT model)"),kLr=l(),LE=a("li"),EEe=a("strong"),SLr=o("mpnet"),RLr=o(" \u2014 "),SK=a("a"),PLr=o("TFMPNetForMaskedLM"),BLr=o(" (MPNet model)"),ILr=l(),yE=a("li"),CEe=a("strong"),NLr=o("openai-gpt"),qLr=o(" \u2014 "),RK=a("a"),jLr=o("TFOpenAIGPTLMHeadModel"),DLr=o(" (OpenAI GPT model)"),GLr=l(),xE=a("li"),wEe=a("strong"),OLr=o("roberta"),VLr=o(" \u2014 "),PK=a("a"),XLr=o("TFRobertaForMaskedLM"),zLr=o(" (RoBERTa model)"),WLr=l(),$E=a("li"),AEe=a("strong"),QLr=o("t5"),ULr=o(" \u2014 "),BK=a("a"),HLr=o("TFT5ForConditionalGeneration"),JLr=o(" (T5 model)"),YLr=l(),kE=a("li"),LEe=a("strong"),KLr=o("tapas"),ZLr=o(" \u2014 "),IK=a("a"),eyr=o("TFTapasForMaskedLM"),oyr=o(" (TAPAS model)"),ryr=l(),SE=a("li"),yEe=a("strong"),tyr=o("transfo-xl"),ayr=o(" \u2014 "),NK=a("a"),nyr=o("TFTransfoXLLMHeadModel"),syr=o(" (Transformer-XL model)"),lyr=l(),RE=a("li"),xEe=a("strong"),iyr=o("vit_mae"),dyr=o(" \u2014 "),qK=a("a"),cyr=o("TFViTMAEForPreTraining"),fyr=o(" (ViTMAE model)"),myr=l(),PE=a("li"),$Ee=a("strong"),gyr=o("xlm"),hyr=o(" \u2014 "),jK=a("a"),pyr=o("TFXLMWithLMHeadModel"),_yr=o(" (XLM model)"),uyr=l(),BE=a("li"),kEe=a("strong"),byr=o("xlm-roberta"),vyr=o(" \u2014 "),DK=a("a"),Fyr=o("TFXLMRobertaForMaskedLM"),Tyr=o(" (XLM-RoBERTa model)"),Myr=l(),IE=a("li"),SEe=a("strong"),Eyr=o("xlnet"),Cyr=o(" \u2014 "),GK=a("a"),wyr=o("TFXLNetLMHeadModel"),Ayr=o(" (XLNet model)"),Lyr=l(),F(NE.$$.fragment),rHe=l(),Sc=a("h2"),qE=a("a"),REe=a("span"),F(h$.$$.fragment),yyr=l(),PEe=a("span"),xyr=o("TFAutoModelForCausalLM"),tHe=l(),sr=a("div"),F(p$.$$.fragment),$yr=l(),Rc=a("p"),kyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OK=a("a"),Syr=o("from_pretrained()"),Ryr=o(" class method or the "),VK=a("a"),Pyr=o("from_config()"),Byr=o(` class
method.`),Iyr=l(),_$=a("p"),Nyr=o("This class cannot be instantiated directly using "),BEe=a("code"),qyr=o("__init__()"),jyr=o(" (throws an error)."),Dyr=l(),Dt=a("div"),F(u$.$$.fragment),Gyr=l(),IEe=a("p"),Oyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vyr=l(),Pc=a("p"),Xyr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),zyr=o("not"),Wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),Qyr=o("from_pretrained()"),Uyr=o(" to load the model weights."),Hyr=l(),F(jE.$$.fragment),Jyr=l(),Br=a("div"),F(b$.$$.fragment),Yyr=l(),qEe=a("p"),Kyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Zyr=l(),bn=a("p"),e8r=o("The model class to instantiate is selected based on the "),jEe=a("code"),o8r=o("model_type"),r8r=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),n8r=o("pretrained_model_name_or_path"),s8r=o(":"),l8r=l(),Me=a("ul"),DE=a("li"),OEe=a("strong"),i8r=o("bert"),d8r=o(" \u2014 "),zK=a("a"),c8r=o("TFBertLMHeadModel"),f8r=o(" (BERT model)"),m8r=l(),GE=a("li"),VEe=a("strong"),g8r=o("camembert"),h8r=o(" \u2014 "),WK=a("a"),p8r=o("TFCamembertForCausalLM"),_8r=o(" (CamemBERT model)"),u8r=l(),OE=a("li"),XEe=a("strong"),b8r=o("ctrl"),v8r=o(" \u2014 "),QK=a("a"),F8r=o("TFCTRLLMHeadModel"),T8r=o(" (CTRL model)"),M8r=l(),VE=a("li"),zEe=a("strong"),E8r=o("gpt2"),C8r=o(" \u2014 "),UK=a("a"),w8r=o("TFGPT2LMHeadModel"),A8r=o(" (OpenAI GPT-2 model)"),L8r=l(),XE=a("li"),WEe=a("strong"),y8r=o("gptj"),x8r=o(" \u2014 "),HK=a("a"),$8r=o("TFGPTJForCausalLM"),k8r=o(" (GPT-J model)"),S8r=l(),zE=a("li"),QEe=a("strong"),R8r=o("openai-gpt"),P8r=o(" \u2014 "),JK=a("a"),B8r=o("TFOpenAIGPTLMHeadModel"),I8r=o(" (OpenAI GPT model)"),N8r=l(),WE=a("li"),UEe=a("strong"),q8r=o("opt"),j8r=o(" \u2014 "),YK=a("a"),D8r=o("TFOPTForCausalLM"),G8r=o(" (OPT model)"),O8r=l(),QE=a("li"),HEe=a("strong"),V8r=o("rembert"),X8r=o(" \u2014 "),KK=a("a"),z8r=o("TFRemBertForCausalLM"),W8r=o(" (RemBERT model)"),Q8r=l(),UE=a("li"),JEe=a("strong"),U8r=o("roberta"),H8r=o(" \u2014 "),ZK=a("a"),J8r=o("TFRobertaForCausalLM"),Y8r=o(" (RoBERTa model)"),K8r=l(),HE=a("li"),YEe=a("strong"),Z8r=o("roformer"),e9r=o(" \u2014 "),eZ=a("a"),o9r=o("TFRoFormerForCausalLM"),r9r=o(" (RoFormer model)"),t9r=l(),JE=a("li"),KEe=a("strong"),a9r=o("transfo-xl"),n9r=o(" \u2014 "),oZ=a("a"),s9r=o("TFTransfoXLLMHeadModel"),l9r=o(" (Transformer-XL model)"),i9r=l(),YE=a("li"),ZEe=a("strong"),d9r=o("xlm"),c9r=o(" \u2014 "),rZ=a("a"),f9r=o("TFXLMWithLMHeadModel"),m9r=o(" (XLM model)"),g9r=l(),KE=a("li"),eCe=a("strong"),h9r=o("xlnet"),p9r=o(" \u2014 "),tZ=a("a"),_9r=o("TFXLNetLMHeadModel"),u9r=o(" (XLNet model)"),b9r=l(),F(ZE.$$.fragment),aHe=l(),Bc=a("h2"),eC=a("a"),oCe=a("span"),F(v$.$$.fragment),v9r=l(),rCe=a("span"),F9r=o("TFAutoModelForImageClassification"),nHe=l(),lr=a("div"),F(F$.$$.fragment),T9r=l(),Ic=a("p"),M9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aZ=a("a"),E9r=o("from_pretrained()"),C9r=o(" class method or the "),nZ=a("a"),w9r=o("from_config()"),A9r=o(` class
method.`),L9r=l(),T$=a("p"),y9r=o("This class cannot be instantiated directly using "),tCe=a("code"),x9r=o("__init__()"),$9r=o(" (throws an error)."),k9r=l(),Gt=a("div"),F(M$.$$.fragment),S9r=l(),aCe=a("p"),R9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P9r=l(),Nc=a("p"),B9r=o(`Note:
Loading a model from its configuration file does `),nCe=a("strong"),I9r=o("not"),N9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=a("a"),q9r=o("from_pretrained()"),j9r=o(" to load the model weights."),D9r=l(),F(oC.$$.fragment),G9r=l(),Ir=a("div"),F(E$.$$.fragment),O9r=l(),sCe=a("p"),V9r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),X9r=l(),vn=a("p"),z9r=o("The model class to instantiate is selected based on the "),lCe=a("code"),W9r=o("model_type"),Q9r=o(` property of the config object (either
passed as an argument or loaded from `),iCe=a("code"),U9r=o("pretrained_model_name_or_path"),H9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(":"),K9r=l(),Ve=a("ul"),rC=a("li"),cCe=a("strong"),Z9r=o("convnext"),exr=o(" \u2014 "),lZ=a("a"),oxr=o("TFConvNextForImageClassification"),rxr=o(" (ConvNeXT model)"),txr=l(),tC=a("li"),fCe=a("strong"),axr=o("data2vec-vision"),nxr=o(" \u2014 "),iZ=a("a"),sxr=o("TFData2VecVisionForImageClassification"),lxr=o(" (Data2VecVision model)"),ixr=l(),ml=a("li"),mCe=a("strong"),dxr=o("deit"),cxr=o(" \u2014 "),dZ=a("a"),fxr=o("TFDeiTForImageClassification"),mxr=o(" or "),cZ=a("a"),gxr=o("TFDeiTForImageClassificationWithTeacher"),hxr=o(" (DeiT model)"),pxr=l(),aC=a("li"),gCe=a("strong"),_xr=o("regnet"),uxr=o(" \u2014 "),fZ=a("a"),bxr=o("TFRegNetForImageClassification"),vxr=o(" (RegNet model)"),Fxr=l(),nC=a("li"),hCe=a("strong"),Txr=o("resnet"),Mxr=o(" \u2014 "),mZ=a("a"),Exr=o("TFResNetForImageClassification"),Cxr=o(" (ResNet model)"),wxr=l(),sC=a("li"),pCe=a("strong"),Axr=o("segformer"),Lxr=o(" \u2014 "),gZ=a("a"),yxr=o("TFSegformerForImageClassification"),xxr=o(" (SegFormer model)"),$xr=l(),lC=a("li"),_Ce=a("strong"),kxr=o("swin"),Sxr=o(" \u2014 "),hZ=a("a"),Rxr=o("TFSwinForImageClassification"),Pxr=o(" (Swin Transformer model)"),Bxr=l(),iC=a("li"),uCe=a("strong"),Ixr=o("vit"),Nxr=o(" \u2014 "),pZ=a("a"),qxr=o("TFViTForImageClassification"),jxr=o(" (ViT model)"),Dxr=l(),F(dC.$$.fragment),sHe=l(),qc=a("h2"),cC=a("a"),bCe=a("span"),F(C$.$$.fragment),Gxr=l(),vCe=a("span"),Oxr=o("TFAutoModelForSemanticSegmentation"),lHe=l(),ir=a("div"),F(w$.$$.fragment),Vxr=l(),jc=a("p"),Xxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_Z=a("a"),zxr=o("from_pretrained()"),Wxr=o(" class method or the "),uZ=a("a"),Qxr=o("from_config()"),Uxr=o(` class
method.`),Hxr=l(),A$=a("p"),Jxr=o("This class cannot be instantiated directly using "),FCe=a("code"),Yxr=o("__init__()"),Kxr=o(" (throws an error)."),Zxr=l(),Ot=a("div"),F(L$.$$.fragment),e$r=l(),TCe=a("p"),o$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),r$r=l(),Dc=a("p"),t$r=o(`Note:
Loading a model from its configuration file does `),MCe=a("strong"),a$r=o("not"),n$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bZ=a("a"),s$r=o("from_pretrained()"),l$r=o(" to load the model weights."),i$r=l(),F(fC.$$.fragment),d$r=l(),Nr=a("div"),F(y$.$$.fragment),c$r=l(),ECe=a("p"),f$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),m$r=l(),Fn=a("p"),g$r=o("The model class to instantiate is selected based on the "),CCe=a("code"),h$r=o("model_type"),p$r=o(` property of the config object (either
passed as an argument or loaded from `),wCe=a("code"),_$r=o("pretrained_model_name_or_path"),u$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=a("code"),b$r=o("pretrained_model_name_or_path"),v$r=o(":"),F$r=l(),x$=a("ul"),mC=a("li"),LCe=a("strong"),T$r=o("data2vec-vision"),M$r=o(" \u2014 "),vZ=a("a"),E$r=o("TFData2VecVisionForSemanticSegmentation"),C$r=o(" (Data2VecVision model)"),w$r=l(),gC=a("li"),yCe=a("strong"),A$r=o("segformer"),L$r=o(" \u2014 "),FZ=a("a"),y$r=o("TFSegformerForSemanticSegmentation"),x$r=o(" (SegFormer model)"),$$r=l(),F(hC.$$.fragment),iHe=l(),Gc=a("h2"),pC=a("a"),xCe=a("span"),F($$.$$.fragment),k$r=l(),$Ce=a("span"),S$r=o("TFAutoModelForMaskedLM"),dHe=l(),dr=a("div"),F(k$.$$.fragment),R$r=l(),Oc=a("p"),P$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=a("a"),B$r=o("from_pretrained()"),I$r=o(" class method or the "),MZ=a("a"),N$r=o("from_config()"),q$r=o(` class
method.`),j$r=l(),S$=a("p"),D$r=o("This class cannot be instantiated directly using "),kCe=a("code"),G$r=o("__init__()"),O$r=o(" (throws an error)."),V$r=l(),Vt=a("div"),F(R$.$$.fragment),X$r=l(),SCe=a("p"),z$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),W$r=l(),Vc=a("p"),Q$r=o(`Note:
Loading a model from its configuration file does `),RCe=a("strong"),U$r=o("not"),H$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),J$r=o("from_pretrained()"),Y$r=o(" to load the model weights."),K$r=l(),F(_C.$$.fragment),Z$r=l(),qr=a("div"),F(P$.$$.fragment),ekr=l(),PCe=a("p"),okr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rkr=l(),Tn=a("p"),tkr=o("The model class to instantiate is selected based on the "),BCe=a("code"),akr=o("model_type"),nkr=o(` property of the config object (either
passed as an argument or loaded from `),ICe=a("code"),skr=o("pretrained_model_name_or_path"),lkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NCe=a("code"),ikr=o("pretrained_model_name_or_path"),dkr=o(":"),ckr=l(),de=a("ul"),uC=a("li"),qCe=a("strong"),fkr=o("albert"),mkr=o(" \u2014 "),CZ=a("a"),gkr=o("TFAlbertForMaskedLM"),hkr=o(" (ALBERT model)"),pkr=l(),bC=a("li"),jCe=a("strong"),_kr=o("bert"),ukr=o(" \u2014 "),wZ=a("a"),bkr=o("TFBertForMaskedLM"),vkr=o(" (BERT model)"),Fkr=l(),vC=a("li"),DCe=a("strong"),Tkr=o("camembert"),Mkr=o(" \u2014 "),AZ=a("a"),Ekr=o("TFCamembertForMaskedLM"),Ckr=o(" (CamemBERT model)"),wkr=l(),FC=a("li"),GCe=a("strong"),Akr=o("convbert"),Lkr=o(" \u2014 "),LZ=a("a"),ykr=o("TFConvBertForMaskedLM"),xkr=o(" (ConvBERT model)"),$kr=l(),TC=a("li"),OCe=a("strong"),kkr=o("deberta"),Skr=o(" \u2014 "),yZ=a("a"),Rkr=o("TFDebertaForMaskedLM"),Pkr=o(" (DeBERTa model)"),Bkr=l(),MC=a("li"),VCe=a("strong"),Ikr=o("deberta-v2"),Nkr=o(" \u2014 "),xZ=a("a"),qkr=o("TFDebertaV2ForMaskedLM"),jkr=o(" (DeBERTa-v2 model)"),Dkr=l(),EC=a("li"),XCe=a("strong"),Gkr=o("distilbert"),Okr=o(" \u2014 "),$Z=a("a"),Vkr=o("TFDistilBertForMaskedLM"),Xkr=o(" (DistilBERT model)"),zkr=l(),CC=a("li"),zCe=a("strong"),Wkr=o("electra"),Qkr=o(" \u2014 "),kZ=a("a"),Ukr=o("TFElectraForMaskedLM"),Hkr=o(" (ELECTRA model)"),Jkr=l(),wC=a("li"),WCe=a("strong"),Ykr=o("flaubert"),Kkr=o(" \u2014 "),SZ=a("a"),Zkr=o("TFFlaubertWithLMHeadModel"),eSr=o(" (FlauBERT model)"),oSr=l(),AC=a("li"),QCe=a("strong"),rSr=o("funnel"),tSr=o(" \u2014 "),RZ=a("a"),aSr=o("TFFunnelForMaskedLM"),nSr=o(" (Funnel Transformer model)"),sSr=l(),LC=a("li"),UCe=a("strong"),lSr=o("layoutlm"),iSr=o(" \u2014 "),PZ=a("a"),dSr=o("TFLayoutLMForMaskedLM"),cSr=o(" (LayoutLM model)"),fSr=l(),yC=a("li"),HCe=a("strong"),mSr=o("longformer"),gSr=o(" \u2014 "),BZ=a("a"),hSr=o("TFLongformerForMaskedLM"),pSr=o(" (Longformer model)"),_Sr=l(),xC=a("li"),JCe=a("strong"),uSr=o("mobilebert"),bSr=o(" \u2014 "),IZ=a("a"),vSr=o("TFMobileBertForMaskedLM"),FSr=o(" (MobileBERT model)"),TSr=l(),$C=a("li"),YCe=a("strong"),MSr=o("mpnet"),ESr=o(" \u2014 "),NZ=a("a"),CSr=o("TFMPNetForMaskedLM"),wSr=o(" (MPNet model)"),ASr=l(),kC=a("li"),KCe=a("strong"),LSr=o("rembert"),ySr=o(" \u2014 "),qZ=a("a"),xSr=o("TFRemBertForMaskedLM"),$Sr=o(" (RemBERT model)"),kSr=l(),SC=a("li"),ZCe=a("strong"),SSr=o("roberta"),RSr=o(" \u2014 "),jZ=a("a"),PSr=o("TFRobertaForMaskedLM"),BSr=o(" (RoBERTa model)"),ISr=l(),RC=a("li"),e3e=a("strong"),NSr=o("roformer"),qSr=o(" \u2014 "),DZ=a("a"),jSr=o("TFRoFormerForMaskedLM"),DSr=o(" (RoFormer model)"),GSr=l(),PC=a("li"),o3e=a("strong"),OSr=o("tapas"),VSr=o(" \u2014 "),GZ=a("a"),XSr=o("TFTapasForMaskedLM"),zSr=o(" (TAPAS model)"),WSr=l(),BC=a("li"),r3e=a("strong"),QSr=o("xlm"),USr=o(" \u2014 "),OZ=a("a"),HSr=o("TFXLMWithLMHeadModel"),JSr=o(" (XLM model)"),YSr=l(),IC=a("li"),t3e=a("strong"),KSr=o("xlm-roberta"),ZSr=o(" \u2014 "),VZ=a("a"),eRr=o("TFXLMRobertaForMaskedLM"),oRr=o(" (XLM-RoBERTa model)"),rRr=l(),F(NC.$$.fragment),cHe=l(),Xc=a("h2"),qC=a("a"),a3e=a("span"),F(B$.$$.fragment),tRr=l(),n3e=a("span"),aRr=o("TFAutoModelForSeq2SeqLM"),fHe=l(),cr=a("div"),F(I$.$$.fragment),nRr=l(),zc=a("p"),sRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XZ=a("a"),lRr=o("from_pretrained()"),iRr=o(" class method or the "),zZ=a("a"),dRr=o("from_config()"),cRr=o(` class
method.`),fRr=l(),N$=a("p"),mRr=o("This class cannot be instantiated directly using "),s3e=a("code"),gRr=o("__init__()"),hRr=o(" (throws an error)."),pRr=l(),Xt=a("div"),F(q$.$$.fragment),_Rr=l(),l3e=a("p"),uRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bRr=l(),Wc=a("p"),vRr=o(`Note:
Loading a model from its configuration file does `),i3e=a("strong"),FRr=o("not"),TRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("a"),MRr=o("from_pretrained()"),ERr=o(" to load the model weights."),CRr=l(),F(jC.$$.fragment),wRr=l(),jr=a("div"),F(j$.$$.fragment),ARr=l(),d3e=a("p"),LRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yRr=l(),Mn=a("p"),xRr=o("The model class to instantiate is selected based on the "),c3e=a("code"),$Rr=o("model_type"),kRr=o(` property of the config object (either
passed as an argument or loaded from `),f3e=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m3e=a("code"),PRr=o("pretrained_model_name_or_path"),BRr=o(":"),IRr=l(),ye=a("ul"),DC=a("li"),g3e=a("strong"),NRr=o("bart"),qRr=o(" \u2014 "),QZ=a("a"),jRr=o("TFBartForConditionalGeneration"),DRr=o(" (BART model)"),GRr=l(),GC=a("li"),h3e=a("strong"),ORr=o("blenderbot"),VRr=o(" \u2014 "),UZ=a("a"),XRr=o("TFBlenderbotForConditionalGeneration"),zRr=o(" (Blenderbot model)"),WRr=l(),OC=a("li"),p3e=a("strong"),QRr=o("blenderbot-small"),URr=o(" \u2014 "),HZ=a("a"),HRr=o("TFBlenderbotSmallForConditionalGeneration"),JRr=o(" (BlenderbotSmall model)"),YRr=l(),VC=a("li"),_3e=a("strong"),KRr=o("encoder-decoder"),ZRr=o(" \u2014 "),JZ=a("a"),ePr=o("TFEncoderDecoderModel"),oPr=o(" (Encoder decoder model)"),rPr=l(),XC=a("li"),u3e=a("strong"),tPr=o("led"),aPr=o(" \u2014 "),YZ=a("a"),nPr=o("TFLEDForConditionalGeneration"),sPr=o(" (LED model)"),lPr=l(),zC=a("li"),b3e=a("strong"),iPr=o("marian"),dPr=o(" \u2014 "),KZ=a("a"),cPr=o("TFMarianMTModel"),fPr=o(" (Marian model)"),mPr=l(),WC=a("li"),v3e=a("strong"),gPr=o("mbart"),hPr=o(" \u2014 "),ZZ=a("a"),pPr=o("TFMBartForConditionalGeneration"),_Pr=o(" (mBART model)"),uPr=l(),QC=a("li"),F3e=a("strong"),bPr=o("mt5"),vPr=o(" \u2014 "),eee=a("a"),FPr=o("TFMT5ForConditionalGeneration"),TPr=o(" (MT5 model)"),MPr=l(),UC=a("li"),T3e=a("strong"),EPr=o("pegasus"),CPr=o(" \u2014 "),oee=a("a"),wPr=o("TFPegasusForConditionalGeneration"),APr=o(" (Pegasus model)"),LPr=l(),HC=a("li"),M3e=a("strong"),yPr=o("t5"),xPr=o(" \u2014 "),ree=a("a"),$Pr=o("TFT5ForConditionalGeneration"),kPr=o(" (T5 model)"),SPr=l(),F(JC.$$.fragment),mHe=l(),Qc=a("h2"),YC=a("a"),E3e=a("span"),F(D$.$$.fragment),RPr=l(),C3e=a("span"),PPr=o("TFAutoModelForSequenceClassification"),gHe=l(),fr=a("div"),F(G$.$$.fragment),BPr=l(),Uc=a("p"),IPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tee=a("a"),NPr=o("from_pretrained()"),qPr=o(" class method or the "),aee=a("a"),jPr=o("from_config()"),DPr=o(` class
method.`),GPr=l(),O$=a("p"),OPr=o("This class cannot be instantiated directly using "),w3e=a("code"),VPr=o("__init__()"),XPr=o(" (throws an error)."),zPr=l(),zt=a("div"),F(V$.$$.fragment),WPr=l(),A3e=a("p"),QPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UPr=l(),Hc=a("p"),HPr=o(`Note:
Loading a model from its configuration file does `),L3e=a("strong"),JPr=o("not"),YPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=a("a"),KPr=o("from_pretrained()"),ZPr=o(" to load the model weights."),eBr=l(),F(KC.$$.fragment),oBr=l(),Dr=a("div"),F(X$.$$.fragment),rBr=l(),y3e=a("p"),tBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aBr=l(),En=a("p"),nBr=o("The model class to instantiate is selected based on the "),x3e=a("code"),sBr=o("model_type"),lBr=o(` property of the config object (either
passed as an argument or loaded from `),$3e=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=a("code"),cBr=o("pretrained_model_name_or_path"),fBr=o(":"),mBr=l(),te=a("ul"),ZC=a("li"),S3e=a("strong"),gBr=o("albert"),hBr=o(" \u2014 "),see=a("a"),pBr=o("TFAlbertForSequenceClassification"),_Br=o(" (ALBERT model)"),uBr=l(),e3=a("li"),R3e=a("strong"),bBr=o("bert"),vBr=o(" \u2014 "),lee=a("a"),FBr=o("TFBertForSequenceClassification"),TBr=o(" (BERT model)"),MBr=l(),o3=a("li"),P3e=a("strong"),EBr=o("camembert"),CBr=o(" \u2014 "),iee=a("a"),wBr=o("TFCamembertForSequenceClassification"),ABr=o(" (CamemBERT model)"),LBr=l(),r3=a("li"),B3e=a("strong"),yBr=o("convbert"),xBr=o(" \u2014 "),dee=a("a"),$Br=o("TFConvBertForSequenceClassification"),kBr=o(" (ConvBERT model)"),SBr=l(),t3=a("li"),I3e=a("strong"),RBr=o("ctrl"),PBr=o(" \u2014 "),cee=a("a"),BBr=o("TFCTRLForSequenceClassification"),IBr=o(" (CTRL model)"),NBr=l(),a3=a("li"),N3e=a("strong"),qBr=o("deberta"),jBr=o(" \u2014 "),fee=a("a"),DBr=o("TFDebertaForSequenceClassification"),GBr=o(" (DeBERTa model)"),OBr=l(),n3=a("li"),q3e=a("strong"),VBr=o("deberta-v2"),XBr=o(" \u2014 "),mee=a("a"),zBr=o("TFDebertaV2ForSequenceClassification"),WBr=o(" (DeBERTa-v2 model)"),QBr=l(),s3=a("li"),j3e=a("strong"),UBr=o("distilbert"),HBr=o(" \u2014 "),gee=a("a"),JBr=o("TFDistilBertForSequenceClassification"),YBr=o(" (DistilBERT model)"),KBr=l(),l3=a("li"),D3e=a("strong"),ZBr=o("electra"),eIr=o(" \u2014 "),hee=a("a"),oIr=o("TFElectraForSequenceClassification"),rIr=o(" (ELECTRA model)"),tIr=l(),i3=a("li"),G3e=a("strong"),aIr=o("flaubert"),nIr=o(" \u2014 "),pee=a("a"),sIr=o("TFFlaubertForSequenceClassification"),lIr=o(" (FlauBERT model)"),iIr=l(),d3=a("li"),O3e=a("strong"),dIr=o("funnel"),cIr=o(" \u2014 "),_ee=a("a"),fIr=o("TFFunnelForSequenceClassification"),mIr=o(" (Funnel Transformer model)"),gIr=l(),c3=a("li"),V3e=a("strong"),hIr=o("gpt2"),pIr=o(" \u2014 "),uee=a("a"),_Ir=o("TFGPT2ForSequenceClassification"),uIr=o(" (OpenAI GPT-2 model)"),bIr=l(),f3=a("li"),X3e=a("strong"),vIr=o("gptj"),FIr=o(" \u2014 "),bee=a("a"),TIr=o("TFGPTJForSequenceClassification"),MIr=o(" (GPT-J model)"),EIr=l(),m3=a("li"),z3e=a("strong"),CIr=o("layoutlm"),wIr=o(" \u2014 "),vee=a("a"),AIr=o("TFLayoutLMForSequenceClassification"),LIr=o(" (LayoutLM model)"),yIr=l(),g3=a("li"),W3e=a("strong"),xIr=o("longformer"),$Ir=o(" \u2014 "),Fee=a("a"),kIr=o("TFLongformerForSequenceClassification"),SIr=o(" (Longformer model)"),RIr=l(),h3=a("li"),Q3e=a("strong"),PIr=o("mobilebert"),BIr=o(" \u2014 "),Tee=a("a"),IIr=o("TFMobileBertForSequenceClassification"),NIr=o(" (MobileBERT model)"),qIr=l(),p3=a("li"),U3e=a("strong"),jIr=o("mpnet"),DIr=o(" \u2014 "),Mee=a("a"),GIr=o("TFMPNetForSequenceClassification"),OIr=o(" (MPNet model)"),VIr=l(),_3=a("li"),H3e=a("strong"),XIr=o("openai-gpt"),zIr=o(" \u2014 "),Eee=a("a"),WIr=o("TFOpenAIGPTForSequenceClassification"),QIr=o(" (OpenAI GPT model)"),UIr=l(),u3=a("li"),J3e=a("strong"),HIr=o("rembert"),JIr=o(" \u2014 "),Cee=a("a"),YIr=o("TFRemBertForSequenceClassification"),KIr=o(" (RemBERT model)"),ZIr=l(),b3=a("li"),Y3e=a("strong"),eNr=o("roberta"),oNr=o(" \u2014 "),wee=a("a"),rNr=o("TFRobertaForSequenceClassification"),tNr=o(" (RoBERTa model)"),aNr=l(),v3=a("li"),K3e=a("strong"),nNr=o("roformer"),sNr=o(" \u2014 "),Aee=a("a"),lNr=o("TFRoFormerForSequenceClassification"),iNr=o(" (RoFormer model)"),dNr=l(),F3=a("li"),Z3e=a("strong"),cNr=o("tapas"),fNr=o(" \u2014 "),Lee=a("a"),mNr=o("TFTapasForSequenceClassification"),gNr=o(" (TAPAS model)"),hNr=l(),T3=a("li"),e0e=a("strong"),pNr=o("transfo-xl"),_Nr=o(" \u2014 "),yee=a("a"),uNr=o("TFTransfoXLForSequenceClassification"),bNr=o(" (Transformer-XL model)"),vNr=l(),M3=a("li"),o0e=a("strong"),FNr=o("xlm"),TNr=o(" \u2014 "),xee=a("a"),MNr=o("TFXLMForSequenceClassification"),ENr=o(" (XLM model)"),CNr=l(),E3=a("li"),r0e=a("strong"),wNr=o("xlm-roberta"),ANr=o(" \u2014 "),$ee=a("a"),LNr=o("TFXLMRobertaForSequenceClassification"),yNr=o(" (XLM-RoBERTa model)"),xNr=l(),C3=a("li"),t0e=a("strong"),$Nr=o("xlnet"),kNr=o(" \u2014 "),kee=a("a"),SNr=o("TFXLNetForSequenceClassification"),RNr=o(" (XLNet model)"),PNr=l(),F(w3.$$.fragment),hHe=l(),Jc=a("h2"),A3=a("a"),a0e=a("span"),F(z$.$$.fragment),BNr=l(),n0e=a("span"),INr=o("TFAutoModelForMultipleChoice"),pHe=l(),mr=a("div"),F(W$.$$.fragment),NNr=l(),Yc=a("p"),qNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),See=a("a"),jNr=o("from_pretrained()"),DNr=o(" class method or the "),Ree=a("a"),GNr=o("from_config()"),ONr=o(` class
method.`),VNr=l(),Q$=a("p"),XNr=o("This class cannot be instantiated directly using "),s0e=a("code"),zNr=o("__init__()"),WNr=o(" (throws an error)."),QNr=l(),Wt=a("div"),F(U$.$$.fragment),UNr=l(),l0e=a("p"),HNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JNr=l(),Kc=a("p"),YNr=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),KNr=o("not"),ZNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),eqr=o("from_pretrained()"),oqr=o(" to load the model weights."),rqr=l(),F(L3.$$.fragment),tqr=l(),Gr=a("div"),F(H$.$$.fragment),aqr=l(),d0e=a("p"),nqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sqr=l(),Cn=a("p"),lqr=o("The model class to instantiate is selected based on the "),c0e=a("code"),iqr=o("model_type"),dqr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),cqr=o("pretrained_model_name_or_path"),fqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),mqr=o("pretrained_model_name_or_path"),gqr=o(":"),hqr=l(),ve=a("ul"),y3=a("li"),g0e=a("strong"),pqr=o("albert"),_qr=o(" \u2014 "),Bee=a("a"),uqr=o("TFAlbertForMultipleChoice"),bqr=o(" (ALBERT model)"),vqr=l(),x3=a("li"),h0e=a("strong"),Fqr=o("bert"),Tqr=o(" \u2014 "),Iee=a("a"),Mqr=o("TFBertForMultipleChoice"),Eqr=o(" (BERT model)"),Cqr=l(),$3=a("li"),p0e=a("strong"),wqr=o("camembert"),Aqr=o(" \u2014 "),Nee=a("a"),Lqr=o("TFCamembertForMultipleChoice"),yqr=o(" (CamemBERT model)"),xqr=l(),k3=a("li"),_0e=a("strong"),$qr=o("convbert"),kqr=o(" \u2014 "),qee=a("a"),Sqr=o("TFConvBertForMultipleChoice"),Rqr=o(" (ConvBERT model)"),Pqr=l(),S3=a("li"),u0e=a("strong"),Bqr=o("distilbert"),Iqr=o(" \u2014 "),jee=a("a"),Nqr=o("TFDistilBertForMultipleChoice"),qqr=o(" (DistilBERT model)"),jqr=l(),R3=a("li"),b0e=a("strong"),Dqr=o("electra"),Gqr=o(" \u2014 "),Dee=a("a"),Oqr=o("TFElectraForMultipleChoice"),Vqr=o(" (ELECTRA model)"),Xqr=l(),P3=a("li"),v0e=a("strong"),zqr=o("flaubert"),Wqr=o(" \u2014 "),Gee=a("a"),Qqr=o("TFFlaubertForMultipleChoice"),Uqr=o(" (FlauBERT model)"),Hqr=l(),B3=a("li"),F0e=a("strong"),Jqr=o("funnel"),Yqr=o(" \u2014 "),Oee=a("a"),Kqr=o("TFFunnelForMultipleChoice"),Zqr=o(" (Funnel Transformer model)"),ejr=l(),I3=a("li"),T0e=a("strong"),ojr=o("longformer"),rjr=o(" \u2014 "),Vee=a("a"),tjr=o("TFLongformerForMultipleChoice"),ajr=o(" (Longformer model)"),njr=l(),N3=a("li"),M0e=a("strong"),sjr=o("mobilebert"),ljr=o(" \u2014 "),Xee=a("a"),ijr=o("TFMobileBertForMultipleChoice"),djr=o(" (MobileBERT model)"),cjr=l(),q3=a("li"),E0e=a("strong"),fjr=o("mpnet"),mjr=o(" \u2014 "),zee=a("a"),gjr=o("TFMPNetForMultipleChoice"),hjr=o(" (MPNet model)"),pjr=l(),j3=a("li"),C0e=a("strong"),_jr=o("rembert"),ujr=o(" \u2014 "),Wee=a("a"),bjr=o("TFRemBertForMultipleChoice"),vjr=o(" (RemBERT model)"),Fjr=l(),D3=a("li"),w0e=a("strong"),Tjr=o("roberta"),Mjr=o(" \u2014 "),Qee=a("a"),Ejr=o("TFRobertaForMultipleChoice"),Cjr=o(" (RoBERTa model)"),wjr=l(),G3=a("li"),A0e=a("strong"),Ajr=o("roformer"),Ljr=o(" \u2014 "),Uee=a("a"),yjr=o("TFRoFormerForMultipleChoice"),xjr=o(" (RoFormer model)"),$jr=l(),O3=a("li"),L0e=a("strong"),kjr=o("xlm"),Sjr=o(" \u2014 "),Hee=a("a"),Rjr=o("TFXLMForMultipleChoice"),Pjr=o(" (XLM model)"),Bjr=l(),V3=a("li"),y0e=a("strong"),Ijr=o("xlm-roberta"),Njr=o(" \u2014 "),Jee=a("a"),qjr=o("TFXLMRobertaForMultipleChoice"),jjr=o(" (XLM-RoBERTa model)"),Djr=l(),X3=a("li"),x0e=a("strong"),Gjr=o("xlnet"),Ojr=o(" \u2014 "),Yee=a("a"),Vjr=o("TFXLNetForMultipleChoice"),Xjr=o(" (XLNet model)"),zjr=l(),F(z3.$$.fragment),_He=l(),Zc=a("h2"),W3=a("a"),$0e=a("span"),F(J$.$$.fragment),Wjr=l(),k0e=a("span"),Qjr=o("TFAutoModelForNextSentencePrediction"),uHe=l(),gr=a("div"),F(Y$.$$.fragment),Ujr=l(),ef=a("p"),Hjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kee=a("a"),Jjr=o("from_pretrained()"),Yjr=o(" class method or the "),Zee=a("a"),Kjr=o("from_config()"),Zjr=o(` class
method.`),eDr=l(),K$=a("p"),oDr=o("This class cannot be instantiated directly using "),S0e=a("code"),rDr=o("__init__()"),tDr=o(" (throws an error)."),aDr=l(),Qt=a("div"),F(Z$.$$.fragment),nDr=l(),R0e=a("p"),sDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lDr=l(),of=a("p"),iDr=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),dDr=o("not"),cDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=a("a"),fDr=o("from_pretrained()"),mDr=o(" to load the model weights."),gDr=l(),F(Q3.$$.fragment),hDr=l(),Or=a("div"),F(ek.$$.fragment),pDr=l(),B0e=a("p"),_Dr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uDr=l(),wn=a("p"),bDr=o("The model class to instantiate is selected based on the "),I0e=a("code"),vDr=o("model_type"),FDr=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),TDr=o("pretrained_model_name_or_path"),MDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),EDr=o("pretrained_model_name_or_path"),CDr=o(":"),wDr=l(),ok=a("ul"),U3=a("li"),j0e=a("strong"),ADr=o("bert"),LDr=o(" \u2014 "),ooe=a("a"),yDr=o("TFBertForNextSentencePrediction"),xDr=o(" (BERT model)"),$Dr=l(),H3=a("li"),D0e=a("strong"),kDr=o("mobilebert"),SDr=o(" \u2014 "),roe=a("a"),RDr=o("TFMobileBertForNextSentencePrediction"),PDr=o(" (MobileBERT model)"),BDr=l(),F(J3.$$.fragment),bHe=l(),rf=a("h2"),Y3=a("a"),G0e=a("span"),F(rk.$$.fragment),IDr=l(),O0e=a("span"),NDr=o("TFAutoModelForTableQuestionAnswering"),vHe=l(),hr=a("div"),F(tk.$$.fragment),qDr=l(),tf=a("p"),jDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),toe=a("a"),DDr=o("from_pretrained()"),GDr=o(" class method or the "),aoe=a("a"),ODr=o("from_config()"),VDr=o(` class
method.`),XDr=l(),ak=a("p"),zDr=o("This class cannot be instantiated directly using "),V0e=a("code"),WDr=o("__init__()"),QDr=o(" (throws an error)."),UDr=l(),Ut=a("div"),F(nk.$$.fragment),HDr=l(),X0e=a("p"),JDr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),YDr=l(),af=a("p"),KDr=o(`Note:
Loading a model from its configuration file does `),z0e=a("strong"),ZDr=o("not"),eGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),oGr=o("from_pretrained()"),rGr=o(" to load the model weights."),tGr=l(),F(K3.$$.fragment),aGr=l(),Vr=a("div"),F(sk.$$.fragment),nGr=l(),W0e=a("p"),sGr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lGr=l(),An=a("p"),iGr=o("The model class to instantiate is selected based on the "),Q0e=a("code"),dGr=o("model_type"),cGr=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),fGr=o("pretrained_model_name_or_path"),mGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),gGr=o("pretrained_model_name_or_path"),hGr=o(":"),pGr=l(),J0e=a("ul"),Z3=a("li"),Y0e=a("strong"),_Gr=o("tapas"),uGr=o(" \u2014 "),soe=a("a"),bGr=o("TFTapasForQuestionAnswering"),vGr=o(" (TAPAS model)"),FGr=l(),F(e0.$$.fragment),FHe=l(),nf=a("h2"),o0=a("a"),K0e=a("span"),F(lk.$$.fragment),TGr=l(),Z0e=a("span"),MGr=o("TFAutoModelForTokenClassification"),THe=l(),pr=a("div"),F(ik.$$.fragment),EGr=l(),sf=a("p"),CGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),loe=a("a"),wGr=o("from_pretrained()"),AGr=o(" class method or the "),ioe=a("a"),LGr=o("from_config()"),yGr=o(` class
method.`),xGr=l(),dk=a("p"),$Gr=o("This class cannot be instantiated directly using "),ewe=a("code"),kGr=o("__init__()"),SGr=o(" (throws an error)."),RGr=l(),Ht=a("div"),F(ck.$$.fragment),PGr=l(),owe=a("p"),BGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IGr=l(),lf=a("p"),NGr=o(`Note:
Loading a model from its configuration file does `),rwe=a("strong"),qGr=o("not"),jGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=a("a"),DGr=o("from_pretrained()"),GGr=o(" to load the model weights."),OGr=l(),F(r0.$$.fragment),VGr=l(),Xr=a("div"),F(fk.$$.fragment),XGr=l(),twe=a("p"),zGr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WGr=l(),Ln=a("p"),QGr=o("The model class to instantiate is selected based on the "),awe=a("code"),UGr=o("model_type"),HGr=o(` property of the config object (either
passed as an argument or loaded from `),nwe=a("code"),JGr=o("pretrained_model_name_or_path"),YGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),swe=a("code"),KGr=o("pretrained_model_name_or_path"),ZGr=o(":"),eOr=l(),ce=a("ul"),t0=a("li"),lwe=a("strong"),oOr=o("albert"),rOr=o(" \u2014 "),coe=a("a"),tOr=o("TFAlbertForTokenClassification"),aOr=o(" (ALBERT model)"),nOr=l(),a0=a("li"),iwe=a("strong"),sOr=o("bert"),lOr=o(" \u2014 "),foe=a("a"),iOr=o("TFBertForTokenClassification"),dOr=o(" (BERT model)"),cOr=l(),n0=a("li"),dwe=a("strong"),fOr=o("camembert"),mOr=o(" \u2014 "),moe=a("a"),gOr=o("TFCamembertForTokenClassification"),hOr=o(" (CamemBERT model)"),pOr=l(),s0=a("li"),cwe=a("strong"),_Or=o("convbert"),uOr=o(" \u2014 "),goe=a("a"),bOr=o("TFConvBertForTokenClassification"),vOr=o(" (ConvBERT model)"),FOr=l(),l0=a("li"),fwe=a("strong"),TOr=o("deberta"),MOr=o(" \u2014 "),hoe=a("a"),EOr=o("TFDebertaForTokenClassification"),COr=o(" (DeBERTa model)"),wOr=l(),i0=a("li"),mwe=a("strong"),AOr=o("deberta-v2"),LOr=o(" \u2014 "),poe=a("a"),yOr=o("TFDebertaV2ForTokenClassification"),xOr=o(" (DeBERTa-v2 model)"),$Or=l(),d0=a("li"),gwe=a("strong"),kOr=o("distilbert"),SOr=o(" \u2014 "),_oe=a("a"),ROr=o("TFDistilBertForTokenClassification"),POr=o(" (DistilBERT model)"),BOr=l(),c0=a("li"),hwe=a("strong"),IOr=o("electra"),NOr=o(" \u2014 "),uoe=a("a"),qOr=o("TFElectraForTokenClassification"),jOr=o(" (ELECTRA model)"),DOr=l(),f0=a("li"),pwe=a("strong"),GOr=o("flaubert"),OOr=o(" \u2014 "),boe=a("a"),VOr=o("TFFlaubertForTokenClassification"),XOr=o(" (FlauBERT model)"),zOr=l(),m0=a("li"),_we=a("strong"),WOr=o("funnel"),QOr=o(" \u2014 "),voe=a("a"),UOr=o("TFFunnelForTokenClassification"),HOr=o(" (Funnel Transformer model)"),JOr=l(),g0=a("li"),uwe=a("strong"),YOr=o("layoutlm"),KOr=o(" \u2014 "),Foe=a("a"),ZOr=o("TFLayoutLMForTokenClassification"),eVr=o(" (LayoutLM model)"),oVr=l(),h0=a("li"),bwe=a("strong"),rVr=o("longformer"),tVr=o(" \u2014 "),Toe=a("a"),aVr=o("TFLongformerForTokenClassification"),nVr=o(" (Longformer model)"),sVr=l(),p0=a("li"),vwe=a("strong"),lVr=o("mobilebert"),iVr=o(" \u2014 "),Moe=a("a"),dVr=o("TFMobileBertForTokenClassification"),cVr=o(" (MobileBERT model)"),fVr=l(),_0=a("li"),Fwe=a("strong"),mVr=o("mpnet"),gVr=o(" \u2014 "),Eoe=a("a"),hVr=o("TFMPNetForTokenClassification"),pVr=o(" (MPNet model)"),_Vr=l(),u0=a("li"),Twe=a("strong"),uVr=o("rembert"),bVr=o(" \u2014 "),Coe=a("a"),vVr=o("TFRemBertForTokenClassification"),FVr=o(" (RemBERT model)"),TVr=l(),b0=a("li"),Mwe=a("strong"),MVr=o("roberta"),EVr=o(" \u2014 "),woe=a("a"),CVr=o("TFRobertaForTokenClassification"),wVr=o(" (RoBERTa model)"),AVr=l(),v0=a("li"),Ewe=a("strong"),LVr=o("roformer"),yVr=o(" \u2014 "),Aoe=a("a"),xVr=o("TFRoFormerForTokenClassification"),$Vr=o(" (RoFormer model)"),kVr=l(),F0=a("li"),Cwe=a("strong"),SVr=o("xlm"),RVr=o(" \u2014 "),Loe=a("a"),PVr=o("TFXLMForTokenClassification"),BVr=o(" (XLM model)"),IVr=l(),T0=a("li"),wwe=a("strong"),NVr=o("xlm-roberta"),qVr=o(" \u2014 "),yoe=a("a"),jVr=o("TFXLMRobertaForTokenClassification"),DVr=o(" (XLM-RoBERTa model)"),GVr=l(),M0=a("li"),Awe=a("strong"),OVr=o("xlnet"),VVr=o(" \u2014 "),xoe=a("a"),XVr=o("TFXLNetForTokenClassification"),zVr=o(" (XLNet model)"),WVr=l(),F(E0.$$.fragment),MHe=l(),df=a("h2"),C0=a("a"),Lwe=a("span"),F(mk.$$.fragment),QVr=l(),ywe=a("span"),UVr=o("TFAutoModelForQuestionAnswering"),EHe=l(),_r=a("div"),F(gk.$$.fragment),HVr=l(),cf=a("p"),JVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=a("a"),YVr=o("from_pretrained()"),KVr=o(" class method or the "),koe=a("a"),ZVr=o("from_config()"),eXr=o(` class
method.`),oXr=l(),hk=a("p"),rXr=o("This class cannot be instantiated directly using "),xwe=a("code"),tXr=o("__init__()"),aXr=o(" (throws an error)."),nXr=l(),Jt=a("div"),F(pk.$$.fragment),sXr=l(),$we=a("p"),lXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iXr=l(),ff=a("p"),dXr=o(`Note:
Loading a model from its configuration file does `),kwe=a("strong"),cXr=o("not"),fXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("a"),mXr=o("from_pretrained()"),gXr=o(" to load the model weights."),hXr=l(),F(w0.$$.fragment),pXr=l(),zr=a("div"),F(_k.$$.fragment),_Xr=l(),Swe=a("p"),uXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bXr=l(),yn=a("p"),vXr=o("The model class to instantiate is selected based on the "),Rwe=a("code"),FXr=o("model_type"),TXr=o(` property of the config object (either
passed as an argument or loaded from `),Pwe=a("code"),MXr=o("pretrained_model_name_or_path"),EXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bwe=a("code"),CXr=o("pretrained_model_name_or_path"),wXr=o(":"),AXr=l(),fe=a("ul"),A0=a("li"),Iwe=a("strong"),LXr=o("albert"),yXr=o(" \u2014 "),Roe=a("a"),xXr=o("TFAlbertForQuestionAnswering"),$Xr=o(" (ALBERT model)"),kXr=l(),L0=a("li"),Nwe=a("strong"),SXr=o("bert"),RXr=o(" \u2014 "),Poe=a("a"),PXr=o("TFBertForQuestionAnswering"),BXr=o(" (BERT model)"),IXr=l(),y0=a("li"),qwe=a("strong"),NXr=o("camembert"),qXr=o(" \u2014 "),Boe=a("a"),jXr=o("TFCamembertForQuestionAnswering"),DXr=o(" (CamemBERT model)"),GXr=l(),x0=a("li"),jwe=a("strong"),OXr=o("convbert"),VXr=o(" \u2014 "),Ioe=a("a"),XXr=o("TFConvBertForQuestionAnswering"),zXr=o(" (ConvBERT model)"),WXr=l(),$0=a("li"),Dwe=a("strong"),QXr=o("deberta"),UXr=o(" \u2014 "),Noe=a("a"),HXr=o("TFDebertaForQuestionAnswering"),JXr=o(" (DeBERTa model)"),YXr=l(),k0=a("li"),Gwe=a("strong"),KXr=o("deberta-v2"),ZXr=o(" \u2014 "),qoe=a("a"),ezr=o("TFDebertaV2ForQuestionAnswering"),ozr=o(" (DeBERTa-v2 model)"),rzr=l(),S0=a("li"),Owe=a("strong"),tzr=o("distilbert"),azr=o(" \u2014 "),joe=a("a"),nzr=o("TFDistilBertForQuestionAnswering"),szr=o(" (DistilBERT model)"),lzr=l(),R0=a("li"),Vwe=a("strong"),izr=o("electra"),dzr=o(" \u2014 "),Doe=a("a"),czr=o("TFElectraForQuestionAnswering"),fzr=o(" (ELECTRA model)"),mzr=l(),P0=a("li"),Xwe=a("strong"),gzr=o("flaubert"),hzr=o(" \u2014 "),Goe=a("a"),pzr=o("TFFlaubertForQuestionAnsweringSimple"),_zr=o(" (FlauBERT model)"),uzr=l(),B0=a("li"),zwe=a("strong"),bzr=o("funnel"),vzr=o(" \u2014 "),Ooe=a("a"),Fzr=o("TFFunnelForQuestionAnswering"),Tzr=o(" (Funnel Transformer model)"),Mzr=l(),I0=a("li"),Wwe=a("strong"),Ezr=o("gptj"),Czr=o(" \u2014 "),Voe=a("a"),wzr=o("TFGPTJForQuestionAnswering"),Azr=o(" (GPT-J model)"),Lzr=l(),N0=a("li"),Qwe=a("strong"),yzr=o("longformer"),xzr=o(" \u2014 "),Xoe=a("a"),$zr=o("TFLongformerForQuestionAnswering"),kzr=o(" (Longformer model)"),Szr=l(),q0=a("li"),Uwe=a("strong"),Rzr=o("mobilebert"),Pzr=o(" \u2014 "),zoe=a("a"),Bzr=o("TFMobileBertForQuestionAnswering"),Izr=o(" (MobileBERT model)"),Nzr=l(),j0=a("li"),Hwe=a("strong"),qzr=o("mpnet"),jzr=o(" \u2014 "),Woe=a("a"),Dzr=o("TFMPNetForQuestionAnswering"),Gzr=o(" (MPNet model)"),Ozr=l(),D0=a("li"),Jwe=a("strong"),Vzr=o("rembert"),Xzr=o(" \u2014 "),Qoe=a("a"),zzr=o("TFRemBertForQuestionAnswering"),Wzr=o(" (RemBERT model)"),Qzr=l(),G0=a("li"),Ywe=a("strong"),Uzr=o("roberta"),Hzr=o(" \u2014 "),Uoe=a("a"),Jzr=o("TFRobertaForQuestionAnswering"),Yzr=o(" (RoBERTa model)"),Kzr=l(),O0=a("li"),Kwe=a("strong"),Zzr=o("roformer"),eWr=o(" \u2014 "),Hoe=a("a"),oWr=o("TFRoFormerForQuestionAnswering"),rWr=o(" (RoFormer model)"),tWr=l(),V0=a("li"),Zwe=a("strong"),aWr=o("xlm"),nWr=o(" \u2014 "),Joe=a("a"),sWr=o("TFXLMForQuestionAnsweringSimple"),lWr=o(" (XLM model)"),iWr=l(),X0=a("li"),e6e=a("strong"),dWr=o("xlm-roberta"),cWr=o(" \u2014 "),Yoe=a("a"),fWr=o("TFXLMRobertaForQuestionAnswering"),mWr=o(" (XLM-RoBERTa model)"),gWr=l(),z0=a("li"),o6e=a("strong"),hWr=o("xlnet"),pWr=o(" \u2014 "),Koe=a("a"),_Wr=o("TFXLNetForQuestionAnsweringSimple"),uWr=o(" (XLNet model)"),bWr=l(),F(W0.$$.fragment),CHe=l(),mf=a("h2"),Q0=a("a"),r6e=a("span"),F(uk.$$.fragment),vWr=l(),t6e=a("span"),FWr=o("TFAutoModelForVision2Seq"),wHe=l(),ur=a("div"),F(bk.$$.fragment),TWr=l(),gf=a("p"),MWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zoe=a("a"),EWr=o("from_pretrained()"),CWr=o(" class method or the "),ere=a("a"),wWr=o("from_config()"),AWr=o(` class
method.`),LWr=l(),vk=a("p"),yWr=o("This class cannot be instantiated directly using "),a6e=a("code"),xWr=o("__init__()"),$Wr=o(" (throws an error)."),kWr=l(),Yt=a("div"),F(Fk.$$.fragment),SWr=l(),n6e=a("p"),RWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PWr=l(),hf=a("p"),BWr=o(`Note:
Loading a model from its configuration file does `),s6e=a("strong"),IWr=o("not"),NWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=a("a"),qWr=o("from_pretrained()"),jWr=o(" to load the model weights."),DWr=l(),F(U0.$$.fragment),GWr=l(),Wr=a("div"),F(Tk.$$.fragment),OWr=l(),l6e=a("p"),VWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XWr=l(),xn=a("p"),zWr=o("The model class to instantiate is selected based on the "),i6e=a("code"),WWr=o("model_type"),QWr=o(` property of the config object (either
passed as an argument or loaded from `),d6e=a("code"),UWr=o("pretrained_model_name_or_path"),HWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=a("code"),JWr=o("pretrained_model_name_or_path"),YWr=o(":"),KWr=l(),f6e=a("ul"),H0=a("li"),m6e=a("strong"),ZWr=o("vision-encoder-decoder"),eQr=o(" \u2014 "),rre=a("a"),oQr=o("TFVisionEncoderDecoderModel"),rQr=o(" (Vision Encoder decoder model)"),tQr=l(),F(J0.$$.fragment),AHe=l(),pf=a("h2"),Y0=a("a"),g6e=a("span"),F(Mk.$$.fragment),aQr=l(),h6e=a("span"),nQr=o("TFAutoModelForSpeechSeq2Seq"),LHe=l(),br=a("div"),F(Ek.$$.fragment),sQr=l(),_f=a("p"),lQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tre=a("a"),iQr=o("from_pretrained()"),dQr=o(" class method or the "),are=a("a"),cQr=o("from_config()"),fQr=o(` class
method.`),mQr=l(),Ck=a("p"),gQr=o("This class cannot be instantiated directly using "),p6e=a("code"),hQr=o("__init__()"),pQr=o(" (throws an error)."),_Qr=l(),Kt=a("div"),F(wk.$$.fragment),uQr=l(),_6e=a("p"),bQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vQr=l(),uf=a("p"),FQr=o(`Note:
Loading a model from its configuration file does `),u6e=a("strong"),TQr=o("not"),MQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("a"),EQr=o("from_pretrained()"),CQr=o(" to load the model weights."),wQr=l(),F(K0.$$.fragment),AQr=l(),Qr=a("div"),F(Ak.$$.fragment),LQr=l(),b6e=a("p"),yQr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),xQr=l(),$n=a("p"),$Qr=o("The model class to instantiate is selected based on the "),v6e=a("code"),kQr=o("model_type"),SQr=o(` property of the config object (either
passed as an argument or loaded from `),F6e=a("code"),RQr=o("pretrained_model_name_or_path"),PQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=a("code"),BQr=o("pretrained_model_name_or_path"),IQr=o(":"),NQr=l(),M6e=a("ul"),Z0=a("li"),E6e=a("strong"),qQr=o("speech_to_text"),jQr=o(" \u2014 "),sre=a("a"),DQr=o("TFSpeech2TextForConditionalGeneration"),GQr=o(" (Speech2Text model)"),OQr=l(),F(ew.$$.fragment),yHe=l(),bf=a("h2"),ow=a("a"),C6e=a("span"),F(Lk.$$.fragment),VQr=l(),w6e=a("span"),XQr=o("FlaxAutoModel"),xHe=l(),vr=a("div"),F(yk.$$.fragment),zQr=l(),vf=a("p"),WQr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lre=a("a"),QQr=o("from_pretrained()"),UQr=o(" class method or the "),ire=a("a"),HQr=o("from_config()"),JQr=o(` class
method.`),YQr=l(),xk=a("p"),KQr=o("This class cannot be instantiated directly using "),A6e=a("code"),ZQr=o("__init__()"),eUr=o(" (throws an error)."),oUr=l(),Zt=a("div"),F($k.$$.fragment),rUr=l(),L6e=a("p"),tUr=o("Instantiates one of the base model classes of the library from a configuration."),aUr=l(),Ff=a("p"),nUr=o(`Note:
Loading a model from its configuration file does `),y6e=a("strong"),sUr=o("not"),lUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=a("a"),iUr=o("from_pretrained()"),dUr=o(" to load the model weights."),cUr=l(),F(rw.$$.fragment),fUr=l(),Ur=a("div"),F(kk.$$.fragment),mUr=l(),x6e=a("p"),gUr=o("Instantiate one of the base model classes of the library from a pretrained model."),hUr=l(),kn=a("p"),pUr=o("The model class to instantiate is selected based on the "),$6e=a("code"),_Ur=o("model_type"),uUr=o(` property of the config object (either
passed as an argument or loaded from `),k6e=a("code"),bUr=o("pretrained_model_name_or_path"),vUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S6e=a("code"),FUr=o("pretrained_model_name_or_path"),TUr=o(":"),MUr=l(),re=a("ul"),tw=a("li"),R6e=a("strong"),EUr=o("albert"),CUr=o(" \u2014 "),cre=a("a"),wUr=o("FlaxAlbertModel"),AUr=o(" (ALBERT model)"),LUr=l(),aw=a("li"),P6e=a("strong"),yUr=o("bart"),xUr=o(" \u2014 "),fre=a("a"),$Ur=o("FlaxBartModel"),kUr=o(" (BART model)"),SUr=l(),nw=a("li"),B6e=a("strong"),RUr=o("beit"),PUr=o(" \u2014 "),mre=a("a"),BUr=o("FlaxBeitModel"),IUr=o(" (BEiT model)"),NUr=l(),sw=a("li"),I6e=a("strong"),qUr=o("bert"),jUr=o(" \u2014 "),gre=a("a"),DUr=o("FlaxBertModel"),GUr=o(" (BERT model)"),OUr=l(),lw=a("li"),N6e=a("strong"),VUr=o("big_bird"),XUr=o(" \u2014 "),hre=a("a"),zUr=o("FlaxBigBirdModel"),WUr=o(" (BigBird model)"),QUr=l(),iw=a("li"),q6e=a("strong"),UUr=o("blenderbot"),HUr=o(" \u2014 "),pre=a("a"),JUr=o("FlaxBlenderbotModel"),YUr=o(" (Blenderbot model)"),KUr=l(),dw=a("li"),j6e=a("strong"),ZUr=o("blenderbot-small"),eHr=o(" \u2014 "),_re=a("a"),oHr=o("FlaxBlenderbotSmallModel"),rHr=o(" (BlenderbotSmall model)"),tHr=l(),cw=a("li"),D6e=a("strong"),aHr=o("clip"),nHr=o(" \u2014 "),ure=a("a"),sHr=o("FlaxCLIPModel"),lHr=o(" (CLIP model)"),iHr=l(),fw=a("li"),G6e=a("strong"),dHr=o("distilbert"),cHr=o(" \u2014 "),bre=a("a"),fHr=o("FlaxDistilBertModel"),mHr=o(" (DistilBERT model)"),gHr=l(),mw=a("li"),O6e=a("strong"),hHr=o("electra"),pHr=o(" \u2014 "),vre=a("a"),_Hr=o("FlaxElectraModel"),uHr=o(" (ELECTRA model)"),bHr=l(),gw=a("li"),V6e=a("strong"),vHr=o("gpt2"),FHr=o(" \u2014 "),Fre=a("a"),THr=o("FlaxGPT2Model"),MHr=o(" (OpenAI GPT-2 model)"),EHr=l(),hw=a("li"),X6e=a("strong"),CHr=o("gpt_neo"),wHr=o(" \u2014 "),Tre=a("a"),AHr=o("FlaxGPTNeoModel"),LHr=o(" (GPT Neo model)"),yHr=l(),pw=a("li"),z6e=a("strong"),xHr=o("gptj"),$Hr=o(" \u2014 "),Mre=a("a"),kHr=o("FlaxGPTJModel"),SHr=o(" (GPT-J model)"),RHr=l(),_w=a("li"),W6e=a("strong"),PHr=o("longt5"),BHr=o(" \u2014 "),Ere=a("a"),IHr=o("FlaxLongT5Model"),NHr=o(" (LongT5 model)"),qHr=l(),uw=a("li"),Q6e=a("strong"),jHr=o("marian"),DHr=o(" \u2014 "),Cre=a("a"),GHr=o("FlaxMarianModel"),OHr=o(" (Marian model)"),VHr=l(),bw=a("li"),U6e=a("strong"),XHr=o("mbart"),zHr=o(" \u2014 "),wre=a("a"),WHr=o("FlaxMBartModel"),QHr=o(" (mBART model)"),UHr=l(),vw=a("li"),H6e=a("strong"),HHr=o("mt5"),JHr=o(" \u2014 "),Are=a("a"),YHr=o("FlaxMT5Model"),KHr=o(" (MT5 model)"),ZHr=l(),Fw=a("li"),J6e=a("strong"),eJr=o("opt"),oJr=o(" \u2014 "),Lre=a("a"),rJr=o("FlaxOPTModel"),tJr=o(" (OPT model)"),aJr=l(),Tw=a("li"),Y6e=a("strong"),nJr=o("pegasus"),sJr=o(" \u2014 "),yre=a("a"),lJr=o("FlaxPegasusModel"),iJr=o(" (Pegasus model)"),dJr=l(),Mw=a("li"),K6e=a("strong"),cJr=o("roberta"),fJr=o(" \u2014 "),xre=a("a"),mJr=o("FlaxRobertaModel"),gJr=o(" (RoBERTa model)"),hJr=l(),Ew=a("li"),Z6e=a("strong"),pJr=o("roformer"),_Jr=o(" \u2014 "),$re=a("a"),uJr=o("FlaxRoFormerModel"),bJr=o(" (RoFormer model)"),vJr=l(),Cw=a("li"),eAe=a("strong"),FJr=o("t5"),TJr=o(" \u2014 "),kre=a("a"),MJr=o("FlaxT5Model"),EJr=o(" (T5 model)"),CJr=l(),ww=a("li"),oAe=a("strong"),wJr=o("vision-text-dual-encoder"),AJr=o(" \u2014 "),Sre=a("a"),LJr=o("FlaxVisionTextDualEncoderModel"),yJr=o(" (VisionTextDualEncoder model)"),xJr=l(),Aw=a("li"),rAe=a("strong"),$Jr=o("vit"),kJr=o(" \u2014 "),Rre=a("a"),SJr=o("FlaxViTModel"),RJr=o(" (ViT model)"),PJr=l(),Lw=a("li"),tAe=a("strong"),BJr=o("wav2vec2"),IJr=o(" \u2014 "),Pre=a("a"),NJr=o("FlaxWav2Vec2Model"),qJr=o(" (Wav2Vec2 model)"),jJr=l(),yw=a("li"),aAe=a("strong"),DJr=o("xglm"),GJr=o(" \u2014 "),Bre=a("a"),OJr=o("FlaxXGLMModel"),VJr=o(" (XGLM model)"),XJr=l(),xw=a("li"),nAe=a("strong"),zJr=o("xlm-roberta"),WJr=o(" \u2014 "),Ire=a("a"),QJr=o("FlaxXLMRobertaModel"),UJr=o(" (XLM-RoBERTa model)"),HJr=l(),F($w.$$.fragment),$He=l(),Tf=a("h2"),kw=a("a"),sAe=a("span"),F(Sk.$$.fragment),JJr=l(),lAe=a("span"),YJr=o("FlaxAutoModelForCausalLM"),kHe=l(),Fr=a("div"),F(Rk.$$.fragment),KJr=l(),Mf=a("p"),ZJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nre=a("a"),eYr=o("from_pretrained()"),oYr=o(" class method or the "),qre=a("a"),rYr=o("from_config()"),tYr=o(` class
method.`),aYr=l(),Pk=a("p"),nYr=o("This class cannot be instantiated directly using "),iAe=a("code"),sYr=o("__init__()"),lYr=o(" (throws an error)."),iYr=l(),ea=a("div"),F(Bk.$$.fragment),dYr=l(),dAe=a("p"),cYr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fYr=l(),Ef=a("p"),mYr=o(`Note:
Loading a model from its configuration file does `),cAe=a("strong"),gYr=o("not"),hYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=a("a"),pYr=o("from_pretrained()"),_Yr=o(" to load the model weights."),uYr=l(),F(Sw.$$.fragment),bYr=l(),Hr=a("div"),F(Ik.$$.fragment),vYr=l(),fAe=a("p"),FYr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),TYr=l(),Sn=a("p"),MYr=o("The model class to instantiate is selected based on the "),mAe=a("code"),EYr=o("model_type"),CYr=o(` property of the config object (either
passed as an argument or loaded from `),gAe=a("code"),wYr=o("pretrained_model_name_or_path"),AYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=a("code"),LYr=o("pretrained_model_name_or_path"),yYr=o(":"),xYr=l(),xe=a("ul"),Rw=a("li"),pAe=a("strong"),$Yr=o("bart"),kYr=o(" \u2014 "),Dre=a("a"),SYr=o("FlaxBartForCausalLM"),RYr=o(" (BART model)"),PYr=l(),Pw=a("li"),_Ae=a("strong"),BYr=o("bert"),IYr=o(" \u2014 "),Gre=a("a"),NYr=o("FlaxBertForCausalLM"),qYr=o(" (BERT model)"),jYr=l(),Bw=a("li"),uAe=a("strong"),DYr=o("big_bird"),GYr=o(" \u2014 "),Ore=a("a"),OYr=o("FlaxBigBirdForCausalLM"),VYr=o(" (BigBird model)"),XYr=l(),Iw=a("li"),bAe=a("strong"),zYr=o("electra"),WYr=o(" \u2014 "),Vre=a("a"),QYr=o("FlaxElectraForCausalLM"),UYr=o(" (ELECTRA model)"),HYr=l(),Nw=a("li"),vAe=a("strong"),JYr=o("gpt2"),YYr=o(" \u2014 "),Xre=a("a"),KYr=o("FlaxGPT2LMHeadModel"),ZYr=o(" (OpenAI GPT-2 model)"),eKr=l(),qw=a("li"),FAe=a("strong"),oKr=o("gpt_neo"),rKr=o(" \u2014 "),zre=a("a"),tKr=o("FlaxGPTNeoForCausalLM"),aKr=o(" (GPT Neo model)"),nKr=l(),jw=a("li"),TAe=a("strong"),sKr=o("gptj"),lKr=o(" \u2014 "),Wre=a("a"),iKr=o("FlaxGPTJForCausalLM"),dKr=o(" (GPT-J model)"),cKr=l(),Dw=a("li"),MAe=a("strong"),fKr=o("opt"),mKr=o(" \u2014 "),Qre=a("a"),gKr=o("FlaxOPTForCausalLM"),hKr=o(" (OPT model)"),pKr=l(),Gw=a("li"),EAe=a("strong"),_Kr=o("roberta"),uKr=o(" \u2014 "),Ure=a("a"),bKr=o("FlaxRobertaForCausalLM"),vKr=o(" (RoBERTa model)"),FKr=l(),Ow=a("li"),CAe=a("strong"),TKr=o("xglm"),MKr=o(" \u2014 "),Hre=a("a"),EKr=o("FlaxXGLMForCausalLM"),CKr=o(" (XGLM model)"),wKr=l(),F(Vw.$$.fragment),SHe=l(),Cf=a("h2"),Xw=a("a"),wAe=a("span"),F(Nk.$$.fragment),AKr=l(),AAe=a("span"),LKr=o("FlaxAutoModelForPreTraining"),RHe=l(),Tr=a("div"),F(qk.$$.fragment),yKr=l(),wf=a("p"),xKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jre=a("a"),$Kr=o("from_pretrained()"),kKr=o(" class method or the "),Yre=a("a"),SKr=o("from_config()"),RKr=o(` class
method.`),PKr=l(),jk=a("p"),BKr=o("This class cannot be instantiated directly using "),LAe=a("code"),IKr=o("__init__()"),NKr=o(" (throws an error)."),qKr=l(),oa=a("div"),F(Dk.$$.fragment),jKr=l(),yAe=a("p"),DKr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GKr=l(),Af=a("p"),OKr=o(`Note:
Loading a model from its configuration file does `),xAe=a("strong"),VKr=o("not"),XKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kre=a("a"),zKr=o("from_pretrained()"),WKr=o(" to load the model weights."),QKr=l(),F(zw.$$.fragment),UKr=l(),Jr=a("div"),F(Gk.$$.fragment),HKr=l(),$Ae=a("p"),JKr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),YKr=l(),Rn=a("p"),KKr=o("The model class to instantiate is selected based on the "),kAe=a("code"),ZKr=o("model_type"),eZr=o(` property of the config object (either
passed as an argument or loaded from `),SAe=a("code"),oZr=o("pretrained_model_name_or_path"),rZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RAe=a("code"),tZr=o("pretrained_model_name_or_path"),aZr=o(":"),nZr=l(),Ee=a("ul"),Ww=a("li"),PAe=a("strong"),sZr=o("albert"),lZr=o(" \u2014 "),Zre=a("a"),iZr=o("FlaxAlbertForPreTraining"),dZr=o(" (ALBERT model)"),cZr=l(),Qw=a("li"),BAe=a("strong"),fZr=o("bart"),mZr=o(" \u2014 "),ete=a("a"),gZr=o("FlaxBartForConditionalGeneration"),hZr=o(" (BART model)"),pZr=l(),Uw=a("li"),IAe=a("strong"),_Zr=o("bert"),uZr=o(" \u2014 "),ote=a("a"),bZr=o("FlaxBertForPreTraining"),vZr=o(" (BERT model)"),FZr=l(),Hw=a("li"),NAe=a("strong"),TZr=o("big_bird"),MZr=o(" \u2014 "),rte=a("a"),EZr=o("FlaxBigBirdForPreTraining"),CZr=o(" (BigBird model)"),wZr=l(),Jw=a("li"),qAe=a("strong"),AZr=o("electra"),LZr=o(" \u2014 "),tte=a("a"),yZr=o("FlaxElectraForPreTraining"),xZr=o(" (ELECTRA model)"),$Zr=l(),Yw=a("li"),jAe=a("strong"),kZr=o("longt5"),SZr=o(" \u2014 "),ate=a("a"),RZr=o("FlaxLongT5ForConditionalGeneration"),PZr=o(" (LongT5 model)"),BZr=l(),Kw=a("li"),DAe=a("strong"),IZr=o("mbart"),NZr=o(" \u2014 "),nte=a("a"),qZr=o("FlaxMBartForConditionalGeneration"),jZr=o(" (mBART model)"),DZr=l(),Zw=a("li"),GAe=a("strong"),GZr=o("mt5"),OZr=o(" \u2014 "),ste=a("a"),VZr=o("FlaxMT5ForConditionalGeneration"),XZr=o(" (MT5 model)"),zZr=l(),e6=a("li"),OAe=a("strong"),WZr=o("roberta"),QZr=o(" \u2014 "),lte=a("a"),UZr=o("FlaxRobertaForMaskedLM"),HZr=o(" (RoBERTa model)"),JZr=l(),o6=a("li"),VAe=a("strong"),YZr=o("roformer"),KZr=o(" \u2014 "),ite=a("a"),ZZr=o("FlaxRoFormerForMaskedLM"),eet=o(" (RoFormer model)"),oet=l(),r6=a("li"),XAe=a("strong"),ret=o("t5"),tet=o(" \u2014 "),dte=a("a"),aet=o("FlaxT5ForConditionalGeneration"),net=o(" (T5 model)"),set=l(),t6=a("li"),zAe=a("strong"),iet=o("wav2vec2"),det=o(" \u2014 "),cte=a("a"),cet=o("FlaxWav2Vec2ForPreTraining"),fet=o(" (Wav2Vec2 model)"),met=l(),a6=a("li"),WAe=a("strong"),get=o("xlm-roberta"),het=o(" \u2014 "),fte=a("a"),pet=o("FlaxXLMRobertaForMaskedLM"),_et=o(" (XLM-RoBERTa model)"),uet=l(),F(n6.$$.fragment),PHe=l(),Lf=a("h2"),s6=a("a"),QAe=a("span"),F(Ok.$$.fragment),bet=l(),UAe=a("span"),vet=o("FlaxAutoModelForMaskedLM"),BHe=l(),Mr=a("div"),F(Vk.$$.fragment),Fet=l(),yf=a("p"),Tet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mte=a("a"),Met=o("from_pretrained()"),Eet=o(" class method or the "),gte=a("a"),Cet=o("from_config()"),wet=o(` class
method.`),Aet=l(),Xk=a("p"),Let=o("This class cannot be instantiated directly using "),HAe=a("code"),yet=o("__init__()"),xet=o(" (throws an error)."),$et=l(),ra=a("div"),F(zk.$$.fragment),ket=l(),JAe=a("p"),Set=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ret=l(),xf=a("p"),Pet=o(`Note:
Loading a model from its configuration file does `),YAe=a("strong"),Bet=o("not"),Iet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=a("a"),Net=o("from_pretrained()"),qet=o(" to load the model weights."),jet=l(),F(l6.$$.fragment),Det=l(),Yr=a("div"),F(Wk.$$.fragment),Get=l(),KAe=a("p"),Oet=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vet=l(),Pn=a("p"),Xet=o("The model class to instantiate is selected based on the "),ZAe=a("code"),zet=o("model_type"),Wet=o(` property of the config object (either
passed as an argument or loaded from `),eLe=a("code"),Qet=o("pretrained_model_name_or_path"),Uet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oLe=a("code"),Het=o("pretrained_model_name_or_path"),Jet=o(":"),Yet=l(),$e=a("ul"),i6=a("li"),rLe=a("strong"),Ket=o("albert"),Zet=o(" \u2014 "),pte=a("a"),eot=o("FlaxAlbertForMaskedLM"),oot=o(" (ALBERT model)"),rot=l(),d6=a("li"),tLe=a("strong"),tot=o("bart"),aot=o(" \u2014 "),_te=a("a"),not=o("FlaxBartForConditionalGeneration"),sot=o(" (BART model)"),lot=l(),c6=a("li"),aLe=a("strong"),iot=o("bert"),dot=o(" \u2014 "),ute=a("a"),cot=o("FlaxBertForMaskedLM"),fot=o(" (BERT model)"),mot=l(),f6=a("li"),nLe=a("strong"),got=o("big_bird"),hot=o(" \u2014 "),bte=a("a"),pot=o("FlaxBigBirdForMaskedLM"),_ot=o(" (BigBird model)"),uot=l(),m6=a("li"),sLe=a("strong"),bot=o("distilbert"),vot=o(" \u2014 "),vte=a("a"),Fot=o("FlaxDistilBertForMaskedLM"),Tot=o(" (DistilBERT model)"),Mot=l(),g6=a("li"),lLe=a("strong"),Eot=o("electra"),Cot=o(" \u2014 "),Fte=a("a"),wot=o("FlaxElectraForMaskedLM"),Aot=o(" (ELECTRA model)"),Lot=l(),h6=a("li"),iLe=a("strong"),yot=o("mbart"),xot=o(" \u2014 "),Tte=a("a"),$ot=o("FlaxMBartForConditionalGeneration"),kot=o(" (mBART model)"),Sot=l(),p6=a("li"),dLe=a("strong"),Rot=o("roberta"),Pot=o(" \u2014 "),Mte=a("a"),Bot=o("FlaxRobertaForMaskedLM"),Iot=o(" (RoBERTa model)"),Not=l(),_6=a("li"),cLe=a("strong"),qot=o("roformer"),jot=o(" \u2014 "),Ete=a("a"),Dot=o("FlaxRoFormerForMaskedLM"),Got=o(" (RoFormer model)"),Oot=l(),u6=a("li"),fLe=a("strong"),Vot=o("xlm-roberta"),Xot=o(" \u2014 "),Cte=a("a"),zot=o("FlaxXLMRobertaForMaskedLM"),Wot=o(" (XLM-RoBERTa model)"),Qot=l(),F(b6.$$.fragment),IHe=l(),$f=a("h2"),v6=a("a"),mLe=a("span"),F(Qk.$$.fragment),Uot=l(),gLe=a("span"),Hot=o("FlaxAutoModelForSeq2SeqLM"),NHe=l(),Er=a("div"),F(Uk.$$.fragment),Jot=l(),kf=a("p"),Yot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wte=a("a"),Kot=o("from_pretrained()"),Zot=o(" class method or the "),Ate=a("a"),ert=o("from_config()"),ort=o(` class
method.`),rrt=l(),Hk=a("p"),trt=o("This class cannot be instantiated directly using "),hLe=a("code"),art=o("__init__()"),nrt=o(" (throws an error)."),srt=l(),ta=a("div"),F(Jk.$$.fragment),lrt=l(),pLe=a("p"),irt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),drt=l(),Sf=a("p"),crt=o(`Note:
Loading a model from its configuration file does `),_Le=a("strong"),frt=o("not"),mrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lte=a("a"),grt=o("from_pretrained()"),hrt=o(" to load the model weights."),prt=l(),F(F6.$$.fragment),_rt=l(),Kr=a("div"),F(Yk.$$.fragment),urt=l(),uLe=a("p"),brt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),vrt=l(),Bn=a("p"),Frt=o("The model class to instantiate is selected based on the "),bLe=a("code"),Trt=o("model_type"),Mrt=o(` property of the config object (either
passed as an argument or loaded from `),vLe=a("code"),Ert=o("pretrained_model_name_or_path"),Crt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FLe=a("code"),wrt=o("pretrained_model_name_or_path"),Art=o(":"),Lrt=l(),ke=a("ul"),T6=a("li"),TLe=a("strong"),yrt=o("bart"),xrt=o(" \u2014 "),yte=a("a"),$rt=o("FlaxBartForConditionalGeneration"),krt=o(" (BART model)"),Srt=l(),M6=a("li"),MLe=a("strong"),Rrt=o("blenderbot"),Prt=o(" \u2014 "),xte=a("a"),Brt=o("FlaxBlenderbotForConditionalGeneration"),Irt=o(" (Blenderbot model)"),Nrt=l(),E6=a("li"),ELe=a("strong"),qrt=o("blenderbot-small"),jrt=o(" \u2014 "),$te=a("a"),Drt=o("FlaxBlenderbotSmallForConditionalGeneration"),Grt=o(" (BlenderbotSmall model)"),Ort=l(),C6=a("li"),CLe=a("strong"),Vrt=o("encoder-decoder"),Xrt=o(" \u2014 "),kte=a("a"),zrt=o("FlaxEncoderDecoderModel"),Wrt=o(" (Encoder decoder model)"),Qrt=l(),w6=a("li"),wLe=a("strong"),Urt=o("longt5"),Hrt=o(" \u2014 "),Ste=a("a"),Jrt=o("FlaxLongT5ForConditionalGeneration"),Yrt=o(" (LongT5 model)"),Krt=l(),A6=a("li"),ALe=a("strong"),Zrt=o("marian"),ett=o(" \u2014 "),Rte=a("a"),ott=o("FlaxMarianMTModel"),rtt=o(" (Marian model)"),ttt=l(),L6=a("li"),LLe=a("strong"),att=o("mbart"),ntt=o(" \u2014 "),Pte=a("a"),stt=o("FlaxMBartForConditionalGeneration"),ltt=o(" (mBART model)"),itt=l(),y6=a("li"),yLe=a("strong"),dtt=o("mt5"),ctt=o(" \u2014 "),Bte=a("a"),ftt=o("FlaxMT5ForConditionalGeneration"),mtt=o(" (MT5 model)"),gtt=l(),x6=a("li"),xLe=a("strong"),htt=o("pegasus"),ptt=o(" \u2014 "),Ite=a("a"),_tt=o("FlaxPegasusForConditionalGeneration"),utt=o(" (Pegasus model)"),btt=l(),$6=a("li"),$Le=a("strong"),vtt=o("t5"),Ftt=o(" \u2014 "),Nte=a("a"),Ttt=o("FlaxT5ForConditionalGeneration"),Mtt=o(" (T5 model)"),Ett=l(),F(k6.$$.fragment),qHe=l(),Rf=a("h2"),S6=a("a"),kLe=a("span"),F(Kk.$$.fragment),Ctt=l(),SLe=a("span"),wtt=o("FlaxAutoModelForSequenceClassification"),jHe=l(),Cr=a("div"),F(Zk.$$.fragment),Att=l(),Pf=a("p"),Ltt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qte=a("a"),ytt=o("from_pretrained()"),xtt=o(" class method or the "),jte=a("a"),$tt=o("from_config()"),ktt=o(` class
method.`),Stt=l(),eS=a("p"),Rtt=o("This class cannot be instantiated directly using "),RLe=a("code"),Ptt=o("__init__()"),Btt=o(" (throws an error)."),Itt=l(),aa=a("div"),F(oS.$$.fragment),Ntt=l(),PLe=a("p"),qtt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jtt=l(),Bf=a("p"),Dtt=o(`Note:
Loading a model from its configuration file does `),BLe=a("strong"),Gtt=o("not"),Ott=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=a("a"),Vtt=o("from_pretrained()"),Xtt=o(" to load the model weights."),ztt=l(),F(R6.$$.fragment),Wtt=l(),Zr=a("div"),F(rS.$$.fragment),Qtt=l(),ILe=a("p"),Utt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Htt=l(),In=a("p"),Jtt=o("The model class to instantiate is selected based on the "),NLe=a("code"),Ytt=o("model_type"),Ktt=o(` property of the config object (either
passed as an argument or loaded from `),qLe=a("code"),Ztt=o("pretrained_model_name_or_path"),eat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jLe=a("code"),oat=o("pretrained_model_name_or_path"),rat=o(":"),tat=l(),Se=a("ul"),P6=a("li"),DLe=a("strong"),aat=o("albert"),nat=o(" \u2014 "),Gte=a("a"),sat=o("FlaxAlbertForSequenceClassification"),lat=o(" (ALBERT model)"),iat=l(),B6=a("li"),GLe=a("strong"),dat=o("bart"),cat=o(" \u2014 "),Ote=a("a"),fat=o("FlaxBartForSequenceClassification"),mat=o(" (BART model)"),gat=l(),I6=a("li"),OLe=a("strong"),hat=o("bert"),pat=o(" \u2014 "),Vte=a("a"),_at=o("FlaxBertForSequenceClassification"),uat=o(" (BERT model)"),bat=l(),N6=a("li"),VLe=a("strong"),vat=o("big_bird"),Fat=o(" \u2014 "),Xte=a("a"),Tat=o("FlaxBigBirdForSequenceClassification"),Mat=o(" (BigBird model)"),Eat=l(),q6=a("li"),XLe=a("strong"),Cat=o("distilbert"),wat=o(" \u2014 "),zte=a("a"),Aat=o("FlaxDistilBertForSequenceClassification"),Lat=o(" (DistilBERT model)"),yat=l(),j6=a("li"),zLe=a("strong"),xat=o("electra"),$at=o(" \u2014 "),Wte=a("a"),kat=o("FlaxElectraForSequenceClassification"),Sat=o(" (ELECTRA model)"),Rat=l(),D6=a("li"),WLe=a("strong"),Pat=o("mbart"),Bat=o(" \u2014 "),Qte=a("a"),Iat=o("FlaxMBartForSequenceClassification"),Nat=o(" (mBART model)"),qat=l(),G6=a("li"),QLe=a("strong"),jat=o("roberta"),Dat=o(" \u2014 "),Ute=a("a"),Gat=o("FlaxRobertaForSequenceClassification"),Oat=o(" (RoBERTa model)"),Vat=l(),O6=a("li"),ULe=a("strong"),Xat=o("roformer"),zat=o(" \u2014 "),Hte=a("a"),Wat=o("FlaxRoFormerForSequenceClassification"),Qat=o(" (RoFormer model)"),Uat=l(),V6=a("li"),HLe=a("strong"),Hat=o("xlm-roberta"),Jat=o(" \u2014 "),Jte=a("a"),Yat=o("FlaxXLMRobertaForSequenceClassification"),Kat=o(" (XLM-RoBERTa model)"),Zat=l(),F(X6.$$.fragment),DHe=l(),If=a("h2"),z6=a("a"),JLe=a("span"),F(tS.$$.fragment),ent=l(),YLe=a("span"),ont=o("FlaxAutoModelForQuestionAnswering"),GHe=l(),wr=a("div"),F(aS.$$.fragment),rnt=l(),Nf=a("p"),tnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yte=a("a"),ant=o("from_pretrained()"),nnt=o(" class method or the "),Kte=a("a"),snt=o("from_config()"),lnt=o(` class
method.`),int=l(),nS=a("p"),dnt=o("This class cannot be instantiated directly using "),KLe=a("code"),cnt=o("__init__()"),fnt=o(" (throws an error)."),mnt=l(),na=a("div"),F(sS.$$.fragment),gnt=l(),ZLe=a("p"),hnt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pnt=l(),qf=a("p"),_nt=o(`Note:
Loading a model from its configuration file does `),eye=a("strong"),unt=o("not"),bnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zte=a("a"),vnt=o("from_pretrained()"),Fnt=o(" to load the model weights."),Tnt=l(),F(W6.$$.fragment),Mnt=l(),et=a("div"),F(lS.$$.fragment),Ent=l(),oye=a("p"),Cnt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wnt=l(),Nn=a("p"),Ant=o("The model class to instantiate is selected based on the "),rye=a("code"),Lnt=o("model_type"),ynt=o(` property of the config object (either
passed as an argument or loaded from `),tye=a("code"),xnt=o("pretrained_model_name_or_path"),$nt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aye=a("code"),knt=o("pretrained_model_name_or_path"),Snt=o(":"),Rnt=l(),Re=a("ul"),Q6=a("li"),nye=a("strong"),Pnt=o("albert"),Bnt=o(" \u2014 "),eae=a("a"),Int=o("FlaxAlbertForQuestionAnswering"),Nnt=o(" (ALBERT model)"),qnt=l(),U6=a("li"),sye=a("strong"),jnt=o("bart"),Dnt=o(" \u2014 "),oae=a("a"),Gnt=o("FlaxBartForQuestionAnswering"),Ont=o(" (BART model)"),Vnt=l(),H6=a("li"),lye=a("strong"),Xnt=o("bert"),znt=o(" \u2014 "),rae=a("a"),Wnt=o("FlaxBertForQuestionAnswering"),Qnt=o(" (BERT model)"),Unt=l(),J6=a("li"),iye=a("strong"),Hnt=o("big_bird"),Jnt=o(" \u2014 "),tae=a("a"),Ynt=o("FlaxBigBirdForQuestionAnswering"),Knt=o(" (BigBird model)"),Znt=l(),Y6=a("li"),dye=a("strong"),est=o("distilbert"),ost=o(" \u2014 "),aae=a("a"),rst=o("FlaxDistilBertForQuestionAnswering"),tst=o(" (DistilBERT model)"),ast=l(),K6=a("li"),cye=a("strong"),nst=o("electra"),sst=o(" \u2014 "),nae=a("a"),lst=o("FlaxElectraForQuestionAnswering"),ist=o(" (ELECTRA model)"),dst=l(),Z6=a("li"),fye=a("strong"),cst=o("mbart"),fst=o(" \u2014 "),sae=a("a"),mst=o("FlaxMBartForQuestionAnswering"),gst=o(" (mBART model)"),hst=l(),eA=a("li"),mye=a("strong"),pst=o("roberta"),_st=o(" \u2014 "),lae=a("a"),ust=o("FlaxRobertaForQuestionAnswering"),bst=o(" (RoBERTa model)"),vst=l(),oA=a("li"),gye=a("strong"),Fst=o("roformer"),Tst=o(" \u2014 "),iae=a("a"),Mst=o("FlaxRoFormerForQuestionAnswering"),Est=o(" (RoFormer model)"),Cst=l(),rA=a("li"),hye=a("strong"),wst=o("xlm-roberta"),Ast=o(" \u2014 "),dae=a("a"),Lst=o("FlaxXLMRobertaForQuestionAnswering"),yst=o(" (XLM-RoBERTa model)"),xst=l(),F(tA.$$.fragment),OHe=l(),jf=a("h2"),aA=a("a"),pye=a("span"),F(iS.$$.fragment),$st=l(),_ye=a("span"),kst=o("FlaxAutoModelForTokenClassification"),VHe=l(),Ar=a("div"),F(dS.$$.fragment),Sst=l(),Df=a("p"),Rst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cae=a("a"),Pst=o("from_pretrained()"),Bst=o(" class method or the "),fae=a("a"),Ist=o("from_config()"),Nst=o(` class
method.`),qst=l(),cS=a("p"),jst=o("This class cannot be instantiated directly using "),uye=a("code"),Dst=o("__init__()"),Gst=o(" (throws an error)."),Ost=l(),sa=a("div"),F(fS.$$.fragment),Vst=l(),bye=a("p"),Xst=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zst=l(),Gf=a("p"),Wst=o(`Note:
Loading a model from its configuration file does `),vye=a("strong"),Qst=o("not"),Ust=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=a("a"),Hst=o("from_pretrained()"),Jst=o(" to load the model weights."),Yst=l(),F(nA.$$.fragment),Kst=l(),ot=a("div"),F(mS.$$.fragment),Zst=l(),Fye=a("p"),elt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),olt=l(),qn=a("p"),rlt=o("The model class to instantiate is selected based on the "),Tye=a("code"),tlt=o("model_type"),alt=o(` property of the config object (either
passed as an argument or loaded from `),Mye=a("code"),nlt=o("pretrained_model_name_or_path"),slt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eye=a("code"),llt=o("pretrained_model_name_or_path"),ilt=o(":"),dlt=l(),Xe=a("ul"),sA=a("li"),Cye=a("strong"),clt=o("albert"),flt=o(" \u2014 "),gae=a("a"),mlt=o("FlaxAlbertForTokenClassification"),glt=o(" (ALBERT model)"),hlt=l(),lA=a("li"),wye=a("strong"),plt=o("bert"),_lt=o(" \u2014 "),hae=a("a"),ult=o("FlaxBertForTokenClassification"),blt=o(" (BERT model)"),vlt=l(),iA=a("li"),Aye=a("strong"),Flt=o("big_bird"),Tlt=o(" \u2014 "),pae=a("a"),Mlt=o("FlaxBigBirdForTokenClassification"),Elt=o(" (BigBird model)"),Clt=l(),dA=a("li"),Lye=a("strong"),wlt=o("distilbert"),Alt=o(" \u2014 "),_ae=a("a"),Llt=o("FlaxDistilBertForTokenClassification"),ylt=o(" (DistilBERT model)"),xlt=l(),cA=a("li"),yye=a("strong"),$lt=o("electra"),klt=o(" \u2014 "),uae=a("a"),Slt=o("FlaxElectraForTokenClassification"),Rlt=o(" (ELECTRA model)"),Plt=l(),fA=a("li"),xye=a("strong"),Blt=o("roberta"),Ilt=o(" \u2014 "),bae=a("a"),Nlt=o("FlaxRobertaForTokenClassification"),qlt=o(" (RoBERTa model)"),jlt=l(),mA=a("li"),$ye=a("strong"),Dlt=o("roformer"),Glt=o(" \u2014 "),vae=a("a"),Olt=o("FlaxRoFormerForTokenClassification"),Vlt=o(" (RoFormer model)"),Xlt=l(),gA=a("li"),kye=a("strong"),zlt=o("xlm-roberta"),Wlt=o(" \u2014 "),Fae=a("a"),Qlt=o("FlaxXLMRobertaForTokenClassification"),Ult=o(" (XLM-RoBERTa model)"),Hlt=l(),F(hA.$$.fragment),XHe=l(),Of=a("h2"),pA=a("a"),Sye=a("span"),F(gS.$$.fragment),Jlt=l(),Rye=a("span"),Ylt=o("FlaxAutoModelForMultipleChoice"),zHe=l(),Lr=a("div"),F(hS.$$.fragment),Klt=l(),Vf=a("p"),Zlt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tae=a("a"),eit=o("from_pretrained()"),oit=o(" class method or the "),Mae=a("a"),rit=o("from_config()"),tit=o(` class
method.`),ait=l(),pS=a("p"),nit=o("This class cannot be instantiated directly using "),Pye=a("code"),sit=o("__init__()"),lit=o(" (throws an error)."),iit=l(),la=a("div"),F(_S.$$.fragment),dit=l(),Bye=a("p"),cit=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fit=l(),Xf=a("p"),mit=o(`Note:
Loading a model from its configuration file does `),Iye=a("strong"),git=o("not"),hit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eae=a("a"),pit=o("from_pretrained()"),_it=o(" to load the model weights."),uit=l(),F(_A.$$.fragment),bit=l(),rt=a("div"),F(uS.$$.fragment),vit=l(),Nye=a("p"),Fit=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Tit=l(),jn=a("p"),Mit=o("The model class to instantiate is selected based on the "),qye=a("code"),Eit=o("model_type"),Cit=o(` property of the config object (either
passed as an argument or loaded from `),jye=a("code"),wit=o("pretrained_model_name_or_path"),Ait=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dye=a("code"),Lit=o("pretrained_model_name_or_path"),yit=o(":"),xit=l(),ze=a("ul"),uA=a("li"),Gye=a("strong"),$it=o("albert"),kit=o(" \u2014 "),Cae=a("a"),Sit=o("FlaxAlbertForMultipleChoice"),Rit=o(" (ALBERT model)"),Pit=l(),bA=a("li"),Oye=a("strong"),Bit=o("bert"),Iit=o(" \u2014 "),wae=a("a"),Nit=o("FlaxBertForMultipleChoice"),qit=o(" (BERT model)"),jit=l(),vA=a("li"),Vye=a("strong"),Dit=o("big_bird"),Git=o(" \u2014 "),Aae=a("a"),Oit=o("FlaxBigBirdForMultipleChoice"),Vit=o(" (BigBird model)"),Xit=l(),FA=a("li"),Xye=a("strong"),zit=o("distilbert"),Wit=o(" \u2014 "),Lae=a("a"),Qit=o("FlaxDistilBertForMultipleChoice"),Uit=o(" (DistilBERT model)"),Hit=l(),TA=a("li"),zye=a("strong"),Jit=o("electra"),Yit=o(" \u2014 "),yae=a("a"),Kit=o("FlaxElectraForMultipleChoice"),Zit=o(" (ELECTRA model)"),edt=l(),MA=a("li"),Wye=a("strong"),odt=o("roberta"),rdt=o(" \u2014 "),xae=a("a"),tdt=o("FlaxRobertaForMultipleChoice"),adt=o(" (RoBERTa model)"),ndt=l(),EA=a("li"),Qye=a("strong"),sdt=o("roformer"),ldt=o(" \u2014 "),$ae=a("a"),idt=o("FlaxRoFormerForMultipleChoice"),ddt=o(" (RoFormer model)"),cdt=l(),CA=a("li"),Uye=a("strong"),fdt=o("xlm-roberta"),mdt=o(" \u2014 "),kae=a("a"),gdt=o("FlaxXLMRobertaForMultipleChoice"),hdt=o(" (XLM-RoBERTa model)"),pdt=l(),F(wA.$$.fragment),WHe=l(),zf=a("h2"),AA=a("a"),Hye=a("span"),F(bS.$$.fragment),_dt=l(),Jye=a("span"),udt=o("FlaxAutoModelForNextSentencePrediction"),QHe=l(),yr=a("div"),F(vS.$$.fragment),bdt=l(),Wf=a("p"),vdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sae=a("a"),Fdt=o("from_pretrained()"),Tdt=o(" class method or the "),Rae=a("a"),Mdt=o("from_config()"),Edt=o(` class
method.`),Cdt=l(),FS=a("p"),wdt=o("This class cannot be instantiated directly using "),Yye=a("code"),Adt=o("__init__()"),Ldt=o(" (throws an error)."),ydt=l(),ia=a("div"),F(TS.$$.fragment),xdt=l(),Kye=a("p"),$dt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kdt=l(),Qf=a("p"),Sdt=o(`Note:
Loading a model from its configuration file does `),Zye=a("strong"),Rdt=o("not"),Pdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pae=a("a"),Bdt=o("from_pretrained()"),Idt=o(" to load the model weights."),Ndt=l(),F(LA.$$.fragment),qdt=l(),tt=a("div"),F(MS.$$.fragment),jdt=l(),e8e=a("p"),Ddt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Gdt=l(),Dn=a("p"),Odt=o("The model class to instantiate is selected based on the "),o8e=a("code"),Vdt=o("model_type"),Xdt=o(` property of the config object (either
passed as an argument or loaded from `),r8e=a("code"),zdt=o("pretrained_model_name_or_path"),Wdt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t8e=a("code"),Qdt=o("pretrained_model_name_or_path"),Udt=o(":"),Hdt=l(),a8e=a("ul"),yA=a("li"),n8e=a("strong"),Jdt=o("bert"),Ydt=o(" \u2014 "),Bae=a("a"),Kdt=o("FlaxBertForNextSentencePrediction"),Zdt=o(" (BERT model)"),ect=l(),F(xA.$$.fragment),UHe=l(),Uf=a("h2"),$A=a("a"),s8e=a("span"),F(ES.$$.fragment),oct=l(),l8e=a("span"),rct=o("FlaxAutoModelForImageClassification"),HHe=l(),xr=a("div"),F(CS.$$.fragment),tct=l(),Hf=a("p"),act=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Iae=a("a"),nct=o("from_pretrained()"),sct=o(" class method or the "),Nae=a("a"),lct=o("from_config()"),ict=o(` class
method.`),dct=l(),wS=a("p"),cct=o("This class cannot be instantiated directly using "),i8e=a("code"),fct=o("__init__()"),mct=o(" (throws an error)."),gct=l(),da=a("div"),F(AS.$$.fragment),hct=l(),d8e=a("p"),pct=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_ct=l(),Jf=a("p"),uct=o(`Note:
Loading a model from its configuration file does `),c8e=a("strong"),bct=o("not"),vct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qae=a("a"),Fct=o("from_pretrained()"),Tct=o(" to load the model weights."),Mct=l(),F(kA.$$.fragment),Ect=l(),at=a("div"),F(LS.$$.fragment),Cct=l(),f8e=a("p"),wct=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Act=l(),Gn=a("p"),Lct=o("The model class to instantiate is selected based on the "),m8e=a("code"),yct=o("model_type"),xct=o(` property of the config object (either
passed as an argument or loaded from `),g8e=a("code"),$ct=o("pretrained_model_name_or_path"),kct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=a("code"),Sct=o("pretrained_model_name_or_path"),Rct=o(":"),Pct=l(),yS=a("ul"),SA=a("li"),p8e=a("strong"),Bct=o("beit"),Ict=o(" \u2014 "),jae=a("a"),Nct=o("FlaxBeitForImageClassification"),qct=o(" (BEiT model)"),jct=l(),RA=a("li"),_8e=a("strong"),Dct=o("vit"),Gct=o(" \u2014 "),Dae=a("a"),Oct=o("FlaxViTForImageClassification"),Vct=o(" (ViT model)"),Xct=l(),F(PA.$$.fragment),JHe=l(),Yf=a("h2"),BA=a("a"),u8e=a("span"),F(xS.$$.fragment),zct=l(),b8e=a("span"),Wct=o("FlaxAutoModelForVision2Seq"),YHe=l(),$r=a("div"),F($S.$$.fragment),Qct=l(),Kf=a("p"),Uct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gae=a("a"),Hct=o("from_pretrained()"),Jct=o(" class method or the "),Oae=a("a"),Yct=o("from_config()"),Kct=o(` class
method.`),Zct=l(),kS=a("p"),eft=o("This class cannot be instantiated directly using "),v8e=a("code"),oft=o("__init__()"),rft=o(" (throws an error)."),tft=l(),ca=a("div"),F(SS.$$.fragment),aft=l(),F8e=a("p"),nft=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sft=l(),Zf=a("p"),lft=o(`Note:
Loading a model from its configuration file does `),T8e=a("strong"),ift=o("not"),dft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vae=a("a"),cft=o("from_pretrained()"),fft=o(" to load the model weights."),mft=l(),F(IA.$$.fragment),gft=l(),nt=a("div"),F(RS.$$.fragment),hft=l(),M8e=a("p"),pft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_ft=l(),On=a("p"),uft=o("The model class to instantiate is selected based on the "),E8e=a("code"),bft=o("model_type"),vft=o(` property of the config object (either
passed as an argument or loaded from `),C8e=a("code"),Fft=o("pretrained_model_name_or_path"),Tft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=a("code"),Mft=o("pretrained_model_name_or_path"),Eft=o(":"),Cft=l(),A8e=a("ul"),NA=a("li"),L8e=a("strong"),wft=o("vision-encoder-decoder"),Aft=o(" \u2014 "),Xae=a("a"),Lft=o("FlaxVisionEncoderDecoderModel"),yft=o(" (Vision Encoder decoder model)"),xft=l(),F(qA.$$.fragment),this.h()},l(f){const u=Ura('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var PS=s(p);m=n(PS,"A",{id:!0,class:!0,href:!0});var y8e=s(m);_=n(y8e,"SPAN",{});var x8e=s(_);T(d.$$.fragment,x8e),x8e.forEach(t),y8e.forEach(t),h=i(PS),Ao=n(PS,"SPAN",{});var $8e=s(Ao);zi=r($8e,"Auto Classes"),$8e.forEach(t),PS.forEach(t),tm=i(f),ft=n(f,"P",{});var BS=s(ft);Wi=r(BS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Qi=n(BS,"CODE",{});var k8e=s(Qi);d8=r(k8e,"from_pretrained()"),k8e.forEach(t),am=r(BS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),BS.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Vn=s(Qe);Ui=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var S8e=s(Xn);c8=r(S8e,"AutoConfig"),S8e.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var R8e=s(Wn);f8=r(R8e,"AutoModel"),R8e.forEach(t),Hi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var P8e=s(Qn);m8=r(P8e,"AutoTokenizer"),P8e.forEach(t),Ji=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),nm=i(f),T(ja.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var IS=s(Ae);sP=r(IS,"will create a model that is an instance of "),Yi=n(IS,"A",{href:!0});var B8e=s(Yi);lP=r(B8e,"BertModel"),B8e.forEach(t),iP=r(IS,"."),IS.forEach(t),Lo=i(f),Da=n(f,"P",{});var NS=s(Da);dP=r(NS,"There is one class of "),sm=n(NS,"CODE",{});var I8e=s(sm);cP=r(I8e,"AutoModel"),I8e.forEach(t),gKe=r(NS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),NS.forEach(t),VQe=i(f),Ki=n(f,"H2",{class:!0});var qS=s(Ki);lm=n(qS,"A",{id:!0,class:!0,href:!0});var N8e=s(lm);Ose=n(N8e,"SPAN",{});var q8e=s(Ose);T(g8.$$.fragment,q8e),q8e.forEach(t),N8e.forEach(t),hKe=i(qS),Vse=n(qS,"SPAN",{});var j8e=s(Vse);pKe=r(j8e,"Extending the Auto Classes"),j8e.forEach(t),qS.forEach(t),XQe=i(f),Un=n(f,"P",{});var em=s(Un);_Ke=r(em,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xse=n(em,"CODE",{});var D8e=s(Xse);uKe=r(D8e,"NewModel"),D8e.forEach(t),bKe=r(em,", make sure you have a "),zse=n(em,"CODE",{});var G8e=s(zse);vKe=r(G8e,"NewModelConfig"),G8e.forEach(t),FKe=r(em,` then you can add those to the auto
classes like this:`),em.forEach(t),zQe=i(f),T(h8.$$.fragment,f),WQe=i(f),fP=n(f,"P",{});var O8e=s(fP);TKe=r(O8e,"You will then be able to use the auto classes like you would usually do!"),O8e.forEach(t),QQe=i(f),T(im.$$.fragment,f),UQe=i(f),Zi=n(f,"H2",{class:!0});var jS=s(Zi);dm=n(jS,"A",{id:!0,class:!0,href:!0});var V8e=s(dm);Wse=n(V8e,"SPAN",{});var X8e=s(Wse);T(p8.$$.fragment,X8e),X8e.forEach(t),V8e.forEach(t),MKe=i(jS),Qse=n(jS,"SPAN",{});var z8e=s(Qse);EKe=r(z8e,"AutoConfig"),z8e.forEach(t),jS.forEach(t),HQe=i(f),yo=n(f,"DIV",{class:!0});var dt=s(yo);T(_8.$$.fragment,dt),CKe=i(dt),u8=n(dt,"P",{});var DS=s(u8);wKe=r(DS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mP=n(DS,"A",{href:!0});var W8e=s(mP);AKe=r(W8e,"from_pretrained()"),W8e.forEach(t),LKe=r(DS," class method."),DS.forEach(t),yKe=i(dt),b8=n(dt,"P",{});var GS=s(b8);xKe=r(GS,"This class cannot be instantiated directly using "),Use=n(GS,"CODE",{});var Q8e=s(Use);$Ke=r(Q8e,"__init__()"),Q8e.forEach(t),kKe=r(GS," (throws an error)."),GS.forEach(t),SKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(v8.$$.fragment,ct),RKe=i(ct),Hse=n(ct,"P",{});var U8e=s(Hse);PKe=r(U8e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),U8e.forEach(t),BKe=i(ct),ed=n(ct,"P",{});var om=s(ed);IKe=r(om,"The configuration class to instantiate is selected based on the "),Jse=n(om,"CODE",{});var H8e=s(Jse);NKe=r(H8e,"model_type"),H8e.forEach(t),qKe=r(om,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yse=n(om,"CODE",{});var J8e=s(Yse);jKe=r(J8e,"pretrained_model_name_or_path"),J8e.forEach(t),DKe=r(om,":"),om.forEach(t),GKe=i(ct),A=n(ct,"UL",{});var L=s(A);cm=n(L,"LI",{});var jA=s(cm);Kse=n(jA,"STRONG",{});var Y8e=s(Kse);OKe=r(Y8e,"albert"),Y8e.forEach(t),VKe=r(jA," \u2014 "),gP=n(jA,"A",{href:!0});var K8e=s(gP);XKe=r(K8e,"AlbertConfig"),K8e.forEach(t),zKe=r(jA," (ALBERT model)"),jA.forEach(t),WKe=i(L),fm=n(L,"LI",{});var DA=s(fm);Zse=n(DA,"STRONG",{});var Z8e=s(Zse);QKe=r(Z8e,"bart"),Z8e.forEach(t),UKe=r(DA," \u2014 "),hP=n(DA,"A",{href:!0});var e9e=s(hP);HKe=r(e9e,"BartConfig"),e9e.forEach(t),JKe=r(DA," (BART model)"),DA.forEach(t),YKe=i(L),mm=n(L,"LI",{});var GA=s(mm);ele=n(GA,"STRONG",{});var o9e=s(ele);KKe=r(o9e,"beit"),o9e.forEach(t),ZKe=r(GA," \u2014 "),pP=n(GA,"A",{href:!0});var r9e=s(pP);eZe=r(r9e,"BeitConfig"),r9e.forEach(t),oZe=r(GA," (BEiT model)"),GA.forEach(t),rZe=i(L),gm=n(L,"LI",{});var OA=s(gm);ole=n(OA,"STRONG",{});var t9e=s(ole);tZe=r(t9e,"bert"),t9e.forEach(t),aZe=r(OA," \u2014 "),_P=n(OA,"A",{href:!0});var a9e=s(_P);nZe=r(a9e,"BertConfig"),a9e.forEach(t),sZe=r(OA," (BERT model)"),OA.forEach(t),lZe=i(L),hm=n(L,"LI",{});var VA=s(hm);rle=n(VA,"STRONG",{});var n9e=s(rle);iZe=r(n9e,"bert-generation"),n9e.forEach(t),dZe=r(VA," \u2014 "),uP=n(VA,"A",{href:!0});var s9e=s(uP);cZe=r(s9e,"BertGenerationConfig"),s9e.forEach(t),fZe=r(VA," (Bert Generation model)"),VA.forEach(t),mZe=i(L),pm=n(L,"LI",{});var XA=s(pm);tle=n(XA,"STRONG",{});var l9e=s(tle);gZe=r(l9e,"big_bird"),l9e.forEach(t),hZe=r(XA," \u2014 "),bP=n(XA,"A",{href:!0});var i9e=s(bP);pZe=r(i9e,"BigBirdConfig"),i9e.forEach(t),_Ze=r(XA," (BigBird model)"),XA.forEach(t),uZe=i(L),_m=n(L,"LI",{});var zA=s(_m);ale=n(zA,"STRONG",{});var d9e=s(ale);bZe=r(d9e,"bigbird_pegasus"),d9e.forEach(t),vZe=r(zA," \u2014 "),vP=n(zA,"A",{href:!0});var c9e=s(vP);FZe=r(c9e,"BigBirdPegasusConfig"),c9e.forEach(t),TZe=r(zA," (BigBird-Pegasus model)"),zA.forEach(t),MZe=i(L),um=n(L,"LI",{});var WA=s(um);nle=n(WA,"STRONG",{});var f9e=s(nle);EZe=r(f9e,"blenderbot"),f9e.forEach(t),CZe=r(WA," \u2014 "),FP=n(WA,"A",{href:!0});var m9e=s(FP);wZe=r(m9e,"BlenderbotConfig"),m9e.forEach(t),AZe=r(WA," (Blenderbot model)"),WA.forEach(t),LZe=i(L),bm=n(L,"LI",{});var QA=s(bm);sle=n(QA,"STRONG",{});var g9e=s(sle);yZe=r(g9e,"blenderbot-small"),g9e.forEach(t),xZe=r(QA," \u2014 "),TP=n(QA,"A",{href:!0});var h9e=s(TP);$Ze=r(h9e,"BlenderbotSmallConfig"),h9e.forEach(t),kZe=r(QA," (BlenderbotSmall model)"),QA.forEach(t),SZe=i(L),vm=n(L,"LI",{});var UA=s(vm);lle=n(UA,"STRONG",{});var p9e=s(lle);RZe=r(p9e,"bloom"),p9e.forEach(t),PZe=r(UA," \u2014 "),MP=n(UA,"A",{href:!0});var _9e=s(MP);BZe=r(_9e,"BloomConfig"),_9e.forEach(t),IZe=r(UA," (BLOOM model)"),UA.forEach(t),NZe=i(L),Fm=n(L,"LI",{});var HA=s(Fm);ile=n(HA,"STRONG",{});var u9e=s(ile);qZe=r(u9e,"camembert"),u9e.forEach(t),jZe=r(HA," \u2014 "),EP=n(HA,"A",{href:!0});var b9e=s(EP);DZe=r(b9e,"CamembertConfig"),b9e.forEach(t),GZe=r(HA," (CamemBERT model)"),HA.forEach(t),OZe=i(L),Tm=n(L,"LI",{});var JA=s(Tm);dle=n(JA,"STRONG",{});var v9e=s(dle);VZe=r(v9e,"canine"),v9e.forEach(t),XZe=r(JA," \u2014 "),CP=n(JA,"A",{href:!0});var F9e=s(CP);zZe=r(F9e,"CanineConfig"),F9e.forEach(t),WZe=r(JA," (CANINE model)"),JA.forEach(t),QZe=i(L),Mm=n(L,"LI",{});var YA=s(Mm);cle=n(YA,"STRONG",{});var T9e=s(cle);UZe=r(T9e,"clip"),T9e.forEach(t),HZe=r(YA," \u2014 "),wP=n(YA,"A",{href:!0});var M9e=s(wP);JZe=r(M9e,"CLIPConfig"),M9e.forEach(t),YZe=r(YA," (CLIP model)"),YA.forEach(t),KZe=i(L),Em=n(L,"LI",{});var KA=s(Em);fle=n(KA,"STRONG",{});var E9e=s(fle);ZZe=r(E9e,"codegen"),E9e.forEach(t),eeo=r(KA," \u2014 "),AP=n(KA,"A",{href:!0});var C9e=s(AP);oeo=r(C9e,"CodeGenConfig"),C9e.forEach(t),reo=r(KA," (CodeGen model)"),KA.forEach(t),teo=i(L),Cm=n(L,"LI",{});var ZA=s(Cm);mle=n(ZA,"STRONG",{});var w9e=s(mle);aeo=r(w9e,"convbert"),w9e.forEach(t),neo=r(ZA," \u2014 "),LP=n(ZA,"A",{href:!0});var A9e=s(LP);seo=r(A9e,"ConvBertConfig"),A9e.forEach(t),leo=r(ZA," (ConvBERT model)"),ZA.forEach(t),ieo=i(L),wm=n(L,"LI",{});var eL=s(wm);gle=n(eL,"STRONG",{});var L9e=s(gle);deo=r(L9e,"convnext"),L9e.forEach(t),ceo=r(eL," \u2014 "),yP=n(eL,"A",{href:!0});var y9e=s(yP);feo=r(y9e,"ConvNextConfig"),y9e.forEach(t),meo=r(eL," (ConvNeXT model)"),eL.forEach(t),geo=i(L),Am=n(L,"LI",{});var oL=s(Am);hle=n(oL,"STRONG",{});var x9e=s(hle);heo=r(x9e,"ctrl"),x9e.forEach(t),peo=r(oL," \u2014 "),xP=n(oL,"A",{href:!0});var $9e=s(xP);_eo=r($9e,"CTRLConfig"),$9e.forEach(t),ueo=r(oL," (CTRL model)"),oL.forEach(t),beo=i(L),Lm=n(L,"LI",{});var rL=s(Lm);ple=n(rL,"STRONG",{});var k9e=s(ple);veo=r(k9e,"cvt"),k9e.forEach(t),Feo=r(rL," \u2014 "),$P=n(rL,"A",{href:!0});var S9e=s($P);Teo=r(S9e,"CvtConfig"),S9e.forEach(t),Meo=r(rL," (CvT model)"),rL.forEach(t),Eeo=i(L),ym=n(L,"LI",{});var tL=s(ym);_le=n(tL,"STRONG",{});var R9e=s(_le);Ceo=r(R9e,"data2vec-audio"),R9e.forEach(t),weo=r(tL," \u2014 "),kP=n(tL,"A",{href:!0});var P9e=s(kP);Aeo=r(P9e,"Data2VecAudioConfig"),P9e.forEach(t),Leo=r(tL," (Data2VecAudio model)"),tL.forEach(t),yeo=i(L),xm=n(L,"LI",{});var aL=s(xm);ule=n(aL,"STRONG",{});var B9e=s(ule);xeo=r(B9e,"data2vec-text"),B9e.forEach(t),$eo=r(aL," \u2014 "),SP=n(aL,"A",{href:!0});var I9e=s(SP);keo=r(I9e,"Data2VecTextConfig"),I9e.forEach(t),Seo=r(aL," (Data2VecText model)"),aL.forEach(t),Reo=i(L),$m=n(L,"LI",{});var nL=s($m);ble=n(nL,"STRONG",{});var N9e=s(ble);Peo=r(N9e,"data2vec-vision"),N9e.forEach(t),Beo=r(nL," \u2014 "),RP=n(nL,"A",{href:!0});var q9e=s(RP);Ieo=r(q9e,"Data2VecVisionConfig"),q9e.forEach(t),Neo=r(nL," (Data2VecVision model)"),nL.forEach(t),qeo=i(L),km=n(L,"LI",{});var sL=s(km);vle=n(sL,"STRONG",{});var j9e=s(vle);jeo=r(j9e,"deberta"),j9e.forEach(t),Deo=r(sL," \u2014 "),PP=n(sL,"A",{href:!0});var D9e=s(PP);Geo=r(D9e,"DebertaConfig"),D9e.forEach(t),Oeo=r(sL," (DeBERTa model)"),sL.forEach(t),Veo=i(L),Sm=n(L,"LI",{});var lL=s(Sm);Fle=n(lL,"STRONG",{});var G9e=s(Fle);Xeo=r(G9e,"deberta-v2"),G9e.forEach(t),zeo=r(lL," \u2014 "),BP=n(lL,"A",{href:!0});var O9e=s(BP);Weo=r(O9e,"DebertaV2Config"),O9e.forEach(t),Qeo=r(lL," (DeBERTa-v2 model)"),lL.forEach(t),Ueo=i(L),Rm=n(L,"LI",{});var iL=s(Rm);Tle=n(iL,"STRONG",{});var V9e=s(Tle);Heo=r(V9e,"decision_transformer"),V9e.forEach(t),Jeo=r(iL," \u2014 "),IP=n(iL,"A",{href:!0});var X9e=s(IP);Yeo=r(X9e,"DecisionTransformerConfig"),X9e.forEach(t),Keo=r(iL," (Decision Transformer model)"),iL.forEach(t),Zeo=i(L),Pm=n(L,"LI",{});var dL=s(Pm);Mle=n(dL,"STRONG",{});var z9e=s(Mle);eoo=r(z9e,"deit"),z9e.forEach(t),ooo=r(dL," \u2014 "),NP=n(dL,"A",{href:!0});var kft=s(NP);roo=r(kft,"DeiTConfig"),kft.forEach(t),too=r(dL," (DeiT model)"),dL.forEach(t),aoo=i(L),Bm=n(L,"LI",{});var W9e=s(Bm);Ele=n(W9e,"STRONG",{});var Sft=s(Ele);noo=r(Sft,"detr"),Sft.forEach(t),soo=r(W9e," \u2014 "),qP=n(W9e,"A",{href:!0});var Rft=s(qP);loo=r(Rft,"DetrConfig"),Rft.forEach(t),ioo=r(W9e," (DETR model)"),W9e.forEach(t),doo=i(L),Im=n(L,"LI",{});var Q9e=s(Im);Cle=n(Q9e,"STRONG",{});var Pft=s(Cle);coo=r(Pft,"distilbert"),Pft.forEach(t),foo=r(Q9e," \u2014 "),jP=n(Q9e,"A",{href:!0});var Bft=s(jP);moo=r(Bft,"DistilBertConfig"),Bft.forEach(t),goo=r(Q9e," (DistilBERT model)"),Q9e.forEach(t),hoo=i(L),Nm=n(L,"LI",{});var U9e=s(Nm);wle=n(U9e,"STRONG",{});var Ift=s(wle);poo=r(Ift,"donut-swin"),Ift.forEach(t),_oo=r(U9e," \u2014 "),DP=n(U9e,"A",{href:!0});var Nft=s(DP);uoo=r(Nft,"DonutSwinConfig"),Nft.forEach(t),boo=r(U9e," (DonutSwin model)"),U9e.forEach(t),voo=i(L),qm=n(L,"LI",{});var H9e=s(qm);Ale=n(H9e,"STRONG",{});var qft=s(Ale);Foo=r(qft,"dpr"),qft.forEach(t),Too=r(H9e," \u2014 "),GP=n(H9e,"A",{href:!0});var jft=s(GP);Moo=r(jft,"DPRConfig"),jft.forEach(t),Eoo=r(H9e," (DPR model)"),H9e.forEach(t),Coo=i(L),jm=n(L,"LI",{});var J9e=s(jm);Lle=n(J9e,"STRONG",{});var Dft=s(Lle);woo=r(Dft,"dpt"),Dft.forEach(t),Aoo=r(J9e," \u2014 "),OP=n(J9e,"A",{href:!0});var Gft=s(OP);Loo=r(Gft,"DPTConfig"),Gft.forEach(t),yoo=r(J9e," (DPT model)"),J9e.forEach(t),xoo=i(L),Dm=n(L,"LI",{});var Y9e=s(Dm);yle=n(Y9e,"STRONG",{});var Oft=s(yle);$oo=r(Oft,"electra"),Oft.forEach(t),koo=r(Y9e," \u2014 "),VP=n(Y9e,"A",{href:!0});var Vft=s(VP);Soo=r(Vft,"ElectraConfig"),Vft.forEach(t),Roo=r(Y9e," (ELECTRA model)"),Y9e.forEach(t),Poo=i(L),Gm=n(L,"LI",{});var K9e=s(Gm);xle=n(K9e,"STRONG",{});var Xft=s(xle);Boo=r(Xft,"encoder-decoder"),Xft.forEach(t),Ioo=r(K9e," \u2014 "),XP=n(K9e,"A",{href:!0});var zft=s(XP);Noo=r(zft,"EncoderDecoderConfig"),zft.forEach(t),qoo=r(K9e," (Encoder decoder model)"),K9e.forEach(t),joo=i(L),Om=n(L,"LI",{});var Z9e=s(Om);$le=n(Z9e,"STRONG",{});var Wft=s($le);Doo=r(Wft,"flaubert"),Wft.forEach(t),Goo=r(Z9e," \u2014 "),zP=n(Z9e,"A",{href:!0});var Qft=s(zP);Ooo=r(Qft,"FlaubertConfig"),Qft.forEach(t),Voo=r(Z9e," (FlauBERT model)"),Z9e.forEach(t),Xoo=i(L),Vm=n(L,"LI",{});var exe=s(Vm);kle=n(exe,"STRONG",{});var Uft=s(kle);zoo=r(Uft,"flava"),Uft.forEach(t),Woo=r(exe," \u2014 "),WP=n(exe,"A",{href:!0});var Hft=s(WP);Qoo=r(Hft,"FlavaConfig"),Hft.forEach(t),Uoo=r(exe," (FLAVA model)"),exe.forEach(t),Hoo=i(L),Xm=n(L,"LI",{});var oxe=s(Xm);Sle=n(oxe,"STRONG",{});var Jft=s(Sle);Joo=r(Jft,"fnet"),Jft.forEach(t),Yoo=r(oxe," \u2014 "),QP=n(oxe,"A",{href:!0});var Yft=s(QP);Koo=r(Yft,"FNetConfig"),Yft.forEach(t),Zoo=r(oxe," (FNet model)"),oxe.forEach(t),ero=i(L),zm=n(L,"LI",{});var rxe=s(zm);Rle=n(rxe,"STRONG",{});var Kft=s(Rle);oro=r(Kft,"fsmt"),Kft.forEach(t),rro=r(rxe," \u2014 "),UP=n(rxe,"A",{href:!0});var Zft=s(UP);tro=r(Zft,"FSMTConfig"),Zft.forEach(t),aro=r(rxe," (FairSeq Machine-Translation model)"),rxe.forEach(t),nro=i(L),Wm=n(L,"LI",{});var txe=s(Wm);Ple=n(txe,"STRONG",{});var emt=s(Ple);sro=r(emt,"funnel"),emt.forEach(t),lro=r(txe," \u2014 "),HP=n(txe,"A",{href:!0});var omt=s(HP);iro=r(omt,"FunnelConfig"),omt.forEach(t),dro=r(txe," (Funnel Transformer model)"),txe.forEach(t),cro=i(L),Qm=n(L,"LI",{});var axe=s(Qm);Ble=n(axe,"STRONG",{});var rmt=s(Ble);fro=r(rmt,"glpn"),rmt.forEach(t),mro=r(axe," \u2014 "),JP=n(axe,"A",{href:!0});var tmt=s(JP);gro=r(tmt,"GLPNConfig"),tmt.forEach(t),hro=r(axe," (GLPN model)"),axe.forEach(t),pro=i(L),Um=n(L,"LI",{});var nxe=s(Um);Ile=n(nxe,"STRONG",{});var amt=s(Ile);_ro=r(amt,"gpt2"),amt.forEach(t),uro=r(nxe," \u2014 "),YP=n(nxe,"A",{href:!0});var nmt=s(YP);bro=r(nmt,"GPT2Config"),nmt.forEach(t),vro=r(nxe," (OpenAI GPT-2 model)"),nxe.forEach(t),Fro=i(L),Hm=n(L,"LI",{});var sxe=s(Hm);Nle=n(sxe,"STRONG",{});var smt=s(Nle);Tro=r(smt,"gpt_neo"),smt.forEach(t),Mro=r(sxe," \u2014 "),KP=n(sxe,"A",{href:!0});var lmt=s(KP);Ero=r(lmt,"GPTNeoConfig"),lmt.forEach(t),Cro=r(sxe," (GPT Neo model)"),sxe.forEach(t),wro=i(L),Jm=n(L,"LI",{});var lxe=s(Jm);qle=n(lxe,"STRONG",{});var imt=s(qle);Aro=r(imt,"gpt_neox"),imt.forEach(t),Lro=r(lxe," \u2014 "),ZP=n(lxe,"A",{href:!0});var dmt=s(ZP);yro=r(dmt,"GPTNeoXConfig"),dmt.forEach(t),xro=r(lxe," (GPT NeoX model)"),lxe.forEach(t),$ro=i(L),Ym=n(L,"LI",{});var ixe=s(Ym);jle=n(ixe,"STRONG",{});var cmt=s(jle);kro=r(cmt,"gptj"),cmt.forEach(t),Sro=r(ixe," \u2014 "),eB=n(ixe,"A",{href:!0});var fmt=s(eB);Rro=r(fmt,"GPTJConfig"),fmt.forEach(t),Pro=r(ixe," (GPT-J model)"),ixe.forEach(t),Bro=i(L),Km=n(L,"LI",{});var dxe=s(Km);Dle=n(dxe,"STRONG",{});var mmt=s(Dle);Iro=r(mmt,"groupvit"),mmt.forEach(t),Nro=r(dxe," \u2014 "),oB=n(dxe,"A",{href:!0});var gmt=s(oB);qro=r(gmt,"GroupViTConfig"),gmt.forEach(t),jro=r(dxe," (GroupViT model)"),dxe.forEach(t),Dro=i(L),Zm=n(L,"LI",{});var cxe=s(Zm);Gle=n(cxe,"STRONG",{});var hmt=s(Gle);Gro=r(hmt,"hubert"),hmt.forEach(t),Oro=r(cxe," \u2014 "),rB=n(cxe,"A",{href:!0});var pmt=s(rB);Vro=r(pmt,"HubertConfig"),pmt.forEach(t),Xro=r(cxe," (Hubert model)"),cxe.forEach(t),zro=i(L),eg=n(L,"LI",{});var fxe=s(eg);Ole=n(fxe,"STRONG",{});var _mt=s(Ole);Wro=r(_mt,"ibert"),_mt.forEach(t),Qro=r(fxe," \u2014 "),tB=n(fxe,"A",{href:!0});var umt=s(tB);Uro=r(umt,"IBertConfig"),umt.forEach(t),Hro=r(fxe," (I-BERT model)"),fxe.forEach(t),Jro=i(L),og=n(L,"LI",{});var mxe=s(og);Vle=n(mxe,"STRONG",{});var bmt=s(Vle);Yro=r(bmt,"imagegpt"),bmt.forEach(t),Kro=r(mxe," \u2014 "),aB=n(mxe,"A",{href:!0});var vmt=s(aB);Zro=r(vmt,"ImageGPTConfig"),vmt.forEach(t),eto=r(mxe," (ImageGPT model)"),mxe.forEach(t),oto=i(L),rg=n(L,"LI",{});var gxe=s(rg);Xle=n(gxe,"STRONG",{});var Fmt=s(Xle);rto=r(Fmt,"layoutlm"),Fmt.forEach(t),tto=r(gxe," \u2014 "),nB=n(gxe,"A",{href:!0});var Tmt=s(nB);ato=r(Tmt,"LayoutLMConfig"),Tmt.forEach(t),nto=r(gxe," (LayoutLM model)"),gxe.forEach(t),sto=i(L),tg=n(L,"LI",{});var hxe=s(tg);zle=n(hxe,"STRONG",{});var Mmt=s(zle);lto=r(Mmt,"layoutlmv2"),Mmt.forEach(t),ito=r(hxe," \u2014 "),sB=n(hxe,"A",{href:!0});var Emt=s(sB);dto=r(Emt,"LayoutLMv2Config"),Emt.forEach(t),cto=r(hxe," (LayoutLMv2 model)"),hxe.forEach(t),fto=i(L),ag=n(L,"LI",{});var pxe=s(ag);Wle=n(pxe,"STRONG",{});var Cmt=s(Wle);mto=r(Cmt,"layoutlmv3"),Cmt.forEach(t),gto=r(pxe," \u2014 "),lB=n(pxe,"A",{href:!0});var wmt=s(lB);hto=r(wmt,"LayoutLMv3Config"),wmt.forEach(t),pto=r(pxe," (LayoutLMv3 model)"),pxe.forEach(t),_to=i(L),ng=n(L,"LI",{});var _xe=s(ng);Qle=n(_xe,"STRONG",{});var Amt=s(Qle);uto=r(Amt,"led"),Amt.forEach(t),bto=r(_xe," \u2014 "),iB=n(_xe,"A",{href:!0});var Lmt=s(iB);vto=r(Lmt,"LEDConfig"),Lmt.forEach(t),Fto=r(_xe," (LED model)"),_xe.forEach(t),Tto=i(L),sg=n(L,"LI",{});var uxe=s(sg);Ule=n(uxe,"STRONG",{});var ymt=s(Ule);Mto=r(ymt,"levit"),ymt.forEach(t),Eto=r(uxe," \u2014 "),dB=n(uxe,"A",{href:!0});var xmt=s(dB);Cto=r(xmt,"LevitConfig"),xmt.forEach(t),wto=r(uxe," (LeViT model)"),uxe.forEach(t),Ato=i(L),lg=n(L,"LI",{});var bxe=s(lg);Hle=n(bxe,"STRONG",{});var $mt=s(Hle);Lto=r($mt,"longformer"),$mt.forEach(t),yto=r(bxe," \u2014 "),cB=n(bxe,"A",{href:!0});var kmt=s(cB);xto=r(kmt,"LongformerConfig"),kmt.forEach(t),$to=r(bxe," (Longformer model)"),bxe.forEach(t),kto=i(L),ig=n(L,"LI",{});var vxe=s(ig);Jle=n(vxe,"STRONG",{});var Smt=s(Jle);Sto=r(Smt,"longt5"),Smt.forEach(t),Rto=r(vxe," \u2014 "),fB=n(vxe,"A",{href:!0});var Rmt=s(fB);Pto=r(Rmt,"LongT5Config"),Rmt.forEach(t),Bto=r(vxe," (LongT5 model)"),vxe.forEach(t),Ito=i(L),dg=n(L,"LI",{});var Fxe=s(dg);Yle=n(Fxe,"STRONG",{});var Pmt=s(Yle);Nto=r(Pmt,"luke"),Pmt.forEach(t),qto=r(Fxe," \u2014 "),mB=n(Fxe,"A",{href:!0});var Bmt=s(mB);jto=r(Bmt,"LukeConfig"),Bmt.forEach(t),Dto=r(Fxe," (LUKE model)"),Fxe.forEach(t),Gto=i(L),cg=n(L,"LI",{});var Txe=s(cg);Kle=n(Txe,"STRONG",{});var Imt=s(Kle);Oto=r(Imt,"lxmert"),Imt.forEach(t),Vto=r(Txe," \u2014 "),gB=n(Txe,"A",{href:!0});var Nmt=s(gB);Xto=r(Nmt,"LxmertConfig"),Nmt.forEach(t),zto=r(Txe," (LXMERT model)"),Txe.forEach(t),Wto=i(L),fg=n(L,"LI",{});var Mxe=s(fg);Zle=n(Mxe,"STRONG",{});var qmt=s(Zle);Qto=r(qmt,"m2m_100"),qmt.forEach(t),Uto=r(Mxe," \u2014 "),hB=n(Mxe,"A",{href:!0});var jmt=s(hB);Hto=r(jmt,"M2M100Config"),jmt.forEach(t),Jto=r(Mxe," (M2M100 model)"),Mxe.forEach(t),Yto=i(L),mg=n(L,"LI",{});var Exe=s(mg);eie=n(Exe,"STRONG",{});var Dmt=s(eie);Kto=r(Dmt,"marian"),Dmt.forEach(t),Zto=r(Exe," \u2014 "),pB=n(Exe,"A",{href:!0});var Gmt=s(pB);eao=r(Gmt,"MarianConfig"),Gmt.forEach(t),oao=r(Exe," (Marian model)"),Exe.forEach(t),rao=i(L),gg=n(L,"LI",{});var Cxe=s(gg);oie=n(Cxe,"STRONG",{});var Omt=s(oie);tao=r(Omt,"maskformer"),Omt.forEach(t),aao=r(Cxe," \u2014 "),_B=n(Cxe,"A",{href:!0});var Vmt=s(_B);nao=r(Vmt,"MaskFormerConfig"),Vmt.forEach(t),sao=r(Cxe," (MaskFormer model)"),Cxe.forEach(t),lao=i(L),hg=n(L,"LI",{});var wxe=s(hg);rie=n(wxe,"STRONG",{});var Xmt=s(rie);iao=r(Xmt,"mbart"),Xmt.forEach(t),dao=r(wxe," \u2014 "),uB=n(wxe,"A",{href:!0});var zmt=s(uB);cao=r(zmt,"MBartConfig"),zmt.forEach(t),fao=r(wxe," (mBART model)"),wxe.forEach(t),mao=i(L),pg=n(L,"LI",{});var Axe=s(pg);tie=n(Axe,"STRONG",{});var Wmt=s(tie);gao=r(Wmt,"mctct"),Wmt.forEach(t),hao=r(Axe," \u2014 "),bB=n(Axe,"A",{href:!0});var Qmt=s(bB);pao=r(Qmt,"MCTCTConfig"),Qmt.forEach(t),_ao=r(Axe," (M-CTC-T model)"),Axe.forEach(t),uao=i(L),_g=n(L,"LI",{});var Lxe=s(_g);aie=n(Lxe,"STRONG",{});var Umt=s(aie);bao=r(Umt,"megatron-bert"),Umt.forEach(t),vao=r(Lxe," \u2014 "),vB=n(Lxe,"A",{href:!0});var Hmt=s(vB);Fao=r(Hmt,"MegatronBertConfig"),Hmt.forEach(t),Tao=r(Lxe," (Megatron-BERT model)"),Lxe.forEach(t),Mao=i(L),ug=n(L,"LI",{});var yxe=s(ug);nie=n(yxe,"STRONG",{});var Jmt=s(nie);Eao=r(Jmt,"mobilebert"),Jmt.forEach(t),Cao=r(yxe," \u2014 "),FB=n(yxe,"A",{href:!0});var Ymt=s(FB);wao=r(Ymt,"MobileBertConfig"),Ymt.forEach(t),Aao=r(yxe," (MobileBERT model)"),yxe.forEach(t),Lao=i(L),bg=n(L,"LI",{});var xxe=s(bg);sie=n(xxe,"STRONG",{});var Kmt=s(sie);yao=r(Kmt,"mobilevit"),Kmt.forEach(t),xao=r(xxe," \u2014 "),TB=n(xxe,"A",{href:!0});var Zmt=s(TB);$ao=r(Zmt,"MobileViTConfig"),Zmt.forEach(t),kao=r(xxe," (MobileViT model)"),xxe.forEach(t),Sao=i(L),vg=n(L,"LI",{});var $xe=s(vg);lie=n($xe,"STRONG",{});var egt=s(lie);Rao=r(egt,"mpnet"),egt.forEach(t),Pao=r($xe," \u2014 "),MB=n($xe,"A",{href:!0});var ogt=s(MB);Bao=r(ogt,"MPNetConfig"),ogt.forEach(t),Iao=r($xe," (MPNet model)"),$xe.forEach(t),Nao=i(L),Fg=n(L,"LI",{});var kxe=s(Fg);iie=n(kxe,"STRONG",{});var rgt=s(iie);qao=r(rgt,"mt5"),rgt.forEach(t),jao=r(kxe," \u2014 "),EB=n(kxe,"A",{href:!0});var tgt=s(EB);Dao=r(tgt,"MT5Config"),tgt.forEach(t),Gao=r(kxe," (MT5 model)"),kxe.forEach(t),Oao=i(L),Tg=n(L,"LI",{});var Sxe=s(Tg);die=n(Sxe,"STRONG",{});var agt=s(die);Vao=r(agt,"mvp"),agt.forEach(t),Xao=r(Sxe," \u2014 "),CB=n(Sxe,"A",{href:!0});var ngt=s(CB);zao=r(ngt,"MvpConfig"),ngt.forEach(t),Wao=r(Sxe," (MVP model)"),Sxe.forEach(t),Qao=i(L),Mg=n(L,"LI",{});var Rxe=s(Mg);cie=n(Rxe,"STRONG",{});var sgt=s(cie);Uao=r(sgt,"nezha"),sgt.forEach(t),Hao=r(Rxe," \u2014 "),wB=n(Rxe,"A",{href:!0});var lgt=s(wB);Jao=r(lgt,"NezhaConfig"),lgt.forEach(t),Yao=r(Rxe," (Nezha model)"),Rxe.forEach(t),Kao=i(L),Eg=n(L,"LI",{});var Pxe=s(Eg);fie=n(Pxe,"STRONG",{});var igt=s(fie);Zao=r(igt,"nystromformer"),igt.forEach(t),eno=r(Pxe," \u2014 "),AB=n(Pxe,"A",{href:!0});var dgt=s(AB);ono=r(dgt,"NystromformerConfig"),dgt.forEach(t),rno=r(Pxe," (Nystr\xF6mformer model)"),Pxe.forEach(t),tno=i(L),Cg=n(L,"LI",{});var Bxe=s(Cg);mie=n(Bxe,"STRONG",{});var cgt=s(mie);ano=r(cgt,"openai-gpt"),cgt.forEach(t),nno=r(Bxe," \u2014 "),LB=n(Bxe,"A",{href:!0});var fgt=s(LB);sno=r(fgt,"OpenAIGPTConfig"),fgt.forEach(t),lno=r(Bxe," (OpenAI GPT model)"),Bxe.forEach(t),ino=i(L),wg=n(L,"LI",{});var Ixe=s(wg);gie=n(Ixe,"STRONG",{});var mgt=s(gie);dno=r(mgt,"opt"),mgt.forEach(t),cno=r(Ixe," \u2014 "),yB=n(Ixe,"A",{href:!0});var ggt=s(yB);fno=r(ggt,"OPTConfig"),ggt.forEach(t),mno=r(Ixe," (OPT model)"),Ixe.forEach(t),gno=i(L),Ag=n(L,"LI",{});var Nxe=s(Ag);hie=n(Nxe,"STRONG",{});var hgt=s(hie);hno=r(hgt,"owlvit"),hgt.forEach(t),pno=r(Nxe," \u2014 "),xB=n(Nxe,"A",{href:!0});var pgt=s(xB);_no=r(pgt,"OwlViTConfig"),pgt.forEach(t),uno=r(Nxe," (OWL-ViT model)"),Nxe.forEach(t),bno=i(L),Lg=n(L,"LI",{});var qxe=s(Lg);pie=n(qxe,"STRONG",{});var _gt=s(pie);vno=r(_gt,"pegasus"),_gt.forEach(t),Fno=r(qxe," \u2014 "),$B=n(qxe,"A",{href:!0});var ugt=s($B);Tno=r(ugt,"PegasusConfig"),ugt.forEach(t),Mno=r(qxe," (Pegasus model)"),qxe.forEach(t),Eno=i(L),yg=n(L,"LI",{});var jxe=s(yg);_ie=n(jxe,"STRONG",{});var bgt=s(_ie);Cno=r(bgt,"perceiver"),bgt.forEach(t),wno=r(jxe," \u2014 "),kB=n(jxe,"A",{href:!0});var vgt=s(kB);Ano=r(vgt,"PerceiverConfig"),vgt.forEach(t),Lno=r(jxe," (Perceiver model)"),jxe.forEach(t),yno=i(L),xg=n(L,"LI",{});var Dxe=s(xg);uie=n(Dxe,"STRONG",{});var Fgt=s(uie);xno=r(Fgt,"plbart"),Fgt.forEach(t),$no=r(Dxe," \u2014 "),SB=n(Dxe,"A",{href:!0});var Tgt=s(SB);kno=r(Tgt,"PLBartConfig"),Tgt.forEach(t),Sno=r(Dxe," (PLBart model)"),Dxe.forEach(t),Rno=i(L),$g=n(L,"LI",{});var Gxe=s($g);bie=n(Gxe,"STRONG",{});var Mgt=s(bie);Pno=r(Mgt,"poolformer"),Mgt.forEach(t),Bno=r(Gxe," \u2014 "),RB=n(Gxe,"A",{href:!0});var Egt=s(RB);Ino=r(Egt,"PoolFormerConfig"),Egt.forEach(t),Nno=r(Gxe," (PoolFormer model)"),Gxe.forEach(t),qno=i(L),kg=n(L,"LI",{});var Oxe=s(kg);vie=n(Oxe,"STRONG",{});var Cgt=s(vie);jno=r(Cgt,"prophetnet"),Cgt.forEach(t),Dno=r(Oxe," \u2014 "),PB=n(Oxe,"A",{href:!0});var wgt=s(PB);Gno=r(wgt,"ProphetNetConfig"),wgt.forEach(t),Ono=r(Oxe," (ProphetNet model)"),Oxe.forEach(t),Vno=i(L),Sg=n(L,"LI",{});var Vxe=s(Sg);Fie=n(Vxe,"STRONG",{});var Agt=s(Fie);Xno=r(Agt,"qdqbert"),Agt.forEach(t),zno=r(Vxe," \u2014 "),BB=n(Vxe,"A",{href:!0});var Lgt=s(BB);Wno=r(Lgt,"QDQBertConfig"),Lgt.forEach(t),Qno=r(Vxe," (QDQBert model)"),Vxe.forEach(t),Uno=i(L),Rg=n(L,"LI",{});var Xxe=s(Rg);Tie=n(Xxe,"STRONG",{});var ygt=s(Tie);Hno=r(ygt,"rag"),ygt.forEach(t),Jno=r(Xxe," \u2014 "),IB=n(Xxe,"A",{href:!0});var xgt=s(IB);Yno=r(xgt,"RagConfig"),xgt.forEach(t),Kno=r(Xxe," (RAG model)"),Xxe.forEach(t),Zno=i(L),Pg=n(L,"LI",{});var zxe=s(Pg);Mie=n(zxe,"STRONG",{});var $gt=s(Mie);eso=r($gt,"realm"),$gt.forEach(t),oso=r(zxe," \u2014 "),NB=n(zxe,"A",{href:!0});var kgt=s(NB);rso=r(kgt,"RealmConfig"),kgt.forEach(t),tso=r(zxe," (REALM model)"),zxe.forEach(t),aso=i(L),Bg=n(L,"LI",{});var Wxe=s(Bg);Eie=n(Wxe,"STRONG",{});var Sgt=s(Eie);nso=r(Sgt,"reformer"),Sgt.forEach(t),sso=r(Wxe," \u2014 "),qB=n(Wxe,"A",{href:!0});var Rgt=s(qB);lso=r(Rgt,"ReformerConfig"),Rgt.forEach(t),iso=r(Wxe," (Reformer model)"),Wxe.forEach(t),dso=i(L),Ig=n(L,"LI",{});var Qxe=s(Ig);Cie=n(Qxe,"STRONG",{});var Pgt=s(Cie);cso=r(Pgt,"regnet"),Pgt.forEach(t),fso=r(Qxe," \u2014 "),jB=n(Qxe,"A",{href:!0});var Bgt=s(jB);mso=r(Bgt,"RegNetConfig"),Bgt.forEach(t),gso=r(Qxe," (RegNet model)"),Qxe.forEach(t),hso=i(L),Ng=n(L,"LI",{});var Uxe=s(Ng);wie=n(Uxe,"STRONG",{});var Igt=s(wie);pso=r(Igt,"rembert"),Igt.forEach(t),_so=r(Uxe," \u2014 "),DB=n(Uxe,"A",{href:!0});var Ngt=s(DB);uso=r(Ngt,"RemBertConfig"),Ngt.forEach(t),bso=r(Uxe," (RemBERT model)"),Uxe.forEach(t),vso=i(L),qg=n(L,"LI",{});var Hxe=s(qg);Aie=n(Hxe,"STRONG",{});var qgt=s(Aie);Fso=r(qgt,"resnet"),qgt.forEach(t),Tso=r(Hxe," \u2014 "),GB=n(Hxe,"A",{href:!0});var jgt=s(GB);Mso=r(jgt,"ResNetConfig"),jgt.forEach(t),Eso=r(Hxe," (ResNet model)"),Hxe.forEach(t),Cso=i(L),jg=n(L,"LI",{});var Jxe=s(jg);Lie=n(Jxe,"STRONG",{});var Dgt=s(Lie);wso=r(Dgt,"retribert"),Dgt.forEach(t),Aso=r(Jxe," \u2014 "),OB=n(Jxe,"A",{href:!0});var Ggt=s(OB);Lso=r(Ggt,"RetriBertConfig"),Ggt.forEach(t),yso=r(Jxe," (RetriBERT model)"),Jxe.forEach(t),xso=i(L),Dg=n(L,"LI",{});var Yxe=s(Dg);yie=n(Yxe,"STRONG",{});var Ogt=s(yie);$so=r(Ogt,"roberta"),Ogt.forEach(t),kso=r(Yxe," \u2014 "),VB=n(Yxe,"A",{href:!0});var Vgt=s(VB);Sso=r(Vgt,"RobertaConfig"),Vgt.forEach(t),Rso=r(Yxe," (RoBERTa model)"),Yxe.forEach(t),Pso=i(L),Gg=n(L,"LI",{});var Kxe=s(Gg);xie=n(Kxe,"STRONG",{});var Xgt=s(xie);Bso=r(Xgt,"roformer"),Xgt.forEach(t),Iso=r(Kxe," \u2014 "),XB=n(Kxe,"A",{href:!0});var zgt=s(XB);Nso=r(zgt,"RoFormerConfig"),zgt.forEach(t),qso=r(Kxe," (RoFormer model)"),Kxe.forEach(t),jso=i(L),Og=n(L,"LI",{});var Zxe=s(Og);$ie=n(Zxe,"STRONG",{});var Wgt=s($ie);Dso=r(Wgt,"segformer"),Wgt.forEach(t),Gso=r(Zxe," \u2014 "),zB=n(Zxe,"A",{href:!0});var Qgt=s(zB);Oso=r(Qgt,"SegformerConfig"),Qgt.forEach(t),Vso=r(Zxe," (SegFormer model)"),Zxe.forEach(t),Xso=i(L),Vg=n(L,"LI",{});var e$e=s(Vg);kie=n(e$e,"STRONG",{});var Ugt=s(kie);zso=r(Ugt,"sew"),Ugt.forEach(t),Wso=r(e$e," \u2014 "),WB=n(e$e,"A",{href:!0});var Hgt=s(WB);Qso=r(Hgt,"SEWConfig"),Hgt.forEach(t),Uso=r(e$e," (SEW model)"),e$e.forEach(t),Hso=i(L),Xg=n(L,"LI",{});var o$e=s(Xg);Sie=n(o$e,"STRONG",{});var Jgt=s(Sie);Jso=r(Jgt,"sew-d"),Jgt.forEach(t),Yso=r(o$e," \u2014 "),QB=n(o$e,"A",{href:!0});var Ygt=s(QB);Kso=r(Ygt,"SEWDConfig"),Ygt.forEach(t),Zso=r(o$e," (SEW-D model)"),o$e.forEach(t),elo=i(L),zg=n(L,"LI",{});var r$e=s(zg);Rie=n(r$e,"STRONG",{});var Kgt=s(Rie);olo=r(Kgt,"speech-encoder-decoder"),Kgt.forEach(t),rlo=r(r$e," \u2014 "),UB=n(r$e,"A",{href:!0});var Zgt=s(UB);tlo=r(Zgt,"SpeechEncoderDecoderConfig"),Zgt.forEach(t),alo=r(r$e," (Speech Encoder decoder model)"),r$e.forEach(t),nlo=i(L),Wg=n(L,"LI",{});var t$e=s(Wg);Pie=n(t$e,"STRONG",{});var eht=s(Pie);slo=r(eht,"speech_to_text"),eht.forEach(t),llo=r(t$e," \u2014 "),HB=n(t$e,"A",{href:!0});var oht=s(HB);ilo=r(oht,"Speech2TextConfig"),oht.forEach(t),dlo=r(t$e," (Speech2Text model)"),t$e.forEach(t),clo=i(L),Qg=n(L,"LI",{});var a$e=s(Qg);Bie=n(a$e,"STRONG",{});var rht=s(Bie);flo=r(rht,"speech_to_text_2"),rht.forEach(t),mlo=r(a$e," \u2014 "),JB=n(a$e,"A",{href:!0});var tht=s(JB);glo=r(tht,"Speech2Text2Config"),tht.forEach(t),hlo=r(a$e," (Speech2Text2 model)"),a$e.forEach(t),plo=i(L),Ug=n(L,"LI",{});var n$e=s(Ug);Iie=n(n$e,"STRONG",{});var aht=s(Iie);_lo=r(aht,"splinter"),aht.forEach(t),ulo=r(n$e," \u2014 "),YB=n(n$e,"A",{href:!0});var nht=s(YB);blo=r(nht,"SplinterConfig"),nht.forEach(t),vlo=r(n$e," (Splinter model)"),n$e.forEach(t),Flo=i(L),Hg=n(L,"LI",{});var s$e=s(Hg);Nie=n(s$e,"STRONG",{});var sht=s(Nie);Tlo=r(sht,"squeezebert"),sht.forEach(t),Mlo=r(s$e," \u2014 "),KB=n(s$e,"A",{href:!0});var lht=s(KB);Elo=r(lht,"SqueezeBertConfig"),lht.forEach(t),Clo=r(s$e," (SqueezeBERT model)"),s$e.forEach(t),wlo=i(L),Jg=n(L,"LI",{});var l$e=s(Jg);qie=n(l$e,"STRONG",{});var iht=s(qie);Alo=r(iht,"swin"),iht.forEach(t),Llo=r(l$e," \u2014 "),ZB=n(l$e,"A",{href:!0});var dht=s(ZB);ylo=r(dht,"SwinConfig"),dht.forEach(t),xlo=r(l$e," (Swin Transformer model)"),l$e.forEach(t),$lo=i(L),Yg=n(L,"LI",{});var i$e=s(Yg);jie=n(i$e,"STRONG",{});var cht=s(jie);klo=r(cht,"swinv2"),cht.forEach(t),Slo=r(i$e," \u2014 "),eI=n(i$e,"A",{href:!0});var fht=s(eI);Rlo=r(fht,"Swinv2Config"),fht.forEach(t),Plo=r(i$e," (Swin Transformer V2 model)"),i$e.forEach(t),Blo=i(L),Kg=n(L,"LI",{});var d$e=s(Kg);Die=n(d$e,"STRONG",{});var mht=s(Die);Ilo=r(mht,"t5"),mht.forEach(t),Nlo=r(d$e," \u2014 "),oI=n(d$e,"A",{href:!0});var ght=s(oI);qlo=r(ght,"T5Config"),ght.forEach(t),jlo=r(d$e," (T5 model)"),d$e.forEach(t),Dlo=i(L),Zg=n(L,"LI",{});var c$e=s(Zg);Gie=n(c$e,"STRONG",{});var hht=s(Gie);Glo=r(hht,"tapas"),hht.forEach(t),Olo=r(c$e," \u2014 "),rI=n(c$e,"A",{href:!0});var pht=s(rI);Vlo=r(pht,"TapasConfig"),pht.forEach(t),Xlo=r(c$e," (TAPAS model)"),c$e.forEach(t),zlo=i(L),eh=n(L,"LI",{});var f$e=s(eh);Oie=n(f$e,"STRONG",{});var _ht=s(Oie);Wlo=r(_ht,"trajectory_transformer"),_ht.forEach(t),Qlo=r(f$e," \u2014 "),tI=n(f$e,"A",{href:!0});var uht=s(tI);Ulo=r(uht,"TrajectoryTransformerConfig"),uht.forEach(t),Hlo=r(f$e," (Trajectory Transformer model)"),f$e.forEach(t),Jlo=i(L),oh=n(L,"LI",{});var m$e=s(oh);Vie=n(m$e,"STRONG",{});var bht=s(Vie);Ylo=r(bht,"transfo-xl"),bht.forEach(t),Klo=r(m$e," \u2014 "),aI=n(m$e,"A",{href:!0});var vht=s(aI);Zlo=r(vht,"TransfoXLConfig"),vht.forEach(t),eio=r(m$e," (Transformer-XL model)"),m$e.forEach(t),oio=i(L),rh=n(L,"LI",{});var g$e=s(rh);Xie=n(g$e,"STRONG",{});var Fht=s(Xie);rio=r(Fht,"trocr"),Fht.forEach(t),tio=r(g$e," \u2014 "),nI=n(g$e,"A",{href:!0});var Tht=s(nI);aio=r(Tht,"TrOCRConfig"),Tht.forEach(t),nio=r(g$e," (TrOCR model)"),g$e.forEach(t),sio=i(L),th=n(L,"LI",{});var h$e=s(th);zie=n(h$e,"STRONG",{});var Mht=s(zie);lio=r(Mht,"unispeech"),Mht.forEach(t),iio=r(h$e," \u2014 "),sI=n(h$e,"A",{href:!0});var Eht=s(sI);dio=r(Eht,"UniSpeechConfig"),Eht.forEach(t),cio=r(h$e," (UniSpeech model)"),h$e.forEach(t),fio=i(L),ah=n(L,"LI",{});var p$e=s(ah);Wie=n(p$e,"STRONG",{});var Cht=s(Wie);mio=r(Cht,"unispeech-sat"),Cht.forEach(t),gio=r(p$e," \u2014 "),lI=n(p$e,"A",{href:!0});var wht=s(lI);hio=r(wht,"UniSpeechSatConfig"),wht.forEach(t),pio=r(p$e," (UniSpeechSat model)"),p$e.forEach(t),_io=i(L),nh=n(L,"LI",{});var _$e=s(nh);Qie=n(_$e,"STRONG",{});var Aht=s(Qie);uio=r(Aht,"van"),Aht.forEach(t),bio=r(_$e," \u2014 "),iI=n(_$e,"A",{href:!0});var Lht=s(iI);vio=r(Lht,"VanConfig"),Lht.forEach(t),Fio=r(_$e," (VAN model)"),_$e.forEach(t),Tio=i(L),sh=n(L,"LI",{});var u$e=s(sh);Uie=n(u$e,"STRONG",{});var yht=s(Uie);Mio=r(yht,"videomae"),yht.forEach(t),Eio=r(u$e," \u2014 "),dI=n(u$e,"A",{href:!0});var xht=s(dI);Cio=r(xht,"VideoMAEConfig"),xht.forEach(t),wio=r(u$e," (VideoMAE model)"),u$e.forEach(t),Aio=i(L),lh=n(L,"LI",{});var b$e=s(lh);Hie=n(b$e,"STRONG",{});var $ht=s(Hie);Lio=r($ht,"vilt"),$ht.forEach(t),yio=r(b$e," \u2014 "),cI=n(b$e,"A",{href:!0});var kht=s(cI);xio=r(kht,"ViltConfig"),kht.forEach(t),$io=r(b$e," (ViLT model)"),b$e.forEach(t),kio=i(L),ih=n(L,"LI",{});var v$e=s(ih);Jie=n(v$e,"STRONG",{});var Sht=s(Jie);Sio=r(Sht,"vision-encoder-decoder"),Sht.forEach(t),Rio=r(v$e," \u2014 "),fI=n(v$e,"A",{href:!0});var Rht=s(fI);Pio=r(Rht,"VisionEncoderDecoderConfig"),Rht.forEach(t),Bio=r(v$e," (Vision Encoder decoder model)"),v$e.forEach(t),Iio=i(L),dh=n(L,"LI",{});var F$e=s(dh);Yie=n(F$e,"STRONG",{});var Pht=s(Yie);Nio=r(Pht,"vision-text-dual-encoder"),Pht.forEach(t),qio=r(F$e," \u2014 "),mI=n(F$e,"A",{href:!0});var Bht=s(mI);jio=r(Bht,"VisionTextDualEncoderConfig"),Bht.forEach(t),Dio=r(F$e," (VisionTextDualEncoder model)"),F$e.forEach(t),Gio=i(L),ch=n(L,"LI",{});var T$e=s(ch);Kie=n(T$e,"STRONG",{});var Iht=s(Kie);Oio=r(Iht,"visual_bert"),Iht.forEach(t),Vio=r(T$e," \u2014 "),gI=n(T$e,"A",{href:!0});var Nht=s(gI);Xio=r(Nht,"VisualBertConfig"),Nht.forEach(t),zio=r(T$e," (VisualBERT model)"),T$e.forEach(t),Wio=i(L),fh=n(L,"LI",{});var M$e=s(fh);Zie=n(M$e,"STRONG",{});var qht=s(Zie);Qio=r(qht,"vit"),qht.forEach(t),Uio=r(M$e," \u2014 "),hI=n(M$e,"A",{href:!0});var jht=s(hI);Hio=r(jht,"ViTConfig"),jht.forEach(t),Jio=r(M$e," (ViT model)"),M$e.forEach(t),Yio=i(L),mh=n(L,"LI",{});var E$e=s(mh);ede=n(E$e,"STRONG",{});var Dht=s(ede);Kio=r(Dht,"vit_mae"),Dht.forEach(t),Zio=r(E$e," \u2014 "),pI=n(E$e,"A",{href:!0});var Ght=s(pI);edo=r(Ght,"ViTMAEConfig"),Ght.forEach(t),odo=r(E$e," (ViTMAE model)"),E$e.forEach(t),rdo=i(L),gh=n(L,"LI",{});var C$e=s(gh);ode=n(C$e,"STRONG",{});var Oht=s(ode);tdo=r(Oht,"wav2vec2"),Oht.forEach(t),ado=r(C$e," \u2014 "),_I=n(C$e,"A",{href:!0});var Vht=s(_I);ndo=r(Vht,"Wav2Vec2Config"),Vht.forEach(t),sdo=r(C$e," (Wav2Vec2 model)"),C$e.forEach(t),ldo=i(L),hh=n(L,"LI",{});var w$e=s(hh);rde=n(w$e,"STRONG",{});var Xht=s(rde);ido=r(Xht,"wav2vec2-conformer"),Xht.forEach(t),ddo=r(w$e," \u2014 "),uI=n(w$e,"A",{href:!0});var zht=s(uI);cdo=r(zht,"Wav2Vec2ConformerConfig"),zht.forEach(t),fdo=r(w$e," (Wav2Vec2-Conformer model)"),w$e.forEach(t),mdo=i(L),ph=n(L,"LI",{});var A$e=s(ph);tde=n(A$e,"STRONG",{});var Wht=s(tde);gdo=r(Wht,"wavlm"),Wht.forEach(t),hdo=r(A$e," \u2014 "),bI=n(A$e,"A",{href:!0});var Qht=s(bI);pdo=r(Qht,"WavLMConfig"),Qht.forEach(t),_do=r(A$e," (WavLM model)"),A$e.forEach(t),udo=i(L),_h=n(L,"LI",{});var L$e=s(_h);ade=n(L$e,"STRONG",{});var Uht=s(ade);bdo=r(Uht,"xglm"),Uht.forEach(t),vdo=r(L$e," \u2014 "),vI=n(L$e,"A",{href:!0});var Hht=s(vI);Fdo=r(Hht,"XGLMConfig"),Hht.forEach(t),Tdo=r(L$e," (XGLM model)"),L$e.forEach(t),Mdo=i(L),uh=n(L,"LI",{});var y$e=s(uh);nde=n(y$e,"STRONG",{});var Jht=s(nde);Edo=r(Jht,"xlm"),Jht.forEach(t),Cdo=r(y$e," \u2014 "),FI=n(y$e,"A",{href:!0});var Yht=s(FI);wdo=r(Yht,"XLMConfig"),Yht.forEach(t),Ado=r(y$e," (XLM model)"),y$e.forEach(t),Ldo=i(L),bh=n(L,"LI",{});var x$e=s(bh);sde=n(x$e,"STRONG",{});var Kht=s(sde);ydo=r(Kht,"xlm-prophetnet"),Kht.forEach(t),xdo=r(x$e," \u2014 "),TI=n(x$e,"A",{href:!0});var Zht=s(TI);$do=r(Zht,"XLMProphetNetConfig"),Zht.forEach(t),kdo=r(x$e," (XLM-ProphetNet model)"),x$e.forEach(t),Sdo=i(L),vh=n(L,"LI",{});var $$e=s(vh);lde=n($$e,"STRONG",{});var ept=s(lde);Rdo=r(ept,"xlm-roberta"),ept.forEach(t),Pdo=r($$e," \u2014 "),MI=n($$e,"A",{href:!0});var opt=s(MI);Bdo=r(opt,"XLMRobertaConfig"),opt.forEach(t),Ido=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),Ndo=i(L),Fh=n(L,"LI",{});var k$e=s(Fh);ide=n(k$e,"STRONG",{});var rpt=s(ide);qdo=r(rpt,"xlm-roberta-xl"),rpt.forEach(t),jdo=r(k$e," \u2014 "),EI=n(k$e,"A",{href:!0});var tpt=s(EI);Ddo=r(tpt,"XLMRobertaXLConfig"),tpt.forEach(t),Gdo=r(k$e," (XLM-RoBERTa-XL model)"),k$e.forEach(t),Odo=i(L),Th=n(L,"LI",{});var S$e=s(Th);dde=n(S$e,"STRONG",{});var apt=s(dde);Vdo=r(apt,"xlnet"),apt.forEach(t),Xdo=r(S$e," \u2014 "),CI=n(S$e,"A",{href:!0});var npt=s(CI);zdo=r(npt,"XLNetConfig"),npt.forEach(t),Wdo=r(S$e," (XLNet model)"),S$e.forEach(t),Qdo=i(L),Mh=n(L,"LI",{});var R$e=s(Mh);cde=n(R$e,"STRONG",{});var spt=s(cde);Udo=r(spt,"yolos"),spt.forEach(t),Hdo=r(R$e," \u2014 "),wI=n(R$e,"A",{href:!0});var lpt=s(wI);Jdo=r(lpt,"YolosConfig"),lpt.forEach(t),Ydo=r(R$e," (YOLOS model)"),R$e.forEach(t),Kdo=i(L),Eh=n(L,"LI",{});var P$e=s(Eh);fde=n(P$e,"STRONG",{});var ipt=s(fde);Zdo=r(ipt,"yoso"),ipt.forEach(t),eco=r(P$e," \u2014 "),AI=n(P$e,"A",{href:!0});var dpt=s(AI);oco=r(dpt,"YosoConfig"),dpt.forEach(t),rco=r(P$e," (YOSO model)"),P$e.forEach(t),L.forEach(t),tco=i(ct),T(Ch.$$.fragment,ct),ct.forEach(t),aco=i(dt),wh=n(dt,"DIV",{class:!0});var ZHe=s(wh);T(F8.$$.fragment,ZHe),nco=i(ZHe),mde=n(ZHe,"P",{});var cpt=s(mde);sco=r(cpt,"Register a new configuration for this class."),cpt.forEach(t),ZHe.forEach(t),dt.forEach(t),JQe=i(f),od=n(f,"H2",{class:!0});var eJe=s(od);Ah=n(eJe,"A",{id:!0,class:!0,href:!0});var fpt=s(Ah);gde=n(fpt,"SPAN",{});var mpt=s(gde);T(T8.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),lco=i(eJe),hde=n(eJe,"SPAN",{});var gpt=s(hde);ico=r(gpt,"AutoTokenizer"),gpt.forEach(t),eJe.forEach(t),YQe=i(f),xo=n(f,"DIV",{class:!0});var gl=s(xo);T(M8.$$.fragment,gl),dco=i(gl),E8=n(gl,"P",{});var oJe=s(E8);cco=r(oJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LI=n(oJe,"A",{href:!0});var hpt=s(LI);fco=r(hpt,"AutoTokenizer.from_pretrained()"),hpt.forEach(t),mco=r(oJe," class method."),oJe.forEach(t),gco=i(gl),C8=n(gl,"P",{});var rJe=s(C8);hco=r(rJe,"This class cannot be instantiated directly using "),pde=n(rJe,"CODE",{});var ppt=s(pde);pco=r(ppt,"__init__()"),ppt.forEach(t),_co=r(rJe," (throws an error)."),rJe.forEach(t),uco=i(gl),Sr=n(gl,"DIV",{class:!0});var hl=s(Sr);T(w8.$$.fragment,hl),bco=i(hl),_de=n(hl,"P",{});var _pt=s(_de);vco=r(_pt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_pt.forEach(t),Fco=i(hl),Ga=n(hl,"P",{});var cL=s(Ga);Tco=r(cL,"The tokenizer class to instantiate is selected based on the "),ude=n(cL,"CODE",{});var upt=s(ude);Mco=r(upt,"model_type"),upt.forEach(t),Eco=r(cL,` property of the config object (either
passed as an argument or loaded from `),bde=n(cL,"CODE",{});var bpt=s(bde);Cco=r(bpt,"pretrained_model_name_or_path"),bpt.forEach(t),wco=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=n(cL,"CODE",{});var vpt=s(vde);Aco=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),Lco=r(cL,":"),cL.forEach(t),yco=i(hl),k=n(hl,"UL",{});var S=s(k);Hn=n(S,"LI",{});var OS=s(Hn);Fde=n(OS,"STRONG",{});var Fpt=s(Fde);xco=r(Fpt,"albert"),Fpt.forEach(t),$co=r(OS," \u2014 "),yI=n(OS,"A",{href:!0});var Tpt=s(yI);kco=r(Tpt,"AlbertTokenizer"),Tpt.forEach(t),Sco=r(OS," or "),xI=n(OS,"A",{href:!0});var Mpt=s(xI);Rco=r(Mpt,"AlbertTokenizerFast"),Mpt.forEach(t),Pco=r(OS," (ALBERT model)"),OS.forEach(t),Bco=i(S),Jn=n(S,"LI",{});var VS=s(Jn);Tde=n(VS,"STRONG",{});var Ept=s(Tde);Ico=r(Ept,"bart"),Ept.forEach(t),Nco=r(VS," \u2014 "),$I=n(VS,"A",{href:!0});var Cpt=s($I);qco=r(Cpt,"BartTokenizer"),Cpt.forEach(t),jco=r(VS," or "),kI=n(VS,"A",{href:!0});var wpt=s(kI);Dco=r(wpt,"BartTokenizerFast"),wpt.forEach(t),Gco=r(VS," (BART model)"),VS.forEach(t),Oco=i(S),Yn=n(S,"LI",{});var XS=s(Yn);Mde=n(XS,"STRONG",{});var Apt=s(Mde);Vco=r(Apt,"barthez"),Apt.forEach(t),Xco=r(XS," \u2014 "),SI=n(XS,"A",{href:!0});var Lpt=s(SI);zco=r(Lpt,"BarthezTokenizer"),Lpt.forEach(t),Wco=r(XS," or "),RI=n(XS,"A",{href:!0});var ypt=s(RI);Qco=r(ypt,"BarthezTokenizerFast"),ypt.forEach(t),Uco=r(XS," (BARThez model)"),XS.forEach(t),Hco=i(S),Kn=n(S,"LI",{});var zS=s(Kn);Ede=n(zS,"STRONG",{});var xpt=s(Ede);Jco=r(xpt,"bartpho"),xpt.forEach(t),Yco=r(zS," \u2014 "),PI=n(zS,"A",{href:!0});var $pt=s(PI);Kco=r($pt,"BartphoTokenizer"),$pt.forEach(t),Zco=r(zS," or "),BI=n(zS,"A",{href:!0});var kpt=s(BI);efo=r(kpt,"BartphoTokenizerFast"),kpt.forEach(t),ofo=r(zS," (BARTpho model)"),zS.forEach(t),rfo=i(S),Zn=n(S,"LI",{});var WS=s(Zn);Cde=n(WS,"STRONG",{});var Spt=s(Cde);tfo=r(Spt,"bert"),Spt.forEach(t),afo=r(WS," \u2014 "),II=n(WS,"A",{href:!0});var Rpt=s(II);nfo=r(Rpt,"BertTokenizer"),Rpt.forEach(t),sfo=r(WS," or "),NI=n(WS,"A",{href:!0});var Ppt=s(NI);lfo=r(Ppt,"BertTokenizerFast"),Ppt.forEach(t),ifo=r(WS," (BERT model)"),WS.forEach(t),dfo=i(S),Lh=n(S,"LI",{});var B$e=s(Lh);wde=n(B$e,"STRONG",{});var Bpt=s(wde);cfo=r(Bpt,"bert-generation"),Bpt.forEach(t),ffo=r(B$e," \u2014 "),qI=n(B$e,"A",{href:!0});var Ipt=s(qI);mfo=r(Ipt,"BertGenerationTokenizer"),Ipt.forEach(t),gfo=r(B$e," (Bert Generation model)"),B$e.forEach(t),hfo=i(S),yh=n(S,"LI",{});var I$e=s(yh);Ade=n(I$e,"STRONG",{});var Npt=s(Ade);pfo=r(Npt,"bert-japanese"),Npt.forEach(t),_fo=r(I$e," \u2014 "),jI=n(I$e,"A",{href:!0});var qpt=s(jI);ufo=r(qpt,"BertJapaneseTokenizer"),qpt.forEach(t),bfo=r(I$e," (BertJapanese model)"),I$e.forEach(t),vfo=i(S),es=n(S,"LI",{});var QS=s(es);Lde=n(QS,"STRONG",{});var jpt=s(Lde);Ffo=r(jpt,"bertweet"),jpt.forEach(t),Tfo=r(QS," \u2014 "),DI=n(QS,"A",{href:!0});var Dpt=s(DI);Mfo=r(Dpt,"BertweetTokenizer"),Dpt.forEach(t),Efo=r(QS," or "),GI=n(QS,"A",{href:!0});var Gpt=s(GI);Cfo=r(Gpt,"BertweetTokenizerFast"),Gpt.forEach(t),wfo=r(QS," (BERTweet model)"),QS.forEach(t),Afo=i(S),os=n(S,"LI",{});var US=s(os);yde=n(US,"STRONG",{});var Opt=s(yde);Lfo=r(Opt,"big_bird"),Opt.forEach(t),yfo=r(US," \u2014 "),OI=n(US,"A",{href:!0});var Vpt=s(OI);xfo=r(Vpt,"BigBirdTokenizer"),Vpt.forEach(t),$fo=r(US," or "),VI=n(US,"A",{href:!0});var Xpt=s(VI);kfo=r(Xpt,"BigBirdTokenizerFast"),Xpt.forEach(t),Sfo=r(US," (BigBird model)"),US.forEach(t),Rfo=i(S),rs=n(S,"LI",{});var HS=s(rs);xde=n(HS,"STRONG",{});var zpt=s(xde);Pfo=r(zpt,"bigbird_pegasus"),zpt.forEach(t),Bfo=r(HS," \u2014 "),XI=n(HS,"A",{href:!0});var Wpt=s(XI);Ifo=r(Wpt,"PegasusTokenizer"),Wpt.forEach(t),Nfo=r(HS," or "),zI=n(HS,"A",{href:!0});var Qpt=s(zI);qfo=r(Qpt,"PegasusTokenizerFast"),Qpt.forEach(t),jfo=r(HS," (BigBird-Pegasus model)"),HS.forEach(t),Dfo=i(S),ts=n(S,"LI",{});var JS=s(ts);$de=n(JS,"STRONG",{});var Upt=s($de);Gfo=r(Upt,"blenderbot"),Upt.forEach(t),Ofo=r(JS," \u2014 "),WI=n(JS,"A",{href:!0});var Hpt=s(WI);Vfo=r(Hpt,"BlenderbotTokenizer"),Hpt.forEach(t),Xfo=r(JS," or "),QI=n(JS,"A",{href:!0});var Jpt=s(QI);zfo=r(Jpt,"BlenderbotTokenizerFast"),Jpt.forEach(t),Wfo=r(JS," (Blenderbot model)"),JS.forEach(t),Qfo=i(S),xh=n(S,"LI",{});var N$e=s(xh);kde=n(N$e,"STRONG",{});var Ypt=s(kde);Ufo=r(Ypt,"blenderbot-small"),Ypt.forEach(t),Hfo=r(N$e," \u2014 "),UI=n(N$e,"A",{href:!0});var Kpt=s(UI);Jfo=r(Kpt,"BlenderbotSmallTokenizer"),Kpt.forEach(t),Yfo=r(N$e," (BlenderbotSmall model)"),N$e.forEach(t),Kfo=i(S),$h=n(S,"LI",{});var q$e=s($h);Sde=n(q$e,"STRONG",{});var Zpt=s(Sde);Zfo=r(Zpt,"bloom"),Zpt.forEach(t),emo=r(q$e," \u2014 "),HI=n(q$e,"A",{href:!0});var e_t=s(HI);omo=r(e_t,"BloomTokenizerFast"),e_t.forEach(t),rmo=r(q$e," (BLOOM model)"),q$e.forEach(t),tmo=i(S),kh=n(S,"LI",{});var j$e=s(kh);Rde=n(j$e,"STRONG",{});var o_t=s(Rde);amo=r(o_t,"byt5"),o_t.forEach(t),nmo=r(j$e," \u2014 "),JI=n(j$e,"A",{href:!0});var r_t=s(JI);smo=r(r_t,"ByT5Tokenizer"),r_t.forEach(t),lmo=r(j$e," (ByT5 model)"),j$e.forEach(t),imo=i(S),as=n(S,"LI",{});var YS=s(as);Pde=n(YS,"STRONG",{});var t_t=s(Pde);dmo=r(t_t,"camembert"),t_t.forEach(t),cmo=r(YS," \u2014 "),YI=n(YS,"A",{href:!0});var a_t=s(YI);fmo=r(a_t,"CamembertTokenizer"),a_t.forEach(t),mmo=r(YS," or "),KI=n(YS,"A",{href:!0});var n_t=s(KI);gmo=r(n_t,"CamembertTokenizerFast"),n_t.forEach(t),hmo=r(YS," (CamemBERT model)"),YS.forEach(t),pmo=i(S),Sh=n(S,"LI",{});var D$e=s(Sh);Bde=n(D$e,"STRONG",{});var s_t=s(Bde);_mo=r(s_t,"canine"),s_t.forEach(t),umo=r(D$e," \u2014 "),ZI=n(D$e,"A",{href:!0});var l_t=s(ZI);bmo=r(l_t,"CanineTokenizer"),l_t.forEach(t),vmo=r(D$e," (CANINE model)"),D$e.forEach(t),Fmo=i(S),ns=n(S,"LI",{});var KS=s(ns);Ide=n(KS,"STRONG",{});var i_t=s(Ide);Tmo=r(i_t,"clip"),i_t.forEach(t),Mmo=r(KS," \u2014 "),eN=n(KS,"A",{href:!0});var d_t=s(eN);Emo=r(d_t,"CLIPTokenizer"),d_t.forEach(t),Cmo=r(KS," or "),oN=n(KS,"A",{href:!0});var c_t=s(oN);wmo=r(c_t,"CLIPTokenizerFast"),c_t.forEach(t),Amo=r(KS," (CLIP model)"),KS.forEach(t),Lmo=i(S),ss=n(S,"LI",{});var ZS=s(ss);Nde=n(ZS,"STRONG",{});var f_t=s(Nde);ymo=r(f_t,"codegen"),f_t.forEach(t),xmo=r(ZS," \u2014 "),rN=n(ZS,"A",{href:!0});var m_t=s(rN);$mo=r(m_t,"CodeGenTokenizer"),m_t.forEach(t),kmo=r(ZS," or "),tN=n(ZS,"A",{href:!0});var g_t=s(tN);Smo=r(g_t,"CodeGenTokenizerFast"),g_t.forEach(t),Rmo=r(ZS," (CodeGen model)"),ZS.forEach(t),Pmo=i(S),ls=n(S,"LI",{});var eR=s(ls);qde=n(eR,"STRONG",{});var h_t=s(qde);Bmo=r(h_t,"convbert"),h_t.forEach(t),Imo=r(eR," \u2014 "),aN=n(eR,"A",{href:!0});var p_t=s(aN);Nmo=r(p_t,"ConvBertTokenizer"),p_t.forEach(t),qmo=r(eR," or "),nN=n(eR,"A",{href:!0});var __t=s(nN);jmo=r(__t,"ConvBertTokenizerFast"),__t.forEach(t),Dmo=r(eR," (ConvBERT model)"),eR.forEach(t),Gmo=i(S),is=n(S,"LI",{});var oR=s(is);jde=n(oR,"STRONG",{});var u_t=s(jde);Omo=r(u_t,"cpm"),u_t.forEach(t),Vmo=r(oR," \u2014 "),sN=n(oR,"A",{href:!0});var b_t=s(sN);Xmo=r(b_t,"CpmTokenizer"),b_t.forEach(t),zmo=r(oR," or "),lN=n(oR,"A",{href:!0});var v_t=s(lN);Wmo=r(v_t,"CpmTokenizerFast"),v_t.forEach(t),Qmo=r(oR," (CPM model)"),oR.forEach(t),Umo=i(S),Rh=n(S,"LI",{});var G$e=s(Rh);Dde=n(G$e,"STRONG",{});var F_t=s(Dde);Hmo=r(F_t,"ctrl"),F_t.forEach(t),Jmo=r(G$e," \u2014 "),iN=n(G$e,"A",{href:!0});var T_t=s(iN);Ymo=r(T_t,"CTRLTokenizer"),T_t.forEach(t),Kmo=r(G$e," (CTRL model)"),G$e.forEach(t),Zmo=i(S),ds=n(S,"LI",{});var rR=s(ds);Gde=n(rR,"STRONG",{});var M_t=s(Gde);ego=r(M_t,"data2vec-text"),M_t.forEach(t),ogo=r(rR," \u2014 "),dN=n(rR,"A",{href:!0});var E_t=s(dN);rgo=r(E_t,"RobertaTokenizer"),E_t.forEach(t),tgo=r(rR," or "),cN=n(rR,"A",{href:!0});var C_t=s(cN);ago=r(C_t,"RobertaTokenizerFast"),C_t.forEach(t),ngo=r(rR," (Data2VecText model)"),rR.forEach(t),sgo=i(S),cs=n(S,"LI",{});var tR=s(cs);Ode=n(tR,"STRONG",{});var w_t=s(Ode);lgo=r(w_t,"deberta"),w_t.forEach(t),igo=r(tR," \u2014 "),fN=n(tR,"A",{href:!0});var A_t=s(fN);dgo=r(A_t,"DebertaTokenizer"),A_t.forEach(t),cgo=r(tR," or "),mN=n(tR,"A",{href:!0});var L_t=s(mN);fgo=r(L_t,"DebertaTokenizerFast"),L_t.forEach(t),mgo=r(tR," (DeBERTa model)"),tR.forEach(t),ggo=i(S),fs=n(S,"LI",{});var aR=s(fs);Vde=n(aR,"STRONG",{});var y_t=s(Vde);hgo=r(y_t,"deberta-v2"),y_t.forEach(t),pgo=r(aR," \u2014 "),gN=n(aR,"A",{href:!0});var x_t=s(gN);_go=r(x_t,"DebertaV2Tokenizer"),x_t.forEach(t),ugo=r(aR," or "),hN=n(aR,"A",{href:!0});var $_t=s(hN);bgo=r($_t,"DebertaV2TokenizerFast"),$_t.forEach(t),vgo=r(aR," (DeBERTa-v2 model)"),aR.forEach(t),Fgo=i(S),ms=n(S,"LI",{});var nR=s(ms);Xde=n(nR,"STRONG",{});var k_t=s(Xde);Tgo=r(k_t,"distilbert"),k_t.forEach(t),Mgo=r(nR," \u2014 "),pN=n(nR,"A",{href:!0});var S_t=s(pN);Ego=r(S_t,"DistilBertTokenizer"),S_t.forEach(t),Cgo=r(nR," or "),_N=n(nR,"A",{href:!0});var R_t=s(_N);wgo=r(R_t,"DistilBertTokenizerFast"),R_t.forEach(t),Ago=r(nR," (DistilBERT model)"),nR.forEach(t),Lgo=i(S),gs=n(S,"LI",{});var sR=s(gs);zde=n(sR,"STRONG",{});var P_t=s(zde);ygo=r(P_t,"dpr"),P_t.forEach(t),xgo=r(sR," \u2014 "),uN=n(sR,"A",{href:!0});var B_t=s(uN);$go=r(B_t,"DPRQuestionEncoderTokenizer"),B_t.forEach(t),kgo=r(sR," or "),bN=n(sR,"A",{href:!0});var I_t=s(bN);Sgo=r(I_t,"DPRQuestionEncoderTokenizerFast"),I_t.forEach(t),Rgo=r(sR," (DPR model)"),sR.forEach(t),Pgo=i(S),hs=n(S,"LI",{});var lR=s(hs);Wde=n(lR,"STRONG",{});var N_t=s(Wde);Bgo=r(N_t,"electra"),N_t.forEach(t),Igo=r(lR," \u2014 "),vN=n(lR,"A",{href:!0});var q_t=s(vN);Ngo=r(q_t,"ElectraTokenizer"),q_t.forEach(t),qgo=r(lR," or "),FN=n(lR,"A",{href:!0});var j_t=s(FN);jgo=r(j_t,"ElectraTokenizerFast"),j_t.forEach(t),Dgo=r(lR," (ELECTRA model)"),lR.forEach(t),Ggo=i(S),Ph=n(S,"LI",{});var O$e=s(Ph);Qde=n(O$e,"STRONG",{});var D_t=s(Qde);Ogo=r(D_t,"flaubert"),D_t.forEach(t),Vgo=r(O$e," \u2014 "),TN=n(O$e,"A",{href:!0});var G_t=s(TN);Xgo=r(G_t,"FlaubertTokenizer"),G_t.forEach(t),zgo=r(O$e," (FlauBERT model)"),O$e.forEach(t),Wgo=i(S),ps=n(S,"LI",{});var iR=s(ps);Ude=n(iR,"STRONG",{});var O_t=s(Ude);Qgo=r(O_t,"fnet"),O_t.forEach(t),Ugo=r(iR," \u2014 "),MN=n(iR,"A",{href:!0});var V_t=s(MN);Hgo=r(V_t,"FNetTokenizer"),V_t.forEach(t),Jgo=r(iR," or "),EN=n(iR,"A",{href:!0});var X_t=s(EN);Ygo=r(X_t,"FNetTokenizerFast"),X_t.forEach(t),Kgo=r(iR," (FNet model)"),iR.forEach(t),Zgo=i(S),Bh=n(S,"LI",{});var V$e=s(Bh);Hde=n(V$e,"STRONG",{});var z_t=s(Hde);eho=r(z_t,"fsmt"),z_t.forEach(t),oho=r(V$e," \u2014 "),CN=n(V$e,"A",{href:!0});var W_t=s(CN);rho=r(W_t,"FSMTTokenizer"),W_t.forEach(t),tho=r(V$e," (FairSeq Machine-Translation model)"),V$e.forEach(t),aho=i(S),_s=n(S,"LI",{});var dR=s(_s);Jde=n(dR,"STRONG",{});var Q_t=s(Jde);nho=r(Q_t,"funnel"),Q_t.forEach(t),sho=r(dR," \u2014 "),wN=n(dR,"A",{href:!0});var U_t=s(wN);lho=r(U_t,"FunnelTokenizer"),U_t.forEach(t),iho=r(dR," or "),AN=n(dR,"A",{href:!0});var H_t=s(AN);dho=r(H_t,"FunnelTokenizerFast"),H_t.forEach(t),cho=r(dR," (Funnel Transformer model)"),dR.forEach(t),fho=i(S),us=n(S,"LI",{});var cR=s(us);Yde=n(cR,"STRONG",{});var J_t=s(Yde);mho=r(J_t,"gpt2"),J_t.forEach(t),gho=r(cR," \u2014 "),LN=n(cR,"A",{href:!0});var Y_t=s(LN);hho=r(Y_t,"GPT2Tokenizer"),Y_t.forEach(t),pho=r(cR," or "),yN=n(cR,"A",{href:!0});var K_t=s(yN);_ho=r(K_t,"GPT2TokenizerFast"),K_t.forEach(t),uho=r(cR," (OpenAI GPT-2 model)"),cR.forEach(t),bho=i(S),bs=n(S,"LI",{});var fR=s(bs);Kde=n(fR,"STRONG",{});var Z_t=s(Kde);vho=r(Z_t,"gpt_neo"),Z_t.forEach(t),Fho=r(fR," \u2014 "),xN=n(fR,"A",{href:!0});var eut=s(xN);Tho=r(eut,"GPT2Tokenizer"),eut.forEach(t),Mho=r(fR," or "),$N=n(fR,"A",{href:!0});var out=s($N);Eho=r(out,"GPT2TokenizerFast"),out.forEach(t),Cho=r(fR," (GPT Neo model)"),fR.forEach(t),who=i(S),Ih=n(S,"LI",{});var X$e=s(Ih);Zde=n(X$e,"STRONG",{});var rut=s(Zde);Aho=r(rut,"gpt_neox"),rut.forEach(t),Lho=r(X$e," \u2014 "),kN=n(X$e,"A",{href:!0});var tut=s(kN);yho=r(tut,"GPTNeoXTokenizerFast"),tut.forEach(t),xho=r(X$e," (GPT NeoX model)"),X$e.forEach(t),$ho=i(S),vs=n(S,"LI",{});var mR=s(vs);ece=n(mR,"STRONG",{});var aut=s(ece);kho=r(aut,"gptj"),aut.forEach(t),Sho=r(mR," \u2014 "),SN=n(mR,"A",{href:!0});var nut=s(SN);Rho=r(nut,"GPT2Tokenizer"),nut.forEach(t),Pho=r(mR," or "),RN=n(mR,"A",{href:!0});var sut=s(RN);Bho=r(sut,"GPT2TokenizerFast"),sut.forEach(t),Iho=r(mR," (GPT-J model)"),mR.forEach(t),Nho=i(S),Fs=n(S,"LI",{});var gR=s(Fs);oce=n(gR,"STRONG",{});var lut=s(oce);qho=r(lut,"groupvit"),lut.forEach(t),jho=r(gR," \u2014 "),PN=n(gR,"A",{href:!0});var iut=s(PN);Dho=r(iut,"CLIPTokenizer"),iut.forEach(t),Gho=r(gR," or "),BN=n(gR,"A",{href:!0});var dut=s(BN);Oho=r(dut,"CLIPTokenizerFast"),dut.forEach(t),Vho=r(gR," (GroupViT model)"),gR.forEach(t),Xho=i(S),Ts=n(S,"LI",{});var hR=s(Ts);rce=n(hR,"STRONG",{});var cut=s(rce);zho=r(cut,"herbert"),cut.forEach(t),Who=r(hR," \u2014 "),IN=n(hR,"A",{href:!0});var fut=s(IN);Qho=r(fut,"HerbertTokenizer"),fut.forEach(t),Uho=r(hR," or "),NN=n(hR,"A",{href:!0});var mut=s(NN);Hho=r(mut,"HerbertTokenizerFast"),mut.forEach(t),Jho=r(hR," (HerBERT model)"),hR.forEach(t),Yho=i(S),Nh=n(S,"LI",{});var z$e=s(Nh);tce=n(z$e,"STRONG",{});var gut=s(tce);Kho=r(gut,"hubert"),gut.forEach(t),Zho=r(z$e," \u2014 "),qN=n(z$e,"A",{href:!0});var hut=s(qN);epo=r(hut,"Wav2Vec2CTCTokenizer"),hut.forEach(t),opo=r(z$e," (Hubert model)"),z$e.forEach(t),rpo=i(S),Ms=n(S,"LI",{});var pR=s(Ms);ace=n(pR,"STRONG",{});var put=s(ace);tpo=r(put,"ibert"),put.forEach(t),apo=r(pR," \u2014 "),jN=n(pR,"A",{href:!0});var _ut=s(jN);npo=r(_ut,"RobertaTokenizer"),_ut.forEach(t),spo=r(pR," or "),DN=n(pR,"A",{href:!0});var uut=s(DN);lpo=r(uut,"RobertaTokenizerFast"),uut.forEach(t),ipo=r(pR," (I-BERT model)"),pR.forEach(t),dpo=i(S),Es=n(S,"LI",{});var _R=s(Es);nce=n(_R,"STRONG",{});var but=s(nce);cpo=r(but,"layoutlm"),but.forEach(t),fpo=r(_R," \u2014 "),GN=n(_R,"A",{href:!0});var vut=s(GN);mpo=r(vut,"LayoutLMTokenizer"),vut.forEach(t),gpo=r(_R," or "),ON=n(_R,"A",{href:!0});var Fut=s(ON);hpo=r(Fut,"LayoutLMTokenizerFast"),Fut.forEach(t),ppo=r(_R," (LayoutLM model)"),_R.forEach(t),_po=i(S),Cs=n(S,"LI",{});var uR=s(Cs);sce=n(uR,"STRONG",{});var Tut=s(sce);upo=r(Tut,"layoutlmv2"),Tut.forEach(t),bpo=r(uR," \u2014 "),VN=n(uR,"A",{href:!0});var Mut=s(VN);vpo=r(Mut,"LayoutLMv2Tokenizer"),Mut.forEach(t),Fpo=r(uR," or "),XN=n(uR,"A",{href:!0});var Eut=s(XN);Tpo=r(Eut,"LayoutLMv2TokenizerFast"),Eut.forEach(t),Mpo=r(uR," (LayoutLMv2 model)"),uR.forEach(t),Epo=i(S),ws=n(S,"LI",{});var bR=s(ws);lce=n(bR,"STRONG",{});var Cut=s(lce);Cpo=r(Cut,"layoutlmv3"),Cut.forEach(t),wpo=r(bR," \u2014 "),zN=n(bR,"A",{href:!0});var wut=s(zN);Apo=r(wut,"LayoutLMv3Tokenizer"),wut.forEach(t),Lpo=r(bR," or "),WN=n(bR,"A",{href:!0});var Aut=s(WN);ypo=r(Aut,"LayoutLMv3TokenizerFast"),Aut.forEach(t),xpo=r(bR," (LayoutLMv3 model)"),bR.forEach(t),$po=i(S),As=n(S,"LI",{});var vR=s(As);ice=n(vR,"STRONG",{});var Lut=s(ice);kpo=r(Lut,"layoutxlm"),Lut.forEach(t),Spo=r(vR," \u2014 "),QN=n(vR,"A",{href:!0});var yut=s(QN);Rpo=r(yut,"LayoutXLMTokenizer"),yut.forEach(t),Ppo=r(vR," or "),UN=n(vR,"A",{href:!0});var xut=s(UN);Bpo=r(xut,"LayoutXLMTokenizerFast"),xut.forEach(t),Ipo=r(vR," (LayoutXLM model)"),vR.forEach(t),Npo=i(S),Ls=n(S,"LI",{});var FR=s(Ls);dce=n(FR,"STRONG",{});var $ut=s(dce);qpo=r($ut,"led"),$ut.forEach(t),jpo=r(FR," \u2014 "),HN=n(FR,"A",{href:!0});var kut=s(HN);Dpo=r(kut,"LEDTokenizer"),kut.forEach(t),Gpo=r(FR," or "),JN=n(FR,"A",{href:!0});var Sut=s(JN);Opo=r(Sut,"LEDTokenizerFast"),Sut.forEach(t),Vpo=r(FR," (LED model)"),FR.forEach(t),Xpo=i(S),ys=n(S,"LI",{});var TR=s(ys);cce=n(TR,"STRONG",{});var Rut=s(cce);zpo=r(Rut,"longformer"),Rut.forEach(t),Wpo=r(TR," \u2014 "),YN=n(TR,"A",{href:!0});var Put=s(YN);Qpo=r(Put,"LongformerTokenizer"),Put.forEach(t),Upo=r(TR," or "),KN=n(TR,"A",{href:!0});var But=s(KN);Hpo=r(But,"LongformerTokenizerFast"),But.forEach(t),Jpo=r(TR," (Longformer model)"),TR.forEach(t),Ypo=i(S),xs=n(S,"LI",{});var MR=s(xs);fce=n(MR,"STRONG",{});var Iut=s(fce);Kpo=r(Iut,"longt5"),Iut.forEach(t),Zpo=r(MR," \u2014 "),ZN=n(MR,"A",{href:!0});var Nut=s(ZN);e_o=r(Nut,"T5Tokenizer"),Nut.forEach(t),o_o=r(MR," or "),eq=n(MR,"A",{href:!0});var qut=s(eq);r_o=r(qut,"T5TokenizerFast"),qut.forEach(t),t_o=r(MR," (LongT5 model)"),MR.forEach(t),a_o=i(S),qh=n(S,"LI",{});var W$e=s(qh);mce=n(W$e,"STRONG",{});var jut=s(mce);n_o=r(jut,"luke"),jut.forEach(t),s_o=r(W$e," \u2014 "),oq=n(W$e,"A",{href:!0});var Dut=s(oq);l_o=r(Dut,"LukeTokenizer"),Dut.forEach(t),i_o=r(W$e," (LUKE model)"),W$e.forEach(t),d_o=i(S),$s=n(S,"LI",{});var ER=s($s);gce=n(ER,"STRONG",{});var Gut=s(gce);c_o=r(Gut,"lxmert"),Gut.forEach(t),f_o=r(ER," \u2014 "),rq=n(ER,"A",{href:!0});var Out=s(rq);m_o=r(Out,"LxmertTokenizer"),Out.forEach(t),g_o=r(ER," or "),tq=n(ER,"A",{href:!0});var Vut=s(tq);h_o=r(Vut,"LxmertTokenizerFast"),Vut.forEach(t),p_o=r(ER," (LXMERT model)"),ER.forEach(t),__o=i(S),jh=n(S,"LI",{});var Q$e=s(jh);hce=n(Q$e,"STRONG",{});var Xut=s(hce);u_o=r(Xut,"m2m_100"),Xut.forEach(t),b_o=r(Q$e," \u2014 "),aq=n(Q$e,"A",{href:!0});var zut=s(aq);v_o=r(zut,"M2M100Tokenizer"),zut.forEach(t),F_o=r(Q$e," (M2M100 model)"),Q$e.forEach(t),T_o=i(S),Dh=n(S,"LI",{});var U$e=s(Dh);pce=n(U$e,"STRONG",{});var Wut=s(pce);M_o=r(Wut,"marian"),Wut.forEach(t),E_o=r(U$e," \u2014 "),nq=n(U$e,"A",{href:!0});var Qut=s(nq);C_o=r(Qut,"MarianTokenizer"),Qut.forEach(t),w_o=r(U$e," (Marian model)"),U$e.forEach(t),A_o=i(S),ks=n(S,"LI",{});var CR=s(ks);_ce=n(CR,"STRONG",{});var Uut=s(_ce);L_o=r(Uut,"mbart"),Uut.forEach(t),y_o=r(CR," \u2014 "),sq=n(CR,"A",{href:!0});var Hut=s(sq);x_o=r(Hut,"MBartTokenizer"),Hut.forEach(t),$_o=r(CR," or "),lq=n(CR,"A",{href:!0});var Jut=s(lq);k_o=r(Jut,"MBartTokenizerFast"),Jut.forEach(t),S_o=r(CR," (mBART model)"),CR.forEach(t),R_o=i(S),Ss=n(S,"LI",{});var wR=s(Ss);uce=n(wR,"STRONG",{});var Yut=s(uce);P_o=r(Yut,"mbart50"),Yut.forEach(t),B_o=r(wR," \u2014 "),iq=n(wR,"A",{href:!0});var Kut=s(iq);I_o=r(Kut,"MBart50Tokenizer"),Kut.forEach(t),N_o=r(wR," or "),dq=n(wR,"A",{href:!0});var Zut=s(dq);q_o=r(Zut,"MBart50TokenizerFast"),Zut.forEach(t),j_o=r(wR," (mBART-50 model)"),wR.forEach(t),D_o=i(S),Rs=n(S,"LI",{});var AR=s(Rs);bce=n(AR,"STRONG",{});var e2t=s(bce);G_o=r(e2t,"megatron-bert"),e2t.forEach(t),O_o=r(AR," \u2014 "),cq=n(AR,"A",{href:!0});var o2t=s(cq);V_o=r(o2t,"BertTokenizer"),o2t.forEach(t),X_o=r(AR," or "),fq=n(AR,"A",{href:!0});var r2t=s(fq);z_o=r(r2t,"BertTokenizerFast"),r2t.forEach(t),W_o=r(AR," (Megatron-BERT model)"),AR.forEach(t),Q_o=i(S),Gh=n(S,"LI",{});var H$e=s(Gh);vce=n(H$e,"STRONG",{});var t2t=s(vce);U_o=r(t2t,"mluke"),t2t.forEach(t),H_o=r(H$e," \u2014 "),mq=n(H$e,"A",{href:!0});var a2t=s(mq);J_o=r(a2t,"MLukeTokenizer"),a2t.forEach(t),Y_o=r(H$e," (mLUKE model)"),H$e.forEach(t),K_o=i(S),Ps=n(S,"LI",{});var LR=s(Ps);Fce=n(LR,"STRONG",{});var n2t=s(Fce);Z_o=r(n2t,"mobilebert"),n2t.forEach(t),euo=r(LR," \u2014 "),gq=n(LR,"A",{href:!0});var s2t=s(gq);ouo=r(s2t,"MobileBertTokenizer"),s2t.forEach(t),ruo=r(LR," or "),hq=n(LR,"A",{href:!0});var l2t=s(hq);tuo=r(l2t,"MobileBertTokenizerFast"),l2t.forEach(t),auo=r(LR," (MobileBERT model)"),LR.forEach(t),nuo=i(S),Bs=n(S,"LI",{});var yR=s(Bs);Tce=n(yR,"STRONG",{});var i2t=s(Tce);suo=r(i2t,"mpnet"),i2t.forEach(t),luo=r(yR," \u2014 "),pq=n(yR,"A",{href:!0});var d2t=s(pq);iuo=r(d2t,"MPNetTokenizer"),d2t.forEach(t),duo=r(yR," or "),_q=n(yR,"A",{href:!0});var c2t=s(_q);cuo=r(c2t,"MPNetTokenizerFast"),c2t.forEach(t),fuo=r(yR," (MPNet model)"),yR.forEach(t),muo=i(S),Is=n(S,"LI",{});var xR=s(Is);Mce=n(xR,"STRONG",{});var f2t=s(Mce);guo=r(f2t,"mt5"),f2t.forEach(t),huo=r(xR," \u2014 "),uq=n(xR,"A",{href:!0});var m2t=s(uq);puo=r(m2t,"MT5Tokenizer"),m2t.forEach(t),_uo=r(xR," or "),bq=n(xR,"A",{href:!0});var g2t=s(bq);uuo=r(g2t,"MT5TokenizerFast"),g2t.forEach(t),buo=r(xR," (MT5 model)"),xR.forEach(t),vuo=i(S),Ns=n(S,"LI",{});var $R=s(Ns);Ece=n($R,"STRONG",{});var h2t=s(Ece);Fuo=r(h2t,"mvp"),h2t.forEach(t),Tuo=r($R," \u2014 "),vq=n($R,"A",{href:!0});var p2t=s(vq);Muo=r(p2t,"MvpTokenizer"),p2t.forEach(t),Euo=r($R," or "),Fq=n($R,"A",{href:!0});var _2t=s(Fq);Cuo=r(_2t,"MvpTokenizerFast"),_2t.forEach(t),wuo=r($R," (MVP model)"),$R.forEach(t),Auo=i(S),qs=n(S,"LI",{});var kR=s(qs);Cce=n(kR,"STRONG",{});var u2t=s(Cce);Luo=r(u2t,"nezha"),u2t.forEach(t),yuo=r(kR," \u2014 "),Tq=n(kR,"A",{href:!0});var b2t=s(Tq);xuo=r(b2t,"BertTokenizer"),b2t.forEach(t),$uo=r(kR," or "),Mq=n(kR,"A",{href:!0});var v2t=s(Mq);kuo=r(v2t,"BertTokenizerFast"),v2t.forEach(t),Suo=r(kR," (Nezha model)"),kR.forEach(t),Ruo=i(S),js=n(S,"LI",{});var SR=s(js);wce=n(SR,"STRONG",{});var F2t=s(wce);Puo=r(F2t,"nllb"),F2t.forEach(t),Buo=r(SR," \u2014 "),Eq=n(SR,"A",{href:!0});var T2t=s(Eq);Iuo=r(T2t,"NllbTokenizer"),T2t.forEach(t),Nuo=r(SR," or "),Cq=n(SR,"A",{href:!0});var M2t=s(Cq);quo=r(M2t,"NllbTokenizerFast"),M2t.forEach(t),juo=r(SR," (NLLB model)"),SR.forEach(t),Duo=i(S),Ds=n(S,"LI",{});var RR=s(Ds);Ace=n(RR,"STRONG",{});var E2t=s(Ace);Guo=r(E2t,"nystromformer"),E2t.forEach(t),Ouo=r(RR," \u2014 "),wq=n(RR,"A",{href:!0});var C2t=s(wq);Vuo=r(C2t,"AlbertTokenizer"),C2t.forEach(t),Xuo=r(RR," or "),Aq=n(RR,"A",{href:!0});var w2t=s(Aq);zuo=r(w2t,"AlbertTokenizerFast"),w2t.forEach(t),Wuo=r(RR," (Nystr\xF6mformer model)"),RR.forEach(t),Quo=i(S),Gs=n(S,"LI",{});var PR=s(Gs);Lce=n(PR,"STRONG",{});var A2t=s(Lce);Uuo=r(A2t,"openai-gpt"),A2t.forEach(t),Huo=r(PR," \u2014 "),Lq=n(PR,"A",{href:!0});var L2t=s(Lq);Juo=r(L2t,"OpenAIGPTTokenizer"),L2t.forEach(t),Yuo=r(PR," or "),yq=n(PR,"A",{href:!0});var y2t=s(yq);Kuo=r(y2t,"OpenAIGPTTokenizerFast"),y2t.forEach(t),Zuo=r(PR," (OpenAI GPT model)"),PR.forEach(t),e2o=i(S),Oh=n(S,"LI",{});var J$e=s(Oh);yce=n(J$e,"STRONG",{});var x2t=s(yce);o2o=r(x2t,"opt"),x2t.forEach(t),r2o=r(J$e," \u2014 "),xq=n(J$e,"A",{href:!0});var $2t=s(xq);t2o=r($2t,"GPT2Tokenizer"),$2t.forEach(t),a2o=r(J$e," (OPT model)"),J$e.forEach(t),n2o=i(S),Os=n(S,"LI",{});var BR=s(Os);xce=n(BR,"STRONG",{});var k2t=s(xce);s2o=r(k2t,"owlvit"),k2t.forEach(t),l2o=r(BR," \u2014 "),$q=n(BR,"A",{href:!0});var S2t=s($q);i2o=r(S2t,"CLIPTokenizer"),S2t.forEach(t),d2o=r(BR," or "),kq=n(BR,"A",{href:!0});var R2t=s(kq);c2o=r(R2t,"CLIPTokenizerFast"),R2t.forEach(t),f2o=r(BR," (OWL-ViT model)"),BR.forEach(t),m2o=i(S),Vs=n(S,"LI",{});var IR=s(Vs);$ce=n(IR,"STRONG",{});var P2t=s($ce);g2o=r(P2t,"pegasus"),P2t.forEach(t),h2o=r(IR," \u2014 "),Sq=n(IR,"A",{href:!0});var B2t=s(Sq);p2o=r(B2t,"PegasusTokenizer"),B2t.forEach(t),_2o=r(IR," or "),Rq=n(IR,"A",{href:!0});var I2t=s(Rq);u2o=r(I2t,"PegasusTokenizerFast"),I2t.forEach(t),b2o=r(IR," (Pegasus model)"),IR.forEach(t),v2o=i(S),Vh=n(S,"LI",{});var Y$e=s(Vh);kce=n(Y$e,"STRONG",{});var N2t=s(kce);F2o=r(N2t,"perceiver"),N2t.forEach(t),T2o=r(Y$e," \u2014 "),Pq=n(Y$e,"A",{href:!0});var q2t=s(Pq);M2o=r(q2t,"PerceiverTokenizer"),q2t.forEach(t),E2o=r(Y$e," (Perceiver model)"),Y$e.forEach(t),C2o=i(S),Xs=n(S,"LI",{});var NR=s(Xs);Sce=n(NR,"STRONG",{});var j2t=s(Sce);w2o=r(j2t,"phobert"),j2t.forEach(t),A2o=r(NR," \u2014 "),Bq=n(NR,"A",{href:!0});var D2t=s(Bq);L2o=r(D2t,"PhobertTokenizer"),D2t.forEach(t),y2o=r(NR," or "),Iq=n(NR,"A",{href:!0});var G2t=s(Iq);x2o=r(G2t,"PhobertTokenizerFast"),G2t.forEach(t),$2o=r(NR," (PhoBERT model)"),NR.forEach(t),k2o=i(S),Xh=n(S,"LI",{});var K$e=s(Xh);Rce=n(K$e,"STRONG",{});var O2t=s(Rce);S2o=r(O2t,"plbart"),O2t.forEach(t),R2o=r(K$e," \u2014 "),Nq=n(K$e,"A",{href:!0});var V2t=s(Nq);P2o=r(V2t,"PLBartTokenizer"),V2t.forEach(t),B2o=r(K$e," (PLBart model)"),K$e.forEach(t),I2o=i(S),zh=n(S,"LI",{});var Z$e=s(zh);Pce=n(Z$e,"STRONG",{});var X2t=s(Pce);N2o=r(X2t,"prophetnet"),X2t.forEach(t),q2o=r(Z$e," \u2014 "),qq=n(Z$e,"A",{href:!0});var z2t=s(qq);j2o=r(z2t,"ProphetNetTokenizer"),z2t.forEach(t),D2o=r(Z$e," (ProphetNet model)"),Z$e.forEach(t),G2o=i(S),zs=n(S,"LI",{});var qR=s(zs);Bce=n(qR,"STRONG",{});var W2t=s(Bce);O2o=r(W2t,"qdqbert"),W2t.forEach(t),V2o=r(qR," \u2014 "),jq=n(qR,"A",{href:!0});var Q2t=s(jq);X2o=r(Q2t,"BertTokenizer"),Q2t.forEach(t),z2o=r(qR," or "),Dq=n(qR,"A",{href:!0});var U2t=s(Dq);W2o=r(U2t,"BertTokenizerFast"),U2t.forEach(t),Q2o=r(qR," (QDQBert model)"),qR.forEach(t),U2o=i(S),Wh=n(S,"LI",{});var eke=s(Wh);Ice=n(eke,"STRONG",{});var H2t=s(Ice);H2o=r(H2t,"rag"),H2t.forEach(t),J2o=r(eke," \u2014 "),Gq=n(eke,"A",{href:!0});var J2t=s(Gq);Y2o=r(J2t,"RagTokenizer"),J2t.forEach(t),K2o=r(eke," (RAG model)"),eke.forEach(t),Z2o=i(S),Ws=n(S,"LI",{});var jR=s(Ws);Nce=n(jR,"STRONG",{});var Y2t=s(Nce);e1o=r(Y2t,"realm"),Y2t.forEach(t),o1o=r(jR," \u2014 "),Oq=n(jR,"A",{href:!0});var K2t=s(Oq);r1o=r(K2t,"RealmTokenizer"),K2t.forEach(t),t1o=r(jR," or "),Vq=n(jR,"A",{href:!0});var Z2t=s(Vq);a1o=r(Z2t,"RealmTokenizerFast"),Z2t.forEach(t),n1o=r(jR," (REALM model)"),jR.forEach(t),s1o=i(S),Qs=n(S,"LI",{});var DR=s(Qs);qce=n(DR,"STRONG",{});var e1t=s(qce);l1o=r(e1t,"reformer"),e1t.forEach(t),i1o=r(DR," \u2014 "),Xq=n(DR,"A",{href:!0});var o1t=s(Xq);d1o=r(o1t,"ReformerTokenizer"),o1t.forEach(t),c1o=r(DR," or "),zq=n(DR,"A",{href:!0});var r1t=s(zq);f1o=r(r1t,"ReformerTokenizerFast"),r1t.forEach(t),m1o=r(DR," (Reformer model)"),DR.forEach(t),g1o=i(S),Us=n(S,"LI",{});var GR=s(Us);jce=n(GR,"STRONG",{});var t1t=s(jce);h1o=r(t1t,"rembert"),t1t.forEach(t),p1o=r(GR," \u2014 "),Wq=n(GR,"A",{href:!0});var a1t=s(Wq);_1o=r(a1t,"RemBertTokenizer"),a1t.forEach(t),u1o=r(GR," or "),Qq=n(GR,"A",{href:!0});var n1t=s(Qq);b1o=r(n1t,"RemBertTokenizerFast"),n1t.forEach(t),v1o=r(GR," (RemBERT model)"),GR.forEach(t),F1o=i(S),Hs=n(S,"LI",{});var OR=s(Hs);Dce=n(OR,"STRONG",{});var s1t=s(Dce);T1o=r(s1t,"retribert"),s1t.forEach(t),M1o=r(OR," \u2014 "),Uq=n(OR,"A",{href:!0});var l1t=s(Uq);E1o=r(l1t,"RetriBertTokenizer"),l1t.forEach(t),C1o=r(OR," or "),Hq=n(OR,"A",{href:!0});var i1t=s(Hq);w1o=r(i1t,"RetriBertTokenizerFast"),i1t.forEach(t),A1o=r(OR," (RetriBERT model)"),OR.forEach(t),L1o=i(S),Js=n(S,"LI",{});var VR=s(Js);Gce=n(VR,"STRONG",{});var d1t=s(Gce);y1o=r(d1t,"roberta"),d1t.forEach(t),x1o=r(VR," \u2014 "),Jq=n(VR,"A",{href:!0});var c1t=s(Jq);$1o=r(c1t,"RobertaTokenizer"),c1t.forEach(t),k1o=r(VR," or "),Yq=n(VR,"A",{href:!0});var f1t=s(Yq);S1o=r(f1t,"RobertaTokenizerFast"),f1t.forEach(t),R1o=r(VR," (RoBERTa model)"),VR.forEach(t),P1o=i(S),Ys=n(S,"LI",{});var XR=s(Ys);Oce=n(XR,"STRONG",{});var m1t=s(Oce);B1o=r(m1t,"roformer"),m1t.forEach(t),I1o=r(XR," \u2014 "),Kq=n(XR,"A",{href:!0});var g1t=s(Kq);N1o=r(g1t,"RoFormerTokenizer"),g1t.forEach(t),q1o=r(XR," or "),Zq=n(XR,"A",{href:!0});var h1t=s(Zq);j1o=r(h1t,"RoFormerTokenizerFast"),h1t.forEach(t),D1o=r(XR," (RoFormer model)"),XR.forEach(t),G1o=i(S),Qh=n(S,"LI",{});var oke=s(Qh);Vce=n(oke,"STRONG",{});var p1t=s(Vce);O1o=r(p1t,"speech_to_text"),p1t.forEach(t),V1o=r(oke," \u2014 "),ej=n(oke,"A",{href:!0});var _1t=s(ej);X1o=r(_1t,"Speech2TextTokenizer"),_1t.forEach(t),z1o=r(oke," (Speech2Text model)"),oke.forEach(t),W1o=i(S),Uh=n(S,"LI",{});var rke=s(Uh);Xce=n(rke,"STRONG",{});var u1t=s(Xce);Q1o=r(u1t,"speech_to_text_2"),u1t.forEach(t),U1o=r(rke," \u2014 "),oj=n(rke,"A",{href:!0});var b1t=s(oj);H1o=r(b1t,"Speech2Text2Tokenizer"),b1t.forEach(t),J1o=r(rke," (Speech2Text2 model)"),rke.forEach(t),Y1o=i(S),Ks=n(S,"LI",{});var zR=s(Ks);zce=n(zR,"STRONG",{});var v1t=s(zce);K1o=r(v1t,"splinter"),v1t.forEach(t),Z1o=r(zR," \u2014 "),rj=n(zR,"A",{href:!0});var F1t=s(rj);e4o=r(F1t,"SplinterTokenizer"),F1t.forEach(t),o4o=r(zR," or "),tj=n(zR,"A",{href:!0});var T1t=s(tj);r4o=r(T1t,"SplinterTokenizerFast"),T1t.forEach(t),t4o=r(zR," (Splinter model)"),zR.forEach(t),a4o=i(S),Zs=n(S,"LI",{});var WR=s(Zs);Wce=n(WR,"STRONG",{});var M1t=s(Wce);n4o=r(M1t,"squeezebert"),M1t.forEach(t),s4o=r(WR," \u2014 "),aj=n(WR,"A",{href:!0});var E1t=s(aj);l4o=r(E1t,"SqueezeBertTokenizer"),E1t.forEach(t),i4o=r(WR," or "),nj=n(WR,"A",{href:!0});var C1t=s(nj);d4o=r(C1t,"SqueezeBertTokenizerFast"),C1t.forEach(t),c4o=r(WR," (SqueezeBERT model)"),WR.forEach(t),f4o=i(S),el=n(S,"LI",{});var QR=s(el);Qce=n(QR,"STRONG",{});var w1t=s(Qce);m4o=r(w1t,"t5"),w1t.forEach(t),g4o=r(QR," \u2014 "),sj=n(QR,"A",{href:!0});var A1t=s(sj);h4o=r(A1t,"T5Tokenizer"),A1t.forEach(t),p4o=r(QR," or "),lj=n(QR,"A",{href:!0});var L1t=s(lj);_4o=r(L1t,"T5TokenizerFast"),L1t.forEach(t),u4o=r(QR," (T5 model)"),QR.forEach(t),b4o=i(S),Hh=n(S,"LI",{});var tke=s(Hh);Uce=n(tke,"STRONG",{});var y1t=s(Uce);v4o=r(y1t,"tapas"),y1t.forEach(t),F4o=r(tke," \u2014 "),ij=n(tke,"A",{href:!0});var x1t=s(ij);T4o=r(x1t,"TapasTokenizer"),x1t.forEach(t),M4o=r(tke," (TAPAS model)"),tke.forEach(t),E4o=i(S),Jh=n(S,"LI",{});var ake=s(Jh);Hce=n(ake,"STRONG",{});var $1t=s(Hce);C4o=r($1t,"tapex"),$1t.forEach(t),w4o=r(ake," \u2014 "),dj=n(ake,"A",{href:!0});var k1t=s(dj);A4o=r(k1t,"TapexTokenizer"),k1t.forEach(t),L4o=r(ake," (TAPEX model)"),ake.forEach(t),y4o=i(S),Yh=n(S,"LI",{});var nke=s(Yh);Jce=n(nke,"STRONG",{});var S1t=s(Jce);x4o=r(S1t,"transfo-xl"),S1t.forEach(t),$4o=r(nke," \u2014 "),cj=n(nke,"A",{href:!0});var R1t=s(cj);k4o=r(R1t,"TransfoXLTokenizer"),R1t.forEach(t),S4o=r(nke," (Transformer-XL model)"),nke.forEach(t),R4o=i(S),ol=n(S,"LI",{});var UR=s(ol);Yce=n(UR,"STRONG",{});var P1t=s(Yce);P4o=r(P1t,"vilt"),P1t.forEach(t),B4o=r(UR," \u2014 "),fj=n(UR,"A",{href:!0});var B1t=s(fj);I4o=r(B1t,"BertTokenizer"),B1t.forEach(t),N4o=r(UR," or "),mj=n(UR,"A",{href:!0});var I1t=s(mj);q4o=r(I1t,"BertTokenizerFast"),I1t.forEach(t),j4o=r(UR," (ViLT model)"),UR.forEach(t),D4o=i(S),rl=n(S,"LI",{});var HR=s(rl);Kce=n(HR,"STRONG",{});var N1t=s(Kce);G4o=r(N1t,"visual_bert"),N1t.forEach(t),O4o=r(HR," \u2014 "),gj=n(HR,"A",{href:!0});var q1t=s(gj);V4o=r(q1t,"BertTokenizer"),q1t.forEach(t),X4o=r(HR," or "),hj=n(HR,"A",{href:!0});var j1t=s(hj);z4o=r(j1t,"BertTokenizerFast"),j1t.forEach(t),W4o=r(HR," (VisualBERT model)"),HR.forEach(t),Q4o=i(S),Kh=n(S,"LI",{});var ske=s(Kh);Zce=n(ske,"STRONG",{});var D1t=s(Zce);U4o=r(D1t,"wav2vec2"),D1t.forEach(t),H4o=r(ske," \u2014 "),pj=n(ske,"A",{href:!0});var G1t=s(pj);J4o=r(G1t,"Wav2Vec2CTCTokenizer"),G1t.forEach(t),Y4o=r(ske," (Wav2Vec2 model)"),ske.forEach(t),K4o=i(S),Zh=n(S,"LI",{});var lke=s(Zh);efe=n(lke,"STRONG",{});var O1t=s(efe);Z4o=r(O1t,"wav2vec2-conformer"),O1t.forEach(t),ebo=r(lke," \u2014 "),_j=n(lke,"A",{href:!0});var V1t=s(_j);obo=r(V1t,"Wav2Vec2CTCTokenizer"),V1t.forEach(t),rbo=r(lke," (Wav2Vec2-Conformer model)"),lke.forEach(t),tbo=i(S),ep=n(S,"LI",{});var ike=s(ep);ofe=n(ike,"STRONG",{});var X1t=s(ofe);abo=r(X1t,"wav2vec2_phoneme"),X1t.forEach(t),nbo=r(ike," \u2014 "),uj=n(ike,"A",{href:!0});var z1t=s(uj);sbo=r(z1t,"Wav2Vec2PhonemeCTCTokenizer"),z1t.forEach(t),lbo=r(ike," (Wav2Vec2Phoneme model)"),ike.forEach(t),ibo=i(S),tl=n(S,"LI",{});var JR=s(tl);rfe=n(JR,"STRONG",{});var W1t=s(rfe);dbo=r(W1t,"xglm"),W1t.forEach(t),cbo=r(JR," \u2014 "),bj=n(JR,"A",{href:!0});var Q1t=s(bj);fbo=r(Q1t,"XGLMTokenizer"),Q1t.forEach(t),mbo=r(JR," or "),vj=n(JR,"A",{href:!0});var U1t=s(vj);gbo=r(U1t,"XGLMTokenizerFast"),U1t.forEach(t),hbo=r(JR," (XGLM model)"),JR.forEach(t),pbo=i(S),op=n(S,"LI",{});var dke=s(op);tfe=n(dke,"STRONG",{});var H1t=s(tfe);_bo=r(H1t,"xlm"),H1t.forEach(t),ubo=r(dke," \u2014 "),Fj=n(dke,"A",{href:!0});var J1t=s(Fj);bbo=r(J1t,"XLMTokenizer"),J1t.forEach(t),vbo=r(dke," (XLM model)"),dke.forEach(t),Fbo=i(S),rp=n(S,"LI",{});var cke=s(rp);afe=n(cke,"STRONG",{});var Y1t=s(afe);Tbo=r(Y1t,"xlm-prophetnet"),Y1t.forEach(t),Mbo=r(cke," \u2014 "),Tj=n(cke,"A",{href:!0});var K1t=s(Tj);Ebo=r(K1t,"XLMProphetNetTokenizer"),K1t.forEach(t),Cbo=r(cke," (XLM-ProphetNet model)"),cke.forEach(t),wbo=i(S),al=n(S,"LI",{});var YR=s(al);nfe=n(YR,"STRONG",{});var Z1t=s(nfe);Abo=r(Z1t,"xlm-roberta"),Z1t.forEach(t),Lbo=r(YR," \u2014 "),Mj=n(YR,"A",{href:!0});var e4t=s(Mj);ybo=r(e4t,"XLMRobertaTokenizer"),e4t.forEach(t),xbo=r(YR," or "),Ej=n(YR,"A",{href:!0});var o4t=s(Ej);$bo=r(o4t,"XLMRobertaTokenizerFast"),o4t.forEach(t),kbo=r(YR," (XLM-RoBERTa model)"),YR.forEach(t),Sbo=i(S),nl=n(S,"LI",{});var KR=s(nl);sfe=n(KR,"STRONG",{});var r4t=s(sfe);Rbo=r(r4t,"xlm-roberta-xl"),r4t.forEach(t),Pbo=r(KR," \u2014 "),Cj=n(KR,"A",{href:!0});var t4t=s(Cj);Bbo=r(t4t,"RobertaTokenizer"),t4t.forEach(t),Ibo=r(KR," or "),wj=n(KR,"A",{href:!0});var a4t=s(wj);Nbo=r(a4t,"RobertaTokenizerFast"),a4t.forEach(t),qbo=r(KR," (XLM-RoBERTa-XL model)"),KR.forEach(t),jbo=i(S),sl=n(S,"LI",{});var ZR=s(sl);lfe=n(ZR,"STRONG",{});var n4t=s(lfe);Dbo=r(n4t,"xlnet"),n4t.forEach(t),Gbo=r(ZR," \u2014 "),Aj=n(ZR,"A",{href:!0});var s4t=s(Aj);Obo=r(s4t,"XLNetTokenizer"),s4t.forEach(t),Vbo=r(ZR," or "),Lj=n(ZR,"A",{href:!0});var l4t=s(Lj);Xbo=r(l4t,"XLNetTokenizerFast"),l4t.forEach(t),zbo=r(ZR," (XLNet model)"),ZR.forEach(t),Wbo=i(S),ll=n(S,"LI",{});var eP=s(ll);ife=n(eP,"STRONG",{});var i4t=s(ife);Qbo=r(i4t,"yoso"),i4t.forEach(t),Ubo=r(eP," \u2014 "),yj=n(eP,"A",{href:!0});var d4t=s(yj);Hbo=r(d4t,"AlbertTokenizer"),d4t.forEach(t),Jbo=r(eP," or "),xj=n(eP,"A",{href:!0});var c4t=s(xj);Ybo=r(c4t,"AlbertTokenizerFast"),c4t.forEach(t),Kbo=r(eP," (YOSO model)"),eP.forEach(t),S.forEach(t),Zbo=i(hl),T(tp.$$.fragment,hl),hl.forEach(t),evo=i(gl),ap=n(gl,"DIV",{class:!0});var tJe=s(ap);T(A8.$$.fragment,tJe),ovo=i(tJe),dfe=n(tJe,"P",{});var f4t=s(dfe);rvo=r(f4t,"Register a new tokenizer in this mapping."),f4t.forEach(t),tJe.forEach(t),gl.forEach(t),KQe=i(f),rd=n(f,"H2",{class:!0});var aJe=s(rd);np=n(aJe,"A",{id:!0,class:!0,href:!0});var m4t=s(np);cfe=n(m4t,"SPAN",{});var g4t=s(cfe);T(L8.$$.fragment,g4t),g4t.forEach(t),m4t.forEach(t),tvo=i(aJe),ffe=n(aJe,"SPAN",{});var h4t=s(ffe);avo=r(h4t,"AutoFeatureExtractor"),h4t.forEach(t),aJe.forEach(t),ZQe=i(f),$o=n(f,"DIV",{class:!0});var pl=s($o);T(y8.$$.fragment,pl),nvo=i(pl),x8=n(pl,"P",{});var nJe=s(x8);svo=r(nJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$j=n(nJe,"A",{href:!0});var p4t=s($j);lvo=r(p4t,"AutoFeatureExtractor.from_pretrained()"),p4t.forEach(t),ivo=r(nJe," class method."),nJe.forEach(t),dvo=i(pl),$8=n(pl,"P",{});var sJe=s($8);cvo=r(sJe,"This class cannot be instantiated directly using "),mfe=n(sJe,"CODE",{});var _4t=s(mfe);fvo=r(_4t,"__init__()"),_4t.forEach(t),mvo=r(sJe," (throws an error)."),sJe.forEach(t),gvo=i(pl),He=n(pl,"DIV",{class:!0});var fa=s(He);T(k8.$$.fragment,fa),hvo=i(fa),gfe=n(fa,"P",{});var u4t=s(gfe);pvo=r(u4t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),u4t.forEach(t),_vo=i(fa),Oa=n(fa,"P",{});var fL=s(Oa);uvo=r(fL,"The feature extractor class to instantiate is selected based on the "),hfe=n(fL,"CODE",{});var b4t=s(hfe);bvo=r(b4t,"model_type"),b4t.forEach(t),vvo=r(fL,` property of the config object
(either passed as an argument or loaded from `),pfe=n(fL,"CODE",{});var v4t=s(pfe);Fvo=r(v4t,"pretrained_model_name_or_path"),v4t.forEach(t),Tvo=r(fL,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),_fe=n(fL,"CODE",{});var F4t=s(_fe);Mvo=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),Evo=r(fL,":"),fL.forEach(t),Cvo=i(fa),Q=n(fa,"UL",{});var J=s(Q);sp=n(J,"LI",{});var fke=s(sp);ufe=n(fke,"STRONG",{});var T4t=s(ufe);wvo=r(T4t,"beit"),T4t.forEach(t),Avo=r(fke," \u2014 "),kj=n(fke,"A",{href:!0});var M4t=s(kj);Lvo=r(M4t,"BeitFeatureExtractor"),M4t.forEach(t),yvo=r(fke," (BEiT model)"),fke.forEach(t),xvo=i(J),lp=n(J,"LI",{});var mke=s(lp);bfe=n(mke,"STRONG",{});var E4t=s(bfe);$vo=r(E4t,"clip"),E4t.forEach(t),kvo=r(mke," \u2014 "),Sj=n(mke,"A",{href:!0});var C4t=s(Sj);Svo=r(C4t,"CLIPFeatureExtractor"),C4t.forEach(t),Rvo=r(mke," (CLIP model)"),mke.forEach(t),Pvo=i(J),ip=n(J,"LI",{});var gke=s(ip);vfe=n(gke,"STRONG",{});var w4t=s(vfe);Bvo=r(w4t,"convnext"),w4t.forEach(t),Ivo=r(gke," \u2014 "),Rj=n(gke,"A",{href:!0});var A4t=s(Rj);Nvo=r(A4t,"ConvNextFeatureExtractor"),A4t.forEach(t),qvo=r(gke," (ConvNeXT model)"),gke.forEach(t),jvo=i(J),dp=n(J,"LI",{});var hke=s(dp);Ffe=n(hke,"STRONG",{});var L4t=s(Ffe);Dvo=r(L4t,"cvt"),L4t.forEach(t),Gvo=r(hke," \u2014 "),Pj=n(hke,"A",{href:!0});var y4t=s(Pj);Ovo=r(y4t,"ConvNextFeatureExtractor"),y4t.forEach(t),Vvo=r(hke," (CvT model)"),hke.forEach(t),Xvo=i(J),cp=n(J,"LI",{});var pke=s(cp);Tfe=n(pke,"STRONG",{});var x4t=s(Tfe);zvo=r(x4t,"data2vec-audio"),x4t.forEach(t),Wvo=r(pke," \u2014 "),Bj=n(pke,"A",{href:!0});var $4t=s(Bj);Qvo=r($4t,"Wav2Vec2FeatureExtractor"),$4t.forEach(t),Uvo=r(pke," (Data2VecAudio model)"),pke.forEach(t),Hvo=i(J),fp=n(J,"LI",{});var _ke=s(fp);Mfe=n(_ke,"STRONG",{});var k4t=s(Mfe);Jvo=r(k4t,"data2vec-vision"),k4t.forEach(t),Yvo=r(_ke," \u2014 "),Ij=n(_ke,"A",{href:!0});var S4t=s(Ij);Kvo=r(S4t,"BeitFeatureExtractor"),S4t.forEach(t),Zvo=r(_ke," (Data2VecVision model)"),_ke.forEach(t),e5o=i(J),mp=n(J,"LI",{});var uke=s(mp);Efe=n(uke,"STRONG",{});var R4t=s(Efe);o5o=r(R4t,"deit"),R4t.forEach(t),r5o=r(uke," \u2014 "),Nj=n(uke,"A",{href:!0});var P4t=s(Nj);t5o=r(P4t,"DeiTFeatureExtractor"),P4t.forEach(t),a5o=r(uke," (DeiT model)"),uke.forEach(t),n5o=i(J),gp=n(J,"LI",{});var bke=s(gp);Cfe=n(bke,"STRONG",{});var B4t=s(Cfe);s5o=r(B4t,"detr"),B4t.forEach(t),l5o=r(bke," \u2014 "),qj=n(bke,"A",{href:!0});var I4t=s(qj);i5o=r(I4t,"DetrFeatureExtractor"),I4t.forEach(t),d5o=r(bke," (DETR model)"),bke.forEach(t),c5o=i(J),hp=n(J,"LI",{});var vke=s(hp);wfe=n(vke,"STRONG",{});var N4t=s(wfe);f5o=r(N4t,"donut"),N4t.forEach(t),m5o=r(vke," \u2014 "),jj=n(vke,"A",{href:!0});var q4t=s(jj);g5o=r(q4t,"DonutFeatureExtractor"),q4t.forEach(t),h5o=r(vke," (Donut model)"),vke.forEach(t),p5o=i(J),pp=n(J,"LI",{});var Fke=s(pp);Afe=n(Fke,"STRONG",{});var j4t=s(Afe);_5o=r(j4t,"dpt"),j4t.forEach(t),u5o=r(Fke," \u2014 "),Dj=n(Fke,"A",{href:!0});var D4t=s(Dj);b5o=r(D4t,"DPTFeatureExtractor"),D4t.forEach(t),v5o=r(Fke," (DPT model)"),Fke.forEach(t),F5o=i(J),_p=n(J,"LI",{});var Tke=s(_p);Lfe=n(Tke,"STRONG",{});var G4t=s(Lfe);T5o=r(G4t,"flava"),G4t.forEach(t),M5o=r(Tke," \u2014 "),Gj=n(Tke,"A",{href:!0});var O4t=s(Gj);E5o=r(O4t,"FlavaFeatureExtractor"),O4t.forEach(t),C5o=r(Tke," (FLAVA model)"),Tke.forEach(t),w5o=i(J),up=n(J,"LI",{});var Mke=s(up);yfe=n(Mke,"STRONG",{});var V4t=s(yfe);A5o=r(V4t,"glpn"),V4t.forEach(t),L5o=r(Mke," \u2014 "),Oj=n(Mke,"A",{href:!0});var X4t=s(Oj);y5o=r(X4t,"GLPNFeatureExtractor"),X4t.forEach(t),x5o=r(Mke," (GLPN model)"),Mke.forEach(t),$5o=i(J),bp=n(J,"LI",{});var Eke=s(bp);xfe=n(Eke,"STRONG",{});var z4t=s(xfe);k5o=r(z4t,"groupvit"),z4t.forEach(t),S5o=r(Eke," \u2014 "),Vj=n(Eke,"A",{href:!0});var W4t=s(Vj);R5o=r(W4t,"CLIPFeatureExtractor"),W4t.forEach(t),P5o=r(Eke," (GroupViT model)"),Eke.forEach(t),B5o=i(J),vp=n(J,"LI",{});var Cke=s(vp);$fe=n(Cke,"STRONG",{});var Q4t=s($fe);I5o=r(Q4t,"hubert"),Q4t.forEach(t),N5o=r(Cke," \u2014 "),Xj=n(Cke,"A",{href:!0});var U4t=s(Xj);q5o=r(U4t,"Wav2Vec2FeatureExtractor"),U4t.forEach(t),j5o=r(Cke," (Hubert model)"),Cke.forEach(t),D5o=i(J),Fp=n(J,"LI",{});var wke=s(Fp);kfe=n(wke,"STRONG",{});var H4t=s(kfe);G5o=r(H4t,"imagegpt"),H4t.forEach(t),O5o=r(wke," \u2014 "),zj=n(wke,"A",{href:!0});var J4t=s(zj);V5o=r(J4t,"ImageGPTFeatureExtractor"),J4t.forEach(t),X5o=r(wke," (ImageGPT model)"),wke.forEach(t),z5o=i(J),Tp=n(J,"LI",{});var Ake=s(Tp);Sfe=n(Ake,"STRONG",{});var Y4t=s(Sfe);W5o=r(Y4t,"layoutlmv2"),Y4t.forEach(t),Q5o=r(Ake," \u2014 "),Wj=n(Ake,"A",{href:!0});var K4t=s(Wj);U5o=r(K4t,"LayoutLMv2FeatureExtractor"),K4t.forEach(t),H5o=r(Ake," (LayoutLMv2 model)"),Ake.forEach(t),J5o=i(J),Mp=n(J,"LI",{});var Lke=s(Mp);Rfe=n(Lke,"STRONG",{});var Z4t=s(Rfe);Y5o=r(Z4t,"layoutlmv3"),Z4t.forEach(t),K5o=r(Lke," \u2014 "),Qj=n(Lke,"A",{href:!0});var ebt=s(Qj);Z5o=r(ebt,"LayoutLMv3FeatureExtractor"),ebt.forEach(t),eFo=r(Lke," (LayoutLMv3 model)"),Lke.forEach(t),oFo=i(J),Ep=n(J,"LI",{});var yke=s(Ep);Pfe=n(yke,"STRONG",{});var obt=s(Pfe);rFo=r(obt,"levit"),obt.forEach(t),tFo=r(yke," \u2014 "),Uj=n(yke,"A",{href:!0});var rbt=s(Uj);aFo=r(rbt,"LevitFeatureExtractor"),rbt.forEach(t),nFo=r(yke," (LeViT model)"),yke.forEach(t),sFo=i(J),Cp=n(J,"LI",{});var xke=s(Cp);Bfe=n(xke,"STRONG",{});var tbt=s(Bfe);lFo=r(tbt,"maskformer"),tbt.forEach(t),iFo=r(xke," \u2014 "),Hj=n(xke,"A",{href:!0});var abt=s(Hj);dFo=r(abt,"MaskFormerFeatureExtractor"),abt.forEach(t),cFo=r(xke," (MaskFormer model)"),xke.forEach(t),fFo=i(J),wp=n(J,"LI",{});var $ke=s(wp);Ife=n($ke,"STRONG",{});var nbt=s(Ife);mFo=r(nbt,"mctct"),nbt.forEach(t),gFo=r($ke," \u2014 "),Jj=n($ke,"A",{href:!0});var sbt=s(Jj);hFo=r(sbt,"MCTCTFeatureExtractor"),sbt.forEach(t),pFo=r($ke," (M-CTC-T model)"),$ke.forEach(t),_Fo=i(J),Ap=n(J,"LI",{});var kke=s(Ap);Nfe=n(kke,"STRONG",{});var lbt=s(Nfe);uFo=r(lbt,"mobilevit"),lbt.forEach(t),bFo=r(kke," \u2014 "),Yj=n(kke,"A",{href:!0});var ibt=s(Yj);vFo=r(ibt,"MobileViTFeatureExtractor"),ibt.forEach(t),FFo=r(kke," (MobileViT model)"),kke.forEach(t),TFo=i(J),Lp=n(J,"LI",{});var Ske=s(Lp);qfe=n(Ske,"STRONG",{});var dbt=s(qfe);MFo=r(dbt,"owlvit"),dbt.forEach(t),EFo=r(Ske," \u2014 "),Kj=n(Ske,"A",{href:!0});var cbt=s(Kj);CFo=r(cbt,"OwlViTFeatureExtractor"),cbt.forEach(t),wFo=r(Ske," (OWL-ViT model)"),Ske.forEach(t),AFo=i(J),yp=n(J,"LI",{});var Rke=s(yp);jfe=n(Rke,"STRONG",{});var fbt=s(jfe);LFo=r(fbt,"perceiver"),fbt.forEach(t),yFo=r(Rke," \u2014 "),Zj=n(Rke,"A",{href:!0});var mbt=s(Zj);xFo=r(mbt,"PerceiverFeatureExtractor"),mbt.forEach(t),$Fo=r(Rke," (Perceiver model)"),Rke.forEach(t),kFo=i(J),xp=n(J,"LI",{});var Pke=s(xp);Dfe=n(Pke,"STRONG",{});var gbt=s(Dfe);SFo=r(gbt,"poolformer"),gbt.forEach(t),RFo=r(Pke," \u2014 "),eD=n(Pke,"A",{href:!0});var hbt=s(eD);PFo=r(hbt,"PoolFormerFeatureExtractor"),hbt.forEach(t),BFo=r(Pke," (PoolFormer model)"),Pke.forEach(t),IFo=i(J),$p=n(J,"LI",{});var Bke=s($p);Gfe=n(Bke,"STRONG",{});var pbt=s(Gfe);NFo=r(pbt,"regnet"),pbt.forEach(t),qFo=r(Bke," \u2014 "),oD=n(Bke,"A",{href:!0});var _bt=s(oD);jFo=r(_bt,"ConvNextFeatureExtractor"),_bt.forEach(t),DFo=r(Bke," (RegNet model)"),Bke.forEach(t),GFo=i(J),kp=n(J,"LI",{});var Ike=s(kp);Ofe=n(Ike,"STRONG",{});var ubt=s(Ofe);OFo=r(ubt,"resnet"),ubt.forEach(t),VFo=r(Ike," \u2014 "),rD=n(Ike,"A",{href:!0});var bbt=s(rD);XFo=r(bbt,"ConvNextFeatureExtractor"),bbt.forEach(t),zFo=r(Ike," (ResNet model)"),Ike.forEach(t),WFo=i(J),Sp=n(J,"LI",{});var Nke=s(Sp);Vfe=n(Nke,"STRONG",{});var vbt=s(Vfe);QFo=r(vbt,"segformer"),vbt.forEach(t),UFo=r(Nke," \u2014 "),tD=n(Nke,"A",{href:!0});var Fbt=s(tD);HFo=r(Fbt,"SegformerFeatureExtractor"),Fbt.forEach(t),JFo=r(Nke," (SegFormer model)"),Nke.forEach(t),YFo=i(J),Rp=n(J,"LI",{});var qke=s(Rp);Xfe=n(qke,"STRONG",{});var Tbt=s(Xfe);KFo=r(Tbt,"speech_to_text"),Tbt.forEach(t),ZFo=r(qke," \u2014 "),aD=n(qke,"A",{href:!0});var Mbt=s(aD);eTo=r(Mbt,"Speech2TextFeatureExtractor"),Mbt.forEach(t),oTo=r(qke," (Speech2Text model)"),qke.forEach(t),rTo=i(J),Pp=n(J,"LI",{});var jke=s(Pp);zfe=n(jke,"STRONG",{});var Ebt=s(zfe);tTo=r(Ebt,"swin"),Ebt.forEach(t),aTo=r(jke," \u2014 "),nD=n(jke,"A",{href:!0});var Cbt=s(nD);nTo=r(Cbt,"ViTFeatureExtractor"),Cbt.forEach(t),sTo=r(jke," (Swin Transformer model)"),jke.forEach(t),lTo=i(J),Bp=n(J,"LI",{});var Dke=s(Bp);Wfe=n(Dke,"STRONG",{});var wbt=s(Wfe);iTo=r(wbt,"swinv2"),wbt.forEach(t),dTo=r(Dke," \u2014 "),sD=n(Dke,"A",{href:!0});var Abt=s(sD);cTo=r(Abt,"ViTFeatureExtractor"),Abt.forEach(t),fTo=r(Dke," (Swin Transformer V2 model)"),Dke.forEach(t),mTo=i(J),Ip=n(J,"LI",{});var Gke=s(Ip);Qfe=n(Gke,"STRONG",{});var Lbt=s(Qfe);gTo=r(Lbt,"van"),Lbt.forEach(t),hTo=r(Gke," \u2014 "),lD=n(Gke,"A",{href:!0});var ybt=s(lD);pTo=r(ybt,"ConvNextFeatureExtractor"),ybt.forEach(t),_To=r(Gke," (VAN model)"),Gke.forEach(t),uTo=i(J),Np=n(J,"LI",{});var Oke=s(Np);Ufe=n(Oke,"STRONG",{});var xbt=s(Ufe);bTo=r(xbt,"videomae"),xbt.forEach(t),vTo=r(Oke," \u2014 "),iD=n(Oke,"A",{href:!0});var $bt=s(iD);FTo=r($bt,"ViTFeatureExtractor"),$bt.forEach(t),TTo=r(Oke," (VideoMAE model)"),Oke.forEach(t),MTo=i(J),qp=n(J,"LI",{});var Vke=s(qp);Hfe=n(Vke,"STRONG",{});var kbt=s(Hfe);ETo=r(kbt,"vilt"),kbt.forEach(t),CTo=r(Vke," \u2014 "),dD=n(Vke,"A",{href:!0});var Sbt=s(dD);wTo=r(Sbt,"ViltFeatureExtractor"),Sbt.forEach(t),ATo=r(Vke," (ViLT model)"),Vke.forEach(t),LTo=i(J),jp=n(J,"LI",{});var Xke=s(jp);Jfe=n(Xke,"STRONG",{});var Rbt=s(Jfe);yTo=r(Rbt,"vit"),Rbt.forEach(t),xTo=r(Xke," \u2014 "),cD=n(Xke,"A",{href:!0});var Pbt=s(cD);$To=r(Pbt,"ViTFeatureExtractor"),Pbt.forEach(t),kTo=r(Xke," (ViT model)"),Xke.forEach(t),STo=i(J),Dp=n(J,"LI",{});var zke=s(Dp);Yfe=n(zke,"STRONG",{});var Bbt=s(Yfe);RTo=r(Bbt,"vit_mae"),Bbt.forEach(t),PTo=r(zke," \u2014 "),fD=n(zke,"A",{href:!0});var Ibt=s(fD);BTo=r(Ibt,"ViTFeatureExtractor"),Ibt.forEach(t),ITo=r(zke," (ViTMAE model)"),zke.forEach(t),NTo=i(J),Gp=n(J,"LI",{});var Wke=s(Gp);Kfe=n(Wke,"STRONG",{});var Nbt=s(Kfe);qTo=r(Nbt,"wav2vec2"),Nbt.forEach(t),jTo=r(Wke," \u2014 "),mD=n(Wke,"A",{href:!0});var qbt=s(mD);DTo=r(qbt,"Wav2Vec2FeatureExtractor"),qbt.forEach(t),GTo=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),OTo=i(J),Op=n(J,"LI",{});var Qke=s(Op);Zfe=n(Qke,"STRONG",{});var jbt=s(Zfe);VTo=r(jbt,"wav2vec2-conformer"),jbt.forEach(t),XTo=r(Qke," \u2014 "),gD=n(Qke,"A",{href:!0});var Dbt=s(gD);zTo=r(Dbt,"Wav2Vec2FeatureExtractor"),Dbt.forEach(t),WTo=r(Qke," (Wav2Vec2-Conformer model)"),Qke.forEach(t),QTo=i(J),Vp=n(J,"LI",{});var Uke=s(Vp);eme=n(Uke,"STRONG",{});var Gbt=s(eme);UTo=r(Gbt,"yolos"),Gbt.forEach(t),HTo=r(Uke," \u2014 "),hD=n(Uke,"A",{href:!0});var Obt=s(hD);JTo=r(Obt,"YolosFeatureExtractor"),Obt.forEach(t),YTo=r(Uke," (YOLOS model)"),Uke.forEach(t),J.forEach(t),KTo=i(fa),T(Xp.$$.fragment,fa),ZTo=i(fa),T(zp.$$.fragment,fa),fa.forEach(t),e7o=i(pl),Wp=n(pl,"DIV",{class:!0});var lJe=s(Wp);T(S8.$$.fragment,lJe),o7o=i(lJe),ome=n(lJe,"P",{});var Vbt=s(ome);r7o=r(Vbt,"Register a new feature extractor for this class."),Vbt.forEach(t),lJe.forEach(t),pl.forEach(t),eUe=i(f),td=n(f,"H2",{class:!0});var iJe=s(td);Qp=n(iJe,"A",{id:!0,class:!0,href:!0});var Xbt=s(Qp);rme=n(Xbt,"SPAN",{});var zbt=s(rme);T(R8.$$.fragment,zbt),zbt.forEach(t),Xbt.forEach(t),t7o=i(iJe),tme=n(iJe,"SPAN",{});var Wbt=s(tme);a7o=r(Wbt,"AutoProcessor"),Wbt.forEach(t),iJe.forEach(t),oUe=i(f),ko=n(f,"DIV",{class:!0});var _l=s(ko);T(P8.$$.fragment,_l),n7o=i(_l),B8=n(_l,"P",{});var dJe=s(B8);s7o=r(dJe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),pD=n(dJe,"A",{href:!0});var Qbt=s(pD);l7o=r(Qbt,"AutoProcessor.from_pretrained()"),Qbt.forEach(t),i7o=r(dJe," class method."),dJe.forEach(t),d7o=i(_l),I8=n(_l,"P",{});var cJe=s(I8);c7o=r(cJe,"This class cannot be instantiated directly using "),ame=n(cJe,"CODE",{});var Ubt=s(ame);f7o=r(Ubt,"__init__()"),Ubt.forEach(t),m7o=r(cJe," (throws an error)."),cJe.forEach(t),g7o=i(_l),Je=n(_l,"DIV",{class:!0});var ma=s(Je);T(N8.$$.fragment,ma),h7o=i(ma),nme=n(ma,"P",{});var Hbt=s(nme);p7o=r(Hbt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Hbt.forEach(t),_7o=i(ma),ad=n(ma,"P",{});var zae=s(ad);u7o=r(zae,"The processor class to instantiate is selected based on the "),sme=n(zae,"CODE",{});var Jbt=s(sme);b7o=r(Jbt,"model_type"),Jbt.forEach(t),v7o=r(zae,` property of the config object (either
passed as an argument or loaded from `),lme=n(zae,"CODE",{});var Ybt=s(lme);F7o=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),T7o=r(zae," if possible):"),zae.forEach(t),M7o=i(ma),ie=n(ma,"UL",{});var ge=s(ie);Up=n(ge,"LI",{});var Hke=s(Up);ime=n(Hke,"STRONG",{});var Kbt=s(ime);E7o=r(Kbt,"clip"),Kbt.forEach(t),C7o=r(Hke," \u2014 "),_D=n(Hke,"A",{href:!0});var Zbt=s(_D);w7o=r(Zbt,"CLIPProcessor"),Zbt.forEach(t),A7o=r(Hke," (CLIP model)"),Hke.forEach(t),L7o=i(ge),Hp=n(ge,"LI",{});var Jke=s(Hp);dme=n(Jke,"STRONG",{});var evt=s(dme);y7o=r(evt,"donut"),evt.forEach(t),x7o=r(Jke," \u2014 "),uD=n(Jke,"A",{href:!0});var ovt=s(uD);$7o=r(ovt,"DonutProcessor"),ovt.forEach(t),k7o=r(Jke," (Donut model)"),Jke.forEach(t),S7o=i(ge),Jp=n(ge,"LI",{});var Yke=s(Jp);cme=n(Yke,"STRONG",{});var rvt=s(cme);R7o=r(rvt,"flava"),rvt.forEach(t),P7o=r(Yke," \u2014 "),bD=n(Yke,"A",{href:!0});var tvt=s(bD);B7o=r(tvt,"FlavaProcessor"),tvt.forEach(t),I7o=r(Yke," (FLAVA model)"),Yke.forEach(t),N7o=i(ge),Yp=n(ge,"LI",{});var Kke=s(Yp);fme=n(Kke,"STRONG",{});var avt=s(fme);q7o=r(avt,"groupvit"),avt.forEach(t),j7o=r(Kke," \u2014 "),vD=n(Kke,"A",{href:!0});var nvt=s(vD);D7o=r(nvt,"CLIPProcessor"),nvt.forEach(t),G7o=r(Kke," (GroupViT model)"),Kke.forEach(t),O7o=i(ge),Kp=n(ge,"LI",{});var Zke=s(Kp);mme=n(Zke,"STRONG",{});var svt=s(mme);V7o=r(svt,"layoutlmv2"),svt.forEach(t),X7o=r(Zke," \u2014 "),FD=n(Zke,"A",{href:!0});var lvt=s(FD);z7o=r(lvt,"LayoutLMv2Processor"),lvt.forEach(t),W7o=r(Zke," (LayoutLMv2 model)"),Zke.forEach(t),Q7o=i(ge),Zp=n(ge,"LI",{});var eSe=s(Zp);gme=n(eSe,"STRONG",{});var ivt=s(gme);U7o=r(ivt,"layoutlmv3"),ivt.forEach(t),H7o=r(eSe," \u2014 "),TD=n(eSe,"A",{href:!0});var dvt=s(TD);J7o=r(dvt,"LayoutLMv3Processor"),dvt.forEach(t),Y7o=r(eSe," (LayoutLMv3 model)"),eSe.forEach(t),K7o=i(ge),e_=n(ge,"LI",{});var oSe=s(e_);hme=n(oSe,"STRONG",{});var cvt=s(hme);Z7o=r(cvt,"layoutxlm"),cvt.forEach(t),eMo=r(oSe," \u2014 "),MD=n(oSe,"A",{href:!0});var fvt=s(MD);oMo=r(fvt,"LayoutXLMProcessor"),fvt.forEach(t),rMo=r(oSe," (LayoutXLM model)"),oSe.forEach(t),tMo=i(ge),o_=n(ge,"LI",{});var rSe=s(o_);pme=n(rSe,"STRONG",{});var mvt=s(pme);aMo=r(mvt,"owlvit"),mvt.forEach(t),nMo=r(rSe," \u2014 "),ED=n(rSe,"A",{href:!0});var gvt=s(ED);sMo=r(gvt,"OwlViTProcessor"),gvt.forEach(t),lMo=r(rSe," (OWL-ViT model)"),rSe.forEach(t),iMo=i(ge),r_=n(ge,"LI",{});var tSe=s(r_);_me=n(tSe,"STRONG",{});var hvt=s(_me);dMo=r(hvt,"sew"),hvt.forEach(t),cMo=r(tSe," \u2014 "),CD=n(tSe,"A",{href:!0});var pvt=s(CD);fMo=r(pvt,"Wav2Vec2Processor"),pvt.forEach(t),mMo=r(tSe," (SEW model)"),tSe.forEach(t),gMo=i(ge),t_=n(ge,"LI",{});var aSe=s(t_);ume=n(aSe,"STRONG",{});var _vt=s(ume);hMo=r(_vt,"sew-d"),_vt.forEach(t),pMo=r(aSe," \u2014 "),wD=n(aSe,"A",{href:!0});var uvt=s(wD);_Mo=r(uvt,"Wav2Vec2Processor"),uvt.forEach(t),uMo=r(aSe," (SEW-D model)"),aSe.forEach(t),bMo=i(ge),a_=n(ge,"LI",{});var nSe=s(a_);bme=n(nSe,"STRONG",{});var bvt=s(bme);vMo=r(bvt,"speech_to_text"),bvt.forEach(t),FMo=r(nSe," \u2014 "),AD=n(nSe,"A",{href:!0});var vvt=s(AD);TMo=r(vvt,"Speech2TextProcessor"),vvt.forEach(t),MMo=r(nSe," (Speech2Text model)"),nSe.forEach(t),EMo=i(ge),n_=n(ge,"LI",{});var sSe=s(n_);vme=n(sSe,"STRONG",{});var Fvt=s(vme);CMo=r(Fvt,"speech_to_text_2"),Fvt.forEach(t),wMo=r(sSe," \u2014 "),LD=n(sSe,"A",{href:!0});var Tvt=s(LD);AMo=r(Tvt,"Speech2Text2Processor"),Tvt.forEach(t),LMo=r(sSe," (Speech2Text2 model)"),sSe.forEach(t),yMo=i(ge),s_=n(ge,"LI",{});var lSe=s(s_);Fme=n(lSe,"STRONG",{});var Mvt=s(Fme);xMo=r(Mvt,"trocr"),Mvt.forEach(t),$Mo=r(lSe," \u2014 "),yD=n(lSe,"A",{href:!0});var Evt=s(yD);kMo=r(Evt,"TrOCRProcessor"),Evt.forEach(t),SMo=r(lSe," (TrOCR model)"),lSe.forEach(t),RMo=i(ge),l_=n(ge,"LI",{});var iSe=s(l_);Tme=n(iSe,"STRONG",{});var Cvt=s(Tme);PMo=r(Cvt,"unispeech"),Cvt.forEach(t),BMo=r(iSe," \u2014 "),xD=n(iSe,"A",{href:!0});var wvt=s(xD);IMo=r(wvt,"Wav2Vec2Processor"),wvt.forEach(t),NMo=r(iSe," (UniSpeech model)"),iSe.forEach(t),qMo=i(ge),i_=n(ge,"LI",{});var dSe=s(i_);Mme=n(dSe,"STRONG",{});var Avt=s(Mme);jMo=r(Avt,"unispeech-sat"),Avt.forEach(t),DMo=r(dSe," \u2014 "),$D=n(dSe,"A",{href:!0});var Lvt=s($D);GMo=r(Lvt,"Wav2Vec2Processor"),Lvt.forEach(t),OMo=r(dSe," (UniSpeechSat model)"),dSe.forEach(t),VMo=i(ge),d_=n(ge,"LI",{});var cSe=s(d_);Eme=n(cSe,"STRONG",{});var yvt=s(Eme);XMo=r(yvt,"vilt"),yvt.forEach(t),zMo=r(cSe," \u2014 "),kD=n(cSe,"A",{href:!0});var xvt=s(kD);WMo=r(xvt,"ViltProcessor"),xvt.forEach(t),QMo=r(cSe," (ViLT model)"),cSe.forEach(t),UMo=i(ge),c_=n(ge,"LI",{});var fSe=s(c_);Cme=n(fSe,"STRONG",{});var $vt=s(Cme);HMo=r($vt,"vision-text-dual-encoder"),$vt.forEach(t),JMo=r(fSe," \u2014 "),SD=n(fSe,"A",{href:!0});var kvt=s(SD);YMo=r(kvt,"VisionTextDualEncoderProcessor"),kvt.forEach(t),KMo=r(fSe," (VisionTextDualEncoder model)"),fSe.forEach(t),ZMo=i(ge),f_=n(ge,"LI",{});var mSe=s(f_);wme=n(mSe,"STRONG",{});var Svt=s(wme);eEo=r(Svt,"wav2vec2"),Svt.forEach(t),oEo=r(mSe," \u2014 "),RD=n(mSe,"A",{href:!0});var Rvt=s(RD);rEo=r(Rvt,"Wav2Vec2Processor"),Rvt.forEach(t),tEo=r(mSe," (Wav2Vec2 model)"),mSe.forEach(t),aEo=i(ge),m_=n(ge,"LI",{});var gSe=s(m_);Ame=n(gSe,"STRONG",{});var Pvt=s(Ame);nEo=r(Pvt,"wav2vec2-conformer"),Pvt.forEach(t),sEo=r(gSe," \u2014 "),PD=n(gSe,"A",{href:!0});var Bvt=s(PD);lEo=r(Bvt,"Wav2Vec2Processor"),Bvt.forEach(t),iEo=r(gSe," (Wav2Vec2-Conformer model)"),gSe.forEach(t),dEo=i(ge),g_=n(ge,"LI",{});var hSe=s(g_);Lme=n(hSe,"STRONG",{});var Ivt=s(Lme);cEo=r(Ivt,"wavlm"),Ivt.forEach(t),fEo=r(hSe," \u2014 "),BD=n(hSe,"A",{href:!0});var Nvt=s(BD);mEo=r(Nvt,"Wav2Vec2Processor"),Nvt.forEach(t),gEo=r(hSe," (WavLM model)"),hSe.forEach(t),ge.forEach(t),hEo=i(ma),T(h_.$$.fragment,ma),pEo=i(ma),T(p_.$$.fragment,ma),ma.forEach(t),_Eo=i(_l),__=n(_l,"DIV",{class:!0});var fJe=s(__);T(q8.$$.fragment,fJe),uEo=i(fJe),yme=n(fJe,"P",{});var qvt=s(yme);bEo=r(qvt,"Register a new processor for this class."),qvt.forEach(t),fJe.forEach(t),_l.forEach(t),rUe=i(f),nd=n(f,"H2",{class:!0});var mJe=s(nd);u_=n(mJe,"A",{id:!0,class:!0,href:!0});var jvt=s(u_);xme=n(jvt,"SPAN",{});var Dvt=s(xme);T(j8.$$.fragment,Dvt),Dvt.forEach(t),jvt.forEach(t),vEo=i(mJe),$me=n(mJe,"SPAN",{});var Gvt=s($me);FEo=r(Gvt,"AutoModel"),Gvt.forEach(t),mJe.forEach(t),tUe=i(f),So=n(f,"DIV",{class:!0});var ul=s(So);T(D8.$$.fragment,ul),TEo=i(ul),sd=n(ul,"P",{});var Wae=s(sd);MEo=r(Wae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ID=n(Wae,"A",{href:!0});var Ovt=s(ID);EEo=r(Ovt,"from_pretrained()"),Ovt.forEach(t),CEo=r(Wae," class method or the "),ND=n(Wae,"A",{href:!0});var Vvt=s(ND);wEo=r(Vvt,"from_config()"),Vvt.forEach(t),AEo=r(Wae,` class
method.`),Wae.forEach(t),LEo=i(ul),G8=n(ul,"P",{});var gJe=s(G8);yEo=r(gJe,"This class cannot be instantiated directly using "),kme=n(gJe,"CODE",{});var Xvt=s(kme);xEo=r(Xvt,"__init__()"),Xvt.forEach(t),$Eo=r(gJe," (throws an error)."),gJe.forEach(t),kEo=i(ul),mt=n(ul,"DIV",{class:!0});var mL=s(mt);T(O8.$$.fragment,mL),SEo=i(mL),Sme=n(mL,"P",{});var zvt=s(Sme);REo=r(zvt,"Instantiates one of the base model classes of the library from a configuration."),zvt.forEach(t),PEo=i(mL),ld=n(mL,"P",{});var Qae=s(ld);BEo=r(Qae,`Note:
Loading a model from its configuration file does `),Rme=n(Qae,"STRONG",{});var Wvt=s(Rme);IEo=r(Wvt,"not"),Wvt.forEach(t),NEo=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(Qae,"A",{href:!0});var Qvt=s(qD);qEo=r(Qvt,"from_pretrained()"),Qvt.forEach(t),jEo=r(Qae," to load the model weights."),Qae.forEach(t),DEo=i(mL),T(b_.$$.fragment,mL),mL.forEach(t),GEo=i(ul),Ye=n(ul,"DIV",{class:!0});var ga=s(Ye);T(V8.$$.fragment,ga),OEo=i(ga),Pme=n(ga,"P",{});var Uvt=s(Pme);VEo=r(Uvt,"Instantiate one of the base model classes of the library from a pretrained model."),Uvt.forEach(t),XEo=i(ga),Va=n(ga,"P",{});var gL=s(Va);zEo=r(gL,"The model class to instantiate is selected based on the "),Bme=n(gL,"CODE",{});var Hvt=s(Bme);WEo=r(Hvt,"model_type"),Hvt.forEach(t),QEo=r(gL,` property of the config object (either
passed as an argument or loaded from `),Ime=n(gL,"CODE",{});var Jvt=s(Ime);UEo=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),HEo=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(gL,"CODE",{});var Yvt=s(Nme);JEo=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),YEo=r(gL,":"),gL.forEach(t),KEo=i(ga),y=n(ga,"UL",{});var x=s(y);v_=n(x,"LI",{});var pSe=s(v_);qme=n(pSe,"STRONG",{});var Kvt=s(qme);ZEo=r(Kvt,"albert"),Kvt.forEach(t),eCo=r(pSe," \u2014 "),jD=n(pSe,"A",{href:!0});var Zvt=s(jD);oCo=r(Zvt,"AlbertModel"),Zvt.forEach(t),rCo=r(pSe," (ALBERT model)"),pSe.forEach(t),tCo=i(x),F_=n(x,"LI",{});var _Se=s(F_);jme=n(_Se,"STRONG",{});var e5t=s(jme);aCo=r(e5t,"bart"),e5t.forEach(t),nCo=r(_Se," \u2014 "),DD=n(_Se,"A",{href:!0});var o5t=s(DD);sCo=r(o5t,"BartModel"),o5t.forEach(t),lCo=r(_Se," (BART model)"),_Se.forEach(t),iCo=i(x),T_=n(x,"LI",{});var uSe=s(T_);Dme=n(uSe,"STRONG",{});var r5t=s(Dme);dCo=r(r5t,"beit"),r5t.forEach(t),cCo=r(uSe," \u2014 "),GD=n(uSe,"A",{href:!0});var t5t=s(GD);fCo=r(t5t,"BeitModel"),t5t.forEach(t),mCo=r(uSe," (BEiT model)"),uSe.forEach(t),gCo=i(x),M_=n(x,"LI",{});var bSe=s(M_);Gme=n(bSe,"STRONG",{});var a5t=s(Gme);hCo=r(a5t,"bert"),a5t.forEach(t),pCo=r(bSe," \u2014 "),OD=n(bSe,"A",{href:!0});var n5t=s(OD);_Co=r(n5t,"BertModel"),n5t.forEach(t),uCo=r(bSe," (BERT model)"),bSe.forEach(t),bCo=i(x),E_=n(x,"LI",{});var vSe=s(E_);Ome=n(vSe,"STRONG",{});var s5t=s(Ome);vCo=r(s5t,"bert-generation"),s5t.forEach(t),FCo=r(vSe," \u2014 "),VD=n(vSe,"A",{href:!0});var l5t=s(VD);TCo=r(l5t,"BertGenerationEncoder"),l5t.forEach(t),MCo=r(vSe," (Bert Generation model)"),vSe.forEach(t),ECo=i(x),C_=n(x,"LI",{});var FSe=s(C_);Vme=n(FSe,"STRONG",{});var i5t=s(Vme);CCo=r(i5t,"big_bird"),i5t.forEach(t),wCo=r(FSe," \u2014 "),XD=n(FSe,"A",{href:!0});var d5t=s(XD);ACo=r(d5t,"BigBirdModel"),d5t.forEach(t),LCo=r(FSe," (BigBird model)"),FSe.forEach(t),yCo=i(x),w_=n(x,"LI",{});var TSe=s(w_);Xme=n(TSe,"STRONG",{});var c5t=s(Xme);xCo=r(c5t,"bigbird_pegasus"),c5t.forEach(t),$Co=r(TSe," \u2014 "),zD=n(TSe,"A",{href:!0});var f5t=s(zD);kCo=r(f5t,"BigBirdPegasusModel"),f5t.forEach(t),SCo=r(TSe," (BigBird-Pegasus model)"),TSe.forEach(t),RCo=i(x),A_=n(x,"LI",{});var MSe=s(A_);zme=n(MSe,"STRONG",{});var m5t=s(zme);PCo=r(m5t,"blenderbot"),m5t.forEach(t),BCo=r(MSe," \u2014 "),WD=n(MSe,"A",{href:!0});var g5t=s(WD);ICo=r(g5t,"BlenderbotModel"),g5t.forEach(t),NCo=r(MSe," (Blenderbot model)"),MSe.forEach(t),qCo=i(x),L_=n(x,"LI",{});var ESe=s(L_);Wme=n(ESe,"STRONG",{});var h5t=s(Wme);jCo=r(h5t,"blenderbot-small"),h5t.forEach(t),DCo=r(ESe," \u2014 "),QD=n(ESe,"A",{href:!0});var p5t=s(QD);GCo=r(p5t,"BlenderbotSmallModel"),p5t.forEach(t),OCo=r(ESe," (BlenderbotSmall model)"),ESe.forEach(t),VCo=i(x),y_=n(x,"LI",{});var CSe=s(y_);Qme=n(CSe,"STRONG",{});var _5t=s(Qme);XCo=r(_5t,"bloom"),_5t.forEach(t),zCo=r(CSe," \u2014 "),UD=n(CSe,"A",{href:!0});var u5t=s(UD);WCo=r(u5t,"BloomModel"),u5t.forEach(t),QCo=r(CSe," (BLOOM model)"),CSe.forEach(t),UCo=i(x),x_=n(x,"LI",{});var wSe=s(x_);Ume=n(wSe,"STRONG",{});var b5t=s(Ume);HCo=r(b5t,"camembert"),b5t.forEach(t),JCo=r(wSe," \u2014 "),HD=n(wSe,"A",{href:!0});var v5t=s(HD);YCo=r(v5t,"CamembertModel"),v5t.forEach(t),KCo=r(wSe," (CamemBERT model)"),wSe.forEach(t),ZCo=i(x),$_=n(x,"LI",{});var ASe=s($_);Hme=n(ASe,"STRONG",{});var F5t=s(Hme);e3o=r(F5t,"canine"),F5t.forEach(t),o3o=r(ASe," \u2014 "),JD=n(ASe,"A",{href:!0});var T5t=s(JD);r3o=r(T5t,"CanineModel"),T5t.forEach(t),t3o=r(ASe," (CANINE model)"),ASe.forEach(t),a3o=i(x),k_=n(x,"LI",{});var LSe=s(k_);Jme=n(LSe,"STRONG",{});var M5t=s(Jme);n3o=r(M5t,"clip"),M5t.forEach(t),s3o=r(LSe," \u2014 "),YD=n(LSe,"A",{href:!0});var E5t=s(YD);l3o=r(E5t,"CLIPModel"),E5t.forEach(t),i3o=r(LSe," (CLIP model)"),LSe.forEach(t),d3o=i(x),S_=n(x,"LI",{});var ySe=s(S_);Yme=n(ySe,"STRONG",{});var C5t=s(Yme);c3o=r(C5t,"codegen"),C5t.forEach(t),f3o=r(ySe," \u2014 "),KD=n(ySe,"A",{href:!0});var w5t=s(KD);m3o=r(w5t,"CodeGenModel"),w5t.forEach(t),g3o=r(ySe," (CodeGen model)"),ySe.forEach(t),h3o=i(x),R_=n(x,"LI",{});var xSe=s(R_);Kme=n(xSe,"STRONG",{});var A5t=s(Kme);p3o=r(A5t,"convbert"),A5t.forEach(t),_3o=r(xSe," \u2014 "),ZD=n(xSe,"A",{href:!0});var L5t=s(ZD);u3o=r(L5t,"ConvBertModel"),L5t.forEach(t),b3o=r(xSe," (ConvBERT model)"),xSe.forEach(t),v3o=i(x),P_=n(x,"LI",{});var $Se=s(P_);Zme=n($Se,"STRONG",{});var y5t=s(Zme);F3o=r(y5t,"convnext"),y5t.forEach(t),T3o=r($Se," \u2014 "),eG=n($Se,"A",{href:!0});var x5t=s(eG);M3o=r(x5t,"ConvNextModel"),x5t.forEach(t),E3o=r($Se," (ConvNeXT model)"),$Se.forEach(t),C3o=i(x),B_=n(x,"LI",{});var kSe=s(B_);ege=n(kSe,"STRONG",{});var $5t=s(ege);w3o=r($5t,"ctrl"),$5t.forEach(t),A3o=r(kSe," \u2014 "),oG=n(kSe,"A",{href:!0});var k5t=s(oG);L3o=r(k5t,"CTRLModel"),k5t.forEach(t),y3o=r(kSe," (CTRL model)"),kSe.forEach(t),x3o=i(x),I_=n(x,"LI",{});var SSe=s(I_);oge=n(SSe,"STRONG",{});var S5t=s(oge);$3o=r(S5t,"cvt"),S5t.forEach(t),k3o=r(SSe," \u2014 "),rG=n(SSe,"A",{href:!0});var R5t=s(rG);S3o=r(R5t,"CvtModel"),R5t.forEach(t),R3o=r(SSe," (CvT model)"),SSe.forEach(t),P3o=i(x),N_=n(x,"LI",{});var RSe=s(N_);rge=n(RSe,"STRONG",{});var P5t=s(rge);B3o=r(P5t,"data2vec-audio"),P5t.forEach(t),I3o=r(RSe," \u2014 "),tG=n(RSe,"A",{href:!0});var B5t=s(tG);N3o=r(B5t,"Data2VecAudioModel"),B5t.forEach(t),q3o=r(RSe," (Data2VecAudio model)"),RSe.forEach(t),j3o=i(x),q_=n(x,"LI",{});var PSe=s(q_);tge=n(PSe,"STRONG",{});var I5t=s(tge);D3o=r(I5t,"data2vec-text"),I5t.forEach(t),G3o=r(PSe," \u2014 "),aG=n(PSe,"A",{href:!0});var N5t=s(aG);O3o=r(N5t,"Data2VecTextModel"),N5t.forEach(t),V3o=r(PSe," (Data2VecText model)"),PSe.forEach(t),X3o=i(x),j_=n(x,"LI",{});var BSe=s(j_);age=n(BSe,"STRONG",{});var q5t=s(age);z3o=r(q5t,"data2vec-vision"),q5t.forEach(t),W3o=r(BSe," \u2014 "),nG=n(BSe,"A",{href:!0});var j5t=s(nG);Q3o=r(j5t,"Data2VecVisionModel"),j5t.forEach(t),U3o=r(BSe," (Data2VecVision model)"),BSe.forEach(t),H3o=i(x),D_=n(x,"LI",{});var ISe=s(D_);nge=n(ISe,"STRONG",{});var D5t=s(nge);J3o=r(D5t,"deberta"),D5t.forEach(t),Y3o=r(ISe," \u2014 "),sG=n(ISe,"A",{href:!0});var G5t=s(sG);K3o=r(G5t,"DebertaModel"),G5t.forEach(t),Z3o=r(ISe," (DeBERTa model)"),ISe.forEach(t),e0o=i(x),G_=n(x,"LI",{});var NSe=s(G_);sge=n(NSe,"STRONG",{});var O5t=s(sge);o0o=r(O5t,"deberta-v2"),O5t.forEach(t),r0o=r(NSe," \u2014 "),lG=n(NSe,"A",{href:!0});var V5t=s(lG);t0o=r(V5t,"DebertaV2Model"),V5t.forEach(t),a0o=r(NSe," (DeBERTa-v2 model)"),NSe.forEach(t),n0o=i(x),O_=n(x,"LI",{});var qSe=s(O_);lge=n(qSe,"STRONG",{});var X5t=s(lge);s0o=r(X5t,"decision_transformer"),X5t.forEach(t),l0o=r(qSe," \u2014 "),iG=n(qSe,"A",{href:!0});var z5t=s(iG);i0o=r(z5t,"DecisionTransformerModel"),z5t.forEach(t),d0o=r(qSe," (Decision Transformer model)"),qSe.forEach(t),c0o=i(x),V_=n(x,"LI",{});var jSe=s(V_);ige=n(jSe,"STRONG",{});var W5t=s(ige);f0o=r(W5t,"deit"),W5t.forEach(t),m0o=r(jSe," \u2014 "),dG=n(jSe,"A",{href:!0});var Q5t=s(dG);g0o=r(Q5t,"DeiTModel"),Q5t.forEach(t),h0o=r(jSe," (DeiT model)"),jSe.forEach(t),p0o=i(x),X_=n(x,"LI",{});var DSe=s(X_);dge=n(DSe,"STRONG",{});var U5t=s(dge);_0o=r(U5t,"detr"),U5t.forEach(t),u0o=r(DSe," \u2014 "),cG=n(DSe,"A",{href:!0});var H5t=s(cG);b0o=r(H5t,"DetrModel"),H5t.forEach(t),v0o=r(DSe," (DETR model)"),DSe.forEach(t),F0o=i(x),z_=n(x,"LI",{});var GSe=s(z_);cge=n(GSe,"STRONG",{});var J5t=s(cge);T0o=r(J5t,"distilbert"),J5t.forEach(t),M0o=r(GSe," \u2014 "),fG=n(GSe,"A",{href:!0});var Y5t=s(fG);E0o=r(Y5t,"DistilBertModel"),Y5t.forEach(t),C0o=r(GSe," (DistilBERT model)"),GSe.forEach(t),w0o=i(x),W_=n(x,"LI",{});var OSe=s(W_);fge=n(OSe,"STRONG",{});var K5t=s(fge);A0o=r(K5t,"donut-swin"),K5t.forEach(t),L0o=r(OSe," \u2014 "),mG=n(OSe,"A",{href:!0});var Z5t=s(mG);y0o=r(Z5t,"DonutSwinModel"),Z5t.forEach(t),x0o=r(OSe," (DonutSwin model)"),OSe.forEach(t),$0o=i(x),Q_=n(x,"LI",{});var VSe=s(Q_);mge=n(VSe,"STRONG",{});var eFt=s(mge);k0o=r(eFt,"dpr"),eFt.forEach(t),S0o=r(VSe," \u2014 "),gG=n(VSe,"A",{href:!0});var oFt=s(gG);R0o=r(oFt,"DPRQuestionEncoder"),oFt.forEach(t),P0o=r(VSe," (DPR model)"),VSe.forEach(t),B0o=i(x),U_=n(x,"LI",{});var XSe=s(U_);gge=n(XSe,"STRONG",{});var rFt=s(gge);I0o=r(rFt,"dpt"),rFt.forEach(t),N0o=r(XSe," \u2014 "),hG=n(XSe,"A",{href:!0});var tFt=s(hG);q0o=r(tFt,"DPTModel"),tFt.forEach(t),j0o=r(XSe," (DPT model)"),XSe.forEach(t),D0o=i(x),H_=n(x,"LI",{});var zSe=s(H_);hge=n(zSe,"STRONG",{});var aFt=s(hge);G0o=r(aFt,"electra"),aFt.forEach(t),O0o=r(zSe," \u2014 "),pG=n(zSe,"A",{href:!0});var nFt=s(pG);V0o=r(nFt,"ElectraModel"),nFt.forEach(t),X0o=r(zSe," (ELECTRA model)"),zSe.forEach(t),z0o=i(x),J_=n(x,"LI",{});var WSe=s(J_);pge=n(WSe,"STRONG",{});var sFt=s(pge);W0o=r(sFt,"flaubert"),sFt.forEach(t),Q0o=r(WSe," \u2014 "),_G=n(WSe,"A",{href:!0});var lFt=s(_G);U0o=r(lFt,"FlaubertModel"),lFt.forEach(t),H0o=r(WSe," (FlauBERT model)"),WSe.forEach(t),J0o=i(x),Y_=n(x,"LI",{});var QSe=s(Y_);_ge=n(QSe,"STRONG",{});var iFt=s(_ge);Y0o=r(iFt,"flava"),iFt.forEach(t),K0o=r(QSe," \u2014 "),uG=n(QSe,"A",{href:!0});var dFt=s(uG);Z0o=r(dFt,"FlavaModel"),dFt.forEach(t),ewo=r(QSe," (FLAVA model)"),QSe.forEach(t),owo=i(x),K_=n(x,"LI",{});var USe=s(K_);uge=n(USe,"STRONG",{});var cFt=s(uge);rwo=r(cFt,"fnet"),cFt.forEach(t),two=r(USe," \u2014 "),bG=n(USe,"A",{href:!0});var fFt=s(bG);awo=r(fFt,"FNetModel"),fFt.forEach(t),nwo=r(USe," (FNet model)"),USe.forEach(t),swo=i(x),Z_=n(x,"LI",{});var HSe=s(Z_);bge=n(HSe,"STRONG",{});var mFt=s(bge);lwo=r(mFt,"fsmt"),mFt.forEach(t),iwo=r(HSe," \u2014 "),vG=n(HSe,"A",{href:!0});var gFt=s(vG);dwo=r(gFt,"FSMTModel"),gFt.forEach(t),cwo=r(HSe," (FairSeq Machine-Translation model)"),HSe.forEach(t),fwo=i(x),il=n(x,"LI",{});var oP=s(il);vge=n(oP,"STRONG",{});var hFt=s(vge);mwo=r(hFt,"funnel"),hFt.forEach(t),gwo=r(oP," \u2014 "),FG=n(oP,"A",{href:!0});var pFt=s(FG);hwo=r(pFt,"FunnelModel"),pFt.forEach(t),pwo=r(oP," or "),TG=n(oP,"A",{href:!0});var _Ft=s(TG);_wo=r(_Ft,"FunnelBaseModel"),_Ft.forEach(t),uwo=r(oP," (Funnel Transformer model)"),oP.forEach(t),bwo=i(x),eu=n(x,"LI",{});var JSe=s(eu);Fge=n(JSe,"STRONG",{});var uFt=s(Fge);vwo=r(uFt,"glpn"),uFt.forEach(t),Fwo=r(JSe," \u2014 "),MG=n(JSe,"A",{href:!0});var bFt=s(MG);Two=r(bFt,"GLPNModel"),bFt.forEach(t),Mwo=r(JSe," (GLPN model)"),JSe.forEach(t),Ewo=i(x),ou=n(x,"LI",{});var YSe=s(ou);Tge=n(YSe,"STRONG",{});var vFt=s(Tge);Cwo=r(vFt,"gpt2"),vFt.forEach(t),wwo=r(YSe," \u2014 "),EG=n(YSe,"A",{href:!0});var FFt=s(EG);Awo=r(FFt,"GPT2Model"),FFt.forEach(t),Lwo=r(YSe," (OpenAI GPT-2 model)"),YSe.forEach(t),ywo=i(x),ru=n(x,"LI",{});var KSe=s(ru);Mge=n(KSe,"STRONG",{});var TFt=s(Mge);xwo=r(TFt,"gpt_neo"),TFt.forEach(t),$wo=r(KSe," \u2014 "),CG=n(KSe,"A",{href:!0});var MFt=s(CG);kwo=r(MFt,"GPTNeoModel"),MFt.forEach(t),Swo=r(KSe," (GPT Neo model)"),KSe.forEach(t),Rwo=i(x),tu=n(x,"LI",{});var ZSe=s(tu);Ege=n(ZSe,"STRONG",{});var EFt=s(Ege);Pwo=r(EFt,"gpt_neox"),EFt.forEach(t),Bwo=r(ZSe," \u2014 "),wG=n(ZSe,"A",{href:!0});var CFt=s(wG);Iwo=r(CFt,"GPTNeoXModel"),CFt.forEach(t),Nwo=r(ZSe," (GPT NeoX model)"),ZSe.forEach(t),qwo=i(x),au=n(x,"LI",{});var eRe=s(au);Cge=n(eRe,"STRONG",{});var wFt=s(Cge);jwo=r(wFt,"gptj"),wFt.forEach(t),Dwo=r(eRe," \u2014 "),AG=n(eRe,"A",{href:!0});var AFt=s(AG);Gwo=r(AFt,"GPTJModel"),AFt.forEach(t),Owo=r(eRe," (GPT-J model)"),eRe.forEach(t),Vwo=i(x),nu=n(x,"LI",{});var oRe=s(nu);wge=n(oRe,"STRONG",{});var LFt=s(wge);Xwo=r(LFt,"groupvit"),LFt.forEach(t),zwo=r(oRe," \u2014 "),LG=n(oRe,"A",{href:!0});var yFt=s(LG);Wwo=r(yFt,"GroupViTModel"),yFt.forEach(t),Qwo=r(oRe," (GroupViT model)"),oRe.forEach(t),Uwo=i(x),su=n(x,"LI",{});var rRe=s(su);Age=n(rRe,"STRONG",{});var xFt=s(Age);Hwo=r(xFt,"hubert"),xFt.forEach(t),Jwo=r(rRe," \u2014 "),yG=n(rRe,"A",{href:!0});var $Ft=s(yG);Ywo=r($Ft,"HubertModel"),$Ft.forEach(t),Kwo=r(rRe," (Hubert model)"),rRe.forEach(t),Zwo=i(x),lu=n(x,"LI",{});var tRe=s(lu);Lge=n(tRe,"STRONG",{});var kFt=s(Lge);e6o=r(kFt,"ibert"),kFt.forEach(t),o6o=r(tRe," \u2014 "),xG=n(tRe,"A",{href:!0});var SFt=s(xG);r6o=r(SFt,"IBertModel"),SFt.forEach(t),t6o=r(tRe," (I-BERT model)"),tRe.forEach(t),a6o=i(x),iu=n(x,"LI",{});var aRe=s(iu);yge=n(aRe,"STRONG",{});var RFt=s(yge);n6o=r(RFt,"imagegpt"),RFt.forEach(t),s6o=r(aRe," \u2014 "),$G=n(aRe,"A",{href:!0});var PFt=s($G);l6o=r(PFt,"ImageGPTModel"),PFt.forEach(t),i6o=r(aRe," (ImageGPT model)"),aRe.forEach(t),d6o=i(x),du=n(x,"LI",{});var nRe=s(du);xge=n(nRe,"STRONG",{});var BFt=s(xge);c6o=r(BFt,"layoutlm"),BFt.forEach(t),f6o=r(nRe," \u2014 "),kG=n(nRe,"A",{href:!0});var IFt=s(kG);m6o=r(IFt,"LayoutLMModel"),IFt.forEach(t),g6o=r(nRe," (LayoutLM model)"),nRe.forEach(t),h6o=i(x),cu=n(x,"LI",{});var sRe=s(cu);$ge=n(sRe,"STRONG",{});var NFt=s($ge);p6o=r(NFt,"layoutlmv2"),NFt.forEach(t),_6o=r(sRe," \u2014 "),SG=n(sRe,"A",{href:!0});var qFt=s(SG);u6o=r(qFt,"LayoutLMv2Model"),qFt.forEach(t),b6o=r(sRe," (LayoutLMv2 model)"),sRe.forEach(t),v6o=i(x),fu=n(x,"LI",{});var lRe=s(fu);kge=n(lRe,"STRONG",{});var jFt=s(kge);F6o=r(jFt,"layoutlmv3"),jFt.forEach(t),T6o=r(lRe," \u2014 "),RG=n(lRe,"A",{href:!0});var DFt=s(RG);M6o=r(DFt,"LayoutLMv3Model"),DFt.forEach(t),E6o=r(lRe," (LayoutLMv3 model)"),lRe.forEach(t),C6o=i(x),mu=n(x,"LI",{});var iRe=s(mu);Sge=n(iRe,"STRONG",{});var GFt=s(Sge);w6o=r(GFt,"led"),GFt.forEach(t),A6o=r(iRe," \u2014 "),PG=n(iRe,"A",{href:!0});var OFt=s(PG);L6o=r(OFt,"LEDModel"),OFt.forEach(t),y6o=r(iRe," (LED model)"),iRe.forEach(t),x6o=i(x),gu=n(x,"LI",{});var dRe=s(gu);Rge=n(dRe,"STRONG",{});var VFt=s(Rge);$6o=r(VFt,"levit"),VFt.forEach(t),k6o=r(dRe," \u2014 "),BG=n(dRe,"A",{href:!0});var XFt=s(BG);S6o=r(XFt,"LevitModel"),XFt.forEach(t),R6o=r(dRe," (LeViT model)"),dRe.forEach(t),P6o=i(x),hu=n(x,"LI",{});var cRe=s(hu);Pge=n(cRe,"STRONG",{});var zFt=s(Pge);B6o=r(zFt,"longformer"),zFt.forEach(t),I6o=r(cRe," \u2014 "),IG=n(cRe,"A",{href:!0});var WFt=s(IG);N6o=r(WFt,"LongformerModel"),WFt.forEach(t),q6o=r(cRe," (Longformer model)"),cRe.forEach(t),j6o=i(x),pu=n(x,"LI",{});var fRe=s(pu);Bge=n(fRe,"STRONG",{});var QFt=s(Bge);D6o=r(QFt,"longt5"),QFt.forEach(t),G6o=r(fRe," \u2014 "),NG=n(fRe,"A",{href:!0});var UFt=s(NG);O6o=r(UFt,"LongT5Model"),UFt.forEach(t),V6o=r(fRe," (LongT5 model)"),fRe.forEach(t),X6o=i(x),_u=n(x,"LI",{});var mRe=s(_u);Ige=n(mRe,"STRONG",{});var HFt=s(Ige);z6o=r(HFt,"luke"),HFt.forEach(t),W6o=r(mRe," \u2014 "),qG=n(mRe,"A",{href:!0});var JFt=s(qG);Q6o=r(JFt,"LukeModel"),JFt.forEach(t),U6o=r(mRe," (LUKE model)"),mRe.forEach(t),H6o=i(x),uu=n(x,"LI",{});var gRe=s(uu);Nge=n(gRe,"STRONG",{});var YFt=s(Nge);J6o=r(YFt,"lxmert"),YFt.forEach(t),Y6o=r(gRe," \u2014 "),jG=n(gRe,"A",{href:!0});var KFt=s(jG);K6o=r(KFt,"LxmertModel"),KFt.forEach(t),Z6o=r(gRe," (LXMERT model)"),gRe.forEach(t),eAo=i(x),bu=n(x,"LI",{});var hRe=s(bu);qge=n(hRe,"STRONG",{});var ZFt=s(qge);oAo=r(ZFt,"m2m_100"),ZFt.forEach(t),rAo=r(hRe," \u2014 "),DG=n(hRe,"A",{href:!0});var eTt=s(DG);tAo=r(eTt,"M2M100Model"),eTt.forEach(t),aAo=r(hRe," (M2M100 model)"),hRe.forEach(t),nAo=i(x),vu=n(x,"LI",{});var pRe=s(vu);jge=n(pRe,"STRONG",{});var oTt=s(jge);sAo=r(oTt,"marian"),oTt.forEach(t),lAo=r(pRe," \u2014 "),GG=n(pRe,"A",{href:!0});var rTt=s(GG);iAo=r(rTt,"MarianModel"),rTt.forEach(t),dAo=r(pRe," (Marian model)"),pRe.forEach(t),cAo=i(x),Fu=n(x,"LI",{});var _Re=s(Fu);Dge=n(_Re,"STRONG",{});var tTt=s(Dge);fAo=r(tTt,"maskformer"),tTt.forEach(t),mAo=r(_Re," \u2014 "),OG=n(_Re,"A",{href:!0});var aTt=s(OG);gAo=r(aTt,"MaskFormerModel"),aTt.forEach(t),hAo=r(_Re," (MaskFormer model)"),_Re.forEach(t),pAo=i(x),Tu=n(x,"LI",{});var uRe=s(Tu);Gge=n(uRe,"STRONG",{});var nTt=s(Gge);_Ao=r(nTt,"mbart"),nTt.forEach(t),uAo=r(uRe," \u2014 "),VG=n(uRe,"A",{href:!0});var sTt=s(VG);bAo=r(sTt,"MBartModel"),sTt.forEach(t),vAo=r(uRe," (mBART model)"),uRe.forEach(t),FAo=i(x),Mu=n(x,"LI",{});var bRe=s(Mu);Oge=n(bRe,"STRONG",{});var lTt=s(Oge);TAo=r(lTt,"mctct"),lTt.forEach(t),MAo=r(bRe," \u2014 "),XG=n(bRe,"A",{href:!0});var iTt=s(XG);EAo=r(iTt,"MCTCTModel"),iTt.forEach(t),CAo=r(bRe," (M-CTC-T model)"),bRe.forEach(t),wAo=i(x),Eu=n(x,"LI",{});var vRe=s(Eu);Vge=n(vRe,"STRONG",{});var dTt=s(Vge);AAo=r(dTt,"megatron-bert"),dTt.forEach(t),LAo=r(vRe," \u2014 "),zG=n(vRe,"A",{href:!0});var cTt=s(zG);yAo=r(cTt,"MegatronBertModel"),cTt.forEach(t),xAo=r(vRe," (Megatron-BERT model)"),vRe.forEach(t),$Ao=i(x),Cu=n(x,"LI",{});var FRe=s(Cu);Xge=n(FRe,"STRONG",{});var fTt=s(Xge);kAo=r(fTt,"mobilebert"),fTt.forEach(t),SAo=r(FRe," \u2014 "),WG=n(FRe,"A",{href:!0});var mTt=s(WG);RAo=r(mTt,"MobileBertModel"),mTt.forEach(t),PAo=r(FRe," (MobileBERT model)"),FRe.forEach(t),BAo=i(x),wu=n(x,"LI",{});var TRe=s(wu);zge=n(TRe,"STRONG",{});var gTt=s(zge);IAo=r(gTt,"mobilevit"),gTt.forEach(t),NAo=r(TRe," \u2014 "),QG=n(TRe,"A",{href:!0});var hTt=s(QG);qAo=r(hTt,"MobileViTModel"),hTt.forEach(t),jAo=r(TRe," (MobileViT model)"),TRe.forEach(t),DAo=i(x),Au=n(x,"LI",{});var MRe=s(Au);Wge=n(MRe,"STRONG",{});var pTt=s(Wge);GAo=r(pTt,"mpnet"),pTt.forEach(t),OAo=r(MRe," \u2014 "),UG=n(MRe,"A",{href:!0});var _Tt=s(UG);VAo=r(_Tt,"MPNetModel"),_Tt.forEach(t),XAo=r(MRe," (MPNet model)"),MRe.forEach(t),zAo=i(x),Lu=n(x,"LI",{});var ERe=s(Lu);Qge=n(ERe,"STRONG",{});var uTt=s(Qge);WAo=r(uTt,"mt5"),uTt.forEach(t),QAo=r(ERe," \u2014 "),HG=n(ERe,"A",{href:!0});var bTt=s(HG);UAo=r(bTt,"MT5Model"),bTt.forEach(t),HAo=r(ERe," (MT5 model)"),ERe.forEach(t),JAo=i(x),yu=n(x,"LI",{});var CRe=s(yu);Uge=n(CRe,"STRONG",{});var vTt=s(Uge);YAo=r(vTt,"mvp"),vTt.forEach(t),KAo=r(CRe," \u2014 "),JG=n(CRe,"A",{href:!0});var FTt=s(JG);ZAo=r(FTt,"MvpModel"),FTt.forEach(t),eLo=r(CRe," (MVP model)"),CRe.forEach(t),oLo=i(x),xu=n(x,"LI",{});var wRe=s(xu);Hge=n(wRe,"STRONG",{});var TTt=s(Hge);rLo=r(TTt,"nezha"),TTt.forEach(t),tLo=r(wRe," \u2014 "),YG=n(wRe,"A",{href:!0});var MTt=s(YG);aLo=r(MTt,"NezhaModel"),MTt.forEach(t),nLo=r(wRe," (Nezha model)"),wRe.forEach(t),sLo=i(x),$u=n(x,"LI",{});var ARe=s($u);Jge=n(ARe,"STRONG",{});var ETt=s(Jge);lLo=r(ETt,"nllb"),ETt.forEach(t),iLo=r(ARe," \u2014 "),KG=n(ARe,"A",{href:!0});var CTt=s(KG);dLo=r(CTt,"M2M100Model"),CTt.forEach(t),cLo=r(ARe," (NLLB model)"),ARe.forEach(t),fLo=i(x),ku=n(x,"LI",{});var LRe=s(ku);Yge=n(LRe,"STRONG",{});var wTt=s(Yge);mLo=r(wTt,"nystromformer"),wTt.forEach(t),gLo=r(LRe," \u2014 "),ZG=n(LRe,"A",{href:!0});var ATt=s(ZG);hLo=r(ATt,"NystromformerModel"),ATt.forEach(t),pLo=r(LRe," (Nystr\xF6mformer model)"),LRe.forEach(t),_Lo=i(x),Su=n(x,"LI",{});var yRe=s(Su);Kge=n(yRe,"STRONG",{});var LTt=s(Kge);uLo=r(LTt,"openai-gpt"),LTt.forEach(t),bLo=r(yRe," \u2014 "),eO=n(yRe,"A",{href:!0});var yTt=s(eO);vLo=r(yTt,"OpenAIGPTModel"),yTt.forEach(t),FLo=r(yRe," (OpenAI GPT model)"),yRe.forEach(t),TLo=i(x),Ru=n(x,"LI",{});var xRe=s(Ru);Zge=n(xRe,"STRONG",{});var xTt=s(Zge);MLo=r(xTt,"opt"),xTt.forEach(t),ELo=r(xRe," \u2014 "),oO=n(xRe,"A",{href:!0});var $Tt=s(oO);CLo=r($Tt,"OPTModel"),$Tt.forEach(t),wLo=r(xRe," (OPT model)"),xRe.forEach(t),ALo=i(x),Pu=n(x,"LI",{});var $Re=s(Pu);ehe=n($Re,"STRONG",{});var kTt=s(ehe);LLo=r(kTt,"owlvit"),kTt.forEach(t),yLo=r($Re," \u2014 "),rO=n($Re,"A",{href:!0});var STt=s(rO);xLo=r(STt,"OwlViTModel"),STt.forEach(t),$Lo=r($Re," (OWL-ViT model)"),$Re.forEach(t),kLo=i(x),Bu=n(x,"LI",{});var kRe=s(Bu);ohe=n(kRe,"STRONG",{});var RTt=s(ohe);SLo=r(RTt,"pegasus"),RTt.forEach(t),RLo=r(kRe," \u2014 "),tO=n(kRe,"A",{href:!0});var PTt=s(tO);PLo=r(PTt,"PegasusModel"),PTt.forEach(t),BLo=r(kRe," (Pegasus model)"),kRe.forEach(t),ILo=i(x),Iu=n(x,"LI",{});var SRe=s(Iu);rhe=n(SRe,"STRONG",{});var BTt=s(rhe);NLo=r(BTt,"perceiver"),BTt.forEach(t),qLo=r(SRe," \u2014 "),aO=n(SRe,"A",{href:!0});var ITt=s(aO);jLo=r(ITt,"PerceiverModel"),ITt.forEach(t),DLo=r(SRe," (Perceiver model)"),SRe.forEach(t),GLo=i(x),Nu=n(x,"LI",{});var RRe=s(Nu);the=n(RRe,"STRONG",{});var NTt=s(the);OLo=r(NTt,"plbart"),NTt.forEach(t),VLo=r(RRe," \u2014 "),nO=n(RRe,"A",{href:!0});var qTt=s(nO);XLo=r(qTt,"PLBartModel"),qTt.forEach(t),zLo=r(RRe," (PLBart model)"),RRe.forEach(t),WLo=i(x),qu=n(x,"LI",{});var PRe=s(qu);ahe=n(PRe,"STRONG",{});var jTt=s(ahe);QLo=r(jTt,"poolformer"),jTt.forEach(t),ULo=r(PRe," \u2014 "),sO=n(PRe,"A",{href:!0});var DTt=s(sO);HLo=r(DTt,"PoolFormerModel"),DTt.forEach(t),JLo=r(PRe," (PoolFormer model)"),PRe.forEach(t),YLo=i(x),ju=n(x,"LI",{});var BRe=s(ju);nhe=n(BRe,"STRONG",{});var GTt=s(nhe);KLo=r(GTt,"prophetnet"),GTt.forEach(t),ZLo=r(BRe," \u2014 "),lO=n(BRe,"A",{href:!0});var OTt=s(lO);eyo=r(OTt,"ProphetNetModel"),OTt.forEach(t),oyo=r(BRe," (ProphetNet model)"),BRe.forEach(t),ryo=i(x),Du=n(x,"LI",{});var IRe=s(Du);she=n(IRe,"STRONG",{});var VTt=s(she);tyo=r(VTt,"qdqbert"),VTt.forEach(t),ayo=r(IRe," \u2014 "),iO=n(IRe,"A",{href:!0});var XTt=s(iO);nyo=r(XTt,"QDQBertModel"),XTt.forEach(t),syo=r(IRe," (QDQBert model)"),IRe.forEach(t),lyo=i(x),Gu=n(x,"LI",{});var NRe=s(Gu);lhe=n(NRe,"STRONG",{});var zTt=s(lhe);iyo=r(zTt,"reformer"),zTt.forEach(t),dyo=r(NRe," \u2014 "),dO=n(NRe,"A",{href:!0});var WTt=s(dO);cyo=r(WTt,"ReformerModel"),WTt.forEach(t),fyo=r(NRe," (Reformer model)"),NRe.forEach(t),myo=i(x),Ou=n(x,"LI",{});var qRe=s(Ou);ihe=n(qRe,"STRONG",{});var QTt=s(ihe);gyo=r(QTt,"regnet"),QTt.forEach(t),hyo=r(qRe," \u2014 "),cO=n(qRe,"A",{href:!0});var UTt=s(cO);pyo=r(UTt,"RegNetModel"),UTt.forEach(t),_yo=r(qRe," (RegNet model)"),qRe.forEach(t),uyo=i(x),Vu=n(x,"LI",{});var jRe=s(Vu);dhe=n(jRe,"STRONG",{});var HTt=s(dhe);byo=r(HTt,"rembert"),HTt.forEach(t),vyo=r(jRe," \u2014 "),fO=n(jRe,"A",{href:!0});var JTt=s(fO);Fyo=r(JTt,"RemBertModel"),JTt.forEach(t),Tyo=r(jRe," (RemBERT model)"),jRe.forEach(t),Myo=i(x),Xu=n(x,"LI",{});var DRe=s(Xu);che=n(DRe,"STRONG",{});var YTt=s(che);Eyo=r(YTt,"resnet"),YTt.forEach(t),Cyo=r(DRe," \u2014 "),mO=n(DRe,"A",{href:!0});var KTt=s(mO);wyo=r(KTt,"ResNetModel"),KTt.forEach(t),Ayo=r(DRe," (ResNet model)"),DRe.forEach(t),Lyo=i(x),zu=n(x,"LI",{});var GRe=s(zu);fhe=n(GRe,"STRONG",{});var ZTt=s(fhe);yyo=r(ZTt,"retribert"),ZTt.forEach(t),xyo=r(GRe," \u2014 "),gO=n(GRe,"A",{href:!0});var e7t=s(gO);$yo=r(e7t,"RetriBertModel"),e7t.forEach(t),kyo=r(GRe," (RetriBERT model)"),GRe.forEach(t),Syo=i(x),Wu=n(x,"LI",{});var ORe=s(Wu);mhe=n(ORe,"STRONG",{});var o7t=s(mhe);Ryo=r(o7t,"roberta"),o7t.forEach(t),Pyo=r(ORe," \u2014 "),hO=n(ORe,"A",{href:!0});var r7t=s(hO);Byo=r(r7t,"RobertaModel"),r7t.forEach(t),Iyo=r(ORe," (RoBERTa model)"),ORe.forEach(t),Nyo=i(x),Qu=n(x,"LI",{});var VRe=s(Qu);ghe=n(VRe,"STRONG",{});var t7t=s(ghe);qyo=r(t7t,"roformer"),t7t.forEach(t),jyo=r(VRe," \u2014 "),pO=n(VRe,"A",{href:!0});var a7t=s(pO);Dyo=r(a7t,"RoFormerModel"),a7t.forEach(t),Gyo=r(VRe," (RoFormer model)"),VRe.forEach(t),Oyo=i(x),Uu=n(x,"LI",{});var XRe=s(Uu);hhe=n(XRe,"STRONG",{});var n7t=s(hhe);Vyo=r(n7t,"segformer"),n7t.forEach(t),Xyo=r(XRe," \u2014 "),_O=n(XRe,"A",{href:!0});var s7t=s(_O);zyo=r(s7t,"SegformerModel"),s7t.forEach(t),Wyo=r(XRe," (SegFormer model)"),XRe.forEach(t),Qyo=i(x),Hu=n(x,"LI",{});var zRe=s(Hu);phe=n(zRe,"STRONG",{});var l7t=s(phe);Uyo=r(l7t,"sew"),l7t.forEach(t),Hyo=r(zRe," \u2014 "),uO=n(zRe,"A",{href:!0});var i7t=s(uO);Jyo=r(i7t,"SEWModel"),i7t.forEach(t),Yyo=r(zRe," (SEW model)"),zRe.forEach(t),Kyo=i(x),Ju=n(x,"LI",{});var WRe=s(Ju);_he=n(WRe,"STRONG",{});var d7t=s(_he);Zyo=r(d7t,"sew-d"),d7t.forEach(t),e8o=r(WRe," \u2014 "),bO=n(WRe,"A",{href:!0});var c7t=s(bO);o8o=r(c7t,"SEWDModel"),c7t.forEach(t),r8o=r(WRe," (SEW-D model)"),WRe.forEach(t),t8o=i(x),Yu=n(x,"LI",{});var QRe=s(Yu);uhe=n(QRe,"STRONG",{});var f7t=s(uhe);a8o=r(f7t,"speech_to_text"),f7t.forEach(t),n8o=r(QRe," \u2014 "),vO=n(QRe,"A",{href:!0});var m7t=s(vO);s8o=r(m7t,"Speech2TextModel"),m7t.forEach(t),l8o=r(QRe," (Speech2Text model)"),QRe.forEach(t),i8o=i(x),Ku=n(x,"LI",{});var URe=s(Ku);bhe=n(URe,"STRONG",{});var g7t=s(bhe);d8o=r(g7t,"splinter"),g7t.forEach(t),c8o=r(URe," \u2014 "),FO=n(URe,"A",{href:!0});var h7t=s(FO);f8o=r(h7t,"SplinterModel"),h7t.forEach(t),m8o=r(URe," (Splinter model)"),URe.forEach(t),g8o=i(x),Zu=n(x,"LI",{});var HRe=s(Zu);vhe=n(HRe,"STRONG",{});var p7t=s(vhe);h8o=r(p7t,"squeezebert"),p7t.forEach(t),p8o=r(HRe," \u2014 "),TO=n(HRe,"A",{href:!0});var _7t=s(TO);_8o=r(_7t,"SqueezeBertModel"),_7t.forEach(t),u8o=r(HRe," (SqueezeBERT model)"),HRe.forEach(t),b8o=i(x),e2=n(x,"LI",{});var JRe=s(e2);Fhe=n(JRe,"STRONG",{});var u7t=s(Fhe);v8o=r(u7t,"swin"),u7t.forEach(t),F8o=r(JRe," \u2014 "),MO=n(JRe,"A",{href:!0});var b7t=s(MO);T8o=r(b7t,"SwinModel"),b7t.forEach(t),M8o=r(JRe," (Swin Transformer model)"),JRe.forEach(t),E8o=i(x),o2=n(x,"LI",{});var YRe=s(o2);The=n(YRe,"STRONG",{});var v7t=s(The);C8o=r(v7t,"swinv2"),v7t.forEach(t),w8o=r(YRe," \u2014 "),EO=n(YRe,"A",{href:!0});var F7t=s(EO);A8o=r(F7t,"Swinv2Model"),F7t.forEach(t),L8o=r(YRe," (Swin Transformer V2 model)"),YRe.forEach(t),y8o=i(x),r2=n(x,"LI",{});var KRe=s(r2);Mhe=n(KRe,"STRONG",{});var T7t=s(Mhe);x8o=r(T7t,"t5"),T7t.forEach(t),$8o=r(KRe," \u2014 "),CO=n(KRe,"A",{href:!0});var M7t=s(CO);k8o=r(M7t,"T5Model"),M7t.forEach(t),S8o=r(KRe," (T5 model)"),KRe.forEach(t),R8o=i(x),t2=n(x,"LI",{});var ZRe=s(t2);Ehe=n(ZRe,"STRONG",{});var E7t=s(Ehe);P8o=r(E7t,"tapas"),E7t.forEach(t),B8o=r(ZRe," \u2014 "),wO=n(ZRe,"A",{href:!0});var C7t=s(wO);I8o=r(C7t,"TapasModel"),C7t.forEach(t),N8o=r(ZRe," (TAPAS model)"),ZRe.forEach(t),q8o=i(x),a2=n(x,"LI",{});var ePe=s(a2);Che=n(ePe,"STRONG",{});var w7t=s(Che);j8o=r(w7t,"trajectory_transformer"),w7t.forEach(t),D8o=r(ePe," \u2014 "),AO=n(ePe,"A",{href:!0});var A7t=s(AO);G8o=r(A7t,"TrajectoryTransformerModel"),A7t.forEach(t),O8o=r(ePe," (Trajectory Transformer model)"),ePe.forEach(t),V8o=i(x),n2=n(x,"LI",{});var oPe=s(n2);whe=n(oPe,"STRONG",{});var L7t=s(whe);X8o=r(L7t,"transfo-xl"),L7t.forEach(t),z8o=r(oPe," \u2014 "),LO=n(oPe,"A",{href:!0});var y7t=s(LO);W8o=r(y7t,"TransfoXLModel"),y7t.forEach(t),Q8o=r(oPe," (Transformer-XL model)"),oPe.forEach(t),U8o=i(x),s2=n(x,"LI",{});var rPe=s(s2);Ahe=n(rPe,"STRONG",{});var x7t=s(Ahe);H8o=r(x7t,"unispeech"),x7t.forEach(t),J8o=r(rPe," \u2014 "),yO=n(rPe,"A",{href:!0});var $7t=s(yO);Y8o=r($7t,"UniSpeechModel"),$7t.forEach(t),K8o=r(rPe," (UniSpeech model)"),rPe.forEach(t),Z8o=i(x),l2=n(x,"LI",{});var tPe=s(l2);Lhe=n(tPe,"STRONG",{});var k7t=s(Lhe);e9o=r(k7t,"unispeech-sat"),k7t.forEach(t),o9o=r(tPe," \u2014 "),xO=n(tPe,"A",{href:!0});var S7t=s(xO);r9o=r(S7t,"UniSpeechSatModel"),S7t.forEach(t),t9o=r(tPe," (UniSpeechSat model)"),tPe.forEach(t),a9o=i(x),i2=n(x,"LI",{});var aPe=s(i2);yhe=n(aPe,"STRONG",{});var R7t=s(yhe);n9o=r(R7t,"van"),R7t.forEach(t),s9o=r(aPe," \u2014 "),$O=n(aPe,"A",{href:!0});var P7t=s($O);l9o=r(P7t,"VanModel"),P7t.forEach(t),i9o=r(aPe," (VAN model)"),aPe.forEach(t),d9o=i(x),d2=n(x,"LI",{});var nPe=s(d2);xhe=n(nPe,"STRONG",{});var B7t=s(xhe);c9o=r(B7t,"videomae"),B7t.forEach(t),f9o=r(nPe," \u2014 "),kO=n(nPe,"A",{href:!0});var I7t=s(kO);m9o=r(I7t,"VideoMAEModel"),I7t.forEach(t),g9o=r(nPe," (VideoMAE model)"),nPe.forEach(t),h9o=i(x),c2=n(x,"LI",{});var sPe=s(c2);$he=n(sPe,"STRONG",{});var N7t=s($he);p9o=r(N7t,"vilt"),N7t.forEach(t),_9o=r(sPe," \u2014 "),SO=n(sPe,"A",{href:!0});var q7t=s(SO);u9o=r(q7t,"ViltModel"),q7t.forEach(t),b9o=r(sPe," (ViLT model)"),sPe.forEach(t),v9o=i(x),f2=n(x,"LI",{});var lPe=s(f2);khe=n(lPe,"STRONG",{});var j7t=s(khe);F9o=r(j7t,"vision-text-dual-encoder"),j7t.forEach(t),T9o=r(lPe," \u2014 "),RO=n(lPe,"A",{href:!0});var D7t=s(RO);M9o=r(D7t,"VisionTextDualEncoderModel"),D7t.forEach(t),E9o=r(lPe," (VisionTextDualEncoder model)"),lPe.forEach(t),C9o=i(x),m2=n(x,"LI",{});var iPe=s(m2);She=n(iPe,"STRONG",{});var G7t=s(She);w9o=r(G7t,"visual_bert"),G7t.forEach(t),A9o=r(iPe," \u2014 "),PO=n(iPe,"A",{href:!0});var O7t=s(PO);L9o=r(O7t,"VisualBertModel"),O7t.forEach(t),y9o=r(iPe," (VisualBERT model)"),iPe.forEach(t),x9o=i(x),g2=n(x,"LI",{});var dPe=s(g2);Rhe=n(dPe,"STRONG",{});var V7t=s(Rhe);$9o=r(V7t,"vit"),V7t.forEach(t),k9o=r(dPe," \u2014 "),BO=n(dPe,"A",{href:!0});var X7t=s(BO);S9o=r(X7t,"ViTModel"),X7t.forEach(t),R9o=r(dPe," (ViT model)"),dPe.forEach(t),P9o=i(x),h2=n(x,"LI",{});var cPe=s(h2);Phe=n(cPe,"STRONG",{});var z7t=s(Phe);B9o=r(z7t,"vit_mae"),z7t.forEach(t),I9o=r(cPe," \u2014 "),IO=n(cPe,"A",{href:!0});var W7t=s(IO);N9o=r(W7t,"ViTMAEModel"),W7t.forEach(t),q9o=r(cPe," (ViTMAE model)"),cPe.forEach(t),j9o=i(x),p2=n(x,"LI",{});var fPe=s(p2);Bhe=n(fPe,"STRONG",{});var Q7t=s(Bhe);D9o=r(Q7t,"wav2vec2"),Q7t.forEach(t),G9o=r(fPe," \u2014 "),NO=n(fPe,"A",{href:!0});var U7t=s(NO);O9o=r(U7t,"Wav2Vec2Model"),U7t.forEach(t),V9o=r(fPe," (Wav2Vec2 model)"),fPe.forEach(t),X9o=i(x),_2=n(x,"LI",{});var mPe=s(_2);Ihe=n(mPe,"STRONG",{});var H7t=s(Ihe);z9o=r(H7t,"wav2vec2-conformer"),H7t.forEach(t),W9o=r(mPe," \u2014 "),qO=n(mPe,"A",{href:!0});var J7t=s(qO);Q9o=r(J7t,"Wav2Vec2ConformerModel"),J7t.forEach(t),U9o=r(mPe," (Wav2Vec2-Conformer model)"),mPe.forEach(t),H9o=i(x),u2=n(x,"LI",{});var gPe=s(u2);Nhe=n(gPe,"STRONG",{});var Y7t=s(Nhe);J9o=r(Y7t,"wavlm"),Y7t.forEach(t),Y9o=r(gPe," \u2014 "),jO=n(gPe,"A",{href:!0});var K7t=s(jO);K9o=r(K7t,"WavLMModel"),K7t.forEach(t),Z9o=r(gPe," (WavLM model)"),gPe.forEach(t),exo=i(x),b2=n(x,"LI",{});var hPe=s(b2);qhe=n(hPe,"STRONG",{});var Z7t=s(qhe);oxo=r(Z7t,"xglm"),Z7t.forEach(t),rxo=r(hPe," \u2014 "),DO=n(hPe,"A",{href:!0});var eMt=s(DO);txo=r(eMt,"XGLMModel"),eMt.forEach(t),axo=r(hPe," (XGLM model)"),hPe.forEach(t),nxo=i(x),v2=n(x,"LI",{});var pPe=s(v2);jhe=n(pPe,"STRONG",{});var oMt=s(jhe);sxo=r(oMt,"xlm"),oMt.forEach(t),lxo=r(pPe," \u2014 "),GO=n(pPe,"A",{href:!0});var rMt=s(GO);ixo=r(rMt,"XLMModel"),rMt.forEach(t),dxo=r(pPe," (XLM model)"),pPe.forEach(t),cxo=i(x),F2=n(x,"LI",{});var _Pe=s(F2);Dhe=n(_Pe,"STRONG",{});var tMt=s(Dhe);fxo=r(tMt,"xlm-prophetnet"),tMt.forEach(t),mxo=r(_Pe," \u2014 "),OO=n(_Pe,"A",{href:!0});var aMt=s(OO);gxo=r(aMt,"XLMProphetNetModel"),aMt.forEach(t),hxo=r(_Pe," (XLM-ProphetNet model)"),_Pe.forEach(t),pxo=i(x),T2=n(x,"LI",{});var uPe=s(T2);Ghe=n(uPe,"STRONG",{});var nMt=s(Ghe);_xo=r(nMt,"xlm-roberta"),nMt.forEach(t),uxo=r(uPe," \u2014 "),VO=n(uPe,"A",{href:!0});var sMt=s(VO);bxo=r(sMt,"XLMRobertaModel"),sMt.forEach(t),vxo=r(uPe," (XLM-RoBERTa model)"),uPe.forEach(t),Fxo=i(x),M2=n(x,"LI",{});var bPe=s(M2);Ohe=n(bPe,"STRONG",{});var lMt=s(Ohe);Txo=r(lMt,"xlm-roberta-xl"),lMt.forEach(t),Mxo=r(bPe," \u2014 "),XO=n(bPe,"A",{href:!0});var iMt=s(XO);Exo=r(iMt,"XLMRobertaXLModel"),iMt.forEach(t),Cxo=r(bPe," (XLM-RoBERTa-XL model)"),bPe.forEach(t),wxo=i(x),E2=n(x,"LI",{});var vPe=s(E2);Vhe=n(vPe,"STRONG",{});var dMt=s(Vhe);Axo=r(dMt,"xlnet"),dMt.forEach(t),Lxo=r(vPe," \u2014 "),zO=n(vPe,"A",{href:!0});var cMt=s(zO);yxo=r(cMt,"XLNetModel"),cMt.forEach(t),xxo=r(vPe," (XLNet model)"),vPe.forEach(t),$xo=i(x),C2=n(x,"LI",{});var FPe=s(C2);Xhe=n(FPe,"STRONG",{});var fMt=s(Xhe);kxo=r(fMt,"yolos"),fMt.forEach(t),Sxo=r(FPe," \u2014 "),WO=n(FPe,"A",{href:!0});var mMt=s(WO);Rxo=r(mMt,"YolosModel"),mMt.forEach(t),Pxo=r(FPe," (YOLOS model)"),FPe.forEach(t),Bxo=i(x),w2=n(x,"LI",{});var TPe=s(w2);zhe=n(TPe,"STRONG",{});var gMt=s(zhe);Ixo=r(gMt,"yoso"),gMt.forEach(t),Nxo=r(TPe," \u2014 "),QO=n(TPe,"A",{href:!0});var hMt=s(QO);qxo=r(hMt,"YosoModel"),hMt.forEach(t),jxo=r(TPe," (YOSO model)"),TPe.forEach(t),x.forEach(t),Dxo=i(ga),A2=n(ga,"P",{});var MPe=s(A2);Gxo=r(MPe,"The model is set in evaluation mode by default using "),Whe=n(MPe,"CODE",{});var pMt=s(Whe);Oxo=r(pMt,"model.eval()"),pMt.forEach(t),Vxo=r(MPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=n(MPe,"CODE",{});var _Mt=s(Qhe);Xxo=r(_Mt,"model.train()"),_Mt.forEach(t),MPe.forEach(t),zxo=i(ga),T(L2.$$.fragment,ga),ga.forEach(t),ul.forEach(t),aUe=i(f),id=n(f,"H2",{class:!0});var hJe=s(id);y2=n(hJe,"A",{id:!0,class:!0,href:!0});var uMt=s(y2);Uhe=n(uMt,"SPAN",{});var bMt=s(Uhe);T(X8.$$.fragment,bMt),bMt.forEach(t),uMt.forEach(t),Wxo=i(hJe),Hhe=n(hJe,"SPAN",{});var vMt=s(Hhe);Qxo=r(vMt,"AutoModelForPreTraining"),vMt.forEach(t),hJe.forEach(t),nUe=i(f),Ro=n(f,"DIV",{class:!0});var bl=s(Ro);T(z8.$$.fragment,bl),Uxo=i(bl),dd=n(bl,"P",{});var Uae=s(dd);Hxo=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UO=n(Uae,"A",{href:!0});var FMt=s(UO);Jxo=r(FMt,"from_pretrained()"),FMt.forEach(t),Yxo=r(Uae," class method or the "),HO=n(Uae,"A",{href:!0});var TMt=s(HO);Kxo=r(TMt,"from_config()"),TMt.forEach(t),Zxo=r(Uae,` class
method.`),Uae.forEach(t),e$o=i(bl),W8=n(bl,"P",{});var pJe=s(W8);o$o=r(pJe,"This class cannot be instantiated directly using "),Jhe=n(pJe,"CODE",{});var MMt=s(Jhe);r$o=r(MMt,"__init__()"),MMt.forEach(t),t$o=r(pJe," (throws an error)."),pJe.forEach(t),a$o=i(bl),gt=n(bl,"DIV",{class:!0});var hL=s(gt);T(Q8.$$.fragment,hL),n$o=i(hL),Yhe=n(hL,"P",{});var EMt=s(Yhe);s$o=r(EMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EMt.forEach(t),l$o=i(hL),cd=n(hL,"P",{});var Hae=s(cd);i$o=r(Hae,`Note:
Loading a model from its configuration file does `),Khe=n(Hae,"STRONG",{});var CMt=s(Khe);d$o=r(CMt,"not"),CMt.forEach(t),c$o=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(Hae,"A",{href:!0});var wMt=s(JO);f$o=r(wMt,"from_pretrained()"),wMt.forEach(t),m$o=r(Hae," to load the model weights."),Hae.forEach(t),g$o=i(hL),T(x2.$$.fragment,hL),hL.forEach(t),h$o=i(bl),Ke=n(bl,"DIV",{class:!0});var ha=s(Ke);T(U8.$$.fragment,ha),p$o=i(ha),Zhe=n(ha,"P",{});var AMt=s(Zhe);_$o=r(AMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),AMt.forEach(t),u$o=i(ha),Xa=n(ha,"P",{});var pL=s(Xa);b$o=r(pL,"The model class to instantiate is selected based on the "),epe=n(pL,"CODE",{});var LMt=s(epe);v$o=r(LMt,"model_type"),LMt.forEach(t),F$o=r(pL,` property of the config object (either
passed as an argument or loaded from `),ope=n(pL,"CODE",{});var yMt=s(ope);T$o=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),M$o=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(pL,"CODE",{});var xMt=s(rpe);E$o=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),C$o=r(pL,":"),pL.forEach(t),w$o=i(ha),G=n(ha,"UL",{});var O=s(G);$2=n(O,"LI",{});var EPe=s($2);tpe=n(EPe,"STRONG",{});var $Mt=s(tpe);A$o=r($Mt,"albert"),$Mt.forEach(t),L$o=r(EPe," \u2014 "),YO=n(EPe,"A",{href:!0});var kMt=s(YO);y$o=r(kMt,"AlbertForPreTraining"),kMt.forEach(t),x$o=r(EPe," (ALBERT model)"),EPe.forEach(t),$$o=i(O),k2=n(O,"LI",{});var CPe=s(k2);ape=n(CPe,"STRONG",{});var SMt=s(ape);k$o=r(SMt,"bart"),SMt.forEach(t),S$o=r(CPe," \u2014 "),KO=n(CPe,"A",{href:!0});var RMt=s(KO);R$o=r(RMt,"BartForConditionalGeneration"),RMt.forEach(t),P$o=r(CPe," (BART model)"),CPe.forEach(t),B$o=i(O),S2=n(O,"LI",{});var wPe=s(S2);npe=n(wPe,"STRONG",{});var PMt=s(npe);I$o=r(PMt,"bert"),PMt.forEach(t),N$o=r(wPe," \u2014 "),ZO=n(wPe,"A",{href:!0});var BMt=s(ZO);q$o=r(BMt,"BertForPreTraining"),BMt.forEach(t),j$o=r(wPe," (BERT model)"),wPe.forEach(t),D$o=i(O),R2=n(O,"LI",{});var APe=s(R2);spe=n(APe,"STRONG",{});var IMt=s(spe);G$o=r(IMt,"big_bird"),IMt.forEach(t),O$o=r(APe," \u2014 "),eV=n(APe,"A",{href:!0});var NMt=s(eV);V$o=r(NMt,"BigBirdForPreTraining"),NMt.forEach(t),X$o=r(APe," (BigBird model)"),APe.forEach(t),z$o=i(O),P2=n(O,"LI",{});var LPe=s(P2);lpe=n(LPe,"STRONG",{});var qMt=s(lpe);W$o=r(qMt,"bloom"),qMt.forEach(t),Q$o=r(LPe," \u2014 "),oV=n(LPe,"A",{href:!0});var jMt=s(oV);U$o=r(jMt,"BloomForCausalLM"),jMt.forEach(t),H$o=r(LPe," (BLOOM model)"),LPe.forEach(t),J$o=i(O),B2=n(O,"LI",{});var yPe=s(B2);ipe=n(yPe,"STRONG",{});var DMt=s(ipe);Y$o=r(DMt,"camembert"),DMt.forEach(t),K$o=r(yPe," \u2014 "),rV=n(yPe,"A",{href:!0});var GMt=s(rV);Z$o=r(GMt,"CamembertForMaskedLM"),GMt.forEach(t),eko=r(yPe," (CamemBERT model)"),yPe.forEach(t),oko=i(O),I2=n(O,"LI",{});var xPe=s(I2);dpe=n(xPe,"STRONG",{});var OMt=s(dpe);rko=r(OMt,"ctrl"),OMt.forEach(t),tko=r(xPe," \u2014 "),tV=n(xPe,"A",{href:!0});var VMt=s(tV);ako=r(VMt,"CTRLLMHeadModel"),VMt.forEach(t),nko=r(xPe," (CTRL model)"),xPe.forEach(t),sko=i(O),N2=n(O,"LI",{});var $Pe=s(N2);cpe=n($Pe,"STRONG",{});var XMt=s(cpe);lko=r(XMt,"data2vec-text"),XMt.forEach(t),iko=r($Pe," \u2014 "),aV=n($Pe,"A",{href:!0});var zMt=s(aV);dko=r(zMt,"Data2VecTextForMaskedLM"),zMt.forEach(t),cko=r($Pe," (Data2VecText model)"),$Pe.forEach(t),fko=i(O),q2=n(O,"LI",{});var kPe=s(q2);fpe=n(kPe,"STRONG",{});var WMt=s(fpe);mko=r(WMt,"deberta"),WMt.forEach(t),gko=r(kPe," \u2014 "),nV=n(kPe,"A",{href:!0});var QMt=s(nV);hko=r(QMt,"DebertaForMaskedLM"),QMt.forEach(t),pko=r(kPe," (DeBERTa model)"),kPe.forEach(t),_ko=i(O),j2=n(O,"LI",{});var SPe=s(j2);mpe=n(SPe,"STRONG",{});var UMt=s(mpe);uko=r(UMt,"deberta-v2"),UMt.forEach(t),bko=r(SPe," \u2014 "),sV=n(SPe,"A",{href:!0});var HMt=s(sV);vko=r(HMt,"DebertaV2ForMaskedLM"),HMt.forEach(t),Fko=r(SPe," (DeBERTa-v2 model)"),SPe.forEach(t),Tko=i(O),D2=n(O,"LI",{});var RPe=s(D2);gpe=n(RPe,"STRONG",{});var JMt=s(gpe);Mko=r(JMt,"distilbert"),JMt.forEach(t),Eko=r(RPe," \u2014 "),lV=n(RPe,"A",{href:!0});var YMt=s(lV);Cko=r(YMt,"DistilBertForMaskedLM"),YMt.forEach(t),wko=r(RPe," (DistilBERT model)"),RPe.forEach(t),Ako=i(O),G2=n(O,"LI",{});var PPe=s(G2);hpe=n(PPe,"STRONG",{});var KMt=s(hpe);Lko=r(KMt,"electra"),KMt.forEach(t),yko=r(PPe," \u2014 "),iV=n(PPe,"A",{href:!0});var ZMt=s(iV);xko=r(ZMt,"ElectraForPreTraining"),ZMt.forEach(t),$ko=r(PPe," (ELECTRA model)"),PPe.forEach(t),kko=i(O),O2=n(O,"LI",{});var BPe=s(O2);ppe=n(BPe,"STRONG",{});var eEt=s(ppe);Sko=r(eEt,"flaubert"),eEt.forEach(t),Rko=r(BPe," \u2014 "),dV=n(BPe,"A",{href:!0});var oEt=s(dV);Pko=r(oEt,"FlaubertWithLMHeadModel"),oEt.forEach(t),Bko=r(BPe," (FlauBERT model)"),BPe.forEach(t),Iko=i(O),V2=n(O,"LI",{});var IPe=s(V2);_pe=n(IPe,"STRONG",{});var rEt=s(_pe);Nko=r(rEt,"flava"),rEt.forEach(t),qko=r(IPe," \u2014 "),cV=n(IPe,"A",{href:!0});var tEt=s(cV);jko=r(tEt,"FlavaForPreTraining"),tEt.forEach(t),Dko=r(IPe," (FLAVA model)"),IPe.forEach(t),Gko=i(O),X2=n(O,"LI",{});var NPe=s(X2);upe=n(NPe,"STRONG",{});var aEt=s(upe);Oko=r(aEt,"fnet"),aEt.forEach(t),Vko=r(NPe," \u2014 "),fV=n(NPe,"A",{href:!0});var nEt=s(fV);Xko=r(nEt,"FNetForPreTraining"),nEt.forEach(t),zko=r(NPe," (FNet model)"),NPe.forEach(t),Wko=i(O),z2=n(O,"LI",{});var qPe=s(z2);bpe=n(qPe,"STRONG",{});var sEt=s(bpe);Qko=r(sEt,"fsmt"),sEt.forEach(t),Uko=r(qPe," \u2014 "),mV=n(qPe,"A",{href:!0});var lEt=s(mV);Hko=r(lEt,"FSMTForConditionalGeneration"),lEt.forEach(t),Jko=r(qPe," (FairSeq Machine-Translation model)"),qPe.forEach(t),Yko=i(O),W2=n(O,"LI",{});var jPe=s(W2);vpe=n(jPe,"STRONG",{});var iEt=s(vpe);Kko=r(iEt,"funnel"),iEt.forEach(t),Zko=r(jPe," \u2014 "),gV=n(jPe,"A",{href:!0});var dEt=s(gV);eSo=r(dEt,"FunnelForPreTraining"),dEt.forEach(t),oSo=r(jPe," (Funnel Transformer model)"),jPe.forEach(t),rSo=i(O),Q2=n(O,"LI",{});var DPe=s(Q2);Fpe=n(DPe,"STRONG",{});var cEt=s(Fpe);tSo=r(cEt,"gpt2"),cEt.forEach(t),aSo=r(DPe," \u2014 "),hV=n(DPe,"A",{href:!0});var fEt=s(hV);nSo=r(fEt,"GPT2LMHeadModel"),fEt.forEach(t),sSo=r(DPe," (OpenAI GPT-2 model)"),DPe.forEach(t),lSo=i(O),U2=n(O,"LI",{});var GPe=s(U2);Tpe=n(GPe,"STRONG",{});var mEt=s(Tpe);iSo=r(mEt,"ibert"),mEt.forEach(t),dSo=r(GPe," \u2014 "),pV=n(GPe,"A",{href:!0});var gEt=s(pV);cSo=r(gEt,"IBertForMaskedLM"),gEt.forEach(t),fSo=r(GPe," (I-BERT model)"),GPe.forEach(t),mSo=i(O),H2=n(O,"LI",{});var OPe=s(H2);Mpe=n(OPe,"STRONG",{});var hEt=s(Mpe);gSo=r(hEt,"layoutlm"),hEt.forEach(t),hSo=r(OPe," \u2014 "),_V=n(OPe,"A",{href:!0});var pEt=s(_V);pSo=r(pEt,"LayoutLMForMaskedLM"),pEt.forEach(t),_So=r(OPe," (LayoutLM model)"),OPe.forEach(t),uSo=i(O),J2=n(O,"LI",{});var VPe=s(J2);Epe=n(VPe,"STRONG",{});var _Et=s(Epe);bSo=r(_Et,"longformer"),_Et.forEach(t),vSo=r(VPe," \u2014 "),uV=n(VPe,"A",{href:!0});var uEt=s(uV);FSo=r(uEt,"LongformerForMaskedLM"),uEt.forEach(t),TSo=r(VPe," (Longformer model)"),VPe.forEach(t),MSo=i(O),Y2=n(O,"LI",{});var XPe=s(Y2);Cpe=n(XPe,"STRONG",{});var bEt=s(Cpe);ESo=r(bEt,"luke"),bEt.forEach(t),CSo=r(XPe," \u2014 "),bV=n(XPe,"A",{href:!0});var vEt=s(bV);wSo=r(vEt,"LukeForMaskedLM"),vEt.forEach(t),ASo=r(XPe," (LUKE model)"),XPe.forEach(t),LSo=i(O),K2=n(O,"LI",{});var zPe=s(K2);wpe=n(zPe,"STRONG",{});var FEt=s(wpe);ySo=r(FEt,"lxmert"),FEt.forEach(t),xSo=r(zPe," \u2014 "),vV=n(zPe,"A",{href:!0});var TEt=s(vV);$So=r(TEt,"LxmertForPreTraining"),TEt.forEach(t),kSo=r(zPe," (LXMERT model)"),zPe.forEach(t),SSo=i(O),Z2=n(O,"LI",{});var WPe=s(Z2);Ape=n(WPe,"STRONG",{});var MEt=s(Ape);RSo=r(MEt,"megatron-bert"),MEt.forEach(t),PSo=r(WPe," \u2014 "),FV=n(WPe,"A",{href:!0});var EEt=s(FV);BSo=r(EEt,"MegatronBertForPreTraining"),EEt.forEach(t),ISo=r(WPe," (Megatron-BERT model)"),WPe.forEach(t),NSo=i(O),e1=n(O,"LI",{});var QPe=s(e1);Lpe=n(QPe,"STRONG",{});var CEt=s(Lpe);qSo=r(CEt,"mobilebert"),CEt.forEach(t),jSo=r(QPe," \u2014 "),TV=n(QPe,"A",{href:!0});var wEt=s(TV);DSo=r(wEt,"MobileBertForPreTraining"),wEt.forEach(t),GSo=r(QPe," (MobileBERT model)"),QPe.forEach(t),OSo=i(O),o1=n(O,"LI",{});var UPe=s(o1);ype=n(UPe,"STRONG",{});var AEt=s(ype);VSo=r(AEt,"mpnet"),AEt.forEach(t),XSo=r(UPe," \u2014 "),MV=n(UPe,"A",{href:!0});var LEt=s(MV);zSo=r(LEt,"MPNetForMaskedLM"),LEt.forEach(t),WSo=r(UPe," (MPNet model)"),UPe.forEach(t),QSo=i(O),r1=n(O,"LI",{});var HPe=s(r1);xpe=n(HPe,"STRONG",{});var yEt=s(xpe);USo=r(yEt,"mvp"),yEt.forEach(t),HSo=r(HPe," \u2014 "),EV=n(HPe,"A",{href:!0});var xEt=s(EV);JSo=r(xEt,"MvpForConditionalGeneration"),xEt.forEach(t),YSo=r(HPe," (MVP model)"),HPe.forEach(t),KSo=i(O),t1=n(O,"LI",{});var JPe=s(t1);$pe=n(JPe,"STRONG",{});var $Et=s($pe);ZSo=r($Et,"nezha"),$Et.forEach(t),eRo=r(JPe," \u2014 "),CV=n(JPe,"A",{href:!0});var kEt=s(CV);oRo=r(kEt,"NezhaForPreTraining"),kEt.forEach(t),rRo=r(JPe," (Nezha model)"),JPe.forEach(t),tRo=i(O),a1=n(O,"LI",{});var YPe=s(a1);kpe=n(YPe,"STRONG",{});var SEt=s(kpe);aRo=r(SEt,"openai-gpt"),SEt.forEach(t),nRo=r(YPe," \u2014 "),wV=n(YPe,"A",{href:!0});var REt=s(wV);sRo=r(REt,"OpenAIGPTLMHeadModel"),REt.forEach(t),lRo=r(YPe," (OpenAI GPT model)"),YPe.forEach(t),iRo=i(O),n1=n(O,"LI",{});var KPe=s(n1);Spe=n(KPe,"STRONG",{});var PEt=s(Spe);dRo=r(PEt,"retribert"),PEt.forEach(t),cRo=r(KPe," \u2014 "),AV=n(KPe,"A",{href:!0});var BEt=s(AV);fRo=r(BEt,"RetriBertModel"),BEt.forEach(t),mRo=r(KPe," (RetriBERT model)"),KPe.forEach(t),gRo=i(O),s1=n(O,"LI",{});var ZPe=s(s1);Rpe=n(ZPe,"STRONG",{});var IEt=s(Rpe);hRo=r(IEt,"roberta"),IEt.forEach(t),pRo=r(ZPe," \u2014 "),LV=n(ZPe,"A",{href:!0});var NEt=s(LV);_Ro=r(NEt,"RobertaForMaskedLM"),NEt.forEach(t),uRo=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),bRo=i(O),l1=n(O,"LI",{});var eBe=s(l1);Ppe=n(eBe,"STRONG",{});var qEt=s(Ppe);vRo=r(qEt,"splinter"),qEt.forEach(t),FRo=r(eBe," \u2014 "),yV=n(eBe,"A",{href:!0});var jEt=s(yV);TRo=r(jEt,"SplinterForPreTraining"),jEt.forEach(t),MRo=r(eBe," (Splinter model)"),eBe.forEach(t),ERo=i(O),i1=n(O,"LI",{});var oBe=s(i1);Bpe=n(oBe,"STRONG",{});var DEt=s(Bpe);CRo=r(DEt,"squeezebert"),DEt.forEach(t),wRo=r(oBe," \u2014 "),xV=n(oBe,"A",{href:!0});var GEt=s(xV);ARo=r(GEt,"SqueezeBertForMaskedLM"),GEt.forEach(t),LRo=r(oBe," (SqueezeBERT model)"),oBe.forEach(t),yRo=i(O),d1=n(O,"LI",{});var rBe=s(d1);Ipe=n(rBe,"STRONG",{});var OEt=s(Ipe);xRo=r(OEt,"t5"),OEt.forEach(t),$Ro=r(rBe," \u2014 "),$V=n(rBe,"A",{href:!0});var VEt=s($V);kRo=r(VEt,"T5ForConditionalGeneration"),VEt.forEach(t),SRo=r(rBe," (T5 model)"),rBe.forEach(t),RRo=i(O),c1=n(O,"LI",{});var tBe=s(c1);Npe=n(tBe,"STRONG",{});var XEt=s(Npe);PRo=r(XEt,"tapas"),XEt.forEach(t),BRo=r(tBe," \u2014 "),kV=n(tBe,"A",{href:!0});var zEt=s(kV);IRo=r(zEt,"TapasForMaskedLM"),zEt.forEach(t),NRo=r(tBe," (TAPAS model)"),tBe.forEach(t),qRo=i(O),f1=n(O,"LI",{});var aBe=s(f1);qpe=n(aBe,"STRONG",{});var WEt=s(qpe);jRo=r(WEt,"transfo-xl"),WEt.forEach(t),DRo=r(aBe," \u2014 "),SV=n(aBe,"A",{href:!0});var QEt=s(SV);GRo=r(QEt,"TransfoXLLMHeadModel"),QEt.forEach(t),ORo=r(aBe," (Transformer-XL model)"),aBe.forEach(t),VRo=i(O),m1=n(O,"LI",{});var nBe=s(m1);jpe=n(nBe,"STRONG",{});var UEt=s(jpe);XRo=r(UEt,"unispeech"),UEt.forEach(t),zRo=r(nBe," \u2014 "),RV=n(nBe,"A",{href:!0});var HEt=s(RV);WRo=r(HEt,"UniSpeechForPreTraining"),HEt.forEach(t),QRo=r(nBe," (UniSpeech model)"),nBe.forEach(t),URo=i(O),g1=n(O,"LI",{});var sBe=s(g1);Dpe=n(sBe,"STRONG",{});var JEt=s(Dpe);HRo=r(JEt,"unispeech-sat"),JEt.forEach(t),JRo=r(sBe," \u2014 "),PV=n(sBe,"A",{href:!0});var YEt=s(PV);YRo=r(YEt,"UniSpeechSatForPreTraining"),YEt.forEach(t),KRo=r(sBe," (UniSpeechSat model)"),sBe.forEach(t),ZRo=i(O),h1=n(O,"LI",{});var lBe=s(h1);Gpe=n(lBe,"STRONG",{});var KEt=s(Gpe);ePo=r(KEt,"videomae"),KEt.forEach(t),oPo=r(lBe," \u2014 "),BV=n(lBe,"A",{href:!0});var ZEt=s(BV);rPo=r(ZEt,"VideoMAEForPreTraining"),ZEt.forEach(t),tPo=r(lBe," (VideoMAE model)"),lBe.forEach(t),aPo=i(O),p1=n(O,"LI",{});var iBe=s(p1);Ope=n(iBe,"STRONG",{});var eCt=s(Ope);nPo=r(eCt,"visual_bert"),eCt.forEach(t),sPo=r(iBe," \u2014 "),IV=n(iBe,"A",{href:!0});var oCt=s(IV);lPo=r(oCt,"VisualBertForPreTraining"),oCt.forEach(t),iPo=r(iBe," (VisualBERT model)"),iBe.forEach(t),dPo=i(O),_1=n(O,"LI",{});var dBe=s(_1);Vpe=n(dBe,"STRONG",{});var rCt=s(Vpe);cPo=r(rCt,"vit_mae"),rCt.forEach(t),fPo=r(dBe," \u2014 "),NV=n(dBe,"A",{href:!0});var tCt=s(NV);mPo=r(tCt,"ViTMAEForPreTraining"),tCt.forEach(t),gPo=r(dBe," (ViTMAE model)"),dBe.forEach(t),hPo=i(O),u1=n(O,"LI",{});var cBe=s(u1);Xpe=n(cBe,"STRONG",{});var aCt=s(Xpe);pPo=r(aCt,"wav2vec2"),aCt.forEach(t),_Po=r(cBe," \u2014 "),qV=n(cBe,"A",{href:!0});var nCt=s(qV);uPo=r(nCt,"Wav2Vec2ForPreTraining"),nCt.forEach(t),bPo=r(cBe," (Wav2Vec2 model)"),cBe.forEach(t),vPo=i(O),b1=n(O,"LI",{});var fBe=s(b1);zpe=n(fBe,"STRONG",{});var sCt=s(zpe);FPo=r(sCt,"wav2vec2-conformer"),sCt.forEach(t),TPo=r(fBe," \u2014 "),jV=n(fBe,"A",{href:!0});var lCt=s(jV);MPo=r(lCt,"Wav2Vec2ConformerForPreTraining"),lCt.forEach(t),EPo=r(fBe," (Wav2Vec2-Conformer model)"),fBe.forEach(t),CPo=i(O),v1=n(O,"LI",{});var mBe=s(v1);Wpe=n(mBe,"STRONG",{});var iCt=s(Wpe);wPo=r(iCt,"xlm"),iCt.forEach(t),APo=r(mBe," \u2014 "),DV=n(mBe,"A",{href:!0});var dCt=s(DV);LPo=r(dCt,"XLMWithLMHeadModel"),dCt.forEach(t),yPo=r(mBe," (XLM model)"),mBe.forEach(t),xPo=i(O),F1=n(O,"LI",{});var gBe=s(F1);Qpe=n(gBe,"STRONG",{});var cCt=s(Qpe);$Po=r(cCt,"xlm-roberta"),cCt.forEach(t),kPo=r(gBe," \u2014 "),GV=n(gBe,"A",{href:!0});var fCt=s(GV);SPo=r(fCt,"XLMRobertaForMaskedLM"),fCt.forEach(t),RPo=r(gBe," (XLM-RoBERTa model)"),gBe.forEach(t),PPo=i(O),T1=n(O,"LI",{});var hBe=s(T1);Upe=n(hBe,"STRONG",{});var mCt=s(Upe);BPo=r(mCt,"xlm-roberta-xl"),mCt.forEach(t),IPo=r(hBe," \u2014 "),OV=n(hBe,"A",{href:!0});var gCt=s(OV);NPo=r(gCt,"XLMRobertaXLForMaskedLM"),gCt.forEach(t),qPo=r(hBe," (XLM-RoBERTa-XL model)"),hBe.forEach(t),jPo=i(O),M1=n(O,"LI",{});var pBe=s(M1);Hpe=n(pBe,"STRONG",{});var hCt=s(Hpe);DPo=r(hCt,"xlnet"),hCt.forEach(t),GPo=r(pBe," \u2014 "),VV=n(pBe,"A",{href:!0});var pCt=s(VV);OPo=r(pCt,"XLNetLMHeadModel"),pCt.forEach(t),VPo=r(pBe," (XLNet model)"),pBe.forEach(t),O.forEach(t),XPo=i(ha),E1=n(ha,"P",{});var _Be=s(E1);zPo=r(_Be,"The model is set in evaluation mode by default using "),Jpe=n(_Be,"CODE",{});var _Ct=s(Jpe);WPo=r(_Ct,"model.eval()"),_Ct.forEach(t),QPo=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=n(_Be,"CODE",{});var uCt=s(Ype);UPo=r(uCt,"model.train()"),uCt.forEach(t),_Be.forEach(t),HPo=i(ha),T(C1.$$.fragment,ha),ha.forEach(t),bl.forEach(t),sUe=i(f),fd=n(f,"H2",{class:!0});var _Je=s(fd);w1=n(_Je,"A",{id:!0,class:!0,href:!0});var bCt=s(w1);Kpe=n(bCt,"SPAN",{});var vCt=s(Kpe);T(H8.$$.fragment,vCt),vCt.forEach(t),bCt.forEach(t),JPo=i(_Je),Zpe=n(_Je,"SPAN",{});var FCt=s(Zpe);YPo=r(FCt,"AutoModelForCausalLM"),FCt.forEach(t),_Je.forEach(t),lUe=i(f),Po=n(f,"DIV",{class:!0});var vl=s(Po);T(J8.$$.fragment,vl),KPo=i(vl),md=n(vl,"P",{});var Jae=s(md);ZPo=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XV=n(Jae,"A",{href:!0});var TCt=s(XV);eBo=r(TCt,"from_pretrained()"),TCt.forEach(t),oBo=r(Jae," class method or the "),zV=n(Jae,"A",{href:!0});var MCt=s(zV);rBo=r(MCt,"from_config()"),MCt.forEach(t),tBo=r(Jae,` class
method.`),Jae.forEach(t),aBo=i(vl),Y8=n(vl,"P",{});var uJe=s(Y8);nBo=r(uJe,"This class cannot be instantiated directly using "),e_e=n(uJe,"CODE",{});var ECt=s(e_e);sBo=r(ECt,"__init__()"),ECt.forEach(t),lBo=r(uJe," (throws an error)."),uJe.forEach(t),iBo=i(vl),ht=n(vl,"DIV",{class:!0});var _L=s(ht);T(K8.$$.fragment,_L),dBo=i(_L),o_e=n(_L,"P",{});var CCt=s(o_e);cBo=r(CCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),CCt.forEach(t),fBo=i(_L),gd=n(_L,"P",{});var Yae=s(gd);mBo=r(Yae,`Note:
Loading a model from its configuration file does `),r_e=n(Yae,"STRONG",{});var wCt=s(r_e);gBo=r(wCt,"not"),wCt.forEach(t),hBo=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(Yae,"A",{href:!0});var ACt=s(WV);pBo=r(ACt,"from_pretrained()"),ACt.forEach(t),_Bo=r(Yae," to load the model weights."),Yae.forEach(t),uBo=i(_L),T(A1.$$.fragment,_L),_L.forEach(t),bBo=i(vl),Ze=n(vl,"DIV",{class:!0});var pa=s(Ze);T(Z8.$$.fragment,pa),vBo=i(pa),t_e=n(pa,"P",{});var LCt=s(t_e);FBo=r(LCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),LCt.forEach(t),TBo=i(pa),za=n(pa,"P",{});var uL=s(za);MBo=r(uL,"The model class to instantiate is selected based on the "),a_e=n(uL,"CODE",{});var yCt=s(a_e);EBo=r(yCt,"model_type"),yCt.forEach(t),CBo=r(uL,` property of the config object (either
passed as an argument or loaded from `),n_e=n(uL,"CODE",{});var xCt=s(n_e);wBo=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),ABo=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(uL,"CODE",{});var $Ct=s(s_e);LBo=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),yBo=r(uL,":"),uL.forEach(t),xBo=i(pa),z=n(pa,"UL",{});var W=s(z);L1=n(W,"LI",{});var uBe=s(L1);l_e=n(uBe,"STRONG",{});var kCt=s(l_e);$Bo=r(kCt,"bart"),kCt.forEach(t),kBo=r(uBe," \u2014 "),QV=n(uBe,"A",{href:!0});var SCt=s(QV);SBo=r(SCt,"BartForCausalLM"),SCt.forEach(t),RBo=r(uBe," (BART model)"),uBe.forEach(t),PBo=i(W),y1=n(W,"LI",{});var bBe=s(y1);i_e=n(bBe,"STRONG",{});var RCt=s(i_e);BBo=r(RCt,"bert"),RCt.forEach(t),IBo=r(bBe," \u2014 "),UV=n(bBe,"A",{href:!0});var PCt=s(UV);NBo=r(PCt,"BertLMHeadModel"),PCt.forEach(t),qBo=r(bBe," (BERT model)"),bBe.forEach(t),jBo=i(W),x1=n(W,"LI",{});var vBe=s(x1);d_e=n(vBe,"STRONG",{});var BCt=s(d_e);DBo=r(BCt,"bert-generation"),BCt.forEach(t),GBo=r(vBe," \u2014 "),HV=n(vBe,"A",{href:!0});var ICt=s(HV);OBo=r(ICt,"BertGenerationDecoder"),ICt.forEach(t),VBo=r(vBe," (Bert Generation model)"),vBe.forEach(t),XBo=i(W),$1=n(W,"LI",{});var FBe=s($1);c_e=n(FBe,"STRONG",{});var NCt=s(c_e);zBo=r(NCt,"big_bird"),NCt.forEach(t),WBo=r(FBe," \u2014 "),JV=n(FBe,"A",{href:!0});var qCt=s(JV);QBo=r(qCt,"BigBirdForCausalLM"),qCt.forEach(t),UBo=r(FBe," (BigBird model)"),FBe.forEach(t),HBo=i(W),k1=n(W,"LI",{});var TBe=s(k1);f_e=n(TBe,"STRONG",{});var jCt=s(f_e);JBo=r(jCt,"bigbird_pegasus"),jCt.forEach(t),YBo=r(TBe," \u2014 "),YV=n(TBe,"A",{href:!0});var DCt=s(YV);KBo=r(DCt,"BigBirdPegasusForCausalLM"),DCt.forEach(t),ZBo=r(TBe," (BigBird-Pegasus model)"),TBe.forEach(t),eIo=i(W),S1=n(W,"LI",{});var MBe=s(S1);m_e=n(MBe,"STRONG",{});var GCt=s(m_e);oIo=r(GCt,"blenderbot"),GCt.forEach(t),rIo=r(MBe," \u2014 "),KV=n(MBe,"A",{href:!0});var OCt=s(KV);tIo=r(OCt,"BlenderbotForCausalLM"),OCt.forEach(t),aIo=r(MBe," (Blenderbot model)"),MBe.forEach(t),nIo=i(W),R1=n(W,"LI",{});var EBe=s(R1);g_e=n(EBe,"STRONG",{});var VCt=s(g_e);sIo=r(VCt,"blenderbot-small"),VCt.forEach(t),lIo=r(EBe," \u2014 "),ZV=n(EBe,"A",{href:!0});var XCt=s(ZV);iIo=r(XCt,"BlenderbotSmallForCausalLM"),XCt.forEach(t),dIo=r(EBe," (BlenderbotSmall model)"),EBe.forEach(t),cIo=i(W),P1=n(W,"LI",{});var CBe=s(P1);h_e=n(CBe,"STRONG",{});var zCt=s(h_e);fIo=r(zCt,"bloom"),zCt.forEach(t),mIo=r(CBe," \u2014 "),eX=n(CBe,"A",{href:!0});var WCt=s(eX);gIo=r(WCt,"BloomForCausalLM"),WCt.forEach(t),hIo=r(CBe," (BLOOM model)"),CBe.forEach(t),pIo=i(W),B1=n(W,"LI",{});var wBe=s(B1);p_e=n(wBe,"STRONG",{});var QCt=s(p_e);_Io=r(QCt,"camembert"),QCt.forEach(t),uIo=r(wBe," \u2014 "),oX=n(wBe,"A",{href:!0});var UCt=s(oX);bIo=r(UCt,"CamembertForCausalLM"),UCt.forEach(t),vIo=r(wBe," (CamemBERT model)"),wBe.forEach(t),FIo=i(W),I1=n(W,"LI",{});var ABe=s(I1);__e=n(ABe,"STRONG",{});var HCt=s(__e);TIo=r(HCt,"codegen"),HCt.forEach(t),MIo=r(ABe," \u2014 "),rX=n(ABe,"A",{href:!0});var JCt=s(rX);EIo=r(JCt,"CodeGenForCausalLM"),JCt.forEach(t),CIo=r(ABe," (CodeGen model)"),ABe.forEach(t),wIo=i(W),N1=n(W,"LI",{});var LBe=s(N1);u_e=n(LBe,"STRONG",{});var YCt=s(u_e);AIo=r(YCt,"ctrl"),YCt.forEach(t),LIo=r(LBe," \u2014 "),tX=n(LBe,"A",{href:!0});var KCt=s(tX);yIo=r(KCt,"CTRLLMHeadModel"),KCt.forEach(t),xIo=r(LBe," (CTRL model)"),LBe.forEach(t),$Io=i(W),q1=n(W,"LI",{});var yBe=s(q1);b_e=n(yBe,"STRONG",{});var ZCt=s(b_e);kIo=r(ZCt,"data2vec-text"),ZCt.forEach(t),SIo=r(yBe," \u2014 "),aX=n(yBe,"A",{href:!0});var e3t=s(aX);RIo=r(e3t,"Data2VecTextForCausalLM"),e3t.forEach(t),PIo=r(yBe," (Data2VecText model)"),yBe.forEach(t),BIo=i(W),j1=n(W,"LI",{});var xBe=s(j1);v_e=n(xBe,"STRONG",{});var o3t=s(v_e);IIo=r(o3t,"electra"),o3t.forEach(t),NIo=r(xBe," \u2014 "),nX=n(xBe,"A",{href:!0});var r3t=s(nX);qIo=r(r3t,"ElectraForCausalLM"),r3t.forEach(t),jIo=r(xBe," (ELECTRA model)"),xBe.forEach(t),DIo=i(W),D1=n(W,"LI",{});var $Be=s(D1);F_e=n($Be,"STRONG",{});var t3t=s(F_e);GIo=r(t3t,"gpt2"),t3t.forEach(t),OIo=r($Be," \u2014 "),sX=n($Be,"A",{href:!0});var a3t=s(sX);VIo=r(a3t,"GPT2LMHeadModel"),a3t.forEach(t),XIo=r($Be," (OpenAI GPT-2 model)"),$Be.forEach(t),zIo=i(W),G1=n(W,"LI",{});var kBe=s(G1);T_e=n(kBe,"STRONG",{});var n3t=s(T_e);WIo=r(n3t,"gpt_neo"),n3t.forEach(t),QIo=r(kBe," \u2014 "),lX=n(kBe,"A",{href:!0});var s3t=s(lX);UIo=r(s3t,"GPTNeoForCausalLM"),s3t.forEach(t),HIo=r(kBe," (GPT Neo model)"),kBe.forEach(t),JIo=i(W),O1=n(W,"LI",{});var SBe=s(O1);M_e=n(SBe,"STRONG",{});var l3t=s(M_e);YIo=r(l3t,"gpt_neox"),l3t.forEach(t),KIo=r(SBe," \u2014 "),iX=n(SBe,"A",{href:!0});var i3t=s(iX);ZIo=r(i3t,"GPTNeoXForCausalLM"),i3t.forEach(t),eNo=r(SBe," (GPT NeoX model)"),SBe.forEach(t),oNo=i(W),V1=n(W,"LI",{});var RBe=s(V1);E_e=n(RBe,"STRONG",{});var d3t=s(E_e);rNo=r(d3t,"gptj"),d3t.forEach(t),tNo=r(RBe," \u2014 "),dX=n(RBe,"A",{href:!0});var c3t=s(dX);aNo=r(c3t,"GPTJForCausalLM"),c3t.forEach(t),nNo=r(RBe," (GPT-J model)"),RBe.forEach(t),sNo=i(W),X1=n(W,"LI",{});var PBe=s(X1);C_e=n(PBe,"STRONG",{});var f3t=s(C_e);lNo=r(f3t,"marian"),f3t.forEach(t),iNo=r(PBe," \u2014 "),cX=n(PBe,"A",{href:!0});var m3t=s(cX);dNo=r(m3t,"MarianForCausalLM"),m3t.forEach(t),cNo=r(PBe," (Marian model)"),PBe.forEach(t),fNo=i(W),z1=n(W,"LI",{});var BBe=s(z1);w_e=n(BBe,"STRONG",{});var g3t=s(w_e);mNo=r(g3t,"mbart"),g3t.forEach(t),gNo=r(BBe," \u2014 "),fX=n(BBe,"A",{href:!0});var h3t=s(fX);hNo=r(h3t,"MBartForCausalLM"),h3t.forEach(t),pNo=r(BBe," (mBART model)"),BBe.forEach(t),_No=i(W),W1=n(W,"LI",{});var IBe=s(W1);A_e=n(IBe,"STRONG",{});var p3t=s(A_e);uNo=r(p3t,"megatron-bert"),p3t.forEach(t),bNo=r(IBe," \u2014 "),mX=n(IBe,"A",{href:!0});var _3t=s(mX);vNo=r(_3t,"MegatronBertForCausalLM"),_3t.forEach(t),FNo=r(IBe," (Megatron-BERT model)"),IBe.forEach(t),TNo=i(W),Q1=n(W,"LI",{});var NBe=s(Q1);L_e=n(NBe,"STRONG",{});var u3t=s(L_e);MNo=r(u3t,"mvp"),u3t.forEach(t),ENo=r(NBe," \u2014 "),gX=n(NBe,"A",{href:!0});var b3t=s(gX);CNo=r(b3t,"MvpForCausalLM"),b3t.forEach(t),wNo=r(NBe," (MVP model)"),NBe.forEach(t),ANo=i(W),U1=n(W,"LI",{});var qBe=s(U1);y_e=n(qBe,"STRONG",{});var v3t=s(y_e);LNo=r(v3t,"openai-gpt"),v3t.forEach(t),yNo=r(qBe," \u2014 "),hX=n(qBe,"A",{href:!0});var F3t=s(hX);xNo=r(F3t,"OpenAIGPTLMHeadModel"),F3t.forEach(t),$No=r(qBe," (OpenAI GPT model)"),qBe.forEach(t),kNo=i(W),H1=n(W,"LI",{});var jBe=s(H1);x_e=n(jBe,"STRONG",{});var T3t=s(x_e);SNo=r(T3t,"opt"),T3t.forEach(t),RNo=r(jBe," \u2014 "),pX=n(jBe,"A",{href:!0});var M3t=s(pX);PNo=r(M3t,"OPTForCausalLM"),M3t.forEach(t),BNo=r(jBe," (OPT model)"),jBe.forEach(t),INo=i(W),J1=n(W,"LI",{});var DBe=s(J1);$_e=n(DBe,"STRONG",{});var E3t=s($_e);NNo=r(E3t,"pegasus"),E3t.forEach(t),qNo=r(DBe," \u2014 "),_X=n(DBe,"A",{href:!0});var C3t=s(_X);jNo=r(C3t,"PegasusForCausalLM"),C3t.forEach(t),DNo=r(DBe," (Pegasus model)"),DBe.forEach(t),GNo=i(W),Y1=n(W,"LI",{});var GBe=s(Y1);k_e=n(GBe,"STRONG",{});var w3t=s(k_e);ONo=r(w3t,"plbart"),w3t.forEach(t),VNo=r(GBe," \u2014 "),uX=n(GBe,"A",{href:!0});var A3t=s(uX);XNo=r(A3t,"PLBartForCausalLM"),A3t.forEach(t),zNo=r(GBe," (PLBart model)"),GBe.forEach(t),WNo=i(W),K1=n(W,"LI",{});var OBe=s(K1);S_e=n(OBe,"STRONG",{});var L3t=s(S_e);QNo=r(L3t,"prophetnet"),L3t.forEach(t),UNo=r(OBe," \u2014 "),bX=n(OBe,"A",{href:!0});var y3t=s(bX);HNo=r(y3t,"ProphetNetForCausalLM"),y3t.forEach(t),JNo=r(OBe," (ProphetNet model)"),OBe.forEach(t),YNo=i(W),Z1=n(W,"LI",{});var VBe=s(Z1);R_e=n(VBe,"STRONG",{});var x3t=s(R_e);KNo=r(x3t,"qdqbert"),x3t.forEach(t),ZNo=r(VBe," \u2014 "),vX=n(VBe,"A",{href:!0});var $3t=s(vX);eqo=r($3t,"QDQBertLMHeadModel"),$3t.forEach(t),oqo=r(VBe," (QDQBert model)"),VBe.forEach(t),rqo=i(W),e4=n(W,"LI",{});var XBe=s(e4);P_e=n(XBe,"STRONG",{});var k3t=s(P_e);tqo=r(k3t,"reformer"),k3t.forEach(t),aqo=r(XBe," \u2014 "),FX=n(XBe,"A",{href:!0});var S3t=s(FX);nqo=r(S3t,"ReformerModelWithLMHead"),S3t.forEach(t),sqo=r(XBe," (Reformer model)"),XBe.forEach(t),lqo=i(W),o4=n(W,"LI",{});var zBe=s(o4);B_e=n(zBe,"STRONG",{});var R3t=s(B_e);iqo=r(R3t,"rembert"),R3t.forEach(t),dqo=r(zBe," \u2014 "),TX=n(zBe,"A",{href:!0});var P3t=s(TX);cqo=r(P3t,"RemBertForCausalLM"),P3t.forEach(t),fqo=r(zBe," (RemBERT model)"),zBe.forEach(t),mqo=i(W),r4=n(W,"LI",{});var WBe=s(r4);I_e=n(WBe,"STRONG",{});var B3t=s(I_e);gqo=r(B3t,"roberta"),B3t.forEach(t),hqo=r(WBe," \u2014 "),MX=n(WBe,"A",{href:!0});var I3t=s(MX);pqo=r(I3t,"RobertaForCausalLM"),I3t.forEach(t),_qo=r(WBe," (RoBERTa model)"),WBe.forEach(t),uqo=i(W),t4=n(W,"LI",{});var QBe=s(t4);N_e=n(QBe,"STRONG",{});var N3t=s(N_e);bqo=r(N3t,"roformer"),N3t.forEach(t),vqo=r(QBe," \u2014 "),EX=n(QBe,"A",{href:!0});var q3t=s(EX);Fqo=r(q3t,"RoFormerForCausalLM"),q3t.forEach(t),Tqo=r(QBe," (RoFormer model)"),QBe.forEach(t),Mqo=i(W),a4=n(W,"LI",{});var UBe=s(a4);q_e=n(UBe,"STRONG",{});var j3t=s(q_e);Eqo=r(j3t,"speech_to_text_2"),j3t.forEach(t),Cqo=r(UBe," \u2014 "),CX=n(UBe,"A",{href:!0});var D3t=s(CX);wqo=r(D3t,"Speech2Text2ForCausalLM"),D3t.forEach(t),Aqo=r(UBe," (Speech2Text2 model)"),UBe.forEach(t),Lqo=i(W),n4=n(W,"LI",{});var HBe=s(n4);j_e=n(HBe,"STRONG",{});var G3t=s(j_e);yqo=r(G3t,"transfo-xl"),G3t.forEach(t),xqo=r(HBe," \u2014 "),wX=n(HBe,"A",{href:!0});var O3t=s(wX);$qo=r(O3t,"TransfoXLLMHeadModel"),O3t.forEach(t),kqo=r(HBe," (Transformer-XL model)"),HBe.forEach(t),Sqo=i(W),s4=n(W,"LI",{});var JBe=s(s4);D_e=n(JBe,"STRONG",{});var V3t=s(D_e);Rqo=r(V3t,"trocr"),V3t.forEach(t),Pqo=r(JBe," \u2014 "),AX=n(JBe,"A",{href:!0});var X3t=s(AX);Bqo=r(X3t,"TrOCRForCausalLM"),X3t.forEach(t),Iqo=r(JBe," (TrOCR model)"),JBe.forEach(t),Nqo=i(W),l4=n(W,"LI",{});var YBe=s(l4);G_e=n(YBe,"STRONG",{});var z3t=s(G_e);qqo=r(z3t,"xglm"),z3t.forEach(t),jqo=r(YBe," \u2014 "),LX=n(YBe,"A",{href:!0});var W3t=s(LX);Dqo=r(W3t,"XGLMForCausalLM"),W3t.forEach(t),Gqo=r(YBe," (XGLM model)"),YBe.forEach(t),Oqo=i(W),i4=n(W,"LI",{});var KBe=s(i4);O_e=n(KBe,"STRONG",{});var Q3t=s(O_e);Vqo=r(Q3t,"xlm"),Q3t.forEach(t),Xqo=r(KBe," \u2014 "),yX=n(KBe,"A",{href:!0});var U3t=s(yX);zqo=r(U3t,"XLMWithLMHeadModel"),U3t.forEach(t),Wqo=r(KBe," (XLM model)"),KBe.forEach(t),Qqo=i(W),d4=n(W,"LI",{});var ZBe=s(d4);V_e=n(ZBe,"STRONG",{});var H3t=s(V_e);Uqo=r(H3t,"xlm-prophetnet"),H3t.forEach(t),Hqo=r(ZBe," \u2014 "),xX=n(ZBe,"A",{href:!0});var J3t=s(xX);Jqo=r(J3t,"XLMProphetNetForCausalLM"),J3t.forEach(t),Yqo=r(ZBe," (XLM-ProphetNet model)"),ZBe.forEach(t),Kqo=i(W),c4=n(W,"LI",{});var eIe=s(c4);X_e=n(eIe,"STRONG",{});var Y3t=s(X_e);Zqo=r(Y3t,"xlm-roberta"),Y3t.forEach(t),ejo=r(eIe," \u2014 "),$X=n(eIe,"A",{href:!0});var K3t=s($X);ojo=r(K3t,"XLMRobertaForCausalLM"),K3t.forEach(t),rjo=r(eIe," (XLM-RoBERTa model)"),eIe.forEach(t),tjo=i(W),f4=n(W,"LI",{});var oIe=s(f4);z_e=n(oIe,"STRONG",{});var Z3t=s(z_e);ajo=r(Z3t,"xlm-roberta-xl"),Z3t.forEach(t),njo=r(oIe," \u2014 "),kX=n(oIe,"A",{href:!0});var e0t=s(kX);sjo=r(e0t,"XLMRobertaXLForCausalLM"),e0t.forEach(t),ljo=r(oIe," (XLM-RoBERTa-XL model)"),oIe.forEach(t),ijo=i(W),m4=n(W,"LI",{});var rIe=s(m4);W_e=n(rIe,"STRONG",{});var o0t=s(W_e);djo=r(o0t,"xlnet"),o0t.forEach(t),cjo=r(rIe," \u2014 "),SX=n(rIe,"A",{href:!0});var r0t=s(SX);fjo=r(r0t,"XLNetLMHeadModel"),r0t.forEach(t),mjo=r(rIe," (XLNet model)"),rIe.forEach(t),W.forEach(t),gjo=i(pa),g4=n(pa,"P",{});var tIe=s(g4);hjo=r(tIe,"The model is set in evaluation mode by default using "),Q_e=n(tIe,"CODE",{});var t0t=s(Q_e);pjo=r(t0t,"model.eval()"),t0t.forEach(t),_jo=r(tIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=n(tIe,"CODE",{});var a0t=s(U_e);ujo=r(a0t,"model.train()"),a0t.forEach(t),tIe.forEach(t),bjo=i(pa),T(h4.$$.fragment,pa),pa.forEach(t),vl.forEach(t),iUe=i(f),hd=n(f,"H2",{class:!0});var bJe=s(hd);p4=n(bJe,"A",{id:!0,class:!0,href:!0});var n0t=s(p4);H_e=n(n0t,"SPAN",{});var s0t=s(H_e);T(e9.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),vjo=i(bJe),J_e=n(bJe,"SPAN",{});var l0t=s(J_e);Fjo=r(l0t,"AutoModelForMaskedLM"),l0t.forEach(t),bJe.forEach(t),dUe=i(f),Bo=n(f,"DIV",{class:!0});var Fl=s(Bo);T(o9.$$.fragment,Fl),Tjo=i(Fl),pd=n(Fl,"P",{});var Kae=s(pd);Mjo=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RX=n(Kae,"A",{href:!0});var i0t=s(RX);Ejo=r(i0t,"from_pretrained()"),i0t.forEach(t),Cjo=r(Kae," class method or the "),PX=n(Kae,"A",{href:!0});var d0t=s(PX);wjo=r(d0t,"from_config()"),d0t.forEach(t),Ajo=r(Kae,` class
method.`),Kae.forEach(t),Ljo=i(Fl),r9=n(Fl,"P",{});var vJe=s(r9);yjo=r(vJe,"This class cannot be instantiated directly using "),Y_e=n(vJe,"CODE",{});var c0t=s(Y_e);xjo=r(c0t,"__init__()"),c0t.forEach(t),$jo=r(vJe," (throws an error)."),vJe.forEach(t),kjo=i(Fl),pt=n(Fl,"DIV",{class:!0});var bL=s(pt);T(t9.$$.fragment,bL),Sjo=i(bL),K_e=n(bL,"P",{});var f0t=s(K_e);Rjo=r(f0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),f0t.forEach(t),Pjo=i(bL),_d=n(bL,"P",{});var Zae=s(_d);Bjo=r(Zae,`Note:
Loading a model from its configuration file does `),Z_e=n(Zae,"STRONG",{});var m0t=s(Z_e);Ijo=r(m0t,"not"),m0t.forEach(t),Njo=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=n(Zae,"A",{href:!0});var g0t=s(BX);qjo=r(g0t,"from_pretrained()"),g0t.forEach(t),jjo=r(Zae," to load the model weights."),Zae.forEach(t),Djo=i(bL),T(_4.$$.fragment,bL),bL.forEach(t),Gjo=i(Fl),eo=n(Fl,"DIV",{class:!0});var _a=s(eo);T(a9.$$.fragment,_a),Ojo=i(_a),eue=n(_a,"P",{});var h0t=s(eue);Vjo=r(h0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),h0t.forEach(t),Xjo=i(_a),Wa=n(_a,"P",{});var vL=s(Wa);zjo=r(vL,"The model class to instantiate is selected based on the "),oue=n(vL,"CODE",{});var p0t=s(oue);Wjo=r(p0t,"model_type"),p0t.forEach(t),Qjo=r(vL,` property of the config object (either
passed as an argument or loaded from `),rue=n(vL,"CODE",{});var _0t=s(rue);Ujo=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),Hjo=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(vL,"CODE",{});var u0t=s(tue);Jjo=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),Yjo=r(vL,":"),vL.forEach(t),Kjo=i(_a),U=n(_a,"UL",{});var Y=s(U);u4=n(Y,"LI",{});var aIe=s(u4);aue=n(aIe,"STRONG",{});var b0t=s(aue);Zjo=r(b0t,"albert"),b0t.forEach(t),eDo=r(aIe," \u2014 "),IX=n(aIe,"A",{href:!0});var v0t=s(IX);oDo=r(v0t,"AlbertForMaskedLM"),v0t.forEach(t),rDo=r(aIe," (ALBERT model)"),aIe.forEach(t),tDo=i(Y),b4=n(Y,"LI",{});var nIe=s(b4);nue=n(nIe,"STRONG",{});var F0t=s(nue);aDo=r(F0t,"bart"),F0t.forEach(t),nDo=r(nIe," \u2014 "),NX=n(nIe,"A",{href:!0});var T0t=s(NX);sDo=r(T0t,"BartForConditionalGeneration"),T0t.forEach(t),lDo=r(nIe," (BART model)"),nIe.forEach(t),iDo=i(Y),v4=n(Y,"LI",{});var sIe=s(v4);sue=n(sIe,"STRONG",{});var M0t=s(sue);dDo=r(M0t,"bert"),M0t.forEach(t),cDo=r(sIe," \u2014 "),qX=n(sIe,"A",{href:!0});var E0t=s(qX);fDo=r(E0t,"BertForMaskedLM"),E0t.forEach(t),mDo=r(sIe," (BERT model)"),sIe.forEach(t),gDo=i(Y),F4=n(Y,"LI",{});var lIe=s(F4);lue=n(lIe,"STRONG",{});var C0t=s(lue);hDo=r(C0t,"big_bird"),C0t.forEach(t),pDo=r(lIe," \u2014 "),jX=n(lIe,"A",{href:!0});var w0t=s(jX);_Do=r(w0t,"BigBirdForMaskedLM"),w0t.forEach(t),uDo=r(lIe," (BigBird model)"),lIe.forEach(t),bDo=i(Y),T4=n(Y,"LI",{});var iIe=s(T4);iue=n(iIe,"STRONG",{});var A0t=s(iue);vDo=r(A0t,"camembert"),A0t.forEach(t),FDo=r(iIe," \u2014 "),DX=n(iIe,"A",{href:!0});var L0t=s(DX);TDo=r(L0t,"CamembertForMaskedLM"),L0t.forEach(t),MDo=r(iIe," (CamemBERT model)"),iIe.forEach(t),EDo=i(Y),M4=n(Y,"LI",{});var dIe=s(M4);due=n(dIe,"STRONG",{});var y0t=s(due);CDo=r(y0t,"convbert"),y0t.forEach(t),wDo=r(dIe," \u2014 "),GX=n(dIe,"A",{href:!0});var x0t=s(GX);ADo=r(x0t,"ConvBertForMaskedLM"),x0t.forEach(t),LDo=r(dIe," (ConvBERT model)"),dIe.forEach(t),yDo=i(Y),E4=n(Y,"LI",{});var cIe=s(E4);cue=n(cIe,"STRONG",{});var $0t=s(cue);xDo=r($0t,"data2vec-text"),$0t.forEach(t),$Do=r(cIe," \u2014 "),OX=n(cIe,"A",{href:!0});var k0t=s(OX);kDo=r(k0t,"Data2VecTextForMaskedLM"),k0t.forEach(t),SDo=r(cIe," (Data2VecText model)"),cIe.forEach(t),RDo=i(Y),C4=n(Y,"LI",{});var fIe=s(C4);fue=n(fIe,"STRONG",{});var S0t=s(fue);PDo=r(S0t,"deberta"),S0t.forEach(t),BDo=r(fIe," \u2014 "),VX=n(fIe,"A",{href:!0});var R0t=s(VX);IDo=r(R0t,"DebertaForMaskedLM"),R0t.forEach(t),NDo=r(fIe," (DeBERTa model)"),fIe.forEach(t),qDo=i(Y),w4=n(Y,"LI",{});var mIe=s(w4);mue=n(mIe,"STRONG",{});var P0t=s(mue);jDo=r(P0t,"deberta-v2"),P0t.forEach(t),DDo=r(mIe," \u2014 "),XX=n(mIe,"A",{href:!0});var B0t=s(XX);GDo=r(B0t,"DebertaV2ForMaskedLM"),B0t.forEach(t),ODo=r(mIe," (DeBERTa-v2 model)"),mIe.forEach(t),VDo=i(Y),A4=n(Y,"LI",{});var gIe=s(A4);gue=n(gIe,"STRONG",{});var I0t=s(gue);XDo=r(I0t,"distilbert"),I0t.forEach(t),zDo=r(gIe," \u2014 "),zX=n(gIe,"A",{href:!0});var N0t=s(zX);WDo=r(N0t,"DistilBertForMaskedLM"),N0t.forEach(t),QDo=r(gIe," (DistilBERT model)"),gIe.forEach(t),UDo=i(Y),L4=n(Y,"LI",{});var hIe=s(L4);hue=n(hIe,"STRONG",{});var q0t=s(hue);HDo=r(q0t,"electra"),q0t.forEach(t),JDo=r(hIe," \u2014 "),WX=n(hIe,"A",{href:!0});var j0t=s(WX);YDo=r(j0t,"ElectraForMaskedLM"),j0t.forEach(t),KDo=r(hIe," (ELECTRA model)"),hIe.forEach(t),ZDo=i(Y),y4=n(Y,"LI",{});var pIe=s(y4);pue=n(pIe,"STRONG",{});var D0t=s(pue);eGo=r(D0t,"flaubert"),D0t.forEach(t),oGo=r(pIe," \u2014 "),QX=n(pIe,"A",{href:!0});var G0t=s(QX);rGo=r(G0t,"FlaubertWithLMHeadModel"),G0t.forEach(t),tGo=r(pIe," (FlauBERT model)"),pIe.forEach(t),aGo=i(Y),x4=n(Y,"LI",{});var _Ie=s(x4);_ue=n(_Ie,"STRONG",{});var O0t=s(_ue);nGo=r(O0t,"fnet"),O0t.forEach(t),sGo=r(_Ie," \u2014 "),UX=n(_Ie,"A",{href:!0});var V0t=s(UX);lGo=r(V0t,"FNetForMaskedLM"),V0t.forEach(t),iGo=r(_Ie," (FNet model)"),_Ie.forEach(t),dGo=i(Y),$4=n(Y,"LI",{});var uIe=s($4);uue=n(uIe,"STRONG",{});var X0t=s(uue);cGo=r(X0t,"funnel"),X0t.forEach(t),fGo=r(uIe," \u2014 "),HX=n(uIe,"A",{href:!0});var z0t=s(HX);mGo=r(z0t,"FunnelForMaskedLM"),z0t.forEach(t),gGo=r(uIe," (Funnel Transformer model)"),uIe.forEach(t),hGo=i(Y),k4=n(Y,"LI",{});var bIe=s(k4);bue=n(bIe,"STRONG",{});var W0t=s(bue);pGo=r(W0t,"ibert"),W0t.forEach(t),_Go=r(bIe," \u2014 "),JX=n(bIe,"A",{href:!0});var Q0t=s(JX);uGo=r(Q0t,"IBertForMaskedLM"),Q0t.forEach(t),bGo=r(bIe," (I-BERT model)"),bIe.forEach(t),vGo=i(Y),S4=n(Y,"LI",{});var vIe=s(S4);vue=n(vIe,"STRONG",{});var U0t=s(vue);FGo=r(U0t,"layoutlm"),U0t.forEach(t),TGo=r(vIe," \u2014 "),YX=n(vIe,"A",{href:!0});var H0t=s(YX);MGo=r(H0t,"LayoutLMForMaskedLM"),H0t.forEach(t),EGo=r(vIe," (LayoutLM model)"),vIe.forEach(t),CGo=i(Y),R4=n(Y,"LI",{});var FIe=s(R4);Fue=n(FIe,"STRONG",{});var J0t=s(Fue);wGo=r(J0t,"longformer"),J0t.forEach(t),AGo=r(FIe," \u2014 "),KX=n(FIe,"A",{href:!0});var Y0t=s(KX);LGo=r(Y0t,"LongformerForMaskedLM"),Y0t.forEach(t),yGo=r(FIe," (Longformer model)"),FIe.forEach(t),xGo=i(Y),P4=n(Y,"LI",{});var TIe=s(P4);Tue=n(TIe,"STRONG",{});var K0t=s(Tue);$Go=r(K0t,"luke"),K0t.forEach(t),kGo=r(TIe," \u2014 "),ZX=n(TIe,"A",{href:!0});var Z0t=s(ZX);SGo=r(Z0t,"LukeForMaskedLM"),Z0t.forEach(t),RGo=r(TIe," (LUKE model)"),TIe.forEach(t),PGo=i(Y),B4=n(Y,"LI",{});var MIe=s(B4);Mue=n(MIe,"STRONG",{});var ewt=s(Mue);BGo=r(ewt,"mbart"),ewt.forEach(t),IGo=r(MIe," \u2014 "),ez=n(MIe,"A",{href:!0});var owt=s(ez);NGo=r(owt,"MBartForConditionalGeneration"),owt.forEach(t),qGo=r(MIe," (mBART model)"),MIe.forEach(t),jGo=i(Y),I4=n(Y,"LI",{});var EIe=s(I4);Eue=n(EIe,"STRONG",{});var rwt=s(Eue);DGo=r(rwt,"megatron-bert"),rwt.forEach(t),GGo=r(EIe," \u2014 "),oz=n(EIe,"A",{href:!0});var twt=s(oz);OGo=r(twt,"MegatronBertForMaskedLM"),twt.forEach(t),VGo=r(EIe," (Megatron-BERT model)"),EIe.forEach(t),XGo=i(Y),N4=n(Y,"LI",{});var CIe=s(N4);Cue=n(CIe,"STRONG",{});var awt=s(Cue);zGo=r(awt,"mobilebert"),awt.forEach(t),WGo=r(CIe," \u2014 "),rz=n(CIe,"A",{href:!0});var nwt=s(rz);QGo=r(nwt,"MobileBertForMaskedLM"),nwt.forEach(t),UGo=r(CIe," (MobileBERT model)"),CIe.forEach(t),HGo=i(Y),q4=n(Y,"LI",{});var wIe=s(q4);wue=n(wIe,"STRONG",{});var swt=s(wue);JGo=r(swt,"mpnet"),swt.forEach(t),YGo=r(wIe," \u2014 "),tz=n(wIe,"A",{href:!0});var lwt=s(tz);KGo=r(lwt,"MPNetForMaskedLM"),lwt.forEach(t),ZGo=r(wIe," (MPNet model)"),wIe.forEach(t),eOo=i(Y),j4=n(Y,"LI",{});var AIe=s(j4);Aue=n(AIe,"STRONG",{});var iwt=s(Aue);oOo=r(iwt,"mvp"),iwt.forEach(t),rOo=r(AIe," \u2014 "),az=n(AIe,"A",{href:!0});var dwt=s(az);tOo=r(dwt,"MvpForConditionalGeneration"),dwt.forEach(t),aOo=r(AIe," (MVP model)"),AIe.forEach(t),nOo=i(Y),D4=n(Y,"LI",{});var LIe=s(D4);Lue=n(LIe,"STRONG",{});var cwt=s(Lue);sOo=r(cwt,"nezha"),cwt.forEach(t),lOo=r(LIe," \u2014 "),nz=n(LIe,"A",{href:!0});var fwt=s(nz);iOo=r(fwt,"NezhaForMaskedLM"),fwt.forEach(t),dOo=r(LIe," (Nezha model)"),LIe.forEach(t),cOo=i(Y),G4=n(Y,"LI",{});var yIe=s(G4);yue=n(yIe,"STRONG",{});var mwt=s(yue);fOo=r(mwt,"nystromformer"),mwt.forEach(t),mOo=r(yIe," \u2014 "),sz=n(yIe,"A",{href:!0});var gwt=s(sz);gOo=r(gwt,"NystromformerForMaskedLM"),gwt.forEach(t),hOo=r(yIe," (Nystr\xF6mformer model)"),yIe.forEach(t),pOo=i(Y),O4=n(Y,"LI",{});var xIe=s(O4);xue=n(xIe,"STRONG",{});var hwt=s(xue);_Oo=r(hwt,"perceiver"),hwt.forEach(t),uOo=r(xIe," \u2014 "),lz=n(xIe,"A",{href:!0});var pwt=s(lz);bOo=r(pwt,"PerceiverForMaskedLM"),pwt.forEach(t),vOo=r(xIe," (Perceiver model)"),xIe.forEach(t),FOo=i(Y),V4=n(Y,"LI",{});var $Ie=s(V4);$ue=n($Ie,"STRONG",{});var _wt=s($ue);TOo=r(_wt,"qdqbert"),_wt.forEach(t),MOo=r($Ie," \u2014 "),iz=n($Ie,"A",{href:!0});var uwt=s(iz);EOo=r(uwt,"QDQBertForMaskedLM"),uwt.forEach(t),COo=r($Ie," (QDQBert model)"),$Ie.forEach(t),wOo=i(Y),X4=n(Y,"LI",{});var kIe=s(X4);kue=n(kIe,"STRONG",{});var bwt=s(kue);AOo=r(bwt,"reformer"),bwt.forEach(t),LOo=r(kIe," \u2014 "),dz=n(kIe,"A",{href:!0});var vwt=s(dz);yOo=r(vwt,"ReformerForMaskedLM"),vwt.forEach(t),xOo=r(kIe," (Reformer model)"),kIe.forEach(t),$Oo=i(Y),z4=n(Y,"LI",{});var SIe=s(z4);Sue=n(SIe,"STRONG",{});var Fwt=s(Sue);kOo=r(Fwt,"rembert"),Fwt.forEach(t),SOo=r(SIe," \u2014 "),cz=n(SIe,"A",{href:!0});var Twt=s(cz);ROo=r(Twt,"RemBertForMaskedLM"),Twt.forEach(t),POo=r(SIe," (RemBERT model)"),SIe.forEach(t),BOo=i(Y),W4=n(Y,"LI",{});var RIe=s(W4);Rue=n(RIe,"STRONG",{});var Mwt=s(Rue);IOo=r(Mwt,"roberta"),Mwt.forEach(t),NOo=r(RIe," \u2014 "),fz=n(RIe,"A",{href:!0});var Ewt=s(fz);qOo=r(Ewt,"RobertaForMaskedLM"),Ewt.forEach(t),jOo=r(RIe," (RoBERTa model)"),RIe.forEach(t),DOo=i(Y),Q4=n(Y,"LI",{});var PIe=s(Q4);Pue=n(PIe,"STRONG",{});var Cwt=s(Pue);GOo=r(Cwt,"roformer"),Cwt.forEach(t),OOo=r(PIe," \u2014 "),mz=n(PIe,"A",{href:!0});var wwt=s(mz);VOo=r(wwt,"RoFormerForMaskedLM"),wwt.forEach(t),XOo=r(PIe," (RoFormer model)"),PIe.forEach(t),zOo=i(Y),U4=n(Y,"LI",{});var BIe=s(U4);Bue=n(BIe,"STRONG",{});var Awt=s(Bue);WOo=r(Awt,"squeezebert"),Awt.forEach(t),QOo=r(BIe," \u2014 "),gz=n(BIe,"A",{href:!0});var Lwt=s(gz);UOo=r(Lwt,"SqueezeBertForMaskedLM"),Lwt.forEach(t),HOo=r(BIe," (SqueezeBERT model)"),BIe.forEach(t),JOo=i(Y),H4=n(Y,"LI",{});var IIe=s(H4);Iue=n(IIe,"STRONG",{});var ywt=s(Iue);YOo=r(ywt,"tapas"),ywt.forEach(t),KOo=r(IIe," \u2014 "),hz=n(IIe,"A",{href:!0});var xwt=s(hz);ZOo=r(xwt,"TapasForMaskedLM"),xwt.forEach(t),eVo=r(IIe," (TAPAS model)"),IIe.forEach(t),oVo=i(Y),J4=n(Y,"LI",{});var NIe=s(J4);Nue=n(NIe,"STRONG",{});var $wt=s(Nue);rVo=r($wt,"wav2vec2"),$wt.forEach(t),tVo=r(NIe," \u2014 "),que=n(NIe,"CODE",{});var kwt=s(que);aVo=r(kwt,"Wav2Vec2ForMaskedLM"),kwt.forEach(t),nVo=r(NIe," (Wav2Vec2 model)"),NIe.forEach(t),sVo=i(Y),Y4=n(Y,"LI",{});var qIe=s(Y4);jue=n(qIe,"STRONG",{});var Swt=s(jue);lVo=r(Swt,"xlm"),Swt.forEach(t),iVo=r(qIe," \u2014 "),pz=n(qIe,"A",{href:!0});var Rwt=s(pz);dVo=r(Rwt,"XLMWithLMHeadModel"),Rwt.forEach(t),cVo=r(qIe," (XLM model)"),qIe.forEach(t),fVo=i(Y),K4=n(Y,"LI",{});var jIe=s(K4);Due=n(jIe,"STRONG",{});var Pwt=s(Due);mVo=r(Pwt,"xlm-roberta"),Pwt.forEach(t),gVo=r(jIe," \u2014 "),_z=n(jIe,"A",{href:!0});var Bwt=s(_z);hVo=r(Bwt,"XLMRobertaForMaskedLM"),Bwt.forEach(t),pVo=r(jIe," (XLM-RoBERTa model)"),jIe.forEach(t),_Vo=i(Y),Z4=n(Y,"LI",{});var DIe=s(Z4);Gue=n(DIe,"STRONG",{});var Iwt=s(Gue);uVo=r(Iwt,"xlm-roberta-xl"),Iwt.forEach(t),bVo=r(DIe," \u2014 "),uz=n(DIe,"A",{href:!0});var Nwt=s(uz);vVo=r(Nwt,"XLMRobertaXLForMaskedLM"),Nwt.forEach(t),FVo=r(DIe," (XLM-RoBERTa-XL model)"),DIe.forEach(t),TVo=i(Y),eb=n(Y,"LI",{});var GIe=s(eb);Oue=n(GIe,"STRONG",{});var qwt=s(Oue);MVo=r(qwt,"yoso"),qwt.forEach(t),EVo=r(GIe," \u2014 "),bz=n(GIe,"A",{href:!0});var jwt=s(bz);CVo=r(jwt,"YosoForMaskedLM"),jwt.forEach(t),wVo=r(GIe," (YOSO model)"),GIe.forEach(t),Y.forEach(t),AVo=i(_a),ob=n(_a,"P",{});var OIe=s(ob);LVo=r(OIe,"The model is set in evaluation mode by default using "),Vue=n(OIe,"CODE",{});var Dwt=s(Vue);yVo=r(Dwt,"model.eval()"),Dwt.forEach(t),xVo=r(OIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=n(OIe,"CODE",{});var Gwt=s(Xue);$Vo=r(Gwt,"model.train()"),Gwt.forEach(t),OIe.forEach(t),kVo=i(_a),T(rb.$$.fragment,_a),_a.forEach(t),Fl.forEach(t),cUe=i(f),ud=n(f,"H2",{class:!0});var FJe=s(ud);tb=n(FJe,"A",{id:!0,class:!0,href:!0});var Owt=s(tb);zue=n(Owt,"SPAN",{});var Vwt=s(zue);T(n9.$$.fragment,Vwt),Vwt.forEach(t),Owt.forEach(t),SVo=i(FJe),Wue=n(FJe,"SPAN",{});var Xwt=s(Wue);RVo=r(Xwt,"AutoModelForSeq2SeqLM"),Xwt.forEach(t),FJe.forEach(t),fUe=i(f),Io=n(f,"DIV",{class:!0});var Tl=s(Io);T(s9.$$.fragment,Tl),PVo=i(Tl),bd=n(Tl,"P",{});var ene=s(bd);BVo=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vz=n(ene,"A",{href:!0});var zwt=s(vz);IVo=r(zwt,"from_pretrained()"),zwt.forEach(t),NVo=r(ene," class method or the "),Fz=n(ene,"A",{href:!0});var Wwt=s(Fz);qVo=r(Wwt,"from_config()"),Wwt.forEach(t),jVo=r(ene,` class
method.`),ene.forEach(t),DVo=i(Tl),l9=n(Tl,"P",{});var TJe=s(l9);GVo=r(TJe,"This class cannot be instantiated directly using "),Que=n(TJe,"CODE",{});var Qwt=s(Que);OVo=r(Qwt,"__init__()"),Qwt.forEach(t),VVo=r(TJe," (throws an error)."),TJe.forEach(t),XVo=i(Tl),_t=n(Tl,"DIV",{class:!0});var FL=s(_t);T(i9.$$.fragment,FL),zVo=i(FL),Uue=n(FL,"P",{});var Uwt=s(Uue);WVo=r(Uwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Uwt.forEach(t),QVo=i(FL),vd=n(FL,"P",{});var one=s(vd);UVo=r(one,`Note:
Loading a model from its configuration file does `),Hue=n(one,"STRONG",{});var Hwt=s(Hue);HVo=r(Hwt,"not"),Hwt.forEach(t),JVo=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(one,"A",{href:!0});var Jwt=s(Tz);YVo=r(Jwt,"from_pretrained()"),Jwt.forEach(t),KVo=r(one," to load the model weights."),one.forEach(t),ZVo=i(FL),T(ab.$$.fragment,FL),FL.forEach(t),eXo=i(Tl),oo=n(Tl,"DIV",{class:!0});var ua=s(oo);T(d9.$$.fragment,ua),oXo=i(ua),Jue=n(ua,"P",{});var Ywt=s(Jue);rXo=r(Ywt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ywt.forEach(t),tXo=i(ua),Qa=n(ua,"P",{});var TL=s(Qa);aXo=r(TL,"The model class to instantiate is selected based on the "),Yue=n(TL,"CODE",{});var Kwt=s(Yue);nXo=r(Kwt,"model_type"),Kwt.forEach(t),sXo=r(TL,` property of the config object (either
passed as an argument or loaded from `),Kue=n(TL,"CODE",{});var Zwt=s(Kue);lXo=r(Zwt,"pretrained_model_name_or_path"),Zwt.forEach(t),iXo=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(TL,"CODE",{});var e6t=s(Zue);dXo=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),cXo=r(TL,":"),TL.forEach(t),fXo=i(ua),me=n(ua,"UL",{});var ue=s(me);nb=n(ue,"LI",{});var VIe=s(nb);e2e=n(VIe,"STRONG",{});var o6t=s(e2e);mXo=r(o6t,"bart"),o6t.forEach(t),gXo=r(VIe," \u2014 "),Mz=n(VIe,"A",{href:!0});var r6t=s(Mz);hXo=r(r6t,"BartForConditionalGeneration"),r6t.forEach(t),pXo=r(VIe," (BART model)"),VIe.forEach(t),_Xo=i(ue),sb=n(ue,"LI",{});var XIe=s(sb);o2e=n(XIe,"STRONG",{});var t6t=s(o2e);uXo=r(t6t,"bigbird_pegasus"),t6t.forEach(t),bXo=r(XIe," \u2014 "),Ez=n(XIe,"A",{href:!0});var a6t=s(Ez);vXo=r(a6t,"BigBirdPegasusForConditionalGeneration"),a6t.forEach(t),FXo=r(XIe," (BigBird-Pegasus model)"),XIe.forEach(t),TXo=i(ue),lb=n(ue,"LI",{});var zIe=s(lb);r2e=n(zIe,"STRONG",{});var n6t=s(r2e);MXo=r(n6t,"blenderbot"),n6t.forEach(t),EXo=r(zIe," \u2014 "),Cz=n(zIe,"A",{href:!0});var s6t=s(Cz);CXo=r(s6t,"BlenderbotForConditionalGeneration"),s6t.forEach(t),wXo=r(zIe," (Blenderbot model)"),zIe.forEach(t),AXo=i(ue),ib=n(ue,"LI",{});var WIe=s(ib);t2e=n(WIe,"STRONG",{});var l6t=s(t2e);LXo=r(l6t,"blenderbot-small"),l6t.forEach(t),yXo=r(WIe," \u2014 "),wz=n(WIe,"A",{href:!0});var i6t=s(wz);xXo=r(i6t,"BlenderbotSmallForConditionalGeneration"),i6t.forEach(t),$Xo=r(WIe," (BlenderbotSmall model)"),WIe.forEach(t),kXo=i(ue),db=n(ue,"LI",{});var QIe=s(db);a2e=n(QIe,"STRONG",{});var d6t=s(a2e);SXo=r(d6t,"encoder-decoder"),d6t.forEach(t),RXo=r(QIe," \u2014 "),Az=n(QIe,"A",{href:!0});var c6t=s(Az);PXo=r(c6t,"EncoderDecoderModel"),c6t.forEach(t),BXo=r(QIe," (Encoder decoder model)"),QIe.forEach(t),IXo=i(ue),cb=n(ue,"LI",{});var UIe=s(cb);n2e=n(UIe,"STRONG",{});var f6t=s(n2e);NXo=r(f6t,"fsmt"),f6t.forEach(t),qXo=r(UIe," \u2014 "),Lz=n(UIe,"A",{href:!0});var m6t=s(Lz);jXo=r(m6t,"FSMTForConditionalGeneration"),m6t.forEach(t),DXo=r(UIe," (FairSeq Machine-Translation model)"),UIe.forEach(t),GXo=i(ue),fb=n(ue,"LI",{});var HIe=s(fb);s2e=n(HIe,"STRONG",{});var g6t=s(s2e);OXo=r(g6t,"led"),g6t.forEach(t),VXo=r(HIe," \u2014 "),yz=n(HIe,"A",{href:!0});var h6t=s(yz);XXo=r(h6t,"LEDForConditionalGeneration"),h6t.forEach(t),zXo=r(HIe," (LED model)"),HIe.forEach(t),WXo=i(ue),mb=n(ue,"LI",{});var JIe=s(mb);l2e=n(JIe,"STRONG",{});var p6t=s(l2e);QXo=r(p6t,"longt5"),p6t.forEach(t),UXo=r(JIe," \u2014 "),xz=n(JIe,"A",{href:!0});var _6t=s(xz);HXo=r(_6t,"LongT5ForConditionalGeneration"),_6t.forEach(t),JXo=r(JIe," (LongT5 model)"),JIe.forEach(t),YXo=i(ue),gb=n(ue,"LI",{});var YIe=s(gb);i2e=n(YIe,"STRONG",{});var u6t=s(i2e);KXo=r(u6t,"m2m_100"),u6t.forEach(t),ZXo=r(YIe," \u2014 "),$z=n(YIe,"A",{href:!0});var b6t=s($z);ezo=r(b6t,"M2M100ForConditionalGeneration"),b6t.forEach(t),ozo=r(YIe," (M2M100 model)"),YIe.forEach(t),rzo=i(ue),hb=n(ue,"LI",{});var KIe=s(hb);d2e=n(KIe,"STRONG",{});var v6t=s(d2e);tzo=r(v6t,"marian"),v6t.forEach(t),azo=r(KIe," \u2014 "),kz=n(KIe,"A",{href:!0});var F6t=s(kz);nzo=r(F6t,"MarianMTModel"),F6t.forEach(t),szo=r(KIe," (Marian model)"),KIe.forEach(t),lzo=i(ue),pb=n(ue,"LI",{});var ZIe=s(pb);c2e=n(ZIe,"STRONG",{});var T6t=s(c2e);izo=r(T6t,"mbart"),T6t.forEach(t),dzo=r(ZIe," \u2014 "),Sz=n(ZIe,"A",{href:!0});var M6t=s(Sz);czo=r(M6t,"MBartForConditionalGeneration"),M6t.forEach(t),fzo=r(ZIe," (mBART model)"),ZIe.forEach(t),mzo=i(ue),_b=n(ue,"LI",{});var eNe=s(_b);f2e=n(eNe,"STRONG",{});var E6t=s(f2e);gzo=r(E6t,"mt5"),E6t.forEach(t),hzo=r(eNe," \u2014 "),Rz=n(eNe,"A",{href:!0});var C6t=s(Rz);pzo=r(C6t,"MT5ForConditionalGeneration"),C6t.forEach(t),_zo=r(eNe," (MT5 model)"),eNe.forEach(t),uzo=i(ue),ub=n(ue,"LI",{});var oNe=s(ub);m2e=n(oNe,"STRONG",{});var w6t=s(m2e);bzo=r(w6t,"mvp"),w6t.forEach(t),vzo=r(oNe," \u2014 "),Pz=n(oNe,"A",{href:!0});var A6t=s(Pz);Fzo=r(A6t,"MvpForConditionalGeneration"),A6t.forEach(t),Tzo=r(oNe," (MVP model)"),oNe.forEach(t),Mzo=i(ue),bb=n(ue,"LI",{});var rNe=s(bb);g2e=n(rNe,"STRONG",{});var L6t=s(g2e);Ezo=r(L6t,"nllb"),L6t.forEach(t),Czo=r(rNe," \u2014 "),Bz=n(rNe,"A",{href:!0});var y6t=s(Bz);wzo=r(y6t,"M2M100ForConditionalGeneration"),y6t.forEach(t),Azo=r(rNe," (NLLB model)"),rNe.forEach(t),Lzo=i(ue),vb=n(ue,"LI",{});var tNe=s(vb);h2e=n(tNe,"STRONG",{});var x6t=s(h2e);yzo=r(x6t,"pegasus"),x6t.forEach(t),xzo=r(tNe," \u2014 "),Iz=n(tNe,"A",{href:!0});var $6t=s(Iz);$zo=r($6t,"PegasusForConditionalGeneration"),$6t.forEach(t),kzo=r(tNe," (Pegasus model)"),tNe.forEach(t),Szo=i(ue),Fb=n(ue,"LI",{});var aNe=s(Fb);p2e=n(aNe,"STRONG",{});var k6t=s(p2e);Rzo=r(k6t,"plbart"),k6t.forEach(t),Pzo=r(aNe," \u2014 "),Nz=n(aNe,"A",{href:!0});var S6t=s(Nz);Bzo=r(S6t,"PLBartForConditionalGeneration"),S6t.forEach(t),Izo=r(aNe," (PLBart model)"),aNe.forEach(t),Nzo=i(ue),Tb=n(ue,"LI",{});var nNe=s(Tb);_2e=n(nNe,"STRONG",{});var R6t=s(_2e);qzo=r(R6t,"prophetnet"),R6t.forEach(t),jzo=r(nNe," \u2014 "),qz=n(nNe,"A",{href:!0});var P6t=s(qz);Dzo=r(P6t,"ProphetNetForConditionalGeneration"),P6t.forEach(t),Gzo=r(nNe," (ProphetNet model)"),nNe.forEach(t),Ozo=i(ue),Mb=n(ue,"LI",{});var sNe=s(Mb);u2e=n(sNe,"STRONG",{});var B6t=s(u2e);Vzo=r(B6t,"t5"),B6t.forEach(t),Xzo=r(sNe," \u2014 "),jz=n(sNe,"A",{href:!0});var I6t=s(jz);zzo=r(I6t,"T5ForConditionalGeneration"),I6t.forEach(t),Wzo=r(sNe," (T5 model)"),sNe.forEach(t),Qzo=i(ue),Eb=n(ue,"LI",{});var lNe=s(Eb);b2e=n(lNe,"STRONG",{});var N6t=s(b2e);Uzo=r(N6t,"xlm-prophetnet"),N6t.forEach(t),Hzo=r(lNe," \u2014 "),Dz=n(lNe,"A",{href:!0});var q6t=s(Dz);Jzo=r(q6t,"XLMProphetNetForConditionalGeneration"),q6t.forEach(t),Yzo=r(lNe," (XLM-ProphetNet model)"),lNe.forEach(t),ue.forEach(t),Kzo=i(ua),Cb=n(ua,"P",{});var iNe=s(Cb);Zzo=r(iNe,"The model is set in evaluation mode by default using "),v2e=n(iNe,"CODE",{});var j6t=s(v2e);eWo=r(j6t,"model.eval()"),j6t.forEach(t),oWo=r(iNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=n(iNe,"CODE",{});var D6t=s(F2e);rWo=r(D6t,"model.train()"),D6t.forEach(t),iNe.forEach(t),tWo=i(ua),T(wb.$$.fragment,ua),ua.forEach(t),Tl.forEach(t),mUe=i(f),Fd=n(f,"H2",{class:!0});var MJe=s(Fd);Ab=n(MJe,"A",{id:!0,class:!0,href:!0});var G6t=s(Ab);T2e=n(G6t,"SPAN",{});var O6t=s(T2e);T(c9.$$.fragment,O6t),O6t.forEach(t),G6t.forEach(t),aWo=i(MJe),M2e=n(MJe,"SPAN",{});var V6t=s(M2e);nWo=r(V6t,"AutoModelForSequenceClassification"),V6t.forEach(t),MJe.forEach(t),gUe=i(f),No=n(f,"DIV",{class:!0});var Ml=s(No);T(f9.$$.fragment,Ml),sWo=i(Ml),Td=n(Ml,"P",{});var rne=s(Td);lWo=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gz=n(rne,"A",{href:!0});var X6t=s(Gz);iWo=r(X6t,"from_pretrained()"),X6t.forEach(t),dWo=r(rne," class method or the "),Oz=n(rne,"A",{href:!0});var z6t=s(Oz);cWo=r(z6t,"from_config()"),z6t.forEach(t),fWo=r(rne,` class
method.`),rne.forEach(t),mWo=i(Ml),m9=n(Ml,"P",{});var EJe=s(m9);gWo=r(EJe,"This class cannot be instantiated directly using "),E2e=n(EJe,"CODE",{});var W6t=s(E2e);hWo=r(W6t,"__init__()"),W6t.forEach(t),pWo=r(EJe," (throws an error)."),EJe.forEach(t),_Wo=i(Ml),ut=n(Ml,"DIV",{class:!0});var ML=s(ut);T(g9.$$.fragment,ML),uWo=i(ML),C2e=n(ML,"P",{});var Q6t=s(C2e);bWo=r(Q6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q6t.forEach(t),vWo=i(ML),Md=n(ML,"P",{});var tne=s(Md);FWo=r(tne,`Note:
Loading a model from its configuration file does `),w2e=n(tne,"STRONG",{});var U6t=s(w2e);TWo=r(U6t,"not"),U6t.forEach(t),MWo=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(tne,"A",{href:!0});var H6t=s(Vz);EWo=r(H6t,"from_pretrained()"),H6t.forEach(t),CWo=r(tne," to load the model weights."),tne.forEach(t),wWo=i(ML),T(Lb.$$.fragment,ML),ML.forEach(t),AWo=i(Ml),ro=n(Ml,"DIV",{class:!0});var ba=s(ro);T(h9.$$.fragment,ba),LWo=i(ba),A2e=n(ba,"P",{});var J6t=s(A2e);yWo=r(J6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),J6t.forEach(t),xWo=i(ba),Ua=n(ba,"P",{});var EL=s(Ua);$Wo=r(EL,"The model class to instantiate is selected based on the "),L2e=n(EL,"CODE",{});var Y6t=s(L2e);kWo=r(Y6t,"model_type"),Y6t.forEach(t),SWo=r(EL,` property of the config object (either
passed as an argument or loaded from `),y2e=n(EL,"CODE",{});var K6t=s(y2e);RWo=r(K6t,"pretrained_model_name_or_path"),K6t.forEach(t),PWo=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(EL,"CODE",{});var Z6t=s(x2e);BWo=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),IWo=r(EL,":"),EL.forEach(t),NWo=i(ba),N=n(ba,"UL",{});var j=s(N);yb=n(j,"LI",{});var dNe=s(yb);$2e=n(dNe,"STRONG",{});var eAt=s($2e);qWo=r(eAt,"albert"),eAt.forEach(t),jWo=r(dNe," \u2014 "),Xz=n(dNe,"A",{href:!0});var oAt=s(Xz);DWo=r(oAt,"AlbertForSequenceClassification"),oAt.forEach(t),GWo=r(dNe," (ALBERT model)"),dNe.forEach(t),OWo=i(j),xb=n(j,"LI",{});var cNe=s(xb);k2e=n(cNe,"STRONG",{});var rAt=s(k2e);VWo=r(rAt,"bart"),rAt.forEach(t),XWo=r(cNe," \u2014 "),zz=n(cNe,"A",{href:!0});var tAt=s(zz);zWo=r(tAt,"BartForSequenceClassification"),tAt.forEach(t),WWo=r(cNe," (BART model)"),cNe.forEach(t),QWo=i(j),$b=n(j,"LI",{});var fNe=s($b);S2e=n(fNe,"STRONG",{});var aAt=s(S2e);UWo=r(aAt,"bert"),aAt.forEach(t),HWo=r(fNe," \u2014 "),Wz=n(fNe,"A",{href:!0});var nAt=s(Wz);JWo=r(nAt,"BertForSequenceClassification"),nAt.forEach(t),YWo=r(fNe," (BERT model)"),fNe.forEach(t),KWo=i(j),kb=n(j,"LI",{});var mNe=s(kb);R2e=n(mNe,"STRONG",{});var sAt=s(R2e);ZWo=r(sAt,"big_bird"),sAt.forEach(t),eQo=r(mNe," \u2014 "),Qz=n(mNe,"A",{href:!0});var lAt=s(Qz);oQo=r(lAt,"BigBirdForSequenceClassification"),lAt.forEach(t),rQo=r(mNe," (BigBird model)"),mNe.forEach(t),tQo=i(j),Sb=n(j,"LI",{});var gNe=s(Sb);P2e=n(gNe,"STRONG",{});var iAt=s(P2e);aQo=r(iAt,"bigbird_pegasus"),iAt.forEach(t),nQo=r(gNe," \u2014 "),Uz=n(gNe,"A",{href:!0});var dAt=s(Uz);sQo=r(dAt,"BigBirdPegasusForSequenceClassification"),dAt.forEach(t),lQo=r(gNe," (BigBird-Pegasus model)"),gNe.forEach(t),iQo=i(j),Rb=n(j,"LI",{});var hNe=s(Rb);B2e=n(hNe,"STRONG",{});var cAt=s(B2e);dQo=r(cAt,"bloom"),cAt.forEach(t),cQo=r(hNe," \u2014 "),Hz=n(hNe,"A",{href:!0});var fAt=s(Hz);fQo=r(fAt,"BloomForSequenceClassification"),fAt.forEach(t),mQo=r(hNe," (BLOOM model)"),hNe.forEach(t),gQo=i(j),Pb=n(j,"LI",{});var pNe=s(Pb);I2e=n(pNe,"STRONG",{});var mAt=s(I2e);hQo=r(mAt,"camembert"),mAt.forEach(t),pQo=r(pNe," \u2014 "),Jz=n(pNe,"A",{href:!0});var gAt=s(Jz);_Qo=r(gAt,"CamembertForSequenceClassification"),gAt.forEach(t),uQo=r(pNe," (CamemBERT model)"),pNe.forEach(t),bQo=i(j),Bb=n(j,"LI",{});var _Ne=s(Bb);N2e=n(_Ne,"STRONG",{});var hAt=s(N2e);vQo=r(hAt,"canine"),hAt.forEach(t),FQo=r(_Ne," \u2014 "),Yz=n(_Ne,"A",{href:!0});var pAt=s(Yz);TQo=r(pAt,"CanineForSequenceClassification"),pAt.forEach(t),MQo=r(_Ne," (CANINE model)"),_Ne.forEach(t),EQo=i(j),Ib=n(j,"LI",{});var uNe=s(Ib);q2e=n(uNe,"STRONG",{});var _At=s(q2e);CQo=r(_At,"convbert"),_At.forEach(t),wQo=r(uNe," \u2014 "),Kz=n(uNe,"A",{href:!0});var uAt=s(Kz);AQo=r(uAt,"ConvBertForSequenceClassification"),uAt.forEach(t),LQo=r(uNe," (ConvBERT model)"),uNe.forEach(t),yQo=i(j),Nb=n(j,"LI",{});var bNe=s(Nb);j2e=n(bNe,"STRONG",{});var bAt=s(j2e);xQo=r(bAt,"ctrl"),bAt.forEach(t),$Qo=r(bNe," \u2014 "),Zz=n(bNe,"A",{href:!0});var vAt=s(Zz);kQo=r(vAt,"CTRLForSequenceClassification"),vAt.forEach(t),SQo=r(bNe," (CTRL model)"),bNe.forEach(t),RQo=i(j),qb=n(j,"LI",{});var vNe=s(qb);D2e=n(vNe,"STRONG",{});var FAt=s(D2e);PQo=r(FAt,"data2vec-text"),FAt.forEach(t),BQo=r(vNe," \u2014 "),eW=n(vNe,"A",{href:!0});var TAt=s(eW);IQo=r(TAt,"Data2VecTextForSequenceClassification"),TAt.forEach(t),NQo=r(vNe," (Data2VecText model)"),vNe.forEach(t),qQo=i(j),jb=n(j,"LI",{});var FNe=s(jb);G2e=n(FNe,"STRONG",{});var MAt=s(G2e);jQo=r(MAt,"deberta"),MAt.forEach(t),DQo=r(FNe," \u2014 "),oW=n(FNe,"A",{href:!0});var EAt=s(oW);GQo=r(EAt,"DebertaForSequenceClassification"),EAt.forEach(t),OQo=r(FNe," (DeBERTa model)"),FNe.forEach(t),VQo=i(j),Db=n(j,"LI",{});var TNe=s(Db);O2e=n(TNe,"STRONG",{});var CAt=s(O2e);XQo=r(CAt,"deberta-v2"),CAt.forEach(t),zQo=r(TNe," \u2014 "),rW=n(TNe,"A",{href:!0});var wAt=s(rW);WQo=r(wAt,"DebertaV2ForSequenceClassification"),wAt.forEach(t),QQo=r(TNe," (DeBERTa-v2 model)"),TNe.forEach(t),UQo=i(j),Gb=n(j,"LI",{});var MNe=s(Gb);V2e=n(MNe,"STRONG",{});var AAt=s(V2e);HQo=r(AAt,"distilbert"),AAt.forEach(t),JQo=r(MNe," \u2014 "),tW=n(MNe,"A",{href:!0});var LAt=s(tW);YQo=r(LAt,"DistilBertForSequenceClassification"),LAt.forEach(t),KQo=r(MNe," (DistilBERT model)"),MNe.forEach(t),ZQo=i(j),Ob=n(j,"LI",{});var ENe=s(Ob);X2e=n(ENe,"STRONG",{});var yAt=s(X2e);eUo=r(yAt,"electra"),yAt.forEach(t),oUo=r(ENe," \u2014 "),aW=n(ENe,"A",{href:!0});var xAt=s(aW);rUo=r(xAt,"ElectraForSequenceClassification"),xAt.forEach(t),tUo=r(ENe," (ELECTRA model)"),ENe.forEach(t),aUo=i(j),Vb=n(j,"LI",{});var CNe=s(Vb);z2e=n(CNe,"STRONG",{});var $At=s(z2e);nUo=r($At,"flaubert"),$At.forEach(t),sUo=r(CNe," \u2014 "),nW=n(CNe,"A",{href:!0});var kAt=s(nW);lUo=r(kAt,"FlaubertForSequenceClassification"),kAt.forEach(t),iUo=r(CNe," (FlauBERT model)"),CNe.forEach(t),dUo=i(j),Xb=n(j,"LI",{});var wNe=s(Xb);W2e=n(wNe,"STRONG",{});var SAt=s(W2e);cUo=r(SAt,"fnet"),SAt.forEach(t),fUo=r(wNe," \u2014 "),sW=n(wNe,"A",{href:!0});var RAt=s(sW);mUo=r(RAt,"FNetForSequenceClassification"),RAt.forEach(t),gUo=r(wNe," (FNet model)"),wNe.forEach(t),hUo=i(j),zb=n(j,"LI",{});var ANe=s(zb);Q2e=n(ANe,"STRONG",{});var PAt=s(Q2e);pUo=r(PAt,"funnel"),PAt.forEach(t),_Uo=r(ANe," \u2014 "),lW=n(ANe,"A",{href:!0});var BAt=s(lW);uUo=r(BAt,"FunnelForSequenceClassification"),BAt.forEach(t),bUo=r(ANe," (Funnel Transformer model)"),ANe.forEach(t),vUo=i(j),Wb=n(j,"LI",{});var LNe=s(Wb);U2e=n(LNe,"STRONG",{});var IAt=s(U2e);FUo=r(IAt,"gpt2"),IAt.forEach(t),TUo=r(LNe," \u2014 "),iW=n(LNe,"A",{href:!0});var NAt=s(iW);MUo=r(NAt,"GPT2ForSequenceClassification"),NAt.forEach(t),EUo=r(LNe," (OpenAI GPT-2 model)"),LNe.forEach(t),CUo=i(j),Qb=n(j,"LI",{});var yNe=s(Qb);H2e=n(yNe,"STRONG",{});var qAt=s(H2e);wUo=r(qAt,"gpt_neo"),qAt.forEach(t),AUo=r(yNe," \u2014 "),dW=n(yNe,"A",{href:!0});var jAt=s(dW);LUo=r(jAt,"GPTNeoForSequenceClassification"),jAt.forEach(t),yUo=r(yNe," (GPT Neo model)"),yNe.forEach(t),xUo=i(j),Ub=n(j,"LI",{});var xNe=s(Ub);J2e=n(xNe,"STRONG",{});var DAt=s(J2e);$Uo=r(DAt,"gptj"),DAt.forEach(t),kUo=r(xNe," \u2014 "),cW=n(xNe,"A",{href:!0});var GAt=s(cW);SUo=r(GAt,"GPTJForSequenceClassification"),GAt.forEach(t),RUo=r(xNe," (GPT-J model)"),xNe.forEach(t),PUo=i(j),Hb=n(j,"LI",{});var $Ne=s(Hb);Y2e=n($Ne,"STRONG",{});var OAt=s(Y2e);BUo=r(OAt,"ibert"),OAt.forEach(t),IUo=r($Ne," \u2014 "),fW=n($Ne,"A",{href:!0});var VAt=s(fW);NUo=r(VAt,"IBertForSequenceClassification"),VAt.forEach(t),qUo=r($Ne," (I-BERT model)"),$Ne.forEach(t),jUo=i(j),Jb=n(j,"LI",{});var kNe=s(Jb);K2e=n(kNe,"STRONG",{});var XAt=s(K2e);DUo=r(XAt,"layoutlm"),XAt.forEach(t),GUo=r(kNe," \u2014 "),mW=n(kNe,"A",{href:!0});var zAt=s(mW);OUo=r(zAt,"LayoutLMForSequenceClassification"),zAt.forEach(t),VUo=r(kNe," (LayoutLM model)"),kNe.forEach(t),XUo=i(j),Yb=n(j,"LI",{});var SNe=s(Yb);Z2e=n(SNe,"STRONG",{});var WAt=s(Z2e);zUo=r(WAt,"layoutlmv2"),WAt.forEach(t),WUo=r(SNe," \u2014 "),gW=n(SNe,"A",{href:!0});var QAt=s(gW);QUo=r(QAt,"LayoutLMv2ForSequenceClassification"),QAt.forEach(t),UUo=r(SNe," (LayoutLMv2 model)"),SNe.forEach(t),HUo=i(j),Kb=n(j,"LI",{});var RNe=s(Kb);e1e=n(RNe,"STRONG",{});var UAt=s(e1e);JUo=r(UAt,"layoutlmv3"),UAt.forEach(t),YUo=r(RNe," \u2014 "),hW=n(RNe,"A",{href:!0});var HAt=s(hW);KUo=r(HAt,"LayoutLMv3ForSequenceClassification"),HAt.forEach(t),ZUo=r(RNe," (LayoutLMv3 model)"),RNe.forEach(t),eHo=i(j),Zb=n(j,"LI",{});var PNe=s(Zb);o1e=n(PNe,"STRONG",{});var JAt=s(o1e);oHo=r(JAt,"led"),JAt.forEach(t),rHo=r(PNe," \u2014 "),pW=n(PNe,"A",{href:!0});var YAt=s(pW);tHo=r(YAt,"LEDForSequenceClassification"),YAt.forEach(t),aHo=r(PNe," (LED model)"),PNe.forEach(t),nHo=i(j),ev=n(j,"LI",{});var BNe=s(ev);r1e=n(BNe,"STRONG",{});var KAt=s(r1e);sHo=r(KAt,"longformer"),KAt.forEach(t),lHo=r(BNe," \u2014 "),_W=n(BNe,"A",{href:!0});var ZAt=s(_W);iHo=r(ZAt,"LongformerForSequenceClassification"),ZAt.forEach(t),dHo=r(BNe," (Longformer model)"),BNe.forEach(t),cHo=i(j),ov=n(j,"LI",{});var INe=s(ov);t1e=n(INe,"STRONG",{});var eLt=s(t1e);fHo=r(eLt,"luke"),eLt.forEach(t),mHo=r(INe," \u2014 "),uW=n(INe,"A",{href:!0});var oLt=s(uW);gHo=r(oLt,"LukeForSequenceClassification"),oLt.forEach(t),hHo=r(INe," (LUKE model)"),INe.forEach(t),pHo=i(j),rv=n(j,"LI",{});var NNe=s(rv);a1e=n(NNe,"STRONG",{});var rLt=s(a1e);_Ho=r(rLt,"mbart"),rLt.forEach(t),uHo=r(NNe," \u2014 "),bW=n(NNe,"A",{href:!0});var tLt=s(bW);bHo=r(tLt,"MBartForSequenceClassification"),tLt.forEach(t),vHo=r(NNe," (mBART model)"),NNe.forEach(t),FHo=i(j),tv=n(j,"LI",{});var qNe=s(tv);n1e=n(qNe,"STRONG",{});var aLt=s(n1e);THo=r(aLt,"megatron-bert"),aLt.forEach(t),MHo=r(qNe," \u2014 "),vW=n(qNe,"A",{href:!0});var nLt=s(vW);EHo=r(nLt,"MegatronBertForSequenceClassification"),nLt.forEach(t),CHo=r(qNe," (Megatron-BERT model)"),qNe.forEach(t),wHo=i(j),av=n(j,"LI",{});var jNe=s(av);s1e=n(jNe,"STRONG",{});var sLt=s(s1e);AHo=r(sLt,"mobilebert"),sLt.forEach(t),LHo=r(jNe," \u2014 "),FW=n(jNe,"A",{href:!0});var lLt=s(FW);yHo=r(lLt,"MobileBertForSequenceClassification"),lLt.forEach(t),xHo=r(jNe," (MobileBERT model)"),jNe.forEach(t),$Ho=i(j),nv=n(j,"LI",{});var DNe=s(nv);l1e=n(DNe,"STRONG",{});var iLt=s(l1e);kHo=r(iLt,"mpnet"),iLt.forEach(t),SHo=r(DNe," \u2014 "),TW=n(DNe,"A",{href:!0});var dLt=s(TW);RHo=r(dLt,"MPNetForSequenceClassification"),dLt.forEach(t),PHo=r(DNe," (MPNet model)"),DNe.forEach(t),BHo=i(j),sv=n(j,"LI",{});var GNe=s(sv);i1e=n(GNe,"STRONG",{});var cLt=s(i1e);IHo=r(cLt,"mvp"),cLt.forEach(t),NHo=r(GNe," \u2014 "),MW=n(GNe,"A",{href:!0});var fLt=s(MW);qHo=r(fLt,"MvpForSequenceClassification"),fLt.forEach(t),jHo=r(GNe," (MVP model)"),GNe.forEach(t),DHo=i(j),lv=n(j,"LI",{});var ONe=s(lv);d1e=n(ONe,"STRONG",{});var mLt=s(d1e);GHo=r(mLt,"nezha"),mLt.forEach(t),OHo=r(ONe," \u2014 "),EW=n(ONe,"A",{href:!0});var gLt=s(EW);VHo=r(gLt,"NezhaForSequenceClassification"),gLt.forEach(t),XHo=r(ONe," (Nezha model)"),ONe.forEach(t),zHo=i(j),iv=n(j,"LI",{});var VNe=s(iv);c1e=n(VNe,"STRONG",{});var hLt=s(c1e);WHo=r(hLt,"nystromformer"),hLt.forEach(t),QHo=r(VNe," \u2014 "),CW=n(VNe,"A",{href:!0});var pLt=s(CW);UHo=r(pLt,"NystromformerForSequenceClassification"),pLt.forEach(t),HHo=r(VNe," (Nystr\xF6mformer model)"),VNe.forEach(t),JHo=i(j),dv=n(j,"LI",{});var XNe=s(dv);f1e=n(XNe,"STRONG",{});var _Lt=s(f1e);YHo=r(_Lt,"openai-gpt"),_Lt.forEach(t),KHo=r(XNe," \u2014 "),wW=n(XNe,"A",{href:!0});var uLt=s(wW);ZHo=r(uLt,"OpenAIGPTForSequenceClassification"),uLt.forEach(t),eJo=r(XNe," (OpenAI GPT model)"),XNe.forEach(t),oJo=i(j),cv=n(j,"LI",{});var zNe=s(cv);m1e=n(zNe,"STRONG",{});var bLt=s(m1e);rJo=r(bLt,"opt"),bLt.forEach(t),tJo=r(zNe," \u2014 "),AW=n(zNe,"A",{href:!0});var vLt=s(AW);aJo=r(vLt,"OPTForSequenceClassification"),vLt.forEach(t),nJo=r(zNe," (OPT model)"),zNe.forEach(t),sJo=i(j),fv=n(j,"LI",{});var WNe=s(fv);g1e=n(WNe,"STRONG",{});var FLt=s(g1e);lJo=r(FLt,"perceiver"),FLt.forEach(t),iJo=r(WNe," \u2014 "),LW=n(WNe,"A",{href:!0});var TLt=s(LW);dJo=r(TLt,"PerceiverForSequenceClassification"),TLt.forEach(t),cJo=r(WNe," (Perceiver model)"),WNe.forEach(t),fJo=i(j),mv=n(j,"LI",{});var QNe=s(mv);h1e=n(QNe,"STRONG",{});var MLt=s(h1e);mJo=r(MLt,"plbart"),MLt.forEach(t),gJo=r(QNe," \u2014 "),yW=n(QNe,"A",{href:!0});var ELt=s(yW);hJo=r(ELt,"PLBartForSequenceClassification"),ELt.forEach(t),pJo=r(QNe," (PLBart model)"),QNe.forEach(t),_Jo=i(j),gv=n(j,"LI",{});var UNe=s(gv);p1e=n(UNe,"STRONG",{});var CLt=s(p1e);uJo=r(CLt,"qdqbert"),CLt.forEach(t),bJo=r(UNe," \u2014 "),xW=n(UNe,"A",{href:!0});var wLt=s(xW);vJo=r(wLt,"QDQBertForSequenceClassification"),wLt.forEach(t),FJo=r(UNe," (QDQBert model)"),UNe.forEach(t),TJo=i(j),hv=n(j,"LI",{});var HNe=s(hv);_1e=n(HNe,"STRONG",{});var ALt=s(_1e);MJo=r(ALt,"reformer"),ALt.forEach(t),EJo=r(HNe," \u2014 "),$W=n(HNe,"A",{href:!0});var LLt=s($W);CJo=r(LLt,"ReformerForSequenceClassification"),LLt.forEach(t),wJo=r(HNe," (Reformer model)"),HNe.forEach(t),AJo=i(j),pv=n(j,"LI",{});var JNe=s(pv);u1e=n(JNe,"STRONG",{});var yLt=s(u1e);LJo=r(yLt,"rembert"),yLt.forEach(t),yJo=r(JNe," \u2014 "),kW=n(JNe,"A",{href:!0});var xLt=s(kW);xJo=r(xLt,"RemBertForSequenceClassification"),xLt.forEach(t),$Jo=r(JNe," (RemBERT model)"),JNe.forEach(t),kJo=i(j),_v=n(j,"LI",{});var YNe=s(_v);b1e=n(YNe,"STRONG",{});var $Lt=s(b1e);SJo=r($Lt,"roberta"),$Lt.forEach(t),RJo=r(YNe," \u2014 "),SW=n(YNe,"A",{href:!0});var kLt=s(SW);PJo=r(kLt,"RobertaForSequenceClassification"),kLt.forEach(t),BJo=r(YNe," (RoBERTa model)"),YNe.forEach(t),IJo=i(j),uv=n(j,"LI",{});var KNe=s(uv);v1e=n(KNe,"STRONG",{});var SLt=s(v1e);NJo=r(SLt,"roformer"),SLt.forEach(t),qJo=r(KNe," \u2014 "),RW=n(KNe,"A",{href:!0});var RLt=s(RW);jJo=r(RLt,"RoFormerForSequenceClassification"),RLt.forEach(t),DJo=r(KNe," (RoFormer model)"),KNe.forEach(t),GJo=i(j),bv=n(j,"LI",{});var ZNe=s(bv);F1e=n(ZNe,"STRONG",{});var PLt=s(F1e);OJo=r(PLt,"squeezebert"),PLt.forEach(t),VJo=r(ZNe," \u2014 "),PW=n(ZNe,"A",{href:!0});var BLt=s(PW);XJo=r(BLt,"SqueezeBertForSequenceClassification"),BLt.forEach(t),zJo=r(ZNe," (SqueezeBERT model)"),ZNe.forEach(t),WJo=i(j),vv=n(j,"LI",{});var eqe=s(vv);T1e=n(eqe,"STRONG",{});var ILt=s(T1e);QJo=r(ILt,"tapas"),ILt.forEach(t),UJo=r(eqe," \u2014 "),BW=n(eqe,"A",{href:!0});var NLt=s(BW);HJo=r(NLt,"TapasForSequenceClassification"),NLt.forEach(t),JJo=r(eqe," (TAPAS model)"),eqe.forEach(t),YJo=i(j),Fv=n(j,"LI",{});var oqe=s(Fv);M1e=n(oqe,"STRONG",{});var qLt=s(M1e);KJo=r(qLt,"transfo-xl"),qLt.forEach(t),ZJo=r(oqe," \u2014 "),IW=n(oqe,"A",{href:!0});var jLt=s(IW);eYo=r(jLt,"TransfoXLForSequenceClassification"),jLt.forEach(t),oYo=r(oqe," (Transformer-XL model)"),oqe.forEach(t),rYo=i(j),Tv=n(j,"LI",{});var rqe=s(Tv);E1e=n(rqe,"STRONG",{});var DLt=s(E1e);tYo=r(DLt,"xlm"),DLt.forEach(t),aYo=r(rqe," \u2014 "),NW=n(rqe,"A",{href:!0});var GLt=s(NW);nYo=r(GLt,"XLMForSequenceClassification"),GLt.forEach(t),sYo=r(rqe," (XLM model)"),rqe.forEach(t),lYo=i(j),Mv=n(j,"LI",{});var tqe=s(Mv);C1e=n(tqe,"STRONG",{});var OLt=s(C1e);iYo=r(OLt,"xlm-roberta"),OLt.forEach(t),dYo=r(tqe," \u2014 "),qW=n(tqe,"A",{href:!0});var VLt=s(qW);cYo=r(VLt,"XLMRobertaForSequenceClassification"),VLt.forEach(t),fYo=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),mYo=i(j),Ev=n(j,"LI",{});var aqe=s(Ev);w1e=n(aqe,"STRONG",{});var XLt=s(w1e);gYo=r(XLt,"xlm-roberta-xl"),XLt.forEach(t),hYo=r(aqe," \u2014 "),jW=n(aqe,"A",{href:!0});var zLt=s(jW);pYo=r(zLt,"XLMRobertaXLForSequenceClassification"),zLt.forEach(t),_Yo=r(aqe," (XLM-RoBERTa-XL model)"),aqe.forEach(t),uYo=i(j),Cv=n(j,"LI",{});var nqe=s(Cv);A1e=n(nqe,"STRONG",{});var WLt=s(A1e);bYo=r(WLt,"xlnet"),WLt.forEach(t),vYo=r(nqe," \u2014 "),DW=n(nqe,"A",{href:!0});var QLt=s(DW);FYo=r(QLt,"XLNetForSequenceClassification"),QLt.forEach(t),TYo=r(nqe," (XLNet model)"),nqe.forEach(t),MYo=i(j),wv=n(j,"LI",{});var sqe=s(wv);L1e=n(sqe,"STRONG",{});var ULt=s(L1e);EYo=r(ULt,"yoso"),ULt.forEach(t),CYo=r(sqe," \u2014 "),GW=n(sqe,"A",{href:!0});var HLt=s(GW);wYo=r(HLt,"YosoForSequenceClassification"),HLt.forEach(t),AYo=r(sqe," (YOSO model)"),sqe.forEach(t),j.forEach(t),LYo=i(ba),Av=n(ba,"P",{});var lqe=s(Av);yYo=r(lqe,"The model is set in evaluation mode by default using "),y1e=n(lqe,"CODE",{});var JLt=s(y1e);xYo=r(JLt,"model.eval()"),JLt.forEach(t),$Yo=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=n(lqe,"CODE",{});var YLt=s(x1e);kYo=r(YLt,"model.train()"),YLt.forEach(t),lqe.forEach(t),SYo=i(ba),T(Lv.$$.fragment,ba),ba.forEach(t),Ml.forEach(t),hUe=i(f),Ed=n(f,"H2",{class:!0});var CJe=s(Ed);yv=n(CJe,"A",{id:!0,class:!0,href:!0});var KLt=s(yv);$1e=n(KLt,"SPAN",{});var ZLt=s($1e);T(p9.$$.fragment,ZLt),ZLt.forEach(t),KLt.forEach(t),RYo=i(CJe),k1e=n(CJe,"SPAN",{});var eyt=s(k1e);PYo=r(eyt,"AutoModelForMultipleChoice"),eyt.forEach(t),CJe.forEach(t),pUe=i(f),qo=n(f,"DIV",{class:!0});var El=s(qo);T(_9.$$.fragment,El),BYo=i(El),Cd=n(El,"P",{});var ane=s(Cd);IYo=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OW=n(ane,"A",{href:!0});var oyt=s(OW);NYo=r(oyt,"from_pretrained()"),oyt.forEach(t),qYo=r(ane," class method or the "),VW=n(ane,"A",{href:!0});var ryt=s(VW);jYo=r(ryt,"from_config()"),ryt.forEach(t),DYo=r(ane,` class
method.`),ane.forEach(t),GYo=i(El),u9=n(El,"P",{});var wJe=s(u9);OYo=r(wJe,"This class cannot be instantiated directly using "),S1e=n(wJe,"CODE",{});var tyt=s(S1e);VYo=r(tyt,"__init__()"),tyt.forEach(t),XYo=r(wJe," (throws an error)."),wJe.forEach(t),zYo=i(El),bt=n(El,"DIV",{class:!0});var CL=s(bt);T(b9.$$.fragment,CL),WYo=i(CL),R1e=n(CL,"P",{});var ayt=s(R1e);QYo=r(ayt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ayt.forEach(t),UYo=i(CL),wd=n(CL,"P",{});var nne=s(wd);HYo=r(nne,`Note:
Loading a model from its configuration file does `),P1e=n(nne,"STRONG",{});var nyt=s(P1e);JYo=r(nyt,"not"),nyt.forEach(t),YYo=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(nne,"A",{href:!0});var syt=s(XW);KYo=r(syt,"from_pretrained()"),syt.forEach(t),ZYo=r(nne," to load the model weights."),nne.forEach(t),eKo=i(CL),T(xv.$$.fragment,CL),CL.forEach(t),oKo=i(El),to=n(El,"DIV",{class:!0});var va=s(to);T(v9.$$.fragment,va),rKo=i(va),B1e=n(va,"P",{});var lyt=s(B1e);tKo=r(lyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lyt.forEach(t),aKo=i(va),Ha=n(va,"P",{});var wL=s(Ha);nKo=r(wL,"The model class to instantiate is selected based on the "),I1e=n(wL,"CODE",{});var iyt=s(I1e);sKo=r(iyt,"model_type"),iyt.forEach(t),lKo=r(wL,` property of the config object (either
passed as an argument or loaded from `),N1e=n(wL,"CODE",{});var dyt=s(N1e);iKo=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),dKo=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=n(wL,"CODE",{});var cyt=s(q1e);cKo=r(cyt,"pretrained_model_name_or_path"),cyt.forEach(t),fKo=r(wL,":"),wL.forEach(t),mKo=i(va),Z=n(va,"UL",{});var ee=s(Z);$v=n(ee,"LI",{});var iqe=s($v);j1e=n(iqe,"STRONG",{});var fyt=s(j1e);gKo=r(fyt,"albert"),fyt.forEach(t),hKo=r(iqe," \u2014 "),zW=n(iqe,"A",{href:!0});var myt=s(zW);pKo=r(myt,"AlbertForMultipleChoice"),myt.forEach(t),_Ko=r(iqe," (ALBERT model)"),iqe.forEach(t),uKo=i(ee),kv=n(ee,"LI",{});var dqe=s(kv);D1e=n(dqe,"STRONG",{});var gyt=s(D1e);bKo=r(gyt,"bert"),gyt.forEach(t),vKo=r(dqe," \u2014 "),WW=n(dqe,"A",{href:!0});var hyt=s(WW);FKo=r(hyt,"BertForMultipleChoice"),hyt.forEach(t),TKo=r(dqe," (BERT model)"),dqe.forEach(t),MKo=i(ee),Sv=n(ee,"LI",{});var cqe=s(Sv);G1e=n(cqe,"STRONG",{});var pyt=s(G1e);EKo=r(pyt,"big_bird"),pyt.forEach(t),CKo=r(cqe," \u2014 "),QW=n(cqe,"A",{href:!0});var _yt=s(QW);wKo=r(_yt,"BigBirdForMultipleChoice"),_yt.forEach(t),AKo=r(cqe," (BigBird model)"),cqe.forEach(t),LKo=i(ee),Rv=n(ee,"LI",{});var fqe=s(Rv);O1e=n(fqe,"STRONG",{});var uyt=s(O1e);yKo=r(uyt,"camembert"),uyt.forEach(t),xKo=r(fqe," \u2014 "),UW=n(fqe,"A",{href:!0});var byt=s(UW);$Ko=r(byt,"CamembertForMultipleChoice"),byt.forEach(t),kKo=r(fqe," (CamemBERT model)"),fqe.forEach(t),SKo=i(ee),Pv=n(ee,"LI",{});var mqe=s(Pv);V1e=n(mqe,"STRONG",{});var vyt=s(V1e);RKo=r(vyt,"canine"),vyt.forEach(t),PKo=r(mqe," \u2014 "),HW=n(mqe,"A",{href:!0});var Fyt=s(HW);BKo=r(Fyt,"CanineForMultipleChoice"),Fyt.forEach(t),IKo=r(mqe," (CANINE model)"),mqe.forEach(t),NKo=i(ee),Bv=n(ee,"LI",{});var gqe=s(Bv);X1e=n(gqe,"STRONG",{});var Tyt=s(X1e);qKo=r(Tyt,"convbert"),Tyt.forEach(t),jKo=r(gqe," \u2014 "),JW=n(gqe,"A",{href:!0});var Myt=s(JW);DKo=r(Myt,"ConvBertForMultipleChoice"),Myt.forEach(t),GKo=r(gqe," (ConvBERT model)"),gqe.forEach(t),OKo=i(ee),Iv=n(ee,"LI",{});var hqe=s(Iv);z1e=n(hqe,"STRONG",{});var Eyt=s(z1e);VKo=r(Eyt,"data2vec-text"),Eyt.forEach(t),XKo=r(hqe," \u2014 "),YW=n(hqe,"A",{href:!0});var Cyt=s(YW);zKo=r(Cyt,"Data2VecTextForMultipleChoice"),Cyt.forEach(t),WKo=r(hqe," (Data2VecText model)"),hqe.forEach(t),QKo=i(ee),Nv=n(ee,"LI",{});var pqe=s(Nv);W1e=n(pqe,"STRONG",{});var wyt=s(W1e);UKo=r(wyt,"deberta-v2"),wyt.forEach(t),HKo=r(pqe," \u2014 "),KW=n(pqe,"A",{href:!0});var Ayt=s(KW);JKo=r(Ayt,"DebertaV2ForMultipleChoice"),Ayt.forEach(t),YKo=r(pqe," (DeBERTa-v2 model)"),pqe.forEach(t),KKo=i(ee),qv=n(ee,"LI",{});var _qe=s(qv);Q1e=n(_qe,"STRONG",{});var Lyt=s(Q1e);ZKo=r(Lyt,"distilbert"),Lyt.forEach(t),eZo=r(_qe," \u2014 "),ZW=n(_qe,"A",{href:!0});var yyt=s(ZW);oZo=r(yyt,"DistilBertForMultipleChoice"),yyt.forEach(t),rZo=r(_qe," (DistilBERT model)"),_qe.forEach(t),tZo=i(ee),jv=n(ee,"LI",{});var uqe=s(jv);U1e=n(uqe,"STRONG",{});var xyt=s(U1e);aZo=r(xyt,"electra"),xyt.forEach(t),nZo=r(uqe," \u2014 "),eQ=n(uqe,"A",{href:!0});var $yt=s(eQ);sZo=r($yt,"ElectraForMultipleChoice"),$yt.forEach(t),lZo=r(uqe," (ELECTRA model)"),uqe.forEach(t),iZo=i(ee),Dv=n(ee,"LI",{});var bqe=s(Dv);H1e=n(bqe,"STRONG",{});var kyt=s(H1e);dZo=r(kyt,"flaubert"),kyt.forEach(t),cZo=r(bqe," \u2014 "),oQ=n(bqe,"A",{href:!0});var Syt=s(oQ);fZo=r(Syt,"FlaubertForMultipleChoice"),Syt.forEach(t),mZo=r(bqe," (FlauBERT model)"),bqe.forEach(t),gZo=i(ee),Gv=n(ee,"LI",{});var vqe=s(Gv);J1e=n(vqe,"STRONG",{});var Ryt=s(J1e);hZo=r(Ryt,"fnet"),Ryt.forEach(t),pZo=r(vqe," \u2014 "),rQ=n(vqe,"A",{href:!0});var Pyt=s(rQ);_Zo=r(Pyt,"FNetForMultipleChoice"),Pyt.forEach(t),uZo=r(vqe," (FNet model)"),vqe.forEach(t),bZo=i(ee),Ov=n(ee,"LI",{});var Fqe=s(Ov);Y1e=n(Fqe,"STRONG",{});var Byt=s(Y1e);vZo=r(Byt,"funnel"),Byt.forEach(t),FZo=r(Fqe," \u2014 "),tQ=n(Fqe,"A",{href:!0});var Iyt=s(tQ);TZo=r(Iyt,"FunnelForMultipleChoice"),Iyt.forEach(t),MZo=r(Fqe," (Funnel Transformer model)"),Fqe.forEach(t),EZo=i(ee),Vv=n(ee,"LI",{});var Tqe=s(Vv);K1e=n(Tqe,"STRONG",{});var Nyt=s(K1e);CZo=r(Nyt,"ibert"),Nyt.forEach(t),wZo=r(Tqe," \u2014 "),aQ=n(Tqe,"A",{href:!0});var qyt=s(aQ);AZo=r(qyt,"IBertForMultipleChoice"),qyt.forEach(t),LZo=r(Tqe," (I-BERT model)"),Tqe.forEach(t),yZo=i(ee),Xv=n(ee,"LI",{});var Mqe=s(Xv);Z1e=n(Mqe,"STRONG",{});var jyt=s(Z1e);xZo=r(jyt,"longformer"),jyt.forEach(t),$Zo=r(Mqe," \u2014 "),nQ=n(Mqe,"A",{href:!0});var Dyt=s(nQ);kZo=r(Dyt,"LongformerForMultipleChoice"),Dyt.forEach(t),SZo=r(Mqe," (Longformer model)"),Mqe.forEach(t),RZo=i(ee),zv=n(ee,"LI",{});var Eqe=s(zv);e4e=n(Eqe,"STRONG",{});var Gyt=s(e4e);PZo=r(Gyt,"luke"),Gyt.forEach(t),BZo=r(Eqe," \u2014 "),sQ=n(Eqe,"A",{href:!0});var Oyt=s(sQ);IZo=r(Oyt,"LukeForMultipleChoice"),Oyt.forEach(t),NZo=r(Eqe," (LUKE model)"),Eqe.forEach(t),qZo=i(ee),Wv=n(ee,"LI",{});var Cqe=s(Wv);o4e=n(Cqe,"STRONG",{});var Vyt=s(o4e);jZo=r(Vyt,"megatron-bert"),Vyt.forEach(t),DZo=r(Cqe," \u2014 "),lQ=n(Cqe,"A",{href:!0});var Xyt=s(lQ);GZo=r(Xyt,"MegatronBertForMultipleChoice"),Xyt.forEach(t),OZo=r(Cqe," (Megatron-BERT model)"),Cqe.forEach(t),VZo=i(ee),Qv=n(ee,"LI",{});var wqe=s(Qv);r4e=n(wqe,"STRONG",{});var zyt=s(r4e);XZo=r(zyt,"mobilebert"),zyt.forEach(t),zZo=r(wqe," \u2014 "),iQ=n(wqe,"A",{href:!0});var Wyt=s(iQ);WZo=r(Wyt,"MobileBertForMultipleChoice"),Wyt.forEach(t),QZo=r(wqe," (MobileBERT model)"),wqe.forEach(t),UZo=i(ee),Uv=n(ee,"LI",{});var Aqe=s(Uv);t4e=n(Aqe,"STRONG",{});var Qyt=s(t4e);HZo=r(Qyt,"mpnet"),Qyt.forEach(t),JZo=r(Aqe," \u2014 "),dQ=n(Aqe,"A",{href:!0});var Uyt=s(dQ);YZo=r(Uyt,"MPNetForMultipleChoice"),Uyt.forEach(t),KZo=r(Aqe," (MPNet model)"),Aqe.forEach(t),ZZo=i(ee),Hv=n(ee,"LI",{});var Lqe=s(Hv);a4e=n(Lqe,"STRONG",{});var Hyt=s(a4e);eer=r(Hyt,"nezha"),Hyt.forEach(t),oer=r(Lqe," \u2014 "),cQ=n(Lqe,"A",{href:!0});var Jyt=s(cQ);rer=r(Jyt,"NezhaForMultipleChoice"),Jyt.forEach(t),ter=r(Lqe," (Nezha model)"),Lqe.forEach(t),aer=i(ee),Jv=n(ee,"LI",{});var yqe=s(Jv);n4e=n(yqe,"STRONG",{});var Yyt=s(n4e);ner=r(Yyt,"nystromformer"),Yyt.forEach(t),ser=r(yqe," \u2014 "),fQ=n(yqe,"A",{href:!0});var Kyt=s(fQ);ler=r(Kyt,"NystromformerForMultipleChoice"),Kyt.forEach(t),ier=r(yqe," (Nystr\xF6mformer model)"),yqe.forEach(t),der=i(ee),Yv=n(ee,"LI",{});var xqe=s(Yv);s4e=n(xqe,"STRONG",{});var Zyt=s(s4e);cer=r(Zyt,"qdqbert"),Zyt.forEach(t),fer=r(xqe," \u2014 "),mQ=n(xqe,"A",{href:!0});var e8t=s(mQ);mer=r(e8t,"QDQBertForMultipleChoice"),e8t.forEach(t),ger=r(xqe," (QDQBert model)"),xqe.forEach(t),her=i(ee),Kv=n(ee,"LI",{});var $qe=s(Kv);l4e=n($qe,"STRONG",{});var o8t=s(l4e);per=r(o8t,"rembert"),o8t.forEach(t),_er=r($qe," \u2014 "),gQ=n($qe,"A",{href:!0});var r8t=s(gQ);uer=r(r8t,"RemBertForMultipleChoice"),r8t.forEach(t),ber=r($qe," (RemBERT model)"),$qe.forEach(t),ver=i(ee),Zv=n(ee,"LI",{});var kqe=s(Zv);i4e=n(kqe,"STRONG",{});var t8t=s(i4e);Fer=r(t8t,"roberta"),t8t.forEach(t),Ter=r(kqe," \u2014 "),hQ=n(kqe,"A",{href:!0});var a8t=s(hQ);Mer=r(a8t,"RobertaForMultipleChoice"),a8t.forEach(t),Eer=r(kqe," (RoBERTa model)"),kqe.forEach(t),Cer=i(ee),e5=n(ee,"LI",{});var Sqe=s(e5);d4e=n(Sqe,"STRONG",{});var n8t=s(d4e);wer=r(n8t,"roformer"),n8t.forEach(t),Aer=r(Sqe," \u2014 "),pQ=n(Sqe,"A",{href:!0});var s8t=s(pQ);Ler=r(s8t,"RoFormerForMultipleChoice"),s8t.forEach(t),yer=r(Sqe," (RoFormer model)"),Sqe.forEach(t),xer=i(ee),o5=n(ee,"LI",{});var Rqe=s(o5);c4e=n(Rqe,"STRONG",{});var l8t=s(c4e);$er=r(l8t,"squeezebert"),l8t.forEach(t),ker=r(Rqe," \u2014 "),_Q=n(Rqe,"A",{href:!0});var i8t=s(_Q);Ser=r(i8t,"SqueezeBertForMultipleChoice"),i8t.forEach(t),Rer=r(Rqe," (SqueezeBERT model)"),Rqe.forEach(t),Per=i(ee),r5=n(ee,"LI",{});var Pqe=s(r5);f4e=n(Pqe,"STRONG",{});var d8t=s(f4e);Ber=r(d8t,"xlm"),d8t.forEach(t),Ier=r(Pqe," \u2014 "),uQ=n(Pqe,"A",{href:!0});var c8t=s(uQ);Ner=r(c8t,"XLMForMultipleChoice"),c8t.forEach(t),qer=r(Pqe," (XLM model)"),Pqe.forEach(t),jer=i(ee),t5=n(ee,"LI",{});var Bqe=s(t5);m4e=n(Bqe,"STRONG",{});var f8t=s(m4e);Der=r(f8t,"xlm-roberta"),f8t.forEach(t),Ger=r(Bqe," \u2014 "),bQ=n(Bqe,"A",{href:!0});var m8t=s(bQ);Oer=r(m8t,"XLMRobertaForMultipleChoice"),m8t.forEach(t),Ver=r(Bqe," (XLM-RoBERTa model)"),Bqe.forEach(t),Xer=i(ee),a5=n(ee,"LI",{});var Iqe=s(a5);g4e=n(Iqe,"STRONG",{});var g8t=s(g4e);zer=r(g8t,"xlm-roberta-xl"),g8t.forEach(t),Wer=r(Iqe," \u2014 "),vQ=n(Iqe,"A",{href:!0});var h8t=s(vQ);Qer=r(h8t,"XLMRobertaXLForMultipleChoice"),h8t.forEach(t),Uer=r(Iqe," (XLM-RoBERTa-XL model)"),Iqe.forEach(t),Her=i(ee),n5=n(ee,"LI",{});var Nqe=s(n5);h4e=n(Nqe,"STRONG",{});var p8t=s(h4e);Jer=r(p8t,"xlnet"),p8t.forEach(t),Yer=r(Nqe," \u2014 "),FQ=n(Nqe,"A",{href:!0});var _8t=s(FQ);Ker=r(_8t,"XLNetForMultipleChoice"),_8t.forEach(t),Zer=r(Nqe," (XLNet model)"),Nqe.forEach(t),eor=i(ee),s5=n(ee,"LI",{});var qqe=s(s5);p4e=n(qqe,"STRONG",{});var u8t=s(p4e);oor=r(u8t,"yoso"),u8t.forEach(t),ror=r(qqe," \u2014 "),TQ=n(qqe,"A",{href:!0});var b8t=s(TQ);tor=r(b8t,"YosoForMultipleChoice"),b8t.forEach(t),aor=r(qqe," (YOSO model)"),qqe.forEach(t),ee.forEach(t),nor=i(va),l5=n(va,"P",{});var jqe=s(l5);sor=r(jqe,"The model is set in evaluation mode by default using "),_4e=n(jqe,"CODE",{});var v8t=s(_4e);lor=r(v8t,"model.eval()"),v8t.forEach(t),ior=r(jqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u4e=n(jqe,"CODE",{});var F8t=s(u4e);dor=r(F8t,"model.train()"),F8t.forEach(t),jqe.forEach(t),cor=i(va),T(i5.$$.fragment,va),va.forEach(t),El.forEach(t),_Ue=i(f),Ad=n(f,"H2",{class:!0});var AJe=s(Ad);d5=n(AJe,"A",{id:!0,class:!0,href:!0});var T8t=s(d5);b4e=n(T8t,"SPAN",{});var M8t=s(b4e);T(F9.$$.fragment,M8t),M8t.forEach(t),T8t.forEach(t),mor=i(AJe),v4e=n(AJe,"SPAN",{});var E8t=s(v4e);gor=r(E8t,"AutoModelForNextSentencePrediction"),E8t.forEach(t),AJe.forEach(t),uUe=i(f),jo=n(f,"DIV",{class:!0});var Cl=s(jo);T(T9.$$.fragment,Cl),hor=i(Cl),Ld=n(Cl,"P",{});var sne=s(Ld);por=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MQ=n(sne,"A",{href:!0});var C8t=s(MQ);_or=r(C8t,"from_pretrained()"),C8t.forEach(t),uor=r(sne," class method or the "),EQ=n(sne,"A",{href:!0});var w8t=s(EQ);bor=r(w8t,"from_config()"),w8t.forEach(t),vor=r(sne,` class
method.`),sne.forEach(t),For=i(Cl),M9=n(Cl,"P",{});var LJe=s(M9);Tor=r(LJe,"This class cannot be instantiated directly using "),F4e=n(LJe,"CODE",{});var A8t=s(F4e);Mor=r(A8t,"__init__()"),A8t.forEach(t),Eor=r(LJe," (throws an error)."),LJe.forEach(t),Cor=i(Cl),vt=n(Cl,"DIV",{class:!0});var AL=s(vt);T(E9.$$.fragment,AL),wor=i(AL),T4e=n(AL,"P",{});var L8t=s(T4e);Aor=r(L8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),L8t.forEach(t),Lor=i(AL),yd=n(AL,"P",{});var lne=s(yd);yor=r(lne,`Note:
Loading a model from its configuration file does `),M4e=n(lne,"STRONG",{});var y8t=s(M4e);xor=r(y8t,"not"),y8t.forEach(t),$or=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(lne,"A",{href:!0});var x8t=s(CQ);kor=r(x8t,"from_pretrained()"),x8t.forEach(t),Sor=r(lne," to load the model weights."),lne.forEach(t),Ror=i(AL),T(c5.$$.fragment,AL),AL.forEach(t),Por=i(Cl),ao=n(Cl,"DIV",{class:!0});var Fa=s(ao);T(C9.$$.fragment,Fa),Bor=i(Fa),E4e=n(Fa,"P",{});var $8t=s(E4e);Ior=r($8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$8t.forEach(t),Nor=i(Fa),Ja=n(Fa,"P",{});var LL=s(Ja);qor=r(LL,"The model class to instantiate is selected based on the "),C4e=n(LL,"CODE",{});var k8t=s(C4e);jor=r(k8t,"model_type"),k8t.forEach(t),Dor=r(LL,` property of the config object (either
passed as an argument or loaded from `),w4e=n(LL,"CODE",{});var S8t=s(w4e);Gor=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),Oor=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=n(LL,"CODE",{});var R8t=s(A4e);Vor=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),Xor=r(LL,":"),LL.forEach(t),zor=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);f5=n(Ta,"LI",{});var Dqe=s(f5);L4e=n(Dqe,"STRONG",{});var P8t=s(L4e);Wor=r(P8t,"bert"),P8t.forEach(t),Qor=r(Dqe," \u2014 "),wQ=n(Dqe,"A",{href:!0});var B8t=s(wQ);Uor=r(B8t,"BertForNextSentencePrediction"),B8t.forEach(t),Hor=r(Dqe," (BERT model)"),Dqe.forEach(t),Jor=i(Ta),m5=n(Ta,"LI",{});var Gqe=s(m5);y4e=n(Gqe,"STRONG",{});var I8t=s(y4e);Yor=r(I8t,"fnet"),I8t.forEach(t),Kor=r(Gqe," \u2014 "),AQ=n(Gqe,"A",{href:!0});var N8t=s(AQ);Zor=r(N8t,"FNetForNextSentencePrediction"),N8t.forEach(t),err=r(Gqe," (FNet model)"),Gqe.forEach(t),orr=i(Ta),g5=n(Ta,"LI",{});var Oqe=s(g5);x4e=n(Oqe,"STRONG",{});var q8t=s(x4e);rrr=r(q8t,"megatron-bert"),q8t.forEach(t),trr=r(Oqe," \u2014 "),LQ=n(Oqe,"A",{href:!0});var j8t=s(LQ);arr=r(j8t,"MegatronBertForNextSentencePrediction"),j8t.forEach(t),nrr=r(Oqe," (Megatron-BERT model)"),Oqe.forEach(t),srr=i(Ta),h5=n(Ta,"LI",{});var Vqe=s(h5);$4e=n(Vqe,"STRONG",{});var D8t=s($4e);lrr=r(D8t,"mobilebert"),D8t.forEach(t),irr=r(Vqe," \u2014 "),yQ=n(Vqe,"A",{href:!0});var G8t=s(yQ);drr=r(G8t,"MobileBertForNextSentencePrediction"),G8t.forEach(t),crr=r(Vqe," (MobileBERT model)"),Vqe.forEach(t),frr=i(Ta),p5=n(Ta,"LI",{});var Xqe=s(p5);k4e=n(Xqe,"STRONG",{});var O8t=s(k4e);mrr=r(O8t,"nezha"),O8t.forEach(t),grr=r(Xqe," \u2014 "),xQ=n(Xqe,"A",{href:!0});var V8t=s(xQ);hrr=r(V8t,"NezhaForNextSentencePrediction"),V8t.forEach(t),prr=r(Xqe," (Nezha model)"),Xqe.forEach(t),_rr=i(Ta),_5=n(Ta,"LI",{});var zqe=s(_5);S4e=n(zqe,"STRONG",{});var X8t=s(S4e);urr=r(X8t,"qdqbert"),X8t.forEach(t),brr=r(zqe," \u2014 "),$Q=n(zqe,"A",{href:!0});var z8t=s($Q);vrr=r(z8t,"QDQBertForNextSentencePrediction"),z8t.forEach(t),Frr=r(zqe," (QDQBert model)"),zqe.forEach(t),Ta.forEach(t),Trr=i(Fa),u5=n(Fa,"P",{});var Wqe=s(u5);Mrr=r(Wqe,"The model is set in evaluation mode by default using "),R4e=n(Wqe,"CODE",{});var W8t=s(R4e);Err=r(W8t,"model.eval()"),W8t.forEach(t),Crr=r(Wqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P4e=n(Wqe,"CODE",{});var Q8t=s(P4e);wrr=r(Q8t,"model.train()"),Q8t.forEach(t),Wqe.forEach(t),Arr=i(Fa),T(b5.$$.fragment,Fa),Fa.forEach(t),Cl.forEach(t),bUe=i(f),xd=n(f,"H2",{class:!0});var yJe=s(xd);v5=n(yJe,"A",{id:!0,class:!0,href:!0});var U8t=s(v5);B4e=n(U8t,"SPAN",{});var H8t=s(B4e);T(w9.$$.fragment,H8t),H8t.forEach(t),U8t.forEach(t),Lrr=i(yJe),I4e=n(yJe,"SPAN",{});var J8t=s(I4e);yrr=r(J8t,"AutoModelForTokenClassification"),J8t.forEach(t),yJe.forEach(t),vUe=i(f),Go=n(f,"DIV",{class:!0});var wl=s(Go);T(A9.$$.fragment,wl),xrr=i(wl),$d=n(wl,"P",{});var ine=s($d);$rr=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kQ=n(ine,"A",{href:!0});var Y8t=s(kQ);krr=r(Y8t,"from_pretrained()"),Y8t.forEach(t),Srr=r(ine," class method or the "),SQ=n(ine,"A",{href:!0});var K8t=s(SQ);Rrr=r(K8t,"from_config()"),K8t.forEach(t),Prr=r(ine,` class
method.`),ine.forEach(t),Brr=i(wl),L9=n(wl,"P",{});var xJe=s(L9);Irr=r(xJe,"This class cannot be instantiated directly using "),N4e=n(xJe,"CODE",{});var Z8t=s(N4e);Nrr=r(Z8t,"__init__()"),Z8t.forEach(t),qrr=r(xJe," (throws an error)."),xJe.forEach(t),jrr=i(wl),Ft=n(wl,"DIV",{class:!0});var yL=s(Ft);T(y9.$$.fragment,yL),Drr=i(yL),q4e=n(yL,"P",{});var e9t=s(q4e);Grr=r(e9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),e9t.forEach(t),Orr=i(yL),kd=n(yL,"P",{});var dne=s(kd);Vrr=r(dne,`Note:
Loading a model from its configuration file does `),j4e=n(dne,"STRONG",{});var o9t=s(j4e);Xrr=r(o9t,"not"),o9t.forEach(t),zrr=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(dne,"A",{href:!0});var r9t=s(RQ);Wrr=r(r9t,"from_pretrained()"),r9t.forEach(t),Qrr=r(dne," to load the model weights."),dne.forEach(t),Urr=i(yL),T(F5.$$.fragment,yL),yL.forEach(t),Hrr=i(wl),no=n(wl,"DIV",{class:!0});var Ma=s(no);T(x9.$$.fragment,Ma),Jrr=i(Ma),D4e=n(Ma,"P",{});var t9t=s(D4e);Yrr=r(t9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),t9t.forEach(t),Krr=i(Ma),Ya=n(Ma,"P",{});var xL=s(Ya);Zrr=r(xL,"The model class to instantiate is selected based on the "),G4e=n(xL,"CODE",{});var a9t=s(G4e);etr=r(a9t,"model_type"),a9t.forEach(t),otr=r(xL,` property of the config object (either
passed as an argument or loaded from `),O4e=n(xL,"CODE",{});var n9t=s(O4e);rtr=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),ttr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(xL,"CODE",{});var s9t=s(V4e);atr=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),ntr=r(xL,":"),xL.forEach(t),str=i(Ma),H=n(Ma,"UL",{});var K=s(H);T5=n(K,"LI",{});var Qqe=s(T5);X4e=n(Qqe,"STRONG",{});var l9t=s(X4e);ltr=r(l9t,"albert"),l9t.forEach(t),itr=r(Qqe," \u2014 "),PQ=n(Qqe,"A",{href:!0});var i9t=s(PQ);dtr=r(i9t,"AlbertForTokenClassification"),i9t.forEach(t),ctr=r(Qqe," (ALBERT model)"),Qqe.forEach(t),ftr=i(K),M5=n(K,"LI",{});var Uqe=s(M5);z4e=n(Uqe,"STRONG",{});var d9t=s(z4e);mtr=r(d9t,"bert"),d9t.forEach(t),gtr=r(Uqe," \u2014 "),BQ=n(Uqe,"A",{href:!0});var c9t=s(BQ);htr=r(c9t,"BertForTokenClassification"),c9t.forEach(t),ptr=r(Uqe," (BERT model)"),Uqe.forEach(t),_tr=i(K),E5=n(K,"LI",{});var Hqe=s(E5);W4e=n(Hqe,"STRONG",{});var f9t=s(W4e);utr=r(f9t,"big_bird"),f9t.forEach(t),btr=r(Hqe," \u2014 "),IQ=n(Hqe,"A",{href:!0});var m9t=s(IQ);vtr=r(m9t,"BigBirdForTokenClassification"),m9t.forEach(t),Ftr=r(Hqe," (BigBird model)"),Hqe.forEach(t),Ttr=i(K),C5=n(K,"LI",{});var Jqe=s(C5);Q4e=n(Jqe,"STRONG",{});var g9t=s(Q4e);Mtr=r(g9t,"bloom"),g9t.forEach(t),Etr=r(Jqe," \u2014 "),NQ=n(Jqe,"A",{href:!0});var h9t=s(NQ);Ctr=r(h9t,"BloomForTokenClassification"),h9t.forEach(t),wtr=r(Jqe," (BLOOM model)"),Jqe.forEach(t),Atr=i(K),w5=n(K,"LI",{});var Yqe=s(w5);U4e=n(Yqe,"STRONG",{});var p9t=s(U4e);Ltr=r(p9t,"camembert"),p9t.forEach(t),ytr=r(Yqe," \u2014 "),qQ=n(Yqe,"A",{href:!0});var _9t=s(qQ);xtr=r(_9t,"CamembertForTokenClassification"),_9t.forEach(t),$tr=r(Yqe," (CamemBERT model)"),Yqe.forEach(t),ktr=i(K),A5=n(K,"LI",{});var Kqe=s(A5);H4e=n(Kqe,"STRONG",{});var u9t=s(H4e);Str=r(u9t,"canine"),u9t.forEach(t),Rtr=r(Kqe," \u2014 "),jQ=n(Kqe,"A",{href:!0});var b9t=s(jQ);Ptr=r(b9t,"CanineForTokenClassification"),b9t.forEach(t),Btr=r(Kqe," (CANINE model)"),Kqe.forEach(t),Itr=i(K),L5=n(K,"LI",{});var Zqe=s(L5);J4e=n(Zqe,"STRONG",{});var v9t=s(J4e);Ntr=r(v9t,"convbert"),v9t.forEach(t),qtr=r(Zqe," \u2014 "),DQ=n(Zqe,"A",{href:!0});var F9t=s(DQ);jtr=r(F9t,"ConvBertForTokenClassification"),F9t.forEach(t),Dtr=r(Zqe," (ConvBERT model)"),Zqe.forEach(t),Gtr=i(K),y5=n(K,"LI",{});var eje=s(y5);Y4e=n(eje,"STRONG",{});var T9t=s(Y4e);Otr=r(T9t,"data2vec-text"),T9t.forEach(t),Vtr=r(eje," \u2014 "),GQ=n(eje,"A",{href:!0});var M9t=s(GQ);Xtr=r(M9t,"Data2VecTextForTokenClassification"),M9t.forEach(t),ztr=r(eje," (Data2VecText model)"),eje.forEach(t),Wtr=i(K),x5=n(K,"LI",{});var oje=s(x5);K4e=n(oje,"STRONG",{});var E9t=s(K4e);Qtr=r(E9t,"deberta"),E9t.forEach(t),Utr=r(oje," \u2014 "),OQ=n(oje,"A",{href:!0});var C9t=s(OQ);Htr=r(C9t,"DebertaForTokenClassification"),C9t.forEach(t),Jtr=r(oje," (DeBERTa model)"),oje.forEach(t),Ytr=i(K),$5=n(K,"LI",{});var rje=s($5);Z4e=n(rje,"STRONG",{});var w9t=s(Z4e);Ktr=r(w9t,"deberta-v2"),w9t.forEach(t),Ztr=r(rje," \u2014 "),VQ=n(rje,"A",{href:!0});var A9t=s(VQ);ear=r(A9t,"DebertaV2ForTokenClassification"),A9t.forEach(t),oar=r(rje," (DeBERTa-v2 model)"),rje.forEach(t),rar=i(K),k5=n(K,"LI",{});var tje=s(k5);ebe=n(tje,"STRONG",{});var L9t=s(ebe);tar=r(L9t,"distilbert"),L9t.forEach(t),aar=r(tje," \u2014 "),XQ=n(tje,"A",{href:!0});var y9t=s(XQ);nar=r(y9t,"DistilBertForTokenClassification"),y9t.forEach(t),sar=r(tje," (DistilBERT model)"),tje.forEach(t),lar=i(K),S5=n(K,"LI",{});var aje=s(S5);obe=n(aje,"STRONG",{});var x9t=s(obe);iar=r(x9t,"electra"),x9t.forEach(t),dar=r(aje," \u2014 "),zQ=n(aje,"A",{href:!0});var $9t=s(zQ);car=r($9t,"ElectraForTokenClassification"),$9t.forEach(t),far=r(aje," (ELECTRA model)"),aje.forEach(t),mar=i(K),R5=n(K,"LI",{});var nje=s(R5);rbe=n(nje,"STRONG",{});var k9t=s(rbe);gar=r(k9t,"flaubert"),k9t.forEach(t),har=r(nje," \u2014 "),WQ=n(nje,"A",{href:!0});var S9t=s(WQ);par=r(S9t,"FlaubertForTokenClassification"),S9t.forEach(t),_ar=r(nje," (FlauBERT model)"),nje.forEach(t),uar=i(K),P5=n(K,"LI",{});var sje=s(P5);tbe=n(sje,"STRONG",{});var R9t=s(tbe);bar=r(R9t,"fnet"),R9t.forEach(t),Far=r(sje," \u2014 "),QQ=n(sje,"A",{href:!0});var P9t=s(QQ);Tar=r(P9t,"FNetForTokenClassification"),P9t.forEach(t),Mar=r(sje," (FNet model)"),sje.forEach(t),Ear=i(K),B5=n(K,"LI",{});var lje=s(B5);abe=n(lje,"STRONG",{});var B9t=s(abe);Car=r(B9t,"funnel"),B9t.forEach(t),war=r(lje," \u2014 "),UQ=n(lje,"A",{href:!0});var I9t=s(UQ);Aar=r(I9t,"FunnelForTokenClassification"),I9t.forEach(t),Lar=r(lje," (Funnel Transformer model)"),lje.forEach(t),yar=i(K),I5=n(K,"LI",{});var ije=s(I5);nbe=n(ije,"STRONG",{});var N9t=s(nbe);xar=r(N9t,"gpt2"),N9t.forEach(t),$ar=r(ije," \u2014 "),HQ=n(ije,"A",{href:!0});var q9t=s(HQ);kar=r(q9t,"GPT2ForTokenClassification"),q9t.forEach(t),Sar=r(ije," (OpenAI GPT-2 model)"),ije.forEach(t),Rar=i(K),N5=n(K,"LI",{});var dje=s(N5);sbe=n(dje,"STRONG",{});var j9t=s(sbe);Par=r(j9t,"ibert"),j9t.forEach(t),Bar=r(dje," \u2014 "),JQ=n(dje,"A",{href:!0});var D9t=s(JQ);Iar=r(D9t,"IBertForTokenClassification"),D9t.forEach(t),Nar=r(dje," (I-BERT model)"),dje.forEach(t),qar=i(K),q5=n(K,"LI",{});var cje=s(q5);lbe=n(cje,"STRONG",{});var G9t=s(lbe);jar=r(G9t,"layoutlm"),G9t.forEach(t),Dar=r(cje," \u2014 "),YQ=n(cje,"A",{href:!0});var O9t=s(YQ);Gar=r(O9t,"LayoutLMForTokenClassification"),O9t.forEach(t),Oar=r(cje," (LayoutLM model)"),cje.forEach(t),Var=i(K),j5=n(K,"LI",{});var fje=s(j5);ibe=n(fje,"STRONG",{});var V9t=s(ibe);Xar=r(V9t,"layoutlmv2"),V9t.forEach(t),zar=r(fje," \u2014 "),KQ=n(fje,"A",{href:!0});var X9t=s(KQ);War=r(X9t,"LayoutLMv2ForTokenClassification"),X9t.forEach(t),Qar=r(fje," (LayoutLMv2 model)"),fje.forEach(t),Uar=i(K),D5=n(K,"LI",{});var mje=s(D5);dbe=n(mje,"STRONG",{});var z9t=s(dbe);Har=r(z9t,"layoutlmv3"),z9t.forEach(t),Jar=r(mje," \u2014 "),ZQ=n(mje,"A",{href:!0});var W9t=s(ZQ);Yar=r(W9t,"LayoutLMv3ForTokenClassification"),W9t.forEach(t),Kar=r(mje," (LayoutLMv3 model)"),mje.forEach(t),Zar=i(K),G5=n(K,"LI",{});var gje=s(G5);cbe=n(gje,"STRONG",{});var Q9t=s(cbe);enr=r(Q9t,"longformer"),Q9t.forEach(t),onr=r(gje," \u2014 "),eU=n(gje,"A",{href:!0});var U9t=s(eU);rnr=r(U9t,"LongformerForTokenClassification"),U9t.forEach(t),tnr=r(gje," (Longformer model)"),gje.forEach(t),anr=i(K),O5=n(K,"LI",{});var hje=s(O5);fbe=n(hje,"STRONG",{});var H9t=s(fbe);nnr=r(H9t,"luke"),H9t.forEach(t),snr=r(hje," \u2014 "),oU=n(hje,"A",{href:!0});var J9t=s(oU);lnr=r(J9t,"LukeForTokenClassification"),J9t.forEach(t),inr=r(hje," (LUKE model)"),hje.forEach(t),dnr=i(K),V5=n(K,"LI",{});var pje=s(V5);mbe=n(pje,"STRONG",{});var Y9t=s(mbe);cnr=r(Y9t,"megatron-bert"),Y9t.forEach(t),fnr=r(pje," \u2014 "),rU=n(pje,"A",{href:!0});var K9t=s(rU);mnr=r(K9t,"MegatronBertForTokenClassification"),K9t.forEach(t),gnr=r(pje," (Megatron-BERT model)"),pje.forEach(t),hnr=i(K),X5=n(K,"LI",{});var _je=s(X5);gbe=n(_je,"STRONG",{});var Z9t=s(gbe);pnr=r(Z9t,"mobilebert"),Z9t.forEach(t),_nr=r(_je," \u2014 "),tU=n(_je,"A",{href:!0});var ext=s(tU);unr=r(ext,"MobileBertForTokenClassification"),ext.forEach(t),bnr=r(_je," (MobileBERT model)"),_je.forEach(t),vnr=i(K),z5=n(K,"LI",{});var uje=s(z5);hbe=n(uje,"STRONG",{});var oxt=s(hbe);Fnr=r(oxt,"mpnet"),oxt.forEach(t),Tnr=r(uje," \u2014 "),aU=n(uje,"A",{href:!0});var rxt=s(aU);Mnr=r(rxt,"MPNetForTokenClassification"),rxt.forEach(t),Enr=r(uje," (MPNet model)"),uje.forEach(t),Cnr=i(K),W5=n(K,"LI",{});var bje=s(W5);pbe=n(bje,"STRONG",{});var txt=s(pbe);wnr=r(txt,"nezha"),txt.forEach(t),Anr=r(bje," \u2014 "),nU=n(bje,"A",{href:!0});var axt=s(nU);Lnr=r(axt,"NezhaForTokenClassification"),axt.forEach(t),ynr=r(bje," (Nezha model)"),bje.forEach(t),xnr=i(K),Q5=n(K,"LI",{});var vje=s(Q5);_be=n(vje,"STRONG",{});var nxt=s(_be);$nr=r(nxt,"nystromformer"),nxt.forEach(t),knr=r(vje," \u2014 "),sU=n(vje,"A",{href:!0});var sxt=s(sU);Snr=r(sxt,"NystromformerForTokenClassification"),sxt.forEach(t),Rnr=r(vje," (Nystr\xF6mformer model)"),vje.forEach(t),Pnr=i(K),U5=n(K,"LI",{});var Fje=s(U5);ube=n(Fje,"STRONG",{});var lxt=s(ube);Bnr=r(lxt,"qdqbert"),lxt.forEach(t),Inr=r(Fje," \u2014 "),lU=n(Fje,"A",{href:!0});var ixt=s(lU);Nnr=r(ixt,"QDQBertForTokenClassification"),ixt.forEach(t),qnr=r(Fje," (QDQBert model)"),Fje.forEach(t),jnr=i(K),H5=n(K,"LI",{});var Tje=s(H5);bbe=n(Tje,"STRONG",{});var dxt=s(bbe);Dnr=r(dxt,"rembert"),dxt.forEach(t),Gnr=r(Tje," \u2014 "),iU=n(Tje,"A",{href:!0});var cxt=s(iU);Onr=r(cxt,"RemBertForTokenClassification"),cxt.forEach(t),Vnr=r(Tje," (RemBERT model)"),Tje.forEach(t),Xnr=i(K),J5=n(K,"LI",{});var Mje=s(J5);vbe=n(Mje,"STRONG",{});var fxt=s(vbe);znr=r(fxt,"roberta"),fxt.forEach(t),Wnr=r(Mje," \u2014 "),dU=n(Mje,"A",{href:!0});var mxt=s(dU);Qnr=r(mxt,"RobertaForTokenClassification"),mxt.forEach(t),Unr=r(Mje," (RoBERTa model)"),Mje.forEach(t),Hnr=i(K),Y5=n(K,"LI",{});var Eje=s(Y5);Fbe=n(Eje,"STRONG",{});var gxt=s(Fbe);Jnr=r(gxt,"roformer"),gxt.forEach(t),Ynr=r(Eje," \u2014 "),cU=n(Eje,"A",{href:!0});var hxt=s(cU);Knr=r(hxt,"RoFormerForTokenClassification"),hxt.forEach(t),Znr=r(Eje," (RoFormer model)"),Eje.forEach(t),esr=i(K),K5=n(K,"LI",{});var Cje=s(K5);Tbe=n(Cje,"STRONG",{});var pxt=s(Tbe);osr=r(pxt,"squeezebert"),pxt.forEach(t),rsr=r(Cje," \u2014 "),fU=n(Cje,"A",{href:!0});var _xt=s(fU);tsr=r(_xt,"SqueezeBertForTokenClassification"),_xt.forEach(t),asr=r(Cje," (SqueezeBERT model)"),Cje.forEach(t),nsr=i(K),Z5=n(K,"LI",{});var wje=s(Z5);Mbe=n(wje,"STRONG",{});var uxt=s(Mbe);ssr=r(uxt,"xlm"),uxt.forEach(t),lsr=r(wje," \u2014 "),mU=n(wje,"A",{href:!0});var bxt=s(mU);isr=r(bxt,"XLMForTokenClassification"),bxt.forEach(t),dsr=r(wje," (XLM model)"),wje.forEach(t),csr=i(K),eF=n(K,"LI",{});var Aje=s(eF);Ebe=n(Aje,"STRONG",{});var vxt=s(Ebe);fsr=r(vxt,"xlm-roberta"),vxt.forEach(t),msr=r(Aje," \u2014 "),gU=n(Aje,"A",{href:!0});var Fxt=s(gU);gsr=r(Fxt,"XLMRobertaForTokenClassification"),Fxt.forEach(t),hsr=r(Aje," (XLM-RoBERTa model)"),Aje.forEach(t),psr=i(K),oF=n(K,"LI",{});var Lje=s(oF);Cbe=n(Lje,"STRONG",{});var Txt=s(Cbe);_sr=r(Txt,"xlm-roberta-xl"),Txt.forEach(t),usr=r(Lje," \u2014 "),hU=n(Lje,"A",{href:!0});var Mxt=s(hU);bsr=r(Mxt,"XLMRobertaXLForTokenClassification"),Mxt.forEach(t),vsr=r(Lje," (XLM-RoBERTa-XL model)"),Lje.forEach(t),Fsr=i(K),rF=n(K,"LI",{});var yje=s(rF);wbe=n(yje,"STRONG",{});var Ext=s(wbe);Tsr=r(Ext,"xlnet"),Ext.forEach(t),Msr=r(yje," \u2014 "),pU=n(yje,"A",{href:!0});var Cxt=s(pU);Esr=r(Cxt,"XLNetForTokenClassification"),Cxt.forEach(t),Csr=r(yje," (XLNet model)"),yje.forEach(t),wsr=i(K),tF=n(K,"LI",{});var xje=s(tF);Abe=n(xje,"STRONG",{});var wxt=s(Abe);Asr=r(wxt,"yoso"),wxt.forEach(t),Lsr=r(xje," \u2014 "),_U=n(xje,"A",{href:!0});var Axt=s(_U);ysr=r(Axt,"YosoForTokenClassification"),Axt.forEach(t),xsr=r(xje," (YOSO model)"),xje.forEach(t),K.forEach(t),$sr=i(Ma),aF=n(Ma,"P",{});var $je=s(aF);ksr=r($je,"The model is set in evaluation mode by default using "),Lbe=n($je,"CODE",{});var Lxt=s(Lbe);Ssr=r(Lxt,"model.eval()"),Lxt.forEach(t),Rsr=r($je,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=n($je,"CODE",{});var yxt=s(ybe);Psr=r(yxt,"model.train()"),yxt.forEach(t),$je.forEach(t),Bsr=i(Ma),T(nF.$$.fragment,Ma),Ma.forEach(t),wl.forEach(t),FUe=i(f),Sd=n(f,"H2",{class:!0});var $Je=s(Sd);sF=n($Je,"A",{id:!0,class:!0,href:!0});var xxt=s(sF);xbe=n(xxt,"SPAN",{});var $xt=s(xbe);T($9.$$.fragment,$xt),$xt.forEach(t),xxt.forEach(t),Isr=i($Je),$be=n($Je,"SPAN",{});var kxt=s($be);Nsr=r(kxt,"AutoModelForQuestionAnswering"),kxt.forEach(t),$Je.forEach(t),TUe=i(f),Oo=n(f,"DIV",{class:!0});var Al=s(Oo);T(k9.$$.fragment,Al),qsr=i(Al),Rd=n(Al,"P",{});var cne=s(Rd);jsr=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uU=n(cne,"A",{href:!0});var Sxt=s(uU);Dsr=r(Sxt,"from_pretrained()"),Sxt.forEach(t),Gsr=r(cne," class method or the "),bU=n(cne,"A",{href:!0});var Rxt=s(bU);Osr=r(Rxt,"from_config()"),Rxt.forEach(t),Vsr=r(cne,` class
method.`),cne.forEach(t),Xsr=i(Al),S9=n(Al,"P",{});var kJe=s(S9);zsr=r(kJe,"This class cannot be instantiated directly using "),kbe=n(kJe,"CODE",{});var Pxt=s(kbe);Wsr=r(Pxt,"__init__()"),Pxt.forEach(t),Qsr=r(kJe," (throws an error)."),kJe.forEach(t),Usr=i(Al),Tt=n(Al,"DIV",{class:!0});var $L=s(Tt);T(R9.$$.fragment,$L),Hsr=i($L),Sbe=n($L,"P",{});var Bxt=s(Sbe);Jsr=r(Bxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Bxt.forEach(t),Ysr=i($L),Pd=n($L,"P",{});var fne=s(Pd);Ksr=r(fne,`Note:
Loading a model from its configuration file does `),Rbe=n(fne,"STRONG",{});var Ixt=s(Rbe);Zsr=r(Ixt,"not"),Ixt.forEach(t),elr=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(fne,"A",{href:!0});var Nxt=s(vU);olr=r(Nxt,"from_pretrained()"),Nxt.forEach(t),rlr=r(fne," to load the model weights."),fne.forEach(t),tlr=i($L),T(lF.$$.fragment,$L),$L.forEach(t),alr=i(Al),so=n(Al,"DIV",{class:!0});var Ea=s(so);T(P9.$$.fragment,Ea),nlr=i(Ea),Pbe=n(Ea,"P",{});var qxt=s(Pbe);slr=r(qxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qxt.forEach(t),llr=i(Ea),Ka=n(Ea,"P",{});var kL=s(Ka);ilr=r(kL,"The model class to instantiate is selected based on the "),Bbe=n(kL,"CODE",{});var jxt=s(Bbe);dlr=r(jxt,"model_type"),jxt.forEach(t),clr=r(kL,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(kL,"CODE",{});var Dxt=s(Ibe);flr=r(Dxt,"pretrained_model_name_or_path"),Dxt.forEach(t),mlr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(kL,"CODE",{});var Gxt=s(Nbe);glr=r(Gxt,"pretrained_model_name_or_path"),Gxt.forEach(t),hlr=r(kL,":"),kL.forEach(t),plr=i(Ea),V=n(Ea,"UL",{});var X=s(V);iF=n(X,"LI",{});var kje=s(iF);qbe=n(kje,"STRONG",{});var Oxt=s(qbe);_lr=r(Oxt,"albert"),Oxt.forEach(t),ulr=r(kje," \u2014 "),FU=n(kje,"A",{href:!0});var Vxt=s(FU);blr=r(Vxt,"AlbertForQuestionAnswering"),Vxt.forEach(t),vlr=r(kje," (ALBERT model)"),kje.forEach(t),Flr=i(X),dF=n(X,"LI",{});var Sje=s(dF);jbe=n(Sje,"STRONG",{});var Xxt=s(jbe);Tlr=r(Xxt,"bart"),Xxt.forEach(t),Mlr=r(Sje," \u2014 "),TU=n(Sje,"A",{href:!0});var zxt=s(TU);Elr=r(zxt,"BartForQuestionAnswering"),zxt.forEach(t),Clr=r(Sje," (BART model)"),Sje.forEach(t),wlr=i(X),cF=n(X,"LI",{});var Rje=s(cF);Dbe=n(Rje,"STRONG",{});var Wxt=s(Dbe);Alr=r(Wxt,"bert"),Wxt.forEach(t),Llr=r(Rje," \u2014 "),MU=n(Rje,"A",{href:!0});var Qxt=s(MU);ylr=r(Qxt,"BertForQuestionAnswering"),Qxt.forEach(t),xlr=r(Rje," (BERT model)"),Rje.forEach(t),$lr=i(X),fF=n(X,"LI",{});var Pje=s(fF);Gbe=n(Pje,"STRONG",{});var Uxt=s(Gbe);klr=r(Uxt,"big_bird"),Uxt.forEach(t),Slr=r(Pje," \u2014 "),EU=n(Pje,"A",{href:!0});var Hxt=s(EU);Rlr=r(Hxt,"BigBirdForQuestionAnswering"),Hxt.forEach(t),Plr=r(Pje," (BigBird model)"),Pje.forEach(t),Blr=i(X),mF=n(X,"LI",{});var Bje=s(mF);Obe=n(Bje,"STRONG",{});var Jxt=s(Obe);Ilr=r(Jxt,"bigbird_pegasus"),Jxt.forEach(t),Nlr=r(Bje," \u2014 "),CU=n(Bje,"A",{href:!0});var Yxt=s(CU);qlr=r(Yxt,"BigBirdPegasusForQuestionAnswering"),Yxt.forEach(t),jlr=r(Bje," (BigBird-Pegasus model)"),Bje.forEach(t),Dlr=i(X),gF=n(X,"LI",{});var Ije=s(gF);Vbe=n(Ije,"STRONG",{});var Kxt=s(Vbe);Glr=r(Kxt,"camembert"),Kxt.forEach(t),Olr=r(Ije," \u2014 "),wU=n(Ije,"A",{href:!0});var Zxt=s(wU);Vlr=r(Zxt,"CamembertForQuestionAnswering"),Zxt.forEach(t),Xlr=r(Ije," (CamemBERT model)"),Ije.forEach(t),zlr=i(X),hF=n(X,"LI",{});var Nje=s(hF);Xbe=n(Nje,"STRONG",{});var e$t=s(Xbe);Wlr=r(e$t,"canine"),e$t.forEach(t),Qlr=r(Nje," \u2014 "),AU=n(Nje,"A",{href:!0});var o$t=s(AU);Ulr=r(o$t,"CanineForQuestionAnswering"),o$t.forEach(t),Hlr=r(Nje," (CANINE model)"),Nje.forEach(t),Jlr=i(X),pF=n(X,"LI",{});var qje=s(pF);zbe=n(qje,"STRONG",{});var r$t=s(zbe);Ylr=r(r$t,"convbert"),r$t.forEach(t),Klr=r(qje," \u2014 "),LU=n(qje,"A",{href:!0});var t$t=s(LU);Zlr=r(t$t,"ConvBertForQuestionAnswering"),t$t.forEach(t),eir=r(qje," (ConvBERT model)"),qje.forEach(t),oir=i(X),_F=n(X,"LI",{});var jje=s(_F);Wbe=n(jje,"STRONG",{});var a$t=s(Wbe);rir=r(a$t,"data2vec-text"),a$t.forEach(t),tir=r(jje," \u2014 "),yU=n(jje,"A",{href:!0});var n$t=s(yU);air=r(n$t,"Data2VecTextForQuestionAnswering"),n$t.forEach(t),nir=r(jje," (Data2VecText model)"),jje.forEach(t),sir=i(X),uF=n(X,"LI",{});var Dje=s(uF);Qbe=n(Dje,"STRONG",{});var s$t=s(Qbe);lir=r(s$t,"deberta"),s$t.forEach(t),iir=r(Dje," \u2014 "),xU=n(Dje,"A",{href:!0});var l$t=s(xU);dir=r(l$t,"DebertaForQuestionAnswering"),l$t.forEach(t),cir=r(Dje," (DeBERTa model)"),Dje.forEach(t),fir=i(X),bF=n(X,"LI",{});var Gje=s(bF);Ube=n(Gje,"STRONG",{});var i$t=s(Ube);mir=r(i$t,"deberta-v2"),i$t.forEach(t),gir=r(Gje," \u2014 "),$U=n(Gje,"A",{href:!0});var d$t=s($U);hir=r(d$t,"DebertaV2ForQuestionAnswering"),d$t.forEach(t),pir=r(Gje," (DeBERTa-v2 model)"),Gje.forEach(t),_ir=i(X),vF=n(X,"LI",{});var Oje=s(vF);Hbe=n(Oje,"STRONG",{});var c$t=s(Hbe);uir=r(c$t,"distilbert"),c$t.forEach(t),bir=r(Oje," \u2014 "),kU=n(Oje,"A",{href:!0});var f$t=s(kU);vir=r(f$t,"DistilBertForQuestionAnswering"),f$t.forEach(t),Fir=r(Oje," (DistilBERT model)"),Oje.forEach(t),Tir=i(X),FF=n(X,"LI",{});var Vje=s(FF);Jbe=n(Vje,"STRONG",{});var m$t=s(Jbe);Mir=r(m$t,"electra"),m$t.forEach(t),Eir=r(Vje," \u2014 "),SU=n(Vje,"A",{href:!0});var g$t=s(SU);Cir=r(g$t,"ElectraForQuestionAnswering"),g$t.forEach(t),wir=r(Vje," (ELECTRA model)"),Vje.forEach(t),Air=i(X),TF=n(X,"LI",{});var Xje=s(TF);Ybe=n(Xje,"STRONG",{});var h$t=s(Ybe);Lir=r(h$t,"flaubert"),h$t.forEach(t),yir=r(Xje," \u2014 "),RU=n(Xje,"A",{href:!0});var p$t=s(RU);xir=r(p$t,"FlaubertForQuestionAnsweringSimple"),p$t.forEach(t),$ir=r(Xje," (FlauBERT model)"),Xje.forEach(t),kir=i(X),MF=n(X,"LI",{});var zje=s(MF);Kbe=n(zje,"STRONG",{});var _$t=s(Kbe);Sir=r(_$t,"fnet"),_$t.forEach(t),Rir=r(zje," \u2014 "),PU=n(zje,"A",{href:!0});var u$t=s(PU);Pir=r(u$t,"FNetForQuestionAnswering"),u$t.forEach(t),Bir=r(zje," (FNet model)"),zje.forEach(t),Iir=i(X),EF=n(X,"LI",{});var Wje=s(EF);Zbe=n(Wje,"STRONG",{});var b$t=s(Zbe);Nir=r(b$t,"funnel"),b$t.forEach(t),qir=r(Wje," \u2014 "),BU=n(Wje,"A",{href:!0});var v$t=s(BU);jir=r(v$t,"FunnelForQuestionAnswering"),v$t.forEach(t),Dir=r(Wje," (Funnel Transformer model)"),Wje.forEach(t),Gir=i(X),CF=n(X,"LI",{});var Qje=s(CF);eve=n(Qje,"STRONG",{});var F$t=s(eve);Oir=r(F$t,"gptj"),F$t.forEach(t),Vir=r(Qje," \u2014 "),IU=n(Qje,"A",{href:!0});var T$t=s(IU);Xir=r(T$t,"GPTJForQuestionAnswering"),T$t.forEach(t),zir=r(Qje," (GPT-J model)"),Qje.forEach(t),Wir=i(X),wF=n(X,"LI",{});var Uje=s(wF);ove=n(Uje,"STRONG",{});var M$t=s(ove);Qir=r(M$t,"ibert"),M$t.forEach(t),Uir=r(Uje," \u2014 "),NU=n(Uje,"A",{href:!0});var E$t=s(NU);Hir=r(E$t,"IBertForQuestionAnswering"),E$t.forEach(t),Jir=r(Uje," (I-BERT model)"),Uje.forEach(t),Yir=i(X),AF=n(X,"LI",{});var Hje=s(AF);rve=n(Hje,"STRONG",{});var C$t=s(rve);Kir=r(C$t,"layoutlmv2"),C$t.forEach(t),Zir=r(Hje," \u2014 "),qU=n(Hje,"A",{href:!0});var w$t=s(qU);edr=r(w$t,"LayoutLMv2ForQuestionAnswering"),w$t.forEach(t),odr=r(Hje," (LayoutLMv2 model)"),Hje.forEach(t),rdr=i(X),LF=n(X,"LI",{});var Jje=s(LF);tve=n(Jje,"STRONG",{});var A$t=s(tve);tdr=r(A$t,"layoutlmv3"),A$t.forEach(t),adr=r(Jje," \u2014 "),jU=n(Jje,"A",{href:!0});var L$t=s(jU);ndr=r(L$t,"LayoutLMv3ForQuestionAnswering"),L$t.forEach(t),sdr=r(Jje," (LayoutLMv3 model)"),Jje.forEach(t),ldr=i(X),yF=n(X,"LI",{});var Yje=s(yF);ave=n(Yje,"STRONG",{});var y$t=s(ave);idr=r(y$t,"led"),y$t.forEach(t),ddr=r(Yje," \u2014 "),DU=n(Yje,"A",{href:!0});var x$t=s(DU);cdr=r(x$t,"LEDForQuestionAnswering"),x$t.forEach(t),fdr=r(Yje," (LED model)"),Yje.forEach(t),mdr=i(X),xF=n(X,"LI",{});var Kje=s(xF);nve=n(Kje,"STRONG",{});var $$t=s(nve);gdr=r($$t,"longformer"),$$t.forEach(t),hdr=r(Kje," \u2014 "),GU=n(Kje,"A",{href:!0});var k$t=s(GU);pdr=r(k$t,"LongformerForQuestionAnswering"),k$t.forEach(t),_dr=r(Kje," (Longformer model)"),Kje.forEach(t),udr=i(X),$F=n(X,"LI",{});var Zje=s($F);sve=n(Zje,"STRONG",{});var S$t=s(sve);bdr=r(S$t,"luke"),S$t.forEach(t),vdr=r(Zje," \u2014 "),OU=n(Zje,"A",{href:!0});var R$t=s(OU);Fdr=r(R$t,"LukeForQuestionAnswering"),R$t.forEach(t),Tdr=r(Zje," (LUKE model)"),Zje.forEach(t),Mdr=i(X),kF=n(X,"LI",{});var eDe=s(kF);lve=n(eDe,"STRONG",{});var P$t=s(lve);Edr=r(P$t,"lxmert"),P$t.forEach(t),Cdr=r(eDe," \u2014 "),VU=n(eDe,"A",{href:!0});var B$t=s(VU);wdr=r(B$t,"LxmertForQuestionAnswering"),B$t.forEach(t),Adr=r(eDe," (LXMERT model)"),eDe.forEach(t),Ldr=i(X),SF=n(X,"LI",{});var oDe=s(SF);ive=n(oDe,"STRONG",{});var I$t=s(ive);ydr=r(I$t,"mbart"),I$t.forEach(t),xdr=r(oDe," \u2014 "),XU=n(oDe,"A",{href:!0});var N$t=s(XU);$dr=r(N$t,"MBartForQuestionAnswering"),N$t.forEach(t),kdr=r(oDe," (mBART model)"),oDe.forEach(t),Sdr=i(X),RF=n(X,"LI",{});var rDe=s(RF);dve=n(rDe,"STRONG",{});var q$t=s(dve);Rdr=r(q$t,"megatron-bert"),q$t.forEach(t),Pdr=r(rDe," \u2014 "),zU=n(rDe,"A",{href:!0});var j$t=s(zU);Bdr=r(j$t,"MegatronBertForQuestionAnswering"),j$t.forEach(t),Idr=r(rDe," (Megatron-BERT model)"),rDe.forEach(t),Ndr=i(X),PF=n(X,"LI",{});var tDe=s(PF);cve=n(tDe,"STRONG",{});var D$t=s(cve);qdr=r(D$t,"mobilebert"),D$t.forEach(t),jdr=r(tDe," \u2014 "),WU=n(tDe,"A",{href:!0});var G$t=s(WU);Ddr=r(G$t,"MobileBertForQuestionAnswering"),G$t.forEach(t),Gdr=r(tDe," (MobileBERT model)"),tDe.forEach(t),Odr=i(X),BF=n(X,"LI",{});var aDe=s(BF);fve=n(aDe,"STRONG",{});var O$t=s(fve);Vdr=r(O$t,"mpnet"),O$t.forEach(t),Xdr=r(aDe," \u2014 "),QU=n(aDe,"A",{href:!0});var V$t=s(QU);zdr=r(V$t,"MPNetForQuestionAnswering"),V$t.forEach(t),Wdr=r(aDe," (MPNet model)"),aDe.forEach(t),Qdr=i(X),IF=n(X,"LI",{});var nDe=s(IF);mve=n(nDe,"STRONG",{});var X$t=s(mve);Udr=r(X$t,"mvp"),X$t.forEach(t),Hdr=r(nDe," \u2014 "),UU=n(nDe,"A",{href:!0});var z$t=s(UU);Jdr=r(z$t,"MvpForQuestionAnswering"),z$t.forEach(t),Ydr=r(nDe," (MVP model)"),nDe.forEach(t),Kdr=i(X),NF=n(X,"LI",{});var sDe=s(NF);gve=n(sDe,"STRONG",{});var W$t=s(gve);Zdr=r(W$t,"nezha"),W$t.forEach(t),ecr=r(sDe," \u2014 "),HU=n(sDe,"A",{href:!0});var Q$t=s(HU);ocr=r(Q$t,"NezhaForQuestionAnswering"),Q$t.forEach(t),rcr=r(sDe," (Nezha model)"),sDe.forEach(t),tcr=i(X),qF=n(X,"LI",{});var lDe=s(qF);hve=n(lDe,"STRONG",{});var U$t=s(hve);acr=r(U$t,"nystromformer"),U$t.forEach(t),ncr=r(lDe," \u2014 "),JU=n(lDe,"A",{href:!0});var H$t=s(JU);scr=r(H$t,"NystromformerForQuestionAnswering"),H$t.forEach(t),lcr=r(lDe," (Nystr\xF6mformer model)"),lDe.forEach(t),icr=i(X),jF=n(X,"LI",{});var iDe=s(jF);pve=n(iDe,"STRONG",{});var J$t=s(pve);dcr=r(J$t,"qdqbert"),J$t.forEach(t),ccr=r(iDe," \u2014 "),YU=n(iDe,"A",{href:!0});var Y$t=s(YU);fcr=r(Y$t,"QDQBertForQuestionAnswering"),Y$t.forEach(t),mcr=r(iDe," (QDQBert model)"),iDe.forEach(t),gcr=i(X),DF=n(X,"LI",{});var dDe=s(DF);_ve=n(dDe,"STRONG",{});var K$t=s(_ve);hcr=r(K$t,"reformer"),K$t.forEach(t),pcr=r(dDe," \u2014 "),KU=n(dDe,"A",{href:!0});var Z$t=s(KU);_cr=r(Z$t,"ReformerForQuestionAnswering"),Z$t.forEach(t),ucr=r(dDe," (Reformer model)"),dDe.forEach(t),bcr=i(X),GF=n(X,"LI",{});var cDe=s(GF);uve=n(cDe,"STRONG",{});var ekt=s(uve);vcr=r(ekt,"rembert"),ekt.forEach(t),Fcr=r(cDe," \u2014 "),ZU=n(cDe,"A",{href:!0});var okt=s(ZU);Tcr=r(okt,"RemBertForQuestionAnswering"),okt.forEach(t),Mcr=r(cDe," (RemBERT model)"),cDe.forEach(t),Ecr=i(X),OF=n(X,"LI",{});var fDe=s(OF);bve=n(fDe,"STRONG",{});var rkt=s(bve);Ccr=r(rkt,"roberta"),rkt.forEach(t),wcr=r(fDe," \u2014 "),eH=n(fDe,"A",{href:!0});var tkt=s(eH);Acr=r(tkt,"RobertaForQuestionAnswering"),tkt.forEach(t),Lcr=r(fDe," (RoBERTa model)"),fDe.forEach(t),ycr=i(X),VF=n(X,"LI",{});var mDe=s(VF);vve=n(mDe,"STRONG",{});var akt=s(vve);xcr=r(akt,"roformer"),akt.forEach(t),$cr=r(mDe," \u2014 "),oH=n(mDe,"A",{href:!0});var nkt=s(oH);kcr=r(nkt,"RoFormerForQuestionAnswering"),nkt.forEach(t),Scr=r(mDe," (RoFormer model)"),mDe.forEach(t),Rcr=i(X),XF=n(X,"LI",{});var gDe=s(XF);Fve=n(gDe,"STRONG",{});var skt=s(Fve);Pcr=r(skt,"splinter"),skt.forEach(t),Bcr=r(gDe," \u2014 "),rH=n(gDe,"A",{href:!0});var lkt=s(rH);Icr=r(lkt,"SplinterForQuestionAnswering"),lkt.forEach(t),Ncr=r(gDe," (Splinter model)"),gDe.forEach(t),qcr=i(X),zF=n(X,"LI",{});var hDe=s(zF);Tve=n(hDe,"STRONG",{});var ikt=s(Tve);jcr=r(ikt,"squeezebert"),ikt.forEach(t),Dcr=r(hDe," \u2014 "),tH=n(hDe,"A",{href:!0});var dkt=s(tH);Gcr=r(dkt,"SqueezeBertForQuestionAnswering"),dkt.forEach(t),Ocr=r(hDe," (SqueezeBERT model)"),hDe.forEach(t),Vcr=i(X),WF=n(X,"LI",{});var pDe=s(WF);Mve=n(pDe,"STRONG",{});var ckt=s(Mve);Xcr=r(ckt,"xlm"),ckt.forEach(t),zcr=r(pDe," \u2014 "),aH=n(pDe,"A",{href:!0});var fkt=s(aH);Wcr=r(fkt,"XLMForQuestionAnsweringSimple"),fkt.forEach(t),Qcr=r(pDe," (XLM model)"),pDe.forEach(t),Ucr=i(X),QF=n(X,"LI",{});var _De=s(QF);Eve=n(_De,"STRONG",{});var mkt=s(Eve);Hcr=r(mkt,"xlm-roberta"),mkt.forEach(t),Jcr=r(_De," \u2014 "),nH=n(_De,"A",{href:!0});var gkt=s(nH);Ycr=r(gkt,"XLMRobertaForQuestionAnswering"),gkt.forEach(t),Kcr=r(_De," (XLM-RoBERTa model)"),_De.forEach(t),Zcr=i(X),UF=n(X,"LI",{});var uDe=s(UF);Cve=n(uDe,"STRONG",{});var hkt=s(Cve);efr=r(hkt,"xlm-roberta-xl"),hkt.forEach(t),ofr=r(uDe," \u2014 "),sH=n(uDe,"A",{href:!0});var pkt=s(sH);rfr=r(pkt,"XLMRobertaXLForQuestionAnswering"),pkt.forEach(t),tfr=r(uDe," (XLM-RoBERTa-XL model)"),uDe.forEach(t),afr=i(X),HF=n(X,"LI",{});var bDe=s(HF);wve=n(bDe,"STRONG",{});var _kt=s(wve);nfr=r(_kt,"xlnet"),_kt.forEach(t),sfr=r(bDe," \u2014 "),lH=n(bDe,"A",{href:!0});var ukt=s(lH);lfr=r(ukt,"XLNetForQuestionAnsweringSimple"),ukt.forEach(t),ifr=r(bDe," (XLNet model)"),bDe.forEach(t),dfr=i(X),JF=n(X,"LI",{});var vDe=s(JF);Ave=n(vDe,"STRONG",{});var bkt=s(Ave);cfr=r(bkt,"yoso"),bkt.forEach(t),ffr=r(vDe," \u2014 "),iH=n(vDe,"A",{href:!0});var vkt=s(iH);mfr=r(vkt,"YosoForQuestionAnswering"),vkt.forEach(t),gfr=r(vDe," (YOSO model)"),vDe.forEach(t),X.forEach(t),hfr=i(Ea),YF=n(Ea,"P",{});var FDe=s(YF);pfr=r(FDe,"The model is set in evaluation mode by default using "),Lve=n(FDe,"CODE",{});var Fkt=s(Lve);_fr=r(Fkt,"model.eval()"),Fkt.forEach(t),ufr=r(FDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=n(FDe,"CODE",{});var Tkt=s(yve);bfr=r(Tkt,"model.train()"),Tkt.forEach(t),FDe.forEach(t),vfr=i(Ea),T(KF.$$.fragment,Ea),Ea.forEach(t),Al.forEach(t),MUe=i(f),Bd=n(f,"H2",{class:!0});var SJe=s(Bd);ZF=n(SJe,"A",{id:!0,class:!0,href:!0});var Mkt=s(ZF);xve=n(Mkt,"SPAN",{});var Ekt=s(xve);T(B9.$$.fragment,Ekt),Ekt.forEach(t),Mkt.forEach(t),Ffr=i(SJe),$ve=n(SJe,"SPAN",{});var Ckt=s($ve);Tfr=r(Ckt,"AutoModelForTableQuestionAnswering"),Ckt.forEach(t),SJe.forEach(t),EUe=i(f),Vo=n(f,"DIV",{class:!0});var Ll=s(Vo);T(I9.$$.fragment,Ll),Mfr=i(Ll),Id=n(Ll,"P",{});var mne=s(Id);Efr=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dH=n(mne,"A",{href:!0});var wkt=s(dH);Cfr=r(wkt,"from_pretrained()"),wkt.forEach(t),wfr=r(mne," class method or the "),cH=n(mne,"A",{href:!0});var Akt=s(cH);Afr=r(Akt,"from_config()"),Akt.forEach(t),Lfr=r(mne,` class
method.`),mne.forEach(t),yfr=i(Ll),N9=n(Ll,"P",{});var RJe=s(N9);xfr=r(RJe,"This class cannot be instantiated directly using "),kve=n(RJe,"CODE",{});var Lkt=s(kve);$fr=r(Lkt,"__init__()"),Lkt.forEach(t),kfr=r(RJe," (throws an error)."),RJe.forEach(t),Sfr=i(Ll),Mt=n(Ll,"DIV",{class:!0});var SL=s(Mt);T(q9.$$.fragment,SL),Rfr=i(SL),Sve=n(SL,"P",{});var ykt=s(Sve);Pfr=r(ykt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ykt.forEach(t),Bfr=i(SL),Nd=n(SL,"P",{});var gne=s(Nd);Ifr=r(gne,`Note:
Loading a model from its configuration file does `),Rve=n(gne,"STRONG",{});var xkt=s(Rve);Nfr=r(xkt,"not"),xkt.forEach(t),qfr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(gne,"A",{href:!0});var $kt=s(fH);jfr=r($kt,"from_pretrained()"),$kt.forEach(t),Dfr=r(gne," to load the model weights."),gne.forEach(t),Gfr=i(SL),T(eT.$$.fragment,SL),SL.forEach(t),Ofr=i(Ll),lo=n(Ll,"DIV",{class:!0});var Ca=s(lo);T(j9.$$.fragment,Ca),Vfr=i(Ca),Pve=n(Ca,"P",{});var kkt=s(Pve);Xfr=r(kkt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kkt.forEach(t),zfr=i(Ca),Za=n(Ca,"P",{});var RL=s(Za);Wfr=r(RL,"The model class to instantiate is selected based on the "),Bve=n(RL,"CODE",{});var Skt=s(Bve);Qfr=r(Skt,"model_type"),Skt.forEach(t),Ufr=r(RL,` property of the config object (either
passed as an argument or loaded from `),Ive=n(RL,"CODE",{});var Rkt=s(Ive);Hfr=r(Rkt,"pretrained_model_name_or_path"),Rkt.forEach(t),Jfr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(RL,"CODE",{});var Pkt=s(Nve);Yfr=r(Pkt,"pretrained_model_name_or_path"),Pkt.forEach(t),Kfr=r(RL,":"),RL.forEach(t),Zfr=i(Ca),qve=n(Ca,"UL",{});var Bkt=s(qve);oT=n(Bkt,"LI",{});var TDe=s(oT);jve=n(TDe,"STRONG",{});var Ikt=s(jve);emr=r(Ikt,"tapas"),Ikt.forEach(t),omr=r(TDe," \u2014 "),mH=n(TDe,"A",{href:!0});var Nkt=s(mH);rmr=r(Nkt,"TapasForQuestionAnswering"),Nkt.forEach(t),tmr=r(TDe," (TAPAS model)"),TDe.forEach(t),Bkt.forEach(t),amr=i(Ca),rT=n(Ca,"P",{});var MDe=s(rT);nmr=r(MDe,"The model is set in evaluation mode by default using "),Dve=n(MDe,"CODE",{});var qkt=s(Dve);smr=r(qkt,"model.eval()"),qkt.forEach(t),lmr=r(MDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gve=n(MDe,"CODE",{});var jkt=s(Gve);imr=r(jkt,"model.train()"),jkt.forEach(t),MDe.forEach(t),dmr=i(Ca),T(tT.$$.fragment,Ca),Ca.forEach(t),Ll.forEach(t),CUe=i(f),qd=n(f,"H2",{class:!0});var PJe=s(qd);aT=n(PJe,"A",{id:!0,class:!0,href:!0});var Dkt=s(aT);Ove=n(Dkt,"SPAN",{});var Gkt=s(Ove);T(D9.$$.fragment,Gkt),Gkt.forEach(t),Dkt.forEach(t),cmr=i(PJe),Vve=n(PJe,"SPAN",{});var Okt=s(Vve);fmr=r(Okt,"AutoModelForImageClassification"),Okt.forEach(t),PJe.forEach(t),wUe=i(f),Xo=n(f,"DIV",{class:!0});var yl=s(Xo);T(G9.$$.fragment,yl),mmr=i(yl),jd=n(yl,"P",{});var hne=s(jd);gmr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gH=n(hne,"A",{href:!0});var Vkt=s(gH);hmr=r(Vkt,"from_pretrained()"),Vkt.forEach(t),pmr=r(hne," class method or the "),hH=n(hne,"A",{href:!0});var Xkt=s(hH);_mr=r(Xkt,"from_config()"),Xkt.forEach(t),umr=r(hne,` class
method.`),hne.forEach(t),bmr=i(yl),O9=n(yl,"P",{});var BJe=s(O9);vmr=r(BJe,"This class cannot be instantiated directly using "),Xve=n(BJe,"CODE",{});var zkt=s(Xve);Fmr=r(zkt,"__init__()"),zkt.forEach(t),Tmr=r(BJe," (throws an error)."),BJe.forEach(t),Mmr=i(yl),Et=n(yl,"DIV",{class:!0});var PL=s(Et);T(V9.$$.fragment,PL),Emr=i(PL),zve=n(PL,"P",{});var Wkt=s(zve);Cmr=r(Wkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wkt.forEach(t),wmr=i(PL),Dd=n(PL,"P",{});var pne=s(Dd);Amr=r(pne,`Note:
Loading a model from its configuration file does `),Wve=n(pne,"STRONG",{});var Qkt=s(Wve);Lmr=r(Qkt,"not"),Qkt.forEach(t),ymr=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(pne,"A",{href:!0});var Ukt=s(pH);xmr=r(Ukt,"from_pretrained()"),Ukt.forEach(t),$mr=r(pne," to load the model weights."),pne.forEach(t),kmr=i(PL),T(nT.$$.fragment,PL),PL.forEach(t),Smr=i(yl),io=n(yl,"DIV",{class:!0});var wa=s(io);T(X9.$$.fragment,wa),Rmr=i(wa),Qve=n(wa,"P",{});var Hkt=s(Qve);Pmr=r(Hkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hkt.forEach(t),Bmr=i(wa),en=n(wa,"P",{});var BL=s(en);Imr=r(BL,"The model class to instantiate is selected based on the "),Uve=n(BL,"CODE",{});var Jkt=s(Uve);Nmr=r(Jkt,"model_type"),Jkt.forEach(t),qmr=r(BL,` property of the config object (either
passed as an argument or loaded from `),Hve=n(BL,"CODE",{});var Ykt=s(Hve);jmr=r(Ykt,"pretrained_model_name_or_path"),Ykt.forEach(t),Dmr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(BL,"CODE",{});var Kkt=s(Jve);Gmr=r(Kkt,"pretrained_model_name_or_path"),Kkt.forEach(t),Omr=r(BL,":"),BL.forEach(t),Vmr=i(wa),be=n(wa,"UL",{});var Fe=s(be);sT=n(Fe,"LI",{});var EDe=s(sT);Yve=n(EDe,"STRONG",{});var Zkt=s(Yve);Xmr=r(Zkt,"beit"),Zkt.forEach(t),zmr=r(EDe," \u2014 "),_H=n(EDe,"A",{href:!0});var eSt=s(_H);Wmr=r(eSt,"BeitForImageClassification"),eSt.forEach(t),Qmr=r(EDe," (BEiT model)"),EDe.forEach(t),Umr=i(Fe),lT=n(Fe,"LI",{});var CDe=s(lT);Kve=n(CDe,"STRONG",{});var oSt=s(Kve);Hmr=r(oSt,"convnext"),oSt.forEach(t),Jmr=r(CDe," \u2014 "),uH=n(CDe,"A",{href:!0});var rSt=s(uH);Ymr=r(rSt,"ConvNextForImageClassification"),rSt.forEach(t),Kmr=r(CDe," (ConvNeXT model)"),CDe.forEach(t),Zmr=i(Fe),iT=n(Fe,"LI",{});var wDe=s(iT);Zve=n(wDe,"STRONG",{});var tSt=s(Zve);egr=r(tSt,"cvt"),tSt.forEach(t),ogr=r(wDe," \u2014 "),bH=n(wDe,"A",{href:!0});var aSt=s(bH);rgr=r(aSt,"CvtForImageClassification"),aSt.forEach(t),tgr=r(wDe," (CvT model)"),wDe.forEach(t),agr=i(Fe),dT=n(Fe,"LI",{});var ADe=s(dT);e5e=n(ADe,"STRONG",{});var nSt=s(e5e);ngr=r(nSt,"data2vec-vision"),nSt.forEach(t),sgr=r(ADe," \u2014 "),vH=n(ADe,"A",{href:!0});var sSt=s(vH);lgr=r(sSt,"Data2VecVisionForImageClassification"),sSt.forEach(t),igr=r(ADe," (Data2VecVision model)"),ADe.forEach(t),dgr=i(Fe),dl=n(Fe,"LI",{});var rP=s(dl);o5e=n(rP,"STRONG",{});var lSt=s(o5e);cgr=r(lSt,"deit"),lSt.forEach(t),fgr=r(rP," \u2014 "),FH=n(rP,"A",{href:!0});var iSt=s(FH);mgr=r(iSt,"DeiTForImageClassification"),iSt.forEach(t),ggr=r(rP," or "),TH=n(rP,"A",{href:!0});var dSt=s(TH);hgr=r(dSt,"DeiTForImageClassificationWithTeacher"),dSt.forEach(t),pgr=r(rP," (DeiT model)"),rP.forEach(t),_gr=i(Fe),cT=n(Fe,"LI",{});var LDe=s(cT);r5e=n(LDe,"STRONG",{});var cSt=s(r5e);ugr=r(cSt,"imagegpt"),cSt.forEach(t),bgr=r(LDe," \u2014 "),MH=n(LDe,"A",{href:!0});var fSt=s(MH);vgr=r(fSt,"ImageGPTForImageClassification"),fSt.forEach(t),Fgr=r(LDe," (ImageGPT model)"),LDe.forEach(t),Tgr=i(Fe),cl=n(Fe,"LI",{});var tP=s(cl);t5e=n(tP,"STRONG",{});var mSt=s(t5e);Mgr=r(mSt,"levit"),mSt.forEach(t),Egr=r(tP," \u2014 "),EH=n(tP,"A",{href:!0});var gSt=s(EH);Cgr=r(gSt,"LevitForImageClassification"),gSt.forEach(t),wgr=r(tP," or "),CH=n(tP,"A",{href:!0});var hSt=s(CH);Agr=r(hSt,"LevitForImageClassificationWithTeacher"),hSt.forEach(t),Lgr=r(tP," (LeViT model)"),tP.forEach(t),ygr=i(Fe),fT=n(Fe,"LI",{});var yDe=s(fT);a5e=n(yDe,"STRONG",{});var pSt=s(a5e);xgr=r(pSt,"mobilevit"),pSt.forEach(t),$gr=r(yDe," \u2014 "),wH=n(yDe,"A",{href:!0});var _St=s(wH);kgr=r(_St,"MobileViTForImageClassification"),_St.forEach(t),Sgr=r(yDe," (MobileViT model)"),yDe.forEach(t),Rgr=i(Fe),Ct=n(Fe,"LI",{});var rm=s(Ct);n5e=n(rm,"STRONG",{});var uSt=s(n5e);Pgr=r(uSt,"perceiver"),uSt.forEach(t),Bgr=r(rm," \u2014 "),AH=n(rm,"A",{href:!0});var bSt=s(AH);Igr=r(bSt,"PerceiverForImageClassificationLearned"),bSt.forEach(t),Ngr=r(rm," or "),LH=n(rm,"A",{href:!0});var vSt=s(LH);qgr=r(vSt,"PerceiverForImageClassificationFourier"),vSt.forEach(t),jgr=r(rm," or "),yH=n(rm,"A",{href:!0});var FSt=s(yH);Dgr=r(FSt,"PerceiverForImageClassificationConvProcessing"),FSt.forEach(t),Ggr=r(rm," (Perceiver model)"),rm.forEach(t),Ogr=i(Fe),mT=n(Fe,"LI",{});var xDe=s(mT);s5e=n(xDe,"STRONG",{});var TSt=s(s5e);Vgr=r(TSt,"poolformer"),TSt.forEach(t),Xgr=r(xDe," \u2014 "),xH=n(xDe,"A",{href:!0});var MSt=s(xH);zgr=r(MSt,"PoolFormerForImageClassification"),MSt.forEach(t),Wgr=r(xDe," (PoolFormer model)"),xDe.forEach(t),Qgr=i(Fe),gT=n(Fe,"LI",{});var $De=s(gT);l5e=n($De,"STRONG",{});var ESt=s(l5e);Ugr=r(ESt,"regnet"),ESt.forEach(t),Hgr=r($De," \u2014 "),$H=n($De,"A",{href:!0});var CSt=s($H);Jgr=r(CSt,"RegNetForImageClassification"),CSt.forEach(t),Ygr=r($De," (RegNet model)"),$De.forEach(t),Kgr=i(Fe),hT=n(Fe,"LI",{});var kDe=s(hT);i5e=n(kDe,"STRONG",{});var wSt=s(i5e);Zgr=r(wSt,"resnet"),wSt.forEach(t),ehr=r(kDe," \u2014 "),kH=n(kDe,"A",{href:!0});var ASt=s(kH);ohr=r(ASt,"ResNetForImageClassification"),ASt.forEach(t),rhr=r(kDe," (ResNet model)"),kDe.forEach(t),thr=i(Fe),pT=n(Fe,"LI",{});var SDe=s(pT);d5e=n(SDe,"STRONG",{});var LSt=s(d5e);ahr=r(LSt,"segformer"),LSt.forEach(t),nhr=r(SDe," \u2014 "),SH=n(SDe,"A",{href:!0});var ySt=s(SH);shr=r(ySt,"SegformerForImageClassification"),ySt.forEach(t),lhr=r(SDe," (SegFormer model)"),SDe.forEach(t),ihr=i(Fe),_T=n(Fe,"LI",{});var RDe=s(_T);c5e=n(RDe,"STRONG",{});var xSt=s(c5e);dhr=r(xSt,"swin"),xSt.forEach(t),chr=r(RDe," \u2014 "),RH=n(RDe,"A",{href:!0});var $St=s(RH);fhr=r($St,"SwinForImageClassification"),$St.forEach(t),mhr=r(RDe," (Swin Transformer model)"),RDe.forEach(t),ghr=i(Fe),uT=n(Fe,"LI",{});var PDe=s(uT);f5e=n(PDe,"STRONG",{});var kSt=s(f5e);hhr=r(kSt,"swinv2"),kSt.forEach(t),phr=r(PDe," \u2014 "),PH=n(PDe,"A",{href:!0});var SSt=s(PH);_hr=r(SSt,"Swinv2ForImageClassification"),SSt.forEach(t),uhr=r(PDe," (Swin Transformer V2 model)"),PDe.forEach(t),bhr=i(Fe),bT=n(Fe,"LI",{});var BDe=s(bT);m5e=n(BDe,"STRONG",{});var RSt=s(m5e);vhr=r(RSt,"van"),RSt.forEach(t),Fhr=r(BDe," \u2014 "),BH=n(BDe,"A",{href:!0});var PSt=s(BH);Thr=r(PSt,"VanForImageClassification"),PSt.forEach(t),Mhr=r(BDe," (VAN model)"),BDe.forEach(t),Ehr=i(Fe),vT=n(Fe,"LI",{});var IDe=s(vT);g5e=n(IDe,"STRONG",{});var BSt=s(g5e);Chr=r(BSt,"vit"),BSt.forEach(t),whr=r(IDe," \u2014 "),IH=n(IDe,"A",{href:!0});var ISt=s(IH);Ahr=r(ISt,"ViTForImageClassification"),ISt.forEach(t),Lhr=r(IDe," (ViT model)"),IDe.forEach(t),Fe.forEach(t),yhr=i(wa),FT=n(wa,"P",{});var NDe=s(FT);xhr=r(NDe,"The model is set in evaluation mode by default using "),h5e=n(NDe,"CODE",{});var NSt=s(h5e);$hr=r(NSt,"model.eval()"),NSt.forEach(t),khr=r(NDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p5e=n(NDe,"CODE",{});var qSt=s(p5e);Shr=r(qSt,"model.train()"),qSt.forEach(t),NDe.forEach(t),Rhr=i(wa),T(TT.$$.fragment,wa),wa.forEach(t),yl.forEach(t),AUe=i(f),Gd=n(f,"H2",{class:!0});var IJe=s(Gd);MT=n(IJe,"A",{id:!0,class:!0,href:!0});var jSt=s(MT);_5e=n(jSt,"SPAN",{});var DSt=s(_5e);T(z9.$$.fragment,DSt),DSt.forEach(t),jSt.forEach(t),Phr=i(IJe),u5e=n(IJe,"SPAN",{});var GSt=s(u5e);Bhr=r(GSt,"AutoModelForVideoClassification"),GSt.forEach(t),IJe.forEach(t),LUe=i(f),zo=n(f,"DIV",{class:!0});var xl=s(zo);T(W9.$$.fragment,xl),Ihr=i(xl),Od=n(xl,"P",{});var _ne=s(Od);Nhr=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),NH=n(_ne,"A",{href:!0});var OSt=s(NH);qhr=r(OSt,"from_pretrained()"),OSt.forEach(t),jhr=r(_ne," class method or the "),qH=n(_ne,"A",{href:!0});var VSt=s(qH);Dhr=r(VSt,"from_config()"),VSt.forEach(t),Ghr=r(_ne,` class
method.`),_ne.forEach(t),Ohr=i(xl),Q9=n(xl,"P",{});var NJe=s(Q9);Vhr=r(NJe,"This class cannot be instantiated directly using "),b5e=n(NJe,"CODE",{});var XSt=s(b5e);Xhr=r(XSt,"__init__()"),XSt.forEach(t),zhr=r(NJe," (throws an error)."),NJe.forEach(t),Whr=i(xl),wt=n(xl,"DIV",{class:!0});var IL=s(wt);T(U9.$$.fragment,IL),Qhr=i(IL),v5e=n(IL,"P",{});var zSt=s(v5e);Uhr=r(zSt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),zSt.forEach(t),Hhr=i(IL),Vd=n(IL,"P",{});var une=s(Vd);Jhr=r(une,`Note:
Loading a model from its configuration file does `),F5e=n(une,"STRONG",{});var WSt=s(F5e);Yhr=r(WSt,"not"),WSt.forEach(t),Khr=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(une,"A",{href:!0});var QSt=s(jH);Zhr=r(QSt,"from_pretrained()"),QSt.forEach(t),epr=r(une," to load the model weights."),une.forEach(t),opr=i(IL),T(ET.$$.fragment,IL),IL.forEach(t),rpr=i(xl),co=n(xl,"DIV",{class:!0});var Aa=s(co);T(H9.$$.fragment,Aa),tpr=i(Aa),T5e=n(Aa,"P",{});var USt=s(T5e);apr=r(USt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),USt.forEach(t),npr=i(Aa),on=n(Aa,"P",{});var NL=s(on);spr=r(NL,"The model class to instantiate is selected based on the "),M5e=n(NL,"CODE",{});var HSt=s(M5e);lpr=r(HSt,"model_type"),HSt.forEach(t),ipr=r(NL,` property of the config object (either
passed as an argument or loaded from `),E5e=n(NL,"CODE",{});var JSt=s(E5e);dpr=r(JSt,"pretrained_model_name_or_path"),JSt.forEach(t),cpr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=n(NL,"CODE",{});var YSt=s(C5e);fpr=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),mpr=r(NL,":"),NL.forEach(t),gpr=i(Aa),w5e=n(Aa,"UL",{});var KSt=s(w5e);CT=n(KSt,"LI",{});var qDe=s(CT);A5e=n(qDe,"STRONG",{});var ZSt=s(A5e);hpr=r(ZSt,"videomae"),ZSt.forEach(t),ppr=r(qDe," \u2014 "),DH=n(qDe,"A",{href:!0});var eRt=s(DH);_pr=r(eRt,"VideoMAEForVideoClassification"),eRt.forEach(t),upr=r(qDe," (VideoMAE model)"),qDe.forEach(t),KSt.forEach(t),bpr=i(Aa),wT=n(Aa,"P",{});var jDe=s(wT);vpr=r(jDe,"The model is set in evaluation mode by default using "),L5e=n(jDe,"CODE",{});var oRt=s(L5e);Fpr=r(oRt,"model.eval()"),oRt.forEach(t),Tpr=r(jDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y5e=n(jDe,"CODE",{});var rRt=s(y5e);Mpr=r(rRt,"model.train()"),rRt.forEach(t),jDe.forEach(t),Epr=i(Aa),T(AT.$$.fragment,Aa),Aa.forEach(t),xl.forEach(t),yUe=i(f),Xd=n(f,"H2",{class:!0});var qJe=s(Xd);LT=n(qJe,"A",{id:!0,class:!0,href:!0});var tRt=s(LT);x5e=n(tRt,"SPAN",{});var aRt=s(x5e);T(J9.$$.fragment,aRt),aRt.forEach(t),tRt.forEach(t),Cpr=i(qJe),$5e=n(qJe,"SPAN",{});var nRt=s($5e);wpr=r(nRt,"AutoModelForVision2Seq"),nRt.forEach(t),qJe.forEach(t),xUe=i(f),Wo=n(f,"DIV",{class:!0});var $l=s(Wo);T(Y9.$$.fragment,$l),Apr=i($l),zd=n($l,"P",{});var bne=s(zd);Lpr=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GH=n(bne,"A",{href:!0});var sRt=s(GH);ypr=r(sRt,"from_pretrained()"),sRt.forEach(t),xpr=r(bne," class method or the "),OH=n(bne,"A",{href:!0});var lRt=s(OH);$pr=r(lRt,"from_config()"),lRt.forEach(t),kpr=r(bne,` class
method.`),bne.forEach(t),Spr=i($l),K9=n($l,"P",{});var jJe=s(K9);Rpr=r(jJe,"This class cannot be instantiated directly using "),k5e=n(jJe,"CODE",{});var iRt=s(k5e);Ppr=r(iRt,"__init__()"),iRt.forEach(t),Bpr=r(jJe," (throws an error)."),jJe.forEach(t),Ipr=i($l),At=n($l,"DIV",{class:!0});var qL=s(At);T(Z9.$$.fragment,qL),Npr=i(qL),S5e=n(qL,"P",{});var dRt=s(S5e);qpr=r(dRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dRt.forEach(t),jpr=i(qL),Wd=n(qL,"P",{});var vne=s(Wd);Dpr=r(vne,`Note:
Loading a model from its configuration file does `),R5e=n(vne,"STRONG",{});var cRt=s(R5e);Gpr=r(cRt,"not"),cRt.forEach(t),Opr=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(vne,"A",{href:!0});var fRt=s(VH);Vpr=r(fRt,"from_pretrained()"),fRt.forEach(t),Xpr=r(vne," to load the model weights."),vne.forEach(t),zpr=i(qL),T(yT.$$.fragment,qL),qL.forEach(t),Wpr=i($l),fo=n($l,"DIV",{class:!0});var La=s(fo);T(ex.$$.fragment,La),Qpr=i(La),P5e=n(La,"P",{});var mRt=s(P5e);Upr=r(mRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mRt.forEach(t),Hpr=i(La),rn=n(La,"P",{});var jL=s(rn);Jpr=r(jL,"The model class to instantiate is selected based on the "),B5e=n(jL,"CODE",{});var gRt=s(B5e);Ypr=r(gRt,"model_type"),gRt.forEach(t),Kpr=r(jL,` property of the config object (either
passed as an argument or loaded from `),I5e=n(jL,"CODE",{});var hRt=s(I5e);Zpr=r(hRt,"pretrained_model_name_or_path"),hRt.forEach(t),e_r=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(jL,"CODE",{});var pRt=s(N5e);o_r=r(pRt,"pretrained_model_name_or_path"),pRt.forEach(t),r_r=r(jL,":"),jL.forEach(t),t_r=i(La),q5e=n(La,"UL",{});var _Rt=s(q5e);xT=n(_Rt,"LI",{});var DDe=s(xT);j5e=n(DDe,"STRONG",{});var uRt=s(j5e);a_r=r(uRt,"vision-encoder-decoder"),uRt.forEach(t),n_r=r(DDe," \u2014 "),XH=n(DDe,"A",{href:!0});var bRt=s(XH);s_r=r(bRt,"VisionEncoderDecoderModel"),bRt.forEach(t),l_r=r(DDe," (Vision Encoder decoder model)"),DDe.forEach(t),_Rt.forEach(t),i_r=i(La),$T=n(La,"P",{});var GDe=s($T);d_r=r(GDe,"The model is set in evaluation mode by default using "),D5e=n(GDe,"CODE",{});var vRt=s(D5e);c_r=r(vRt,"model.eval()"),vRt.forEach(t),f_r=r(GDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G5e=n(GDe,"CODE",{});var FRt=s(G5e);m_r=r(FRt,"model.train()"),FRt.forEach(t),GDe.forEach(t),g_r=i(La),T(kT.$$.fragment,La),La.forEach(t),$l.forEach(t),$Ue=i(f),Qd=n(f,"H2",{class:!0});var DJe=s(Qd);ST=n(DJe,"A",{id:!0,class:!0,href:!0});var TRt=s(ST);O5e=n(TRt,"SPAN",{});var MRt=s(O5e);T(ox.$$.fragment,MRt),MRt.forEach(t),TRt.forEach(t),h_r=i(DJe),V5e=n(DJe,"SPAN",{});var ERt=s(V5e);p_r=r(ERt,"AutoModelForVisualQuestionAnswering"),ERt.forEach(t),DJe.forEach(t),kUe=i(f),Qo=n(f,"DIV",{class:!0});var kl=s(Qo);T(rx.$$.fragment,kl),__r=i(kl),Ud=n(kl,"P",{});var Fne=s(Ud);u_r=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),zH=n(Fne,"A",{href:!0});var CRt=s(zH);b_r=r(CRt,"from_pretrained()"),CRt.forEach(t),v_r=r(Fne," class method or the "),WH=n(Fne,"A",{href:!0});var wRt=s(WH);F_r=r(wRt,"from_config()"),wRt.forEach(t),T_r=r(Fne,` class
method.`),Fne.forEach(t),M_r=i(kl),tx=n(kl,"P",{});var GJe=s(tx);E_r=r(GJe,"This class cannot be instantiated directly using "),X5e=n(GJe,"CODE",{});var ARt=s(X5e);C_r=r(ARt,"__init__()"),ARt.forEach(t),w_r=r(GJe," (throws an error)."),GJe.forEach(t),A_r=i(kl),Lt=n(kl,"DIV",{class:!0});var DL=s(Lt);T(ax.$$.fragment,DL),L_r=i(DL),z5e=n(DL,"P",{});var LRt=s(z5e);y_r=r(LRt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),LRt.forEach(t),x_r=i(DL),Hd=n(DL,"P",{});var Tne=s(Hd);$_r=r(Tne,`Note:
Loading a model from its configuration file does `),W5e=n(Tne,"STRONG",{});var yRt=s(W5e);k_r=r(yRt,"not"),yRt.forEach(t),S_r=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(Tne,"A",{href:!0});var xRt=s(QH);R_r=r(xRt,"from_pretrained()"),xRt.forEach(t),P_r=r(Tne," to load the model weights."),Tne.forEach(t),B_r=i(DL),T(RT.$$.fragment,DL),DL.forEach(t),I_r=i(kl),mo=n(kl,"DIV",{class:!0});var ya=s(mo);T(nx.$$.fragment,ya),N_r=i(ya),Q5e=n(ya,"P",{});var $Rt=s(Q5e);q_r=r($Rt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),$Rt.forEach(t),j_r=i(ya),tn=n(ya,"P",{});var GL=s(tn);D_r=r(GL,"The model class to instantiate is selected based on the "),U5e=n(GL,"CODE",{});var kRt=s(U5e);G_r=r(kRt,"model_type"),kRt.forEach(t),O_r=r(GL,` property of the config object (either
passed as an argument or loaded from `),H5e=n(GL,"CODE",{});var SRt=s(H5e);V_r=r(SRt,"pretrained_model_name_or_path"),SRt.forEach(t),X_r=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=n(GL,"CODE",{});var RRt=s(J5e);z_r=r(RRt,"pretrained_model_name_or_path"),RRt.forEach(t),W_r=r(GL,":"),GL.forEach(t),Q_r=i(ya),Y5e=n(ya,"UL",{});var PRt=s(Y5e);PT=n(PRt,"LI",{});var ODe=s(PT);K5e=n(ODe,"STRONG",{});var BRt=s(K5e);U_r=r(BRt,"vilt"),BRt.forEach(t),H_r=r(ODe," \u2014 "),UH=n(ODe,"A",{href:!0});var IRt=s(UH);J_r=r(IRt,"ViltForQuestionAnswering"),IRt.forEach(t),Y_r=r(ODe," (ViLT model)"),ODe.forEach(t),PRt.forEach(t),K_r=i(ya),BT=n(ya,"P",{});var VDe=s(BT);Z_r=r(VDe,"The model is set in evaluation mode by default using "),Z5e=n(VDe,"CODE",{});var NRt=s(Z5e);eur=r(NRt,"model.eval()"),NRt.forEach(t),our=r(VDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eFe=n(VDe,"CODE",{});var qRt=s(eFe);rur=r(qRt,"model.train()"),qRt.forEach(t),VDe.forEach(t),tur=i(ya),T(IT.$$.fragment,ya),ya.forEach(t),kl.forEach(t),SUe=i(f),Jd=n(f,"H2",{class:!0});var OJe=s(Jd);NT=n(OJe,"A",{id:!0,class:!0,href:!0});var jRt=s(NT);oFe=n(jRt,"SPAN",{});var DRt=s(oFe);T(sx.$$.fragment,DRt),DRt.forEach(t),jRt.forEach(t),aur=i(OJe),rFe=n(OJe,"SPAN",{});var GRt=s(rFe);nur=r(GRt,"AutoModelForAudioClassification"),GRt.forEach(t),OJe.forEach(t),RUe=i(f),Uo=n(f,"DIV",{class:!0});var Sl=s(Uo);T(lx.$$.fragment,Sl),sur=i(Sl),Yd=n(Sl,"P",{});var Mne=s(Yd);lur=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HH=n(Mne,"A",{href:!0});var ORt=s(HH);iur=r(ORt,"from_pretrained()"),ORt.forEach(t),dur=r(Mne," class method or the "),JH=n(Mne,"A",{href:!0});var VRt=s(JH);cur=r(VRt,"from_config()"),VRt.forEach(t),fur=r(Mne,` class
method.`),Mne.forEach(t),mur=i(Sl),ix=n(Sl,"P",{});var VJe=s(ix);gur=r(VJe,"This class cannot be instantiated directly using "),tFe=n(VJe,"CODE",{});var XRt=s(tFe);hur=r(XRt,"__init__()"),XRt.forEach(t),pur=r(VJe," (throws an error)."),VJe.forEach(t),_ur=i(Sl),yt=n(Sl,"DIV",{class:!0});var OL=s(yt);T(dx.$$.fragment,OL),uur=i(OL),aFe=n(OL,"P",{});var zRt=s(aFe);bur=r(zRt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),zRt.forEach(t),vur=i(OL),Kd=n(OL,"P",{});var Ene=s(Kd);Fur=r(Ene,`Note:
Loading a model from its configuration file does `),nFe=n(Ene,"STRONG",{});var WRt=s(nFe);Tur=r(WRt,"not"),WRt.forEach(t),Mur=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(Ene,"A",{href:!0});var QRt=s(YH);Eur=r(QRt,"from_pretrained()"),QRt.forEach(t),Cur=r(Ene," to load the model weights."),Ene.forEach(t),wur=i(OL),T(qT.$$.fragment,OL),OL.forEach(t),Aur=i(Sl),go=n(Sl,"DIV",{class:!0});var xa=s(go);T(cx.$$.fragment,xa),Lur=i(xa),sFe=n(xa,"P",{});var URt=s(sFe);yur=r(URt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),URt.forEach(t),xur=i(xa),an=n(xa,"P",{});var VL=s(an);$ur=r(VL,"The model class to instantiate is selected based on the "),lFe=n(VL,"CODE",{});var HRt=s(lFe);kur=r(HRt,"model_type"),HRt.forEach(t),Sur=r(VL,` property of the config object (either
passed as an argument or loaded from `),iFe=n(VL,"CODE",{});var JRt=s(iFe);Rur=r(JRt,"pretrained_model_name_or_path"),JRt.forEach(t),Pur=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(VL,"CODE",{});var YRt=s(dFe);Bur=r(YRt,"pretrained_model_name_or_path"),YRt.forEach(t),Iur=r(VL,":"),VL.forEach(t),Nur=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);jT=n(We,"LI",{});var XDe=s(jT);cFe=n(XDe,"STRONG",{});var KRt=s(cFe);qur=r(KRt,"data2vec-audio"),KRt.forEach(t),jur=r(XDe," \u2014 "),KH=n(XDe,"A",{href:!0});var ZRt=s(KH);Dur=r(ZRt,"Data2VecAudioForSequenceClassification"),ZRt.forEach(t),Gur=r(XDe," (Data2VecAudio model)"),XDe.forEach(t),Our=i(We),DT=n(We,"LI",{});var zDe=s(DT);fFe=n(zDe,"STRONG",{});var ePt=s(fFe);Vur=r(ePt,"hubert"),ePt.forEach(t),Xur=r(zDe," \u2014 "),ZH=n(zDe,"A",{href:!0});var oPt=s(ZH);zur=r(oPt,"HubertForSequenceClassification"),oPt.forEach(t),Wur=r(zDe," (Hubert model)"),zDe.forEach(t),Qur=i(We),GT=n(We,"LI",{});var WDe=s(GT);mFe=n(WDe,"STRONG",{});var rPt=s(mFe);Uur=r(rPt,"sew"),rPt.forEach(t),Hur=r(WDe," \u2014 "),eJ=n(WDe,"A",{href:!0});var tPt=s(eJ);Jur=r(tPt,"SEWForSequenceClassification"),tPt.forEach(t),Yur=r(WDe," (SEW model)"),WDe.forEach(t),Kur=i(We),OT=n(We,"LI",{});var QDe=s(OT);gFe=n(QDe,"STRONG",{});var aPt=s(gFe);Zur=r(aPt,"sew-d"),aPt.forEach(t),e2r=r(QDe," \u2014 "),oJ=n(QDe,"A",{href:!0});var nPt=s(oJ);o2r=r(nPt,"SEWDForSequenceClassification"),nPt.forEach(t),r2r=r(QDe," (SEW-D model)"),QDe.forEach(t),t2r=i(We),VT=n(We,"LI",{});var UDe=s(VT);hFe=n(UDe,"STRONG",{});var sPt=s(hFe);a2r=r(sPt,"unispeech"),sPt.forEach(t),n2r=r(UDe," \u2014 "),rJ=n(UDe,"A",{href:!0});var lPt=s(rJ);s2r=r(lPt,"UniSpeechForSequenceClassification"),lPt.forEach(t),l2r=r(UDe," (UniSpeech model)"),UDe.forEach(t),i2r=i(We),XT=n(We,"LI",{});var HDe=s(XT);pFe=n(HDe,"STRONG",{});var iPt=s(pFe);d2r=r(iPt,"unispeech-sat"),iPt.forEach(t),c2r=r(HDe," \u2014 "),tJ=n(HDe,"A",{href:!0});var dPt=s(tJ);f2r=r(dPt,"UniSpeechSatForSequenceClassification"),dPt.forEach(t),m2r=r(HDe," (UniSpeechSat model)"),HDe.forEach(t),g2r=i(We),zT=n(We,"LI",{});var JDe=s(zT);_Fe=n(JDe,"STRONG",{});var cPt=s(_Fe);h2r=r(cPt,"wav2vec2"),cPt.forEach(t),p2r=r(JDe," \u2014 "),aJ=n(JDe,"A",{href:!0});var fPt=s(aJ);_2r=r(fPt,"Wav2Vec2ForSequenceClassification"),fPt.forEach(t),u2r=r(JDe," (Wav2Vec2 model)"),JDe.forEach(t),b2r=i(We),WT=n(We,"LI",{});var YDe=s(WT);uFe=n(YDe,"STRONG",{});var mPt=s(uFe);v2r=r(mPt,"wav2vec2-conformer"),mPt.forEach(t),F2r=r(YDe," \u2014 "),nJ=n(YDe,"A",{href:!0});var gPt=s(nJ);T2r=r(gPt,"Wav2Vec2ConformerForSequenceClassification"),gPt.forEach(t),M2r=r(YDe," (Wav2Vec2-Conformer model)"),YDe.forEach(t),E2r=i(We),QT=n(We,"LI",{});var KDe=s(QT);bFe=n(KDe,"STRONG",{});var hPt=s(bFe);C2r=r(hPt,"wavlm"),hPt.forEach(t),w2r=r(KDe," \u2014 "),sJ=n(KDe,"A",{href:!0});var pPt=s(sJ);A2r=r(pPt,"WavLMForSequenceClassification"),pPt.forEach(t),L2r=r(KDe," (WavLM model)"),KDe.forEach(t),We.forEach(t),y2r=i(xa),UT=n(xa,"P",{});var ZDe=s(UT);x2r=r(ZDe,"The model is set in evaluation mode by default using "),vFe=n(ZDe,"CODE",{});var _Pt=s(vFe);$2r=r(_Pt,"model.eval()"),_Pt.forEach(t),k2r=r(ZDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FFe=n(ZDe,"CODE",{});var uPt=s(FFe);S2r=r(uPt,"model.train()"),uPt.forEach(t),ZDe.forEach(t),R2r=i(xa),T(HT.$$.fragment,xa),xa.forEach(t),Sl.forEach(t),PUe=i(f),Zd=n(f,"H2",{class:!0});var XJe=s(Zd);JT=n(XJe,"A",{id:!0,class:!0,href:!0});var bPt=s(JT);TFe=n(bPt,"SPAN",{});var vPt=s(TFe);T(fx.$$.fragment,vPt),vPt.forEach(t),bPt.forEach(t),P2r=i(XJe),MFe=n(XJe,"SPAN",{});var FPt=s(MFe);B2r=r(FPt,"AutoModelForAudioFrameClassification"),FPt.forEach(t),XJe.forEach(t),BUe=i(f),Ho=n(f,"DIV",{class:!0});var Rl=s(Ho);T(mx.$$.fragment,Rl),I2r=i(Rl),ec=n(Rl,"P",{});var Cne=s(ec);N2r=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),lJ=n(Cne,"A",{href:!0});var TPt=s(lJ);q2r=r(TPt,"from_pretrained()"),TPt.forEach(t),j2r=r(Cne," class method or the "),iJ=n(Cne,"A",{href:!0});var MPt=s(iJ);D2r=r(MPt,"from_config()"),MPt.forEach(t),G2r=r(Cne,` class
method.`),Cne.forEach(t),O2r=i(Rl),gx=n(Rl,"P",{});var zJe=s(gx);V2r=r(zJe,"This class cannot be instantiated directly using "),EFe=n(zJe,"CODE",{});var EPt=s(EFe);X2r=r(EPt,"__init__()"),EPt.forEach(t),z2r=r(zJe," (throws an error)."),zJe.forEach(t),W2r=i(Rl),xt=n(Rl,"DIV",{class:!0});var XL=s(xt);T(hx.$$.fragment,XL),Q2r=i(XL),CFe=n(XL,"P",{});var CPt=s(CFe);U2r=r(CPt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),CPt.forEach(t),H2r=i(XL),oc=n(XL,"P",{});var wne=s(oc);J2r=r(wne,`Note:
Loading a model from its configuration file does `),wFe=n(wne,"STRONG",{});var wPt=s(wFe);Y2r=r(wPt,"not"),wPt.forEach(t),K2r=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(wne,"A",{href:!0});var APt=s(dJ);Z2r=r(APt,"from_pretrained()"),APt.forEach(t),e1r=r(wne," to load the model weights."),wne.forEach(t),o1r=i(XL),T(YT.$$.fragment,XL),XL.forEach(t),r1r=i(Rl),ho=n(Rl,"DIV",{class:!0});var $a=s(ho);T(px.$$.fragment,$a),t1r=i($a),AFe=n($a,"P",{});var LPt=s(AFe);a1r=r(LPt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),LPt.forEach(t),n1r=i($a),nn=n($a,"P",{});var zL=s(nn);s1r=r(zL,"The model class to instantiate is selected based on the "),LFe=n(zL,"CODE",{});var yPt=s(LFe);l1r=r(yPt,"model_type"),yPt.forEach(t),i1r=r(zL,` property of the config object (either
passed as an argument or loaded from `),yFe=n(zL,"CODE",{});var xPt=s(yFe);d1r=r(xPt,"pretrained_model_name_or_path"),xPt.forEach(t),c1r=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(zL,"CODE",{});var $Pt=s(xFe);f1r=r($Pt,"pretrained_model_name_or_path"),$Pt.forEach(t),m1r=r(zL,":"),zL.forEach(t),g1r=i($a),st=n($a,"UL",{});var Pl=s(st);KT=n(Pl,"LI",{});var eGe=s(KT);$Fe=n(eGe,"STRONG",{});var kPt=s($Fe);h1r=r(kPt,"data2vec-audio"),kPt.forEach(t),p1r=r(eGe," \u2014 "),cJ=n(eGe,"A",{href:!0});var SPt=s(cJ);_1r=r(SPt,"Data2VecAudioForAudioFrameClassification"),SPt.forEach(t),u1r=r(eGe," (Data2VecAudio model)"),eGe.forEach(t),b1r=i(Pl),ZT=n(Pl,"LI",{});var oGe=s(ZT);kFe=n(oGe,"STRONG",{});var RPt=s(kFe);v1r=r(RPt,"unispeech-sat"),RPt.forEach(t),F1r=r(oGe," \u2014 "),fJ=n(oGe,"A",{href:!0});var PPt=s(fJ);T1r=r(PPt,"UniSpeechSatForAudioFrameClassification"),PPt.forEach(t),M1r=r(oGe," (UniSpeechSat model)"),oGe.forEach(t),E1r=i(Pl),e7=n(Pl,"LI",{});var rGe=s(e7);SFe=n(rGe,"STRONG",{});var BPt=s(SFe);C1r=r(BPt,"wav2vec2"),BPt.forEach(t),w1r=r(rGe," \u2014 "),mJ=n(rGe,"A",{href:!0});var IPt=s(mJ);A1r=r(IPt,"Wav2Vec2ForAudioFrameClassification"),IPt.forEach(t),L1r=r(rGe," (Wav2Vec2 model)"),rGe.forEach(t),y1r=i(Pl),o7=n(Pl,"LI",{});var tGe=s(o7);RFe=n(tGe,"STRONG",{});var NPt=s(RFe);x1r=r(NPt,"wav2vec2-conformer"),NPt.forEach(t),$1r=r(tGe," \u2014 "),gJ=n(tGe,"A",{href:!0});var qPt=s(gJ);k1r=r(qPt,"Wav2Vec2ConformerForAudioFrameClassification"),qPt.forEach(t),S1r=r(tGe," (Wav2Vec2-Conformer model)"),tGe.forEach(t),R1r=i(Pl),r7=n(Pl,"LI",{});var aGe=s(r7);PFe=n(aGe,"STRONG",{});var jPt=s(PFe);P1r=r(jPt,"wavlm"),jPt.forEach(t),B1r=r(aGe," \u2014 "),hJ=n(aGe,"A",{href:!0});var DPt=s(hJ);I1r=r(DPt,"WavLMForAudioFrameClassification"),DPt.forEach(t),N1r=r(aGe," (WavLM model)"),aGe.forEach(t),Pl.forEach(t),q1r=i($a),t7=n($a,"P",{});var nGe=s(t7);j1r=r(nGe,"The model is set in evaluation mode by default using "),BFe=n(nGe,"CODE",{});var GPt=s(BFe);D1r=r(GPt,"model.eval()"),GPt.forEach(t),G1r=r(nGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=n(nGe,"CODE",{});var OPt=s(IFe);O1r=r(OPt,"model.train()"),OPt.forEach(t),nGe.forEach(t),V1r=i($a),T(a7.$$.fragment,$a),$a.forEach(t),Rl.forEach(t),IUe=i(f),rc=n(f,"H2",{class:!0});var WJe=s(rc);n7=n(WJe,"A",{id:!0,class:!0,href:!0});var VPt=s(n7);NFe=n(VPt,"SPAN",{});var XPt=s(NFe);T(_x.$$.fragment,XPt),XPt.forEach(t),VPt.forEach(t),X1r=i(WJe),qFe=n(WJe,"SPAN",{});var zPt=s(qFe);z1r=r(zPt,"AutoModelForCTC"),zPt.forEach(t),WJe.forEach(t),NUe=i(f),Jo=n(f,"DIV",{class:!0});var Bl=s(Jo);T(ux.$$.fragment,Bl),W1r=i(Bl),tc=n(Bl,"P",{});var Ane=s(tc);Q1r=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pJ=n(Ane,"A",{href:!0});var WPt=s(pJ);U1r=r(WPt,"from_pretrained()"),WPt.forEach(t),H1r=r(Ane," class method or the "),_J=n(Ane,"A",{href:!0});var QPt=s(_J);J1r=r(QPt,"from_config()"),QPt.forEach(t),Y1r=r(Ane,` class
method.`),Ane.forEach(t),K1r=i(Bl),bx=n(Bl,"P",{});var QJe=s(bx);Z1r=r(QJe,"This class cannot be instantiated directly using "),jFe=n(QJe,"CODE",{});var UPt=s(jFe);e4r=r(UPt,"__init__()"),UPt.forEach(t),o4r=r(QJe," (throws an error)."),QJe.forEach(t),r4r=i(Bl),$t=n(Bl,"DIV",{class:!0});var WL=s($t);T(vx.$$.fragment,WL),t4r=i(WL),DFe=n(WL,"P",{});var HPt=s(DFe);a4r=r(HPt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),HPt.forEach(t),n4r=i(WL),ac=n(WL,"P",{});var Lne=s(ac);s4r=r(Lne,`Note:
Loading a model from its configuration file does `),GFe=n(Lne,"STRONG",{});var JPt=s(GFe);l4r=r(JPt,"not"),JPt.forEach(t),i4r=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(Lne,"A",{href:!0});var YPt=s(uJ);d4r=r(YPt,"from_pretrained()"),YPt.forEach(t),c4r=r(Lne," to load the model weights."),Lne.forEach(t),f4r=i(WL),T(s7.$$.fragment,WL),WL.forEach(t),m4r=i(Bl),po=n(Bl,"DIV",{class:!0});var ka=s(po);T(Fx.$$.fragment,ka),g4r=i(ka),OFe=n(ka,"P",{});var KPt=s(OFe);h4r=r(KPt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),KPt.forEach(t),p4r=i(ka),sn=n(ka,"P",{});var QL=s(sn);_4r=r(QL,"The model class to instantiate is selected based on the "),VFe=n(QL,"CODE",{});var ZPt=s(VFe);u4r=r(ZPt,"model_type"),ZPt.forEach(t),b4r=r(QL,` property of the config object (either
passed as an argument or loaded from `),XFe=n(QL,"CODE",{});var eBt=s(XFe);v4r=r(eBt,"pretrained_model_name_or_path"),eBt.forEach(t),F4r=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(QL,"CODE",{});var oBt=s(zFe);T4r=r(oBt,"pretrained_model_name_or_path"),oBt.forEach(t),M4r=r(QL,":"),QL.forEach(t),E4r=i(ka),Le=n(ka,"UL",{});var Be=s(Le);l7=n(Be,"LI",{});var sGe=s(l7);WFe=n(sGe,"STRONG",{});var rBt=s(WFe);C4r=r(rBt,"data2vec-audio"),rBt.forEach(t),w4r=r(sGe," \u2014 "),bJ=n(sGe,"A",{href:!0});var tBt=s(bJ);A4r=r(tBt,"Data2VecAudioForCTC"),tBt.forEach(t),L4r=r(sGe," (Data2VecAudio model)"),sGe.forEach(t),y4r=i(Be),i7=n(Be,"LI",{});var lGe=s(i7);QFe=n(lGe,"STRONG",{});var aBt=s(QFe);x4r=r(aBt,"hubert"),aBt.forEach(t),$4r=r(lGe," \u2014 "),vJ=n(lGe,"A",{href:!0});var nBt=s(vJ);k4r=r(nBt,"HubertForCTC"),nBt.forEach(t),S4r=r(lGe," (Hubert model)"),lGe.forEach(t),R4r=i(Be),d7=n(Be,"LI",{});var iGe=s(d7);UFe=n(iGe,"STRONG",{});var sBt=s(UFe);P4r=r(sBt,"mctct"),sBt.forEach(t),B4r=r(iGe," \u2014 "),FJ=n(iGe,"A",{href:!0});var lBt=s(FJ);I4r=r(lBt,"MCTCTForCTC"),lBt.forEach(t),N4r=r(iGe," (M-CTC-T model)"),iGe.forEach(t),q4r=i(Be),c7=n(Be,"LI",{});var dGe=s(c7);HFe=n(dGe,"STRONG",{});var iBt=s(HFe);j4r=r(iBt,"sew"),iBt.forEach(t),D4r=r(dGe," \u2014 "),TJ=n(dGe,"A",{href:!0});var dBt=s(TJ);G4r=r(dBt,"SEWForCTC"),dBt.forEach(t),O4r=r(dGe," (SEW model)"),dGe.forEach(t),V4r=i(Be),f7=n(Be,"LI",{});var cGe=s(f7);JFe=n(cGe,"STRONG",{});var cBt=s(JFe);X4r=r(cBt,"sew-d"),cBt.forEach(t),z4r=r(cGe," \u2014 "),MJ=n(cGe,"A",{href:!0});var fBt=s(MJ);W4r=r(fBt,"SEWDForCTC"),fBt.forEach(t),Q4r=r(cGe," (SEW-D model)"),cGe.forEach(t),U4r=i(Be),m7=n(Be,"LI",{});var fGe=s(m7);YFe=n(fGe,"STRONG",{});var mBt=s(YFe);H4r=r(mBt,"unispeech"),mBt.forEach(t),J4r=r(fGe," \u2014 "),EJ=n(fGe,"A",{href:!0});var gBt=s(EJ);Y4r=r(gBt,"UniSpeechForCTC"),gBt.forEach(t),K4r=r(fGe," (UniSpeech model)"),fGe.forEach(t),Z4r=i(Be),g7=n(Be,"LI",{});var mGe=s(g7);KFe=n(mGe,"STRONG",{});var hBt=s(KFe);ebr=r(hBt,"unispeech-sat"),hBt.forEach(t),obr=r(mGe," \u2014 "),CJ=n(mGe,"A",{href:!0});var pBt=s(CJ);rbr=r(pBt,"UniSpeechSatForCTC"),pBt.forEach(t),tbr=r(mGe," (UniSpeechSat model)"),mGe.forEach(t),abr=i(Be),h7=n(Be,"LI",{});var gGe=s(h7);ZFe=n(gGe,"STRONG",{});var _Bt=s(ZFe);nbr=r(_Bt,"wav2vec2"),_Bt.forEach(t),sbr=r(gGe," \u2014 "),wJ=n(gGe,"A",{href:!0});var uBt=s(wJ);lbr=r(uBt,"Wav2Vec2ForCTC"),uBt.forEach(t),ibr=r(gGe," (Wav2Vec2 model)"),gGe.forEach(t),dbr=i(Be),p7=n(Be,"LI",{});var hGe=s(p7);eTe=n(hGe,"STRONG",{});var bBt=s(eTe);cbr=r(bBt,"wav2vec2-conformer"),bBt.forEach(t),fbr=r(hGe," \u2014 "),AJ=n(hGe,"A",{href:!0});var vBt=s(AJ);mbr=r(vBt,"Wav2Vec2ConformerForCTC"),vBt.forEach(t),gbr=r(hGe," (Wav2Vec2-Conformer model)"),hGe.forEach(t),hbr=i(Be),_7=n(Be,"LI",{});var pGe=s(_7);oTe=n(pGe,"STRONG",{});var FBt=s(oTe);pbr=r(FBt,"wavlm"),FBt.forEach(t),_br=r(pGe," \u2014 "),LJ=n(pGe,"A",{href:!0});var TBt=s(LJ);ubr=r(TBt,"WavLMForCTC"),TBt.forEach(t),bbr=r(pGe," (WavLM model)"),pGe.forEach(t),Be.forEach(t),vbr=i(ka),u7=n(ka,"P",{});var _Ge=s(u7);Fbr=r(_Ge,"The model is set in evaluation mode by default using "),rTe=n(_Ge,"CODE",{});var MBt=s(rTe);Tbr=r(MBt,"model.eval()"),MBt.forEach(t),Mbr=r(_Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tTe=n(_Ge,"CODE",{});var EBt=s(tTe);Ebr=r(EBt,"model.train()"),EBt.forEach(t),_Ge.forEach(t),Cbr=i(ka),T(b7.$$.fragment,ka),ka.forEach(t),Bl.forEach(t),qUe=i(f),nc=n(f,"H2",{class:!0});var UJe=s(nc);v7=n(UJe,"A",{id:!0,class:!0,href:!0});var CBt=s(v7);aTe=n(CBt,"SPAN",{});var wBt=s(aTe);T(Tx.$$.fragment,wBt),wBt.forEach(t),CBt.forEach(t),wbr=i(UJe),nTe=n(UJe,"SPAN",{});var ABt=s(nTe);Abr=r(ABt,"AutoModelForSpeechSeq2Seq"),ABt.forEach(t),UJe.forEach(t),jUe=i(f),Yo=n(f,"DIV",{class:!0});var Il=s(Yo);T(Mx.$$.fragment,Il),Lbr=i(Il),sc=n(Il,"P",{});var yne=s(sc);ybr=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yJ=n(yne,"A",{href:!0});var LBt=s(yJ);xbr=r(LBt,"from_pretrained()"),LBt.forEach(t),$br=r(yne," class method or the "),xJ=n(yne,"A",{href:!0});var yBt=s(xJ);kbr=r(yBt,"from_config()"),yBt.forEach(t),Sbr=r(yne,` class
method.`),yne.forEach(t),Rbr=i(Il),Ex=n(Il,"P",{});var HJe=s(Ex);Pbr=r(HJe,"This class cannot be instantiated directly using "),sTe=n(HJe,"CODE",{});var xBt=s(sTe);Bbr=r(xBt,"__init__()"),xBt.forEach(t),Ibr=r(HJe," (throws an error)."),HJe.forEach(t),Nbr=i(Il),kt=n(Il,"DIV",{class:!0});var UL=s(kt);T(Cx.$$.fragment,UL),qbr=i(UL),lTe=n(UL,"P",{});var $Bt=s(lTe);jbr=r($Bt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Bt.forEach(t),Dbr=i(UL),lc=n(UL,"P",{});var xne=s(lc);Gbr=r(xne,`Note:
Loading a model from its configuration file does `),iTe=n(xne,"STRONG",{});var kBt=s(iTe);Obr=r(kBt,"not"),kBt.forEach(t),Vbr=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(xne,"A",{href:!0});var SBt=s($J);Xbr=r(SBt,"from_pretrained()"),SBt.forEach(t),zbr=r(xne," to load the model weights."),xne.forEach(t),Wbr=i(UL),T(F7.$$.fragment,UL),UL.forEach(t),Qbr=i(Il),_o=n(Il,"DIV",{class:!0});var Sa=s(_o);T(wx.$$.fragment,Sa),Ubr=i(Sa),dTe=n(Sa,"P",{});var RBt=s(dTe);Hbr=r(RBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),RBt.forEach(t),Jbr=i(Sa),ln=n(Sa,"P",{});var HL=s(ln);Ybr=r(HL,"The model class to instantiate is selected based on the "),cTe=n(HL,"CODE",{});var PBt=s(cTe);Kbr=r(PBt,"model_type"),PBt.forEach(t),Zbr=r(HL,` property of the config object (either
passed as an argument or loaded from `),fTe=n(HL,"CODE",{});var BBt=s(fTe);evr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),ovr=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(HL,"CODE",{});var IBt=s(mTe);rvr=r(IBt,"pretrained_model_name_or_path"),IBt.forEach(t),tvr=r(HL,":"),HL.forEach(t),avr=i(Sa),Ax=n(Sa,"UL",{});var JJe=s(Ax);T7=n(JJe,"LI",{});var uGe=s(T7);gTe=n(uGe,"STRONG",{});var NBt=s(gTe);nvr=r(NBt,"speech-encoder-decoder"),NBt.forEach(t),svr=r(uGe," \u2014 "),kJ=n(uGe,"A",{href:!0});var qBt=s(kJ);lvr=r(qBt,"SpeechEncoderDecoderModel"),qBt.forEach(t),ivr=r(uGe," (Speech Encoder decoder model)"),uGe.forEach(t),dvr=i(JJe),M7=n(JJe,"LI",{});var bGe=s(M7);hTe=n(bGe,"STRONG",{});var jBt=s(hTe);cvr=r(jBt,"speech_to_text"),jBt.forEach(t),fvr=r(bGe," \u2014 "),SJ=n(bGe,"A",{href:!0});var DBt=s(SJ);mvr=r(DBt,"Speech2TextForConditionalGeneration"),DBt.forEach(t),gvr=r(bGe," (Speech2Text model)"),bGe.forEach(t),JJe.forEach(t),hvr=i(Sa),E7=n(Sa,"P",{});var vGe=s(E7);pvr=r(vGe,"The model is set in evaluation mode by default using "),pTe=n(vGe,"CODE",{});var GBt=s(pTe);_vr=r(GBt,"model.eval()"),GBt.forEach(t),uvr=r(vGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Te=n(vGe,"CODE",{});var OBt=s(_Te);bvr=r(OBt,"model.train()"),OBt.forEach(t),vGe.forEach(t),vvr=i(Sa),T(C7.$$.fragment,Sa),Sa.forEach(t),Il.forEach(t),DUe=i(f),ic=n(f,"H2",{class:!0});var YJe=s(ic);w7=n(YJe,"A",{id:!0,class:!0,href:!0});var VBt=s(w7);uTe=n(VBt,"SPAN",{});var XBt=s(uTe);T(Lx.$$.fragment,XBt),XBt.forEach(t),VBt.forEach(t),Fvr=i(YJe),bTe=n(YJe,"SPAN",{});var zBt=s(bTe);Tvr=r(zBt,"AutoModelForAudioXVector"),zBt.forEach(t),YJe.forEach(t),GUe=i(f),Ko=n(f,"DIV",{class:!0});var Nl=s(Ko);T(yx.$$.fragment,Nl),Mvr=i(Nl),dc=n(Nl,"P",{});var $ne=s(dc);Evr=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RJ=n($ne,"A",{href:!0});var WBt=s(RJ);Cvr=r(WBt,"from_pretrained()"),WBt.forEach(t),wvr=r($ne," class method or the "),PJ=n($ne,"A",{href:!0});var QBt=s(PJ);Avr=r(QBt,"from_config()"),QBt.forEach(t),Lvr=r($ne,` class
method.`),$ne.forEach(t),yvr=i(Nl),xx=n(Nl,"P",{});var KJe=s(xx);xvr=r(KJe,"This class cannot be instantiated directly using "),vTe=n(KJe,"CODE",{});var UBt=s(vTe);$vr=r(UBt,"__init__()"),UBt.forEach(t),kvr=r(KJe," (throws an error)."),KJe.forEach(t),Svr=i(Nl),St=n(Nl,"DIV",{class:!0});var JL=s(St);T($x.$$.fragment,JL),Rvr=i(JL),FTe=n(JL,"P",{});var HBt=s(FTe);Pvr=r(HBt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),HBt.forEach(t),Bvr=i(JL),cc=n(JL,"P",{});var kne=s(cc);Ivr=r(kne,`Note:
Loading a model from its configuration file does `),TTe=n(kne,"STRONG",{});var JBt=s(TTe);Nvr=r(JBt,"not"),JBt.forEach(t),qvr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(kne,"A",{href:!0});var YBt=s(BJ);jvr=r(YBt,"from_pretrained()"),YBt.forEach(t),Dvr=r(kne," to load the model weights."),kne.forEach(t),Gvr=i(JL),T(A7.$$.fragment,JL),JL.forEach(t),Ovr=i(Nl),uo=n(Nl,"DIV",{class:!0});var Ra=s(uo);T(kx.$$.fragment,Ra),Vvr=i(Ra),MTe=n(Ra,"P",{});var KBt=s(MTe);Xvr=r(KBt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),KBt.forEach(t),zvr=i(Ra),dn=n(Ra,"P",{});var YL=s(dn);Wvr=r(YL,"The model class to instantiate is selected based on the "),ETe=n(YL,"CODE",{});var ZBt=s(ETe);Qvr=r(ZBt,"model_type"),ZBt.forEach(t),Uvr=r(YL,` property of the config object (either
passed as an argument or loaded from `),CTe=n(YL,"CODE",{});var eIt=s(CTe);Hvr=r(eIt,"pretrained_model_name_or_path"),eIt.forEach(t),Jvr=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(YL,"CODE",{});var oIt=s(wTe);Yvr=r(oIt,"pretrained_model_name_or_path"),oIt.forEach(t),Kvr=r(YL,":"),YL.forEach(t),Zvr=i(Ra),lt=n(Ra,"UL",{});var ql=s(lt);L7=n(ql,"LI",{});var FGe=s(L7);ATe=n(FGe,"STRONG",{});var rIt=s(ATe);e5r=r(rIt,"data2vec-audio"),rIt.forEach(t),o5r=r(FGe," \u2014 "),IJ=n(FGe,"A",{href:!0});var tIt=s(IJ);r5r=r(tIt,"Data2VecAudioForXVector"),tIt.forEach(t),t5r=r(FGe," (Data2VecAudio model)"),FGe.forEach(t),a5r=i(ql),y7=n(ql,"LI",{});var TGe=s(y7);LTe=n(TGe,"STRONG",{});var aIt=s(LTe);n5r=r(aIt,"unispeech-sat"),aIt.forEach(t),s5r=r(TGe," \u2014 "),NJ=n(TGe,"A",{href:!0});var nIt=s(NJ);l5r=r(nIt,"UniSpeechSatForXVector"),nIt.forEach(t),i5r=r(TGe," (UniSpeechSat model)"),TGe.forEach(t),d5r=i(ql),x7=n(ql,"LI",{});var MGe=s(x7);yTe=n(MGe,"STRONG",{});var sIt=s(yTe);c5r=r(sIt,"wav2vec2"),sIt.forEach(t),f5r=r(MGe," \u2014 "),qJ=n(MGe,"A",{href:!0});var lIt=s(qJ);m5r=r(lIt,"Wav2Vec2ForXVector"),lIt.forEach(t),g5r=r(MGe," (Wav2Vec2 model)"),MGe.forEach(t),h5r=i(ql),$7=n(ql,"LI",{});var EGe=s($7);xTe=n(EGe,"STRONG",{});var iIt=s(xTe);p5r=r(iIt,"wav2vec2-conformer"),iIt.forEach(t),_5r=r(EGe," \u2014 "),jJ=n(EGe,"A",{href:!0});var dIt=s(jJ);u5r=r(dIt,"Wav2Vec2ConformerForXVector"),dIt.forEach(t),b5r=r(EGe," (Wav2Vec2-Conformer model)"),EGe.forEach(t),v5r=i(ql),k7=n(ql,"LI",{});var CGe=s(k7);$Te=n(CGe,"STRONG",{});var cIt=s($Te);F5r=r(cIt,"wavlm"),cIt.forEach(t),T5r=r(CGe," \u2014 "),DJ=n(CGe,"A",{href:!0});var fIt=s(DJ);M5r=r(fIt,"WavLMForXVector"),fIt.forEach(t),E5r=r(CGe," (WavLM model)"),CGe.forEach(t),ql.forEach(t),C5r=i(Ra),S7=n(Ra,"P",{});var wGe=s(S7);w5r=r(wGe,"The model is set in evaluation mode by default using "),kTe=n(wGe,"CODE",{});var mIt=s(kTe);A5r=r(mIt,"model.eval()"),mIt.forEach(t),L5r=r(wGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),STe=n(wGe,"CODE",{});var gIt=s(STe);y5r=r(gIt,"model.train()"),gIt.forEach(t),wGe.forEach(t),x5r=i(Ra),T(R7.$$.fragment,Ra),Ra.forEach(t),Nl.forEach(t),OUe=i(f),fc=n(f,"H2",{class:!0});var ZJe=s(fc);P7=n(ZJe,"A",{id:!0,class:!0,href:!0});var hIt=s(P7);RTe=n(hIt,"SPAN",{});var pIt=s(RTe);T(Sx.$$.fragment,pIt),pIt.forEach(t),hIt.forEach(t),$5r=i(ZJe),PTe=n(ZJe,"SPAN",{});var _It=s(PTe);k5r=r(_It,"AutoModelForMaskedImageModeling"),_It.forEach(t),ZJe.forEach(t),VUe=i(f),Zo=n(f,"DIV",{class:!0});var jl=s(Zo);T(Rx.$$.fragment,jl),S5r=i(jl),mc=n(jl,"P",{});var Sne=s(mc);R5r=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),GJ=n(Sne,"A",{href:!0});var uIt=s(GJ);P5r=r(uIt,"from_pretrained()"),uIt.forEach(t),B5r=r(Sne," class method or the "),OJ=n(Sne,"A",{href:!0});var bIt=s(OJ);I5r=r(bIt,"from_config()"),bIt.forEach(t),N5r=r(Sne,` class
method.`),Sne.forEach(t),q5r=i(jl),Px=n(jl,"P",{});var eYe=s(Px);j5r=r(eYe,"This class cannot be instantiated directly using "),BTe=n(eYe,"CODE",{});var vIt=s(BTe);D5r=r(vIt,"__init__()"),vIt.forEach(t),G5r=r(eYe," (throws an error)."),eYe.forEach(t),O5r=i(jl),Rt=n(jl,"DIV",{class:!0});var KL=s(Rt);T(Bx.$$.fragment,KL),V5r=i(KL),ITe=n(KL,"P",{});var FIt=s(ITe);X5r=r(FIt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),FIt.forEach(t),z5r=i(KL),gc=n(KL,"P",{});var Rne=s(gc);W5r=r(Rne,`Note:
Loading a model from its configuration file does `),NTe=n(Rne,"STRONG",{});var TIt=s(NTe);Q5r=r(TIt,"not"),TIt.forEach(t),U5r=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(Rne,"A",{href:!0});var MIt=s(VJ);H5r=r(MIt,"from_pretrained()"),MIt.forEach(t),J5r=r(Rne," to load the model weights."),Rne.forEach(t),Y5r=i(KL),T(B7.$$.fragment,KL),KL.forEach(t),K5r=i(jl),bo=n(jl,"DIV",{class:!0});var Pa=s(bo);T(Ix.$$.fragment,Pa),Z5r=i(Pa),qTe=n(Pa,"P",{});var EIt=s(qTe);eFr=r(EIt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),EIt.forEach(t),oFr=i(Pa),cn=n(Pa,"P",{});var ZL=s(cn);rFr=r(ZL,"The model class to instantiate is selected based on the "),jTe=n(ZL,"CODE",{});var CIt=s(jTe);tFr=r(CIt,"model_type"),CIt.forEach(t),aFr=r(ZL,` property of the config object (either
passed as an argument or loaded from `),DTe=n(ZL,"CODE",{});var wIt=s(DTe);nFr=r(wIt,"pretrained_model_name_or_path"),wIt.forEach(t),sFr=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(ZL,"CODE",{});var AIt=s(GTe);lFr=r(AIt,"pretrained_model_name_or_path"),AIt.forEach(t),iFr=r(ZL,":"),ZL.forEach(t),dFr=i(Pa),fn=n(Pa,"UL",{});var ey=s(fn);I7=n(ey,"LI",{});var AGe=s(I7);OTe=n(AGe,"STRONG",{});var LIt=s(OTe);cFr=r(LIt,"deit"),LIt.forEach(t),fFr=r(AGe," \u2014 "),XJ=n(AGe,"A",{href:!0});var yIt=s(XJ);mFr=r(yIt,"DeiTForMaskedImageModeling"),yIt.forEach(t),gFr=r(AGe," (DeiT model)"),AGe.forEach(t),hFr=i(ey),N7=n(ey,"LI",{});var LGe=s(N7);VTe=n(LGe,"STRONG",{});var xIt=s(VTe);pFr=r(xIt,"swin"),xIt.forEach(t),_Fr=r(LGe," \u2014 "),zJ=n(LGe,"A",{href:!0});var $It=s(zJ);uFr=r($It,"SwinForMaskedImageModeling"),$It.forEach(t),bFr=r(LGe," (Swin Transformer model)"),LGe.forEach(t),vFr=i(ey),q7=n(ey,"LI",{});var yGe=s(q7);XTe=n(yGe,"STRONG",{});var kIt=s(XTe);FFr=r(kIt,"swinv2"),kIt.forEach(t),TFr=r(yGe," \u2014 "),WJ=n(yGe,"A",{href:!0});var SIt=s(WJ);MFr=r(SIt,"Swinv2ForMaskedImageModeling"),SIt.forEach(t),EFr=r(yGe," (Swin Transformer V2 model)"),yGe.forEach(t),CFr=i(ey),j7=n(ey,"LI",{});var xGe=s(j7);zTe=n(xGe,"STRONG",{});var RIt=s(zTe);wFr=r(RIt,"vit"),RIt.forEach(t),AFr=r(xGe," \u2014 "),QJ=n(xGe,"A",{href:!0});var PIt=s(QJ);LFr=r(PIt,"ViTForMaskedImageModeling"),PIt.forEach(t),yFr=r(xGe," (ViT model)"),xGe.forEach(t),ey.forEach(t),xFr=i(Pa),D7=n(Pa,"P",{});var $Ge=s(D7);$Fr=r($Ge,"The model is set in evaluation mode by default using "),WTe=n($Ge,"CODE",{});var BIt=s(WTe);kFr=r(BIt,"model.eval()"),BIt.forEach(t),SFr=r($Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QTe=n($Ge,"CODE",{});var IIt=s(QTe);RFr=r(IIt,"model.train()"),IIt.forEach(t),$Ge.forEach(t),PFr=i(Pa),T(G7.$$.fragment,Pa),Pa.forEach(t),jl.forEach(t),XUe=i(f),hc=n(f,"H2",{class:!0});var oYe=s(hc);O7=n(oYe,"A",{id:!0,class:!0,href:!0});var NIt=s(O7);UTe=n(NIt,"SPAN",{});var qIt=s(UTe);T(Nx.$$.fragment,qIt),qIt.forEach(t),NIt.forEach(t),BFr=i(oYe),HTe=n(oYe,"SPAN",{});var jIt=s(HTe);IFr=r(jIt,"AutoModelForObjectDetection"),jIt.forEach(t),oYe.forEach(t),zUe=i(f),er=n(f,"DIV",{class:!0});var Dl=s(er);T(qx.$$.fragment,Dl),NFr=i(Dl),pc=n(Dl,"P",{});var Pne=s(pc);qFr=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),UJ=n(Pne,"A",{href:!0});var DIt=s(UJ);jFr=r(DIt,"from_pretrained()"),DIt.forEach(t),DFr=r(Pne," class method or the "),HJ=n(Pne,"A",{href:!0});var GIt=s(HJ);GFr=r(GIt,"from_config()"),GIt.forEach(t),OFr=r(Pne,` class
method.`),Pne.forEach(t),VFr=i(Dl),jx=n(Dl,"P",{});var rYe=s(jx);XFr=r(rYe,"This class cannot be instantiated directly using "),JTe=n(rYe,"CODE",{});var OIt=s(JTe);zFr=r(OIt,"__init__()"),OIt.forEach(t),WFr=r(rYe," (throws an error)."),rYe.forEach(t),QFr=i(Dl),Pt=n(Dl,"DIV",{class:!0});var oy=s(Pt);T(Dx.$$.fragment,oy),UFr=i(oy),YTe=n(oy,"P",{});var VIt=s(YTe);HFr=r(VIt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),VIt.forEach(t),JFr=i(oy),_c=n(oy,"P",{});var Bne=s(_c);YFr=r(Bne,`Note:
Loading a model from its configuration file does `),KTe=n(Bne,"STRONG",{});var XIt=s(KTe);KFr=r(XIt,"not"),XIt.forEach(t),ZFr=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(Bne,"A",{href:!0});var zIt=s(JJ);eTr=r(zIt,"from_pretrained()"),zIt.forEach(t),oTr=r(Bne," to load the model weights."),Bne.forEach(t),rTr=i(oy),T(V7.$$.fragment,oy),oy.forEach(t),tTr=i(Dl),vo=n(Dl,"DIV",{class:!0});var Ba=s(vo);T(Gx.$$.fragment,Ba),aTr=i(Ba),ZTe=n(Ba,"P",{});var WIt=s(ZTe);nTr=r(WIt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),WIt.forEach(t),sTr=i(Ba),mn=n(Ba,"P",{});var ry=s(mn);lTr=r(ry,"The model class to instantiate is selected based on the "),e7e=n(ry,"CODE",{});var QIt=s(e7e);iTr=r(QIt,"model_type"),QIt.forEach(t),dTr=r(ry,` property of the config object (either
passed as an argument or loaded from `),o7e=n(ry,"CODE",{});var UIt=s(o7e);cTr=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),fTr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r7e=n(ry,"CODE",{});var HIt=s(r7e);mTr=r(HIt,"pretrained_model_name_or_path"),HIt.forEach(t),gTr=r(ry,":"),ry.forEach(t),hTr=i(Ba),Ox=n(Ba,"UL",{});var tYe=s(Ox);X7=n(tYe,"LI",{});var kGe=s(X7);t7e=n(kGe,"STRONG",{});var JIt=s(t7e);pTr=r(JIt,"detr"),JIt.forEach(t),_Tr=r(kGe," \u2014 "),YJ=n(kGe,"A",{href:!0});var YIt=s(YJ);uTr=r(YIt,"DetrForObjectDetection"),YIt.forEach(t),bTr=r(kGe," (DETR model)"),kGe.forEach(t),vTr=i(tYe),z7=n(tYe,"LI",{});var SGe=s(z7);a7e=n(SGe,"STRONG",{});var KIt=s(a7e);FTr=r(KIt,"yolos"),KIt.forEach(t),TTr=r(SGe," \u2014 "),KJ=n(SGe,"A",{href:!0});var ZIt=s(KJ);MTr=r(ZIt,"YolosForObjectDetection"),ZIt.forEach(t),ETr=r(SGe," (YOLOS model)"),SGe.forEach(t),tYe.forEach(t),CTr=i(Ba),W7=n(Ba,"P",{});var RGe=s(W7);wTr=r(RGe,"The model is set in evaluation mode by default using "),n7e=n(RGe,"CODE",{});var eNt=s(n7e);ATr=r(eNt,"model.eval()"),eNt.forEach(t),LTr=r(RGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s7e=n(RGe,"CODE",{});var oNt=s(s7e);yTr=r(oNt,"model.train()"),oNt.forEach(t),RGe.forEach(t),xTr=i(Ba),T(Q7.$$.fragment,Ba),Ba.forEach(t),Dl.forEach(t),WUe=i(f),uc=n(f,"H2",{class:!0});var aYe=s(uc);U7=n(aYe,"A",{id:!0,class:!0,href:!0});var rNt=s(U7);l7e=n(rNt,"SPAN",{});var tNt=s(l7e);T(Vx.$$.fragment,tNt),tNt.forEach(t),rNt.forEach(t),$Tr=i(aYe),i7e=n(aYe,"SPAN",{});var aNt=s(i7e);kTr=r(aNt,"AutoModelForImageSegmentation"),aNt.forEach(t),aYe.forEach(t),QUe=i(f),or=n(f,"DIV",{class:!0});var Gl=s(or);T(Xx.$$.fragment,Gl),STr=i(Gl),bc=n(Gl,"P",{});var Ine=s(bc);RTr=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZJ=n(Ine,"A",{href:!0});var nNt=s(ZJ);PTr=r(nNt,"from_pretrained()"),nNt.forEach(t),BTr=r(Ine," class method or the "),eY=n(Ine,"A",{href:!0});var sNt=s(eY);ITr=r(sNt,"from_config()"),sNt.forEach(t),NTr=r(Ine,` class
method.`),Ine.forEach(t),qTr=i(Gl),zx=n(Gl,"P",{});var nYe=s(zx);jTr=r(nYe,"This class cannot be instantiated directly using "),d7e=n(nYe,"CODE",{});var lNt=s(d7e);DTr=r(lNt,"__init__()"),lNt.forEach(t),GTr=r(nYe," (throws an error)."),nYe.forEach(t),OTr=i(Gl),Bt=n(Gl,"DIV",{class:!0});var ty=s(Bt);T(Wx.$$.fragment,ty),VTr=i(ty),c7e=n(ty,"P",{});var iNt=s(c7e);XTr=r(iNt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),iNt.forEach(t),zTr=i(ty),vc=n(ty,"P",{});var Nne=s(vc);WTr=r(Nne,`Note:
Loading a model from its configuration file does `),f7e=n(Nne,"STRONG",{});var dNt=s(f7e);QTr=r(dNt,"not"),dNt.forEach(t),UTr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(Nne,"A",{href:!0});var cNt=s(oY);HTr=r(cNt,"from_pretrained()"),cNt.forEach(t),JTr=r(Nne," to load the model weights."),Nne.forEach(t),YTr=i(ty),T(H7.$$.fragment,ty),ty.forEach(t),KTr=i(Gl),Fo=n(Gl,"DIV",{class:!0});var Ia=s(Fo);T(Qx.$$.fragment,Ia),ZTr=i(Ia),m7e=n(Ia,"P",{});var fNt=s(m7e);e7r=r(fNt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),fNt.forEach(t),o7r=i(Ia),gn=n(Ia,"P",{});var ay=s(gn);r7r=r(ay,"The model class to instantiate is selected based on the "),g7e=n(ay,"CODE",{});var mNt=s(g7e);t7r=r(mNt,"model_type"),mNt.forEach(t),a7r=r(ay,` property of the config object (either
passed as an argument or loaded from `),h7e=n(ay,"CODE",{});var gNt=s(h7e);n7r=r(gNt,"pretrained_model_name_or_path"),gNt.forEach(t),s7r=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=n(ay,"CODE",{});var hNt=s(p7e);l7r=r(hNt,"pretrained_model_name_or_path"),hNt.forEach(t),i7r=r(ay,":"),ay.forEach(t),d7r=i(Ia),_7e=n(Ia,"UL",{});var pNt=s(_7e);J7=n(pNt,"LI",{});var PGe=s(J7);u7e=n(PGe,"STRONG",{});var _Nt=s(u7e);c7r=r(_Nt,"detr"),_Nt.forEach(t),f7r=r(PGe," \u2014 "),rY=n(PGe,"A",{href:!0});var uNt=s(rY);m7r=r(uNt,"DetrForSegmentation"),uNt.forEach(t),g7r=r(PGe," (DETR model)"),PGe.forEach(t),pNt.forEach(t),h7r=i(Ia),Y7=n(Ia,"P",{});var BGe=s(Y7);p7r=r(BGe,"The model is set in evaluation mode by default using "),b7e=n(BGe,"CODE",{});var bNt=s(b7e);_7r=r(bNt,"model.eval()"),bNt.forEach(t),u7r=r(BGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v7e=n(BGe,"CODE",{});var vNt=s(v7e);b7r=r(vNt,"model.train()"),vNt.forEach(t),BGe.forEach(t),v7r=i(Ia),T(K7.$$.fragment,Ia),Ia.forEach(t),Gl.forEach(t),UUe=i(f),Fc=n(f,"H2",{class:!0});var sYe=s(Fc);Z7=n(sYe,"A",{id:!0,class:!0,href:!0});var FNt=s(Z7);F7e=n(FNt,"SPAN",{});var TNt=s(F7e);T(Ux.$$.fragment,TNt),TNt.forEach(t),FNt.forEach(t),F7r=i(sYe),T7e=n(sYe,"SPAN",{});var MNt=s(T7e);T7r=r(MNt,"AutoModelForSemanticSegmentation"),MNt.forEach(t),sYe.forEach(t),HUe=i(f),rr=n(f,"DIV",{class:!0});var Ol=s(rr);T(Hx.$$.fragment,Ol),M7r=i(Ol),Tc=n(Ol,"P",{});var qne=s(Tc);E7r=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tY=n(qne,"A",{href:!0});var ENt=s(tY);C7r=r(ENt,"from_pretrained()"),ENt.forEach(t),w7r=r(qne," class method or the "),aY=n(qne,"A",{href:!0});var CNt=s(aY);A7r=r(CNt,"from_config()"),CNt.forEach(t),L7r=r(qne,` class
method.`),qne.forEach(t),y7r=i(Ol),Jx=n(Ol,"P",{});var lYe=s(Jx);x7r=r(lYe,"This class cannot be instantiated directly using "),M7e=n(lYe,"CODE",{});var wNt=s(M7e);$7r=r(wNt,"__init__()"),wNt.forEach(t),k7r=r(lYe," (throws an error)."),lYe.forEach(t),S7r=i(Ol),It=n(Ol,"DIV",{class:!0});var ny=s(It);T(Yx.$$.fragment,ny),R7r=i(ny),E7e=n(ny,"P",{});var ANt=s(E7e);P7r=r(ANt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ANt.forEach(t),B7r=i(ny),Mc=n(ny,"P",{});var jne=s(Mc);I7r=r(jne,`Note:
Loading a model from its configuration file does `),C7e=n(jne,"STRONG",{});var LNt=s(C7e);N7r=r(LNt,"not"),LNt.forEach(t),q7r=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(jne,"A",{href:!0});var yNt=s(nY);j7r=r(yNt,"from_pretrained()"),yNt.forEach(t),D7r=r(jne," to load the model weights."),jne.forEach(t),G7r=i(ny),T(eM.$$.fragment,ny),ny.forEach(t),O7r=i(Ol),To=n(Ol,"DIV",{class:!0});var Na=s(To);T(Kx.$$.fragment,Na),V7r=i(Na),w7e=n(Na,"P",{});var xNt=s(w7e);X7r=r(xNt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),xNt.forEach(t),z7r=i(Na),hn=n(Na,"P",{});var sy=s(hn);W7r=r(sy,"The model class to instantiate is selected based on the "),A7e=n(sy,"CODE",{});var $Nt=s(A7e);Q7r=r($Nt,"model_type"),$Nt.forEach(t),U7r=r(sy,` property of the config object (either
passed as an argument or loaded from `),L7e=n(sy,"CODE",{});var kNt=s(L7e);H7r=r(kNt,"pretrained_model_name_or_path"),kNt.forEach(t),J7r=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(sy,"CODE",{});var SNt=s(y7e);Y7r=r(SNt,"pretrained_model_name_or_path"),SNt.forEach(t),K7r=r(sy,":"),sy.forEach(t),Z7r=i(Na),it=n(Na,"UL",{});var Vl=s(it);oM=n(Vl,"LI",{});var IGe=s(oM);x7e=n(IGe,"STRONG",{});var RNt=s(x7e);eMr=r(RNt,"beit"),RNt.forEach(t),oMr=r(IGe," \u2014 "),sY=n(IGe,"A",{href:!0});var PNt=s(sY);rMr=r(PNt,"BeitForSemanticSegmentation"),PNt.forEach(t),tMr=r(IGe," (BEiT model)"),IGe.forEach(t),aMr=i(Vl),rM=n(Vl,"LI",{});var NGe=s(rM);$7e=n(NGe,"STRONG",{});var BNt=s($7e);nMr=r(BNt,"data2vec-vision"),BNt.forEach(t),sMr=r(NGe," \u2014 "),lY=n(NGe,"A",{href:!0});var INt=s(lY);lMr=r(INt,"Data2VecVisionForSemanticSegmentation"),INt.forEach(t),iMr=r(NGe," (Data2VecVision model)"),NGe.forEach(t),dMr=i(Vl),tM=n(Vl,"LI",{});var qGe=s(tM);k7e=n(qGe,"STRONG",{});var NNt=s(k7e);cMr=r(NNt,"dpt"),NNt.forEach(t),fMr=r(qGe," \u2014 "),iY=n(qGe,"A",{href:!0});var qNt=s(iY);mMr=r(qNt,"DPTForSemanticSegmentation"),qNt.forEach(t),gMr=r(qGe," (DPT model)"),qGe.forEach(t),hMr=i(Vl),aM=n(Vl,"LI",{});var jGe=s(aM);S7e=n(jGe,"STRONG",{});var jNt=s(S7e);pMr=r(jNt,"mobilevit"),jNt.forEach(t),_Mr=r(jGe," \u2014 "),dY=n(jGe,"A",{href:!0});var DNt=s(dY);uMr=r(DNt,"MobileViTForSemanticSegmentation"),DNt.forEach(t),bMr=r(jGe," (MobileViT model)"),jGe.forEach(t),vMr=i(Vl),nM=n(Vl,"LI",{});var DGe=s(nM);R7e=n(DGe,"STRONG",{});var GNt=s(R7e);FMr=r(GNt,"segformer"),GNt.forEach(t),TMr=r(DGe," \u2014 "),cY=n(DGe,"A",{href:!0});var ONt=s(cY);MMr=r(ONt,"SegformerForSemanticSegmentation"),ONt.forEach(t),EMr=r(DGe," (SegFormer model)"),DGe.forEach(t),Vl.forEach(t),CMr=i(Na),sM=n(Na,"P",{});var GGe=s(sM);wMr=r(GGe,"The model is set in evaluation mode by default using "),P7e=n(GGe,"CODE",{});var VNt=s(P7e);AMr=r(VNt,"model.eval()"),VNt.forEach(t),LMr=r(GGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B7e=n(GGe,"CODE",{});var XNt=s(B7e);yMr=r(XNt,"model.train()"),XNt.forEach(t),GGe.forEach(t),xMr=i(Na),T(lM.$$.fragment,Na),Na.forEach(t),Ol.forEach(t),JUe=i(f),Ec=n(f,"H2",{class:!0});var iYe=s(Ec);iM=n(iYe,"A",{id:!0,class:!0,href:!0});var zNt=s(iM);I7e=n(zNt,"SPAN",{});var WNt=s(I7e);T(Zx.$$.fragment,WNt),WNt.forEach(t),zNt.forEach(t),$Mr=i(iYe),N7e=n(iYe,"SPAN",{});var QNt=s(N7e);kMr=r(QNt,"AutoModelForInstanceSegmentation"),QNt.forEach(t),iYe.forEach(t),YUe=i(f),tr=n(f,"DIV",{class:!0});var Xl=s(tr);T(e$.$$.fragment,Xl),SMr=i(Xl),Cc=n(Xl,"P",{});var Dne=s(Cc);RMr=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fY=n(Dne,"A",{href:!0});var UNt=s(fY);PMr=r(UNt,"from_pretrained()"),UNt.forEach(t),BMr=r(Dne," class method or the "),mY=n(Dne,"A",{href:!0});var HNt=s(mY);IMr=r(HNt,"from_config()"),HNt.forEach(t),NMr=r(Dne,` class
method.`),Dne.forEach(t),qMr=i(Xl),o$=n(Xl,"P",{});var dYe=s(o$);jMr=r(dYe,"This class cannot be instantiated directly using "),q7e=n(dYe,"CODE",{});var JNt=s(q7e);DMr=r(JNt,"__init__()"),JNt.forEach(t),GMr=r(dYe," (throws an error)."),dYe.forEach(t),OMr=i(Xl),Nt=n(Xl,"DIV",{class:!0});var ly=s(Nt);T(r$.$$.fragment,ly),VMr=i(ly),j7e=n(ly,"P",{});var YNt=s(j7e);XMr=r(YNt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),YNt.forEach(t),zMr=i(ly),wc=n(ly,"P",{});var Gne=s(wc);WMr=r(Gne,`Note:
Loading a model from its configuration file does `),D7e=n(Gne,"STRONG",{});var KNt=s(D7e);QMr=r(KNt,"not"),KNt.forEach(t),UMr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(Gne,"A",{href:!0});var ZNt=s(gY);HMr=r(ZNt,"from_pretrained()"),ZNt.forEach(t),JMr=r(Gne," to load the model weights."),Gne.forEach(t),YMr=i(ly),T(dM.$$.fragment,ly),ly.forEach(t),KMr=i(Xl),Mo=n(Xl,"DIV",{class:!0});var qa=s(Mo);T(t$.$$.fragment,qa),ZMr=i(qa),G7e=n(qa,"P",{});var eqt=s(G7e);eEr=r(eqt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eqt.forEach(t),oEr=i(qa),pn=n(qa,"P",{});var iy=s(pn);rEr=r(iy,"The model class to instantiate is selected based on the "),O7e=n(iy,"CODE",{});var oqt=s(O7e);tEr=r(oqt,"model_type"),oqt.forEach(t),aEr=r(iy,` property of the config object (either
passed as an argument or loaded from `),V7e=n(iy,"CODE",{});var rqt=s(V7e);nEr=r(rqt,"pretrained_model_name_or_path"),rqt.forEach(t),sEr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=n(iy,"CODE",{});var tqt=s(X7e);lEr=r(tqt,"pretrained_model_name_or_path"),tqt.forEach(t),iEr=r(iy,":"),iy.forEach(t),dEr=i(qa),z7e=n(qa,"UL",{});var aqt=s(z7e);cM=n(aqt,"LI",{});var OGe=s(cM);W7e=n(OGe,"STRONG",{});var nqt=s(W7e);cEr=r(nqt,"maskformer"),nqt.forEach(t),fEr=r(OGe," \u2014 "),hY=n(OGe,"A",{href:!0});var sqt=s(hY);mEr=r(sqt,"MaskFormerForInstanceSegmentation"),sqt.forEach(t),gEr=r(OGe," (MaskFormer model)"),OGe.forEach(t),aqt.forEach(t),hEr=i(qa),fM=n(qa,"P",{});var VGe=s(fM);pEr=r(VGe,"The model is set in evaluation mode by default using "),Q7e=n(VGe,"CODE",{});var lqt=s(Q7e);_Er=r(lqt,"model.eval()"),lqt.forEach(t),uEr=r(VGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U7e=n(VGe,"CODE",{});var iqt=s(U7e);bEr=r(iqt,"model.train()"),iqt.forEach(t),VGe.forEach(t),vEr=i(qa),T(mM.$$.fragment,qa),qa.forEach(t),Xl.forEach(t),KUe=i(f),Ac=n(f,"H2",{class:!0});var cYe=s(Ac);gM=n(cYe,"A",{id:!0,class:!0,href:!0});var dqt=s(gM);H7e=n(dqt,"SPAN",{});var cqt=s(H7e);T(a$.$$.fragment,cqt),cqt.forEach(t),dqt.forEach(t),FEr=i(cYe),J7e=n(cYe,"SPAN",{});var fqt=s(J7e);TEr=r(fqt,"TFAutoModel"),fqt.forEach(t),cYe.forEach(t),ZUe=i(f),ar=n(f,"DIV",{class:!0});var zl=s(ar);T(n$.$$.fragment,zl),MEr=i(zl),Lc=n(zl,"P",{});var One=s(Lc);EEr=r(One,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pY=n(One,"A",{href:!0});var mqt=s(pY);CEr=r(mqt,"from_pretrained()"),mqt.forEach(t),wEr=r(One," class method or the "),_Y=n(One,"A",{href:!0});var gqt=s(_Y);AEr=r(gqt,"from_config()"),gqt.forEach(t),LEr=r(One,` class
method.`),One.forEach(t),yEr=i(zl),s$=n(zl,"P",{});var fYe=s(s$);xEr=r(fYe,"This class cannot be instantiated directly using "),Y7e=n(fYe,"CODE",{});var hqt=s(Y7e);$Er=r(hqt,"__init__()"),hqt.forEach(t),kEr=r(fYe," (throws an error)."),fYe.forEach(t),SEr=i(zl),qt=n(zl,"DIV",{class:!0});var dy=s(qt);T(l$.$$.fragment,dy),REr=i(dy),K7e=n(dy,"P",{});var pqt=s(K7e);PEr=r(pqt,"Instantiates one of the base model classes of the library from a configuration."),pqt.forEach(t),BEr=i(dy),yc=n(dy,"P",{});var Vne=s(yc);IEr=r(Vne,`Note:
Loading a model from its configuration file does `),Z7e=n(Vne,"STRONG",{});var _qt=s(Z7e);NEr=r(_qt,"not"),_qt.forEach(t),qEr=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(Vne,"A",{href:!0});var uqt=s(uY);jEr=r(uqt,"from_pretrained()"),uqt.forEach(t),DEr=r(Vne," to load the model weights."),Vne.forEach(t),GEr=i(dy),T(hM.$$.fragment,dy),dy.forEach(t),OEr=i(zl),Rr=n(zl,"DIV",{class:!0});var Wl=s(Rr);T(i$.$$.fragment,Wl),VEr=i(Wl),eMe=n(Wl,"P",{});var bqt=s(eMe);XEr=r(bqt,"Instantiate one of the base model classes of the library from a pretrained model."),bqt.forEach(t),zEr=i(Wl),_n=n(Wl,"P",{});var cy=s(_n);WEr=r(cy,"The model class to instantiate is selected based on the "),oMe=n(cy,"CODE",{});var vqt=s(oMe);QEr=r(vqt,"model_type"),vqt.forEach(t),UEr=r(cy,` property of the config object (either
passed as an argument or loaded from `),rMe=n(cy,"CODE",{});var Fqt=s(rMe);HEr=r(Fqt,"pretrained_model_name_or_path"),Fqt.forEach(t),JEr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(cy,"CODE",{});var Tqt=s(tMe);YEr=r(Tqt,"pretrained_model_name_or_path"),Tqt.forEach(t),KEr=r(cy,":"),cy.forEach(t),ZEr=i(Wl),q=n(Wl,"UL",{});var D=s(q);pM=n(D,"LI",{});var XGe=s(pM);aMe=n(XGe,"STRONG",{});var Mqt=s(aMe);eCr=r(Mqt,"albert"),Mqt.forEach(t),oCr=r(XGe," \u2014 "),bY=n(XGe,"A",{href:!0});var Eqt=s(bY);rCr=r(Eqt,"TFAlbertModel"),Eqt.forEach(t),tCr=r(XGe," (ALBERT model)"),XGe.forEach(t),aCr=i(D),_M=n(D,"LI",{});var zGe=s(_M);nMe=n(zGe,"STRONG",{});var Cqt=s(nMe);nCr=r(Cqt,"bart"),Cqt.forEach(t),sCr=r(zGe," \u2014 "),vY=n(zGe,"A",{href:!0});var wqt=s(vY);lCr=r(wqt,"TFBartModel"),wqt.forEach(t),iCr=r(zGe," (BART model)"),zGe.forEach(t),dCr=i(D),uM=n(D,"LI",{});var WGe=s(uM);sMe=n(WGe,"STRONG",{});var Aqt=s(sMe);cCr=r(Aqt,"bert"),Aqt.forEach(t),fCr=r(WGe," \u2014 "),FY=n(WGe,"A",{href:!0});var Lqt=s(FY);mCr=r(Lqt,"TFBertModel"),Lqt.forEach(t),gCr=r(WGe," (BERT model)"),WGe.forEach(t),hCr=i(D),bM=n(D,"LI",{});var QGe=s(bM);lMe=n(QGe,"STRONG",{});var yqt=s(lMe);pCr=r(yqt,"blenderbot"),yqt.forEach(t),_Cr=r(QGe," \u2014 "),TY=n(QGe,"A",{href:!0});var xqt=s(TY);uCr=r(xqt,"TFBlenderbotModel"),xqt.forEach(t),bCr=r(QGe," (Blenderbot model)"),QGe.forEach(t),vCr=i(D),vM=n(D,"LI",{});var UGe=s(vM);iMe=n(UGe,"STRONG",{});var $qt=s(iMe);FCr=r($qt,"blenderbot-small"),$qt.forEach(t),TCr=r(UGe," \u2014 "),MY=n(UGe,"A",{href:!0});var kqt=s(MY);MCr=r(kqt,"TFBlenderbotSmallModel"),kqt.forEach(t),ECr=r(UGe," (BlenderbotSmall model)"),UGe.forEach(t),CCr=i(D),FM=n(D,"LI",{});var HGe=s(FM);dMe=n(HGe,"STRONG",{});var Sqt=s(dMe);wCr=r(Sqt,"camembert"),Sqt.forEach(t),ACr=r(HGe," \u2014 "),EY=n(HGe,"A",{href:!0});var Rqt=s(EY);LCr=r(Rqt,"TFCamembertModel"),Rqt.forEach(t),yCr=r(HGe," (CamemBERT model)"),HGe.forEach(t),xCr=i(D),TM=n(D,"LI",{});var JGe=s(TM);cMe=n(JGe,"STRONG",{});var Pqt=s(cMe);$Cr=r(Pqt,"clip"),Pqt.forEach(t),kCr=r(JGe," \u2014 "),CY=n(JGe,"A",{href:!0});var Bqt=s(CY);SCr=r(Bqt,"TFCLIPModel"),Bqt.forEach(t),RCr=r(JGe," (CLIP model)"),JGe.forEach(t),PCr=i(D),MM=n(D,"LI",{});var YGe=s(MM);fMe=n(YGe,"STRONG",{});var Iqt=s(fMe);BCr=r(Iqt,"convbert"),Iqt.forEach(t),ICr=r(YGe," \u2014 "),wY=n(YGe,"A",{href:!0});var Nqt=s(wY);NCr=r(Nqt,"TFConvBertModel"),Nqt.forEach(t),qCr=r(YGe," (ConvBERT model)"),YGe.forEach(t),jCr=i(D),EM=n(D,"LI",{});var KGe=s(EM);mMe=n(KGe,"STRONG",{});var qqt=s(mMe);DCr=r(qqt,"convnext"),qqt.forEach(t),GCr=r(KGe," \u2014 "),AY=n(KGe,"A",{href:!0});var jqt=s(AY);OCr=r(jqt,"TFConvNextModel"),jqt.forEach(t),VCr=r(KGe," (ConvNeXT model)"),KGe.forEach(t),XCr=i(D),CM=n(D,"LI",{});var ZGe=s(CM);gMe=n(ZGe,"STRONG",{});var Dqt=s(gMe);zCr=r(Dqt,"ctrl"),Dqt.forEach(t),WCr=r(ZGe," \u2014 "),LY=n(ZGe,"A",{href:!0});var Gqt=s(LY);QCr=r(Gqt,"TFCTRLModel"),Gqt.forEach(t),UCr=r(ZGe," (CTRL model)"),ZGe.forEach(t),HCr=i(D),wM=n(D,"LI",{});var eOe=s(wM);hMe=n(eOe,"STRONG",{});var Oqt=s(hMe);JCr=r(Oqt,"data2vec-vision"),Oqt.forEach(t),YCr=r(eOe," \u2014 "),yY=n(eOe,"A",{href:!0});var Vqt=s(yY);KCr=r(Vqt,"TFData2VecVisionModel"),Vqt.forEach(t),ZCr=r(eOe," (Data2VecVision model)"),eOe.forEach(t),e3r=i(D),AM=n(D,"LI",{});var oOe=s(AM);pMe=n(oOe,"STRONG",{});var Xqt=s(pMe);o3r=r(Xqt,"deberta"),Xqt.forEach(t),r3r=r(oOe," \u2014 "),xY=n(oOe,"A",{href:!0});var zqt=s(xY);t3r=r(zqt,"TFDebertaModel"),zqt.forEach(t),a3r=r(oOe," (DeBERTa model)"),oOe.forEach(t),n3r=i(D),LM=n(D,"LI",{});var rOe=s(LM);_Me=n(rOe,"STRONG",{});var Wqt=s(_Me);s3r=r(Wqt,"deberta-v2"),Wqt.forEach(t),l3r=r(rOe," \u2014 "),$Y=n(rOe,"A",{href:!0});var Qqt=s($Y);i3r=r(Qqt,"TFDebertaV2Model"),Qqt.forEach(t),d3r=r(rOe," (DeBERTa-v2 model)"),rOe.forEach(t),c3r=i(D),yM=n(D,"LI",{});var tOe=s(yM);uMe=n(tOe,"STRONG",{});var Uqt=s(uMe);f3r=r(Uqt,"deit"),Uqt.forEach(t),m3r=r(tOe," \u2014 "),kY=n(tOe,"A",{href:!0});var Hqt=s(kY);g3r=r(Hqt,"TFDeiTModel"),Hqt.forEach(t),h3r=r(tOe," (DeiT model)"),tOe.forEach(t),p3r=i(D),xM=n(D,"LI",{});var aOe=s(xM);bMe=n(aOe,"STRONG",{});var Jqt=s(bMe);_3r=r(Jqt,"distilbert"),Jqt.forEach(t),u3r=r(aOe," \u2014 "),SY=n(aOe,"A",{href:!0});var Yqt=s(SY);b3r=r(Yqt,"TFDistilBertModel"),Yqt.forEach(t),v3r=r(aOe," (DistilBERT model)"),aOe.forEach(t),F3r=i(D),$M=n(D,"LI",{});var nOe=s($M);vMe=n(nOe,"STRONG",{});var Kqt=s(vMe);T3r=r(Kqt,"dpr"),Kqt.forEach(t),M3r=r(nOe," \u2014 "),RY=n(nOe,"A",{href:!0});var Zqt=s(RY);E3r=r(Zqt,"TFDPRQuestionEncoder"),Zqt.forEach(t),C3r=r(nOe," (DPR model)"),nOe.forEach(t),w3r=i(D),kM=n(D,"LI",{});var sOe=s(kM);FMe=n(sOe,"STRONG",{});var ejt=s(FMe);A3r=r(ejt,"electra"),ejt.forEach(t),L3r=r(sOe," \u2014 "),PY=n(sOe,"A",{href:!0});var ojt=s(PY);y3r=r(ojt,"TFElectraModel"),ojt.forEach(t),x3r=r(sOe," (ELECTRA model)"),sOe.forEach(t),$3r=i(D),SM=n(D,"LI",{});var lOe=s(SM);TMe=n(lOe,"STRONG",{});var rjt=s(TMe);k3r=r(rjt,"flaubert"),rjt.forEach(t),S3r=r(lOe," \u2014 "),BY=n(lOe,"A",{href:!0});var tjt=s(BY);R3r=r(tjt,"TFFlaubertModel"),tjt.forEach(t),P3r=r(lOe," (FlauBERT model)"),lOe.forEach(t),B3r=i(D),fl=n(D,"LI",{});var aP=s(fl);MMe=n(aP,"STRONG",{});var ajt=s(MMe);I3r=r(ajt,"funnel"),ajt.forEach(t),N3r=r(aP," \u2014 "),IY=n(aP,"A",{href:!0});var njt=s(IY);q3r=r(njt,"TFFunnelModel"),njt.forEach(t),j3r=r(aP," or "),NY=n(aP,"A",{href:!0});var sjt=s(NY);D3r=r(sjt,"TFFunnelBaseModel"),sjt.forEach(t),G3r=r(aP," (Funnel Transformer model)"),aP.forEach(t),O3r=i(D),RM=n(D,"LI",{});var iOe=s(RM);EMe=n(iOe,"STRONG",{});var ljt=s(EMe);V3r=r(ljt,"gpt2"),ljt.forEach(t),X3r=r(iOe," \u2014 "),qY=n(iOe,"A",{href:!0});var ijt=s(qY);z3r=r(ijt,"TFGPT2Model"),ijt.forEach(t),W3r=r(iOe," (OpenAI GPT-2 model)"),iOe.forEach(t),Q3r=i(D),PM=n(D,"LI",{});var dOe=s(PM);CMe=n(dOe,"STRONG",{});var djt=s(CMe);U3r=r(djt,"gptj"),djt.forEach(t),H3r=r(dOe," \u2014 "),jY=n(dOe,"A",{href:!0});var cjt=s(jY);J3r=r(cjt,"TFGPTJModel"),cjt.forEach(t),Y3r=r(dOe," (GPT-J model)"),dOe.forEach(t),K3r=i(D),BM=n(D,"LI",{});var cOe=s(BM);wMe=n(cOe,"STRONG",{});var fjt=s(wMe);Z3r=r(fjt,"hubert"),fjt.forEach(t),e0r=r(cOe," \u2014 "),DY=n(cOe,"A",{href:!0});var mjt=s(DY);o0r=r(mjt,"TFHubertModel"),mjt.forEach(t),r0r=r(cOe," (Hubert model)"),cOe.forEach(t),t0r=i(D),IM=n(D,"LI",{});var fOe=s(IM);AMe=n(fOe,"STRONG",{});var gjt=s(AMe);a0r=r(gjt,"layoutlm"),gjt.forEach(t),n0r=r(fOe," \u2014 "),GY=n(fOe,"A",{href:!0});var hjt=s(GY);s0r=r(hjt,"TFLayoutLMModel"),hjt.forEach(t),l0r=r(fOe," (LayoutLM model)"),fOe.forEach(t),i0r=i(D),NM=n(D,"LI",{});var mOe=s(NM);LMe=n(mOe,"STRONG",{});var pjt=s(LMe);d0r=r(pjt,"led"),pjt.forEach(t),c0r=r(mOe," \u2014 "),OY=n(mOe,"A",{href:!0});var _jt=s(OY);f0r=r(_jt,"TFLEDModel"),_jt.forEach(t),m0r=r(mOe," (LED model)"),mOe.forEach(t),g0r=i(D),qM=n(D,"LI",{});var gOe=s(qM);yMe=n(gOe,"STRONG",{});var ujt=s(yMe);h0r=r(ujt,"longformer"),ujt.forEach(t),p0r=r(gOe," \u2014 "),VY=n(gOe,"A",{href:!0});var bjt=s(VY);_0r=r(bjt,"TFLongformerModel"),bjt.forEach(t),u0r=r(gOe," (Longformer model)"),gOe.forEach(t),b0r=i(D),jM=n(D,"LI",{});var hOe=s(jM);xMe=n(hOe,"STRONG",{});var vjt=s(xMe);v0r=r(vjt,"lxmert"),vjt.forEach(t),F0r=r(hOe," \u2014 "),XY=n(hOe,"A",{href:!0});var Fjt=s(XY);T0r=r(Fjt,"TFLxmertModel"),Fjt.forEach(t),M0r=r(hOe," (LXMERT model)"),hOe.forEach(t),E0r=i(D),DM=n(D,"LI",{});var pOe=s(DM);$Me=n(pOe,"STRONG",{});var Tjt=s($Me);C0r=r(Tjt,"marian"),Tjt.forEach(t),w0r=r(pOe," \u2014 "),zY=n(pOe,"A",{href:!0});var Mjt=s(zY);A0r=r(Mjt,"TFMarianModel"),Mjt.forEach(t),L0r=r(pOe," (Marian model)"),pOe.forEach(t),y0r=i(D),GM=n(D,"LI",{});var _Oe=s(GM);kMe=n(_Oe,"STRONG",{});var Ejt=s(kMe);x0r=r(Ejt,"mbart"),Ejt.forEach(t),$0r=r(_Oe," \u2014 "),WY=n(_Oe,"A",{href:!0});var Cjt=s(WY);k0r=r(Cjt,"TFMBartModel"),Cjt.forEach(t),S0r=r(_Oe," (mBART model)"),_Oe.forEach(t),R0r=i(D),OM=n(D,"LI",{});var uOe=s(OM);SMe=n(uOe,"STRONG",{});var wjt=s(SMe);P0r=r(wjt,"mobilebert"),wjt.forEach(t),B0r=r(uOe," \u2014 "),QY=n(uOe,"A",{href:!0});var Ajt=s(QY);I0r=r(Ajt,"TFMobileBertModel"),Ajt.forEach(t),N0r=r(uOe," (MobileBERT model)"),uOe.forEach(t),q0r=i(D),VM=n(D,"LI",{});var bOe=s(VM);RMe=n(bOe,"STRONG",{});var Ljt=s(RMe);j0r=r(Ljt,"mpnet"),Ljt.forEach(t),D0r=r(bOe," \u2014 "),UY=n(bOe,"A",{href:!0});var yjt=s(UY);G0r=r(yjt,"TFMPNetModel"),yjt.forEach(t),O0r=r(bOe," (MPNet model)"),bOe.forEach(t),V0r=i(D),XM=n(D,"LI",{});var vOe=s(XM);PMe=n(vOe,"STRONG",{});var xjt=s(PMe);X0r=r(xjt,"mt5"),xjt.forEach(t),z0r=r(vOe," \u2014 "),HY=n(vOe,"A",{href:!0});var $jt=s(HY);W0r=r($jt,"TFMT5Model"),$jt.forEach(t),Q0r=r(vOe," (MT5 model)"),vOe.forEach(t),U0r=i(D),zM=n(D,"LI",{});var FOe=s(zM);BMe=n(FOe,"STRONG",{});var kjt=s(BMe);H0r=r(kjt,"openai-gpt"),kjt.forEach(t),J0r=r(FOe," \u2014 "),JY=n(FOe,"A",{href:!0});var Sjt=s(JY);Y0r=r(Sjt,"TFOpenAIGPTModel"),Sjt.forEach(t),K0r=r(FOe," (OpenAI GPT model)"),FOe.forEach(t),Z0r=i(D),WM=n(D,"LI",{});var TOe=s(WM);IMe=n(TOe,"STRONG",{});var Rjt=s(IMe);ewr=r(Rjt,"opt"),Rjt.forEach(t),owr=r(TOe," \u2014 "),YY=n(TOe,"A",{href:!0});var Pjt=s(YY);rwr=r(Pjt,"TFOPTModel"),Pjt.forEach(t),twr=r(TOe," (OPT model)"),TOe.forEach(t),awr=i(D),QM=n(D,"LI",{});var MOe=s(QM);NMe=n(MOe,"STRONG",{});var Bjt=s(NMe);nwr=r(Bjt,"pegasus"),Bjt.forEach(t),swr=r(MOe," \u2014 "),KY=n(MOe,"A",{href:!0});var Ijt=s(KY);lwr=r(Ijt,"TFPegasusModel"),Ijt.forEach(t),iwr=r(MOe," (Pegasus model)"),MOe.forEach(t),dwr=i(D),UM=n(D,"LI",{});var EOe=s(UM);qMe=n(EOe,"STRONG",{});var Njt=s(qMe);cwr=r(Njt,"regnet"),Njt.forEach(t),fwr=r(EOe," \u2014 "),ZY=n(EOe,"A",{href:!0});var qjt=s(ZY);mwr=r(qjt,"TFRegNetModel"),qjt.forEach(t),gwr=r(EOe," (RegNet model)"),EOe.forEach(t),hwr=i(D),HM=n(D,"LI",{});var COe=s(HM);jMe=n(COe,"STRONG",{});var jjt=s(jMe);pwr=r(jjt,"rembert"),jjt.forEach(t),_wr=r(COe," \u2014 "),eK=n(COe,"A",{href:!0});var Djt=s(eK);uwr=r(Djt,"TFRemBertModel"),Djt.forEach(t),bwr=r(COe," (RemBERT model)"),COe.forEach(t),vwr=i(D),JM=n(D,"LI",{});var wOe=s(JM);DMe=n(wOe,"STRONG",{});var Gjt=s(DMe);Fwr=r(Gjt,"resnet"),Gjt.forEach(t),Twr=r(wOe," \u2014 "),oK=n(wOe,"A",{href:!0});var Ojt=s(oK);Mwr=r(Ojt,"TFResNetModel"),Ojt.forEach(t),Ewr=r(wOe," (ResNet model)"),wOe.forEach(t),Cwr=i(D),YM=n(D,"LI",{});var AOe=s(YM);GMe=n(AOe,"STRONG",{});var Vjt=s(GMe);wwr=r(Vjt,"roberta"),Vjt.forEach(t),Awr=r(AOe," \u2014 "),rK=n(AOe,"A",{href:!0});var Xjt=s(rK);Lwr=r(Xjt,"TFRobertaModel"),Xjt.forEach(t),ywr=r(AOe," (RoBERTa model)"),AOe.forEach(t),xwr=i(D),KM=n(D,"LI",{});var LOe=s(KM);OMe=n(LOe,"STRONG",{});var zjt=s(OMe);$wr=r(zjt,"roformer"),zjt.forEach(t),kwr=r(LOe," \u2014 "),tK=n(LOe,"A",{href:!0});var Wjt=s(tK);Swr=r(Wjt,"TFRoFormerModel"),Wjt.forEach(t),Rwr=r(LOe," (RoFormer model)"),LOe.forEach(t),Pwr=i(D),ZM=n(D,"LI",{});var yOe=s(ZM);VMe=n(yOe,"STRONG",{});var Qjt=s(VMe);Bwr=r(Qjt,"segformer"),Qjt.forEach(t),Iwr=r(yOe," \u2014 "),aK=n(yOe,"A",{href:!0});var Ujt=s(aK);Nwr=r(Ujt,"TFSegformerModel"),Ujt.forEach(t),qwr=r(yOe," (SegFormer model)"),yOe.forEach(t),jwr=i(D),eE=n(D,"LI",{});var xOe=s(eE);XMe=n(xOe,"STRONG",{});var Hjt=s(XMe);Dwr=r(Hjt,"speech_to_text"),Hjt.forEach(t),Gwr=r(xOe," \u2014 "),nK=n(xOe,"A",{href:!0});var Jjt=s(nK);Owr=r(Jjt,"TFSpeech2TextModel"),Jjt.forEach(t),Vwr=r(xOe," (Speech2Text model)"),xOe.forEach(t),Xwr=i(D),oE=n(D,"LI",{});var $Oe=s(oE);zMe=n($Oe,"STRONG",{});var Yjt=s(zMe);zwr=r(Yjt,"swin"),Yjt.forEach(t),Wwr=r($Oe," \u2014 "),sK=n($Oe,"A",{href:!0});var Kjt=s(sK);Qwr=r(Kjt,"TFSwinModel"),Kjt.forEach(t),Uwr=r($Oe," (Swin Transformer model)"),$Oe.forEach(t),Hwr=i(D),rE=n(D,"LI",{});var kOe=s(rE);WMe=n(kOe,"STRONG",{});var Zjt=s(WMe);Jwr=r(Zjt,"t5"),Zjt.forEach(t),Ywr=r(kOe," \u2014 "),lK=n(kOe,"A",{href:!0});var eDt=s(lK);Kwr=r(eDt,"TFT5Model"),eDt.forEach(t),Zwr=r(kOe," (T5 model)"),kOe.forEach(t),e6r=i(D),tE=n(D,"LI",{});var SOe=s(tE);QMe=n(SOe,"STRONG",{});var oDt=s(QMe);o6r=r(oDt,"tapas"),oDt.forEach(t),r6r=r(SOe," \u2014 "),iK=n(SOe,"A",{href:!0});var rDt=s(iK);t6r=r(rDt,"TFTapasModel"),rDt.forEach(t),a6r=r(SOe," (TAPAS model)"),SOe.forEach(t),n6r=i(D),aE=n(D,"LI",{});var ROe=s(aE);UMe=n(ROe,"STRONG",{});var tDt=s(UMe);s6r=r(tDt,"transfo-xl"),tDt.forEach(t),l6r=r(ROe," \u2014 "),dK=n(ROe,"A",{href:!0});var aDt=s(dK);i6r=r(aDt,"TFTransfoXLModel"),aDt.forEach(t),d6r=r(ROe," (Transformer-XL model)"),ROe.forEach(t),c6r=i(D),nE=n(D,"LI",{});var POe=s(nE);HMe=n(POe,"STRONG",{});var nDt=s(HMe);f6r=r(nDt,"vit"),nDt.forEach(t),m6r=r(POe," \u2014 "),cK=n(POe,"A",{href:!0});var sDt=s(cK);g6r=r(sDt,"TFViTModel"),sDt.forEach(t),h6r=r(POe," (ViT model)"),POe.forEach(t),p6r=i(D),sE=n(D,"LI",{});var BOe=s(sE);JMe=n(BOe,"STRONG",{});var lDt=s(JMe);_6r=r(lDt,"vit_mae"),lDt.forEach(t),u6r=r(BOe," \u2014 "),fK=n(BOe,"A",{href:!0});var iDt=s(fK);b6r=r(iDt,"TFViTMAEModel"),iDt.forEach(t),v6r=r(BOe," (ViTMAE model)"),BOe.forEach(t),F6r=i(D),lE=n(D,"LI",{});var IOe=s(lE);YMe=n(IOe,"STRONG",{});var dDt=s(YMe);T6r=r(dDt,"wav2vec2"),dDt.forEach(t),M6r=r(IOe," \u2014 "),mK=n(IOe,"A",{href:!0});var cDt=s(mK);E6r=r(cDt,"TFWav2Vec2Model"),cDt.forEach(t),C6r=r(IOe," (Wav2Vec2 model)"),IOe.forEach(t),w6r=i(D),iE=n(D,"LI",{});var NOe=s(iE);KMe=n(NOe,"STRONG",{});var fDt=s(KMe);A6r=r(fDt,"xlm"),fDt.forEach(t),L6r=r(NOe," \u2014 "),gK=n(NOe,"A",{href:!0});var mDt=s(gK);y6r=r(mDt,"TFXLMModel"),mDt.forEach(t),x6r=r(NOe," (XLM model)"),NOe.forEach(t),$6r=i(D),dE=n(D,"LI",{});var qOe=s(dE);ZMe=n(qOe,"STRONG",{});var gDt=s(ZMe);k6r=r(gDt,"xlm-roberta"),gDt.forEach(t),S6r=r(qOe," \u2014 "),hK=n(qOe,"A",{href:!0});var hDt=s(hK);R6r=r(hDt,"TFXLMRobertaModel"),hDt.forEach(t),P6r=r(qOe," (XLM-RoBERTa model)"),qOe.forEach(t),B6r=i(D),cE=n(D,"LI",{});var jOe=s(cE);eEe=n(jOe,"STRONG",{});var pDt=s(eEe);I6r=r(pDt,"xlnet"),pDt.forEach(t),N6r=r(jOe," \u2014 "),pK=n(jOe,"A",{href:!0});var _Dt=s(pK);q6r=r(_Dt,"TFXLNetModel"),_Dt.forEach(t),j6r=r(jOe," (XLNet model)"),jOe.forEach(t),D.forEach(t),D6r=i(Wl),T(fE.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),eHe=i(f),xc=n(f,"H2",{class:!0});var mYe=s(xc);mE=n(mYe,"A",{id:!0,class:!0,href:!0});var uDt=s(mE);oEe=n(uDt,"SPAN",{});var bDt=s(oEe);T(d$.$$.fragment,bDt),bDt.forEach(t),uDt.forEach(t),G6r=i(mYe),rEe=n(mYe,"SPAN",{});var vDt=s(rEe);O6r=r(vDt,"TFAutoModelForPreTraining"),vDt.forEach(t),mYe.forEach(t),oHe=i(f),nr=n(f,"DIV",{class:!0});var Ql=s(nr);T(c$.$$.fragment,Ql),V6r=i(Ql),$c=n(Ql,"P",{});var Xne=s($c);X6r=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_K=n(Xne,"A",{href:!0});var FDt=s(_K);z6r=r(FDt,"from_pretrained()"),FDt.forEach(t),W6r=r(Xne," class method or the "),uK=n(Xne,"A",{href:!0});var TDt=s(uK);Q6r=r(TDt,"from_config()"),TDt.forEach(t),U6r=r(Xne,` class
method.`),Xne.forEach(t),H6r=i(Ql),f$=n(Ql,"P",{});var gYe=s(f$);J6r=r(gYe,"This class cannot be instantiated directly using "),tEe=n(gYe,"CODE",{});var MDt=s(tEe);Y6r=r(MDt,"__init__()"),MDt.forEach(t),K6r=r(gYe," (throws an error)."),gYe.forEach(t),Z6r=i(Ql),jt=n(Ql,"DIV",{class:!0});var fy=s(jt);T(m$.$$.fragment,fy),eAr=i(fy),aEe=n(fy,"P",{});var EDt=s(aEe);oAr=r(EDt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EDt.forEach(t),rAr=i(fy),kc=n(fy,"P",{});var zne=s(kc);tAr=r(zne,`Note:
Loading a model from its configuration file does `),nEe=n(zne,"STRONG",{});var CDt=s(nEe);aAr=r(CDt,"not"),CDt.forEach(t),nAr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(zne,"A",{href:!0});var wDt=s(bK);sAr=r(wDt,"from_pretrained()"),wDt.forEach(t),lAr=r(zne," to load the model weights."),zne.forEach(t),iAr=i(fy),T(gE.$$.fragment,fy),fy.forEach(t),dAr=i(Ql),Pr=n(Ql,"DIV",{class:!0});var Ul=s(Pr);T(g$.$$.fragment,Ul),cAr=i(Ul),sEe=n(Ul,"P",{});var ADt=s(sEe);fAr=r(ADt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ADt.forEach(t),mAr=i(Ul),un=n(Ul,"P",{});var my=s(un);gAr=r(my,"The model class to instantiate is selected based on the "),lEe=n(my,"CODE",{});var LDt=s(lEe);hAr=r(LDt,"model_type"),LDt.forEach(t),pAr=r(my,` property of the config object (either
passed as an argument or loaded from `),iEe=n(my,"CODE",{});var yDt=s(iEe);_Ar=r(yDt,"pretrained_model_name_or_path"),yDt.forEach(t),uAr=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(my,"CODE",{});var xDt=s(dEe);bAr=r(xDt,"pretrained_model_name_or_path"),xDt.forEach(t),vAr=r(my,":"),my.forEach(t),FAr=i(Ul),se=n(Ul,"UL",{});var le=s(se);hE=n(le,"LI",{});var DOe=s(hE);cEe=n(DOe,"STRONG",{});var $Dt=s(cEe);TAr=r($Dt,"albert"),$Dt.forEach(t),MAr=r(DOe," \u2014 "),vK=n(DOe,"A",{href:!0});var kDt=s(vK);EAr=r(kDt,"TFAlbertForPreTraining"),kDt.forEach(t),CAr=r(DOe," (ALBERT model)"),DOe.forEach(t),wAr=i(le),pE=n(le,"LI",{});var GOe=s(pE);fEe=n(GOe,"STRONG",{});var SDt=s(fEe);AAr=r(SDt,"bart"),SDt.forEach(t),LAr=r(GOe," \u2014 "),FK=n(GOe,"A",{href:!0});var RDt=s(FK);yAr=r(RDt,"TFBartForConditionalGeneration"),RDt.forEach(t),xAr=r(GOe," (BART model)"),GOe.forEach(t),$Ar=i(le),_E=n(le,"LI",{});var OOe=s(_E);mEe=n(OOe,"STRONG",{});var PDt=s(mEe);kAr=r(PDt,"bert"),PDt.forEach(t),SAr=r(OOe," \u2014 "),TK=n(OOe,"A",{href:!0});var BDt=s(TK);RAr=r(BDt,"TFBertForPreTraining"),BDt.forEach(t),PAr=r(OOe," (BERT model)"),OOe.forEach(t),BAr=i(le),uE=n(le,"LI",{});var VOe=s(uE);gEe=n(VOe,"STRONG",{});var IDt=s(gEe);IAr=r(IDt,"camembert"),IDt.forEach(t),NAr=r(VOe," \u2014 "),MK=n(VOe,"A",{href:!0});var NDt=s(MK);qAr=r(NDt,"TFCamembertForMaskedLM"),NDt.forEach(t),jAr=r(VOe," (CamemBERT model)"),VOe.forEach(t),DAr=i(le),bE=n(le,"LI",{});var XOe=s(bE);hEe=n(XOe,"STRONG",{});var qDt=s(hEe);GAr=r(qDt,"ctrl"),qDt.forEach(t),OAr=r(XOe," \u2014 "),EK=n(XOe,"A",{href:!0});var jDt=s(EK);VAr=r(jDt,"TFCTRLLMHeadModel"),jDt.forEach(t),XAr=r(XOe," (CTRL model)"),XOe.forEach(t),zAr=i(le),vE=n(le,"LI",{});var zOe=s(vE);pEe=n(zOe,"STRONG",{});var DDt=s(pEe);WAr=r(DDt,"distilbert"),DDt.forEach(t),QAr=r(zOe," \u2014 "),CK=n(zOe,"A",{href:!0});var GDt=s(CK);UAr=r(GDt,"TFDistilBertForMaskedLM"),GDt.forEach(t),HAr=r(zOe," (DistilBERT model)"),zOe.forEach(t),JAr=i(le),FE=n(le,"LI",{});var WOe=s(FE);_Ee=n(WOe,"STRONG",{});var ODt=s(_Ee);YAr=r(ODt,"electra"),ODt.forEach(t),KAr=r(WOe," \u2014 "),wK=n(WOe,"A",{href:!0});var VDt=s(wK);ZAr=r(VDt,"TFElectraForPreTraining"),VDt.forEach(t),eLr=r(WOe," (ELECTRA model)"),WOe.forEach(t),oLr=i(le),TE=n(le,"LI",{});var QOe=s(TE);uEe=n(QOe,"STRONG",{});var XDt=s(uEe);rLr=r(XDt,"flaubert"),XDt.forEach(t),tLr=r(QOe," \u2014 "),AK=n(QOe,"A",{href:!0});var zDt=s(AK);aLr=r(zDt,"TFFlaubertWithLMHeadModel"),zDt.forEach(t),nLr=r(QOe," (FlauBERT model)"),QOe.forEach(t),sLr=i(le),ME=n(le,"LI",{});var UOe=s(ME);bEe=n(UOe,"STRONG",{});var WDt=s(bEe);lLr=r(WDt,"funnel"),WDt.forEach(t),iLr=r(UOe," \u2014 "),LK=n(UOe,"A",{href:!0});var QDt=s(LK);dLr=r(QDt,"TFFunnelForPreTraining"),QDt.forEach(t),cLr=r(UOe," (Funnel Transformer model)"),UOe.forEach(t),fLr=i(le),EE=n(le,"LI",{});var HOe=s(EE);vEe=n(HOe,"STRONG",{});var UDt=s(vEe);mLr=r(UDt,"gpt2"),UDt.forEach(t),gLr=r(HOe," \u2014 "),yK=n(HOe,"A",{href:!0});var HDt=s(yK);hLr=r(HDt,"TFGPT2LMHeadModel"),HDt.forEach(t),pLr=r(HOe," (OpenAI GPT-2 model)"),HOe.forEach(t),_Lr=i(le),CE=n(le,"LI",{});var JOe=s(CE);FEe=n(JOe,"STRONG",{});var JDt=s(FEe);uLr=r(JDt,"layoutlm"),JDt.forEach(t),bLr=r(JOe," \u2014 "),xK=n(JOe,"A",{href:!0});var YDt=s(xK);vLr=r(YDt,"TFLayoutLMForMaskedLM"),YDt.forEach(t),FLr=r(JOe," (LayoutLM model)"),JOe.forEach(t),TLr=i(le),wE=n(le,"LI",{});var YOe=s(wE);TEe=n(YOe,"STRONG",{});var KDt=s(TEe);MLr=r(KDt,"lxmert"),KDt.forEach(t),ELr=r(YOe," \u2014 "),$K=n(YOe,"A",{href:!0});var ZDt=s($K);CLr=r(ZDt,"TFLxmertForPreTraining"),ZDt.forEach(t),wLr=r(YOe," (LXMERT model)"),YOe.forEach(t),ALr=i(le),AE=n(le,"LI",{});var KOe=s(AE);MEe=n(KOe,"STRONG",{});var eGt=s(MEe);LLr=r(eGt,"mobilebert"),eGt.forEach(t),yLr=r(KOe," \u2014 "),kK=n(KOe,"A",{href:!0});var oGt=s(kK);xLr=r(oGt,"TFMobileBertForPreTraining"),oGt.forEach(t),$Lr=r(KOe," (MobileBERT model)"),KOe.forEach(t),kLr=i(le),LE=n(le,"LI",{});var ZOe=s(LE);EEe=n(ZOe,"STRONG",{});var rGt=s(EEe);SLr=r(rGt,"mpnet"),rGt.forEach(t),RLr=r(ZOe," \u2014 "),SK=n(ZOe,"A",{href:!0});var tGt=s(SK);PLr=r(tGt,"TFMPNetForMaskedLM"),tGt.forEach(t),BLr=r(ZOe," (MPNet model)"),ZOe.forEach(t),ILr=i(le),yE=n(le,"LI",{});var eVe=s(yE);CEe=n(eVe,"STRONG",{});var aGt=s(CEe);NLr=r(aGt,"openai-gpt"),aGt.forEach(t),qLr=r(eVe," \u2014 "),RK=n(eVe,"A",{href:!0});var nGt=s(RK);jLr=r(nGt,"TFOpenAIGPTLMHeadModel"),nGt.forEach(t),DLr=r(eVe," (OpenAI GPT model)"),eVe.forEach(t),GLr=i(le),xE=n(le,"LI",{});var oVe=s(xE);wEe=n(oVe,"STRONG",{});var sGt=s(wEe);OLr=r(sGt,"roberta"),sGt.forEach(t),VLr=r(oVe," \u2014 "),PK=n(oVe,"A",{href:!0});var lGt=s(PK);XLr=r(lGt,"TFRobertaForMaskedLM"),lGt.forEach(t),zLr=r(oVe," (RoBERTa model)"),oVe.forEach(t),WLr=i(le),$E=n(le,"LI",{});var rVe=s($E);AEe=n(rVe,"STRONG",{});var iGt=s(AEe);QLr=r(iGt,"t5"),iGt.forEach(t),ULr=r(rVe," \u2014 "),BK=n(rVe,"A",{href:!0});var dGt=s(BK);HLr=r(dGt,"TFT5ForConditionalGeneration"),dGt.forEach(t),JLr=r(rVe," (T5 model)"),rVe.forEach(t),YLr=i(le),kE=n(le,"LI",{});var tVe=s(kE);LEe=n(tVe,"STRONG",{});var cGt=s(LEe);KLr=r(cGt,"tapas"),cGt.forEach(t),ZLr=r(tVe," \u2014 "),IK=n(tVe,"A",{href:!0});var fGt=s(IK);eyr=r(fGt,"TFTapasForMaskedLM"),fGt.forEach(t),oyr=r(tVe," (TAPAS model)"),tVe.forEach(t),ryr=i(le),SE=n(le,"LI",{});var aVe=s(SE);yEe=n(aVe,"STRONG",{});var mGt=s(yEe);tyr=r(mGt,"transfo-xl"),mGt.forEach(t),ayr=r(aVe," \u2014 "),NK=n(aVe,"A",{href:!0});var gGt=s(NK);nyr=r(gGt,"TFTransfoXLLMHeadModel"),gGt.forEach(t),syr=r(aVe," (Transformer-XL model)"),aVe.forEach(t),lyr=i(le),RE=n(le,"LI",{});var nVe=s(RE);xEe=n(nVe,"STRONG",{});var hGt=s(xEe);iyr=r(hGt,"vit_mae"),hGt.forEach(t),dyr=r(nVe," \u2014 "),qK=n(nVe,"A",{href:!0});var pGt=s(qK);cyr=r(pGt,"TFViTMAEForPreTraining"),pGt.forEach(t),fyr=r(nVe," (ViTMAE model)"),nVe.forEach(t),myr=i(le),PE=n(le,"LI",{});var sVe=s(PE);$Ee=n(sVe,"STRONG",{});var _Gt=s($Ee);gyr=r(_Gt,"xlm"),_Gt.forEach(t),hyr=r(sVe," \u2014 "),jK=n(sVe,"A",{href:!0});var uGt=s(jK);pyr=r(uGt,"TFXLMWithLMHeadModel"),uGt.forEach(t),_yr=r(sVe," (XLM model)"),sVe.forEach(t),uyr=i(le),BE=n(le,"LI",{});var lVe=s(BE);kEe=n(lVe,"STRONG",{});var bGt=s(kEe);byr=r(bGt,"xlm-roberta"),bGt.forEach(t),vyr=r(lVe," \u2014 "),DK=n(lVe,"A",{href:!0});var vGt=s(DK);Fyr=r(vGt,"TFXLMRobertaForMaskedLM"),vGt.forEach(t),Tyr=r(lVe," (XLM-RoBERTa model)"),lVe.forEach(t),Myr=i(le),IE=n(le,"LI",{});var iVe=s(IE);SEe=n(iVe,"STRONG",{});var FGt=s(SEe);Eyr=r(FGt,"xlnet"),FGt.forEach(t),Cyr=r(iVe," \u2014 "),GK=n(iVe,"A",{href:!0});var TGt=s(GK);wyr=r(TGt,"TFXLNetLMHeadModel"),TGt.forEach(t),Ayr=r(iVe," (XLNet model)"),iVe.forEach(t),le.forEach(t),Lyr=i(Ul),T(NE.$$.fragment,Ul),Ul.forEach(t),Ql.forEach(t),rHe=i(f),Sc=n(f,"H2",{class:!0});var hYe=s(Sc);qE=n(hYe,"A",{id:!0,class:!0,href:!0});var MGt=s(qE);REe=n(MGt,"SPAN",{});var EGt=s(REe);T(h$.$$.fragment,EGt),EGt.forEach(t),MGt.forEach(t),yyr=i(hYe),PEe=n(hYe,"SPAN",{});var CGt=s(PEe);xyr=r(CGt,"TFAutoModelForCausalLM"),CGt.forEach(t),hYe.forEach(t),tHe=i(f),sr=n(f,"DIV",{class:!0});var Hl=s(sr);T(p$.$$.fragment,Hl),$yr=i(Hl),Rc=n(Hl,"P",{});var Wne=s(Rc);kyr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OK=n(Wne,"A",{href:!0});var wGt=s(OK);Syr=r(wGt,"from_pretrained()"),wGt.forEach(t),Ryr=r(Wne," class method or the "),VK=n(Wne,"A",{href:!0});var AGt=s(VK);Pyr=r(AGt,"from_config()"),AGt.forEach(t),Byr=r(Wne,` class
method.`),Wne.forEach(t),Iyr=i(Hl),_$=n(Hl,"P",{});var pYe=s(_$);Nyr=r(pYe,"This class cannot be instantiated directly using "),BEe=n(pYe,"CODE",{});var LGt=s(BEe);qyr=r(LGt,"__init__()"),LGt.forEach(t),jyr=r(pYe," (throws an error)."),pYe.forEach(t),Dyr=i(Hl),Dt=n(Hl,"DIV",{class:!0});var gy=s(Dt);T(u$.$$.fragment,gy),Gyr=i(gy),IEe=n(gy,"P",{});var yGt=s(IEe);Oyr=r(yGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yGt.forEach(t),Vyr=i(gy),Pc=n(gy,"P",{});var Qne=s(Pc);Xyr=r(Qne,`Note:
Loading a model from its configuration file does `),NEe=n(Qne,"STRONG",{});var xGt=s(NEe);zyr=r(xGt,"not"),xGt.forEach(t),Wyr=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(Qne,"A",{href:!0});var $Gt=s(XK);Qyr=r($Gt,"from_pretrained()"),$Gt.forEach(t),Uyr=r(Qne," to load the model weights."),Qne.forEach(t),Hyr=i(gy),T(jE.$$.fragment,gy),gy.forEach(t),Jyr=i(Hl),Br=n(Hl,"DIV",{class:!0});var Jl=s(Br);T(b$.$$.fragment,Jl),Yyr=i(Jl),qEe=n(Jl,"P",{});var kGt=s(qEe);Kyr=r(kGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kGt.forEach(t),Zyr=i(Jl),bn=n(Jl,"P",{});var hy=s(bn);e8r=r(hy,"The model class to instantiate is selected based on the "),jEe=n(hy,"CODE",{});var SGt=s(jEe);o8r=r(SGt,"model_type"),SGt.forEach(t),r8r=r(hy,` property of the config object (either
passed as an argument or loaded from `),DEe=n(hy,"CODE",{});var RGt=s(DEe);t8r=r(RGt,"pretrained_model_name_or_path"),RGt.forEach(t),a8r=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(hy,"CODE",{});var PGt=s(GEe);n8r=r(PGt,"pretrained_model_name_or_path"),PGt.forEach(t),s8r=r(hy,":"),hy.forEach(t),l8r=i(Jl),Me=n(Jl,"UL",{});var Ce=s(Me);DE=n(Ce,"LI",{});var dVe=s(DE);OEe=n(dVe,"STRONG",{});var BGt=s(OEe);i8r=r(BGt,"bert"),BGt.forEach(t),d8r=r(dVe," \u2014 "),zK=n(dVe,"A",{href:!0});var IGt=s(zK);c8r=r(IGt,"TFBertLMHeadModel"),IGt.forEach(t),f8r=r(dVe," (BERT model)"),dVe.forEach(t),m8r=i(Ce),GE=n(Ce,"LI",{});var cVe=s(GE);VEe=n(cVe,"STRONG",{});var NGt=s(VEe);g8r=r(NGt,"camembert"),NGt.forEach(t),h8r=r(cVe," \u2014 "),WK=n(cVe,"A",{href:!0});var qGt=s(WK);p8r=r(qGt,"TFCamembertForCausalLM"),qGt.forEach(t),_8r=r(cVe," (CamemBERT model)"),cVe.forEach(t),u8r=i(Ce),OE=n(Ce,"LI",{});var fVe=s(OE);XEe=n(fVe,"STRONG",{});var jGt=s(XEe);b8r=r(jGt,"ctrl"),jGt.forEach(t),v8r=r(fVe," \u2014 "),QK=n(fVe,"A",{href:!0});var DGt=s(QK);F8r=r(DGt,"TFCTRLLMHeadModel"),DGt.forEach(t),T8r=r(fVe," (CTRL model)"),fVe.forEach(t),M8r=i(Ce),VE=n(Ce,"LI",{});var mVe=s(VE);zEe=n(mVe,"STRONG",{});var GGt=s(zEe);E8r=r(GGt,"gpt2"),GGt.forEach(t),C8r=r(mVe," \u2014 "),UK=n(mVe,"A",{href:!0});var OGt=s(UK);w8r=r(OGt,"TFGPT2LMHeadModel"),OGt.forEach(t),A8r=r(mVe," (OpenAI GPT-2 model)"),mVe.forEach(t),L8r=i(Ce),XE=n(Ce,"LI",{});var gVe=s(XE);WEe=n(gVe,"STRONG",{});var VGt=s(WEe);y8r=r(VGt,"gptj"),VGt.forEach(t),x8r=r(gVe," \u2014 "),HK=n(gVe,"A",{href:!0});var XGt=s(HK);$8r=r(XGt,"TFGPTJForCausalLM"),XGt.forEach(t),k8r=r(gVe," (GPT-J model)"),gVe.forEach(t),S8r=i(Ce),zE=n(Ce,"LI",{});var hVe=s(zE);QEe=n(hVe,"STRONG",{});var zGt=s(QEe);R8r=r(zGt,"openai-gpt"),zGt.forEach(t),P8r=r(hVe," \u2014 "),JK=n(hVe,"A",{href:!0});var WGt=s(JK);B8r=r(WGt,"TFOpenAIGPTLMHeadModel"),WGt.forEach(t),I8r=r(hVe," (OpenAI GPT model)"),hVe.forEach(t),N8r=i(Ce),WE=n(Ce,"LI",{});var pVe=s(WE);UEe=n(pVe,"STRONG",{});var QGt=s(UEe);q8r=r(QGt,"opt"),QGt.forEach(t),j8r=r(pVe," \u2014 "),YK=n(pVe,"A",{href:!0});var UGt=s(YK);D8r=r(UGt,"TFOPTForCausalLM"),UGt.forEach(t),G8r=r(pVe," (OPT model)"),pVe.forEach(t),O8r=i(Ce),QE=n(Ce,"LI",{});var _Ve=s(QE);HEe=n(_Ve,"STRONG",{});var HGt=s(HEe);V8r=r(HGt,"rembert"),HGt.forEach(t),X8r=r(_Ve," \u2014 "),KK=n(_Ve,"A",{href:!0});var JGt=s(KK);z8r=r(JGt,"TFRemBertForCausalLM"),JGt.forEach(t),W8r=r(_Ve," (RemBERT model)"),_Ve.forEach(t),Q8r=i(Ce),UE=n(Ce,"LI",{});var uVe=s(UE);JEe=n(uVe,"STRONG",{});var YGt=s(JEe);U8r=r(YGt,"roberta"),YGt.forEach(t),H8r=r(uVe," \u2014 "),ZK=n(uVe,"A",{href:!0});var KGt=s(ZK);J8r=r(KGt,"TFRobertaForCausalLM"),KGt.forEach(t),Y8r=r(uVe," (RoBERTa model)"),uVe.forEach(t),K8r=i(Ce),HE=n(Ce,"LI",{});var bVe=s(HE);YEe=n(bVe,"STRONG",{});var ZGt=s(YEe);Z8r=r(ZGt,"roformer"),ZGt.forEach(t),e9r=r(bVe," \u2014 "),eZ=n(bVe,"A",{href:!0});var eOt=s(eZ);o9r=r(eOt,"TFRoFormerForCausalLM"),eOt.forEach(t),r9r=r(bVe," (RoFormer model)"),bVe.forEach(t),t9r=i(Ce),JE=n(Ce,"LI",{});var vVe=s(JE);KEe=n(vVe,"STRONG",{});var oOt=s(KEe);a9r=r(oOt,"transfo-xl"),oOt.forEach(t),n9r=r(vVe," \u2014 "),oZ=n(vVe,"A",{href:!0});var rOt=s(oZ);s9r=r(rOt,"TFTransfoXLLMHeadModel"),rOt.forEach(t),l9r=r(vVe," (Transformer-XL model)"),vVe.forEach(t),i9r=i(Ce),YE=n(Ce,"LI",{});var FVe=s(YE);ZEe=n(FVe,"STRONG",{});var tOt=s(ZEe);d9r=r(tOt,"xlm"),tOt.forEach(t),c9r=r(FVe," \u2014 "),rZ=n(FVe,"A",{href:!0});var aOt=s(rZ);f9r=r(aOt,"TFXLMWithLMHeadModel"),aOt.forEach(t),m9r=r(FVe," (XLM model)"),FVe.forEach(t),g9r=i(Ce),KE=n(Ce,"LI",{});var TVe=s(KE);eCe=n(TVe,"STRONG",{});var nOt=s(eCe);h9r=r(nOt,"xlnet"),nOt.forEach(t),p9r=r(TVe," \u2014 "),tZ=n(TVe,"A",{href:!0});var sOt=s(tZ);_9r=r(sOt,"TFXLNetLMHeadModel"),sOt.forEach(t),u9r=r(TVe," (XLNet model)"),TVe.forEach(t),Ce.forEach(t),b9r=i(Jl),T(ZE.$$.fragment,Jl),Jl.forEach(t),Hl.forEach(t),aHe=i(f),Bc=n(f,"H2",{class:!0});var _Ye=s(Bc);eC=n(_Ye,"A",{id:!0,class:!0,href:!0});var lOt=s(eC);oCe=n(lOt,"SPAN",{});var iOt=s(oCe);T(v$.$$.fragment,iOt),iOt.forEach(t),lOt.forEach(t),v9r=i(_Ye),rCe=n(_Ye,"SPAN",{});var dOt=s(rCe);F9r=r(dOt,"TFAutoModelForImageClassification"),dOt.forEach(t),_Ye.forEach(t),nHe=i(f),lr=n(f,"DIV",{class:!0});var Yl=s(lr);T(F$.$$.fragment,Yl),T9r=i(Yl),Ic=n(Yl,"P",{});var Une=s(Ic);M9r=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aZ=n(Une,"A",{href:!0});var cOt=s(aZ);E9r=r(cOt,"from_pretrained()"),cOt.forEach(t),C9r=r(Une," class method or the "),nZ=n(Une,"A",{href:!0});var fOt=s(nZ);w9r=r(fOt,"from_config()"),fOt.forEach(t),A9r=r(Une,` class
method.`),Une.forEach(t),L9r=i(Yl),T$=n(Yl,"P",{});var uYe=s(T$);y9r=r(uYe,"This class cannot be instantiated directly using "),tCe=n(uYe,"CODE",{});var mOt=s(tCe);x9r=r(mOt,"__init__()"),mOt.forEach(t),$9r=r(uYe," (throws an error)."),uYe.forEach(t),k9r=i(Yl),Gt=n(Yl,"DIV",{class:!0});var py=s(Gt);T(M$.$$.fragment,py),S9r=i(py),aCe=n(py,"P",{});var gOt=s(aCe);R9r=r(gOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gOt.forEach(t),P9r=i(py),Nc=n(py,"P",{});var Hne=s(Nc);B9r=r(Hne,`Note:
Loading a model from its configuration file does `),nCe=n(Hne,"STRONG",{});var hOt=s(nCe);I9r=r(hOt,"not"),hOt.forEach(t),N9r=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=n(Hne,"A",{href:!0});var pOt=s(sZ);q9r=r(pOt,"from_pretrained()"),pOt.forEach(t),j9r=r(Hne," to load the model weights."),Hne.forEach(t),D9r=i(py),T(oC.$$.fragment,py),py.forEach(t),G9r=i(Yl),Ir=n(Yl,"DIV",{class:!0});var Kl=s(Ir);T(E$.$$.fragment,Kl),O9r=i(Kl),sCe=n(Kl,"P",{});var _Ot=s(sCe);V9r=r(_Ot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Ot.forEach(t),X9r=i(Kl),vn=n(Kl,"P",{});var _y=s(vn);z9r=r(_y,"The model class to instantiate is selected based on the "),lCe=n(_y,"CODE",{});var uOt=s(lCe);W9r=r(uOt,"model_type"),uOt.forEach(t),Q9r=r(_y,` property of the config object (either
passed as an argument or loaded from `),iCe=n(_y,"CODE",{});var bOt=s(iCe);U9r=r(bOt,"pretrained_model_name_or_path"),bOt.forEach(t),H9r=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=n(_y,"CODE",{});var vOt=s(dCe);J9r=r(vOt,"pretrained_model_name_or_path"),vOt.forEach(t),Y9r=r(_y,":"),_y.forEach(t),K9r=i(Kl),Ve=n(Kl,"UL",{});var Eo=s(Ve);rC=n(Eo,"LI",{});var MVe=s(rC);cCe=n(MVe,"STRONG",{});var FOt=s(cCe);Z9r=r(FOt,"convnext"),FOt.forEach(t),exr=r(MVe," \u2014 "),lZ=n(MVe,"A",{href:!0});var TOt=s(lZ);oxr=r(TOt,"TFConvNextForImageClassification"),TOt.forEach(t),rxr=r(MVe," (ConvNeXT model)"),MVe.forEach(t),txr=i(Eo),tC=n(Eo,"LI",{});var EVe=s(tC);fCe=n(EVe,"STRONG",{});var MOt=s(fCe);axr=r(MOt,"data2vec-vision"),MOt.forEach(t),nxr=r(EVe," \u2014 "),iZ=n(EVe,"A",{href:!0});var EOt=s(iZ);sxr=r(EOt,"TFData2VecVisionForImageClassification"),EOt.forEach(t),lxr=r(EVe," (Data2VecVision model)"),EVe.forEach(t),ixr=i(Eo),ml=n(Eo,"LI",{});var nP=s(ml);mCe=n(nP,"STRONG",{});var COt=s(mCe);dxr=r(COt,"deit"),COt.forEach(t),cxr=r(nP," \u2014 "),dZ=n(nP,"A",{href:!0});var wOt=s(dZ);fxr=r(wOt,"TFDeiTForImageClassification"),wOt.forEach(t),mxr=r(nP," or "),cZ=n(nP,"A",{href:!0});var AOt=s(cZ);gxr=r(AOt,"TFDeiTForImageClassificationWithTeacher"),AOt.forEach(t),hxr=r(nP," (DeiT model)"),nP.forEach(t),pxr=i(Eo),aC=n(Eo,"LI",{});var CVe=s(aC);gCe=n(CVe,"STRONG",{});var LOt=s(gCe);_xr=r(LOt,"regnet"),LOt.forEach(t),uxr=r(CVe," \u2014 "),fZ=n(CVe,"A",{href:!0});var yOt=s(fZ);bxr=r(yOt,"TFRegNetForImageClassification"),yOt.forEach(t),vxr=r(CVe," (RegNet model)"),CVe.forEach(t),Fxr=i(Eo),nC=n(Eo,"LI",{});var wVe=s(nC);hCe=n(wVe,"STRONG",{});var xOt=s(hCe);Txr=r(xOt,"resnet"),xOt.forEach(t),Mxr=r(wVe," \u2014 "),mZ=n(wVe,"A",{href:!0});var $Ot=s(mZ);Exr=r($Ot,"TFResNetForImageClassification"),$Ot.forEach(t),Cxr=r(wVe," (ResNet model)"),wVe.forEach(t),wxr=i(Eo),sC=n(Eo,"LI",{});var AVe=s(sC);pCe=n(AVe,"STRONG",{});var kOt=s(pCe);Axr=r(kOt,"segformer"),kOt.forEach(t),Lxr=r(AVe," \u2014 "),gZ=n(AVe,"A",{href:!0});var SOt=s(gZ);yxr=r(SOt,"TFSegformerForImageClassification"),SOt.forEach(t),xxr=r(AVe," (SegFormer model)"),AVe.forEach(t),$xr=i(Eo),lC=n(Eo,"LI",{});var LVe=s(lC);_Ce=n(LVe,"STRONG",{});var ROt=s(_Ce);kxr=r(ROt,"swin"),ROt.forEach(t),Sxr=r(LVe," \u2014 "),hZ=n(LVe,"A",{href:!0});var POt=s(hZ);Rxr=r(POt,"TFSwinForImageClassification"),POt.forEach(t),Pxr=r(LVe," (Swin Transformer model)"),LVe.forEach(t),Bxr=i(Eo),iC=n(Eo,"LI",{});var yVe=s(iC);uCe=n(yVe,"STRONG",{});var BOt=s(uCe);Ixr=r(BOt,"vit"),BOt.forEach(t),Nxr=r(yVe," \u2014 "),pZ=n(yVe,"A",{href:!0});var IOt=s(pZ);qxr=r(IOt,"TFViTForImageClassification"),IOt.forEach(t),jxr=r(yVe," (ViT model)"),yVe.forEach(t),Eo.forEach(t),Dxr=i(Kl),T(dC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),sHe=i(f),qc=n(f,"H2",{class:!0});var bYe=s(qc);cC=n(bYe,"A",{id:!0,class:!0,href:!0});var NOt=s(cC);bCe=n(NOt,"SPAN",{});var qOt=s(bCe);T(C$.$$.fragment,qOt),qOt.forEach(t),NOt.forEach(t),Gxr=i(bYe),vCe=n(bYe,"SPAN",{});var jOt=s(vCe);Oxr=r(jOt,"TFAutoModelForSemanticSegmentation"),jOt.forEach(t),bYe.forEach(t),lHe=i(f),ir=n(f,"DIV",{class:!0});var Zl=s(ir);T(w$.$$.fragment,Zl),Vxr=i(Zl),jc=n(Zl,"P",{});var Jne=s(jc);Xxr=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_Z=n(Jne,"A",{href:!0});var DOt=s(_Z);zxr=r(DOt,"from_pretrained()"),DOt.forEach(t),Wxr=r(Jne," class method or the "),uZ=n(Jne,"A",{href:!0});var GOt=s(uZ);Qxr=r(GOt,"from_config()"),GOt.forEach(t),Uxr=r(Jne,` class
method.`),Jne.forEach(t),Hxr=i(Zl),A$=n(Zl,"P",{});var vYe=s(A$);Jxr=r(vYe,"This class cannot be instantiated directly using "),FCe=n(vYe,"CODE",{});var OOt=s(FCe);Yxr=r(OOt,"__init__()"),OOt.forEach(t),Kxr=r(vYe," (throws an error)."),vYe.forEach(t),Zxr=i(Zl),Ot=n(Zl,"DIV",{class:!0});var uy=s(Ot);T(L$.$$.fragment,uy),e$r=i(uy),TCe=n(uy,"P",{});var VOt=s(TCe);o$r=r(VOt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),VOt.forEach(t),r$r=i(uy),Dc=n(uy,"P",{});var Yne=s(Dc);t$r=r(Yne,`Note:
Loading a model from its configuration file does `),MCe=n(Yne,"STRONG",{});var XOt=s(MCe);a$r=r(XOt,"not"),XOt.forEach(t),n$r=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),bZ=n(Yne,"A",{href:!0});var zOt=s(bZ);s$r=r(zOt,"from_pretrained()"),zOt.forEach(t),l$r=r(Yne," to load the model weights."),Yne.forEach(t),i$r=i(uy),T(fC.$$.fragment,uy),uy.forEach(t),d$r=i(Zl),Nr=n(Zl,"DIV",{class:!0});var ei=s(Nr);T(y$.$$.fragment,ei),c$r=i(ei),ECe=n(ei,"P",{});var WOt=s(ECe);f$r=r(WOt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),WOt.forEach(t),m$r=i(ei),Fn=n(ei,"P",{});var by=s(Fn);g$r=r(by,"The model class to instantiate is selected based on the "),CCe=n(by,"CODE",{});var QOt=s(CCe);h$r=r(QOt,"model_type"),QOt.forEach(t),p$r=r(by,` property of the config object (either
passed as an argument or loaded from `),wCe=n(by,"CODE",{});var UOt=s(wCe);_$r=r(UOt,"pretrained_model_name_or_path"),UOt.forEach(t),u$r=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=n(by,"CODE",{});var HOt=s(ACe);b$r=r(HOt,"pretrained_model_name_or_path"),HOt.forEach(t),v$r=r(by,":"),by.forEach(t),F$r=i(ei),x$=n(ei,"UL",{});var FYe=s(x$);mC=n(FYe,"LI",{});var xVe=s(mC);LCe=n(xVe,"STRONG",{});var JOt=s(LCe);T$r=r(JOt,"data2vec-vision"),JOt.forEach(t),M$r=r(xVe," \u2014 "),vZ=n(xVe,"A",{href:!0});var YOt=s(vZ);E$r=r(YOt,"TFData2VecVisionForSemanticSegmentation"),YOt.forEach(t),C$r=r(xVe," (Data2VecVision model)"),xVe.forEach(t),w$r=i(FYe),gC=n(FYe,"LI",{});var $Ve=s(gC);yCe=n($Ve,"STRONG",{});var KOt=s(yCe);A$r=r(KOt,"segformer"),KOt.forEach(t),L$r=r($Ve," \u2014 "),FZ=n($Ve,"A",{href:!0});var ZOt=s(FZ);y$r=r(ZOt,"TFSegformerForSemanticSegmentation"),ZOt.forEach(t),x$r=r($Ve," (SegFormer model)"),$Ve.forEach(t),FYe.forEach(t),$$r=i(ei),T(hC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),iHe=i(f),Gc=n(f,"H2",{class:!0});var TYe=s(Gc);pC=n(TYe,"A",{id:!0,class:!0,href:!0});var eVt=s(pC);xCe=n(eVt,"SPAN",{});var oVt=s(xCe);T($$.$$.fragment,oVt),oVt.forEach(t),eVt.forEach(t),k$r=i(TYe),$Ce=n(TYe,"SPAN",{});var rVt=s($Ce);S$r=r(rVt,"TFAutoModelForMaskedLM"),rVt.forEach(t),TYe.forEach(t),dHe=i(f),dr=n(f,"DIV",{class:!0});var oi=s(dr);T(k$.$$.fragment,oi),R$r=i(oi),Oc=n(oi,"P",{});var Kne=s(Oc);P$r=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=n(Kne,"A",{href:!0});var tVt=s(TZ);B$r=r(tVt,"from_pretrained()"),tVt.forEach(t),I$r=r(Kne," class method or the "),MZ=n(Kne,"A",{href:!0});var aVt=s(MZ);N$r=r(aVt,"from_config()"),aVt.forEach(t),q$r=r(Kne,` class
method.`),Kne.forEach(t),j$r=i(oi),S$=n(oi,"P",{});var MYe=s(S$);D$r=r(MYe,"This class cannot be instantiated directly using "),kCe=n(MYe,"CODE",{});var nVt=s(kCe);G$r=r(nVt,"__init__()"),nVt.forEach(t),O$r=r(MYe," (throws an error)."),MYe.forEach(t),V$r=i(oi),Vt=n(oi,"DIV",{class:!0});var vy=s(Vt);T(R$.$$.fragment,vy),X$r=i(vy),SCe=n(vy,"P",{});var sVt=s(SCe);z$r=r(sVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sVt.forEach(t),W$r=i(vy),Vc=n(vy,"P",{});var Zne=s(Vc);Q$r=r(Zne,`Note:
Loading a model from its configuration file does `),RCe=n(Zne,"STRONG",{});var lVt=s(RCe);U$r=r(lVt,"not"),lVt.forEach(t),H$r=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(Zne,"A",{href:!0});var iVt=s(EZ);J$r=r(iVt,"from_pretrained()"),iVt.forEach(t),Y$r=r(Zne," to load the model weights."),Zne.forEach(t),K$r=i(vy),T(_C.$$.fragment,vy),vy.forEach(t),Z$r=i(oi),qr=n(oi,"DIV",{class:!0});var ri=s(qr);T(P$.$$.fragment,ri),ekr=i(ri),PCe=n(ri,"P",{});var dVt=s(PCe);okr=r(dVt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dVt.forEach(t),rkr=i(ri),Tn=n(ri,"P",{});var Fy=s(Tn);tkr=r(Fy,"The model class to instantiate is selected based on the "),BCe=n(Fy,"CODE",{});var cVt=s(BCe);akr=r(cVt,"model_type"),cVt.forEach(t),nkr=r(Fy,` property of the config object (either
passed as an argument or loaded from `),ICe=n(Fy,"CODE",{});var fVt=s(ICe);skr=r(fVt,"pretrained_model_name_or_path"),fVt.forEach(t),lkr=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NCe=n(Fy,"CODE",{});var mVt=s(NCe);ikr=r(mVt,"pretrained_model_name_or_path"),mVt.forEach(t),dkr=r(Fy,":"),Fy.forEach(t),ckr=i(ri),de=n(ri,"UL",{});var he=s(de);uC=n(he,"LI",{});var kVe=s(uC);qCe=n(kVe,"STRONG",{});var gVt=s(qCe);fkr=r(gVt,"albert"),gVt.forEach(t),mkr=r(kVe," \u2014 "),CZ=n(kVe,"A",{href:!0});var hVt=s(CZ);gkr=r(hVt,"TFAlbertForMaskedLM"),hVt.forEach(t),hkr=r(kVe," (ALBERT model)"),kVe.forEach(t),pkr=i(he),bC=n(he,"LI",{});var SVe=s(bC);jCe=n(SVe,"STRONG",{});var pVt=s(jCe);_kr=r(pVt,"bert"),pVt.forEach(t),ukr=r(SVe," \u2014 "),wZ=n(SVe,"A",{href:!0});var _Vt=s(wZ);bkr=r(_Vt,"TFBertForMaskedLM"),_Vt.forEach(t),vkr=r(SVe," (BERT model)"),SVe.forEach(t),Fkr=i(he),vC=n(he,"LI",{});var RVe=s(vC);DCe=n(RVe,"STRONG",{});var uVt=s(DCe);Tkr=r(uVt,"camembert"),uVt.forEach(t),Mkr=r(RVe," \u2014 "),AZ=n(RVe,"A",{href:!0});var bVt=s(AZ);Ekr=r(bVt,"TFCamembertForMaskedLM"),bVt.forEach(t),Ckr=r(RVe," (CamemBERT model)"),RVe.forEach(t),wkr=i(he),FC=n(he,"LI",{});var PVe=s(FC);GCe=n(PVe,"STRONG",{});var vVt=s(GCe);Akr=r(vVt,"convbert"),vVt.forEach(t),Lkr=r(PVe," \u2014 "),LZ=n(PVe,"A",{href:!0});var FVt=s(LZ);ykr=r(FVt,"TFConvBertForMaskedLM"),FVt.forEach(t),xkr=r(PVe," (ConvBERT model)"),PVe.forEach(t),$kr=i(he),TC=n(he,"LI",{});var BVe=s(TC);OCe=n(BVe,"STRONG",{});var TVt=s(OCe);kkr=r(TVt,"deberta"),TVt.forEach(t),Skr=r(BVe," \u2014 "),yZ=n(BVe,"A",{href:!0});var MVt=s(yZ);Rkr=r(MVt,"TFDebertaForMaskedLM"),MVt.forEach(t),Pkr=r(BVe," (DeBERTa model)"),BVe.forEach(t),Bkr=i(he),MC=n(he,"LI",{});var IVe=s(MC);VCe=n(IVe,"STRONG",{});var EVt=s(VCe);Ikr=r(EVt,"deberta-v2"),EVt.forEach(t),Nkr=r(IVe," \u2014 "),xZ=n(IVe,"A",{href:!0});var CVt=s(xZ);qkr=r(CVt,"TFDebertaV2ForMaskedLM"),CVt.forEach(t),jkr=r(IVe," (DeBERTa-v2 model)"),IVe.forEach(t),Dkr=i(he),EC=n(he,"LI",{});var NVe=s(EC);XCe=n(NVe,"STRONG",{});var wVt=s(XCe);Gkr=r(wVt,"distilbert"),wVt.forEach(t),Okr=r(NVe," \u2014 "),$Z=n(NVe,"A",{href:!0});var AVt=s($Z);Vkr=r(AVt,"TFDistilBertForMaskedLM"),AVt.forEach(t),Xkr=r(NVe," (DistilBERT model)"),NVe.forEach(t),zkr=i(he),CC=n(he,"LI",{});var qVe=s(CC);zCe=n(qVe,"STRONG",{});var LVt=s(zCe);Wkr=r(LVt,"electra"),LVt.forEach(t),Qkr=r(qVe," \u2014 "),kZ=n(qVe,"A",{href:!0});var yVt=s(kZ);Ukr=r(yVt,"TFElectraForMaskedLM"),yVt.forEach(t),Hkr=r(qVe," (ELECTRA model)"),qVe.forEach(t),Jkr=i(he),wC=n(he,"LI",{});var jVe=s(wC);WCe=n(jVe,"STRONG",{});var xVt=s(WCe);Ykr=r(xVt,"flaubert"),xVt.forEach(t),Kkr=r(jVe," \u2014 "),SZ=n(jVe,"A",{href:!0});var $Vt=s(SZ);Zkr=r($Vt,"TFFlaubertWithLMHeadModel"),$Vt.forEach(t),eSr=r(jVe," (FlauBERT model)"),jVe.forEach(t),oSr=i(he),AC=n(he,"LI",{});var DVe=s(AC);QCe=n(DVe,"STRONG",{});var kVt=s(QCe);rSr=r(kVt,"funnel"),kVt.forEach(t),tSr=r(DVe," \u2014 "),RZ=n(DVe,"A",{href:!0});var SVt=s(RZ);aSr=r(SVt,"TFFunnelForMaskedLM"),SVt.forEach(t),nSr=r(DVe," (Funnel Transformer model)"),DVe.forEach(t),sSr=i(he),LC=n(he,"LI",{});var GVe=s(LC);UCe=n(GVe,"STRONG",{});var RVt=s(UCe);lSr=r(RVt,"layoutlm"),RVt.forEach(t),iSr=r(GVe," \u2014 "),PZ=n(GVe,"A",{href:!0});var PVt=s(PZ);dSr=r(PVt,"TFLayoutLMForMaskedLM"),PVt.forEach(t),cSr=r(GVe," (LayoutLM model)"),GVe.forEach(t),fSr=i(he),yC=n(he,"LI",{});var OVe=s(yC);HCe=n(OVe,"STRONG",{});var BVt=s(HCe);mSr=r(BVt,"longformer"),BVt.forEach(t),gSr=r(OVe," \u2014 "),BZ=n(OVe,"A",{href:!0});var IVt=s(BZ);hSr=r(IVt,"TFLongformerForMaskedLM"),IVt.forEach(t),pSr=r(OVe," (Longformer model)"),OVe.forEach(t),_Sr=i(he),xC=n(he,"LI",{});var VVe=s(xC);JCe=n(VVe,"STRONG",{});var NVt=s(JCe);uSr=r(NVt,"mobilebert"),NVt.forEach(t),bSr=r(VVe," \u2014 "),IZ=n(VVe,"A",{href:!0});var qVt=s(IZ);vSr=r(qVt,"TFMobileBertForMaskedLM"),qVt.forEach(t),FSr=r(VVe," (MobileBERT model)"),VVe.forEach(t),TSr=i(he),$C=n(he,"LI",{});var XVe=s($C);YCe=n(XVe,"STRONG",{});var jVt=s(YCe);MSr=r(jVt,"mpnet"),jVt.forEach(t),ESr=r(XVe," \u2014 "),NZ=n(XVe,"A",{href:!0});var DVt=s(NZ);CSr=r(DVt,"TFMPNetForMaskedLM"),DVt.forEach(t),wSr=r(XVe," (MPNet model)"),XVe.forEach(t),ASr=i(he),kC=n(he,"LI",{});var zVe=s(kC);KCe=n(zVe,"STRONG",{});var GVt=s(KCe);LSr=r(GVt,"rembert"),GVt.forEach(t),ySr=r(zVe," \u2014 "),qZ=n(zVe,"A",{href:!0});var OVt=s(qZ);xSr=r(OVt,"TFRemBertForMaskedLM"),OVt.forEach(t),$Sr=r(zVe," (RemBERT model)"),zVe.forEach(t),kSr=i(he),SC=n(he,"LI",{});var WVe=s(SC);ZCe=n(WVe,"STRONG",{});var VVt=s(ZCe);SSr=r(VVt,"roberta"),VVt.forEach(t),RSr=r(WVe," \u2014 "),jZ=n(WVe,"A",{href:!0});var XVt=s(jZ);PSr=r(XVt,"TFRobertaForMaskedLM"),XVt.forEach(t),BSr=r(WVe," (RoBERTa model)"),WVe.forEach(t),ISr=i(he),RC=n(he,"LI",{});var QVe=s(RC);e3e=n(QVe,"STRONG",{});var zVt=s(e3e);NSr=r(zVt,"roformer"),zVt.forEach(t),qSr=r(QVe," \u2014 "),DZ=n(QVe,"A",{href:!0});var WVt=s(DZ);jSr=r(WVt,"TFRoFormerForMaskedLM"),WVt.forEach(t),DSr=r(QVe," (RoFormer model)"),QVe.forEach(t),GSr=i(he),PC=n(he,"LI",{});var UVe=s(PC);o3e=n(UVe,"STRONG",{});var QVt=s(o3e);OSr=r(QVt,"tapas"),QVt.forEach(t),VSr=r(UVe," \u2014 "),GZ=n(UVe,"A",{href:!0});var UVt=s(GZ);XSr=r(UVt,"TFTapasForMaskedLM"),UVt.forEach(t),zSr=r(UVe," (TAPAS model)"),UVe.forEach(t),WSr=i(he),BC=n(he,"LI",{});var HVe=s(BC);r3e=n(HVe,"STRONG",{});var HVt=s(r3e);QSr=r(HVt,"xlm"),HVt.forEach(t),USr=r(HVe," \u2014 "),OZ=n(HVe,"A",{href:!0});var JVt=s(OZ);HSr=r(JVt,"TFXLMWithLMHeadModel"),JVt.forEach(t),JSr=r(HVe," (XLM model)"),HVe.forEach(t),YSr=i(he),IC=n(he,"LI",{});var JVe=s(IC);t3e=n(JVe,"STRONG",{});var YVt=s(t3e);KSr=r(YVt,"xlm-roberta"),YVt.forEach(t),ZSr=r(JVe," \u2014 "),VZ=n(JVe,"A",{href:!0});var KVt=s(VZ);eRr=r(KVt,"TFXLMRobertaForMaskedLM"),KVt.forEach(t),oRr=r(JVe," (XLM-RoBERTa model)"),JVe.forEach(t),he.forEach(t),rRr=i(ri),T(NC.$$.fragment,ri),ri.forEach(t),oi.forEach(t),cHe=i(f),Xc=n(f,"H2",{class:!0});var EYe=s(Xc);qC=n(EYe,"A",{id:!0,class:!0,href:!0});var ZVt=s(qC);a3e=n(ZVt,"SPAN",{});var eXt=s(a3e);T(B$.$$.fragment,eXt),eXt.forEach(t),ZVt.forEach(t),tRr=i(EYe),n3e=n(EYe,"SPAN",{});var oXt=s(n3e);aRr=r(oXt,"TFAutoModelForSeq2SeqLM"),oXt.forEach(t),EYe.forEach(t),fHe=i(f),cr=n(f,"DIV",{class:!0});var ti=s(cr);T(I$.$$.fragment,ti),nRr=i(ti),zc=n(ti,"P",{});var ese=s(zc);sRr=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XZ=n(ese,"A",{href:!0});var rXt=s(XZ);lRr=r(rXt,"from_pretrained()"),rXt.forEach(t),iRr=r(ese," class method or the "),zZ=n(ese,"A",{href:!0});var tXt=s(zZ);dRr=r(tXt,"from_config()"),tXt.forEach(t),cRr=r(ese,` class
method.`),ese.forEach(t),fRr=i(ti),N$=n(ti,"P",{});var CYe=s(N$);mRr=r(CYe,"This class cannot be instantiated directly using "),s3e=n(CYe,"CODE",{});var aXt=s(s3e);gRr=r(aXt,"__init__()"),aXt.forEach(t),hRr=r(CYe," (throws an error)."),CYe.forEach(t),pRr=i(ti),Xt=n(ti,"DIV",{class:!0});var Ty=s(Xt);T(q$.$$.fragment,Ty),_Rr=i(Ty),l3e=n(Ty,"P",{});var nXt=s(l3e);uRr=r(nXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nXt.forEach(t),bRr=i(Ty),Wc=n(Ty,"P",{});var ose=s(Wc);vRr=r(ose,`Note:
Loading a model from its configuration file does `),i3e=n(ose,"STRONG",{});var sXt=s(i3e);FRr=r(sXt,"not"),sXt.forEach(t),TRr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(ose,"A",{href:!0});var lXt=s(WZ);MRr=r(lXt,"from_pretrained()"),lXt.forEach(t),ERr=r(ose," to load the model weights."),ose.forEach(t),CRr=i(Ty),T(jC.$$.fragment,Ty),Ty.forEach(t),wRr=i(ti),jr=n(ti,"DIV",{class:!0});var ai=s(jr);T(j$.$$.fragment,ai),ARr=i(ai),d3e=n(ai,"P",{});var iXt=s(d3e);LRr=r(iXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iXt.forEach(t),yRr=i(ai),Mn=n(ai,"P",{});var My=s(Mn);xRr=r(My,"The model class to instantiate is selected based on the "),c3e=n(My,"CODE",{});var dXt=s(c3e);$Rr=r(dXt,"model_type"),dXt.forEach(t),kRr=r(My,` property of the config object (either
passed as an argument or loaded from `),f3e=n(My,"CODE",{});var cXt=s(f3e);SRr=r(cXt,"pretrained_model_name_or_path"),cXt.forEach(t),RRr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m3e=n(My,"CODE",{});var fXt=s(m3e);PRr=r(fXt,"pretrained_model_name_or_path"),fXt.forEach(t),BRr=r(My,":"),My.forEach(t),IRr=i(ai),ye=n(ai,"UL",{});var Ie=s(ye);DC=n(Ie,"LI",{});var YVe=s(DC);g3e=n(YVe,"STRONG",{});var mXt=s(g3e);NRr=r(mXt,"bart"),mXt.forEach(t),qRr=r(YVe," \u2014 "),QZ=n(YVe,"A",{href:!0});var gXt=s(QZ);jRr=r(gXt,"TFBartForConditionalGeneration"),gXt.forEach(t),DRr=r(YVe," (BART model)"),YVe.forEach(t),GRr=i(Ie),GC=n(Ie,"LI",{});var KVe=s(GC);h3e=n(KVe,"STRONG",{});var hXt=s(h3e);ORr=r(hXt,"blenderbot"),hXt.forEach(t),VRr=r(KVe," \u2014 "),UZ=n(KVe,"A",{href:!0});var pXt=s(UZ);XRr=r(pXt,"TFBlenderbotForConditionalGeneration"),pXt.forEach(t),zRr=r(KVe," (Blenderbot model)"),KVe.forEach(t),WRr=i(Ie),OC=n(Ie,"LI",{});var ZVe=s(OC);p3e=n(ZVe,"STRONG",{});var _Xt=s(p3e);QRr=r(_Xt,"blenderbot-small"),_Xt.forEach(t),URr=r(ZVe," \u2014 "),HZ=n(ZVe,"A",{href:!0});var uXt=s(HZ);HRr=r(uXt,"TFBlenderbotSmallForConditionalGeneration"),uXt.forEach(t),JRr=r(ZVe," (BlenderbotSmall model)"),ZVe.forEach(t),YRr=i(Ie),VC=n(Ie,"LI",{});var eXe=s(VC);_3e=n(eXe,"STRONG",{});var bXt=s(_3e);KRr=r(bXt,"encoder-decoder"),bXt.forEach(t),ZRr=r(eXe," \u2014 "),JZ=n(eXe,"A",{href:!0});var vXt=s(JZ);ePr=r(vXt,"TFEncoderDecoderModel"),vXt.forEach(t),oPr=r(eXe," (Encoder decoder model)"),eXe.forEach(t),rPr=i(Ie),XC=n(Ie,"LI",{});var oXe=s(XC);u3e=n(oXe,"STRONG",{});var FXt=s(u3e);tPr=r(FXt,"led"),FXt.forEach(t),aPr=r(oXe," \u2014 "),YZ=n(oXe,"A",{href:!0});var TXt=s(YZ);nPr=r(TXt,"TFLEDForConditionalGeneration"),TXt.forEach(t),sPr=r(oXe," (LED model)"),oXe.forEach(t),lPr=i(Ie),zC=n(Ie,"LI",{});var rXe=s(zC);b3e=n(rXe,"STRONG",{});var MXt=s(b3e);iPr=r(MXt,"marian"),MXt.forEach(t),dPr=r(rXe," \u2014 "),KZ=n(rXe,"A",{href:!0});var EXt=s(KZ);cPr=r(EXt,"TFMarianMTModel"),EXt.forEach(t),fPr=r(rXe," (Marian model)"),rXe.forEach(t),mPr=i(Ie),WC=n(Ie,"LI",{});var tXe=s(WC);v3e=n(tXe,"STRONG",{});var CXt=s(v3e);gPr=r(CXt,"mbart"),CXt.forEach(t),hPr=r(tXe," \u2014 "),ZZ=n(tXe,"A",{href:!0});var wXt=s(ZZ);pPr=r(wXt,"TFMBartForConditionalGeneration"),wXt.forEach(t),_Pr=r(tXe," (mBART model)"),tXe.forEach(t),uPr=i(Ie),QC=n(Ie,"LI",{});var aXe=s(QC);F3e=n(aXe,"STRONG",{});var AXt=s(F3e);bPr=r(AXt,"mt5"),AXt.forEach(t),vPr=r(aXe," \u2014 "),eee=n(aXe,"A",{href:!0});var LXt=s(eee);FPr=r(LXt,"TFMT5ForConditionalGeneration"),LXt.forEach(t),TPr=r(aXe," (MT5 model)"),aXe.forEach(t),MPr=i(Ie),UC=n(Ie,"LI",{});var nXe=s(UC);T3e=n(nXe,"STRONG",{});var yXt=s(T3e);EPr=r(yXt,"pegasus"),yXt.forEach(t),CPr=r(nXe," \u2014 "),oee=n(nXe,"A",{href:!0});var xXt=s(oee);wPr=r(xXt,"TFPegasusForConditionalGeneration"),xXt.forEach(t),APr=r(nXe," (Pegasus model)"),nXe.forEach(t),LPr=i(Ie),HC=n(Ie,"LI",{});var sXe=s(HC);M3e=n(sXe,"STRONG",{});var $Xt=s(M3e);yPr=r($Xt,"t5"),$Xt.forEach(t),xPr=r(sXe," \u2014 "),ree=n(sXe,"A",{href:!0});var kXt=s(ree);$Pr=r(kXt,"TFT5ForConditionalGeneration"),kXt.forEach(t),kPr=r(sXe," (T5 model)"),sXe.forEach(t),Ie.forEach(t),SPr=i(ai),T(JC.$$.fragment,ai),ai.forEach(t),ti.forEach(t),mHe=i(f),Qc=n(f,"H2",{class:!0});var wYe=s(Qc);YC=n(wYe,"A",{id:!0,class:!0,href:!0});var SXt=s(YC);E3e=n(SXt,"SPAN",{});var RXt=s(E3e);T(D$.$$.fragment,RXt),RXt.forEach(t),SXt.forEach(t),RPr=i(wYe),C3e=n(wYe,"SPAN",{});var PXt=s(C3e);PPr=r(PXt,"TFAutoModelForSequenceClassification"),PXt.forEach(t),wYe.forEach(t),gHe=i(f),fr=n(f,"DIV",{class:!0});var ni=s(fr);T(G$.$$.fragment,ni),BPr=i(ni),Uc=n(ni,"P",{});var rse=s(Uc);IPr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tee=n(rse,"A",{href:!0});var BXt=s(tee);NPr=r(BXt,"from_pretrained()"),BXt.forEach(t),qPr=r(rse," class method or the "),aee=n(rse,"A",{href:!0});var IXt=s(aee);jPr=r(IXt,"from_config()"),IXt.forEach(t),DPr=r(rse,` class
method.`),rse.forEach(t),GPr=i(ni),O$=n(ni,"P",{});var AYe=s(O$);OPr=r(AYe,"This class cannot be instantiated directly using "),w3e=n(AYe,"CODE",{});var NXt=s(w3e);VPr=r(NXt,"__init__()"),NXt.forEach(t),XPr=r(AYe," (throws an error)."),AYe.forEach(t),zPr=i(ni),zt=n(ni,"DIV",{class:!0});var Ey=s(zt);T(V$.$$.fragment,Ey),WPr=i(Ey),A3e=n(Ey,"P",{});var qXt=s(A3e);QPr=r(qXt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qXt.forEach(t),UPr=i(Ey),Hc=n(Ey,"P",{});var tse=s(Hc);HPr=r(tse,`Note:
Loading a model from its configuration file does `),L3e=n(tse,"STRONG",{});var jXt=s(L3e);JPr=r(jXt,"not"),jXt.forEach(t),YPr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=n(tse,"A",{href:!0});var DXt=s(nee);KPr=r(DXt,"from_pretrained()"),DXt.forEach(t),ZPr=r(tse," to load the model weights."),tse.forEach(t),eBr=i(Ey),T(KC.$$.fragment,Ey),Ey.forEach(t),oBr=i(ni),Dr=n(ni,"DIV",{class:!0});var si=s(Dr);T(X$.$$.fragment,si),rBr=i(si),y3e=n(si,"P",{});var GXt=s(y3e);tBr=r(GXt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GXt.forEach(t),aBr=i(si),En=n(si,"P",{});var Cy=s(En);nBr=r(Cy,"The model class to instantiate is selected based on the "),x3e=n(Cy,"CODE",{});var OXt=s(x3e);sBr=r(OXt,"model_type"),OXt.forEach(t),lBr=r(Cy,` property of the config object (either
passed as an argument or loaded from `),$3e=n(Cy,"CODE",{});var VXt=s($3e);iBr=r(VXt,"pretrained_model_name_or_path"),VXt.forEach(t),dBr=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k3e=n(Cy,"CODE",{});var XXt=s(k3e);cBr=r(XXt,"pretrained_model_name_or_path"),XXt.forEach(t),fBr=r(Cy,":"),Cy.forEach(t),mBr=i(si),te=n(si,"UL",{});var ne=s(te);ZC=n(ne,"LI",{});var lXe=s(ZC);S3e=n(lXe,"STRONG",{});var zXt=s(S3e);gBr=r(zXt,"albert"),zXt.forEach(t),hBr=r(lXe," \u2014 "),see=n(lXe,"A",{href:!0});var WXt=s(see);pBr=r(WXt,"TFAlbertForSequenceClassification"),WXt.forEach(t),_Br=r(lXe," (ALBERT model)"),lXe.forEach(t),uBr=i(ne),e3=n(ne,"LI",{});var iXe=s(e3);R3e=n(iXe,"STRONG",{});var QXt=s(R3e);bBr=r(QXt,"bert"),QXt.forEach(t),vBr=r(iXe," \u2014 "),lee=n(iXe,"A",{href:!0});var UXt=s(lee);FBr=r(UXt,"TFBertForSequenceClassification"),UXt.forEach(t),TBr=r(iXe," (BERT model)"),iXe.forEach(t),MBr=i(ne),o3=n(ne,"LI",{});var dXe=s(o3);P3e=n(dXe,"STRONG",{});var HXt=s(P3e);EBr=r(HXt,"camembert"),HXt.forEach(t),CBr=r(dXe," \u2014 "),iee=n(dXe,"A",{href:!0});var JXt=s(iee);wBr=r(JXt,"TFCamembertForSequenceClassification"),JXt.forEach(t),ABr=r(dXe," (CamemBERT model)"),dXe.forEach(t),LBr=i(ne),r3=n(ne,"LI",{});var cXe=s(r3);B3e=n(cXe,"STRONG",{});var YXt=s(B3e);yBr=r(YXt,"convbert"),YXt.forEach(t),xBr=r(cXe," \u2014 "),dee=n(cXe,"A",{href:!0});var KXt=s(dee);$Br=r(KXt,"TFConvBertForSequenceClassification"),KXt.forEach(t),kBr=r(cXe," (ConvBERT model)"),cXe.forEach(t),SBr=i(ne),t3=n(ne,"LI",{});var fXe=s(t3);I3e=n(fXe,"STRONG",{});var ZXt=s(I3e);RBr=r(ZXt,"ctrl"),ZXt.forEach(t),PBr=r(fXe," \u2014 "),cee=n(fXe,"A",{href:!0});var ezt=s(cee);BBr=r(ezt,"TFCTRLForSequenceClassification"),ezt.forEach(t),IBr=r(fXe," (CTRL model)"),fXe.forEach(t),NBr=i(ne),a3=n(ne,"LI",{});var mXe=s(a3);N3e=n(mXe,"STRONG",{});var ozt=s(N3e);qBr=r(ozt,"deberta"),ozt.forEach(t),jBr=r(mXe," \u2014 "),fee=n(mXe,"A",{href:!0});var rzt=s(fee);DBr=r(rzt,"TFDebertaForSequenceClassification"),rzt.forEach(t),GBr=r(mXe," (DeBERTa model)"),mXe.forEach(t),OBr=i(ne),n3=n(ne,"LI",{});var gXe=s(n3);q3e=n(gXe,"STRONG",{});var tzt=s(q3e);VBr=r(tzt,"deberta-v2"),tzt.forEach(t),XBr=r(gXe," \u2014 "),mee=n(gXe,"A",{href:!0});var azt=s(mee);zBr=r(azt,"TFDebertaV2ForSequenceClassification"),azt.forEach(t),WBr=r(gXe," (DeBERTa-v2 model)"),gXe.forEach(t),QBr=i(ne),s3=n(ne,"LI",{});var hXe=s(s3);j3e=n(hXe,"STRONG",{});var nzt=s(j3e);UBr=r(nzt,"distilbert"),nzt.forEach(t),HBr=r(hXe," \u2014 "),gee=n(hXe,"A",{href:!0});var szt=s(gee);JBr=r(szt,"TFDistilBertForSequenceClassification"),szt.forEach(t),YBr=r(hXe," (DistilBERT model)"),hXe.forEach(t),KBr=i(ne),l3=n(ne,"LI",{});var pXe=s(l3);D3e=n(pXe,"STRONG",{});var lzt=s(D3e);ZBr=r(lzt,"electra"),lzt.forEach(t),eIr=r(pXe," \u2014 "),hee=n(pXe,"A",{href:!0});var izt=s(hee);oIr=r(izt,"TFElectraForSequenceClassification"),izt.forEach(t),rIr=r(pXe," (ELECTRA model)"),pXe.forEach(t),tIr=i(ne),i3=n(ne,"LI",{});var _Xe=s(i3);G3e=n(_Xe,"STRONG",{});var dzt=s(G3e);aIr=r(dzt,"flaubert"),dzt.forEach(t),nIr=r(_Xe," \u2014 "),pee=n(_Xe,"A",{href:!0});var czt=s(pee);sIr=r(czt,"TFFlaubertForSequenceClassification"),czt.forEach(t),lIr=r(_Xe," (FlauBERT model)"),_Xe.forEach(t),iIr=i(ne),d3=n(ne,"LI",{});var uXe=s(d3);O3e=n(uXe,"STRONG",{});var fzt=s(O3e);dIr=r(fzt,"funnel"),fzt.forEach(t),cIr=r(uXe," \u2014 "),_ee=n(uXe,"A",{href:!0});var mzt=s(_ee);fIr=r(mzt,"TFFunnelForSequenceClassification"),mzt.forEach(t),mIr=r(uXe," (Funnel Transformer model)"),uXe.forEach(t),gIr=i(ne),c3=n(ne,"LI",{});var bXe=s(c3);V3e=n(bXe,"STRONG",{});var gzt=s(V3e);hIr=r(gzt,"gpt2"),gzt.forEach(t),pIr=r(bXe," \u2014 "),uee=n(bXe,"A",{href:!0});var hzt=s(uee);_Ir=r(hzt,"TFGPT2ForSequenceClassification"),hzt.forEach(t),uIr=r(bXe," (OpenAI GPT-2 model)"),bXe.forEach(t),bIr=i(ne),f3=n(ne,"LI",{});var vXe=s(f3);X3e=n(vXe,"STRONG",{});var pzt=s(X3e);vIr=r(pzt,"gptj"),pzt.forEach(t),FIr=r(vXe," \u2014 "),bee=n(vXe,"A",{href:!0});var _zt=s(bee);TIr=r(_zt,"TFGPTJForSequenceClassification"),_zt.forEach(t),MIr=r(vXe," (GPT-J model)"),vXe.forEach(t),EIr=i(ne),m3=n(ne,"LI",{});var FXe=s(m3);z3e=n(FXe,"STRONG",{});var uzt=s(z3e);CIr=r(uzt,"layoutlm"),uzt.forEach(t),wIr=r(FXe," \u2014 "),vee=n(FXe,"A",{href:!0});var bzt=s(vee);AIr=r(bzt,"TFLayoutLMForSequenceClassification"),bzt.forEach(t),LIr=r(FXe," (LayoutLM model)"),FXe.forEach(t),yIr=i(ne),g3=n(ne,"LI",{});var TXe=s(g3);W3e=n(TXe,"STRONG",{});var vzt=s(W3e);xIr=r(vzt,"longformer"),vzt.forEach(t),$Ir=r(TXe," \u2014 "),Fee=n(TXe,"A",{href:!0});var Fzt=s(Fee);kIr=r(Fzt,"TFLongformerForSequenceClassification"),Fzt.forEach(t),SIr=r(TXe," (Longformer model)"),TXe.forEach(t),RIr=i(ne),h3=n(ne,"LI",{});var MXe=s(h3);Q3e=n(MXe,"STRONG",{});var Tzt=s(Q3e);PIr=r(Tzt,"mobilebert"),Tzt.forEach(t),BIr=r(MXe," \u2014 "),Tee=n(MXe,"A",{href:!0});var Mzt=s(Tee);IIr=r(Mzt,"TFMobileBertForSequenceClassification"),Mzt.forEach(t),NIr=r(MXe," (MobileBERT model)"),MXe.forEach(t),qIr=i(ne),p3=n(ne,"LI",{});var EXe=s(p3);U3e=n(EXe,"STRONG",{});var Ezt=s(U3e);jIr=r(Ezt,"mpnet"),Ezt.forEach(t),DIr=r(EXe," \u2014 "),Mee=n(EXe,"A",{href:!0});var Czt=s(Mee);GIr=r(Czt,"TFMPNetForSequenceClassification"),Czt.forEach(t),OIr=r(EXe," (MPNet model)"),EXe.forEach(t),VIr=i(ne),_3=n(ne,"LI",{});var CXe=s(_3);H3e=n(CXe,"STRONG",{});var wzt=s(H3e);XIr=r(wzt,"openai-gpt"),wzt.forEach(t),zIr=r(CXe," \u2014 "),Eee=n(CXe,"A",{href:!0});var Azt=s(Eee);WIr=r(Azt,"TFOpenAIGPTForSequenceClassification"),Azt.forEach(t),QIr=r(CXe," (OpenAI GPT model)"),CXe.forEach(t),UIr=i(ne),u3=n(ne,"LI",{});var wXe=s(u3);J3e=n(wXe,"STRONG",{});var Lzt=s(J3e);HIr=r(Lzt,"rembert"),Lzt.forEach(t),JIr=r(wXe," \u2014 "),Cee=n(wXe,"A",{href:!0});var yzt=s(Cee);YIr=r(yzt,"TFRemBertForSequenceClassification"),yzt.forEach(t),KIr=r(wXe," (RemBERT model)"),wXe.forEach(t),ZIr=i(ne),b3=n(ne,"LI",{});var AXe=s(b3);Y3e=n(AXe,"STRONG",{});var xzt=s(Y3e);eNr=r(xzt,"roberta"),xzt.forEach(t),oNr=r(AXe," \u2014 "),wee=n(AXe,"A",{href:!0});var $zt=s(wee);rNr=r($zt,"TFRobertaForSequenceClassification"),$zt.forEach(t),tNr=r(AXe," (RoBERTa model)"),AXe.forEach(t),aNr=i(ne),v3=n(ne,"LI",{});var LXe=s(v3);K3e=n(LXe,"STRONG",{});var kzt=s(K3e);nNr=r(kzt,"roformer"),kzt.forEach(t),sNr=r(LXe," \u2014 "),Aee=n(LXe,"A",{href:!0});var Szt=s(Aee);lNr=r(Szt,"TFRoFormerForSequenceClassification"),Szt.forEach(t),iNr=r(LXe," (RoFormer model)"),LXe.forEach(t),dNr=i(ne),F3=n(ne,"LI",{});var yXe=s(F3);Z3e=n(yXe,"STRONG",{});var Rzt=s(Z3e);cNr=r(Rzt,"tapas"),Rzt.forEach(t),fNr=r(yXe," \u2014 "),Lee=n(yXe,"A",{href:!0});var Pzt=s(Lee);mNr=r(Pzt,"TFTapasForSequenceClassification"),Pzt.forEach(t),gNr=r(yXe," (TAPAS model)"),yXe.forEach(t),hNr=i(ne),T3=n(ne,"LI",{});var xXe=s(T3);e0e=n(xXe,"STRONG",{});var Bzt=s(e0e);pNr=r(Bzt,"transfo-xl"),Bzt.forEach(t),_Nr=r(xXe," \u2014 "),yee=n(xXe,"A",{href:!0});var Izt=s(yee);uNr=r(Izt,"TFTransfoXLForSequenceClassification"),Izt.forEach(t),bNr=r(xXe," (Transformer-XL model)"),xXe.forEach(t),vNr=i(ne),M3=n(ne,"LI",{});var $Xe=s(M3);o0e=n($Xe,"STRONG",{});var Nzt=s(o0e);FNr=r(Nzt,"xlm"),Nzt.forEach(t),TNr=r($Xe," \u2014 "),xee=n($Xe,"A",{href:!0});var qzt=s(xee);MNr=r(qzt,"TFXLMForSequenceClassification"),qzt.forEach(t),ENr=r($Xe," (XLM model)"),$Xe.forEach(t),CNr=i(ne),E3=n(ne,"LI",{});var kXe=s(E3);r0e=n(kXe,"STRONG",{});var jzt=s(r0e);wNr=r(jzt,"xlm-roberta"),jzt.forEach(t),ANr=r(kXe," \u2014 "),$ee=n(kXe,"A",{href:!0});var Dzt=s($ee);LNr=r(Dzt,"TFXLMRobertaForSequenceClassification"),Dzt.forEach(t),yNr=r(kXe," (XLM-RoBERTa model)"),kXe.forEach(t),xNr=i(ne),C3=n(ne,"LI",{});var SXe=s(C3);t0e=n(SXe,"STRONG",{});var Gzt=s(t0e);$Nr=r(Gzt,"xlnet"),Gzt.forEach(t),kNr=r(SXe," \u2014 "),kee=n(SXe,"A",{href:!0});var Ozt=s(kee);SNr=r(Ozt,"TFXLNetForSequenceClassification"),Ozt.forEach(t),RNr=r(SXe," (XLNet model)"),SXe.forEach(t),ne.forEach(t),PNr=i(si),T(w3.$$.fragment,si),si.forEach(t),ni.forEach(t),hHe=i(f),Jc=n(f,"H2",{class:!0});var LYe=s(Jc);A3=n(LYe,"A",{id:!0,class:!0,href:!0});var Vzt=s(A3);a0e=n(Vzt,"SPAN",{});var Xzt=s(a0e);T(z$.$$.fragment,Xzt),Xzt.forEach(t),Vzt.forEach(t),BNr=i(LYe),n0e=n(LYe,"SPAN",{});var zzt=s(n0e);INr=r(zzt,"TFAutoModelForMultipleChoice"),zzt.forEach(t),LYe.forEach(t),pHe=i(f),mr=n(f,"DIV",{class:!0});var li=s(mr);T(W$.$$.fragment,li),NNr=i(li),Yc=n(li,"P",{});var ase=s(Yc);qNr=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),See=n(ase,"A",{href:!0});var Wzt=s(See);jNr=r(Wzt,"from_pretrained()"),Wzt.forEach(t),DNr=r(ase," class method or the "),Ree=n(ase,"A",{href:!0});var Qzt=s(Ree);GNr=r(Qzt,"from_config()"),Qzt.forEach(t),ONr=r(ase,` class
method.`),ase.forEach(t),VNr=i(li),Q$=n(li,"P",{});var yYe=s(Q$);XNr=r(yYe,"This class cannot be instantiated directly using "),s0e=n(yYe,"CODE",{});var Uzt=s(s0e);zNr=r(Uzt,"__init__()"),Uzt.forEach(t),WNr=r(yYe," (throws an error)."),yYe.forEach(t),QNr=i(li),Wt=n(li,"DIV",{class:!0});var wy=s(Wt);T(U$.$$.fragment,wy),UNr=i(wy),l0e=n(wy,"P",{});var Hzt=s(l0e);HNr=r(Hzt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Hzt.forEach(t),JNr=i(wy),Kc=n(wy,"P",{});var nse=s(Kc);YNr=r(nse,`Note:
Loading a model from its configuration file does `),i0e=n(nse,"STRONG",{});var Jzt=s(i0e);KNr=r(Jzt,"not"),Jzt.forEach(t),ZNr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(nse,"A",{href:!0});var Yzt=s(Pee);eqr=r(Yzt,"from_pretrained()"),Yzt.forEach(t),oqr=r(nse," to load the model weights."),nse.forEach(t),rqr=i(wy),T(L3.$$.fragment,wy),wy.forEach(t),tqr=i(li),Gr=n(li,"DIV",{class:!0});var ii=s(Gr);T(H$.$$.fragment,ii),aqr=i(ii),d0e=n(ii,"P",{});var Kzt=s(d0e);nqr=r(Kzt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Kzt.forEach(t),sqr=i(ii),Cn=n(ii,"P",{});var Ay=s(Cn);lqr=r(Ay,"The model class to instantiate is selected based on the "),c0e=n(Ay,"CODE",{});var Zzt=s(c0e);iqr=r(Zzt,"model_type"),Zzt.forEach(t),dqr=r(Ay,` property of the config object (either
passed as an argument or loaded from `),f0e=n(Ay,"CODE",{});var eWt=s(f0e);cqr=r(eWt,"pretrained_model_name_or_path"),eWt.forEach(t),fqr=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(Ay,"CODE",{});var oWt=s(m0e);mqr=r(oWt,"pretrained_model_name_or_path"),oWt.forEach(t),gqr=r(Ay,":"),Ay.forEach(t),hqr=i(ii),ve=n(ii,"UL",{});var Te=s(ve);y3=n(Te,"LI",{});var RXe=s(y3);g0e=n(RXe,"STRONG",{});var rWt=s(g0e);pqr=r(rWt,"albert"),rWt.forEach(t),_qr=r(RXe," \u2014 "),Bee=n(RXe,"A",{href:!0});var tWt=s(Bee);uqr=r(tWt,"TFAlbertForMultipleChoice"),tWt.forEach(t),bqr=r(RXe," (ALBERT model)"),RXe.forEach(t),vqr=i(Te),x3=n(Te,"LI",{});var PXe=s(x3);h0e=n(PXe,"STRONG",{});var aWt=s(h0e);Fqr=r(aWt,"bert"),aWt.forEach(t),Tqr=r(PXe," \u2014 "),Iee=n(PXe,"A",{href:!0});var nWt=s(Iee);Mqr=r(nWt,"TFBertForMultipleChoice"),nWt.forEach(t),Eqr=r(PXe," (BERT model)"),PXe.forEach(t),Cqr=i(Te),$3=n(Te,"LI",{});var BXe=s($3);p0e=n(BXe,"STRONG",{});var sWt=s(p0e);wqr=r(sWt,"camembert"),sWt.forEach(t),Aqr=r(BXe," \u2014 "),Nee=n(BXe,"A",{href:!0});var lWt=s(Nee);Lqr=r(lWt,"TFCamembertForMultipleChoice"),lWt.forEach(t),yqr=r(BXe," (CamemBERT model)"),BXe.forEach(t),xqr=i(Te),k3=n(Te,"LI",{});var IXe=s(k3);_0e=n(IXe,"STRONG",{});var iWt=s(_0e);$qr=r(iWt,"convbert"),iWt.forEach(t),kqr=r(IXe," \u2014 "),qee=n(IXe,"A",{href:!0});var dWt=s(qee);Sqr=r(dWt,"TFConvBertForMultipleChoice"),dWt.forEach(t),Rqr=r(IXe," (ConvBERT model)"),IXe.forEach(t),Pqr=i(Te),S3=n(Te,"LI",{});var NXe=s(S3);u0e=n(NXe,"STRONG",{});var cWt=s(u0e);Bqr=r(cWt,"distilbert"),cWt.forEach(t),Iqr=r(NXe," \u2014 "),jee=n(NXe,"A",{href:!0});var fWt=s(jee);Nqr=r(fWt,"TFDistilBertForMultipleChoice"),fWt.forEach(t),qqr=r(NXe," (DistilBERT model)"),NXe.forEach(t),jqr=i(Te),R3=n(Te,"LI",{});var qXe=s(R3);b0e=n(qXe,"STRONG",{});var mWt=s(b0e);Dqr=r(mWt,"electra"),mWt.forEach(t),Gqr=r(qXe," \u2014 "),Dee=n(qXe,"A",{href:!0});var gWt=s(Dee);Oqr=r(gWt,"TFElectraForMultipleChoice"),gWt.forEach(t),Vqr=r(qXe," (ELECTRA model)"),qXe.forEach(t),Xqr=i(Te),P3=n(Te,"LI",{});var jXe=s(P3);v0e=n(jXe,"STRONG",{});var hWt=s(v0e);zqr=r(hWt,"flaubert"),hWt.forEach(t),Wqr=r(jXe," \u2014 "),Gee=n(jXe,"A",{href:!0});var pWt=s(Gee);Qqr=r(pWt,"TFFlaubertForMultipleChoice"),pWt.forEach(t),Uqr=r(jXe," (FlauBERT model)"),jXe.forEach(t),Hqr=i(Te),B3=n(Te,"LI",{});var DXe=s(B3);F0e=n(DXe,"STRONG",{});var _Wt=s(F0e);Jqr=r(_Wt,"funnel"),_Wt.forEach(t),Yqr=r(DXe," \u2014 "),Oee=n(DXe,"A",{href:!0});var uWt=s(Oee);Kqr=r(uWt,"TFFunnelForMultipleChoice"),uWt.forEach(t),Zqr=r(DXe," (Funnel Transformer model)"),DXe.forEach(t),ejr=i(Te),I3=n(Te,"LI",{});var GXe=s(I3);T0e=n(GXe,"STRONG",{});var bWt=s(T0e);ojr=r(bWt,"longformer"),bWt.forEach(t),rjr=r(GXe," \u2014 "),Vee=n(GXe,"A",{href:!0});var vWt=s(Vee);tjr=r(vWt,"TFLongformerForMultipleChoice"),vWt.forEach(t),ajr=r(GXe," (Longformer model)"),GXe.forEach(t),njr=i(Te),N3=n(Te,"LI",{});var OXe=s(N3);M0e=n(OXe,"STRONG",{});var FWt=s(M0e);sjr=r(FWt,"mobilebert"),FWt.forEach(t),ljr=r(OXe," \u2014 "),Xee=n(OXe,"A",{href:!0});var TWt=s(Xee);ijr=r(TWt,"TFMobileBertForMultipleChoice"),TWt.forEach(t),djr=r(OXe," (MobileBERT model)"),OXe.forEach(t),cjr=i(Te),q3=n(Te,"LI",{});var VXe=s(q3);E0e=n(VXe,"STRONG",{});var MWt=s(E0e);fjr=r(MWt,"mpnet"),MWt.forEach(t),mjr=r(VXe," \u2014 "),zee=n(VXe,"A",{href:!0});var EWt=s(zee);gjr=r(EWt,"TFMPNetForMultipleChoice"),EWt.forEach(t),hjr=r(VXe," (MPNet model)"),VXe.forEach(t),pjr=i(Te),j3=n(Te,"LI",{});var XXe=s(j3);C0e=n(XXe,"STRONG",{});var CWt=s(C0e);_jr=r(CWt,"rembert"),CWt.forEach(t),ujr=r(XXe," \u2014 "),Wee=n(XXe,"A",{href:!0});var wWt=s(Wee);bjr=r(wWt,"TFRemBertForMultipleChoice"),wWt.forEach(t),vjr=r(XXe," (RemBERT model)"),XXe.forEach(t),Fjr=i(Te),D3=n(Te,"LI",{});var zXe=s(D3);w0e=n(zXe,"STRONG",{});var AWt=s(w0e);Tjr=r(AWt,"roberta"),AWt.forEach(t),Mjr=r(zXe," \u2014 "),Qee=n(zXe,"A",{href:!0});var LWt=s(Qee);Ejr=r(LWt,"TFRobertaForMultipleChoice"),LWt.forEach(t),Cjr=r(zXe," (RoBERTa model)"),zXe.forEach(t),wjr=i(Te),G3=n(Te,"LI",{});var WXe=s(G3);A0e=n(WXe,"STRONG",{});var yWt=s(A0e);Ajr=r(yWt,"roformer"),yWt.forEach(t),Ljr=r(WXe," \u2014 "),Uee=n(WXe,"A",{href:!0});var xWt=s(Uee);yjr=r(xWt,"TFRoFormerForMultipleChoice"),xWt.forEach(t),xjr=r(WXe," (RoFormer model)"),WXe.forEach(t),$jr=i(Te),O3=n(Te,"LI",{});var QXe=s(O3);L0e=n(QXe,"STRONG",{});var $Wt=s(L0e);kjr=r($Wt,"xlm"),$Wt.forEach(t),Sjr=r(QXe," \u2014 "),Hee=n(QXe,"A",{href:!0});var kWt=s(Hee);Rjr=r(kWt,"TFXLMForMultipleChoice"),kWt.forEach(t),Pjr=r(QXe," (XLM model)"),QXe.forEach(t),Bjr=i(Te),V3=n(Te,"LI",{});var UXe=s(V3);y0e=n(UXe,"STRONG",{});var SWt=s(y0e);Ijr=r(SWt,"xlm-roberta"),SWt.forEach(t),Njr=r(UXe," \u2014 "),Jee=n(UXe,"A",{href:!0});var RWt=s(Jee);qjr=r(RWt,"TFXLMRobertaForMultipleChoice"),RWt.forEach(t),jjr=r(UXe," (XLM-RoBERTa model)"),UXe.forEach(t),Djr=i(Te),X3=n(Te,"LI",{});var HXe=s(X3);x0e=n(HXe,"STRONG",{});var PWt=s(x0e);Gjr=r(PWt,"xlnet"),PWt.forEach(t),Ojr=r(HXe," \u2014 "),Yee=n(HXe,"A",{href:!0});var BWt=s(Yee);Vjr=r(BWt,"TFXLNetForMultipleChoice"),BWt.forEach(t),Xjr=r(HXe," (XLNet model)"),HXe.forEach(t),Te.forEach(t),zjr=i(ii),T(z3.$$.fragment,ii),ii.forEach(t),li.forEach(t),_He=i(f),Zc=n(f,"H2",{class:!0});var xYe=s(Zc);W3=n(xYe,"A",{id:!0,class:!0,href:!0});var IWt=s(W3);$0e=n(IWt,"SPAN",{});var NWt=s($0e);T(J$.$$.fragment,NWt),NWt.forEach(t),IWt.forEach(t),Wjr=i(xYe),k0e=n(xYe,"SPAN",{});var qWt=s(k0e);Qjr=r(qWt,"TFAutoModelForNextSentencePrediction"),qWt.forEach(t),xYe.forEach(t),uHe=i(f),gr=n(f,"DIV",{class:!0});var di=s(gr);T(Y$.$$.fragment,di),Ujr=i(di),ef=n(di,"P",{});var sse=s(ef);Hjr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kee=n(sse,"A",{href:!0});var jWt=s(Kee);Jjr=r(jWt,"from_pretrained()"),jWt.forEach(t),Yjr=r(sse," class method or the "),Zee=n(sse,"A",{href:!0});var DWt=s(Zee);Kjr=r(DWt,"from_config()"),DWt.forEach(t),Zjr=r(sse,` class
method.`),sse.forEach(t),eDr=i(di),K$=n(di,"P",{});var $Ye=s(K$);oDr=r($Ye,"This class cannot be instantiated directly using "),S0e=n($Ye,"CODE",{});var GWt=s(S0e);rDr=r(GWt,"__init__()"),GWt.forEach(t),tDr=r($Ye," (throws an error)."),$Ye.forEach(t),aDr=i(di),Qt=n(di,"DIV",{class:!0});var Ly=s(Qt);T(Z$.$$.fragment,Ly),nDr=i(Ly),R0e=n(Ly,"P",{});var OWt=s(R0e);sDr=r(OWt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OWt.forEach(t),lDr=i(Ly),of=n(Ly,"P",{});var lse=s(of);iDr=r(lse,`Note:
Loading a model from its configuration file does `),P0e=n(lse,"STRONG",{});var VWt=s(P0e);dDr=r(VWt,"not"),VWt.forEach(t),cDr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=n(lse,"A",{href:!0});var XWt=s(eoe);fDr=r(XWt,"from_pretrained()"),XWt.forEach(t),mDr=r(lse," to load the model weights."),lse.forEach(t),gDr=i(Ly),T(Q3.$$.fragment,Ly),Ly.forEach(t),hDr=i(di),Or=n(di,"DIV",{class:!0});var ci=s(Or);T(ek.$$.fragment,ci),pDr=i(ci),B0e=n(ci,"P",{});var zWt=s(B0e);_Dr=r(zWt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zWt.forEach(t),uDr=i(ci),wn=n(ci,"P",{});var yy=s(wn);bDr=r(yy,"The model class to instantiate is selected based on the "),I0e=n(yy,"CODE",{});var WWt=s(I0e);vDr=r(WWt,"model_type"),WWt.forEach(t),FDr=r(yy,` property of the config object (either
passed as an argument or loaded from `),N0e=n(yy,"CODE",{});var QWt=s(N0e);TDr=r(QWt,"pretrained_model_name_or_path"),QWt.forEach(t),MDr=r(yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(yy,"CODE",{});var UWt=s(q0e);EDr=r(UWt,"pretrained_model_name_or_path"),UWt.forEach(t),CDr=r(yy,":"),yy.forEach(t),wDr=i(ci),ok=n(ci,"UL",{});var kYe=s(ok);U3=n(kYe,"LI",{});var JXe=s(U3);j0e=n(JXe,"STRONG",{});var HWt=s(j0e);ADr=r(HWt,"bert"),HWt.forEach(t),LDr=r(JXe," \u2014 "),ooe=n(JXe,"A",{href:!0});var JWt=s(ooe);yDr=r(JWt,"TFBertForNextSentencePrediction"),JWt.forEach(t),xDr=r(JXe," (BERT model)"),JXe.forEach(t),$Dr=i(kYe),H3=n(kYe,"LI",{});var YXe=s(H3);D0e=n(YXe,"STRONG",{});var YWt=s(D0e);kDr=r(YWt,"mobilebert"),YWt.forEach(t),SDr=r(YXe," \u2014 "),roe=n(YXe,"A",{href:!0});var KWt=s(roe);RDr=r(KWt,"TFMobileBertForNextSentencePrediction"),KWt.forEach(t),PDr=r(YXe," (MobileBERT model)"),YXe.forEach(t),kYe.forEach(t),BDr=i(ci),T(J3.$$.fragment,ci),ci.forEach(t),di.forEach(t),bHe=i(f),rf=n(f,"H2",{class:!0});var SYe=s(rf);Y3=n(SYe,"A",{id:!0,class:!0,href:!0});var ZWt=s(Y3);G0e=n(ZWt,"SPAN",{});var eQt=s(G0e);T(rk.$$.fragment,eQt),eQt.forEach(t),ZWt.forEach(t),IDr=i(SYe),O0e=n(SYe,"SPAN",{});var oQt=s(O0e);NDr=r(oQt,"TFAutoModelForTableQuestionAnswering"),oQt.forEach(t),SYe.forEach(t),vHe=i(f),hr=n(f,"DIV",{class:!0});var fi=s(hr);T(tk.$$.fragment,fi),qDr=i(fi),tf=n(fi,"P",{});var ise=s(tf);jDr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),toe=n(ise,"A",{href:!0});var rQt=s(toe);DDr=r(rQt,"from_pretrained()"),rQt.forEach(t),GDr=r(ise," class method or the "),aoe=n(ise,"A",{href:!0});var tQt=s(aoe);ODr=r(tQt,"from_config()"),tQt.forEach(t),VDr=r(ise,` class
method.`),ise.forEach(t),XDr=i(fi),ak=n(fi,"P",{});var RYe=s(ak);zDr=r(RYe,"This class cannot be instantiated directly using "),V0e=n(RYe,"CODE",{});var aQt=s(V0e);WDr=r(aQt,"__init__()"),aQt.forEach(t),QDr=r(RYe," (throws an error)."),RYe.forEach(t),UDr=i(fi),Ut=n(fi,"DIV",{class:!0});var xy=s(Ut);T(nk.$$.fragment,xy),HDr=i(xy),X0e=n(xy,"P",{});var nQt=s(X0e);JDr=r(nQt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nQt.forEach(t),YDr=i(xy),af=n(xy,"P",{});var dse=s(af);KDr=r(dse,`Note:
Loading a model from its configuration file does `),z0e=n(dse,"STRONG",{});var sQt=s(z0e);ZDr=r(sQt,"not"),sQt.forEach(t),eGr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(dse,"A",{href:!0});var lQt=s(noe);oGr=r(lQt,"from_pretrained()"),lQt.forEach(t),rGr=r(dse," to load the model weights."),dse.forEach(t),tGr=i(xy),T(K3.$$.fragment,xy),xy.forEach(t),aGr=i(fi),Vr=n(fi,"DIV",{class:!0});var mi=s(Vr);T(sk.$$.fragment,mi),nGr=i(mi),W0e=n(mi,"P",{});var iQt=s(W0e);sGr=r(iQt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),iQt.forEach(t),lGr=i(mi),An=n(mi,"P",{});var $y=s(An);iGr=r($y,"The model class to instantiate is selected based on the "),Q0e=n($y,"CODE",{});var dQt=s(Q0e);dGr=r(dQt,"model_type"),dQt.forEach(t),cGr=r($y,` property of the config object (either
passed as an argument or loaded from `),U0e=n($y,"CODE",{});var cQt=s(U0e);fGr=r(cQt,"pretrained_model_name_or_path"),cQt.forEach(t),mGr=r($y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n($y,"CODE",{});var fQt=s(H0e);gGr=r(fQt,"pretrained_model_name_or_path"),fQt.forEach(t),hGr=r($y,":"),$y.forEach(t),pGr=i(mi),J0e=n(mi,"UL",{});var mQt=s(J0e);Z3=n(mQt,"LI",{});var KXe=s(Z3);Y0e=n(KXe,"STRONG",{});var gQt=s(Y0e);_Gr=r(gQt,"tapas"),gQt.forEach(t),uGr=r(KXe," \u2014 "),soe=n(KXe,"A",{href:!0});var hQt=s(soe);bGr=r(hQt,"TFTapasForQuestionAnswering"),hQt.forEach(t),vGr=r(KXe," (TAPAS model)"),KXe.forEach(t),mQt.forEach(t),FGr=i(mi),T(e0.$$.fragment,mi),mi.forEach(t),fi.forEach(t),FHe=i(f),nf=n(f,"H2",{class:!0});var PYe=s(nf);o0=n(PYe,"A",{id:!0,class:!0,href:!0});var pQt=s(o0);K0e=n(pQt,"SPAN",{});var _Qt=s(K0e);T(lk.$$.fragment,_Qt),_Qt.forEach(t),pQt.forEach(t),TGr=i(PYe),Z0e=n(PYe,"SPAN",{});var uQt=s(Z0e);MGr=r(uQt,"TFAutoModelForTokenClassification"),uQt.forEach(t),PYe.forEach(t),THe=i(f),pr=n(f,"DIV",{class:!0});var gi=s(pr);T(ik.$$.fragment,gi),EGr=i(gi),sf=n(gi,"P",{});var cse=s(sf);CGr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),loe=n(cse,"A",{href:!0});var bQt=s(loe);wGr=r(bQt,"from_pretrained()"),bQt.forEach(t),AGr=r(cse," class method or the "),ioe=n(cse,"A",{href:!0});var vQt=s(ioe);LGr=r(vQt,"from_config()"),vQt.forEach(t),yGr=r(cse,` class
method.`),cse.forEach(t),xGr=i(gi),dk=n(gi,"P",{});var BYe=s(dk);$Gr=r(BYe,"This class cannot be instantiated directly using "),ewe=n(BYe,"CODE",{});var FQt=s(ewe);kGr=r(FQt,"__init__()"),FQt.forEach(t),SGr=r(BYe," (throws an error)."),BYe.forEach(t),RGr=i(gi),Ht=n(gi,"DIV",{class:!0});var ky=s(Ht);T(ck.$$.fragment,ky),PGr=i(ky),owe=n(ky,"P",{});var TQt=s(owe);BGr=r(TQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TQt.forEach(t),IGr=i(ky),lf=n(ky,"P",{});var fse=s(lf);NGr=r(fse,`Note:
Loading a model from its configuration file does `),rwe=n(fse,"STRONG",{});var MQt=s(rwe);qGr=r(MQt,"not"),MQt.forEach(t),jGr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=n(fse,"A",{href:!0});var EQt=s(doe);DGr=r(EQt,"from_pretrained()"),EQt.forEach(t),GGr=r(fse," to load the model weights."),fse.forEach(t),OGr=i(ky),T(r0.$$.fragment,ky),ky.forEach(t),VGr=i(gi),Xr=n(gi,"DIV",{class:!0});var hi=s(Xr);T(fk.$$.fragment,hi),XGr=i(hi),twe=n(hi,"P",{});var CQt=s(twe);zGr=r(CQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CQt.forEach(t),WGr=i(hi),Ln=n(hi,"P",{});var Sy=s(Ln);QGr=r(Sy,"The model class to instantiate is selected based on the "),awe=n(Sy,"CODE",{});var wQt=s(awe);UGr=r(wQt,"model_type"),wQt.forEach(t),HGr=r(Sy,` property of the config object (either
passed as an argument or loaded from `),nwe=n(Sy,"CODE",{});var AQt=s(nwe);JGr=r(AQt,"pretrained_model_name_or_path"),AQt.forEach(t),YGr=r(Sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),swe=n(Sy,"CODE",{});var LQt=s(swe);KGr=r(LQt,"pretrained_model_name_or_path"),LQt.forEach(t),ZGr=r(Sy,":"),Sy.forEach(t),eOr=i(hi),ce=n(hi,"UL",{});var pe=s(ce);t0=n(pe,"LI",{});var ZXe=s(t0);lwe=n(ZXe,"STRONG",{});var yQt=s(lwe);oOr=r(yQt,"albert"),yQt.forEach(t),rOr=r(ZXe," \u2014 "),coe=n(ZXe,"A",{href:!0});var xQt=s(coe);tOr=r(xQt,"TFAlbertForTokenClassification"),xQt.forEach(t),aOr=r(ZXe," (ALBERT model)"),ZXe.forEach(t),nOr=i(pe),a0=n(pe,"LI",{});var eze=s(a0);iwe=n(eze,"STRONG",{});var $Qt=s(iwe);sOr=r($Qt,"bert"),$Qt.forEach(t),lOr=r(eze," \u2014 "),foe=n(eze,"A",{href:!0});var kQt=s(foe);iOr=r(kQt,"TFBertForTokenClassification"),kQt.forEach(t),dOr=r(eze," (BERT model)"),eze.forEach(t),cOr=i(pe),n0=n(pe,"LI",{});var oze=s(n0);dwe=n(oze,"STRONG",{});var SQt=s(dwe);fOr=r(SQt,"camembert"),SQt.forEach(t),mOr=r(oze," \u2014 "),moe=n(oze,"A",{href:!0});var RQt=s(moe);gOr=r(RQt,"TFCamembertForTokenClassification"),RQt.forEach(t),hOr=r(oze," (CamemBERT model)"),oze.forEach(t),pOr=i(pe),s0=n(pe,"LI",{});var rze=s(s0);cwe=n(rze,"STRONG",{});var PQt=s(cwe);_Or=r(PQt,"convbert"),PQt.forEach(t),uOr=r(rze," \u2014 "),goe=n(rze,"A",{href:!0});var BQt=s(goe);bOr=r(BQt,"TFConvBertForTokenClassification"),BQt.forEach(t),vOr=r(rze," (ConvBERT model)"),rze.forEach(t),FOr=i(pe),l0=n(pe,"LI",{});var tze=s(l0);fwe=n(tze,"STRONG",{});var IQt=s(fwe);TOr=r(IQt,"deberta"),IQt.forEach(t),MOr=r(tze," \u2014 "),hoe=n(tze,"A",{href:!0});var NQt=s(hoe);EOr=r(NQt,"TFDebertaForTokenClassification"),NQt.forEach(t),COr=r(tze," (DeBERTa model)"),tze.forEach(t),wOr=i(pe),i0=n(pe,"LI",{});var aze=s(i0);mwe=n(aze,"STRONG",{});var qQt=s(mwe);AOr=r(qQt,"deberta-v2"),qQt.forEach(t),LOr=r(aze," \u2014 "),poe=n(aze,"A",{href:!0});var jQt=s(poe);yOr=r(jQt,"TFDebertaV2ForTokenClassification"),jQt.forEach(t),xOr=r(aze," (DeBERTa-v2 model)"),aze.forEach(t),$Or=i(pe),d0=n(pe,"LI",{});var nze=s(d0);gwe=n(nze,"STRONG",{});var DQt=s(gwe);kOr=r(DQt,"distilbert"),DQt.forEach(t),SOr=r(nze," \u2014 "),_oe=n(nze,"A",{href:!0});var GQt=s(_oe);ROr=r(GQt,"TFDistilBertForTokenClassification"),GQt.forEach(t),POr=r(nze," (DistilBERT model)"),nze.forEach(t),BOr=i(pe),c0=n(pe,"LI",{});var sze=s(c0);hwe=n(sze,"STRONG",{});var OQt=s(hwe);IOr=r(OQt,"electra"),OQt.forEach(t),NOr=r(sze," \u2014 "),uoe=n(sze,"A",{href:!0});var VQt=s(uoe);qOr=r(VQt,"TFElectraForTokenClassification"),VQt.forEach(t),jOr=r(sze," (ELECTRA model)"),sze.forEach(t),DOr=i(pe),f0=n(pe,"LI",{});var lze=s(f0);pwe=n(lze,"STRONG",{});var XQt=s(pwe);GOr=r(XQt,"flaubert"),XQt.forEach(t),OOr=r(lze," \u2014 "),boe=n(lze,"A",{href:!0});var zQt=s(boe);VOr=r(zQt,"TFFlaubertForTokenClassification"),zQt.forEach(t),XOr=r(lze," (FlauBERT model)"),lze.forEach(t),zOr=i(pe),m0=n(pe,"LI",{});var ize=s(m0);_we=n(ize,"STRONG",{});var WQt=s(_we);WOr=r(WQt,"funnel"),WQt.forEach(t),QOr=r(ize," \u2014 "),voe=n(ize,"A",{href:!0});var QQt=s(voe);UOr=r(QQt,"TFFunnelForTokenClassification"),QQt.forEach(t),HOr=r(ize," (Funnel Transformer model)"),ize.forEach(t),JOr=i(pe),g0=n(pe,"LI",{});var dze=s(g0);uwe=n(dze,"STRONG",{});var UQt=s(uwe);YOr=r(UQt,"layoutlm"),UQt.forEach(t),KOr=r(dze," \u2014 "),Foe=n(dze,"A",{href:!0});var HQt=s(Foe);ZOr=r(HQt,"TFLayoutLMForTokenClassification"),HQt.forEach(t),eVr=r(dze," (LayoutLM model)"),dze.forEach(t),oVr=i(pe),h0=n(pe,"LI",{});var cze=s(h0);bwe=n(cze,"STRONG",{});var JQt=s(bwe);rVr=r(JQt,"longformer"),JQt.forEach(t),tVr=r(cze," \u2014 "),Toe=n(cze,"A",{href:!0});var YQt=s(Toe);aVr=r(YQt,"TFLongformerForTokenClassification"),YQt.forEach(t),nVr=r(cze," (Longformer model)"),cze.forEach(t),sVr=i(pe),p0=n(pe,"LI",{});var fze=s(p0);vwe=n(fze,"STRONG",{});var KQt=s(vwe);lVr=r(KQt,"mobilebert"),KQt.forEach(t),iVr=r(fze," \u2014 "),Moe=n(fze,"A",{href:!0});var ZQt=s(Moe);dVr=r(ZQt,"TFMobileBertForTokenClassification"),ZQt.forEach(t),cVr=r(fze," (MobileBERT model)"),fze.forEach(t),fVr=i(pe),_0=n(pe,"LI",{});var mze=s(_0);Fwe=n(mze,"STRONG",{});var eUt=s(Fwe);mVr=r(eUt,"mpnet"),eUt.forEach(t),gVr=r(mze," \u2014 "),Eoe=n(mze,"A",{href:!0});var oUt=s(Eoe);hVr=r(oUt,"TFMPNetForTokenClassification"),oUt.forEach(t),pVr=r(mze," (MPNet model)"),mze.forEach(t),_Vr=i(pe),u0=n(pe,"LI",{});var gze=s(u0);Twe=n(gze,"STRONG",{});var rUt=s(Twe);uVr=r(rUt,"rembert"),rUt.forEach(t),bVr=r(gze," \u2014 "),Coe=n(gze,"A",{href:!0});var tUt=s(Coe);vVr=r(tUt,"TFRemBertForTokenClassification"),tUt.forEach(t),FVr=r(gze," (RemBERT model)"),gze.forEach(t),TVr=i(pe),b0=n(pe,"LI",{});var hze=s(b0);Mwe=n(hze,"STRONG",{});var aUt=s(Mwe);MVr=r(aUt,"roberta"),aUt.forEach(t),EVr=r(hze," \u2014 "),woe=n(hze,"A",{href:!0});var nUt=s(woe);CVr=r(nUt,"TFRobertaForTokenClassification"),nUt.forEach(t),wVr=r(hze," (RoBERTa model)"),hze.forEach(t),AVr=i(pe),v0=n(pe,"LI",{});var pze=s(v0);Ewe=n(pze,"STRONG",{});var sUt=s(Ewe);LVr=r(sUt,"roformer"),sUt.forEach(t),yVr=r(pze," \u2014 "),Aoe=n(pze,"A",{href:!0});var lUt=s(Aoe);xVr=r(lUt,"TFRoFormerForTokenClassification"),lUt.forEach(t),$Vr=r(pze," (RoFormer model)"),pze.forEach(t),kVr=i(pe),F0=n(pe,"LI",{});var _ze=s(F0);Cwe=n(_ze,"STRONG",{});var iUt=s(Cwe);SVr=r(iUt,"xlm"),iUt.forEach(t),RVr=r(_ze," \u2014 "),Loe=n(_ze,"A",{href:!0});var dUt=s(Loe);PVr=r(dUt,"TFXLMForTokenClassification"),dUt.forEach(t),BVr=r(_ze," (XLM model)"),_ze.forEach(t),IVr=i(pe),T0=n(pe,"LI",{});var uze=s(T0);wwe=n(uze,"STRONG",{});var cUt=s(wwe);NVr=r(cUt,"xlm-roberta"),cUt.forEach(t),qVr=r(uze," \u2014 "),yoe=n(uze,"A",{href:!0});var fUt=s(yoe);jVr=r(fUt,"TFXLMRobertaForTokenClassification"),fUt.forEach(t),DVr=r(uze," (XLM-RoBERTa model)"),uze.forEach(t),GVr=i(pe),M0=n(pe,"LI",{});var bze=s(M0);Awe=n(bze,"STRONG",{});var mUt=s(Awe);OVr=r(mUt,"xlnet"),mUt.forEach(t),VVr=r(bze," \u2014 "),xoe=n(bze,"A",{href:!0});var gUt=s(xoe);XVr=r(gUt,"TFXLNetForTokenClassification"),gUt.forEach(t),zVr=r(bze," (XLNet model)"),bze.forEach(t),pe.forEach(t),WVr=i(hi),T(E0.$$.fragment,hi),hi.forEach(t),gi.forEach(t),MHe=i(f),df=n(f,"H2",{class:!0});var IYe=s(df);C0=n(IYe,"A",{id:!0,class:!0,href:!0});var hUt=s(C0);Lwe=n(hUt,"SPAN",{});var pUt=s(Lwe);T(mk.$$.fragment,pUt),pUt.forEach(t),hUt.forEach(t),QVr=i(IYe),ywe=n(IYe,"SPAN",{});var _Ut=s(ywe);UVr=r(_Ut,"TFAutoModelForQuestionAnswering"),_Ut.forEach(t),IYe.forEach(t),EHe=i(f),_r=n(f,"DIV",{class:!0});var pi=s(_r);T(gk.$$.fragment,pi),HVr=i(pi),cf=n(pi,"P",{});var mse=s(cf);JVr=r(mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=n(mse,"A",{href:!0});var uUt=s($oe);YVr=r(uUt,"from_pretrained()"),uUt.forEach(t),KVr=r(mse," class method or the "),koe=n(mse,"A",{href:!0});var bUt=s(koe);ZVr=r(bUt,"from_config()"),bUt.forEach(t),eXr=r(mse,` class
method.`),mse.forEach(t),oXr=i(pi),hk=n(pi,"P",{});var NYe=s(hk);rXr=r(NYe,"This class cannot be instantiated directly using "),xwe=n(NYe,"CODE",{});var vUt=s(xwe);tXr=r(vUt,"__init__()"),vUt.forEach(t),aXr=r(NYe," (throws an error)."),NYe.forEach(t),nXr=i(pi),Jt=n(pi,"DIV",{class:!0});var Ry=s(Jt);T(pk.$$.fragment,Ry),sXr=i(Ry),$we=n(Ry,"P",{});var FUt=s($we);lXr=r(FUt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),FUt.forEach(t),iXr=i(Ry),ff=n(Ry,"P",{});var gse=s(ff);dXr=r(gse,`Note:
Loading a model from its configuration file does `),kwe=n(gse,"STRONG",{});var TUt=s(kwe);cXr=r(TUt,"not"),TUt.forEach(t),fXr=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(gse,"A",{href:!0});var MUt=s(Soe);mXr=r(MUt,"from_pretrained()"),MUt.forEach(t),gXr=r(gse," to load the model weights."),gse.forEach(t),hXr=i(Ry),T(w0.$$.fragment,Ry),Ry.forEach(t),pXr=i(pi),zr=n(pi,"DIV",{class:!0});var _i=s(zr);T(_k.$$.fragment,_i),_Xr=i(_i),Swe=n(_i,"P",{});var EUt=s(Swe);uXr=r(EUt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EUt.forEach(t),bXr=i(_i),yn=n(_i,"P",{});var Py=s(yn);vXr=r(Py,"The model class to instantiate is selected based on the "),Rwe=n(Py,"CODE",{});var CUt=s(Rwe);FXr=r(CUt,"model_type"),CUt.forEach(t),TXr=r(Py,` property of the config object (either
passed as an argument or loaded from `),Pwe=n(Py,"CODE",{});var wUt=s(Pwe);MXr=r(wUt,"pretrained_model_name_or_path"),wUt.forEach(t),EXr=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bwe=n(Py,"CODE",{});var AUt=s(Bwe);CXr=r(AUt,"pretrained_model_name_or_path"),AUt.forEach(t),wXr=r(Py,":"),Py.forEach(t),AXr=i(_i),fe=n(_i,"UL",{});var _e=s(fe);A0=n(_e,"LI",{});var vze=s(A0);Iwe=n(vze,"STRONG",{});var LUt=s(Iwe);LXr=r(LUt,"albert"),LUt.forEach(t),yXr=r(vze," \u2014 "),Roe=n(vze,"A",{href:!0});var yUt=s(Roe);xXr=r(yUt,"TFAlbertForQuestionAnswering"),yUt.forEach(t),$Xr=r(vze," (ALBERT model)"),vze.forEach(t),kXr=i(_e),L0=n(_e,"LI",{});var Fze=s(L0);Nwe=n(Fze,"STRONG",{});var xUt=s(Nwe);SXr=r(xUt,"bert"),xUt.forEach(t),RXr=r(Fze," \u2014 "),Poe=n(Fze,"A",{href:!0});var $Ut=s(Poe);PXr=r($Ut,"TFBertForQuestionAnswering"),$Ut.forEach(t),BXr=r(Fze," (BERT model)"),Fze.forEach(t),IXr=i(_e),y0=n(_e,"LI",{});var Tze=s(y0);qwe=n(Tze,"STRONG",{});var kUt=s(qwe);NXr=r(kUt,"camembert"),kUt.forEach(t),qXr=r(Tze," \u2014 "),Boe=n(Tze,"A",{href:!0});var SUt=s(Boe);jXr=r(SUt,"TFCamembertForQuestionAnswering"),SUt.forEach(t),DXr=r(Tze," (CamemBERT model)"),Tze.forEach(t),GXr=i(_e),x0=n(_e,"LI",{});var Mze=s(x0);jwe=n(Mze,"STRONG",{});var RUt=s(jwe);OXr=r(RUt,"convbert"),RUt.forEach(t),VXr=r(Mze," \u2014 "),Ioe=n(Mze,"A",{href:!0});var PUt=s(Ioe);XXr=r(PUt,"TFConvBertForQuestionAnswering"),PUt.forEach(t),zXr=r(Mze," (ConvBERT model)"),Mze.forEach(t),WXr=i(_e),$0=n(_e,"LI",{});var Eze=s($0);Dwe=n(Eze,"STRONG",{});var BUt=s(Dwe);QXr=r(BUt,"deberta"),BUt.forEach(t),UXr=r(Eze," \u2014 "),Noe=n(Eze,"A",{href:!0});var IUt=s(Noe);HXr=r(IUt,"TFDebertaForQuestionAnswering"),IUt.forEach(t),JXr=r(Eze," (DeBERTa model)"),Eze.forEach(t),YXr=i(_e),k0=n(_e,"LI",{});var Cze=s(k0);Gwe=n(Cze,"STRONG",{});var NUt=s(Gwe);KXr=r(NUt,"deberta-v2"),NUt.forEach(t),ZXr=r(Cze," \u2014 "),qoe=n(Cze,"A",{href:!0});var qUt=s(qoe);ezr=r(qUt,"TFDebertaV2ForQuestionAnswering"),qUt.forEach(t),ozr=r(Cze," (DeBERTa-v2 model)"),Cze.forEach(t),rzr=i(_e),S0=n(_e,"LI",{});var wze=s(S0);Owe=n(wze,"STRONG",{});var jUt=s(Owe);tzr=r(jUt,"distilbert"),jUt.forEach(t),azr=r(wze," \u2014 "),joe=n(wze,"A",{href:!0});var DUt=s(joe);nzr=r(DUt,"TFDistilBertForQuestionAnswering"),DUt.forEach(t),szr=r(wze," (DistilBERT model)"),wze.forEach(t),lzr=i(_e),R0=n(_e,"LI",{});var Aze=s(R0);Vwe=n(Aze,"STRONG",{});var GUt=s(Vwe);izr=r(GUt,"electra"),GUt.forEach(t),dzr=r(Aze," \u2014 "),Doe=n(Aze,"A",{href:!0});var OUt=s(Doe);czr=r(OUt,"TFElectraForQuestionAnswering"),OUt.forEach(t),fzr=r(Aze," (ELECTRA model)"),Aze.forEach(t),mzr=i(_e),P0=n(_e,"LI",{});var Lze=s(P0);Xwe=n(Lze,"STRONG",{});var VUt=s(Xwe);gzr=r(VUt,"flaubert"),VUt.forEach(t),hzr=r(Lze," \u2014 "),Goe=n(Lze,"A",{href:!0});var XUt=s(Goe);pzr=r(XUt,"TFFlaubertForQuestionAnsweringSimple"),XUt.forEach(t),_zr=r(Lze," (FlauBERT model)"),Lze.forEach(t),uzr=i(_e),B0=n(_e,"LI",{});var yze=s(B0);zwe=n(yze,"STRONG",{});var zUt=s(zwe);bzr=r(zUt,"funnel"),zUt.forEach(t),vzr=r(yze," \u2014 "),Ooe=n(yze,"A",{href:!0});var WUt=s(Ooe);Fzr=r(WUt,"TFFunnelForQuestionAnswering"),WUt.forEach(t),Tzr=r(yze," (Funnel Transformer model)"),yze.forEach(t),Mzr=i(_e),I0=n(_e,"LI",{});var xze=s(I0);Wwe=n(xze,"STRONG",{});var QUt=s(Wwe);Ezr=r(QUt,"gptj"),QUt.forEach(t),Czr=r(xze," \u2014 "),Voe=n(xze,"A",{href:!0});var UUt=s(Voe);wzr=r(UUt,"TFGPTJForQuestionAnswering"),UUt.forEach(t),Azr=r(xze," (GPT-J model)"),xze.forEach(t),Lzr=i(_e),N0=n(_e,"LI",{});var $ze=s(N0);Qwe=n($ze,"STRONG",{});var HUt=s(Qwe);yzr=r(HUt,"longformer"),HUt.forEach(t),xzr=r($ze," \u2014 "),Xoe=n($ze,"A",{href:!0});var JUt=s(Xoe);$zr=r(JUt,"TFLongformerForQuestionAnswering"),JUt.forEach(t),kzr=r($ze," (Longformer model)"),$ze.forEach(t),Szr=i(_e),q0=n(_e,"LI",{});var kze=s(q0);Uwe=n(kze,"STRONG",{});var YUt=s(Uwe);Rzr=r(YUt,"mobilebert"),YUt.forEach(t),Pzr=r(kze," \u2014 "),zoe=n(kze,"A",{href:!0});var KUt=s(zoe);Bzr=r(KUt,"TFMobileBertForQuestionAnswering"),KUt.forEach(t),Izr=r(kze," (MobileBERT model)"),kze.forEach(t),Nzr=i(_e),j0=n(_e,"LI",{});var Sze=s(j0);Hwe=n(Sze,"STRONG",{});var ZUt=s(Hwe);qzr=r(ZUt,"mpnet"),ZUt.forEach(t),jzr=r(Sze," \u2014 "),Woe=n(Sze,"A",{href:!0});var eHt=s(Woe);Dzr=r(eHt,"TFMPNetForQuestionAnswering"),eHt.forEach(t),Gzr=r(Sze," (MPNet model)"),Sze.forEach(t),Ozr=i(_e),D0=n(_e,"LI",{});var Rze=s(D0);Jwe=n(Rze,"STRONG",{});var oHt=s(Jwe);Vzr=r(oHt,"rembert"),oHt.forEach(t),Xzr=r(Rze," \u2014 "),Qoe=n(Rze,"A",{href:!0});var rHt=s(Qoe);zzr=r(rHt,"TFRemBertForQuestionAnswering"),rHt.forEach(t),Wzr=r(Rze," (RemBERT model)"),Rze.forEach(t),Qzr=i(_e),G0=n(_e,"LI",{});var Pze=s(G0);Ywe=n(Pze,"STRONG",{});var tHt=s(Ywe);Uzr=r(tHt,"roberta"),tHt.forEach(t),Hzr=r(Pze," \u2014 "),Uoe=n(Pze,"A",{href:!0});var aHt=s(Uoe);Jzr=r(aHt,"TFRobertaForQuestionAnswering"),aHt.forEach(t),Yzr=r(Pze," (RoBERTa model)"),Pze.forEach(t),Kzr=i(_e),O0=n(_e,"LI",{});var Bze=s(O0);Kwe=n(Bze,"STRONG",{});var nHt=s(Kwe);Zzr=r(nHt,"roformer"),nHt.forEach(t),eWr=r(Bze," \u2014 "),Hoe=n(Bze,"A",{href:!0});var sHt=s(Hoe);oWr=r(sHt,"TFRoFormerForQuestionAnswering"),sHt.forEach(t),rWr=r(Bze," (RoFormer model)"),Bze.forEach(t),tWr=i(_e),V0=n(_e,"LI",{});var Ize=s(V0);Zwe=n(Ize,"STRONG",{});var lHt=s(Zwe);aWr=r(lHt,"xlm"),lHt.forEach(t),nWr=r(Ize," \u2014 "),Joe=n(Ize,"A",{href:!0});var iHt=s(Joe);sWr=r(iHt,"TFXLMForQuestionAnsweringSimple"),iHt.forEach(t),lWr=r(Ize," (XLM model)"),Ize.forEach(t),iWr=i(_e),X0=n(_e,"LI",{});var Nze=s(X0);e6e=n(Nze,"STRONG",{});var dHt=s(e6e);dWr=r(dHt,"xlm-roberta"),dHt.forEach(t),cWr=r(Nze," \u2014 "),Yoe=n(Nze,"A",{href:!0});var cHt=s(Yoe);fWr=r(cHt,"TFXLMRobertaForQuestionAnswering"),cHt.forEach(t),mWr=r(Nze," (XLM-RoBERTa model)"),Nze.forEach(t),gWr=i(_e),z0=n(_e,"LI",{});var qze=s(z0);o6e=n(qze,"STRONG",{});var fHt=s(o6e);hWr=r(fHt,"xlnet"),fHt.forEach(t),pWr=r(qze," \u2014 "),Koe=n(qze,"A",{href:!0});var mHt=s(Koe);_Wr=r(mHt,"TFXLNetForQuestionAnsweringSimple"),mHt.forEach(t),uWr=r(qze," (XLNet model)"),qze.forEach(t),_e.forEach(t),bWr=i(_i),T(W0.$$.fragment,_i),_i.forEach(t),pi.forEach(t),CHe=i(f),mf=n(f,"H2",{class:!0});var qYe=s(mf);Q0=n(qYe,"A",{id:!0,class:!0,href:!0});var gHt=s(Q0);r6e=n(gHt,"SPAN",{});var hHt=s(r6e);T(uk.$$.fragment,hHt),hHt.forEach(t),gHt.forEach(t),vWr=i(qYe),t6e=n(qYe,"SPAN",{});var pHt=s(t6e);FWr=r(pHt,"TFAutoModelForVision2Seq"),pHt.forEach(t),qYe.forEach(t),wHe=i(f),ur=n(f,"DIV",{class:!0});var ui=s(ur);T(bk.$$.fragment,ui),TWr=i(ui),gf=n(ui,"P",{});var hse=s(gf);MWr=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zoe=n(hse,"A",{href:!0});var _Ht=s(Zoe);EWr=r(_Ht,"from_pretrained()"),_Ht.forEach(t),CWr=r(hse," class method or the "),ere=n(hse,"A",{href:!0});var uHt=s(ere);wWr=r(uHt,"from_config()"),uHt.forEach(t),AWr=r(hse,` class
method.`),hse.forEach(t),LWr=i(ui),vk=n(ui,"P",{});var jYe=s(vk);yWr=r(jYe,"This class cannot be instantiated directly using "),a6e=n(jYe,"CODE",{});var bHt=s(a6e);xWr=r(bHt,"__init__()"),bHt.forEach(t),$Wr=r(jYe," (throws an error)."),jYe.forEach(t),kWr=i(ui),Yt=n(ui,"DIV",{class:!0});var By=s(Yt);T(Fk.$$.fragment,By),SWr=i(By),n6e=n(By,"P",{});var vHt=s(n6e);RWr=r(vHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vHt.forEach(t),PWr=i(By),hf=n(By,"P",{});var pse=s(hf);BWr=r(pse,`Note:
Loading a model from its configuration file does `),s6e=n(pse,"STRONG",{});var FHt=s(s6e);IWr=r(FHt,"not"),FHt.forEach(t),NWr=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=n(pse,"A",{href:!0});var THt=s(ore);qWr=r(THt,"from_pretrained()"),THt.forEach(t),jWr=r(pse," to load the model weights."),pse.forEach(t),DWr=i(By),T(U0.$$.fragment,By),By.forEach(t),GWr=i(ui),Wr=n(ui,"DIV",{class:!0});var bi=s(Wr);T(Tk.$$.fragment,bi),OWr=i(bi),l6e=n(bi,"P",{});var MHt=s(l6e);VWr=r(MHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MHt.forEach(t),XWr=i(bi),xn=n(bi,"P",{});var Iy=s(xn);zWr=r(Iy,"The model class to instantiate is selected based on the "),i6e=n(Iy,"CODE",{});var EHt=s(i6e);WWr=r(EHt,"model_type"),EHt.forEach(t),QWr=r(Iy,` property of the config object (either
passed as an argument or loaded from `),d6e=n(Iy,"CODE",{});var CHt=s(d6e);UWr=r(CHt,"pretrained_model_name_or_path"),CHt.forEach(t),HWr=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c6e=n(Iy,"CODE",{});var wHt=s(c6e);JWr=r(wHt,"pretrained_model_name_or_path"),wHt.forEach(t),YWr=r(Iy,":"),Iy.forEach(t),KWr=i(bi),f6e=n(bi,"UL",{});var AHt=s(f6e);H0=n(AHt,"LI",{});var jze=s(H0);m6e=n(jze,"STRONG",{});var LHt=s(m6e);ZWr=r(LHt,"vision-encoder-decoder"),LHt.forEach(t),eQr=r(jze," \u2014 "),rre=n(jze,"A",{href:!0});var yHt=s(rre);oQr=r(yHt,"TFVisionEncoderDecoderModel"),yHt.forEach(t),rQr=r(jze," (Vision Encoder decoder model)"),jze.forEach(t),AHt.forEach(t),tQr=i(bi),T(J0.$$.fragment,bi),bi.forEach(t),ui.forEach(t),AHe=i(f),pf=n(f,"H2",{class:!0});var DYe=s(pf);Y0=n(DYe,"A",{id:!0,class:!0,href:!0});var xHt=s(Y0);g6e=n(xHt,"SPAN",{});var $Ht=s(g6e);T(Mk.$$.fragment,$Ht),$Ht.forEach(t),xHt.forEach(t),aQr=i(DYe),h6e=n(DYe,"SPAN",{});var kHt=s(h6e);nQr=r(kHt,"TFAutoModelForSpeechSeq2Seq"),kHt.forEach(t),DYe.forEach(t),LHe=i(f),br=n(f,"DIV",{class:!0});var vi=s(br);T(Ek.$$.fragment,vi),sQr=i(vi),_f=n(vi,"P",{});var _se=s(_f);lQr=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tre=n(_se,"A",{href:!0});var SHt=s(tre);iQr=r(SHt,"from_pretrained()"),SHt.forEach(t),dQr=r(_se," class method or the "),are=n(_se,"A",{href:!0});var RHt=s(are);cQr=r(RHt,"from_config()"),RHt.forEach(t),fQr=r(_se,` class
method.`),_se.forEach(t),mQr=i(vi),Ck=n(vi,"P",{});var GYe=s(Ck);gQr=r(GYe,"This class cannot be instantiated directly using "),p6e=n(GYe,"CODE",{});var PHt=s(p6e);hQr=r(PHt,"__init__()"),PHt.forEach(t),pQr=r(GYe," (throws an error)."),GYe.forEach(t),_Qr=i(vi),Kt=n(vi,"DIV",{class:!0});var Ny=s(Kt);T(wk.$$.fragment,Ny),uQr=i(Ny),_6e=n(Ny,"P",{});var BHt=s(_6e);bQr=r(BHt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BHt.forEach(t),vQr=i(Ny),uf=n(Ny,"P",{});var use=s(uf);FQr=r(use,`Note:
Loading a model from its configuration file does `),u6e=n(use,"STRONG",{});var IHt=s(u6e);TQr=r(IHt,"not"),IHt.forEach(t),MQr=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(use,"A",{href:!0});var NHt=s(nre);EQr=r(NHt,"from_pretrained()"),NHt.forEach(t),CQr=r(use," to load the model weights."),use.forEach(t),wQr=i(Ny),T(K0.$$.fragment,Ny),Ny.forEach(t),AQr=i(vi),Qr=n(vi,"DIV",{class:!0});var Fi=s(Qr);T(Ak.$$.fragment,Fi),LQr=i(Fi),b6e=n(Fi,"P",{});var qHt=s(b6e);yQr=r(qHt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qHt.forEach(t),xQr=i(Fi),$n=n(Fi,"P",{});var qy=s($n);$Qr=r(qy,"The model class to instantiate is selected based on the "),v6e=n(qy,"CODE",{});var jHt=s(v6e);kQr=r(jHt,"model_type"),jHt.forEach(t),SQr=r(qy,` property of the config object (either
passed as an argument or loaded from `),F6e=n(qy,"CODE",{});var DHt=s(F6e);RQr=r(DHt,"pretrained_model_name_or_path"),DHt.forEach(t),PQr=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=n(qy,"CODE",{});var GHt=s(T6e);BQr=r(GHt,"pretrained_model_name_or_path"),GHt.forEach(t),IQr=r(qy,":"),qy.forEach(t),NQr=i(Fi),M6e=n(Fi,"UL",{});var OHt=s(M6e);Z0=n(OHt,"LI",{});var Dze=s(Z0);E6e=n(Dze,"STRONG",{});var VHt=s(E6e);qQr=r(VHt,"speech_to_text"),VHt.forEach(t),jQr=r(Dze," \u2014 "),sre=n(Dze,"A",{href:!0});var XHt=s(sre);DQr=r(XHt,"TFSpeech2TextForConditionalGeneration"),XHt.forEach(t),GQr=r(Dze," (Speech2Text model)"),Dze.forEach(t),OHt.forEach(t),OQr=i(Fi),T(ew.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),yHe=i(f),bf=n(f,"H2",{class:!0});var OYe=s(bf);ow=n(OYe,"A",{id:!0,class:!0,href:!0});var zHt=s(ow);C6e=n(zHt,"SPAN",{});var WHt=s(C6e);T(Lk.$$.fragment,WHt),WHt.forEach(t),zHt.forEach(t),VQr=i(OYe),w6e=n(OYe,"SPAN",{});var QHt=s(w6e);XQr=r(QHt,"FlaxAutoModel"),QHt.forEach(t),OYe.forEach(t),xHe=i(f),vr=n(f,"DIV",{class:!0});var Ti=s(vr);T(yk.$$.fragment,Ti),zQr=i(Ti),vf=n(Ti,"P",{});var bse=s(vf);WQr=r(bse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lre=n(bse,"A",{href:!0});var UHt=s(lre);QQr=r(UHt,"from_pretrained()"),UHt.forEach(t),UQr=r(bse," class method or the "),ire=n(bse,"A",{href:!0});var HHt=s(ire);HQr=r(HHt,"from_config()"),HHt.forEach(t),JQr=r(bse,` class
method.`),bse.forEach(t),YQr=i(Ti),xk=n(Ti,"P",{});var VYe=s(xk);KQr=r(VYe,"This class cannot be instantiated directly using "),A6e=n(VYe,"CODE",{});var JHt=s(A6e);ZQr=r(JHt,"__init__()"),JHt.forEach(t),eUr=r(VYe," (throws an error)."),VYe.forEach(t),oUr=i(Ti),Zt=n(Ti,"DIV",{class:!0});var jy=s(Zt);T($k.$$.fragment,jy),rUr=i(jy),L6e=n(jy,"P",{});var YHt=s(L6e);tUr=r(YHt,"Instantiates one of the base model classes of the library from a configuration."),YHt.forEach(t),aUr=i(jy),Ff=n(jy,"P",{});var vse=s(Ff);nUr=r(vse,`Note:
Loading a model from its configuration file does `),y6e=n(vse,"STRONG",{});var KHt=s(y6e);sUr=r(KHt,"not"),KHt.forEach(t),lUr=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=n(vse,"A",{href:!0});var ZHt=s(dre);iUr=r(ZHt,"from_pretrained()"),ZHt.forEach(t),dUr=r(vse," to load the model weights."),vse.forEach(t),cUr=i(jy),T(rw.$$.fragment,jy),jy.forEach(t),fUr=i(Ti),Ur=n(Ti,"DIV",{class:!0});var Mi=s(Ur);T(kk.$$.fragment,Mi),mUr=i(Mi),x6e=n(Mi,"P",{});var eJt=s(x6e);gUr=r(eJt,"Instantiate one of the base model classes of the library from a pretrained model."),eJt.forEach(t),hUr=i(Mi),kn=n(Mi,"P",{});var Dy=s(kn);pUr=r(Dy,"The model class to instantiate is selected based on the "),$6e=n(Dy,"CODE",{});var oJt=s($6e);_Ur=r(oJt,"model_type"),oJt.forEach(t),uUr=r(Dy,` property of the config object (either
passed as an argument or loaded from `),k6e=n(Dy,"CODE",{});var rJt=s(k6e);bUr=r(rJt,"pretrained_model_name_or_path"),rJt.forEach(t),vUr=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S6e=n(Dy,"CODE",{});var tJt=s(S6e);FUr=r(tJt,"pretrained_model_name_or_path"),tJt.forEach(t),TUr=r(Dy,":"),Dy.forEach(t),MUr=i(Mi),re=n(Mi,"UL",{});var ae=s(re);tw=n(ae,"LI",{});var Gze=s(tw);R6e=n(Gze,"STRONG",{});var aJt=s(R6e);EUr=r(aJt,"albert"),aJt.forEach(t),CUr=r(Gze," \u2014 "),cre=n(Gze,"A",{href:!0});var nJt=s(cre);wUr=r(nJt,"FlaxAlbertModel"),nJt.forEach(t),AUr=r(Gze," (ALBERT model)"),Gze.forEach(t),LUr=i(ae),aw=n(ae,"LI",{});var Oze=s(aw);P6e=n(Oze,"STRONG",{});var sJt=s(P6e);yUr=r(sJt,"bart"),sJt.forEach(t),xUr=r(Oze," \u2014 "),fre=n(Oze,"A",{href:!0});var lJt=s(fre);$Ur=r(lJt,"FlaxBartModel"),lJt.forEach(t),kUr=r(Oze," (BART model)"),Oze.forEach(t),SUr=i(ae),nw=n(ae,"LI",{});var Vze=s(nw);B6e=n(Vze,"STRONG",{});var iJt=s(B6e);RUr=r(iJt,"beit"),iJt.forEach(t),PUr=r(Vze," \u2014 "),mre=n(Vze,"A",{href:!0});var dJt=s(mre);BUr=r(dJt,"FlaxBeitModel"),dJt.forEach(t),IUr=r(Vze," (BEiT model)"),Vze.forEach(t),NUr=i(ae),sw=n(ae,"LI",{});var Xze=s(sw);I6e=n(Xze,"STRONG",{});var cJt=s(I6e);qUr=r(cJt,"bert"),cJt.forEach(t),jUr=r(Xze," \u2014 "),gre=n(Xze,"A",{href:!0});var fJt=s(gre);DUr=r(fJt,"FlaxBertModel"),fJt.forEach(t),GUr=r(Xze," (BERT model)"),Xze.forEach(t),OUr=i(ae),lw=n(ae,"LI",{});var zze=s(lw);N6e=n(zze,"STRONG",{});var mJt=s(N6e);VUr=r(mJt,"big_bird"),mJt.forEach(t),XUr=r(zze," \u2014 "),hre=n(zze,"A",{href:!0});var gJt=s(hre);zUr=r(gJt,"FlaxBigBirdModel"),gJt.forEach(t),WUr=r(zze," (BigBird model)"),zze.forEach(t),QUr=i(ae),iw=n(ae,"LI",{});var Wze=s(iw);q6e=n(Wze,"STRONG",{});var hJt=s(q6e);UUr=r(hJt,"blenderbot"),hJt.forEach(t),HUr=r(Wze," \u2014 "),pre=n(Wze,"A",{href:!0});var pJt=s(pre);JUr=r(pJt,"FlaxBlenderbotModel"),pJt.forEach(t),YUr=r(Wze," (Blenderbot model)"),Wze.forEach(t),KUr=i(ae),dw=n(ae,"LI",{});var Qze=s(dw);j6e=n(Qze,"STRONG",{});var _Jt=s(j6e);ZUr=r(_Jt,"blenderbot-small"),_Jt.forEach(t),eHr=r(Qze," \u2014 "),_re=n(Qze,"A",{href:!0});var uJt=s(_re);oHr=r(uJt,"FlaxBlenderbotSmallModel"),uJt.forEach(t),rHr=r(Qze," (BlenderbotSmall model)"),Qze.forEach(t),tHr=i(ae),cw=n(ae,"LI",{});var Uze=s(cw);D6e=n(Uze,"STRONG",{});var bJt=s(D6e);aHr=r(bJt,"clip"),bJt.forEach(t),nHr=r(Uze," \u2014 "),ure=n(Uze,"A",{href:!0});var vJt=s(ure);sHr=r(vJt,"FlaxCLIPModel"),vJt.forEach(t),lHr=r(Uze," (CLIP model)"),Uze.forEach(t),iHr=i(ae),fw=n(ae,"LI",{});var Hze=s(fw);G6e=n(Hze,"STRONG",{});var FJt=s(G6e);dHr=r(FJt,"distilbert"),FJt.forEach(t),cHr=r(Hze," \u2014 "),bre=n(Hze,"A",{href:!0});var TJt=s(bre);fHr=r(TJt,"FlaxDistilBertModel"),TJt.forEach(t),mHr=r(Hze," (DistilBERT model)"),Hze.forEach(t),gHr=i(ae),mw=n(ae,"LI",{});var Jze=s(mw);O6e=n(Jze,"STRONG",{});var MJt=s(O6e);hHr=r(MJt,"electra"),MJt.forEach(t),pHr=r(Jze," \u2014 "),vre=n(Jze,"A",{href:!0});var EJt=s(vre);_Hr=r(EJt,"FlaxElectraModel"),EJt.forEach(t),uHr=r(Jze," (ELECTRA model)"),Jze.forEach(t),bHr=i(ae),gw=n(ae,"LI",{});var Yze=s(gw);V6e=n(Yze,"STRONG",{});var CJt=s(V6e);vHr=r(CJt,"gpt2"),CJt.forEach(t),FHr=r(Yze," \u2014 "),Fre=n(Yze,"A",{href:!0});var wJt=s(Fre);THr=r(wJt,"FlaxGPT2Model"),wJt.forEach(t),MHr=r(Yze," (OpenAI GPT-2 model)"),Yze.forEach(t),EHr=i(ae),hw=n(ae,"LI",{});var Kze=s(hw);X6e=n(Kze,"STRONG",{});var AJt=s(X6e);CHr=r(AJt,"gpt_neo"),AJt.forEach(t),wHr=r(Kze," \u2014 "),Tre=n(Kze,"A",{href:!0});var LJt=s(Tre);AHr=r(LJt,"FlaxGPTNeoModel"),LJt.forEach(t),LHr=r(Kze," (GPT Neo model)"),Kze.forEach(t),yHr=i(ae),pw=n(ae,"LI",{});var Zze=s(pw);z6e=n(Zze,"STRONG",{});var yJt=s(z6e);xHr=r(yJt,"gptj"),yJt.forEach(t),$Hr=r(Zze," \u2014 "),Mre=n(Zze,"A",{href:!0});var xJt=s(Mre);kHr=r(xJt,"FlaxGPTJModel"),xJt.forEach(t),SHr=r(Zze," (GPT-J model)"),Zze.forEach(t),RHr=i(ae),_w=n(ae,"LI",{});var eWe=s(_w);W6e=n(eWe,"STRONG",{});var $Jt=s(W6e);PHr=r($Jt,"longt5"),$Jt.forEach(t),BHr=r(eWe," \u2014 "),Ere=n(eWe,"A",{href:!0});var kJt=s(Ere);IHr=r(kJt,"FlaxLongT5Model"),kJt.forEach(t),NHr=r(eWe," (LongT5 model)"),eWe.forEach(t),qHr=i(ae),uw=n(ae,"LI",{});var oWe=s(uw);Q6e=n(oWe,"STRONG",{});var SJt=s(Q6e);jHr=r(SJt,"marian"),SJt.forEach(t),DHr=r(oWe," \u2014 "),Cre=n(oWe,"A",{href:!0});var RJt=s(Cre);GHr=r(RJt,"FlaxMarianModel"),RJt.forEach(t),OHr=r(oWe," (Marian model)"),oWe.forEach(t),VHr=i(ae),bw=n(ae,"LI",{});var rWe=s(bw);U6e=n(rWe,"STRONG",{});var PJt=s(U6e);XHr=r(PJt,"mbart"),PJt.forEach(t),zHr=r(rWe," \u2014 "),wre=n(rWe,"A",{href:!0});var BJt=s(wre);WHr=r(BJt,"FlaxMBartModel"),BJt.forEach(t),QHr=r(rWe," (mBART model)"),rWe.forEach(t),UHr=i(ae),vw=n(ae,"LI",{});var tWe=s(vw);H6e=n(tWe,"STRONG",{});var IJt=s(H6e);HHr=r(IJt,"mt5"),IJt.forEach(t),JHr=r(tWe," \u2014 "),Are=n(tWe,"A",{href:!0});var NJt=s(Are);YHr=r(NJt,"FlaxMT5Model"),NJt.forEach(t),KHr=r(tWe," (MT5 model)"),tWe.forEach(t),ZHr=i(ae),Fw=n(ae,"LI",{});var aWe=s(Fw);J6e=n(aWe,"STRONG",{});var qJt=s(J6e);eJr=r(qJt,"opt"),qJt.forEach(t),oJr=r(aWe," \u2014 "),Lre=n(aWe,"A",{href:!0});var jJt=s(Lre);rJr=r(jJt,"FlaxOPTModel"),jJt.forEach(t),tJr=r(aWe," (OPT model)"),aWe.forEach(t),aJr=i(ae),Tw=n(ae,"LI",{});var nWe=s(Tw);Y6e=n(nWe,"STRONG",{});var DJt=s(Y6e);nJr=r(DJt,"pegasus"),DJt.forEach(t),sJr=r(nWe," \u2014 "),yre=n(nWe,"A",{href:!0});var GJt=s(yre);lJr=r(GJt,"FlaxPegasusModel"),GJt.forEach(t),iJr=r(nWe," (Pegasus model)"),nWe.forEach(t),dJr=i(ae),Mw=n(ae,"LI",{});var sWe=s(Mw);K6e=n(sWe,"STRONG",{});var OJt=s(K6e);cJr=r(OJt,"roberta"),OJt.forEach(t),fJr=r(sWe," \u2014 "),xre=n(sWe,"A",{href:!0});var VJt=s(xre);mJr=r(VJt,"FlaxRobertaModel"),VJt.forEach(t),gJr=r(sWe," (RoBERTa model)"),sWe.forEach(t),hJr=i(ae),Ew=n(ae,"LI",{});var lWe=s(Ew);Z6e=n(lWe,"STRONG",{});var XJt=s(Z6e);pJr=r(XJt,"roformer"),XJt.forEach(t),_Jr=r(lWe," \u2014 "),$re=n(lWe,"A",{href:!0});var zJt=s($re);uJr=r(zJt,"FlaxRoFormerModel"),zJt.forEach(t),bJr=r(lWe," (RoFormer model)"),lWe.forEach(t),vJr=i(ae),Cw=n(ae,"LI",{});var iWe=s(Cw);eAe=n(iWe,"STRONG",{});var WJt=s(eAe);FJr=r(WJt,"t5"),WJt.forEach(t),TJr=r(iWe," \u2014 "),kre=n(iWe,"A",{href:!0});var QJt=s(kre);MJr=r(QJt,"FlaxT5Model"),QJt.forEach(t),EJr=r(iWe," (T5 model)"),iWe.forEach(t),CJr=i(ae),ww=n(ae,"LI",{});var dWe=s(ww);oAe=n(dWe,"STRONG",{});var UJt=s(oAe);wJr=r(UJt,"vision-text-dual-encoder"),UJt.forEach(t),AJr=r(dWe," \u2014 "),Sre=n(dWe,"A",{href:!0});var HJt=s(Sre);LJr=r(HJt,"FlaxVisionTextDualEncoderModel"),HJt.forEach(t),yJr=r(dWe," (VisionTextDualEncoder model)"),dWe.forEach(t),xJr=i(ae),Aw=n(ae,"LI",{});var cWe=s(Aw);rAe=n(cWe,"STRONG",{});var JJt=s(rAe);$Jr=r(JJt,"vit"),JJt.forEach(t),kJr=r(cWe," \u2014 "),Rre=n(cWe,"A",{href:!0});var YJt=s(Rre);SJr=r(YJt,"FlaxViTModel"),YJt.forEach(t),RJr=r(cWe," (ViT model)"),cWe.forEach(t),PJr=i(ae),Lw=n(ae,"LI",{});var fWe=s(Lw);tAe=n(fWe,"STRONG",{});var KJt=s(tAe);BJr=r(KJt,"wav2vec2"),KJt.forEach(t),IJr=r(fWe," \u2014 "),Pre=n(fWe,"A",{href:!0});var ZJt=s(Pre);NJr=r(ZJt,"FlaxWav2Vec2Model"),ZJt.forEach(t),qJr=r(fWe," (Wav2Vec2 model)"),fWe.forEach(t),jJr=i(ae),yw=n(ae,"LI",{});var mWe=s(yw);aAe=n(mWe,"STRONG",{});var eYt=s(aAe);DJr=r(eYt,"xglm"),eYt.forEach(t),GJr=r(mWe," \u2014 "),Bre=n(mWe,"A",{href:!0});var oYt=s(Bre);OJr=r(oYt,"FlaxXGLMModel"),oYt.forEach(t),VJr=r(mWe," (XGLM model)"),mWe.forEach(t),XJr=i(ae),xw=n(ae,"LI",{});var gWe=s(xw);nAe=n(gWe,"STRONG",{});var rYt=s(nAe);zJr=r(rYt,"xlm-roberta"),rYt.forEach(t),WJr=r(gWe," \u2014 "),Ire=n(gWe,"A",{href:!0});var tYt=s(Ire);QJr=r(tYt,"FlaxXLMRobertaModel"),tYt.forEach(t),UJr=r(gWe," (XLM-RoBERTa model)"),gWe.forEach(t),ae.forEach(t),HJr=i(Mi),T($w.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),$He=i(f),Tf=n(f,"H2",{class:!0});var XYe=s(Tf);kw=n(XYe,"A",{id:!0,class:!0,href:!0});var aYt=s(kw);sAe=n(aYt,"SPAN",{});var nYt=s(sAe);T(Sk.$$.fragment,nYt),nYt.forEach(t),aYt.forEach(t),JJr=i(XYe),lAe=n(XYe,"SPAN",{});var sYt=s(lAe);YJr=r(sYt,"FlaxAutoModelForCausalLM"),sYt.forEach(t),XYe.forEach(t),kHe=i(f),Fr=n(f,"DIV",{class:!0});var Ei=s(Fr);T(Rk.$$.fragment,Ei),KJr=i(Ei),Mf=n(Ei,"P",{});var Fse=s(Mf);ZJr=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nre=n(Fse,"A",{href:!0});var lYt=s(Nre);eYr=r(lYt,"from_pretrained()"),lYt.forEach(t),oYr=r(Fse," class method or the "),qre=n(Fse,"A",{href:!0});var iYt=s(qre);rYr=r(iYt,"from_config()"),iYt.forEach(t),tYr=r(Fse,` class
method.`),Fse.forEach(t),aYr=i(Ei),Pk=n(Ei,"P",{});var zYe=s(Pk);nYr=r(zYe,"This class cannot be instantiated directly using "),iAe=n(zYe,"CODE",{});var dYt=s(iAe);sYr=r(dYt,"__init__()"),dYt.forEach(t),lYr=r(zYe," (throws an error)."),zYe.forEach(t),iYr=i(Ei),ea=n(Ei,"DIV",{class:!0});var Gy=s(ea);T(Bk.$$.fragment,Gy),dYr=i(Gy),dAe=n(Gy,"P",{});var cYt=s(dAe);cYr=r(cYt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cYt.forEach(t),fYr=i(Gy),Ef=n(Gy,"P",{});var Tse=s(Ef);mYr=r(Tse,`Note:
Loading a model from its configuration file does `),cAe=n(Tse,"STRONG",{});var fYt=s(cAe);gYr=r(fYt,"not"),fYt.forEach(t),hYr=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=n(Tse,"A",{href:!0});var mYt=s(jre);pYr=r(mYt,"from_pretrained()"),mYt.forEach(t),_Yr=r(Tse," to load the model weights."),Tse.forEach(t),uYr=i(Gy),T(Sw.$$.fragment,Gy),Gy.forEach(t),bYr=i(Ei),Hr=n(Ei,"DIV",{class:!0});var Ci=s(Hr);T(Ik.$$.fragment,Ci),vYr=i(Ci),fAe=n(Ci,"P",{});var gYt=s(fAe);FYr=r(gYt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gYt.forEach(t),TYr=i(Ci),Sn=n(Ci,"P",{});var Oy=s(Sn);MYr=r(Oy,"The model class to instantiate is selected based on the "),mAe=n(Oy,"CODE",{});var hYt=s(mAe);EYr=r(hYt,"model_type"),hYt.forEach(t),CYr=r(Oy,` property of the config object (either
passed as an argument or loaded from `),gAe=n(Oy,"CODE",{});var pYt=s(gAe);wYr=r(pYt,"pretrained_model_name_or_path"),pYt.forEach(t),AYr=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=n(Oy,"CODE",{});var _Yt=s(hAe);LYr=r(_Yt,"pretrained_model_name_or_path"),_Yt.forEach(t),yYr=r(Oy,":"),Oy.forEach(t),xYr=i(Ci),xe=n(Ci,"UL",{});var Ne=s(xe);Rw=n(Ne,"LI",{});var hWe=s(Rw);pAe=n(hWe,"STRONG",{});var uYt=s(pAe);$Yr=r(uYt,"bart"),uYt.forEach(t),kYr=r(hWe," \u2014 "),Dre=n(hWe,"A",{href:!0});var bYt=s(Dre);SYr=r(bYt,"FlaxBartForCausalLM"),bYt.forEach(t),RYr=r(hWe," (BART model)"),hWe.forEach(t),PYr=i(Ne),Pw=n(Ne,"LI",{});var pWe=s(Pw);_Ae=n(pWe,"STRONG",{});var vYt=s(_Ae);BYr=r(vYt,"bert"),vYt.forEach(t),IYr=r(pWe," \u2014 "),Gre=n(pWe,"A",{href:!0});var FYt=s(Gre);NYr=r(FYt,"FlaxBertForCausalLM"),FYt.forEach(t),qYr=r(pWe," (BERT model)"),pWe.forEach(t),jYr=i(Ne),Bw=n(Ne,"LI",{});var _We=s(Bw);uAe=n(_We,"STRONG",{});var TYt=s(uAe);DYr=r(TYt,"big_bird"),TYt.forEach(t),GYr=r(_We," \u2014 "),Ore=n(_We,"A",{href:!0});var MYt=s(Ore);OYr=r(MYt,"FlaxBigBirdForCausalLM"),MYt.forEach(t),VYr=r(_We," (BigBird model)"),_We.forEach(t),XYr=i(Ne),Iw=n(Ne,"LI",{});var uWe=s(Iw);bAe=n(uWe,"STRONG",{});var EYt=s(bAe);zYr=r(EYt,"electra"),EYt.forEach(t),WYr=r(uWe," \u2014 "),Vre=n(uWe,"A",{href:!0});var CYt=s(Vre);QYr=r(CYt,"FlaxElectraForCausalLM"),CYt.forEach(t),UYr=r(uWe," (ELECTRA model)"),uWe.forEach(t),HYr=i(Ne),Nw=n(Ne,"LI",{});var bWe=s(Nw);vAe=n(bWe,"STRONG",{});var wYt=s(vAe);JYr=r(wYt,"gpt2"),wYt.forEach(t),YYr=r(bWe," \u2014 "),Xre=n(bWe,"A",{href:!0});var AYt=s(Xre);KYr=r(AYt,"FlaxGPT2LMHeadModel"),AYt.forEach(t),ZYr=r(bWe," (OpenAI GPT-2 model)"),bWe.forEach(t),eKr=i(Ne),qw=n(Ne,"LI",{});var vWe=s(qw);FAe=n(vWe,"STRONG",{});var LYt=s(FAe);oKr=r(LYt,"gpt_neo"),LYt.forEach(t),rKr=r(vWe," \u2014 "),zre=n(vWe,"A",{href:!0});var yYt=s(zre);tKr=r(yYt,"FlaxGPTNeoForCausalLM"),yYt.forEach(t),aKr=r(vWe," (GPT Neo model)"),vWe.forEach(t),nKr=i(Ne),jw=n(Ne,"LI",{});var FWe=s(jw);TAe=n(FWe,"STRONG",{});var xYt=s(TAe);sKr=r(xYt,"gptj"),xYt.forEach(t),lKr=r(FWe," \u2014 "),Wre=n(FWe,"A",{href:!0});var $Yt=s(Wre);iKr=r($Yt,"FlaxGPTJForCausalLM"),$Yt.forEach(t),dKr=r(FWe," (GPT-J model)"),FWe.forEach(t),cKr=i(Ne),Dw=n(Ne,"LI",{});var TWe=s(Dw);MAe=n(TWe,"STRONG",{});var kYt=s(MAe);fKr=r(kYt,"opt"),kYt.forEach(t),mKr=r(TWe," \u2014 "),Qre=n(TWe,"A",{href:!0});var SYt=s(Qre);gKr=r(SYt,"FlaxOPTForCausalLM"),SYt.forEach(t),hKr=r(TWe," (OPT model)"),TWe.forEach(t),pKr=i(Ne),Gw=n(Ne,"LI",{});var MWe=s(Gw);EAe=n(MWe,"STRONG",{});var RYt=s(EAe);_Kr=r(RYt,"roberta"),RYt.forEach(t),uKr=r(MWe," \u2014 "),Ure=n(MWe,"A",{href:!0});var PYt=s(Ure);bKr=r(PYt,"FlaxRobertaForCausalLM"),PYt.forEach(t),vKr=r(MWe," (RoBERTa model)"),MWe.forEach(t),FKr=i(Ne),Ow=n(Ne,"LI",{});var EWe=s(Ow);CAe=n(EWe,"STRONG",{});var BYt=s(CAe);TKr=r(BYt,"xglm"),BYt.forEach(t),MKr=r(EWe," \u2014 "),Hre=n(EWe,"A",{href:!0});var IYt=s(Hre);EKr=r(IYt,"FlaxXGLMForCausalLM"),IYt.forEach(t),CKr=r(EWe," (XGLM model)"),EWe.forEach(t),Ne.forEach(t),wKr=i(Ci),T(Vw.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),SHe=i(f),Cf=n(f,"H2",{class:!0});var WYe=s(Cf);Xw=n(WYe,"A",{id:!0,class:!0,href:!0});var NYt=s(Xw);wAe=n(NYt,"SPAN",{});var qYt=s(wAe);T(Nk.$$.fragment,qYt),qYt.forEach(t),NYt.forEach(t),AKr=i(WYe),AAe=n(WYe,"SPAN",{});var jYt=s(AAe);LKr=r(jYt,"FlaxAutoModelForPreTraining"),jYt.forEach(t),WYe.forEach(t),RHe=i(f),Tr=n(f,"DIV",{class:!0});var wi=s(Tr);T(qk.$$.fragment,wi),yKr=i(wi),wf=n(wi,"P",{});var Mse=s(wf);xKr=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jre=n(Mse,"A",{href:!0});var DYt=s(Jre);$Kr=r(DYt,"from_pretrained()"),DYt.forEach(t),kKr=r(Mse," class method or the "),Yre=n(Mse,"A",{href:!0});var GYt=s(Yre);SKr=r(GYt,"from_config()"),GYt.forEach(t),RKr=r(Mse,` class
method.`),Mse.forEach(t),PKr=i(wi),jk=n(wi,"P",{});var QYe=s(jk);BKr=r(QYe,"This class cannot be instantiated directly using "),LAe=n(QYe,"CODE",{});var OYt=s(LAe);IKr=r(OYt,"__init__()"),OYt.forEach(t),NKr=r(QYe," (throws an error)."),QYe.forEach(t),qKr=i(wi),oa=n(wi,"DIV",{class:!0});var Vy=s(oa);T(Dk.$$.fragment,Vy),jKr=i(Vy),yAe=n(Vy,"P",{});var VYt=s(yAe);DKr=r(VYt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VYt.forEach(t),GKr=i(Vy),Af=n(Vy,"P",{});var Ese=s(Af);OKr=r(Ese,`Note:
Loading a model from its configuration file does `),xAe=n(Ese,"STRONG",{});var XYt=s(xAe);VKr=r(XYt,"not"),XYt.forEach(t),XKr=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kre=n(Ese,"A",{href:!0});var zYt=s(Kre);zKr=r(zYt,"from_pretrained()"),zYt.forEach(t),WKr=r(Ese," to load the model weights."),Ese.forEach(t),QKr=i(Vy),T(zw.$$.fragment,Vy),Vy.forEach(t),UKr=i(wi),Jr=n(wi,"DIV",{class:!0});var Ai=s(Jr);T(Gk.$$.fragment,Ai),HKr=i(Ai),$Ae=n(Ai,"P",{});var WYt=s($Ae);JKr=r(WYt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WYt.forEach(t),YKr=i(Ai),Rn=n(Ai,"P",{});var Xy=s(Rn);KKr=r(Xy,"The model class to instantiate is selected based on the "),kAe=n(Xy,"CODE",{});var QYt=s(kAe);ZKr=r(QYt,"model_type"),QYt.forEach(t),eZr=r(Xy,` property of the config object (either
passed as an argument or loaded from `),SAe=n(Xy,"CODE",{});var UYt=s(SAe);oZr=r(UYt,"pretrained_model_name_or_path"),UYt.forEach(t),rZr=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RAe=n(Xy,"CODE",{});var HYt=s(RAe);tZr=r(HYt,"pretrained_model_name_or_path"),HYt.forEach(t),aZr=r(Xy,":"),Xy.forEach(t),nZr=i(Ai),Ee=n(Ai,"UL",{});var we=s(Ee);Ww=n(we,"LI",{});var CWe=s(Ww);PAe=n(CWe,"STRONG",{});var JYt=s(PAe);sZr=r(JYt,"albert"),JYt.forEach(t),lZr=r(CWe," \u2014 "),Zre=n(CWe,"A",{href:!0});var YYt=s(Zre);iZr=r(YYt,"FlaxAlbertForPreTraining"),YYt.forEach(t),dZr=r(CWe," (ALBERT model)"),CWe.forEach(t),cZr=i(we),Qw=n(we,"LI",{});var wWe=s(Qw);BAe=n(wWe,"STRONG",{});var KYt=s(BAe);fZr=r(KYt,"bart"),KYt.forEach(t),mZr=r(wWe," \u2014 "),ete=n(wWe,"A",{href:!0});var ZYt=s(ete);gZr=r(ZYt,"FlaxBartForConditionalGeneration"),ZYt.forEach(t),hZr=r(wWe," (BART model)"),wWe.forEach(t),pZr=i(we),Uw=n(we,"LI",{});var AWe=s(Uw);IAe=n(AWe,"STRONG",{});var eKt=s(IAe);_Zr=r(eKt,"bert"),eKt.forEach(t),uZr=r(AWe," \u2014 "),ote=n(AWe,"A",{href:!0});var oKt=s(ote);bZr=r(oKt,"FlaxBertForPreTraining"),oKt.forEach(t),vZr=r(AWe," (BERT model)"),AWe.forEach(t),FZr=i(we),Hw=n(we,"LI",{});var LWe=s(Hw);NAe=n(LWe,"STRONG",{});var rKt=s(NAe);TZr=r(rKt,"big_bird"),rKt.forEach(t),MZr=r(LWe," \u2014 "),rte=n(LWe,"A",{href:!0});var tKt=s(rte);EZr=r(tKt,"FlaxBigBirdForPreTraining"),tKt.forEach(t),CZr=r(LWe," (BigBird model)"),LWe.forEach(t),wZr=i(we),Jw=n(we,"LI",{});var yWe=s(Jw);qAe=n(yWe,"STRONG",{});var aKt=s(qAe);AZr=r(aKt,"electra"),aKt.forEach(t),LZr=r(yWe," \u2014 "),tte=n(yWe,"A",{href:!0});var nKt=s(tte);yZr=r(nKt,"FlaxElectraForPreTraining"),nKt.forEach(t),xZr=r(yWe," (ELECTRA model)"),yWe.forEach(t),$Zr=i(we),Yw=n(we,"LI",{});var xWe=s(Yw);jAe=n(xWe,"STRONG",{});var sKt=s(jAe);kZr=r(sKt,"longt5"),sKt.forEach(t),SZr=r(xWe," \u2014 "),ate=n(xWe,"A",{href:!0});var lKt=s(ate);RZr=r(lKt,"FlaxLongT5ForConditionalGeneration"),lKt.forEach(t),PZr=r(xWe," (LongT5 model)"),xWe.forEach(t),BZr=i(we),Kw=n(we,"LI",{});var $We=s(Kw);DAe=n($We,"STRONG",{});var iKt=s(DAe);IZr=r(iKt,"mbart"),iKt.forEach(t),NZr=r($We," \u2014 "),nte=n($We,"A",{href:!0});var dKt=s(nte);qZr=r(dKt,"FlaxMBartForConditionalGeneration"),dKt.forEach(t),jZr=r($We," (mBART model)"),$We.forEach(t),DZr=i(we),Zw=n(we,"LI",{});var kWe=s(Zw);GAe=n(kWe,"STRONG",{});var cKt=s(GAe);GZr=r(cKt,"mt5"),cKt.forEach(t),OZr=r(kWe," \u2014 "),ste=n(kWe,"A",{href:!0});var fKt=s(ste);VZr=r(fKt,"FlaxMT5ForConditionalGeneration"),fKt.forEach(t),XZr=r(kWe," (MT5 model)"),kWe.forEach(t),zZr=i(we),e6=n(we,"LI",{});var SWe=s(e6);OAe=n(SWe,"STRONG",{});var mKt=s(OAe);WZr=r(mKt,"roberta"),mKt.forEach(t),QZr=r(SWe," \u2014 "),lte=n(SWe,"A",{href:!0});var gKt=s(lte);UZr=r(gKt,"FlaxRobertaForMaskedLM"),gKt.forEach(t),HZr=r(SWe," (RoBERTa model)"),SWe.forEach(t),JZr=i(we),o6=n(we,"LI",{});var RWe=s(o6);VAe=n(RWe,"STRONG",{});var hKt=s(VAe);YZr=r(hKt,"roformer"),hKt.forEach(t),KZr=r(RWe," \u2014 "),ite=n(RWe,"A",{href:!0});var pKt=s(ite);ZZr=r(pKt,"FlaxRoFormerForMaskedLM"),pKt.forEach(t),eet=r(RWe," (RoFormer model)"),RWe.forEach(t),oet=i(we),r6=n(we,"LI",{});var PWe=s(r6);XAe=n(PWe,"STRONG",{});var _Kt=s(XAe);ret=r(_Kt,"t5"),_Kt.forEach(t),tet=r(PWe," \u2014 "),dte=n(PWe,"A",{href:!0});var uKt=s(dte);aet=r(uKt,"FlaxT5ForConditionalGeneration"),uKt.forEach(t),net=r(PWe," (T5 model)"),PWe.forEach(t),set=i(we),t6=n(we,"LI",{});var BWe=s(t6);zAe=n(BWe,"STRONG",{});var bKt=s(zAe);iet=r(bKt,"wav2vec2"),bKt.forEach(t),det=r(BWe," \u2014 "),cte=n(BWe,"A",{href:!0});var vKt=s(cte);cet=r(vKt,"FlaxWav2Vec2ForPreTraining"),vKt.forEach(t),fet=r(BWe," (Wav2Vec2 model)"),BWe.forEach(t),met=i(we),a6=n(we,"LI",{});var IWe=s(a6);WAe=n(IWe,"STRONG",{});var FKt=s(WAe);get=r(FKt,"xlm-roberta"),FKt.forEach(t),het=r(IWe," \u2014 "),fte=n(IWe,"A",{href:!0});var TKt=s(fte);pet=r(TKt,"FlaxXLMRobertaForMaskedLM"),TKt.forEach(t),_et=r(IWe," (XLM-RoBERTa model)"),IWe.forEach(t),we.forEach(t),uet=i(Ai),T(n6.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),PHe=i(f),Lf=n(f,"H2",{class:!0});var UYe=s(Lf);s6=n(UYe,"A",{id:!0,class:!0,href:!0});var MKt=s(s6);QAe=n(MKt,"SPAN",{});var EKt=s(QAe);T(Ok.$$.fragment,EKt),EKt.forEach(t),MKt.forEach(t),bet=i(UYe),UAe=n(UYe,"SPAN",{});var CKt=s(UAe);vet=r(CKt,"FlaxAutoModelForMaskedLM"),CKt.forEach(t),UYe.forEach(t),BHe=i(f),Mr=n(f,"DIV",{class:!0});var Li=s(Mr);T(Vk.$$.fragment,Li),Fet=i(Li),yf=n(Li,"P",{});var Cse=s(yf);Tet=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mte=n(Cse,"A",{href:!0});var wKt=s(mte);Met=r(wKt,"from_pretrained()"),wKt.forEach(t),Eet=r(Cse," class method or the "),gte=n(Cse,"A",{href:!0});var AKt=s(gte);Cet=r(AKt,"from_config()"),AKt.forEach(t),wet=r(Cse,` class
method.`),Cse.forEach(t),Aet=i(Li),Xk=n(Li,"P",{});var HYe=s(Xk);Let=r(HYe,"This class cannot be instantiated directly using "),HAe=n(HYe,"CODE",{});var LKt=s(HAe);yet=r(LKt,"__init__()"),LKt.forEach(t),xet=r(HYe," (throws an error)."),HYe.forEach(t),$et=i(Li),ra=n(Li,"DIV",{class:!0});var zy=s(ra);T(zk.$$.fragment,zy),ket=i(zy),JAe=n(zy,"P",{});var yKt=s(JAe);Set=r(yKt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yKt.forEach(t),Ret=i(zy),xf=n(zy,"P",{});var wse=s(xf);Pet=r(wse,`Note:
Loading a model from its configuration file does `),YAe=n(wse,"STRONG",{});var xKt=s(YAe);Bet=r(xKt,"not"),xKt.forEach(t),Iet=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=n(wse,"A",{href:!0});var $Kt=s(hte);Net=r($Kt,"from_pretrained()"),$Kt.forEach(t),qet=r(wse," to load the model weights."),wse.forEach(t),jet=i(zy),T(l6.$$.fragment,zy),zy.forEach(t),Det=i(Li),Yr=n(Li,"DIV",{class:!0});var yi=s(Yr);T(Wk.$$.fragment,yi),Get=i(yi),KAe=n(yi,"P",{});var kKt=s(KAe);Oet=r(kKt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kKt.forEach(t),Vet=i(yi),Pn=n(yi,"P",{});var Wy=s(Pn);Xet=r(Wy,"The model class to instantiate is selected based on the "),ZAe=n(Wy,"CODE",{});var SKt=s(ZAe);zet=r(SKt,"model_type"),SKt.forEach(t),Wet=r(Wy,` property of the config object (either
passed as an argument or loaded from `),eLe=n(Wy,"CODE",{});var RKt=s(eLe);Qet=r(RKt,"pretrained_model_name_or_path"),RKt.forEach(t),Uet=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oLe=n(Wy,"CODE",{});var PKt=s(oLe);Het=r(PKt,"pretrained_model_name_or_path"),PKt.forEach(t),Jet=r(Wy,":"),Wy.forEach(t),Yet=i(yi),$e=n(yi,"UL",{});var qe=s($e);i6=n(qe,"LI",{});var NWe=s(i6);rLe=n(NWe,"STRONG",{});var BKt=s(rLe);Ket=r(BKt,"albert"),BKt.forEach(t),Zet=r(NWe," \u2014 "),pte=n(NWe,"A",{href:!0});var IKt=s(pte);eot=r(IKt,"FlaxAlbertForMaskedLM"),IKt.forEach(t),oot=r(NWe," (ALBERT model)"),NWe.forEach(t),rot=i(qe),d6=n(qe,"LI",{});var qWe=s(d6);tLe=n(qWe,"STRONG",{});var NKt=s(tLe);tot=r(NKt,"bart"),NKt.forEach(t),aot=r(qWe," \u2014 "),_te=n(qWe,"A",{href:!0});var qKt=s(_te);not=r(qKt,"FlaxBartForConditionalGeneration"),qKt.forEach(t),sot=r(qWe," (BART model)"),qWe.forEach(t),lot=i(qe),c6=n(qe,"LI",{});var jWe=s(c6);aLe=n(jWe,"STRONG",{});var jKt=s(aLe);iot=r(jKt,"bert"),jKt.forEach(t),dot=r(jWe," \u2014 "),ute=n(jWe,"A",{href:!0});var DKt=s(ute);cot=r(DKt,"FlaxBertForMaskedLM"),DKt.forEach(t),fot=r(jWe," (BERT model)"),jWe.forEach(t),mot=i(qe),f6=n(qe,"LI",{});var DWe=s(f6);nLe=n(DWe,"STRONG",{});var GKt=s(nLe);got=r(GKt,"big_bird"),GKt.forEach(t),hot=r(DWe," \u2014 "),bte=n(DWe,"A",{href:!0});var OKt=s(bte);pot=r(OKt,"FlaxBigBirdForMaskedLM"),OKt.forEach(t),_ot=r(DWe," (BigBird model)"),DWe.forEach(t),uot=i(qe),m6=n(qe,"LI",{});var GWe=s(m6);sLe=n(GWe,"STRONG",{});var VKt=s(sLe);bot=r(VKt,"distilbert"),VKt.forEach(t),vot=r(GWe," \u2014 "),vte=n(GWe,"A",{href:!0});var XKt=s(vte);Fot=r(XKt,"FlaxDistilBertForMaskedLM"),XKt.forEach(t),Tot=r(GWe," (DistilBERT model)"),GWe.forEach(t),Mot=i(qe),g6=n(qe,"LI",{});var OWe=s(g6);lLe=n(OWe,"STRONG",{});var zKt=s(lLe);Eot=r(zKt,"electra"),zKt.forEach(t),Cot=r(OWe," \u2014 "),Fte=n(OWe,"A",{href:!0});var WKt=s(Fte);wot=r(WKt,"FlaxElectraForMaskedLM"),WKt.forEach(t),Aot=r(OWe," (ELECTRA model)"),OWe.forEach(t),Lot=i(qe),h6=n(qe,"LI",{});var VWe=s(h6);iLe=n(VWe,"STRONG",{});var QKt=s(iLe);yot=r(QKt,"mbart"),QKt.forEach(t),xot=r(VWe," \u2014 "),Tte=n(VWe,"A",{href:!0});var UKt=s(Tte);$ot=r(UKt,"FlaxMBartForConditionalGeneration"),UKt.forEach(t),kot=r(VWe," (mBART model)"),VWe.forEach(t),Sot=i(qe),p6=n(qe,"LI",{});var XWe=s(p6);dLe=n(XWe,"STRONG",{});var HKt=s(dLe);Rot=r(HKt,"roberta"),HKt.forEach(t),Pot=r(XWe," \u2014 "),Mte=n(XWe,"A",{href:!0});var JKt=s(Mte);Bot=r(JKt,"FlaxRobertaForMaskedLM"),JKt.forEach(t),Iot=r(XWe," (RoBERTa model)"),XWe.forEach(t),Not=i(qe),_6=n(qe,"LI",{});var zWe=s(_6);cLe=n(zWe,"STRONG",{});var YKt=s(cLe);qot=r(YKt,"roformer"),YKt.forEach(t),jot=r(zWe," \u2014 "),Ete=n(zWe,"A",{href:!0});var KKt=s(Ete);Dot=r(KKt,"FlaxRoFormerForMaskedLM"),KKt.forEach(t),Got=r(zWe," (RoFormer model)"),zWe.forEach(t),Oot=i(qe),u6=n(qe,"LI",{});var WWe=s(u6);fLe=n(WWe,"STRONG",{});var ZKt=s(fLe);Vot=r(ZKt,"xlm-roberta"),ZKt.forEach(t),Xot=r(WWe," \u2014 "),Cte=n(WWe,"A",{href:!0});var eZt=s(Cte);zot=r(eZt,"FlaxXLMRobertaForMaskedLM"),eZt.forEach(t),Wot=r(WWe," (XLM-RoBERTa model)"),WWe.forEach(t),qe.forEach(t),Qot=i(yi),T(b6.$$.fragment,yi),yi.forEach(t),Li.forEach(t),IHe=i(f),$f=n(f,"H2",{class:!0});var JYe=s($f);v6=n(JYe,"A",{id:!0,class:!0,href:!0});var oZt=s(v6);mLe=n(oZt,"SPAN",{});var rZt=s(mLe);T(Qk.$$.fragment,rZt),rZt.forEach(t),oZt.forEach(t),Uot=i(JYe),gLe=n(JYe,"SPAN",{});var tZt=s(gLe);Hot=r(tZt,"FlaxAutoModelForSeq2SeqLM"),tZt.forEach(t),JYe.forEach(t),NHe=i(f),Er=n(f,"DIV",{class:!0});var xi=s(Er);T(Uk.$$.fragment,xi),Jot=i(xi),kf=n(xi,"P",{});var Ase=s(kf);Yot=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wte=n(Ase,"A",{href:!0});var aZt=s(wte);Kot=r(aZt,"from_pretrained()"),aZt.forEach(t),Zot=r(Ase," class method or the "),Ate=n(Ase,"A",{href:!0});var nZt=s(Ate);ert=r(nZt,"from_config()"),nZt.forEach(t),ort=r(Ase,` class
method.`),Ase.forEach(t),rrt=i(xi),Hk=n(xi,"P",{});var YYe=s(Hk);trt=r(YYe,"This class cannot be instantiated directly using "),hLe=n(YYe,"CODE",{});var sZt=s(hLe);art=r(sZt,"__init__()"),sZt.forEach(t),nrt=r(YYe," (throws an error)."),YYe.forEach(t),srt=i(xi),ta=n(xi,"DIV",{class:!0});var Qy=s(ta);T(Jk.$$.fragment,Qy),lrt=i(Qy),pLe=n(Qy,"P",{});var lZt=s(pLe);irt=r(lZt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lZt.forEach(t),drt=i(Qy),Sf=n(Qy,"P",{});var Lse=s(Sf);crt=r(Lse,`Note:
Loading a model from its configuration file does `),_Le=n(Lse,"STRONG",{});var iZt=s(_Le);frt=r(iZt,"not"),iZt.forEach(t),mrt=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lte=n(Lse,"A",{href:!0});var dZt=s(Lte);grt=r(dZt,"from_pretrained()"),dZt.forEach(t),hrt=r(Lse," to load the model weights."),Lse.forEach(t),prt=i(Qy),T(F6.$$.fragment,Qy),Qy.forEach(t),_rt=i(xi),Kr=n(xi,"DIV",{class:!0});var $i=s(Kr);T(Yk.$$.fragment,$i),urt=i($i),uLe=n($i,"P",{});var cZt=s(uLe);brt=r(cZt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cZt.forEach(t),vrt=i($i),Bn=n($i,"P",{});var Uy=s(Bn);Frt=r(Uy,"The model class to instantiate is selected based on the "),bLe=n(Uy,"CODE",{});var fZt=s(bLe);Trt=r(fZt,"model_type"),fZt.forEach(t),Mrt=r(Uy,` property of the config object (either
passed as an argument or loaded from `),vLe=n(Uy,"CODE",{});var mZt=s(vLe);Ert=r(mZt,"pretrained_model_name_or_path"),mZt.forEach(t),Crt=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FLe=n(Uy,"CODE",{});var gZt=s(FLe);wrt=r(gZt,"pretrained_model_name_or_path"),gZt.forEach(t),Art=r(Uy,":"),Uy.forEach(t),Lrt=i($i),ke=n($i,"UL",{});var je=s(ke);T6=n(je,"LI",{});var QWe=s(T6);TLe=n(QWe,"STRONG",{});var hZt=s(TLe);yrt=r(hZt,"bart"),hZt.forEach(t),xrt=r(QWe," \u2014 "),yte=n(QWe,"A",{href:!0});var pZt=s(yte);$rt=r(pZt,"FlaxBartForConditionalGeneration"),pZt.forEach(t),krt=r(QWe," (BART model)"),QWe.forEach(t),Srt=i(je),M6=n(je,"LI",{});var UWe=s(M6);MLe=n(UWe,"STRONG",{});var _Zt=s(MLe);Rrt=r(_Zt,"blenderbot"),_Zt.forEach(t),Prt=r(UWe," \u2014 "),xte=n(UWe,"A",{href:!0});var uZt=s(xte);Brt=r(uZt,"FlaxBlenderbotForConditionalGeneration"),uZt.forEach(t),Irt=r(UWe," (Blenderbot model)"),UWe.forEach(t),Nrt=i(je),E6=n(je,"LI",{});var HWe=s(E6);ELe=n(HWe,"STRONG",{});var bZt=s(ELe);qrt=r(bZt,"blenderbot-small"),bZt.forEach(t),jrt=r(HWe," \u2014 "),$te=n(HWe,"A",{href:!0});var vZt=s($te);Drt=r(vZt,"FlaxBlenderbotSmallForConditionalGeneration"),vZt.forEach(t),Grt=r(HWe," (BlenderbotSmall model)"),HWe.forEach(t),Ort=i(je),C6=n(je,"LI",{});var JWe=s(C6);CLe=n(JWe,"STRONG",{});var FZt=s(CLe);Vrt=r(FZt,"encoder-decoder"),FZt.forEach(t),Xrt=r(JWe," \u2014 "),kte=n(JWe,"A",{href:!0});var TZt=s(kte);zrt=r(TZt,"FlaxEncoderDecoderModel"),TZt.forEach(t),Wrt=r(JWe," (Encoder decoder model)"),JWe.forEach(t),Qrt=i(je),w6=n(je,"LI",{});var YWe=s(w6);wLe=n(YWe,"STRONG",{});var MZt=s(wLe);Urt=r(MZt,"longt5"),MZt.forEach(t),Hrt=r(YWe," \u2014 "),Ste=n(YWe,"A",{href:!0});var EZt=s(Ste);Jrt=r(EZt,"FlaxLongT5ForConditionalGeneration"),EZt.forEach(t),Yrt=r(YWe," (LongT5 model)"),YWe.forEach(t),Krt=i(je),A6=n(je,"LI",{});var KWe=s(A6);ALe=n(KWe,"STRONG",{});var CZt=s(ALe);Zrt=r(CZt,"marian"),CZt.forEach(t),ett=r(KWe," \u2014 "),Rte=n(KWe,"A",{href:!0});var wZt=s(Rte);ott=r(wZt,"FlaxMarianMTModel"),wZt.forEach(t),rtt=r(KWe," (Marian model)"),KWe.forEach(t),ttt=i(je),L6=n(je,"LI",{});var ZWe=s(L6);LLe=n(ZWe,"STRONG",{});var AZt=s(LLe);att=r(AZt,"mbart"),AZt.forEach(t),ntt=r(ZWe," \u2014 "),Pte=n(ZWe,"A",{href:!0});var LZt=s(Pte);stt=r(LZt,"FlaxMBartForConditionalGeneration"),LZt.forEach(t),ltt=r(ZWe," (mBART model)"),ZWe.forEach(t),itt=i(je),y6=n(je,"LI",{});var eQe=s(y6);yLe=n(eQe,"STRONG",{});var yZt=s(yLe);dtt=r(yZt,"mt5"),yZt.forEach(t),ctt=r(eQe," \u2014 "),Bte=n(eQe,"A",{href:!0});var xZt=s(Bte);ftt=r(xZt,"FlaxMT5ForConditionalGeneration"),xZt.forEach(t),mtt=r(eQe," (MT5 model)"),eQe.forEach(t),gtt=i(je),x6=n(je,"LI",{});var oQe=s(x6);xLe=n(oQe,"STRONG",{});var $Zt=s(xLe);htt=r($Zt,"pegasus"),$Zt.forEach(t),ptt=r(oQe," \u2014 "),Ite=n(oQe,"A",{href:!0});var kZt=s(Ite);_tt=r(kZt,"FlaxPegasusForConditionalGeneration"),kZt.forEach(t),utt=r(oQe," (Pegasus model)"),oQe.forEach(t),btt=i(je),$6=n(je,"LI",{});var rQe=s($6);$Le=n(rQe,"STRONG",{});var SZt=s($Le);vtt=r(SZt,"t5"),SZt.forEach(t),Ftt=r(rQe," \u2014 "),Nte=n(rQe,"A",{href:!0});var RZt=s(Nte);Ttt=r(RZt,"FlaxT5ForConditionalGeneration"),RZt.forEach(t),Mtt=r(rQe," (T5 model)"),rQe.forEach(t),je.forEach(t),Ett=i($i),T(k6.$$.fragment,$i),$i.forEach(t),xi.forEach(t),qHe=i(f),Rf=n(f,"H2",{class:!0});var KYe=s(Rf);S6=n(KYe,"A",{id:!0,class:!0,href:!0});var PZt=s(S6);kLe=n(PZt,"SPAN",{});var BZt=s(kLe);T(Kk.$$.fragment,BZt),BZt.forEach(t),PZt.forEach(t),Ctt=i(KYe),SLe=n(KYe,"SPAN",{});var IZt=s(SLe);wtt=r(IZt,"FlaxAutoModelForSequenceClassification"),IZt.forEach(t),KYe.forEach(t),jHe=i(f),Cr=n(f,"DIV",{class:!0});var ki=s(Cr);T(Zk.$$.fragment,ki),Att=i(ki),Pf=n(ki,"P",{});var yse=s(Pf);Ltt=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qte=n(yse,"A",{href:!0});var NZt=s(qte);ytt=r(NZt,"from_pretrained()"),NZt.forEach(t),xtt=r(yse," class method or the "),jte=n(yse,"A",{href:!0});var qZt=s(jte);$tt=r(qZt,"from_config()"),qZt.forEach(t),ktt=r(yse,` class
method.`),yse.forEach(t),Stt=i(ki),eS=n(ki,"P",{});var ZYe=s(eS);Rtt=r(ZYe,"This class cannot be instantiated directly using "),RLe=n(ZYe,"CODE",{});var jZt=s(RLe);Ptt=r(jZt,"__init__()"),jZt.forEach(t),Btt=r(ZYe," (throws an error)."),ZYe.forEach(t),Itt=i(ki),aa=n(ki,"DIV",{class:!0});var Hy=s(aa);T(oS.$$.fragment,Hy),Ntt=i(Hy),PLe=n(Hy,"P",{});var DZt=s(PLe);qtt=r(DZt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DZt.forEach(t),jtt=i(Hy),Bf=n(Hy,"P",{});var xse=s(Bf);Dtt=r(xse,`Note:
Loading a model from its configuration file does `),BLe=n(xse,"STRONG",{});var GZt=s(BLe);Gtt=r(GZt,"not"),GZt.forEach(t),Ott=r(xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=n(xse,"A",{href:!0});var OZt=s(Dte);Vtt=r(OZt,"from_pretrained()"),OZt.forEach(t),Xtt=r(xse," to load the model weights."),xse.forEach(t),ztt=i(Hy),T(R6.$$.fragment,Hy),Hy.forEach(t),Wtt=i(ki),Zr=n(ki,"DIV",{class:!0});var Si=s(Zr);T(rS.$$.fragment,Si),Qtt=i(Si),ILe=n(Si,"P",{});var VZt=s(ILe);Utt=r(VZt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VZt.forEach(t),Htt=i(Si),In=n(Si,"P",{});var Jy=s(In);Jtt=r(Jy,"The model class to instantiate is selected based on the "),NLe=n(Jy,"CODE",{});var XZt=s(NLe);Ytt=r(XZt,"model_type"),XZt.forEach(t),Ktt=r(Jy,` property of the config object (either
passed as an argument or loaded from `),qLe=n(Jy,"CODE",{});var zZt=s(qLe);Ztt=r(zZt,"pretrained_model_name_or_path"),zZt.forEach(t),eat=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jLe=n(Jy,"CODE",{});var WZt=s(jLe);oat=r(WZt,"pretrained_model_name_or_path"),WZt.forEach(t),rat=r(Jy,":"),Jy.forEach(t),tat=i(Si),Se=n(Si,"UL",{});var De=s(Se);P6=n(De,"LI",{});var tQe=s(P6);DLe=n(tQe,"STRONG",{});var QZt=s(DLe);aat=r(QZt,"albert"),QZt.forEach(t),nat=r(tQe," \u2014 "),Gte=n(tQe,"A",{href:!0});var UZt=s(Gte);sat=r(UZt,"FlaxAlbertForSequenceClassification"),UZt.forEach(t),lat=r(tQe," (ALBERT model)"),tQe.forEach(t),iat=i(De),B6=n(De,"LI",{});var aQe=s(B6);GLe=n(aQe,"STRONG",{});var HZt=s(GLe);dat=r(HZt,"bart"),HZt.forEach(t),cat=r(aQe," \u2014 "),Ote=n(aQe,"A",{href:!0});var JZt=s(Ote);fat=r(JZt,"FlaxBartForSequenceClassification"),JZt.forEach(t),mat=r(aQe," (BART model)"),aQe.forEach(t),gat=i(De),I6=n(De,"LI",{});var nQe=s(I6);OLe=n(nQe,"STRONG",{});var YZt=s(OLe);hat=r(YZt,"bert"),YZt.forEach(t),pat=r(nQe," \u2014 "),Vte=n(nQe,"A",{href:!0});var KZt=s(Vte);_at=r(KZt,"FlaxBertForSequenceClassification"),KZt.forEach(t),uat=r(nQe," (BERT model)"),nQe.forEach(t),bat=i(De),N6=n(De,"LI",{});var sQe=s(N6);VLe=n(sQe,"STRONG",{});var ZZt=s(VLe);vat=r(ZZt,"big_bird"),ZZt.forEach(t),Fat=r(sQe," \u2014 "),Xte=n(sQe,"A",{href:!0});var eea=s(Xte);Tat=r(eea,"FlaxBigBirdForSequenceClassification"),eea.forEach(t),Mat=r(sQe," (BigBird model)"),sQe.forEach(t),Eat=i(De),q6=n(De,"LI",{});var lQe=s(q6);XLe=n(lQe,"STRONG",{});var oea=s(XLe);Cat=r(oea,"distilbert"),oea.forEach(t),wat=r(lQe," \u2014 "),zte=n(lQe,"A",{href:!0});var rea=s(zte);Aat=r(rea,"FlaxDistilBertForSequenceClassification"),rea.forEach(t),Lat=r(lQe," (DistilBERT model)"),lQe.forEach(t),yat=i(De),j6=n(De,"LI",{});var iQe=s(j6);zLe=n(iQe,"STRONG",{});var tea=s(zLe);xat=r(tea,"electra"),tea.forEach(t),$at=r(iQe," \u2014 "),Wte=n(iQe,"A",{href:!0});var aea=s(Wte);kat=r(aea,"FlaxElectraForSequenceClassification"),aea.forEach(t),Sat=r(iQe," (ELECTRA model)"),iQe.forEach(t),Rat=i(De),D6=n(De,"LI",{});var dQe=s(D6);WLe=n(dQe,"STRONG",{});var nea=s(WLe);Pat=r(nea,"mbart"),nea.forEach(t),Bat=r(dQe," \u2014 "),Qte=n(dQe,"A",{href:!0});var sea=s(Qte);Iat=r(sea,"FlaxMBartForSequenceClassification"),sea.forEach(t),Nat=r(dQe," (mBART model)"),dQe.forEach(t),qat=i(De),G6=n(De,"LI",{});var cQe=s(G6);QLe=n(cQe,"STRONG",{});var lea=s(QLe);jat=r(lea,"roberta"),lea.forEach(t),Dat=r(cQe," \u2014 "),Ute=n(cQe,"A",{href:!0});var iea=s(Ute);Gat=r(iea,"FlaxRobertaForSequenceClassification"),iea.forEach(t),Oat=r(cQe," (RoBERTa model)"),cQe.forEach(t),Vat=i(De),O6=n(De,"LI",{});var fQe=s(O6);ULe=n(fQe,"STRONG",{});var dea=s(ULe);Xat=r(dea,"roformer"),dea.forEach(t),zat=r(fQe," \u2014 "),Hte=n(fQe,"A",{href:!0});var cea=s(Hte);Wat=r(cea,"FlaxRoFormerForSequenceClassification"),cea.forEach(t),Qat=r(fQe," (RoFormer model)"),fQe.forEach(t),Uat=i(De),V6=n(De,"LI",{});var mQe=s(V6);HLe=n(mQe,"STRONG",{});var fea=s(HLe);Hat=r(fea,"xlm-roberta"),fea.forEach(t),Jat=r(mQe," \u2014 "),Jte=n(mQe,"A",{href:!0});var mea=s(Jte);Yat=r(mea,"FlaxXLMRobertaForSequenceClassification"),mea.forEach(t),Kat=r(mQe," (XLM-RoBERTa model)"),mQe.forEach(t),De.forEach(t),Zat=i(Si),T(X6.$$.fragment,Si),Si.forEach(t),ki.forEach(t),DHe=i(f),If=n(f,"H2",{class:!0});var eKe=s(If);z6=n(eKe,"A",{id:!0,class:!0,href:!0});var gea=s(z6);JLe=n(gea,"SPAN",{});var hea=s(JLe);T(tS.$$.fragment,hea),hea.forEach(t),gea.forEach(t),ent=i(eKe),YLe=n(eKe,"SPAN",{});var pea=s(YLe);ont=r(pea,"FlaxAutoModelForQuestionAnswering"),pea.forEach(t),eKe.forEach(t),GHe=i(f),wr=n(f,"DIV",{class:!0});var Ri=s(wr);T(aS.$$.fragment,Ri),rnt=i(Ri),Nf=n(Ri,"P",{});var $se=s(Nf);tnt=r($se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yte=n($se,"A",{href:!0});var _ea=s(Yte);ant=r(_ea,"from_pretrained()"),_ea.forEach(t),nnt=r($se," class method or the "),Kte=n($se,"A",{href:!0});var uea=s(Kte);snt=r(uea,"from_config()"),uea.forEach(t),lnt=r($se,` class
method.`),$se.forEach(t),int=i(Ri),nS=n(Ri,"P",{});var oKe=s(nS);dnt=r(oKe,"This class cannot be instantiated directly using "),KLe=n(oKe,"CODE",{});var bea=s(KLe);cnt=r(bea,"__init__()"),bea.forEach(t),fnt=r(oKe," (throws an error)."),oKe.forEach(t),mnt=i(Ri),na=n(Ri,"DIV",{class:!0});var Yy=s(na);T(sS.$$.fragment,Yy),gnt=i(Yy),ZLe=n(Yy,"P",{});var vea=s(ZLe);hnt=r(vea,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vea.forEach(t),pnt=i(Yy),qf=n(Yy,"P",{});var kse=s(qf);_nt=r(kse,`Note:
Loading a model from its configuration file does `),eye=n(kse,"STRONG",{});var Fea=s(eye);unt=r(Fea,"not"),Fea.forEach(t),bnt=r(kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zte=n(kse,"A",{href:!0});var Tea=s(Zte);vnt=r(Tea,"from_pretrained()"),Tea.forEach(t),Fnt=r(kse," to load the model weights."),kse.forEach(t),Tnt=i(Yy),T(W6.$$.fragment,Yy),Yy.forEach(t),Mnt=i(Ri),et=n(Ri,"DIV",{class:!0});var Pi=s(et);T(lS.$$.fragment,Pi),Ent=i(Pi),oye=n(Pi,"P",{});var Mea=s(oye);Cnt=r(Mea,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mea.forEach(t),wnt=i(Pi),Nn=n(Pi,"P",{});var Ky=s(Nn);Ant=r(Ky,"The model class to instantiate is selected based on the "),rye=n(Ky,"CODE",{});var Eea=s(rye);Lnt=r(Eea,"model_type"),Eea.forEach(t),ynt=r(Ky,` property of the config object (either
passed as an argument or loaded from `),tye=n(Ky,"CODE",{});var Cea=s(tye);xnt=r(Cea,"pretrained_model_name_or_path"),Cea.forEach(t),$nt=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aye=n(Ky,"CODE",{});var wea=s(aye);knt=r(wea,"pretrained_model_name_or_path"),wea.forEach(t),Snt=r(Ky,":"),Ky.forEach(t),Rnt=i(Pi),Re=n(Pi,"UL",{});var Ge=s(Re);Q6=n(Ge,"LI",{});var gQe=s(Q6);nye=n(gQe,"STRONG",{});var Aea=s(nye);Pnt=r(Aea,"albert"),Aea.forEach(t),Bnt=r(gQe," \u2014 "),eae=n(gQe,"A",{href:!0});var Lea=s(eae);Int=r(Lea,"FlaxAlbertForQuestionAnswering"),Lea.forEach(t),Nnt=r(gQe," (ALBERT model)"),gQe.forEach(t),qnt=i(Ge),U6=n(Ge,"LI",{});var hQe=s(U6);sye=n(hQe,"STRONG",{});var yea=s(sye);jnt=r(yea,"bart"),yea.forEach(t),Dnt=r(hQe," \u2014 "),oae=n(hQe,"A",{href:!0});var xea=s(oae);Gnt=r(xea,"FlaxBartForQuestionAnswering"),xea.forEach(t),Ont=r(hQe," (BART model)"),hQe.forEach(t),Vnt=i(Ge),H6=n(Ge,"LI",{});var pQe=s(H6);lye=n(pQe,"STRONG",{});var $ea=s(lye);Xnt=r($ea,"bert"),$ea.forEach(t),znt=r(pQe," \u2014 "),rae=n(pQe,"A",{href:!0});var kea=s(rae);Wnt=r(kea,"FlaxBertForQuestionAnswering"),kea.forEach(t),Qnt=r(pQe," (BERT model)"),pQe.forEach(t),Unt=i(Ge),J6=n(Ge,"LI",{});var _Qe=s(J6);iye=n(_Qe,"STRONG",{});var Sea=s(iye);Hnt=r(Sea,"big_bird"),Sea.forEach(t),Jnt=r(_Qe," \u2014 "),tae=n(_Qe,"A",{href:!0});var Rea=s(tae);Ynt=r(Rea,"FlaxBigBirdForQuestionAnswering"),Rea.forEach(t),Knt=r(_Qe," (BigBird model)"),_Qe.forEach(t),Znt=i(Ge),Y6=n(Ge,"LI",{});var uQe=s(Y6);dye=n(uQe,"STRONG",{});var Pea=s(dye);est=r(Pea,"distilbert"),Pea.forEach(t),ost=r(uQe," \u2014 "),aae=n(uQe,"A",{href:!0});var Bea=s(aae);rst=r(Bea,"FlaxDistilBertForQuestionAnswering"),Bea.forEach(t),tst=r(uQe," (DistilBERT model)"),uQe.forEach(t),ast=i(Ge),K6=n(Ge,"LI",{});var bQe=s(K6);cye=n(bQe,"STRONG",{});var Iea=s(cye);nst=r(Iea,"electra"),Iea.forEach(t),sst=r(bQe," \u2014 "),nae=n(bQe,"A",{href:!0});var Nea=s(nae);lst=r(Nea,"FlaxElectraForQuestionAnswering"),Nea.forEach(t),ist=r(bQe," (ELECTRA model)"),bQe.forEach(t),dst=i(Ge),Z6=n(Ge,"LI",{});var vQe=s(Z6);fye=n(vQe,"STRONG",{});var qea=s(fye);cst=r(qea,"mbart"),qea.forEach(t),fst=r(vQe," \u2014 "),sae=n(vQe,"A",{href:!0});var jea=s(sae);mst=r(jea,"FlaxMBartForQuestionAnswering"),jea.forEach(t),gst=r(vQe," (mBART model)"),vQe.forEach(t),hst=i(Ge),eA=n(Ge,"LI",{});var FQe=s(eA);mye=n(FQe,"STRONG",{});var Dea=s(mye);pst=r(Dea,"roberta"),Dea.forEach(t),_st=r(FQe," \u2014 "),lae=n(FQe,"A",{href:!0});var Gea=s(lae);ust=r(Gea,"FlaxRobertaForQuestionAnswering"),Gea.forEach(t),bst=r(FQe," (RoBERTa model)"),FQe.forEach(t),vst=i(Ge),oA=n(Ge,"LI",{});var TQe=s(oA);gye=n(TQe,"STRONG",{});var Oea=s(gye);Fst=r(Oea,"roformer"),Oea.forEach(t),Tst=r(TQe," \u2014 "),iae=n(TQe,"A",{href:!0});var Vea=s(iae);Mst=r(Vea,"FlaxRoFormerForQuestionAnswering"),Vea.forEach(t),Est=r(TQe," (RoFormer model)"),TQe.forEach(t),Cst=i(Ge),rA=n(Ge,"LI",{});var MQe=s(rA);hye=n(MQe,"STRONG",{});var Xea=s(hye);wst=r(Xea,"xlm-roberta"),Xea.forEach(t),Ast=r(MQe," \u2014 "),dae=n(MQe,"A",{href:!0});var zea=s(dae);Lst=r(zea,"FlaxXLMRobertaForQuestionAnswering"),zea.forEach(t),yst=r(MQe," (XLM-RoBERTa model)"),MQe.forEach(t),Ge.forEach(t),xst=i(Pi),T(tA.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),OHe=i(f),jf=n(f,"H2",{class:!0});var rKe=s(jf);aA=n(rKe,"A",{id:!0,class:!0,href:!0});var Wea=s(aA);pye=n(Wea,"SPAN",{});var Qea=s(pye);T(iS.$$.fragment,Qea),Qea.forEach(t),Wea.forEach(t),$st=i(rKe),_ye=n(rKe,"SPAN",{});var Uea=s(_ye);kst=r(Uea,"FlaxAutoModelForTokenClassification"),Uea.forEach(t),rKe.forEach(t),VHe=i(f),Ar=n(f,"DIV",{class:!0});var Bi=s(Ar);T(dS.$$.fragment,Bi),Sst=i(Bi),Df=n(Bi,"P",{});var Sse=s(Df);Rst=r(Sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cae=n(Sse,"A",{href:!0});var Hea=s(cae);Pst=r(Hea,"from_pretrained()"),Hea.forEach(t),Bst=r(Sse," class method or the "),fae=n(Sse,"A",{href:!0});var Jea=s(fae);Ist=r(Jea,"from_config()"),Jea.forEach(t),Nst=r(Sse,` class
method.`),Sse.forEach(t),qst=i(Bi),cS=n(Bi,"P",{});var tKe=s(cS);jst=r(tKe,"This class cannot be instantiated directly using "),uye=n(tKe,"CODE",{});var Yea=s(uye);Dst=r(Yea,"__init__()"),Yea.forEach(t),Gst=r(tKe," (throws an error)."),tKe.forEach(t),Ost=i(Bi),sa=n(Bi,"DIV",{class:!0});var Zy=s(sa);T(fS.$$.fragment,Zy),Vst=i(Zy),bye=n(Zy,"P",{});var Kea=s(bye);Xst=r(Kea,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kea.forEach(t),zst=i(Zy),Gf=n(Zy,"P",{});var Rse=s(Gf);Wst=r(Rse,`Note:
Loading a model from its configuration file does `),vye=n(Rse,"STRONG",{});var Zea=s(vye);Qst=r(Zea,"not"),Zea.forEach(t),Ust=r(Rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=n(Rse,"A",{href:!0});var eoa=s(mae);Hst=r(eoa,"from_pretrained()"),eoa.forEach(t),Jst=r(Rse," to load the model weights."),Rse.forEach(t),Yst=i(Zy),T(nA.$$.fragment,Zy),Zy.forEach(t),Kst=i(Bi),ot=n(Bi,"DIV",{class:!0});var Ii=s(ot);T(mS.$$.fragment,Ii),Zst=i(Ii),Fye=n(Ii,"P",{});var ooa=s(Fye);elt=r(ooa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ooa.forEach(t),olt=i(Ii),qn=n(Ii,"P",{});var e8=s(qn);rlt=r(e8,"The model class to instantiate is selected based on the "),Tye=n(e8,"CODE",{});var roa=s(Tye);tlt=r(roa,"model_type"),roa.forEach(t),alt=r(e8,` property of the config object (either
passed as an argument or loaded from `),Mye=n(e8,"CODE",{});var toa=s(Mye);nlt=r(toa,"pretrained_model_name_or_path"),toa.forEach(t),slt=r(e8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eye=n(e8,"CODE",{});var aoa=s(Eye);llt=r(aoa,"pretrained_model_name_or_path"),aoa.forEach(t),ilt=r(e8,":"),e8.forEach(t),dlt=i(Ii),Xe=n(Ii,"UL",{});var Co=s(Xe);sA=n(Co,"LI",{});var EQe=s(sA);Cye=n(EQe,"STRONG",{});var noa=s(Cye);clt=r(noa,"albert"),noa.forEach(t),flt=r(EQe," \u2014 "),gae=n(EQe,"A",{href:!0});var soa=s(gae);mlt=r(soa,"FlaxAlbertForTokenClassification"),soa.forEach(t),glt=r(EQe," (ALBERT model)"),EQe.forEach(t),hlt=i(Co),lA=n(Co,"LI",{});var CQe=s(lA);wye=n(CQe,"STRONG",{});var loa=s(wye);plt=r(loa,"bert"),loa.forEach(t),_lt=r(CQe," \u2014 "),hae=n(CQe,"A",{href:!0});var ioa=s(hae);ult=r(ioa,"FlaxBertForTokenClassification"),ioa.forEach(t),blt=r(CQe," (BERT model)"),CQe.forEach(t),vlt=i(Co),iA=n(Co,"LI",{});var wQe=s(iA);Aye=n(wQe,"STRONG",{});var doa=s(Aye);Flt=r(doa,"big_bird"),doa.forEach(t),Tlt=r(wQe," \u2014 "),pae=n(wQe,"A",{href:!0});var coa=s(pae);Mlt=r(coa,"FlaxBigBirdForTokenClassification"),coa.forEach(t),Elt=r(wQe," (BigBird model)"),wQe.forEach(t),Clt=i(Co),dA=n(Co,"LI",{});var AQe=s(dA);Lye=n(AQe,"STRONG",{});var foa=s(Lye);wlt=r(foa,"distilbert"),foa.forEach(t),Alt=r(AQe," \u2014 "),_ae=n(AQe,"A",{href:!0});var moa=s(_ae);Llt=r(moa,"FlaxDistilBertForTokenClassification"),moa.forEach(t),ylt=r(AQe," (DistilBERT model)"),AQe.forEach(t),xlt=i(Co),cA=n(Co,"LI",{});var LQe=s(cA);yye=n(LQe,"STRONG",{});var goa=s(yye);$lt=r(goa,"electra"),goa.forEach(t),klt=r(LQe," \u2014 "),uae=n(LQe,"A",{href:!0});var hoa=s(uae);Slt=r(hoa,"FlaxElectraForTokenClassification"),hoa.forEach(t),Rlt=r(LQe," (ELECTRA model)"),LQe.forEach(t),Plt=i(Co),fA=n(Co,"LI",{});var yQe=s(fA);xye=n(yQe,"STRONG",{});var poa=s(xye);Blt=r(poa,"roberta"),poa.forEach(t),Ilt=r(yQe," \u2014 "),bae=n(yQe,"A",{href:!0});var _oa=s(bae);Nlt=r(_oa,"FlaxRobertaForTokenClassification"),_oa.forEach(t),qlt=r(yQe," (RoBERTa model)"),yQe.forEach(t),jlt=i(Co),mA=n(Co,"LI",{});var xQe=s(mA);$ye=n(xQe,"STRONG",{});var uoa=s($ye);Dlt=r(uoa,"roformer"),uoa.forEach(t),Glt=r(xQe," \u2014 "),vae=n(xQe,"A",{href:!0});var boa=s(vae);Olt=r(boa,"FlaxRoFormerForTokenClassification"),boa.forEach(t),Vlt=r(xQe," (RoFormer model)"),xQe.forEach(t),Xlt=i(Co),gA=n(Co,"LI",{});var $Qe=s(gA);kye=n($Qe,"STRONG",{});var voa=s(kye);zlt=r(voa,"xlm-roberta"),voa.forEach(t),Wlt=r($Qe," \u2014 "),Fae=n($Qe,"A",{href:!0});var Foa=s(Fae);Qlt=r(Foa,"FlaxXLMRobertaForTokenClassification"),Foa.forEach(t),Ult=r($Qe," (XLM-RoBERTa model)"),$Qe.forEach(t),Co.forEach(t),Hlt=i(Ii),T(hA.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),XHe=i(f),Of=n(f,"H2",{class:!0});var aKe=s(Of);pA=n(aKe,"A",{id:!0,class:!0,href:!0});var Toa=s(pA);Sye=n(Toa,"SPAN",{});var Moa=s(Sye);T(gS.$$.fragment,Moa),Moa.forEach(t),Toa.forEach(t),Jlt=i(aKe),Rye=n(aKe,"SPAN",{});var Eoa=s(Rye);Ylt=r(Eoa,"FlaxAutoModelForMultipleChoice"),Eoa.forEach(t),aKe.forEach(t),zHe=i(f),Lr=n(f,"DIV",{class:!0});var Ni=s(Lr);T(hS.$$.fragment,Ni),Klt=i(Ni),Vf=n(Ni,"P",{});var Pse=s(Vf);Zlt=r(Pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tae=n(Pse,"A",{href:!0});var Coa=s(Tae);eit=r(Coa,"from_pretrained()"),Coa.forEach(t),oit=r(Pse," class method or the "),Mae=n(Pse,"A",{href:!0});var woa=s(Mae);rit=r(woa,"from_config()"),woa.forEach(t),tit=r(Pse,` class
method.`),Pse.forEach(t),ait=i(Ni),pS=n(Ni,"P",{});var nKe=s(pS);nit=r(nKe,"This class cannot be instantiated directly using "),Pye=n(nKe,"CODE",{});var Aoa=s(Pye);sit=r(Aoa,"__init__()"),Aoa.forEach(t),lit=r(nKe," (throws an error)."),nKe.forEach(t),iit=i(Ni),la=n(Ni,"DIV",{class:!0});var o8=s(la);T(_S.$$.fragment,o8),dit=i(o8),Bye=n(o8,"P",{});var Loa=s(Bye);cit=r(Loa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Loa.forEach(t),fit=i(o8),Xf=n(o8,"P",{});var Bse=s(Xf);mit=r(Bse,`Note:
Loading a model from its configuration file does `),Iye=n(Bse,"STRONG",{});var yoa=s(Iye);git=r(yoa,"not"),yoa.forEach(t),hit=r(Bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eae=n(Bse,"A",{href:!0});var xoa=s(Eae);pit=r(xoa,"from_pretrained()"),xoa.forEach(t),_it=r(Bse," to load the model weights."),Bse.forEach(t),uit=i(o8),T(_A.$$.fragment,o8),o8.forEach(t),bit=i(Ni),rt=n(Ni,"DIV",{class:!0});var qi=s(rt);T(uS.$$.fragment,qi),vit=i(qi),Nye=n(qi,"P",{});var $oa=s(Nye);Fit=r($oa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$oa.forEach(t),Tit=i(qi),jn=n(qi,"P",{});var r8=s(jn);Mit=r(r8,"The model class to instantiate is selected based on the "),qye=n(r8,"CODE",{});var koa=s(qye);Eit=r(koa,"model_type"),koa.forEach(t),Cit=r(r8,` property of the config object (either
passed as an argument or loaded from `),jye=n(r8,"CODE",{});var Soa=s(jye);wit=r(Soa,"pretrained_model_name_or_path"),Soa.forEach(t),Ait=r(r8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dye=n(r8,"CODE",{});var Roa=s(Dye);Lit=r(Roa,"pretrained_model_name_or_path"),Roa.forEach(t),yit=r(r8,":"),r8.forEach(t),xit=i(qi),ze=n(qi,"UL",{});var wo=s(ze);uA=n(wo,"LI",{});var kQe=s(uA);Gye=n(kQe,"STRONG",{});var Poa=s(Gye);$it=r(Poa,"albert"),Poa.forEach(t),kit=r(kQe," \u2014 "),Cae=n(kQe,"A",{href:!0});var Boa=s(Cae);Sit=r(Boa,"FlaxAlbertForMultipleChoice"),Boa.forEach(t),Rit=r(kQe," (ALBERT model)"),kQe.forEach(t),Pit=i(wo),bA=n(wo,"LI",{});var SQe=s(bA);Oye=n(SQe,"STRONG",{});var Ioa=s(Oye);Bit=r(Ioa,"bert"),Ioa.forEach(t),Iit=r(SQe," \u2014 "),wae=n(SQe,"A",{href:!0});var Noa=s(wae);Nit=r(Noa,"FlaxBertForMultipleChoice"),Noa.forEach(t),qit=r(SQe," (BERT model)"),SQe.forEach(t),jit=i(wo),vA=n(wo,"LI",{});var RQe=s(vA);Vye=n(RQe,"STRONG",{});var qoa=s(Vye);Dit=r(qoa,"big_bird"),qoa.forEach(t),Git=r(RQe," \u2014 "),Aae=n(RQe,"A",{href:!0});var joa=s(Aae);Oit=r(joa,"FlaxBigBirdForMultipleChoice"),joa.forEach(t),Vit=r(RQe," (BigBird model)"),RQe.forEach(t),Xit=i(wo),FA=n(wo,"LI",{});var PQe=s(FA);Xye=n(PQe,"STRONG",{});var Doa=s(Xye);zit=r(Doa,"distilbert"),Doa.forEach(t),Wit=r(PQe," \u2014 "),Lae=n(PQe,"A",{href:!0});var Goa=s(Lae);Qit=r(Goa,"FlaxDistilBertForMultipleChoice"),Goa.forEach(t),Uit=r(PQe," (DistilBERT model)"),PQe.forEach(t),Hit=i(wo),TA=n(wo,"LI",{});var BQe=s(TA);zye=n(BQe,"STRONG",{});var Ooa=s(zye);Jit=r(Ooa,"electra"),Ooa.forEach(t),Yit=r(BQe," \u2014 "),yae=n(BQe,"A",{href:!0});var Voa=s(yae);Kit=r(Voa,"FlaxElectraForMultipleChoice"),Voa.forEach(t),Zit=r(BQe," (ELECTRA model)"),BQe.forEach(t),edt=i(wo),MA=n(wo,"LI",{});var IQe=s(MA);Wye=n(IQe,"STRONG",{});var Xoa=s(Wye);odt=r(Xoa,"roberta"),Xoa.forEach(t),rdt=r(IQe," \u2014 "),xae=n(IQe,"A",{href:!0});var zoa=s(xae);tdt=r(zoa,"FlaxRobertaForMultipleChoice"),zoa.forEach(t),adt=r(IQe," (RoBERTa model)"),IQe.forEach(t),ndt=i(wo),EA=n(wo,"LI",{});var NQe=s(EA);Qye=n(NQe,"STRONG",{});var Woa=s(Qye);sdt=r(Woa,"roformer"),Woa.forEach(t),ldt=r(NQe," \u2014 "),$ae=n(NQe,"A",{href:!0});var Qoa=s($ae);idt=r(Qoa,"FlaxRoFormerForMultipleChoice"),Qoa.forEach(t),ddt=r(NQe," (RoFormer model)"),NQe.forEach(t),cdt=i(wo),CA=n(wo,"LI",{});var qQe=s(CA);Uye=n(qQe,"STRONG",{});var Uoa=s(Uye);fdt=r(Uoa,"xlm-roberta"),Uoa.forEach(t),mdt=r(qQe," \u2014 "),kae=n(qQe,"A",{href:!0});var Hoa=s(kae);gdt=r(Hoa,"FlaxXLMRobertaForMultipleChoice"),Hoa.forEach(t),hdt=r(qQe," (XLM-RoBERTa model)"),qQe.forEach(t),wo.forEach(t),pdt=i(qi),T(wA.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),WHe=i(f),zf=n(f,"H2",{class:!0});var sKe=s(zf);AA=n(sKe,"A",{id:!0,class:!0,href:!0});var Joa=s(AA);Hye=n(Joa,"SPAN",{});var Yoa=s(Hye);T(bS.$$.fragment,Yoa),Yoa.forEach(t),Joa.forEach(t),_dt=i(sKe),Jye=n(sKe,"SPAN",{});var Koa=s(Jye);udt=r(Koa,"FlaxAutoModelForNextSentencePrediction"),Koa.forEach(t),sKe.forEach(t),QHe=i(f),yr=n(f,"DIV",{class:!0});var ji=s(yr);T(vS.$$.fragment,ji),bdt=i(ji),Wf=n(ji,"P",{});var Ise=s(Wf);vdt=r(Ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sae=n(Ise,"A",{href:!0});var Zoa=s(Sae);Fdt=r(Zoa,"from_pretrained()"),Zoa.forEach(t),Tdt=r(Ise," class method or the "),Rae=n(Ise,"A",{href:!0});var era=s(Rae);Mdt=r(era,"from_config()"),era.forEach(t),Edt=r(Ise,` class
method.`),Ise.forEach(t),Cdt=i(ji),FS=n(ji,"P",{});var lKe=s(FS);wdt=r(lKe,"This class cannot be instantiated directly using "),Yye=n(lKe,"CODE",{});var ora=s(Yye);Adt=r(ora,"__init__()"),ora.forEach(t),Ldt=r(lKe," (throws an error)."),lKe.forEach(t),ydt=i(ji),ia=n(ji,"DIV",{class:!0});var t8=s(ia);T(TS.$$.fragment,t8),xdt=i(t8),Kye=n(t8,"P",{});var rra=s(Kye);$dt=r(rra,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rra.forEach(t),kdt=i(t8),Qf=n(t8,"P",{});var Nse=s(Qf);Sdt=r(Nse,`Note:
Loading a model from its configuration file does `),Zye=n(Nse,"STRONG",{});var tra=s(Zye);Rdt=r(tra,"not"),tra.forEach(t),Pdt=r(Nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pae=n(Nse,"A",{href:!0});var ara=s(Pae);Bdt=r(ara,"from_pretrained()"),ara.forEach(t),Idt=r(Nse," to load the model weights."),Nse.forEach(t),Ndt=i(t8),T(LA.$$.fragment,t8),t8.forEach(t),qdt=i(ji),tt=n(ji,"DIV",{class:!0});var Di=s(tt);T(MS.$$.fragment,Di),jdt=i(Di),e8e=n(Di,"P",{});var nra=s(e8e);Ddt=r(nra,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nra.forEach(t),Gdt=i(Di),Dn=n(Di,"P",{});var a8=s(Dn);Odt=r(a8,"The model class to instantiate is selected based on the "),o8e=n(a8,"CODE",{});var sra=s(o8e);Vdt=r(sra,"model_type"),sra.forEach(t),Xdt=r(a8,` property of the config object (either
passed as an argument or loaded from `),r8e=n(a8,"CODE",{});var lra=s(r8e);zdt=r(lra,"pretrained_model_name_or_path"),lra.forEach(t),Wdt=r(a8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t8e=n(a8,"CODE",{});var ira=s(t8e);Qdt=r(ira,"pretrained_model_name_or_path"),ira.forEach(t),Udt=r(a8,":"),a8.forEach(t),Hdt=i(Di),a8e=n(Di,"UL",{});var dra=s(a8e);yA=n(dra,"LI",{});var jQe=s(yA);n8e=n(jQe,"STRONG",{});var cra=s(n8e);Jdt=r(cra,"bert"),cra.forEach(t),Ydt=r(jQe," \u2014 "),Bae=n(jQe,"A",{href:!0});var fra=s(Bae);Kdt=r(fra,"FlaxBertForNextSentencePrediction"),fra.forEach(t),Zdt=r(jQe," (BERT model)"),jQe.forEach(t),dra.forEach(t),ect=i(Di),T(xA.$$.fragment,Di),Di.forEach(t),ji.forEach(t),UHe=i(f),Uf=n(f,"H2",{class:!0});var iKe=s(Uf);$A=n(iKe,"A",{id:!0,class:!0,href:!0});var mra=s($A);s8e=n(mra,"SPAN",{});var gra=s(s8e);T(ES.$$.fragment,gra),gra.forEach(t),mra.forEach(t),oct=i(iKe),l8e=n(iKe,"SPAN",{});var hra=s(l8e);rct=r(hra,"FlaxAutoModelForImageClassification"),hra.forEach(t),iKe.forEach(t),HHe=i(f),xr=n(f,"DIV",{class:!0});var Gi=s(xr);T(CS.$$.fragment,Gi),tct=i(Gi),Hf=n(Gi,"P",{});var qse=s(Hf);act=r(qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Iae=n(qse,"A",{href:!0});var pra=s(Iae);nct=r(pra,"from_pretrained()"),pra.forEach(t),sct=r(qse," class method or the "),Nae=n(qse,"A",{href:!0});var _ra=s(Nae);lct=r(_ra,"from_config()"),_ra.forEach(t),ict=r(qse,` class
method.`),qse.forEach(t),dct=i(Gi),wS=n(Gi,"P",{});var dKe=s(wS);cct=r(dKe,"This class cannot be instantiated directly using "),i8e=n(dKe,"CODE",{});var ura=s(i8e);fct=r(ura,"__init__()"),ura.forEach(t),mct=r(dKe," (throws an error)."),dKe.forEach(t),gct=i(Gi),da=n(Gi,"DIV",{class:!0});var n8=s(da);T(AS.$$.fragment,n8),hct=i(n8),d8e=n(n8,"P",{});var bra=s(d8e);pct=r(bra,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bra.forEach(t),_ct=i(n8),Jf=n(n8,"P",{});var jse=s(Jf);uct=r(jse,`Note:
Loading a model from its configuration file does `),c8e=n(jse,"STRONG",{});var vra=s(c8e);bct=r(vra,"not"),vra.forEach(t),vct=r(jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qae=n(jse,"A",{href:!0});var Fra=s(qae);Fct=r(Fra,"from_pretrained()"),Fra.forEach(t),Tct=r(jse," to load the model weights."),jse.forEach(t),Mct=i(n8),T(kA.$$.fragment,n8),n8.forEach(t),Ect=i(Gi),at=n(Gi,"DIV",{class:!0});var Oi=s(at);T(LS.$$.fragment,Oi),Cct=i(Oi),f8e=n(Oi,"P",{});var Tra=s(f8e);wct=r(Tra,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tra.forEach(t),Act=i(Oi),Gn=n(Oi,"P",{});var s8=s(Gn);Lct=r(s8,"The model class to instantiate is selected based on the "),m8e=n(s8,"CODE",{});var Mra=s(m8e);yct=r(Mra,"model_type"),Mra.forEach(t),xct=r(s8,` property of the config object (either
passed as an argument or loaded from `),g8e=n(s8,"CODE",{});var Era=s(g8e);$ct=r(Era,"pretrained_model_name_or_path"),Era.forEach(t),kct=r(s8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=n(s8,"CODE",{});var Cra=s(h8e);Sct=r(Cra,"pretrained_model_name_or_path"),Cra.forEach(t),Rct=r(s8,":"),s8.forEach(t),Pct=i(Oi),yS=n(Oi,"UL",{});var cKe=s(yS);SA=n(cKe,"LI",{});var DQe=s(SA);p8e=n(DQe,"STRONG",{});var wra=s(p8e);Bct=r(wra,"beit"),wra.forEach(t),Ict=r(DQe," \u2014 "),jae=n(DQe,"A",{href:!0});var Ara=s(jae);Nct=r(Ara,"FlaxBeitForImageClassification"),Ara.forEach(t),qct=r(DQe," (BEiT model)"),DQe.forEach(t),jct=i(cKe),RA=n(cKe,"LI",{});var GQe=s(RA);_8e=n(GQe,"STRONG",{});var Lra=s(_8e);Dct=r(Lra,"vit"),Lra.forEach(t),Gct=r(GQe," \u2014 "),Dae=n(GQe,"A",{href:!0});var yra=s(Dae);Oct=r(yra,"FlaxViTForImageClassification"),yra.forEach(t),Vct=r(GQe," (ViT model)"),GQe.forEach(t),cKe.forEach(t),Xct=i(Oi),T(PA.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),JHe=i(f),Yf=n(f,"H2",{class:!0});var fKe=s(Yf);BA=n(fKe,"A",{id:!0,class:!0,href:!0});var xra=s(BA);u8e=n(xra,"SPAN",{});var $ra=s(u8e);T(xS.$$.fragment,$ra),$ra.forEach(t),xra.forEach(t),zct=i(fKe),b8e=n(fKe,"SPAN",{});var kra=s(b8e);Wct=r(kra,"FlaxAutoModelForVision2Seq"),kra.forEach(t),fKe.forEach(t),YHe=i(f),$r=n(f,"DIV",{class:!0});var Vi=s($r);T($S.$$.fragment,Vi),Qct=i(Vi),Kf=n(Vi,"P",{});var Dse=s(Kf);Uct=r(Dse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gae=n(Dse,"A",{href:!0});var Sra=s(Gae);Hct=r(Sra,"from_pretrained()"),Sra.forEach(t),Jct=r(Dse," class method or the "),Oae=n(Dse,"A",{href:!0});var Rra=s(Oae);Yct=r(Rra,"from_config()"),Rra.forEach(t),Kct=r(Dse,` class
method.`),Dse.forEach(t),Zct=i(Vi),kS=n(Vi,"P",{});var mKe=s(kS);eft=r(mKe,"This class cannot be instantiated directly using "),v8e=n(mKe,"CODE",{});var Pra=s(v8e);oft=r(Pra,"__init__()"),Pra.forEach(t),rft=r(mKe," (throws an error)."),mKe.forEach(t),tft=i(Vi),ca=n(Vi,"DIV",{class:!0});var l8=s(ca);T(SS.$$.fragment,l8),aft=i(l8),F8e=n(l8,"P",{});var Bra=s(F8e);nft=r(Bra,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bra.forEach(t),sft=i(l8),Zf=n(l8,"P",{});var Gse=s(Zf);lft=r(Gse,`Note:
Loading a model from its configuration file does `),T8e=n(Gse,"STRONG",{});var Ira=s(T8e);ift=r(Ira,"not"),Ira.forEach(t),dft=r(Gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vae=n(Gse,"A",{href:!0});var Nra=s(Vae);cft=r(Nra,"from_pretrained()"),Nra.forEach(t),fft=r(Gse," to load the model weights."),Gse.forEach(t),mft=i(l8),T(IA.$$.fragment,l8),l8.forEach(t),gft=i(Vi),nt=n(Vi,"DIV",{class:!0});var Xi=s(nt);T(RS.$$.fragment,Xi),hft=i(Xi),M8e=n(Xi,"P",{});var qra=s(M8e);pft=r(qra,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qra.forEach(t),_ft=i(Xi),On=n(Xi,"P",{});var i8=s(On);uft=r(i8,"The model class to instantiate is selected based on the "),E8e=n(i8,"CODE",{});var jra=s(E8e);bft=r(jra,"model_type"),jra.forEach(t),vft=r(i8,` property of the config object (either
passed as an argument or loaded from `),C8e=n(i8,"CODE",{});var Dra=s(C8e);Fft=r(Dra,"pretrained_model_name_or_path"),Dra.forEach(t),Tft=r(i8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=n(i8,"CODE",{});var Gra=s(w8e);Mft=r(Gra,"pretrained_model_name_or_path"),Gra.forEach(t),Eft=r(i8,":"),i8.forEach(t),Cft=i(Xi),A8e=n(Xi,"UL",{});var Ora=s(A8e);NA=n(Ora,"LI",{});var OQe=s(NA);L8e=n(OQe,"STRONG",{});var Vra=s(L8e);wft=r(Vra,"vision-encoder-decoder"),Vra.forEach(t),Aft=r(OQe," \u2014 "),Xae=n(OQe,"A",{href:!0});var Xra=s(Xae);Lft=r(Xra,"FlaxVisionEncoderDecoderModel"),Xra.forEach(t),yft=r(OQe," (Vision Encoder decoder model)"),OQe.forEach(t),Ora.forEach(t),xft=i(Xi),T(qA.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ena)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Xn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer"),c(Yi,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(lm,"id","extending-the-auto-classes"),c(lm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lm,"href","#extending-the-auto-classes"),c(Ki,"class","relative group"),c(dm,"id","transformers.AutoConfig"),c(dm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dm,"href","#transformers.AutoConfig"),c(Zi,"class","relative group"),c(mP,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(gP,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertConfig"),c(hP,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartConfig"),c(pP,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitConfig"),c(_P,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertConfig"),c(uP,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(bP,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdConfig"),c(vP,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(FP,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(TP,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(MP,"href","/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomConfig"),c(EP,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertConfig"),c(CP,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineConfig"),c(wP,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPConfig"),c(AP,"href","/docs/transformers/pr_17254/en/model_doc/codegen#transformers.CodeGenConfig"),c(LP,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertConfig"),c(yP,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextConfig"),c(xP,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLConfig"),c($P,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtConfig"),c(kP,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(SP,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(RP,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(PP,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaConfig"),c(BP,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(IP,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(NP,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTConfig"),c(qP,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrConfig"),c(jP,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertConfig"),c(DP,"href","/docs/transformers/pr_17254/en/model_doc/donut#transformers.DonutSwinConfig"),c(GP,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRConfig"),c(OP,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTConfig"),c(VP,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraConfig"),c(XP,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(zP,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertConfig"),c(WP,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaConfig"),c(QP,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetConfig"),c(UP,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTConfig"),c(HP,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelConfig"),c(JP,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNConfig"),c(YP,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Config"),c(KP,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ZP,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(eB,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJConfig"),c(oB,"href","/docs/transformers/pr_17254/en/model_doc/groupvit#transformers.GroupViTConfig"),c(rB,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertConfig"),c(tB,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertConfig"),c(aB,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(nB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(sB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(lB,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(iB,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDConfig"),c(dB,"href","/docs/transformers/pr_17254/en/model_doc/levit#transformers.LevitConfig"),c(cB,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerConfig"),c(fB,"href","/docs/transformers/pr_17254/en/model_doc/longt5#transformers.LongT5Config"),c(mB,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeConfig"),c(gB,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertConfig"),c(hB,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Config"),c(pB,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianConfig"),c(_B,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uB,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartConfig"),c(bB,"href","/docs/transformers/pr_17254/en/model_doc/mctct#transformers.MCTCTConfig"),c(vB,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(FB,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(TB,"href","/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(MB,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetConfig"),c(EB,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Config"),c(CB,"href","/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpConfig"),c(wB,"href","/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaConfig"),c(AB,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(LB,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(yB,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTConfig"),c(xB,"href","/docs/transformers/pr_17254/en/model_doc/owlvit#transformers.OwlViTConfig"),c($B,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusConfig"),c(kB,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverConfig"),c(SB,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartConfig"),c(RB,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(PB,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(BB,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(IB,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagConfig"),c(NB,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmConfig"),c(qB,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerConfig"),c(jB,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetConfig"),c(DB,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertConfig"),c(GB,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetConfig"),c(OB,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertConfig"),c(VB,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaConfig"),c(XB,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerConfig"),c(zB,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerConfig"),c(WB,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWConfig"),c(QB,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDConfig"),c(UB,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(HB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(JB,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(YB,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterConfig"),c(KB,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(ZB,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinConfig"),c(eI,"href","/docs/transformers/pr_17254/en/model_doc/swinv2#transformers.Swinv2Config"),c(oI,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Config"),c(rI,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasConfig"),c(tI,"href","/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(aI,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(nI,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRConfig"),c(sI,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(lI,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(iI,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanConfig"),c(dI,"href","/docs/transformers/pr_17254/en/model_doc/videomae#transformers.VideoMAEConfig"),c(cI,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltConfig"),c(fI,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(mI,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(gI,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(hI,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTConfig"),c(pI,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_I,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(uI,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(bI,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMConfig"),c(vI,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMConfig"),c(FI,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMConfig"),c(TI,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(MI,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(EI,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(CI,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetConfig"),c(wI,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosConfig"),c(AI,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"id","transformers.AutoTokenizer"),c(Ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ah,"href","#transformers.AutoTokenizer"),c(od,"class","relative group"),c(LI,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(yI,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(xI,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($I,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizer"),c(kI,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartTokenizerFast"),c(SI,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizer"),c(RI,"href","/docs/transformers/pr_17254/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(PI,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(BI,"href","/docs/transformers/pr_17254/en/model_doc/bartpho#transformers.BartphoTokenizerFast"),c(II,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(NI,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(qI,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(jI,"href","/docs/transformers/pr_17254/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(DI,"href","/docs/transformers/pr_17254/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(GI,"href","/docs/transformers/pr_17254/en/model_doc/bertweet#transformers.BertweetTokenizerFast"),c(OI,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(VI,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(XI,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(zI,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(QI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(UI,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(HI,"href","/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(JI,"href","/docs/transformers/pr_17254/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(YI,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizer"),c(KI,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(ZI,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineTokenizer"),c(eN,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizer"),c(oN,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(rN,"href","/docs/transformers/pr_17254/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(tN,"href","/docs/transformers/pr_17254/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(aN,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(nN,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(sN,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizer"),c(lN,"href","/docs/transformers/pr_17254/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(iN,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(dN,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cN,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fN,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizer"),c(mN,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(gN,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(hN,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(pN,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(_N,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(uN,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(bN,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(vN,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizer"),c(FN,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(TN,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(MN,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizer"),c(EN,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(CN,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(wN,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizer"),c(AN,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(LN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($N,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kN,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(SN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RN,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(PN,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizer"),c(BN,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(IN,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizer"),c(NN,"href","/docs/transformers/pr_17254/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(qN,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jN,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DN,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GN,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(ON,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(VN,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(XN,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(zN,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(WN,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(QN,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(UN,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(HN,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizer"),c(JN,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDTokenizerFast"),c(YN,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizer"),c(KN,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(ZN,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Tokenizer"),c(eq,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5TokenizerFast"),c(oq,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeTokenizer"),c(rq,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(tq,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(aq,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(nq,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianTokenizer"),c(sq,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizer"),c(lq,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(iq,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(dq,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(cq,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(fq,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(mq,"href","/docs/transformers/pr_17254/en/model_doc/mluke#transformers.MLukeTokenizer"),c(gq,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(hq,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(pq,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(_q,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(uq,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Tokenizer"),c(bq,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5TokenizerFast"),c(vq,"href","/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpTokenizer"),c(Fq,"href","/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(Tq,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(Mq,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(Eq,"href","/docs/transformers/pr_17254/en/model_doc/nllb#transformers.NllbTokenizer"),c(Cq,"href","/docs/transformers/pr_17254/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(wq,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(Aq,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lq,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(yq,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(xq,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($q,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizer"),c(kq,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Sq,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Rq,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Pq,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Bq,"href","/docs/transformers/pr_17254/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Iq,"href","/docs/transformers/pr_17254/en/model_doc/phobert#transformers.PhobertTokenizerFast"),c(Nq,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartTokenizer"),c(qq,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(jq,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(Dq,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(Gq,"href","/docs/transformers/pr_17254/en/model_doc/rag#transformers.RagTokenizer"),c(Oq,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizer"),c(Vq,"href","/docs/transformers/pr_17254/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Xq,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizer"),c(zq,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Wq,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Qq,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Uq,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Hq,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Jq,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Yq,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Kq,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Zq,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(ej,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(oj,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(rj,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizer"),c(tj,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(aj,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(nj,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(sj,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Tokenizer"),c(lj,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5TokenizerFast"),c(ij,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasTokenizer"),c(dj,"href","/docs/transformers/pr_17254/en/model_doc/tapex#transformers.TapexTokenizer"),c(cj,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(fj,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(mj,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(gj,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizer"),c(hj,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertTokenizerFast"),c(pj,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_j,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(uj,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(bj,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizer"),c(vj,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Fj,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMTokenizer"),c(Tj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Mj,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Ej,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Cj,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wj,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Aj,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Lj,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(yj,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizer"),c(xj,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoFeatureExtractor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoFeatureExtractor"),c(rd,"class","relative group"),c($j,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(kj,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Sj,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Rj,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Pj,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Bj,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Ij,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Nj,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(qj,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(jj,"href","/docs/transformers/pr_17254/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Dj,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(Gj,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(Oj,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Vj,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Xj,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zj,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Wj,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Qj,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Uj,"href","/docs/transformers/pr_17254/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Hj,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_17254/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_17254/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(eD,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(oD,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rD,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tD,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(aD,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nD,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sD,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lD,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iD,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dD,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(cD,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fD,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(mD,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gD,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hD,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qp,"id","transformers.AutoProcessor"),c(Qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qp,"href","#transformers.AutoProcessor"),c(td,"class","relative group"),c(pD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(_D,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPProcessor"),c(uD,"href","/docs/transformers/pr_17254/en/model_doc/donut#transformers.DonutProcessor"),c(bD,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaProcessor"),c(vD,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPProcessor"),c(FD,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(TD,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(MD,"href","/docs/transformers/pr_17254/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(ED,"href","/docs/transformers/pr_17254/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(CD,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wD,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AD,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(LD,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(yD,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRProcessor"),c(xD,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($D,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kD,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltProcessor"),c(SD,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(RD,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PD,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BD,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u_,"id","transformers.AutoModel"),c(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u_,"href","#transformers.AutoModel"),c(nd,"class","relative group"),c(ID,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jD,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertModel"),c(DD,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartModel"),c(GD,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitModel"),c(OD,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertModel"),c(VD,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(XD,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdModel"),c(zD,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(WD,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(QD,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(UD,"href","/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomModel"),c(HD,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertModel"),c(JD,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineModel"),c(YD,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.CLIPModel"),c(KD,"href","/docs/transformers/pr_17254/en/model_doc/codegen#transformers.CodeGenModel"),c(ZD,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertModel"),c(eG,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextModel"),c(oG,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLModel"),c(rG,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtModel"),c(tG,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(aG,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(nG,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(sG,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaModel"),c(lG,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(iG,"href","/docs/transformers/pr_17254/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(dG,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTModel"),c(cG,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrModel"),c(fG,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertModel"),c(mG,"href","/docs/transformers/pr_17254/en/model_doc/donut#transformers.DonutSwinModel"),c(gG,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(hG,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTModel"),c(pG,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraModel"),c(_G,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertModel"),c(uG,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaModel"),c(bG,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetModel"),c(vG,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTModel"),c(FG,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelModel"),c(TG,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelBaseModel"),c(MG,"href","/docs/transformers/pr_17254/en/model_doc/glpn#transformers.GLPNModel"),c(EG,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2Model"),c(CG,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(wG,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(AG,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJModel"),c(LG,"href","/docs/transformers/pr_17254/en/model_doc/groupvit#transformers.GroupViTModel"),c(yG,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertModel"),c(xG,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertModel"),c($G,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kG,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(SG,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(RG,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(PG,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDModel"),c(BG,"href","/docs/transformers/pr_17254/en/model_doc/levit#transformers.LevitModel"),c(IG,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerModel"),c(NG,"href","/docs/transformers/pr_17254/en/model_doc/longt5#transformers.LongT5Model"),c(qG,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeModel"),c(jG,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertModel"),c(DG,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model"),c(GG,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianModel"),c(OG,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerModel"),c(VG,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartModel"),c(XG,"href","/docs/transformers/pr_17254/en/model_doc/mctct#transformers.MCTCTModel"),c(zG,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(WG,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertModel"),c(QG,"href","/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTModel"),c(UG,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetModel"),c(HG,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5Model"),c(JG,"href","/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpModel"),c(YG,"href","/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaModel"),c(KG,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100Model"),c(ZG,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerModel"),c(eO,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(oO,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTModel"),c(rO,"href","/docs/transformers/pr_17254/en/model_doc/owlvit#transformers.OwlViTModel"),c(tO,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusModel"),c(aO,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverModel"),c(nO,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartModel"),c(sO,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerModel"),c(lO,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(iO,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertModel"),c(dO,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModel"),c(cO,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetModel"),c(fO,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertModel"),c(mO,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetModel"),c(gO,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(hO,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaModel"),c(pO,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerModel"),c(_O,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerModel"),c(uO,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWModel"),c(bO,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDModel"),c(vO,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(FO,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterModel"),c(TO,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(MO,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinModel"),c(EO,"href","/docs/transformers/pr_17254/en/model_doc/swinv2#transformers.Swinv2Model"),c(CO,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5Model"),c(wO,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasModel"),c(AO,"href","/docs/transformers/pr_17254/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(LO,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(yO,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechModel"),c(xO,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c($O,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanModel"),c(kO,"href","/docs/transformers/pr_17254/en/model_doc/videomae#transformers.VideoMAEModel"),c(SO,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltModel"),c(RO,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(PO,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertModel"),c(BO,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTModel"),c(IO,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(NO,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(qO,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(jO,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMModel"),c(DO,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMModel"),c(GO,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMModel"),c(OO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(VO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(XO,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(zO,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetModel"),c(WO,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosModel"),c(QO,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y2,"id","transformers.AutoModelForPreTraining"),c(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y2,"href","#transformers.AutoModelForPreTraining"),c(id,"class","relative group"),c(UO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForPreTraining"),c(KO,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZO,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForPreTraining"),c(eV,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(oV,"href","/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomForCausalLM"),c(rV,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tV,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aV,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(nV,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(sV,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(lV,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(iV,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForPreTraining"),c(dV,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(cV,"href","/docs/transformers/pr_17254/en/model_doc/flava#transformers.FlavaForPreTraining"),c(fV,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForPreTraining"),c(mV,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(gV,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(hV,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(pV,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(_V,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uV,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bV,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForMaskedLM"),c(vV,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(FV,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(TV,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(MV,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(EV,"href","/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(CV,"href","/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(wV,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AV,"href","/docs/transformers/pr_17254/en/model_doc/retribert#transformers.RetriBertModel"),c(LV,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yV,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(xV,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($V,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(SV,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(RV,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(PV,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(BV,"href","/docs/transformers/pr_17254/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(IV,"href","/docs/transformers/pr_17254/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(NV,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(qV,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(jV,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(DV,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(OV,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(VV,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w1,"id","transformers.AutoModelForCausalLM"),c(w1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w1,"href","#transformers.AutoModelForCausalLM"),c(fd,"class","relative group"),c(XV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForCausalLM"),c(UV,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertLMHeadModel"),c(HV,"href","/docs/transformers/pr_17254/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(JV,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(YV,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(KV,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(ZV,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(eX,"href","/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomForCausalLM"),c(oX,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(rX,"href","/docs/transformers/pr_17254/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(tX,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(nX,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForCausalLM"),c(sX,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(lX,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(iX,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(dX,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(cX,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianForCausalLM"),c(fX,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForCausalLM"),c(mX,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(gX,"href","/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForCausalLM"),c(hX,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pX,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForCausalLM"),c(_X,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(uX,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(bX,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(vX,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(FX,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(TX,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(MX,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(EX,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(CX,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(wX,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(AX,"href","/docs/transformers/pr_17254/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(LX,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(yX,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xX,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c($X,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(kX,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(SX,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.AutoModelForMaskedLM"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.AutoModelForMaskedLM"),c(hd,"class","relative group"),c(RX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BX,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(NX,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qX,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMaskedLM"),c(jX,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(DX,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(GX,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(OX,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(VX,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(XX,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(zX,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(WX,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(QX,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(UX,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(HX,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(JX,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(YX,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(KX,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ZX,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForMaskedLM"),c(ez,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oz,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(rz,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(tz,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(az,"href","/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(nz,"href","/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(sz,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(lz,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(iz,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(dz,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(cz,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(fz,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(mz,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(gz,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(hz,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(pz,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_z,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uz,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bz,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForSeq2SeqLM"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForSeq2SeqLM"),c(ud,"class","relative group"),c(vz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Ez,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Cz,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(wz,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Az,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Lz,"href","/docs/transformers/pr_17254/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(xz,"href","/docs/transformers/pr_17254/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c($z,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(kz,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.MarianMTModel"),c(Sz,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Rz,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Bz,"href","/docs/transformers/pr_17254/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Iz,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Nz,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(qz,"href","/docs/transformers/pr_17254/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(jz,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Dz,"href","/docs/transformers/pr_17254/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForSequenceClassification"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForSequenceClassification"),c(Fd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(zz,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(oW,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(pW,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForSequenceClassification"),c(_W,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(uW,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17254/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c($W,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForMultipleChoice"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForMultipleChoice"),c(Ed,"class","relative group"),c(OW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(WW,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForMultipleChoice"),c(QW,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(UW,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(HW,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(JW,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(KW,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(eQ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(oQ,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(rQ,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(tQ,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(aQ,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(nQ,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(sQ,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(lQ,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(iQ,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(dQ,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(cQ,"href","/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(fQ,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(mQ,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(gQ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(hQ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(pQ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(_Q,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(uQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(bQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(vQ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(FQ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(TQ,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.AutoModelForNextSentencePrediction"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ad,"class","relative group"),c(MQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(AQ,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(LQ,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(yQ,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(xQ,"href","/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c($Q,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.AutoModelForTokenClassification"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.AutoModelForTokenClassification"),c(xd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(BQ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForTokenClassification"),c(IQ,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(NQ,"href","/docs/transformers/pr_17254/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(qQ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(jQ,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForTokenClassification"),c(DQ,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(GQ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(OQ,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(VQ,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(XQ,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(zQ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(WQ,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(QQ,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(UQ,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(HQ,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(JQ,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(YQ,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(KQ,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(eU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(oU,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForTokenClassification"),c(rU,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(tU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(aU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(nU,"href","/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(sU,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(lU,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(iU,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(dU,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(cU,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(fU,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(mU,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(gU,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(hU,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(pU,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(_U,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForQuestionAnswering"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForQuestionAnswering"),c(Sd,"class","relative group"),c(uU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_17254/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_17254/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c($U,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(PU,"href","/docs/transformers/pr_17254/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17254/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_17254/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17254/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17254/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17254/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_17254/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17254/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_17254/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_17254/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_17254/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_17254/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(nH,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(iH,"href","/docs/transformers/pr_17254/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForTableQuestionAnswering"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Bd,"class","relative group"),c(dH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForImageClassification"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForImageClassification"),c(qd,"class","relative group"),c(gH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForImageClassification"),c(uH,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(bH,"href","/docs/transformers/pr_17254/en/model_doc/cvt#transformers.CvtForImageClassification"),c(vH,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(FH,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassification"),c(TH,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(MH,"href","/docs/transformers/pr_17254/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(EH,"href","/docs/transformers/pr_17254/en/model_doc/levit#transformers.LevitForImageClassification"),c(CH,"href","/docs/transformers/pr_17254/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(wH,"href","/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(AH,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(LH,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(yH,"href","/docs/transformers/pr_17254/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(xH,"href","/docs/transformers/pr_17254/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c($H,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(kH,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(SH,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(RH,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForImageClassification"),c(PH,"href","/docs/transformers/pr_17254/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(BH,"href","/docs/transformers/pr_17254/en/model_doc/van#transformers.VanForImageClassification"),c(IH,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.AutoModelForVideoClassification"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.AutoModelForVideoClassification"),c(Gd,"class","relative group"),c(NH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_17254/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.AutoModelForVision2Seq"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.AutoModelForVision2Seq"),c(Xd,"class","relative group"),c(GH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForVisualQuestionAnswering"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Qd,"class","relative group"),c(zH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17254/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForAudioClassification"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForAudioClassification"),c(Jd,"class","relative group"),c(HH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(aJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(nJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(sJ,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForAudioFrameClassification"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForAudioFrameClassification"),c(Zd,"class","relative group"),c(lJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(fJ,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(mJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(gJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(hJ,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n7,"id","transformers.AutoModelForCTC"),c(n7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n7,"href","#transformers.AutoModelForCTC"),c(rc,"class","relative group"),c(pJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(vJ,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.HubertForCTC"),c(FJ,"href","/docs/transformers/pr_17254/en/model_doc/mctct#transformers.MCTCTForCTC"),c(TJ,"href","/docs/transformers/pr_17254/en/model_doc/sew#transformers.SEWForCTC"),c(MJ,"href","/docs/transformers/pr_17254/en/model_doc/sew-d#transformers.SEWDForCTC"),c(EJ,"href","/docs/transformers/pr_17254/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(CJ,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(wJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(AJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(LJ,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(nc,"class","relative group"),c(yJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_17254/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(SJ,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w7,"id","transformers.AutoModelForAudioXVector"),c(w7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w7,"href","#transformers.AutoModelForAudioXVector"),c(ic,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(NJ,"href","/docs/transformers/pr_17254/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(qJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(jJ,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(DJ,"href","/docs/transformers/pr_17254/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.AutoModelForMaskedImageModeling"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.AutoModelForMaskedImageModeling"),c(fc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(zJ,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(WJ,"href","/docs/transformers/pr_17254/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(QJ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O7,"id","transformers.AutoModelForObjectDetection"),c(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O7,"href","#transformers.AutoModelForObjectDetection"),c(hc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForObjectDetection"),c(KJ,"href","/docs/transformers/pr_17254/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U7,"id","transformers.AutoModelForImageSegmentation"),c(U7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U7,"href","#transformers.AutoModelForImageSegmentation"),c(uc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17254/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z7,"id","transformers.AutoModelForSemanticSegmentation"),c(Z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Fc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(lY,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(iY,"href","/docs/transformers/pr_17254/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(dY,"href","/docs/transformers/pr_17254/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(cY,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.AutoModelForInstanceSegmentation"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ec,"class","relative group"),c(fY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/pr_17254/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModel"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModel"),c(Ac,"class","relative group"),c(pY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertModel"),c(vY,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartModel"),c(FY,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertModel"),c(TY,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MY,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EY,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertModel"),c(CY,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.TFCLIPModel"),c(wY,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertModel"),c(AY,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextModel"),c(LY,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLModel"),c(yY,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xY,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaModel"),c($Y,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kY,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.TFDeiTModel"),c(SY,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(RY,"href","/docs/transformers/pr_17254/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(PY,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraModel"),c(BY,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(IY,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelModel"),c(NY,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(qY,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2Model"),c(jY,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJModel"),c(DY,"href","/docs/transformers/pr_17254/en/model_doc/hubert#transformers.TFHubertModel"),c(GY,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(OY,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDModel"),c(VY,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerModel"),c(XY,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertModel"),c(zY,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianModel"),c(WY,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartModel"),c(QY,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(UY,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetModel"),c(HY,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5Model"),c(JY,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(YY,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.TFOPTModel"),c(KY,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusModel"),c(ZY,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.TFRegNetModel"),c(eK,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertModel"),c(oK,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.TFResNetModel"),c(rK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaModel"),c(tK,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerModel"),c(aK,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.TFSegformerModel"),c(nK,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(sK,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinModel"),c(lK,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5Model"),c(iK,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasModel"),c(dK,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(cK,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTModel"),c(fK,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(mK,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(gK,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMModel"),c(hK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(pK,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.TFAutoModelForPreTraining"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.TFAutoModelForPreTraining"),c(xc,"class","relative group"),c(_K,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vK,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(FK,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(TK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForPreTraining"),c(MK,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EK,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(CK,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wK,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(AK,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(LK,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(yK,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(xK,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($K,"href","/docs/transformers/pr_17254/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(kK,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(SK,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RK,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(PK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BK,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(IK,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NK,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qK,"href","/docs/transformers/pr_17254/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(jK,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(DK,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(GK,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForCausalLM"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForCausalLM"),c(Sc,"class","relative group"),c(OK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(WK,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(QK,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UK,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HK,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(JK,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YK,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(KK,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(ZK,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(eZ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(oZ,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(rZ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tZ,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.TFAutoModelForImageClassification"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.TFAutoModelForImageClassification"),c(Bc,"class","relative group"),c(aZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lZ,"href","/docs/transformers/pr_17254/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(iZ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(dZ,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(cZ,"href","/docs/transformers/pr_17254/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(fZ,"href","/docs/transformers/pr_17254/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(mZ,"href","/docs/transformers/pr_17254/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(gZ,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(hZ,"href","/docs/transformers/pr_17254/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(pZ,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.TFAutoModelForSemanticSegmentation"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(qc,"class","relative group"),c(_Z,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vZ,"href","/docs/transformers/pr_17254/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(FZ,"href","/docs/transformers/pr_17254/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForMaskedLM"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForMaskedLM"),c(Gc,"class","relative group"),c(TZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(AZ,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LZ,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(yZ,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(xZ,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c($Z,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kZ,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(SZ,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RZ,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(PZ,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BZ,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(IZ,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(NZ,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qZ,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(jZ,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DZ,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(GZ,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OZ,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VZ,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Xc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WZ,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QZ,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(YZ,"href","/docs/transformers/pr_17254/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(KZ,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.TFMarianMTModel"),c(ZZ,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(oee,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(ree,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.TFAutoModelForSequenceClassification"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.TFAutoModelForSequenceClassification"),c(Qc,"class","relative group"),c(tee,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aee,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nee,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(see,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(lee,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(iee,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(dee,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(cee,"href","/docs/transformers/pr_17254/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(fee,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(mee,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(gee,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(hee,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(pee,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(uee,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(bee,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(vee,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Fee,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Mee,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Eee,"href","/docs/transformers/pr_17254/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Cee,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(wee,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Aee,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(yee,"href","/docs/transformers/pr_17254/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(xee,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c($ee,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(kee,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.TFAutoModelForMultipleChoice"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.TFAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(See,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ree,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pee,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bee,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(qee,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(jee,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(zee,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Wee,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Qee,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Uee,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Hee,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Jee,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Yee,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W3,"id","transformers.TFAutoModelForNextSentencePrediction"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(Kee,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zee,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eoe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ooe,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(roe,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(rf,"class","relative group"),c(toe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_17254/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.TFAutoModelForTokenClassification"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.TFAutoModelForTokenClassification"),c(nf,"class","relative group"),c(loe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ioe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(doe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(coe,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(foe,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(moe,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(goe,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(hoe,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(poe,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(_oe,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(uoe,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(boe,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(voe,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Foe,"href","/docs/transformers/pr_17254/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Toe,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Moe,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Eoe,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Coe,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(woe,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Aoe,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Loe,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(yoe,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(xoe,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.TFAutoModelForQuestionAnswering"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.TFAutoModelForQuestionAnswering"),c(df,"class","relative group"),c($oe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(koe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Soe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Roe,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_17254/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_17254/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_17254/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_17254/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_17254/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Ooe,"href","/docs/transformers/pr_17254/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_17254/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_17254/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_17254/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_17254/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_17254/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Yoe,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_17254/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q0,"id","transformers.TFAutoModelForVision2Seq"),c(Q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q0,"href","#transformers.TFAutoModelForVision2Seq"),c(mf,"class","relative group"),c(Zoe,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ere,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ore,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rre,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(pf,"class","relative group"),c(tre,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(are,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nre,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sre,"href","/docs/transformers/pr_17254/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModel"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModel"),c(bf,"class","relative group"),c(lre,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ire,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dre,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cre,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertModel"),c(fre,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartModel"),c(mre,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitModel"),c(gre,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertModel"),c(hre,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(pre,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(_re,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ure,"href","/docs/transformers/pr_17254/en/model_doc/clip#transformers.FlaxCLIPModel"),c(bre,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(vre,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraModel"),c(Fre,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Tre,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Mre,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Ere,"href","/docs/transformers/pr_17254/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Cre,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianModel"),c(wre,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Are,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Lre,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.FlaxOPTModel"),c(yre,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xre,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($re,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kre,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5Model"),c(Sre,"href","/docs/transformers/pr_17254/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Rre,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTModel"),c(Pre,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Bre,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Ire,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kw,"id","transformers.FlaxAutoModelForCausalLM"),c(kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Tf,"class","relative group"),c(Nre,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qre,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jre,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dre,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Gre,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Ore,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Vre,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Xre,"href","/docs/transformers/pr_17254/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zre,"href","/docs/transformers/pr_17254/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Wre,"href","/docs/transformers/pr_17254/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Qre,"href","/docs/transformers/pr_17254/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Ure,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Hre,"href","/docs/transformers/pr_17254/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xw,"id","transformers.FlaxAutoModelForPreTraining"),c(Xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Cf,"class","relative group"),c(Jre,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yre,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kre,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zre,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ete,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ote,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(rte,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(tte,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ate,"href","/docs/transformers/pr_17254/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(nte,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ste,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lte,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ite,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dte,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(cte,"href","/docs/transformers/pr_17254/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fte,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s6,"id","transformers.FlaxAutoModelForMaskedLM"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Lf,"class","relative group"),c(mte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pte,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_te,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ute,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bte,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vte,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Fte,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Tte,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Mte,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Ete,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Cte,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c($f,"class","relative group"),c(wte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ate,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yte,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xte,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($te,"href","/docs/transformers/pr_17254/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_17254/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Ste,"href","/docs/transformers/pr_17254/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Rte,"href","/docs/transformers/pr_17254/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Pte,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Bte,"href","/docs/transformers/pr_17254/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ite,"href","/docs/transformers/pr_17254/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Nte,"href","/docs/transformers/pr_17254/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S6,"id","transformers.FlaxAutoModelForSequenceClassification"),c(S6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S6,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Rf,"class","relative group"),c(qte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gte,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ote,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Vte,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Xte,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(zte,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Wte,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Qte,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Ute,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Hte,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Jte,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z6,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z6,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(If,"class","relative group"),c(Yte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zte,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eae,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(oae,"href","/docs/transformers/pr_17254/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(rae,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(tae,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(aae,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(nae,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(sae,"href","/docs/transformers/pr_17254/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(lae,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(iae,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(dae,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aA,"id","transformers.FlaxAutoModelForTokenClassification"),c(aA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(jf,"class","relative group"),c(cae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gae,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(hae,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(pae,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(_ae,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(uae,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(bae,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(vae,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Fae,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(pA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Of,"class","relative group"),c(Tae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cae,"href","/docs/transformers/pr_17254/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(wae,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Aae,"href","/docs/transformers/pr_17254/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Lae,"href","/docs/transformers/pr_17254/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(yae,"href","/docs/transformers/pr_17254/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(xae,"href","/docs/transformers/pr_17254/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c($ae,"href","/docs/transformers/pr_17254/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(kae,"href","/docs/transformers/pr_17254/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(AA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(zf,"class","relative group"),c(Sae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bae,"href","/docs/transformers/pr_17254/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($A,"id","transformers.FlaxAutoModelForImageClassification"),c($A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($A,"href","#transformers.FlaxAutoModelForImageClassification"),c(Uf,"class","relative group"),c(Iae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jae,"href","/docs/transformers/pr_17254/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Dae,"href","/docs/transformers/pr_17254/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BA,"id","transformers.FlaxAutoModelForVision2Seq"),c(BA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Yf,"class","relative group"),c(Gae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vae,"href","/docs/transformers/pr_17254/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xae,"href","/docs/transformers/pr_17254/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,zi),b(f,tm,u),b(f,ft,u),e(ft,Wi),e(ft,Qi),e(Qi,d8),e(ft,am),b(f,Oe,u),b(f,Qe,u),e(Qe,Ui),e(Qe,Xn),e(Xn,c8),e(Qe,zn),e(Qe,Wn),e(Wn,f8),e(Qe,Hi),e(Qe,Qn),e(Qn,m8),e(Qe,Ji),b(f,nm,u),M(ja,f,u),b(f,Ue,u),b(f,Ae,u),e(Ae,sP),e(Ae,Yi),e(Yi,lP),e(Ae,iP),b(f,Lo,u),b(f,Da,u),e(Da,dP),e(Da,sm),e(sm,cP),e(Da,gKe),b(f,VQe,u),b(f,Ki,u),e(Ki,lm),e(lm,Ose),M(g8,Ose,null),e(Ki,hKe),e(Ki,Vse),e(Vse,pKe),b(f,XQe,u),b(f,Un,u),e(Un,_Ke),e(Un,Xse),e(Xse,uKe),e(Un,bKe),e(Un,zse),e(zse,vKe),e(Un,FKe),b(f,zQe,u),M(h8,f,u),b(f,WQe,u),b(f,fP,u),e(fP,TKe),b(f,QQe,u),M(im,f,u),b(f,UQe,u),b(f,Zi,u),e(Zi,dm),e(dm,Wse),M(p8,Wse,null),e(Zi,MKe),e(Zi,Qse),e(Qse,EKe),b(f,HQe,u),b(f,yo,u),M(_8,yo,null),e(yo,CKe),e(yo,u8),e(u8,wKe),e(u8,mP),e(mP,AKe),e(u8,LKe),e(yo,yKe),e(yo,b8),e(b8,xKe),e(b8,Use),e(Use,$Ke),e(b8,kKe),e(yo,SKe),e(yo,kr),M(v8,kr,null),e(kr,RKe),e(kr,Hse),e(Hse,PKe),e(kr,BKe),e(kr,ed),e(ed,IKe),e(ed,Jse),e(Jse,NKe),e(ed,qKe),e(ed,Yse),e(Yse,jKe),e(ed,DKe),e(kr,GKe),e(kr,A),e(A,cm),e(cm,Kse),e(Kse,OKe),e(cm,VKe),e(cm,gP),e(gP,XKe),e(cm,zKe),e(A,WKe),e(A,fm),e(fm,Zse),e(Zse,QKe),e(fm,UKe),e(fm,hP),e(hP,HKe),e(fm,JKe),e(A,YKe),e(A,mm),e(mm,ele),e(ele,KKe),e(mm,ZKe),e(mm,pP),e(pP,eZe),e(mm,oZe),e(A,rZe),e(A,gm),e(gm,ole),e(ole,tZe),e(gm,aZe),e(gm,_P),e(_P,nZe),e(gm,sZe),e(A,lZe),e(A,hm),e(hm,rle),e(rle,iZe),e(hm,dZe),e(hm,uP),e(uP,cZe),e(hm,fZe),e(A,mZe),e(A,pm),e(pm,tle),e(tle,gZe),e(pm,hZe),e(pm,bP),e(bP,pZe),e(pm,_Ze),e(A,uZe),e(A,_m),e(_m,ale),e(ale,bZe),e(_m,vZe),e(_m,vP),e(vP,FZe),e(_m,TZe),e(A,MZe),e(A,um),e(um,nle),e(nle,EZe),e(um,CZe),e(um,FP),e(FP,wZe),e(um,AZe),e(A,LZe),e(A,bm),e(bm,sle),e(sle,yZe),e(bm,xZe),e(bm,TP),e(TP,$Ze),e(bm,kZe),e(A,SZe),e(A,vm),e(vm,lle),e(lle,RZe),e(vm,PZe),e(vm,MP),e(MP,BZe),e(vm,IZe),e(A,NZe),e(A,Fm),e(Fm,ile),e(ile,qZe),e(Fm,jZe),e(Fm,EP),e(EP,DZe),e(Fm,GZe),e(A,OZe),e(A,Tm),e(Tm,dle),e(dle,VZe),e(Tm,XZe),e(Tm,CP),e(CP,zZe),e(Tm,WZe),e(A,QZe),e(A,Mm),e(Mm,cle),e(cle,UZe),e(Mm,HZe),e(Mm,wP),e(wP,JZe),e(Mm,YZe),e(A,KZe),e(A,Em),e(Em,fle),e(fle,ZZe),e(Em,eeo),e(Em,AP),e(AP,oeo),e(Em,reo),e(A,teo),e(A,Cm),e(Cm,mle),e(mle,aeo),e(Cm,neo),e(Cm,LP),e(LP,seo),e(Cm,leo),e(A,ieo),e(A,wm),e(wm,gle),e(gle,deo),e(wm,ceo),e(wm,yP),e(yP,feo),e(wm,meo),e(A,geo),e(A,Am),e(Am,hle),e(hle,heo),e(Am,peo),e(Am,xP),e(xP,_eo),e(Am,ueo),e(A,beo),e(A,Lm),e(Lm,ple),e(ple,veo),e(Lm,Feo),e(Lm,$P),e($P,Teo),e(Lm,Meo),e(A,Eeo),e(A,ym),e(ym,_le),e(_le,Ceo),e(ym,weo),e(ym,kP),e(kP,Aeo),e(ym,Leo),e(A,yeo),e(A,xm),e(xm,ule),e(ule,xeo),e(xm,$eo),e(xm,SP),e(SP,keo),e(xm,Seo),e(A,Reo),e(A,$m),e($m,ble),e(ble,Peo),e($m,Beo),e($m,RP),e(RP,Ieo),e($m,Neo),e(A,qeo),e(A,km),e(km,vle),e(vle,jeo),e(km,Deo),e(km,PP),e(PP,Geo),e(km,Oeo),e(A,Veo),e(A,Sm),e(Sm,Fle),e(Fle,Xeo),e(Sm,zeo),e(Sm,BP),e(BP,Weo),e(Sm,Qeo),e(A,Ueo),e(A,Rm),e(Rm,Tle),e(Tle,Heo),e(Rm,Jeo),e(Rm,IP),e(IP,Yeo),e(Rm,Keo),e(A,Zeo),e(A,Pm),e(Pm,Mle),e(Mle,eoo),e(Pm,ooo),e(Pm,NP),e(NP,roo),e(Pm,too),e(A,aoo),e(A,Bm),e(Bm,Ele),e(Ele,noo),e(Bm,soo),e(Bm,qP),e(qP,loo),e(Bm,ioo),e(A,doo),e(A,Im),e(Im,Cle),e(Cle,coo),e(Im,foo),e(Im,jP),e(jP,moo),e(Im,goo),e(A,hoo),e(A,Nm),e(Nm,wle),e(wle,poo),e(Nm,_oo),e(Nm,DP),e(DP,uoo),e(Nm,boo),e(A,voo),e(A,qm),e(qm,Ale),e(Ale,Foo),e(qm,Too),e(qm,GP),e(GP,Moo),e(qm,Eoo),e(A,Coo),e(A,jm),e(jm,Lle),e(Lle,woo),e(jm,Aoo),e(jm,OP),e(OP,Loo),e(jm,yoo),e(A,xoo),e(A,Dm),e(Dm,yle),e(yle,$oo),e(Dm,koo),e(Dm,VP),e(VP,Soo),e(Dm,Roo),e(A,Poo),e(A,Gm),e(Gm,xle),e(xle,Boo),e(Gm,Ioo),e(Gm,XP),e(XP,Noo),e(Gm,qoo),e(A,joo),e(A,Om),e(Om,$le),e($le,Doo),e(Om,Goo),e(Om,zP),e(zP,Ooo),e(Om,Voo),e(A,Xoo),e(A,Vm),e(Vm,kle),e(kle,zoo),e(Vm,Woo),e(Vm,WP),e(WP,Qoo),e(Vm,Uoo),e(A,Hoo),e(A,Xm),e(Xm,Sle),e(Sle,Joo),e(Xm,Yoo),e(Xm,QP),e(QP,Koo),e(Xm,Zoo),e(A,ero),e(A,zm),e(zm,Rle),e(Rle,oro),e(zm,rro),e(zm,UP),e(UP,tro),e(zm,aro),e(A,nro),e(A,Wm),e(Wm,Ple),e(Ple,sro),e(Wm,lro),e(Wm,HP),e(HP,iro),e(Wm,dro),e(A,cro),e(A,Qm),e(Qm,Ble),e(Ble,fro),e(Qm,mro),e(Qm,JP),e(JP,gro),e(Qm,hro),e(A,pro),e(A,Um),e(Um,Ile),e(Ile,_ro),e(Um,uro),e(Um,YP),e(YP,bro),e(Um,vro),e(A,Fro),e(A,Hm),e(Hm,Nle),e(Nle,Tro),e(Hm,Mro),e(Hm,KP),e(KP,Ero),e(Hm,Cro),e(A,wro),e(A,Jm),e(Jm,qle),e(qle,Aro),e(Jm,Lro),e(Jm,ZP),e(ZP,yro),e(Jm,xro),e(A,$ro),e(A,Ym),e(Ym,jle),e(jle,kro),e(Ym,Sro),e(Ym,eB),e(eB,Rro),e(Ym,Pro),e(A,Bro),e(A,Km),e(Km,Dle),e(Dle,Iro),e(Km,Nro),e(Km,oB),e(oB,qro),e(Km,jro),e(A,Dro),e(A,Zm),e(Zm,Gle),e(Gle,Gro),e(Zm,Oro),e(Zm,rB),e(rB,Vro),e(Zm,Xro),e(A,zro),e(A,eg),e(eg,Ole),e(Ole,Wro),e(eg,Qro),e(eg,tB),e(tB,Uro),e(eg,Hro),e(A,Jro),e(A,og),e(og,Vle),e(Vle,Yro),e(og,Kro),e(og,aB),e(aB,Zro),e(og,eto),e(A,oto),e(A,rg),e(rg,Xle),e(Xle,rto),e(rg,tto),e(rg,nB),e(nB,ato),e(rg,nto),e(A,sto),e(A,tg),e(tg,zle),e(zle,lto),e(tg,ito),e(tg,sB),e(sB,dto),e(tg,cto),e(A,fto),e(A,ag),e(ag,Wle),e(Wle,mto),e(ag,gto),e(ag,lB),e(lB,hto),e(ag,pto),e(A,_to),e(A,ng),e(ng,Qle),e(Qle,uto),e(ng,bto),e(ng,iB),e(iB,vto),e(ng,Fto),e(A,Tto),e(A,sg),e(sg,Ule),e(Ule,Mto),e(sg,Eto),e(sg,dB),e(dB,Cto),e(sg,wto),e(A,Ato),e(A,lg),e(lg,Hle),e(Hle,Lto),e(lg,yto),e(lg,cB),e(cB,xto),e(lg,$to),e(A,kto),e(A,ig),e(ig,Jle),e(Jle,Sto),e(ig,Rto),e(ig,fB),e(fB,Pto),e(ig,Bto),e(A,Ito),e(A,dg),e(dg,Yle),e(Yle,Nto),e(dg,qto),e(dg,mB),e(mB,jto),e(dg,Dto),e(A,Gto),e(A,cg),e(cg,Kle),e(Kle,Oto),e(cg,Vto),e(cg,gB),e(gB,Xto),e(cg,zto),e(A,Wto),e(A,fg),e(fg,Zle),e(Zle,Qto),e(fg,Uto),e(fg,hB),e(hB,Hto),e(fg,Jto),e(A,Yto),e(A,mg),e(mg,eie),e(eie,Kto),e(mg,Zto),e(mg,pB),e(pB,eao),e(mg,oao),e(A,rao),e(A,gg),e(gg,oie),e(oie,tao),e(gg,aao),e(gg,_B),e(_B,nao),e(gg,sao),e(A,lao),e(A,hg),e(hg,rie),e(rie,iao),e(hg,dao),e(hg,uB),e(uB,cao),e(hg,fao),e(A,mao),e(A,pg),e(pg,tie),e(tie,gao),e(pg,hao),e(pg,bB),e(bB,pao),e(pg,_ao),e(A,uao),e(A,_g),e(_g,aie),e(aie,bao),e(_g,vao),e(_g,vB),e(vB,Fao),e(_g,Tao),e(A,Mao),e(A,ug),e(ug,nie),e(nie,Eao),e(ug,Cao),e(ug,FB),e(FB,wao),e(ug,Aao),e(A,Lao),e(A,bg),e(bg,sie),e(sie,yao),e(bg,xao),e(bg,TB),e(TB,$ao),e(bg,kao),e(A,Sao),e(A,vg),e(vg,lie),e(lie,Rao),e(vg,Pao),e(vg,MB),e(MB,Bao),e(vg,Iao),e(A,Nao),e(A,Fg),e(Fg,iie),e(iie,qao),e(Fg,jao),e(Fg,EB),e(EB,Dao),e(Fg,Gao),e(A,Oao),e(A,Tg),e(Tg,die),e(die,Vao),e(Tg,Xao),e(Tg,CB),e(CB,zao),e(Tg,Wao),e(A,Qao),e(A,Mg),e(Mg,cie),e(cie,Uao),e(Mg,Hao),e(Mg,wB),e(wB,Jao),e(Mg,Yao),e(A,Kao),e(A,Eg),e(Eg,fie),e(fie,Zao),e(Eg,eno),e(Eg,AB),e(AB,ono),e(Eg,rno),e(A,tno),e(A,Cg),e(Cg,mie),e(mie,ano),e(Cg,nno),e(Cg,LB),e(LB,sno),e(Cg,lno),e(A,ino),e(A,wg),e(wg,gie),e(gie,dno),e(wg,cno),e(wg,yB),e(yB,fno),e(wg,mno),e(A,gno),e(A,Ag),e(Ag,hie),e(hie,hno),e(Ag,pno),e(Ag,xB),e(xB,_no),e(Ag,uno),e(A,bno),e(A,Lg),e(Lg,pie),e(pie,vno),e(Lg,Fno),e(Lg,$B),e($B,Tno),e(Lg,Mno),e(A,Eno),e(A,yg),e(yg,_ie),e(_ie,Cno),e(yg,wno),e(yg,kB),e(kB,Ano),e(yg,Lno),e(A,yno),e(A,xg),e(xg,uie),e(uie,xno),e(xg,$no),e(xg,SB),e(SB,kno),e(xg,Sno),e(A,Rno),e(A,$g),e($g,bie),e(bie,Pno),e($g,Bno),e($g,RB),e(RB,Ino),e($g,Nno),e(A,qno),e(A,kg),e(kg,vie),e(vie,jno),e(kg,Dno),e(kg,PB),e(PB,Gno),e(kg,Ono),e(A,Vno),e(A,Sg),e(Sg,Fie),e(Fie,Xno),e(Sg,zno),e(Sg,BB),e(BB,Wno),e(Sg,Qno),e(A,Uno),e(A,Rg),e(Rg,Tie),e(Tie,Hno),e(Rg,Jno),e(Rg,IB),e(IB,Yno),e(Rg,Kno),e(A,Zno),e(A,Pg),e(Pg,Mie),e(Mie,eso),e(Pg,oso),e(Pg,NB),e(NB,rso),e(Pg,tso),e(A,aso),e(A,Bg),e(Bg,Eie),e(Eie,nso),e(Bg,sso),e(Bg,qB),e(qB,lso),e(Bg,iso),e(A,dso),e(A,Ig),e(Ig,Cie),e(Cie,cso),e(Ig,fso),e(Ig,jB),e(jB,mso),e(Ig,gso),e(A,hso),e(A,Ng),e(Ng,wie),e(wie,pso),e(Ng,_so),e(Ng,DB),e(DB,uso),e(Ng,bso),e(A,vso),e(A,qg),e(qg,Aie),e(Aie,Fso),e(qg,Tso),e(qg,GB),e(GB,Mso),e(qg,Eso),e(A,Cso),e(A,jg),e(jg,Lie),e(Lie,wso),e(jg,Aso),e(jg,OB),e(OB,Lso),e(jg,yso),e(A,xso),e(A,Dg),e(Dg,yie),e(yie,$so),e(Dg,kso),e(Dg,VB),e(VB,Sso),e(Dg,Rso),e(A,Pso),e(A,Gg),e(Gg,xie),e(xie,Bso),e(Gg,Iso),e(Gg,XB),e(XB,Nso),e(Gg,qso),e(A,jso),e(A,Og),e(Og,$ie),e($ie,Dso),e(Og,Gso),e(Og,zB),e(zB,Oso),e(Og,Vso),e(A,Xso),e(A,Vg),e(Vg,kie),e(kie,zso),e(Vg,Wso),e(Vg,WB),e(WB,Qso),e(Vg,Uso),e(A,Hso),e(A,Xg),e(Xg,Sie),e(Sie,Jso),e(Xg,Yso),e(Xg,QB),e(QB,Kso),e(Xg,Zso),e(A,elo),e(A,zg),e(zg,Rie),e(Rie,olo),e(zg,rlo),e(zg,UB),e(UB,tlo),e(zg,alo),e(A,nlo),e(A,Wg),e(Wg,Pie),e(Pie,slo),e(Wg,llo),e(Wg,HB),e(HB,ilo),e(Wg,dlo),e(A,clo),e(A,Qg),e(Qg,Bie),e(Bie,flo),e(Qg,mlo),e(Qg,JB),e(JB,glo),e(Qg,hlo),e(A,plo),e(A,Ug),e(Ug,Iie),e(Iie,_lo),e(Ug,ulo),e(Ug,YB),e(YB,blo),e(Ug,vlo),e(A,Flo),e(A,Hg),e(Hg,Nie),e(Nie,Tlo),e(Hg,Mlo),e(Hg,KB),e(KB,Elo),e(Hg,Clo),e(A,wlo),e(A,Jg),e(Jg,qie),e(qie,Alo),e(Jg,Llo),e(Jg,ZB),e(ZB,ylo),e(Jg,xlo),e(A,$lo),e(A,Yg),e(Yg,jie),e(jie,klo),e(Yg,Slo),e(Yg,eI),e(eI,Rlo),e(Yg,Plo),e(A,Blo),e(A,Kg),e(Kg,Die),e(Die,Ilo),e(Kg,Nlo),e(Kg,oI),e(oI,qlo),e(Kg,jlo),e(A,Dlo),e(A,Zg),e(Zg,Gie),e(Gie,Glo),e(Zg,Olo),e(Zg,rI),e(rI,Vlo),e(Zg,Xlo),e(A,zlo),e(A,eh),e(eh,Oie),e(Oie,Wlo),e(eh,Qlo),e(eh,tI),e(tI,Ulo),e(eh,Hlo),e(A,Jlo),e(A,oh),e(oh,Vie),e(Vie,Ylo),e(oh,Klo),e(oh,aI),e(aI,Zlo),e(oh,eio),e(A,oio),e(A,rh),e(rh,Xie),e(Xie,rio),e(rh,tio),e(rh,nI),e(nI,aio),e(rh,nio),e(A,sio),e(A,th),e(th,zie),e(zie,lio),e(th,iio),e(th,sI),e(sI,dio),e(th,cio),e(A,fio),e(A,ah),e(ah,Wie),e(Wie,mio),e(ah,gio),e(ah,lI),e(lI,hio),e(ah,pio),e(A,_io),e(A,nh),e(nh,Qie),e(Qie,uio),e(nh,bio),e(nh,iI),e(iI,vio),e(nh,Fio),e(A,Tio),e(A,sh),e(sh,Uie),e(Uie,Mio),e(sh,Eio),e(sh,dI),e(dI,Cio),e(sh,wio),e(A,Aio),e(A,lh),e(lh,Hie),e(Hie,Lio),e(lh,yio),e(lh,cI),e(cI,xio),e(lh,$io),e(A,kio),e(A,ih),e(ih,Jie),e(Jie,Sio),e(ih,Rio),e(ih,fI),e(fI,Pio),e(ih,Bio),e(A,Iio),e(A,dh),e(dh,Yie),e(Yie,Nio),e(dh,qio),e(dh,mI),e(mI,jio),e(dh,Dio),e(A,Gio),e(A,ch),e(ch,Kie),e(Kie,Oio),e(ch,Vio),e(ch,gI),e(gI,Xio),e(ch,zio),e(A,Wio),e(A,fh),e(fh,Zie),e(Zie,Qio),e(fh,Uio),e(fh,hI),e(hI,Hio),e(fh,Jio),e(A,Yio),e(A,mh),e(mh,ede),e(ede,Kio),e(mh,Zio),e(mh,pI),e(pI,edo),e(mh,odo),e(A,rdo),e(A,gh),e(gh,ode),e(ode,tdo),e(gh,ado),e(gh,_I),e(_I,ndo),e(gh,sdo),e(A,ldo),e(A,hh),e(hh,rde),e(rde,ido),e(hh,ddo),e(hh,uI),e(uI,cdo),e(hh,fdo),e(A,mdo),e(A,ph),e(ph,tde),e(tde,gdo),e(ph,hdo),e(ph,bI),e(bI,pdo),e(ph,_do),e(A,udo),e(A,_h),e(_h,ade),e(ade,bdo),e(_h,vdo),e(_h,vI),e(vI,Fdo),e(_h,Tdo),e(A,Mdo),e(A,uh),e(uh,nde),e(nde,Edo),e(uh,Cdo),e(uh,FI),e(FI,wdo),e(uh,Ado),e(A,Ldo),e(A,bh),e(bh,sde),e(sde,ydo),e(bh,xdo),e(bh,TI),e(TI,$do),e(bh,kdo),e(A,Sdo),e(A,vh),e(vh,lde),e(lde,Rdo),e(vh,Pdo),e(vh,MI),e(MI,Bdo),e(vh,Ido),e(A,Ndo),e(A,Fh),e(Fh,ide),e(ide,qdo),e(Fh,jdo),e(Fh,EI),e(EI,Ddo),e(Fh,Gdo),e(A,Odo),e(A,Th),e(Th,dde),e(dde,Vdo),e(Th,Xdo),e(Th,CI),e(CI,zdo),e(Th,Wdo),e(A,Qdo),e(A,Mh),e(Mh,cde),e(cde,Udo),e(Mh,Hdo),e(Mh,wI),e(wI,Jdo),e(Mh,Ydo),e(A,Kdo),e(A,Eh),e(Eh,fde),e(fde,Zdo),e(Eh,eco),e(Eh,AI),e(AI,oco),e(Eh,rco),e(kr,tco),M(Ch,kr,null),e(yo,aco),e(yo,wh),M(F8,wh,null),e(wh,nco),e(wh,mde),e(mde,sco),b(f,JQe,u),b(f,od,u),e(od,Ah),e(Ah,gde),M(T8,gde,null),e(od,lco),e(od,hde),e(hde,ico),b(f,YQe,u),b(f,xo,u),M(M8,xo,null),e(xo,dco),e(xo,E8),e(E8,cco),e(E8,LI),e(LI,fco),e(E8,mco),e(xo,gco),e(xo,C8),e(C8,hco),e(C8,pde),e(pde,pco),e(C8,_co),e(xo,uco),e(xo,Sr),M(w8,Sr,null),e(Sr,bco),e(Sr,_de),e(_de,vco),e(Sr,Fco),e(Sr,Ga),e(Ga,Tco),e(Ga,ude),e(ude,Mco),e(Ga,Eco),e(Ga,bde),e(bde,Cco),e(Ga,wco),e(Ga,vde),e(vde,Aco),e(Ga,Lco),e(Sr,yco),e(Sr,k),e(k,Hn),e(Hn,Fde),e(Fde,xco),e(Hn,$co),e(Hn,yI),e(yI,kco),e(Hn,Sco),e(Hn,xI),e(xI,Rco),e(Hn,Pco),e(k,Bco),e(k,Jn),e(Jn,Tde),e(Tde,Ico),e(Jn,Nco),e(Jn,$I),e($I,qco),e(Jn,jco),e(Jn,kI),e(kI,Dco),e(Jn,Gco),e(k,Oco),e(k,Yn),e(Yn,Mde),e(Mde,Vco),e(Yn,Xco),e(Yn,SI),e(SI,zco),e(Yn,Wco),e(Yn,RI),e(RI,Qco),e(Yn,Uco),e(k,Hco),e(k,Kn),e(Kn,Ede),e(Ede,Jco),e(Kn,Yco),e(Kn,PI),e(PI,Kco),e(Kn,Zco),e(Kn,BI),e(BI,efo),e(Kn,ofo),e(k,rfo),e(k,Zn),e(Zn,Cde),e(Cde,tfo),e(Zn,afo),e(Zn,II),e(II,nfo),e(Zn,sfo),e(Zn,NI),e(NI,lfo),e(Zn,ifo),e(k,dfo),e(k,Lh),e(Lh,wde),e(wde,cfo),e(Lh,ffo),e(Lh,qI),e(qI,mfo),e(Lh,gfo),e(k,hfo),e(k,yh),e(yh,Ade),e(Ade,pfo),e(yh,_fo),e(yh,jI),e(jI,ufo),e(yh,bfo),e(k,vfo),e(k,es),e(es,Lde),e(Lde,Ffo),e(es,Tfo),e(es,DI),e(DI,Mfo),e(es,Efo),e(es,GI),e(GI,Cfo),e(es,wfo),e(k,Afo),e(k,os),e(os,yde),e(yde,Lfo),e(os,yfo),e(os,OI),e(OI,xfo),e(os,$fo),e(os,VI),e(VI,kfo),e(os,Sfo),e(k,Rfo),e(k,rs),e(rs,xde),e(xde,Pfo),e(rs,Bfo),e(rs,XI),e(XI,Ifo),e(rs,Nfo),e(rs,zI),e(zI,qfo),e(rs,jfo),e(k,Dfo),e(k,ts),e(ts,$de),e($de,Gfo),e(ts,Ofo),e(ts,WI),e(WI,Vfo),e(ts,Xfo),e(ts,QI),e(QI,zfo),e(ts,Wfo),e(k,Qfo),e(k,xh),e(xh,kde),e(kde,Ufo),e(xh,Hfo),e(xh,UI),e(UI,Jfo),e(xh,Yfo),e(k,Kfo),e(k,$h),e($h,Sde),e(Sde,Zfo),e($h,emo),e($h,HI),e(HI,omo),e($h,rmo),e(k,tmo),e(k,kh),e(kh,Rde),e(Rde,amo),e(kh,nmo),e(kh,JI),e(JI,smo),e(kh,lmo),e(k,imo),e(k,as),e(as,Pde),e(Pde,dmo),e(as,cmo),e(as,YI),e(YI,fmo),e(as,mmo),e(as,KI),e(KI,gmo),e(as,hmo),e(k,pmo),e(k,Sh),e(Sh,Bde),e(Bde,_mo),e(Sh,umo),e(Sh,ZI),e(ZI,bmo),e(Sh,vmo),e(k,Fmo),e(k,ns),e(ns,Ide),e(Ide,Tmo),e(ns,Mmo),e(ns,eN),e(eN,Emo),e(ns,Cmo),e(ns,oN),e(oN,wmo),e(ns,Amo),e(k,Lmo),e(k,ss),e(ss,Nde),e(Nde,ymo),e(ss,xmo),e(ss,rN),e(rN,$mo),e(ss,kmo),e(ss,tN),e(tN,Smo),e(ss,Rmo),e(k,Pmo),e(k,ls),e(ls,qde),e(qde,Bmo),e(ls,Imo),e(ls,aN),e(aN,Nmo),e(ls,qmo),e(ls,nN),e(nN,jmo),e(ls,Dmo),e(k,Gmo),e(k,is),e(is,jde),e(jde,Omo),e(is,Vmo),e(is,sN),e(sN,Xmo),e(is,zmo),e(is,lN),e(lN,Wmo),e(is,Qmo),e(k,Umo),e(k,Rh),e(Rh,Dde),e(Dde,Hmo),e(Rh,Jmo),e(Rh,iN),e(iN,Ymo),e(Rh,Kmo),e(k,Zmo),e(k,ds),e(ds,Gde),e(Gde,ego),e(ds,ogo),e(ds,dN),e(dN,rgo),e(ds,tgo),e(ds,cN),e(cN,ago),e(ds,ngo),e(k,sgo),e(k,cs),e(cs,Ode),e(Ode,lgo),e(cs,igo),e(cs,fN),e(fN,dgo),e(cs,cgo),e(cs,mN),e(mN,fgo),e(cs,mgo),e(k,ggo),e(k,fs),e(fs,Vde),e(Vde,hgo),e(fs,pgo),e(fs,gN),e(gN,_go),e(fs,ugo),e(fs,hN),e(hN,bgo),e(fs,vgo),e(k,Fgo),e(k,ms),e(ms,Xde),e(Xde,Tgo),e(ms,Mgo),e(ms,pN),e(pN,Ego),e(ms,Cgo),e(ms,_N),e(_N,wgo),e(ms,Ago),e(k,Lgo),e(k,gs),e(gs,zde),e(zde,ygo),e(gs,xgo),e(gs,uN),e(uN,$go),e(gs,kgo),e(gs,bN),e(bN,Sgo),e(gs,Rgo),e(k,Pgo),e(k,hs),e(hs,Wde),e(Wde,Bgo),e(hs,Igo),e(hs,vN),e(vN,Ngo),e(hs,qgo),e(hs,FN),e(FN,jgo),e(hs,Dgo),e(k,Ggo),e(k,Ph),e(Ph,Qde),e(Qde,Ogo),e(Ph,Vgo),e(Ph,TN),e(TN,Xgo),e(Ph,zgo),e(k,Wgo),e(k,ps),e(ps,Ude),e(Ude,Qgo),e(ps,Ugo),e(ps,MN),e(MN,Hgo),e(ps,Jgo),e(ps,EN),e(EN,Ygo),e(ps,Kgo),e(k,Zgo),e(k,Bh),e(Bh,Hde),e(Hde,eho),e(Bh,oho),e(Bh,CN),e(CN,rho),e(Bh,tho),e(k,aho),e(k,_s),e(_s,Jde),e(Jde,nho),e(_s,sho),e(_s,wN),e(wN,lho),e(_s,iho),e(_s,AN),e(AN,dho),e(_s,cho),e(k,fho),e(k,us),e(us,Yde),e(Yde,mho),e(us,gho),e(us,LN),e(LN,hho),e(us,pho),e(us,yN),e(yN,_ho),e(us,uho),e(k,bho),e(k,bs),e(bs,Kde),e(Kde,vho),e(bs,Fho),e(bs,xN),e(xN,Tho),e(bs,Mho),e(bs,$N),e($N,Eho),e(bs,Cho),e(k,who),e(k,Ih),e(Ih,Zde),e(Zde,Aho),e(Ih,Lho),e(Ih,kN),e(kN,yho),e(Ih,xho),e(k,$ho),e(k,vs),e(vs,ece),e(ece,kho),e(vs,Sho),e(vs,SN),e(SN,Rho),e(vs,Pho),e(vs,RN),e(RN,Bho),e(vs,Iho),e(k,Nho),e(k,Fs),e(Fs,oce),e(oce,qho),e(Fs,jho),e(Fs,PN),e(PN,Dho),e(Fs,Gho),e(Fs,BN),e(BN,Oho),e(Fs,Vho),e(k,Xho),e(k,Ts),e(Ts,rce),e(rce,zho),e(Ts,Who),e(Ts,IN),e(IN,Qho),e(Ts,Uho),e(Ts,NN),e(NN,Hho),e(Ts,Jho),e(k,Yho),e(k,Nh),e(Nh,tce),e(tce,Kho),e(Nh,Zho),e(Nh,qN),e(qN,epo),e(Nh,opo),e(k,rpo),e(k,Ms),e(Ms,ace),e(ace,tpo),e(Ms,apo),e(Ms,jN),e(jN,npo),e(Ms,spo),e(Ms,DN),e(DN,lpo),e(Ms,ipo),e(k,dpo),e(k,Es),e(Es,nce),e(nce,cpo),e(Es,fpo),e(Es,GN),e(GN,mpo),e(Es,gpo),e(Es,ON),e(ON,hpo),e(Es,ppo),e(k,_po),e(k,Cs),e(Cs,sce),e(sce,upo),e(Cs,bpo),e(Cs,VN),e(VN,vpo),e(Cs,Fpo),e(Cs,XN),e(XN,Tpo),e(Cs,Mpo),e(k,Epo),e(k,ws),e(ws,lce),e(lce,Cpo),e(ws,wpo),e(ws,zN),e(zN,Apo),e(ws,Lpo),e(ws,WN),e(WN,ypo),e(ws,xpo),e(k,$po),e(k,As),e(As,ice),e(ice,kpo),e(As,Spo),e(As,QN),e(QN,Rpo),e(As,Ppo),e(As,UN),e(UN,Bpo),e(As,Ipo),e(k,Npo),e(k,Ls),e(Ls,dce),e(dce,qpo),e(Ls,jpo),e(Ls,HN),e(HN,Dpo),e(Ls,Gpo),e(Ls,JN),e(JN,Opo),e(Ls,Vpo),e(k,Xpo),e(k,ys),e(ys,cce),e(cce,zpo),e(ys,Wpo),e(ys,YN),e(YN,Qpo),e(ys,Upo),e(ys,KN),e(KN,Hpo),e(ys,Jpo),e(k,Ypo),e(k,xs),e(xs,fce),e(fce,Kpo),e(xs,Zpo),e(xs,ZN),e(ZN,e_o),e(xs,o_o),e(xs,eq),e(eq,r_o),e(xs,t_o),e(k,a_o),e(k,qh),e(qh,mce),e(mce,n_o),e(qh,s_o),e(qh,oq),e(oq,l_o),e(qh,i_o),e(k,d_o),e(k,$s),e($s,gce),e(gce,c_o),e($s,f_o),e($s,rq),e(rq,m_o),e($s,g_o),e($s,tq),e(tq,h_o),e($s,p_o),e(k,__o),e(k,jh),e(jh,hce),e(hce,u_o),e(jh,b_o),e(jh,aq),e(aq,v_o),e(jh,F_o),e(k,T_o),e(k,Dh),e(Dh,pce),e(pce,M_o),e(Dh,E_o),e(Dh,nq),e(nq,C_o),e(Dh,w_o),e(k,A_o),e(k,ks),e(ks,_ce),e(_ce,L_o),e(ks,y_o),e(ks,sq),e(sq,x_o),e(ks,$_o),e(ks,lq),e(lq,k_o),e(ks,S_o),e(k,R_o),e(k,Ss),e(Ss,uce),e(uce,P_o),e(Ss,B_o),e(Ss,iq),e(iq,I_o),e(Ss,N_o),e(Ss,dq),e(dq,q_o),e(Ss,j_o),e(k,D_o),e(k,Rs),e(Rs,bce),e(bce,G_o),e(Rs,O_o),e(Rs,cq),e(cq,V_o),e(Rs,X_o),e(Rs,fq),e(fq,z_o),e(Rs,W_o),e(k,Q_o),e(k,Gh),e(Gh,vce),e(vce,U_o),e(Gh,H_o),e(Gh,mq),e(mq,J_o),e(Gh,Y_o),e(k,K_o),e(k,Ps),e(Ps,Fce),e(Fce,Z_o),e(Ps,euo),e(Ps,gq),e(gq,ouo),e(Ps,ruo),e(Ps,hq),e(hq,tuo),e(Ps,auo),e(k,nuo),e(k,Bs),e(Bs,Tce),e(Tce,suo),e(Bs,luo),e(Bs,pq),e(pq,iuo),e(Bs,duo),e(Bs,_q),e(_q,cuo),e(Bs,fuo),e(k,muo),e(k,Is),e(Is,Mce),e(Mce,guo),e(Is,huo),e(Is,uq),e(uq,puo),e(Is,_uo),e(Is,bq),e(bq,uuo),e(Is,buo),e(k,vuo),e(k,Ns),e(Ns,Ece),e(Ece,Fuo),e(Ns,Tuo),e(Ns,vq),e(vq,Muo),e(Ns,Euo),e(Ns,Fq),e(Fq,Cuo),e(Ns,wuo),e(k,Auo),e(k,qs),e(qs,Cce),e(Cce,Luo),e(qs,yuo),e(qs,Tq),e(Tq,xuo),e(qs,$uo),e(qs,Mq),e(Mq,kuo),e(qs,Suo),e(k,Ruo),e(k,js),e(js,wce),e(wce,Puo),e(js,Buo),e(js,Eq),e(Eq,Iuo),e(js,Nuo),e(js,Cq),e(Cq,quo),e(js,juo),e(k,Duo),e(k,Ds),e(Ds,Ace),e(Ace,Guo),e(Ds,Ouo),e(Ds,wq),e(wq,Vuo),e(Ds,Xuo),e(Ds,Aq),e(Aq,zuo),e(Ds,Wuo),e(k,Quo),e(k,Gs),e(Gs,Lce),e(Lce,Uuo),e(Gs,Huo),e(Gs,Lq),e(Lq,Juo),e(Gs,Yuo),e(Gs,yq),e(yq,Kuo),e(Gs,Zuo),e(k,e2o),e(k,Oh),e(Oh,yce),e(yce,o2o),e(Oh,r2o),e(Oh,xq),e(xq,t2o),e(Oh,a2o),e(k,n2o),e(k,Os),e(Os,xce),e(xce,s2o),e(Os,l2o),e(Os,$q),e($q,i2o),e(Os,d2o),e(Os,kq),e(kq,c2o),e(Os,f2o),e(k,m2o),e(k,Vs),e(Vs,$ce),e($ce,g2o),e(Vs,h2o),e(Vs,Sq),e(Sq,p2o),e(Vs,_2o),e(Vs,Rq),e(Rq,u2o),e(Vs,b2o),e(k,v2o),e(k,Vh),e(Vh,kce),e(kce,F2o),e(Vh,T2o),e(Vh,Pq),e(Pq,M2o),e(Vh,E2o),e(k,C2o),e(k,Xs),e(Xs,Sce),e(Sce,w2o),e(Xs,A2o),e(Xs,Bq),e(Bq,L2o),e(Xs,y2o),e(Xs,Iq),e(Iq,x2o),e(Xs,$2o),e(k,k2o),e(k,Xh),e(Xh,Rce),e(Rce,S2o),e(Xh,R2o),e(Xh,Nq),e(Nq,P2o),e(Xh,B2o),e(k,I2o),e(k,zh),e(zh,Pce),e(Pce,N2o),e(zh,q2o),e(zh,qq),e(qq,j2o),e(zh,D2o),e(k,G2o),e(k,zs),e(zs,Bce),e(Bce,O2o),e(zs,V2o),e(zs,jq),e(jq,X2o),e(zs,z2o),e(zs,Dq),e(Dq,W2o),e(zs,Q2o),e(k,U2o),e(k,Wh),e(Wh,Ice),e(Ice,H2o),e(Wh,J2o),e(Wh,Gq),e(Gq,Y2o),e(Wh,K2o),e(k,Z2o),e(k,Ws),e(Ws,Nce),e(Nce,e1o),e(Ws,o1o),e(Ws,Oq),e(Oq,r1o),e(Ws,t1o),e(Ws,Vq),e(Vq,a1o),e(Ws,n1o),e(k,s1o),e(k,Qs),e(Qs,qce),e(qce,l1o),e(Qs,i1o),e(Qs,Xq),e(Xq,d1o),e(Qs,c1o),e(Qs,zq),e(zq,f1o),e(Qs,m1o),e(k,g1o),e(k,Us),e(Us,jce),e(jce,h1o),e(Us,p1o),e(Us,Wq),e(Wq,_1o),e(Us,u1o),e(Us,Qq),e(Qq,b1o),e(Us,v1o),e(k,F1o),e(k,Hs),e(Hs,Dce),e(Dce,T1o),e(Hs,M1o),e(Hs,Uq),e(Uq,E1o),e(Hs,C1o),e(Hs,Hq),e(Hq,w1o),e(Hs,A1o),e(k,L1o),e(k,Js),e(Js,Gce),e(Gce,y1o),e(Js,x1o),e(Js,Jq),e(Jq,$1o),e(Js,k1o),e(Js,Yq),e(Yq,S1o),e(Js,R1o),e(k,P1o),e(k,Ys),e(Ys,Oce),e(Oce,B1o),e(Ys,I1o),e(Ys,Kq),e(Kq,N1o),e(Ys,q1o),e(Ys,Zq),e(Zq,j1o),e(Ys,D1o),e(k,G1o),e(k,Qh),e(Qh,Vce),e(Vce,O1o),e(Qh,V1o),e(Qh,ej),e(ej,X1o),e(Qh,z1o),e(k,W1o),e(k,Uh),e(Uh,Xce),e(Xce,Q1o),e(Uh,U1o),e(Uh,oj),e(oj,H1o),e(Uh,J1o),e(k,Y1o),e(k,Ks),e(Ks,zce),e(zce,K1o),e(Ks,Z1o),e(Ks,rj),e(rj,e4o),e(Ks,o4o),e(Ks,tj),e(tj,r4o),e(Ks,t4o),e(k,a4o),e(k,Zs),e(Zs,Wce),e(Wce,n4o),e(Zs,s4o),e(Zs,aj),e(aj,l4o),e(Zs,i4o),e(Zs,nj),e(nj,d4o),e(Zs,c4o),e(k,f4o),e(k,el),e(el,Qce),e(Qce,m4o),e(el,g4o),e(el,sj),e(sj,h4o),e(el,p4o),e(el,lj),e(lj,_4o),e(el,u4o),e(k,b4o),e(k,Hh),e(Hh,Uce),e(Uce,v4o),e(Hh,F4o),e(Hh,ij),e(ij,T4o),e(Hh,M4o),e(k,E4o),e(k,Jh),e(Jh,Hce),e(Hce,C4o),e(Jh,w4o),e(Jh,dj),e(dj,A4o),e(Jh,L4o),e(k,y4o),e(k,Yh),e(Yh,Jce),e(Jce,x4o),e(Yh,$4o),e(Yh,cj),e(cj,k4o),e(Yh,S4o),e(k,R4o),e(k,ol),e(ol,Yce),e(Yce,P4o),e(ol,B4o),e(ol,fj),e(fj,I4o),e(ol,N4o),e(ol,mj),e(mj,q4o),e(ol,j4o),e(k,D4o),e(k,rl),e(rl,Kce),e(Kce,G4o),e(rl,O4o),e(rl,gj),e(gj,V4o),e(rl,X4o),e(rl,hj),e(hj,z4o),e(rl,W4o),e(k,Q4o),e(k,Kh),e(Kh,Zce),e(Zce,U4o),e(Kh,H4o),e(Kh,pj),e(pj,J4o),e(Kh,Y4o),e(k,K4o),e(k,Zh),e(Zh,efe),e(efe,Z4o),e(Zh,ebo),e(Zh,_j),e(_j,obo),e(Zh,rbo),e(k,tbo),e(k,ep),e(ep,ofe),e(ofe,abo),e(ep,nbo),e(ep,uj),e(uj,sbo),e(ep,lbo),e(k,ibo),e(k,tl),e(tl,rfe),e(rfe,dbo),e(tl,cbo),e(tl,bj),e(bj,fbo),e(tl,mbo),e(tl,vj),e(vj,gbo),e(tl,hbo),e(k,pbo),e(k,op),e(op,tfe),e(tfe,_bo),e(op,ubo),e(op,Fj),e(Fj,bbo),e(op,vbo),e(k,Fbo),e(k,rp),e(rp,afe),e(afe,Tbo),e(rp,Mbo),e(rp,Tj),e(Tj,Ebo),e(rp,Cbo),e(k,wbo),e(k,al),e(al,nfe),e(nfe,Abo),e(al,Lbo),e(al,Mj),e(Mj,ybo),e(al,xbo),e(al,Ej),e(Ej,$bo),e(al,kbo),e(k,Sbo),e(k,nl),e(nl,sfe),e(sfe,Rbo),e(nl,Pbo),e(nl,Cj),e(Cj,Bbo),e(nl,Ibo),e(nl,wj),e(wj,Nbo),e(nl,qbo),e(k,jbo),e(k,sl),e(sl,lfe),e(lfe,Dbo),e(sl,Gbo),e(sl,Aj),e(Aj,Obo),e(sl,Vbo),e(sl,Lj),e(Lj,Xbo),e(sl,zbo),e(k,Wbo),e(k,ll),e(ll,ife),e(ife,Qbo),e(ll,Ubo),e(ll,yj),e(yj,Hbo),e(ll,Jbo),e(ll,xj),e(xj,Ybo),e(ll,Kbo),e(Sr,Zbo),M(tp,Sr,null),e(xo,evo),e(xo,ap),M(A8,ap,null),e(ap,ovo),e(ap,dfe),e(dfe,rvo),b(f,KQe,u),b(f,rd,u),e(rd,np),e(np,cfe),M(L8,cfe,null),e(rd,tvo),e(rd,ffe),e(ffe,avo),b(f,ZQe,u),b(f,$o,u),M(y8,$o,null),e($o,nvo),e($o,x8),e(x8,svo),e(x8,$j),e($j,lvo),e(x8,ivo),e($o,dvo),e($o,$8),e($8,cvo),e($8,mfe),e(mfe,fvo),e($8,mvo),e($o,gvo),e($o,He),M(k8,He,null),e(He,hvo),e(He,gfe),e(gfe,pvo),e(He,_vo),e(He,Oa),e(Oa,uvo),e(Oa,hfe),e(hfe,bvo),e(Oa,vvo),e(Oa,pfe),e(pfe,Fvo),e(Oa,Tvo),e(Oa,_fe),e(_fe,Mvo),e(Oa,Evo),e(He,Cvo),e(He,Q),e(Q,sp),e(sp,ufe),e(ufe,wvo),e(sp,Avo),e(sp,kj),e(kj,Lvo),e(sp,yvo),e(Q,xvo),e(Q,lp),e(lp,bfe),e(bfe,$vo),e(lp,kvo),e(lp,Sj),e(Sj,Svo),e(lp,Rvo),e(Q,Pvo),e(Q,ip),e(ip,vfe),e(vfe,Bvo),e(ip,Ivo),e(ip,Rj),e(Rj,Nvo),e(ip,qvo),e(Q,jvo),e(Q,dp),e(dp,Ffe),e(Ffe,Dvo),e(dp,Gvo),e(dp,Pj),e(Pj,Ovo),e(dp,Vvo),e(Q,Xvo),e(Q,cp),e(cp,Tfe),e(Tfe,zvo),e(cp,Wvo),e(cp,Bj),e(Bj,Qvo),e(cp,Uvo),e(Q,Hvo),e(Q,fp),e(fp,Mfe),e(Mfe,Jvo),e(fp,Yvo),e(fp,Ij),e(Ij,Kvo),e(fp,Zvo),e(Q,e5o),e(Q,mp),e(mp,Efe),e(Efe,o5o),e(mp,r5o),e(mp,Nj),e(Nj,t5o),e(mp,a5o),e(Q,n5o),e(Q,gp),e(gp,Cfe),e(Cfe,s5o),e(gp,l5o),e(gp,qj),e(qj,i5o),e(gp,d5o),e(Q,c5o),e(Q,hp),e(hp,wfe),e(wfe,f5o),e(hp,m5o),e(hp,jj),e(jj,g5o),e(hp,h5o),e(Q,p5o),e(Q,pp),e(pp,Afe),e(Afe,_5o),e(pp,u5o),e(pp,Dj),e(Dj,b5o),e(pp,v5o),e(Q,F5o),e(Q,_p),e(_p,Lfe),e(Lfe,T5o),e(_p,M5o),e(_p,Gj),e(Gj,E5o),e(_p,C5o),e(Q,w5o),e(Q,up),e(up,yfe),e(yfe,A5o),e(up,L5o),e(up,Oj),e(Oj,y5o),e(up,x5o),e(Q,$5o),e(Q,bp),e(bp,xfe),e(xfe,k5o),e(bp,S5o),e(bp,Vj),e(Vj,R5o),e(bp,P5o),e(Q,B5o),e(Q,vp),e(vp,$fe),e($fe,I5o),e(vp,N5o),e(vp,Xj),e(Xj,q5o),e(vp,j5o),e(Q,D5o),e(Q,Fp),e(Fp,kfe),e(kfe,G5o),e(Fp,O5o),e(Fp,zj),e(zj,V5o),e(Fp,X5o),e(Q,z5o),e(Q,Tp),e(Tp,Sfe),e(Sfe,W5o),e(Tp,Q5o),e(Tp,Wj),e(Wj,U5o),e(Tp,H5o),e(Q,J5o),e(Q,Mp),e(Mp,Rfe),e(Rfe,Y5o),e(Mp,K5o),e(Mp,Qj),e(Qj,Z5o),e(Mp,eFo),e(Q,oFo),e(Q,Ep),e(Ep,Pfe),e(Pfe,rFo),e(Ep,tFo),e(Ep,Uj),e(Uj,aFo),e(Ep,nFo),e(Q,sFo),e(Q,Cp),e(Cp,Bfe),e(Bfe,lFo),e(Cp,iFo),e(Cp,Hj),e(Hj,dFo),e(Cp,cFo),e(Q,fFo),e(Q,wp),e(wp,Ife),e(Ife,mFo),e(wp,gFo),e(wp,Jj),e(Jj,hFo),e(wp,pFo),e(Q,_Fo),e(Q,Ap),e(Ap,Nfe),e(Nfe,uFo),e(Ap,bFo),e(Ap,Yj),e(Yj,vFo),e(Ap,FFo),e(Q,TFo),e(Q,Lp),e(Lp,qfe),e(qfe,MFo),e(Lp,EFo),e(Lp,Kj),e(Kj,CFo),e(Lp,wFo),e(Q,AFo),e(Q,yp),e(yp,jfe),e(jfe,LFo),e(yp,yFo),e(yp,Zj),e(Zj,xFo),e(yp,$Fo),e(Q,kFo),e(Q,xp),e(xp,Dfe),e(Dfe,SFo),e(xp,RFo),e(xp,eD),e(eD,PFo),e(xp,BFo),e(Q,IFo),e(Q,$p),e($p,Gfe),e(Gfe,NFo),e($p,qFo),e($p,oD),e(oD,jFo),e($p,DFo),e(Q,GFo),e(Q,kp),e(kp,Ofe),e(Ofe,OFo),e(kp,VFo),e(kp,rD),e(rD,XFo),e(kp,zFo),e(Q,WFo),e(Q,Sp),e(Sp,Vfe),e(Vfe,QFo),e(Sp,UFo),e(Sp,tD),e(tD,HFo),e(Sp,JFo),e(Q,YFo),e(Q,Rp),e(Rp,Xfe),e(Xfe,KFo),e(Rp,ZFo),e(Rp,aD),e(aD,eTo),e(Rp,oTo),e(Q,rTo),e(Q,Pp),e(Pp,zfe),e(zfe,tTo),e(Pp,aTo),e(Pp,nD),e(nD,nTo),e(Pp,sTo),e(Q,lTo),e(Q,Bp),e(Bp,Wfe),e(Wfe,iTo),e(Bp,dTo),e(Bp,sD),e(sD,cTo),e(Bp,fTo),e(Q,mTo),e(Q,Ip),e(Ip,Qfe),e(Qfe,gTo),e(Ip,hTo),e(Ip,lD),e(lD,pTo),e(Ip,_To),e(Q,uTo),e(Q,Np),e(Np,Ufe),e(Ufe,bTo),e(Np,vTo),e(Np,iD),e(iD,FTo),e(Np,TTo),e(Q,MTo),e(Q,qp),e(qp,Hfe),e(Hfe,ETo),e(qp,CTo),e(qp,dD),e(dD,wTo),e(qp,ATo),e(Q,LTo),e(Q,jp),e(jp,Jfe),e(Jfe,yTo),e(jp,xTo),e(jp,cD),e(cD,$To),e(jp,kTo),e(Q,STo),e(Q,Dp),e(Dp,Yfe),e(Yfe,RTo),e(Dp,PTo),e(Dp,fD),e(fD,BTo),e(Dp,ITo),e(Q,NTo),e(Q,Gp),e(Gp,Kfe),e(Kfe,qTo),e(Gp,jTo),e(Gp,mD),e(mD,DTo),e(Gp,GTo),e(Q,OTo),e(Q,Op),e(Op,Zfe),e(Zfe,VTo),e(Op,XTo),e(Op,gD),e(gD,zTo),e(Op,WTo),e(Q,QTo),e(Q,Vp),e(Vp,eme),e(eme,UTo),e(Vp,HTo),e(Vp,hD),e(hD,JTo),e(Vp,YTo),e(He,KTo),M(Xp,He,null),e(He,ZTo),M(zp,He,null),e($o,e7o),e($o,Wp),M(S8,Wp,null),e(Wp,o7o),e(Wp,ome),e(ome,r7o),b(f,eUe,u),b(f,td,u),e(td,Qp),e(Qp,rme),M(R8,rme,null),e(td,t7o),e(td,tme),e(tme,a7o),b(f,oUe,u),b(f,ko,u),M(P8,ko,null),e(ko,n7o),e(ko,B8),e(B8,s7o),e(B8,pD),e(pD,l7o),e(B8,i7o),e(ko,d7o),e(ko,I8),e(I8,c7o),e(I8,ame),e(ame,f7o),e(I8,m7o),e(ko,g7o),e(ko,Je),M(N8,Je,null),e(Je,h7o),e(Je,nme),e(nme,p7o),e(Je,_7o),e(Je,ad),e(ad,u7o),e(ad,sme),e(sme,b7o),e(ad,v7o),e(ad,lme),e(lme,F7o),e(ad,T7o),e(Je,M7o),e(Je,ie),e(ie,Up),e(Up,ime),e(ime,E7o),e(Up,C7o),e(Up,_D),e(_D,w7o),e(Up,A7o),e(ie,L7o),e(ie,Hp),e(Hp,dme),e(dme,y7o),e(Hp,x7o),e(Hp,uD),e(uD,$7o),e(Hp,k7o),e(ie,S7o),e(ie,Jp),e(Jp,cme),e(cme,R7o),e(Jp,P7o),e(Jp,bD),e(bD,B7o),e(Jp,I7o),e(ie,N7o),e(ie,Yp),e(Yp,fme),e(fme,q7o),e(Yp,j7o),e(Yp,vD),e(vD,D7o),e(Yp,G7o),e(ie,O7o),e(ie,Kp),e(Kp,mme),e(mme,V7o),e(Kp,X7o),e(Kp,FD),e(FD,z7o),e(Kp,W7o),e(ie,Q7o),e(ie,Zp),e(Zp,gme),e(gme,U7o),e(Zp,H7o),e(Zp,TD),e(TD,J7o),e(Zp,Y7o),e(ie,K7o),e(ie,e_),e(e_,hme),e(hme,Z7o),e(e_,eMo),e(e_,MD),e(MD,oMo),e(e_,rMo),e(ie,tMo),e(ie,o_),e(o_,pme),e(pme,aMo),e(o_,nMo),e(o_,ED),e(ED,sMo),e(o_,lMo),e(ie,iMo),e(ie,r_),e(r_,_me),e(_me,dMo),e(r_,cMo),e(r_,CD),e(CD,fMo),e(r_,mMo),e(ie,gMo),e(ie,t_),e(t_,ume),e(ume,hMo),e(t_,pMo),e(t_,wD),e(wD,_Mo),e(t_,uMo),e(ie,bMo),e(ie,a_),e(a_,bme),e(bme,vMo),e(a_,FMo),e(a_,AD),e(AD,TMo),e(a_,MMo),e(ie,EMo),e(ie,n_),e(n_,vme),e(vme,CMo),e(n_,wMo),e(n_,LD),e(LD,AMo),e(n_,LMo),e(ie,yMo),e(ie,s_),e(s_,Fme),e(Fme,xMo),e(s_,$Mo),e(s_,yD),e(yD,kMo),e(s_,SMo),e(ie,RMo),e(ie,l_),e(l_,Tme),e(Tme,PMo),e(l_,BMo),e(l_,xD),e(xD,IMo),e(l_,NMo),e(ie,qMo),e(ie,i_),e(i_,Mme),e(Mme,jMo),e(i_,DMo),e(i_,$D),e($D,GMo),e(i_,OMo),e(ie,VMo),e(ie,d_),e(d_,Eme),e(Eme,XMo),e(d_,zMo),e(d_,kD),e(kD,WMo),e(d_,QMo),e(ie,UMo),e(ie,c_),e(c_,Cme),e(Cme,HMo),e(c_,JMo),e(c_,SD),e(SD,YMo),e(c_,KMo),e(ie,ZMo),e(ie,f_),e(f_,wme),e(wme,eEo),e(f_,oEo),e(f_,RD),e(RD,rEo),e(f_,tEo),e(ie,aEo),e(ie,m_),e(m_,Ame),e(Ame,nEo),e(m_,sEo),e(m_,PD),e(PD,lEo),e(m_,iEo),e(ie,dEo),e(ie,g_),e(g_,Lme),e(Lme,cEo),e(g_,fEo),e(g_,BD),e(BD,mEo),e(g_,gEo),e(Je,hEo),M(h_,Je,null),e(Je,pEo),M(p_,Je,null),e(ko,_Eo),e(ko,__),M(q8,__,null),e(__,uEo),e(__,yme),e(yme,bEo),b(f,rUe,u),b(f,nd,u),e(nd,u_),e(u_,xme),M(j8,xme,null),e(nd,vEo),e(nd,$me),e($me,FEo),b(f,tUe,u),b(f,So,u),M(D8,So,null),e(So,TEo),e(So,sd),e(sd,MEo),e(sd,ID),e(ID,EEo),e(sd,CEo),e(sd,ND),e(ND,wEo),e(sd,AEo),e(So,LEo),e(So,G8),e(G8,yEo),e(G8,kme),e(kme,xEo),e(G8,$Eo),e(So,kEo),e(So,mt),M(O8,mt,null),e(mt,SEo),e(mt,Sme),e(Sme,REo),e(mt,PEo),e(mt,ld),e(ld,BEo),e(ld,Rme),e(Rme,IEo),e(ld,NEo),e(ld,qD),e(qD,qEo),e(ld,jEo),e(mt,DEo),M(b_,mt,null),e(So,GEo),e(So,Ye),M(V8,Ye,null),e(Ye,OEo),e(Ye,Pme),e(Pme,VEo),e(Ye,XEo),e(Ye,Va),e(Va,zEo),e(Va,Bme),e(Bme,WEo),e(Va,QEo),e(Va,Ime),e(Ime,UEo),e(Va,HEo),e(Va,Nme),e(Nme,JEo),e(Va,YEo),e(Ye,KEo),e(Ye,y),e(y,v_),e(v_,qme),e(qme,ZEo),e(v_,eCo),e(v_,jD),e(jD,oCo),e(v_,rCo),e(y,tCo),e(y,F_),e(F_,jme),e(jme,aCo),e(F_,nCo),e(F_,DD),e(DD,sCo),e(F_,lCo),e(y,iCo),e(y,T_),e(T_,Dme),e(Dme,dCo),e(T_,cCo),e(T_,GD),e(GD,fCo),e(T_,mCo),e(y,gCo),e(y,M_),e(M_,Gme),e(Gme,hCo),e(M_,pCo),e(M_,OD),e(OD,_Co),e(M_,uCo),e(y,bCo),e(y,E_),e(E_,Ome),e(Ome,vCo),e(E_,FCo),e(E_,VD),e(VD,TCo),e(E_,MCo),e(y,ECo),e(y,C_),e(C_,Vme),e(Vme,CCo),e(C_,wCo),e(C_,XD),e(XD,ACo),e(C_,LCo),e(y,yCo),e(y,w_),e(w_,Xme),e(Xme,xCo),e(w_,$Co),e(w_,zD),e(zD,kCo),e(w_,SCo),e(y,RCo),e(y,A_),e(A_,zme),e(zme,PCo),e(A_,BCo),e(A_,WD),e(WD,ICo),e(A_,NCo),e(y,qCo),e(y,L_),e(L_,Wme),e(Wme,jCo),e(L_,DCo),e(L_,QD),e(QD,GCo),e(L_,OCo),e(y,VCo),e(y,y_),e(y_,Qme),e(Qme,XCo),e(y_,zCo),e(y_,UD),e(UD,WCo),e(y_,QCo),e(y,UCo),e(y,x_),e(x_,Ume),e(Ume,HCo),e(x_,JCo),e(x_,HD),e(HD,YCo),e(x_,KCo),e(y,ZCo),e(y,$_),e($_,Hme),e(Hme,e3o),e($_,o3o),e($_,JD),e(JD,r3o),e($_,t3o),e(y,a3o),e(y,k_),e(k_,Jme),e(Jme,n3o),e(k_,s3o),e(k_,YD),e(YD,l3o),e(k_,i3o),e(y,d3o),e(y,S_),e(S_,Yme),e(Yme,c3o),e(S_,f3o),e(S_,KD),e(KD,m3o),e(S_,g3o),e(y,h3o),e(y,R_),e(R_,Kme),e(Kme,p3o),e(R_,_3o),e(R_,ZD),e(ZD,u3o),e(R_,b3o),e(y,v3o),e(y,P_),e(P_,Zme),e(Zme,F3o),e(P_,T3o),e(P_,eG),e(eG,M3o),e(P_,E3o),e(y,C3o),e(y,B_),e(B_,ege),e(ege,w3o),e(B_,A3o),e(B_,oG),e(oG,L3o),e(B_,y3o),e(y,x3o),e(y,I_),e(I_,oge),e(oge,$3o),e(I_,k3o),e(I_,rG),e(rG,S3o),e(I_,R3o),e(y,P3o),e(y,N_),e(N_,rge),e(rge,B3o),e(N_,I3o),e(N_,tG),e(tG,N3o),e(N_,q3o),e(y,j3o),e(y,q_),e(q_,tge),e(tge,D3o),e(q_,G3o),e(q_,aG),e(aG,O3o),e(q_,V3o),e(y,X3o),e(y,j_),e(j_,age),e(age,z3o),e(j_,W3o),e(j_,nG),e(nG,Q3o),e(j_,U3o),e(y,H3o),e(y,D_),e(D_,nge),e(nge,J3o),e(D_,Y3o),e(D_,sG),e(sG,K3o),e(D_,Z3o),e(y,e0o),e(y,G_),e(G_,sge),e(sge,o0o),e(G_,r0o),e(G_,lG),e(lG,t0o),e(G_,a0o),e(y,n0o),e(y,O_),e(O_,lge),e(lge,s0o),e(O_,l0o),e(O_,iG),e(iG,i0o),e(O_,d0o),e(y,c0o),e(y,V_),e(V_,ige),e(ige,f0o),e(V_,m0o),e(V_,dG),e(dG,g0o),e(V_,h0o),e(y,p0o),e(y,X_),e(X_,dge),e(dge,_0o),e(X_,u0o),e(X_,cG),e(cG,b0o),e(X_,v0o),e(y,F0o),e(y,z_),e(z_,cge),e(cge,T0o),e(z_,M0o),e(z_,fG),e(fG,E0o),e(z_,C0o),e(y,w0o),e(y,W_),e(W_,fge),e(fge,A0o),e(W_,L0o),e(W_,mG),e(mG,y0o),e(W_,x0o),e(y,$0o),e(y,Q_),e(Q_,mge),e(mge,k0o),e(Q_,S0o),e(Q_,gG),e(gG,R0o),e(Q_,P0o),e(y,B0o),e(y,U_),e(U_,gge),e(gge,I0o),e(U_,N0o),e(U_,hG),e(hG,q0o),e(U_,j0o),e(y,D0o),e(y,H_),e(H_,hge),e(hge,G0o),e(H_,O0o),e(H_,pG),e(pG,V0o),e(H_,X0o),e(y,z0o),e(y,J_),e(J_,pge),e(pge,W0o),e(J_,Q0o),e(J_,_G),e(_G,U0o),e(J_,H0o),e(y,J0o),e(y,Y_),e(Y_,_ge),e(_ge,Y0o),e(Y_,K0o),e(Y_,uG),e(uG,Z0o),e(Y_,ewo),e(y,owo),e(y,K_),e(K_,uge),e(uge,rwo),e(K_,two),e(K_,bG),e(bG,awo),e(K_,nwo),e(y,swo),e(y,Z_),e(Z_,bge),e(bge,lwo),e(Z_,iwo),e(Z_,vG),e(vG,dwo),e(Z_,cwo),e(y,fwo),e(y,il),e(il,vge),e(vge,mwo),e(il,gwo),e(il,FG),e(FG,hwo),e(il,pwo),e(il,TG),e(TG,_wo),e(il,uwo),e(y,bwo),e(y,eu),e(eu,Fge),e(Fge,vwo),e(eu,Fwo),e(eu,MG),e(MG,Two),e(eu,Mwo),e(y,Ewo),e(y,ou),e(ou,Tge),e(Tge,Cwo),e(ou,wwo),e(ou,EG),e(EG,Awo),e(ou,Lwo),e(y,ywo),e(y,ru),e(ru,Mge),e(Mge,xwo),e(ru,$wo),e(ru,CG),e(CG,kwo),e(ru,Swo),e(y,Rwo),e(y,tu),e(tu,Ege),e(Ege,Pwo),e(tu,Bwo),e(tu,wG),e(wG,Iwo),e(tu,Nwo),e(y,qwo),e(y,au),e(au,Cge),e(Cge,jwo),e(au,Dwo),e(au,AG),e(AG,Gwo),e(au,Owo),e(y,Vwo),e(y,nu),e(nu,wge),e(wge,Xwo),e(nu,zwo),e(nu,LG),e(LG,Wwo),e(nu,Qwo),e(y,Uwo),e(y,su),e(su,Age),e(Age,Hwo),e(su,Jwo),e(su,yG),e(yG,Ywo),e(su,Kwo),e(y,Zwo),e(y,lu),e(lu,Lge),e(Lge,e6o),e(lu,o6o),e(lu,xG),e(xG,r6o),e(lu,t6o),e(y,a6o),e(y,iu),e(iu,yge),e(yge,n6o),e(iu,s6o),e(iu,$G),e($G,l6o),e(iu,i6o),e(y,d6o),e(y,du),e(du,xge),e(xge,c6o),e(du,f6o),e(du,kG),e(kG,m6o),e(du,g6o),e(y,h6o),e(y,cu),e(cu,$ge),e($ge,p6o),e(cu,_6o),e(cu,SG),e(SG,u6o),e(cu,b6o),e(y,v6o),e(y,fu),e(fu,kge),e(kge,F6o),e(fu,T6o),e(fu,RG),e(RG,M6o),e(fu,E6o),e(y,C6o),e(y,mu),e(mu,Sge),e(Sge,w6o),e(mu,A6o),e(mu,PG),e(PG,L6o),e(mu,y6o),e(y,x6o),e(y,gu),e(gu,Rge),e(Rge,$6o),e(gu,k6o),e(gu,BG),e(BG,S6o),e(gu,R6o),e(y,P6o),e(y,hu),e(hu,Pge),e(Pge,B6o),e(hu,I6o),e(hu,IG),e(IG,N6o),e(hu,q6o),e(y,j6o),e(y,pu),e(pu,Bge),e(Bge,D6o),e(pu,G6o),e(pu,NG),e(NG,O6o),e(pu,V6o),e(y,X6o),e(y,_u),e(_u,Ige),e(Ige,z6o),e(_u,W6o),e(_u,qG),e(qG,Q6o),e(_u,U6o),e(y,H6o),e(y,uu),e(uu,Nge),e(Nge,J6o),e(uu,Y6o),e(uu,jG),e(jG,K6o),e(uu,Z6o),e(y,eAo),e(y,bu),e(bu,qge),e(qge,oAo),e(bu,rAo),e(bu,DG),e(DG,tAo),e(bu,aAo),e(y,nAo),e(y,vu),e(vu,jge),e(jge,sAo),e(vu,lAo),e(vu,GG),e(GG,iAo),e(vu,dAo),e(y,cAo),e(y,Fu),e(Fu,Dge),e(Dge,fAo),e(Fu,mAo),e(Fu,OG),e(OG,gAo),e(Fu,hAo),e(y,pAo),e(y,Tu),e(Tu,Gge),e(Gge,_Ao),e(Tu,uAo),e(Tu,VG),e(VG,bAo),e(Tu,vAo),e(y,FAo),e(y,Mu),e(Mu,Oge),e(Oge,TAo),e(Mu,MAo),e(Mu,XG),e(XG,EAo),e(Mu,CAo),e(y,wAo),e(y,Eu),e(Eu,Vge),e(Vge,AAo),e(Eu,LAo),e(Eu,zG),e(zG,yAo),e(Eu,xAo),e(y,$Ao),e(y,Cu),e(Cu,Xge),e(Xge,kAo),e(Cu,SAo),e(Cu,WG),e(WG,RAo),e(Cu,PAo),e(y,BAo),e(y,wu),e(wu,zge),e(zge,IAo),e(wu,NAo),e(wu,QG),e(QG,qAo),e(wu,jAo),e(y,DAo),e(y,Au),e(Au,Wge),e(Wge,GAo),e(Au,OAo),e(Au,UG),e(UG,VAo),e(Au,XAo),e(y,zAo),e(y,Lu),e(Lu,Qge),e(Qge,WAo),e(Lu,QAo),e(Lu,HG),e(HG,UAo),e(Lu,HAo),e(y,JAo),e(y,yu),e(yu,Uge),e(Uge,YAo),e(yu,KAo),e(yu,JG),e(JG,ZAo),e(yu,eLo),e(y,oLo),e(y,xu),e(xu,Hge),e(Hge,rLo),e(xu,tLo),e(xu,YG),e(YG,aLo),e(xu,nLo),e(y,sLo),e(y,$u),e($u,Jge),e(Jge,lLo),e($u,iLo),e($u,KG),e(KG,dLo),e($u,cLo),e(y,fLo),e(y,ku),e(ku,Yge),e(Yge,mLo),e(ku,gLo),e(ku,ZG),e(ZG,hLo),e(ku,pLo),e(y,_Lo),e(y,Su),e(Su,Kge),e(Kge,uLo),e(Su,bLo),e(Su,eO),e(eO,vLo),e(Su,FLo),e(y,TLo),e(y,Ru),e(Ru,Zge),e(Zge,MLo),e(Ru,ELo),e(Ru,oO),e(oO,CLo),e(Ru,wLo),e(y,ALo),e(y,Pu),e(Pu,ehe),e(ehe,LLo),e(Pu,yLo),e(Pu,rO),e(rO,xLo),e(Pu,$Lo),e(y,kLo),e(y,Bu),e(Bu,ohe),e(ohe,SLo),e(Bu,RLo),e(Bu,tO),e(tO,PLo),e(Bu,BLo),e(y,ILo),e(y,Iu),e(Iu,rhe),e(rhe,NLo),e(Iu,qLo),e(Iu,aO),e(aO,jLo),e(Iu,DLo),e(y,GLo),e(y,Nu),e(Nu,the),e(the,OLo),e(Nu,VLo),e(Nu,nO),e(nO,XLo),e(Nu,zLo),e(y,WLo),e(y,qu),e(qu,ahe),e(ahe,QLo),e(qu,ULo),e(qu,sO),e(sO,HLo),e(qu,JLo),e(y,YLo),e(y,ju),e(ju,nhe),e(nhe,KLo),e(ju,ZLo),e(ju,lO),e(lO,eyo),e(ju,oyo),e(y,ryo),e(y,Du),e(Du,she),e(she,tyo),e(Du,ayo),e(Du,iO),e(iO,nyo),e(Du,syo),e(y,lyo),e(y,Gu),e(Gu,lhe),e(lhe,iyo),e(Gu,dyo),e(Gu,dO),e(dO,cyo),e(Gu,fyo),e(y,myo),e(y,Ou),e(Ou,ihe),e(ihe,gyo),e(Ou,hyo),e(Ou,cO),e(cO,pyo),e(Ou,_yo),e(y,uyo),e(y,Vu),e(Vu,dhe),e(dhe,byo),e(Vu,vyo),e(Vu,fO),e(fO,Fyo),e(Vu,Tyo),e(y,Myo),e(y,Xu),e(Xu,che),e(che,Eyo),e(Xu,Cyo),e(Xu,mO),e(mO,wyo),e(Xu,Ayo),e(y,Lyo),e(y,zu),e(zu,fhe),e(fhe,yyo),e(zu,xyo),e(zu,gO),e(gO,$yo),e(zu,kyo),e(y,Syo),e(y,Wu),e(Wu,mhe),e(mhe,Ryo),e(Wu,Pyo),e(Wu,hO),e(hO,Byo),e(Wu,Iyo),e(y,Nyo),e(y,Qu),e(Qu,ghe),e(ghe,qyo),e(Qu,jyo),e(Qu,pO),e(pO,Dyo),e(Qu,Gyo),e(y,Oyo),e(y,Uu),e(Uu,hhe),e(hhe,Vyo),e(Uu,Xyo),e(Uu,_O),e(_O,zyo),e(Uu,Wyo),e(y,Qyo),e(y,Hu),e(Hu,phe),e(phe,Uyo),e(Hu,Hyo),e(Hu,uO),e(uO,Jyo),e(Hu,Yyo),e(y,Kyo),e(y,Ju),e(Ju,_he),e(_he,Zyo),e(Ju,e8o),e(Ju,bO),e(bO,o8o),e(Ju,r8o),e(y,t8o),e(y,Yu),e(Yu,uhe),e(uhe,a8o),e(Yu,n8o),e(Yu,vO),e(vO,s8o),e(Yu,l8o),e(y,i8o),e(y,Ku),e(Ku,bhe),e(bhe,d8o),e(Ku,c8o),e(Ku,FO),e(FO,f8o),e(Ku,m8o),e(y,g8o),e(y,Zu),e(Zu,vhe),e(vhe,h8o),e(Zu,p8o),e(Zu,TO),e(TO,_8o),e(Zu,u8o),e(y,b8o),e(y,e2),e(e2,Fhe),e(Fhe,v8o),e(e2,F8o),e(e2,MO),e(MO,T8o),e(e2,M8o),e(y,E8o),e(y,o2),e(o2,The),e(The,C8o),e(o2,w8o),e(o2,EO),e(EO,A8o),e(o2,L8o),e(y,y8o),e(y,r2),e(r2,Mhe),e(Mhe,x8o),e(r2,$8o),e(r2,CO),e(CO,k8o),e(r2,S8o),e(y,R8o),e(y,t2),e(t2,Ehe),e(Ehe,P8o),e(t2,B8o),e(t2,wO),e(wO,I8o),e(t2,N8o),e(y,q8o),e(y,a2),e(a2,Che),e(Che,j8o),e(a2,D8o),e(a2,AO),e(AO,G8o),e(a2,O8o),e(y,V8o),e(y,n2),e(n2,whe),e(whe,X8o),e(n2,z8o),e(n2,LO),e(LO,W8o),e(n2,Q8o),e(y,U8o),e(y,s2),e(s2,Ahe),e(Ahe,H8o),e(s2,J8o),e(s2,yO),e(yO,Y8o),e(s2,K8o),e(y,Z8o),e(y,l2),e(l2,Lhe),e(Lhe,e9o),e(l2,o9o),e(l2,xO),e(xO,r9o),e(l2,t9o),e(y,a9o),e(y,i2),e(i2,yhe),e(yhe,n9o),e(i2,s9o),e(i2,$O),e($O,l9o),e(i2,i9o),e(y,d9o),e(y,d2),e(d2,xhe),e(xhe,c9o),e(d2,f9o),e(d2,kO),e(kO,m9o),e(d2,g9o),e(y,h9o),e(y,c2),e(c2,$he),e($he,p9o),e(c2,_9o),e(c2,SO),e(SO,u9o),e(c2,b9o),e(y,v9o),e(y,f2),e(f2,khe),e(khe,F9o),e(f2,T9o),e(f2,RO),e(RO,M9o),e(f2,E9o),e(y,C9o),e(y,m2),e(m2,She),e(She,w9o),e(m2,A9o),e(m2,PO),e(PO,L9o),e(m2,y9o),e(y,x9o),e(y,g2),e(g2,Rhe),e(Rhe,$9o),e(g2,k9o),e(g2,BO),e(BO,S9o),e(g2,R9o),e(y,P9o),e(y,h2),e(h2,Phe),e(Phe,B9o),e(h2,I9o),e(h2,IO),e(IO,N9o),e(h2,q9o),e(y,j9o),e(y,p2),e(p2,Bhe),e(Bhe,D9o),e(p2,G9o),e(p2,NO),e(NO,O9o),e(p2,V9o),e(y,X9o),e(y,_2),e(_2,Ihe),e(Ihe,z9o),e(_2,W9o),e(_2,qO),e(qO,Q9o),e(_2,U9o),e(y,H9o),e(y,u2),e(u2,Nhe),e(Nhe,J9o),e(u2,Y9o),e(u2,jO),e(jO,K9o),e(u2,Z9o),e(y,exo),e(y,b2),e(b2,qhe),e(qhe,oxo),e(b2,rxo),e(b2,DO),e(DO,txo),e(b2,axo),e(y,nxo),e(y,v2),e(v2,jhe),e(jhe,sxo),e(v2,lxo),e(v2,GO),e(GO,ixo),e(v2,dxo),e(y,cxo),e(y,F2),e(F2,Dhe),e(Dhe,fxo),e(F2,mxo),e(F2,OO),e(OO,gxo),e(F2,hxo),e(y,pxo),e(y,T2),e(T2,Ghe),e(Ghe,_xo),e(T2,uxo),e(T2,VO),e(VO,bxo),e(T2,vxo),e(y,Fxo),e(y,M2),e(M2,Ohe),e(Ohe,Txo),e(M2,Mxo),e(M2,XO),e(XO,Exo),e(M2,Cxo),e(y,wxo),e(y,E2),e(E2,Vhe),e(Vhe,Axo),e(E2,Lxo),e(E2,zO),e(zO,yxo),e(E2,xxo),e(y,$xo),e(y,C2),e(C2,Xhe),e(Xhe,kxo),e(C2,Sxo),e(C2,WO),e(WO,Rxo),e(C2,Pxo),e(y,Bxo),e(y,w2),e(w2,zhe),e(zhe,Ixo),e(w2,Nxo),e(w2,QO),e(QO,qxo),e(w2,jxo),e(Ye,Dxo),e(Ye,A2),e(A2,Gxo),e(A2,Whe),e(Whe,Oxo),e(A2,Vxo),e(A2,Qhe),e(Qhe,Xxo),e(Ye,zxo),M(L2,Ye,null),b(f,aUe,u),b(f,id,u),e(id,y2),e(y2,Uhe),M(X8,Uhe,null),e(id,Wxo),e(id,Hhe),e(Hhe,Qxo),b(f,nUe,u),b(f,Ro,u),M(z8,Ro,null),e(Ro,Uxo),e(Ro,dd),e(dd,Hxo),e(dd,UO),e(UO,Jxo),e(dd,Yxo),e(dd,HO),e(HO,Kxo),e(dd,Zxo),e(Ro,e$o),e(Ro,W8),e(W8,o$o),e(W8,Jhe),e(Jhe,r$o),e(W8,t$o),e(Ro,a$o),e(Ro,gt),M(Q8,gt,null),e(gt,n$o),e(gt,Yhe),e(Yhe,s$o),e(gt,l$o),e(gt,cd),e(cd,i$o),e(cd,Khe),e(Khe,d$o),e(cd,c$o),e(cd,JO),e(JO,f$o),e(cd,m$o),e(gt,g$o),M(x2,gt,null),e(Ro,h$o),e(Ro,Ke),M(U8,Ke,null),e(Ke,p$o),e(Ke,Zhe),e(Zhe,_$o),e(Ke,u$o),e(Ke,Xa),e(Xa,b$o),e(Xa,epe),e(epe,v$o),e(Xa,F$o),e(Xa,ope),e(ope,T$o),e(Xa,M$o),e(Xa,rpe),e(rpe,E$o),e(Xa,C$o),e(Ke,w$o),e(Ke,G),e(G,$2),e($2,tpe),e(tpe,A$o),e($2,L$o),e($2,YO),e(YO,y$o),e($2,x$o),e(G,$$o),e(G,k2),e(k2,ape),e(ape,k$o),e(k2,S$o),e(k2,KO),e(KO,R$o),e(k2,P$o),e(G,B$o),e(G,S2),e(S2,npe),e(npe,I$o),e(S2,N$o),e(S2,ZO),e(ZO,q$o),e(S2,j$o),e(G,D$o),e(G,R2),e(R2,spe),e(spe,G$o),e(R2,O$o),e(R2,eV),e(eV,V$o),e(R2,X$o),e(G,z$o),e(G,P2),e(P2,lpe),e(lpe,W$o),e(P2,Q$o),e(P2,oV),e(oV,U$o),e(P2,H$o),e(G,J$o),e(G,B2),e(B2,ipe),e(ipe,Y$o),e(B2,K$o),e(B2,rV),e(rV,Z$o),e(B2,eko),e(G,oko),e(G,I2),e(I2,dpe),e(dpe,rko),e(I2,tko),e(I2,tV),e(tV,ako),e(I2,nko),e(G,sko),e(G,N2),e(N2,cpe),e(cpe,lko),e(N2,iko),e(N2,aV),e(aV,dko),e(N2,cko),e(G,fko),e(G,q2),e(q2,fpe),e(fpe,mko),e(q2,gko),e(q2,nV),e(nV,hko),e(q2,pko),e(G,_ko),e(G,j2),e(j2,mpe),e(mpe,uko),e(j2,bko),e(j2,sV),e(sV,vko),e(j2,Fko),e(G,Tko),e(G,D2),e(D2,gpe),e(gpe,Mko),e(D2,Eko),e(D2,lV),e(lV,Cko),e(D2,wko),e(G,Ako),e(G,G2),e(G2,hpe),e(hpe,Lko),e(G2,yko),e(G2,iV),e(iV,xko),e(G2,$ko),e(G,kko),e(G,O2),e(O2,ppe),e(ppe,Sko),e(O2,Rko),e(O2,dV),e(dV,Pko),e(O2,Bko),e(G,Iko),e(G,V2),e(V2,_pe),e(_pe,Nko),e(V2,qko),e(V2,cV),e(cV,jko),e(V2,Dko),e(G,Gko),e(G,X2),e(X2,upe),e(upe,Oko),e(X2,Vko),e(X2,fV),e(fV,Xko),e(X2,zko),e(G,Wko),e(G,z2),e(z2,bpe),e(bpe,Qko),e(z2,Uko),e(z2,mV),e(mV,Hko),e(z2,Jko),e(G,Yko),e(G,W2),e(W2,vpe),e(vpe,Kko),e(W2,Zko),e(W2,gV),e(gV,eSo),e(W2,oSo),e(G,rSo),e(G,Q2),e(Q2,Fpe),e(Fpe,tSo),e(Q2,aSo),e(Q2,hV),e(hV,nSo),e(Q2,sSo),e(G,lSo),e(G,U2),e(U2,Tpe),e(Tpe,iSo),e(U2,dSo),e(U2,pV),e(pV,cSo),e(U2,fSo),e(G,mSo),e(G,H2),e(H2,Mpe),e(Mpe,gSo),e(H2,hSo),e(H2,_V),e(_V,pSo),e(H2,_So),e(G,uSo),e(G,J2),e(J2,Epe),e(Epe,bSo),e(J2,vSo),e(J2,uV),e(uV,FSo),e(J2,TSo),e(G,MSo),e(G,Y2),e(Y2,Cpe),e(Cpe,ESo),e(Y2,CSo),e(Y2,bV),e(bV,wSo),e(Y2,ASo),e(G,LSo),e(G,K2),e(K2,wpe),e(wpe,ySo),e(K2,xSo),e(K2,vV),e(vV,$So),e(K2,kSo),e(G,SSo),e(G,Z2),e(Z2,Ape),e(Ape,RSo),e(Z2,PSo),e(Z2,FV),e(FV,BSo),e(Z2,ISo),e(G,NSo),e(G,e1),e(e1,Lpe),e(Lpe,qSo),e(e1,jSo),e(e1,TV),e(TV,DSo),e(e1,GSo),e(G,OSo),e(G,o1),e(o1,ype),e(ype,VSo),e(o1,XSo),e(o1,MV),e(MV,zSo),e(o1,WSo),e(G,QSo),e(G,r1),e(r1,xpe),e(xpe,USo),e(r1,HSo),e(r1,EV),e(EV,JSo),e(r1,YSo),e(G,KSo),e(G,t1),e(t1,$pe),e($pe,ZSo),e(t1,eRo),e(t1,CV),e(CV,oRo),e(t1,rRo),e(G,tRo),e(G,a1),e(a1,kpe),e(kpe,aRo),e(a1,nRo),e(a1,wV),e(wV,sRo),e(a1,lRo),e(G,iRo),e(G,n1),e(n1,Spe),e(Spe,dRo),e(n1,cRo),e(n1,AV),e(AV,fRo),e(n1,mRo),e(G,gRo),e(G,s1),e(s1,Rpe),e(Rpe,hRo),e(s1,pRo),e(s1,LV),e(LV,_Ro),e(s1,uRo),e(G,bRo),e(G,l1),e(l1,Ppe),e(Ppe,vRo),e(l1,FRo),e(l1,yV),e(yV,TRo),e(l1,MRo),e(G,ERo),e(G,i1),e(i1,Bpe),e(Bpe,CRo),e(i1,wRo),e(i1,xV),e(xV,ARo),e(i1,LRo),e(G,yRo),e(G,d1),e(d1,Ipe),e(Ipe,xRo),e(d1,$Ro),e(d1,$V),e($V,kRo),e(d1,SRo),e(G,RRo),e(G,c1),e(c1,Npe),e(Npe,PRo),e(c1,BRo),e(c1,kV),e(kV,IRo),e(c1,NRo),e(G,qRo),e(G,f1),e(f1,qpe),e(qpe,jRo),e(f1,DRo),e(f1,SV),e(SV,GRo),e(f1,ORo),e(G,VRo),e(G,m1),e(m1,jpe),e(jpe,XRo),e(m1,zRo),e(m1,RV),e(RV,WRo),e(m1,QRo),e(G,URo),e(G,g1),e(g1,Dpe),e(Dpe,HRo),e(g1,JRo),e(g1,PV),e(PV,YRo),e(g1,KRo),e(G,ZRo),e(G,h1),e(h1,Gpe),e(Gpe,ePo),e(h1,oPo),e(h1,BV),e(BV,rPo),e(h1,tPo),e(G,aPo),e(G,p1),e(p1,Ope),e(Ope,nPo),e(p1,sPo),e(p1,IV),e(IV,lPo),e(p1,iPo),e(G,dPo),e(G,_1),e(_1,Vpe),e(Vpe,cPo),e(_1,fPo),e(_1,NV),e(NV,mPo),e(_1,gPo),e(G,hPo),e(G,u1),e(u1,Xpe),e(Xpe,pPo),e(u1,_Po),e(u1,qV),e(qV,uPo),e(u1,bPo),e(G,vPo),e(G,b1),e(b1,zpe),e(zpe,FPo),e(b1,TPo),e(b1,jV),e(jV,MPo),e(b1,EPo),e(G,CPo),e(G,v1),e(v1,Wpe),e(Wpe,wPo),e(v1,APo),e(v1,DV),e(DV,LPo),e(v1,yPo),e(G,xPo),e(G,F1),e(F1,Qpe),e(Qpe,$Po),e(F1,kPo),e(F1,GV),e(GV,SPo),e(F1,RPo),e(G,PPo),e(G,T1),e(T1,Upe),e(Upe,BPo),e(T1,IPo),e(T1,OV),e(OV,NPo),e(T1,qPo),e(G,jPo),e(G,M1),e(M1,Hpe),e(Hpe,DPo),e(M1,GPo),e(M1,VV),e(VV,OPo),e(M1,VPo),e(Ke,XPo),e(Ke,E1),e(E1,zPo),e(E1,Jpe),e(Jpe,WPo),e(E1,QPo),e(E1,Ype),e(Ype,UPo),e(Ke,HPo),M(C1,Ke,null),b(f,sUe,u),b(f,fd,u),e(fd,w1),e(w1,Kpe),M(H8,Kpe,null),e(fd,JPo),e(fd,Zpe),e(Zpe,YPo),b(f,lUe,u),b(f,Po,u),M(J8,Po,null),e(Po,KPo),e(Po,md),e(md,ZPo),e(md,XV),e(XV,eBo),e(md,oBo),e(md,zV),e(zV,rBo),e(md,tBo),e(Po,aBo),e(Po,Y8),e(Y8,nBo),e(Y8,e_e),e(e_e,sBo),e(Y8,lBo),e(Po,iBo),e(Po,ht),M(K8,ht,null),e(ht,dBo),e(ht,o_e),e(o_e,cBo),e(ht,fBo),e(ht,gd),e(gd,mBo),e(gd,r_e),e(r_e,gBo),e(gd,hBo),e(gd,WV),e(WV,pBo),e(gd,_Bo),e(ht,uBo),M(A1,ht,null),e(Po,bBo),e(Po,Ze),M(Z8,Ze,null),e(Ze,vBo),e(Ze,t_e),e(t_e,FBo),e(Ze,TBo),e(Ze,za),e(za,MBo),e(za,a_e),e(a_e,EBo),e(za,CBo),e(za,n_e),e(n_e,wBo),e(za,ABo),e(za,s_e),e(s_e,LBo),e(za,yBo),e(Ze,xBo),e(Ze,z),e(z,L1),e(L1,l_e),e(l_e,$Bo),e(L1,kBo),e(L1,QV),e(QV,SBo),e(L1,RBo),e(z,PBo),e(z,y1),e(y1,i_e),e(i_e,BBo),e(y1,IBo),e(y1,UV),e(UV,NBo),e(y1,qBo),e(z,jBo),e(z,x1),e(x1,d_e),e(d_e,DBo),e(x1,GBo),e(x1,HV),e(HV,OBo),e(x1,VBo),e(z,XBo),e(z,$1),e($1,c_e),e(c_e,zBo),e($1,WBo),e($1,JV),e(JV,QBo),e($1,UBo),e(z,HBo),e(z,k1),e(k1,f_e),e(f_e,JBo),e(k1,YBo),e(k1,YV),e(YV,KBo),e(k1,ZBo),e(z,eIo),e(z,S1),e(S1,m_e),e(m_e,oIo),e(S1,rIo),e(S1,KV),e(KV,tIo),e(S1,aIo),e(z,nIo),e(z,R1),e(R1,g_e),e(g_e,sIo),e(R1,lIo),e(R1,ZV),e(ZV,iIo),e(R1,dIo),e(z,cIo),e(z,P1),e(P1,h_e),e(h_e,fIo),e(P1,mIo),e(P1,eX),e(eX,gIo),e(P1,hIo),e(z,pIo),e(z,B1),e(B1,p_e),e(p_e,_Io),e(B1,uIo),e(B1,oX),e(oX,bIo),e(B1,vIo),e(z,FIo),e(z,I1),e(I1,__e),e(__e,TIo),e(I1,MIo),e(I1,rX),e(rX,EIo),e(I1,CIo),e(z,wIo),e(z,N1),e(N1,u_e),e(u_e,AIo),e(N1,LIo),e(N1,tX),e(tX,yIo),e(N1,xIo),e(z,$Io),e(z,q1),e(q1,b_e),e(b_e,kIo),e(q1,SIo),e(q1,aX),e(aX,RIo),e(q1,PIo),e(z,BIo),e(z,j1),e(j1,v_e),e(v_e,IIo),e(j1,NIo),e(j1,nX),e(nX,qIo),e(j1,jIo),e(z,DIo),e(z,D1),e(D1,F_e),e(F_e,GIo),e(D1,OIo),e(D1,sX),e(sX,VIo),e(D1,XIo),e(z,zIo),e(z,G1),e(G1,T_e),e(T_e,WIo),e(G1,QIo),e(G1,lX),e(lX,UIo),e(G1,HIo),e(z,JIo),e(z,O1),e(O1,M_e),e(M_e,YIo),e(O1,KIo),e(O1,iX),e(iX,ZIo),e(O1,eNo),e(z,oNo),e(z,V1),e(V1,E_e),e(E_e,rNo),e(V1,tNo),e(V1,dX),e(dX,aNo),e(V1,nNo),e(z,sNo),e(z,X1),e(X1,C_e),e(C_e,lNo),e(X1,iNo),e(X1,cX),e(cX,dNo),e(X1,cNo),e(z,fNo),e(z,z1),e(z1,w_e),e(w_e,mNo),e(z1,gNo),e(z1,fX),e(fX,hNo),e(z1,pNo),e(z,_No),e(z,W1),e(W1,A_e),e(A_e,uNo),e(W1,bNo),e(W1,mX),e(mX,vNo),e(W1,FNo),e(z,TNo),e(z,Q1),e(Q1,L_e),e(L_e,MNo),e(Q1,ENo),e(Q1,gX),e(gX,CNo),e(Q1,wNo),e(z,ANo),e(z,U1),e(U1,y_e),e(y_e,LNo),e(U1,yNo),e(U1,hX),e(hX,xNo),e(U1,$No),e(z,kNo),e(z,H1),e(H1,x_e),e(x_e,SNo),e(H1,RNo),e(H1,pX),e(pX,PNo),e(H1,BNo),e(z,INo),e(z,J1),e(J1,$_e),e($_e,NNo),e(J1,qNo),e(J1,_X),e(_X,jNo),e(J1,DNo),e(z,GNo),e(z,Y1),e(Y1,k_e),e(k_e,ONo),e(Y1,VNo),e(Y1,uX),e(uX,XNo),e(Y1,zNo),e(z,WNo),e(z,K1),e(K1,S_e),e(S_e,QNo),e(K1,UNo),e(K1,bX),e(bX,HNo),e(K1,JNo),e(z,YNo),e(z,Z1),e(Z1,R_e),e(R_e,KNo),e(Z1,ZNo),e(Z1,vX),e(vX,eqo),e(Z1,oqo),e(z,rqo),e(z,e4),e(e4,P_e),e(P_e,tqo),e(e4,aqo),e(e4,FX),e(FX,nqo),e(e4,sqo),e(z,lqo),e(z,o4),e(o4,B_e),e(B_e,iqo),e(o4,dqo),e(o4,TX),e(TX,cqo),e(o4,fqo),e(z,mqo),e(z,r4),e(r4,I_e),e(I_e,gqo),e(r4,hqo),e(r4,MX),e(MX,pqo),e(r4,_qo),e(z,uqo),e(z,t4),e(t4,N_e),e(N_e,bqo),e(t4,vqo),e(t4,EX),e(EX,Fqo),e(t4,Tqo),e(z,Mqo),e(z,a4),e(a4,q_e),e(q_e,Eqo),e(a4,Cqo),e(a4,CX),e(CX,wqo),e(a4,Aqo),e(z,Lqo),e(z,n4),e(n4,j_e),e(j_e,yqo),e(n4,xqo),e(n4,wX),e(wX,$qo),e(n4,kqo),e(z,Sqo),e(z,s4),e(s4,D_e),e(D_e,Rqo),e(s4,Pqo),e(s4,AX),e(AX,Bqo),e(s4,Iqo),e(z,Nqo),e(z,l4),e(l4,G_e),e(G_e,qqo),e(l4,jqo),e(l4,LX),e(LX,Dqo),e(l4,Gqo),e(z,Oqo),e(z,i4),e(i4,O_e),e(O_e,Vqo),e(i4,Xqo),e(i4,yX),e(yX,zqo),e(i4,Wqo),e(z,Qqo),e(z,d4),e(d4,V_e),e(V_e,Uqo),e(d4,Hqo),e(d4,xX),e(xX,Jqo),e(d4,Yqo),e(z,Kqo),e(z,c4),e(c4,X_e),e(X_e,Zqo),e(c4,ejo),e(c4,$X),e($X,ojo),e(c4,rjo),e(z,tjo),e(z,f4),e(f4,z_e),e(z_e,ajo),e(f4,njo),e(f4,kX),e(kX,sjo),e(f4,ljo),e(z,ijo),e(z,m4),e(m4,W_e),e(W_e,djo),e(m4,cjo),e(m4,SX),e(SX,fjo),e(m4,mjo),e(Ze,gjo),e(Ze,g4),e(g4,hjo),e(g4,Q_e),e(Q_e,pjo),e(g4,_jo),e(g4,U_e),e(U_e,ujo),e(Ze,bjo),M(h4,Ze,null),b(f,iUe,u),b(f,hd,u),e(hd,p4),e(p4,H_e),M(e9,H_e,null),e(hd,vjo),e(hd,J_e),e(J_e,Fjo),b(f,dUe,u),b(f,Bo,u),M(o9,Bo,null),e(Bo,Tjo),e(Bo,pd),e(pd,Mjo),e(pd,RX),e(RX,Ejo),e(pd,Cjo),e(pd,PX),e(PX,wjo),e(pd,Ajo),e(Bo,Ljo),e(Bo,r9),e(r9,yjo),e(r9,Y_e),e(Y_e,xjo),e(r9,$jo),e(Bo,kjo),e(Bo,pt),M(t9,pt,null),e(pt,Sjo),e(pt,K_e),e(K_e,Rjo),e(pt,Pjo),e(pt,_d),e(_d,Bjo),e(_d,Z_e),e(Z_e,Ijo),e(_d,Njo),e(_d,BX),e(BX,qjo),e(_d,jjo),e(pt,Djo),M(_4,pt,null),e(Bo,Gjo),e(Bo,eo),M(a9,eo,null),e(eo,Ojo),e(eo,eue),e(eue,Vjo),e(eo,Xjo),e(eo,Wa),e(Wa,zjo),e(Wa,oue),e(oue,Wjo),e(Wa,Qjo),e(Wa,rue),e(rue,Ujo),e(Wa,Hjo),e(Wa,tue),e(tue,Jjo),e(Wa,Yjo),e(eo,Kjo),e(eo,U),e(U,u4),e(u4,aue),e(aue,Zjo),e(u4,eDo),e(u4,IX),e(IX,oDo),e(u4,rDo),e(U,tDo),e(U,b4),e(b4,nue),e(nue,aDo),e(b4,nDo),e(b4,NX),e(NX,sDo),e(b4,lDo),e(U,iDo),e(U,v4),e(v4,sue),e(sue,dDo),e(v4,cDo),e(v4,qX),e(qX,fDo),e(v4,mDo),e(U,gDo),e(U,F4),e(F4,lue),e(lue,hDo),e(F4,pDo),e(F4,jX),e(jX,_Do),e(F4,uDo),e(U,bDo),e(U,T4),e(T4,iue),e(iue,vDo),e(T4,FDo),e(T4,DX),e(DX,TDo),e(T4,MDo),e(U,EDo),e(U,M4),e(M4,due),e(due,CDo),e(M4,wDo),e(M4,GX),e(GX,ADo),e(M4,LDo),e(U,yDo),e(U,E4),e(E4,cue),e(cue,xDo),e(E4,$Do),e(E4,OX),e(OX,kDo),e(E4,SDo),e(U,RDo),e(U,C4),e(C4,fue),e(fue,PDo),e(C4,BDo),e(C4,VX),e(VX,IDo),e(C4,NDo),e(U,qDo),e(U,w4),e(w4,mue),e(mue,jDo),e(w4,DDo),e(w4,XX),e(XX,GDo),e(w4,ODo),e(U,VDo),e(U,A4),e(A4,gue),e(gue,XDo),e(A4,zDo),e(A4,zX),e(zX,WDo),e(A4,QDo),e(U,UDo),e(U,L4),e(L4,hue),e(hue,HDo),e(L4,JDo),e(L4,WX),e(WX,YDo),e(L4,KDo),e(U,ZDo),e(U,y4),e(y4,pue),e(pue,eGo),e(y4,oGo),e(y4,QX),e(QX,rGo),e(y4,tGo),e(U,aGo),e(U,x4),e(x4,_ue),e(_ue,nGo),e(x4,sGo),e(x4,UX),e(UX,lGo),e(x4,iGo),e(U,dGo),e(U,$4),e($4,uue),e(uue,cGo),e($4,fGo),e($4,HX),e(HX,mGo),e($4,gGo),e(U,hGo),e(U,k4),e(k4,bue),e(bue,pGo),e(k4,_Go),e(k4,JX),e(JX,uGo),e(k4,bGo),e(U,vGo),e(U,S4),e(S4,vue),e(vue,FGo),e(S4,TGo),e(S4,YX),e(YX,MGo),e(S4,EGo),e(U,CGo),e(U,R4),e(R4,Fue),e(Fue,wGo),e(R4,AGo),e(R4,KX),e(KX,LGo),e(R4,yGo),e(U,xGo),e(U,P4),e(P4,Tue),e(Tue,$Go),e(P4,kGo),e(P4,ZX),e(ZX,SGo),e(P4,RGo),e(U,PGo),e(U,B4),e(B4,Mue),e(Mue,BGo),e(B4,IGo),e(B4,ez),e(ez,NGo),e(B4,qGo),e(U,jGo),e(U,I4),e(I4,Eue),e(Eue,DGo),e(I4,GGo),e(I4,oz),e(oz,OGo),e(I4,VGo),e(U,XGo),e(U,N4),e(N4,Cue),e(Cue,zGo),e(N4,WGo),e(N4,rz),e(rz,QGo),e(N4,UGo),e(U,HGo),e(U,q4),e(q4,wue),e(wue,JGo),e(q4,YGo),e(q4,tz),e(tz,KGo),e(q4,ZGo),e(U,eOo),e(U,j4),e(j4,Aue),e(Aue,oOo),e(j4,rOo),e(j4,az),e(az,tOo),e(j4,aOo),e(U,nOo),e(U,D4),e(D4,Lue),e(Lue,sOo),e(D4,lOo),e(D4,nz),e(nz,iOo),e(D4,dOo),e(U,cOo),e(U,G4),e(G4,yue),e(yue,fOo),e(G4,mOo),e(G4,sz),e(sz,gOo),e(G4,hOo),e(U,pOo),e(U,O4),e(O4,xue),e(xue,_Oo),e(O4,uOo),e(O4,lz),e(lz,bOo),e(O4,vOo),e(U,FOo),e(U,V4),e(V4,$ue),e($ue,TOo),e(V4,MOo),e(V4,iz),e(iz,EOo),e(V4,COo),e(U,wOo),e(U,X4),e(X4,kue),e(kue,AOo),e(X4,LOo),e(X4,dz),e(dz,yOo),e(X4,xOo),e(U,$Oo),e(U,z4),e(z4,Sue),e(Sue,kOo),e(z4,SOo),e(z4,cz),e(cz,ROo),e(z4,POo),e(U,BOo),e(U,W4),e(W4,Rue),e(Rue,IOo),e(W4,NOo),e(W4,fz),e(fz,qOo),e(W4,jOo),e(U,DOo),e(U,Q4),e(Q4,Pue),e(Pue,GOo),e(Q4,OOo),e(Q4,mz),e(mz,VOo),e(Q4,XOo),e(U,zOo),e(U,U4),e(U4,Bue),e(Bue,WOo),e(U4,QOo),e(U4,gz),e(gz,UOo),e(U4,HOo),e(U,JOo),e(U,H4),e(H4,Iue),e(Iue,YOo),e(H4,KOo),e(H4,hz),e(hz,ZOo),e(H4,eVo),e(U,oVo),e(U,J4),e(J4,Nue),e(Nue,rVo),e(J4,tVo),e(J4,que),e(que,aVo),e(J4,nVo),e(U,sVo),e(U,Y4),e(Y4,jue),e(jue,lVo),e(Y4,iVo),e(Y4,pz),e(pz,dVo),e(Y4,cVo),e(U,fVo),e(U,K4),e(K4,Due),e(Due,mVo),e(K4,gVo),e(K4,_z),e(_z,hVo),e(K4,pVo),e(U,_Vo),e(U,Z4),e(Z4,Gue),e(Gue,uVo),e(Z4,bVo),e(Z4,uz),e(uz,vVo),e(Z4,FVo),e(U,TVo),e(U,eb),e(eb,Oue),e(Oue,MVo),e(eb,EVo),e(eb,bz),e(bz,CVo),e(eb,wVo),e(eo,AVo),e(eo,ob),e(ob,LVo),e(ob,Vue),e(Vue,yVo),e(ob,xVo),e(ob,Xue),e(Xue,$Vo),e(eo,kVo),M(rb,eo,null),b(f,cUe,u),b(f,ud,u),e(ud,tb),e(tb,zue),M(n9,zue,null),e(ud,SVo),e(ud,Wue),e(Wue,RVo),b(f,fUe,u),b(f,Io,u),M(s9,Io,null),e(Io,PVo),e(Io,bd),e(bd,BVo),e(bd,vz),e(vz,IVo),e(bd,NVo),e(bd,Fz),e(Fz,qVo),e(bd,jVo),e(Io,DVo),e(Io,l9),e(l9,GVo),e(l9,Que),e(Que,OVo),e(l9,VVo),e(Io,XVo),e(Io,_t),M(i9,_t,null),e(_t,zVo),e(_t,Uue),e(Uue,WVo),e(_t,QVo),e(_t,vd),e(vd,UVo),e(vd,Hue),e(Hue,HVo),e(vd,JVo),e(vd,Tz),e(Tz,YVo),e(vd,KVo),e(_t,ZVo),M(ab,_t,null),e(Io,eXo),e(Io,oo),M(d9,oo,null),e(oo,oXo),e(oo,Jue),e(Jue,rXo),e(oo,tXo),e(oo,Qa),e(Qa,aXo),e(Qa,Yue),e(Yue,nXo),e(Qa,sXo),e(Qa,Kue),e(Kue,lXo),e(Qa,iXo),e(Qa,Zue),e(Zue,dXo),e(Qa,cXo),e(oo,fXo),e(oo,me),e(me,nb),e(nb,e2e),e(e2e,mXo),e(nb,gXo),e(nb,Mz),e(Mz,hXo),e(nb,pXo),e(me,_Xo),e(me,sb),e(sb,o2e),e(o2e,uXo),e(sb,bXo),e(sb,Ez),e(Ez,vXo),e(sb,FXo),e(me,TXo),e(me,lb),e(lb,r2e),e(r2e,MXo),e(lb,EXo),e(lb,Cz),e(Cz,CXo),e(lb,wXo),e(me,AXo),e(me,ib),e(ib,t2e),e(t2e,LXo),e(ib,yXo),e(ib,wz),e(wz,xXo),e(ib,$Xo),e(me,kXo),e(me,db),e(db,a2e),e(a2e,SXo),e(db,RXo),e(db,Az),e(Az,PXo),e(db,BXo),e(me,IXo),e(me,cb),e(cb,n2e),e(n2e,NXo),e(cb,qXo),e(cb,Lz),e(Lz,jXo),e(cb,DXo),e(me,GXo),e(me,fb),e(fb,s2e),e(s2e,OXo),e(fb,VXo),e(fb,yz),e(yz,XXo),e(fb,zXo),e(me,WXo),e(me,mb),e(mb,l2e),e(l2e,QXo),e(mb,UXo),e(mb,xz),e(xz,HXo),e(mb,JXo),e(me,YXo),e(me,gb),e(gb,i2e),e(i2e,KXo),e(gb,ZXo),e(gb,$z),e($z,ezo),e(gb,ozo),e(me,rzo),e(me,hb),e(hb,d2e),e(d2e,tzo),e(hb,azo),e(hb,kz),e(kz,nzo),e(hb,szo),e(me,lzo),e(me,pb),e(pb,c2e),e(c2e,izo),e(pb,dzo),e(pb,Sz),e(Sz,czo),e(pb,fzo),e(me,mzo),e(me,_b),e(_b,f2e),e(f2e,gzo),e(_b,hzo),e(_b,Rz),e(Rz,pzo),e(_b,_zo),e(me,uzo),e(me,ub),e(ub,m2e),e(m2e,bzo),e(ub,vzo),e(ub,Pz),e(Pz,Fzo),e(ub,Tzo),e(me,Mzo),e(me,bb),e(bb,g2e),e(g2e,Ezo),e(bb,Czo),e(bb,Bz),e(Bz,wzo),e(bb,Azo),e(me,Lzo),e(me,vb),e(vb,h2e),e(h2e,yzo),e(vb,xzo),e(vb,Iz),e(Iz,$zo),e(vb,kzo),e(me,Szo),e(me,Fb),e(Fb,p2e),e(p2e,Rzo),e(Fb,Pzo),e(Fb,Nz),e(Nz,Bzo),e(Fb,Izo),e(me,Nzo),e(me,Tb),e(Tb,_2e),e(_2e,qzo),e(Tb,jzo),e(Tb,qz),e(qz,Dzo),e(Tb,Gzo),e(me,Ozo),e(me,Mb),e(Mb,u2e),e(u2e,Vzo),e(Mb,Xzo),e(Mb,jz),e(jz,zzo),e(Mb,Wzo),e(me,Qzo),e(me,Eb),e(Eb,b2e),e(b2e,Uzo),e(Eb,Hzo),e(Eb,Dz),e(Dz,Jzo),e(Eb,Yzo),e(oo,Kzo),e(oo,Cb),e(Cb,Zzo),e(Cb,v2e),e(v2e,eWo),e(Cb,oWo),e(Cb,F2e),e(F2e,rWo),e(oo,tWo),M(wb,oo,null),b(f,mUe,u),b(f,Fd,u),e(Fd,Ab),e(Ab,T2e),M(c9,T2e,null),e(Fd,aWo),e(Fd,M2e),e(M2e,nWo),b(f,gUe,u),b(f,No,u),M(f9,No,null),e(No,sWo),e(No,Td),e(Td,lWo),e(Td,Gz),e(Gz,iWo),e(Td,dWo),e(Td,Oz),e(Oz,cWo),e(Td,fWo),e(No,mWo),e(No,m9),e(m9,gWo),e(m9,E2e),e(E2e,hWo),e(m9,pWo),e(No,_Wo),e(No,ut),M(g9,ut,null),e(ut,uWo),e(ut,C2e),e(C2e,bWo),e(ut,vWo),e(ut,Md),e(Md,FWo),e(Md,w2e),e(w2e,TWo),e(Md,MWo),e(Md,Vz),e(Vz,EWo),e(Md,CWo),e(ut,wWo),M(Lb,ut,null),e(No,AWo),e(No,ro),M(h9,ro,null),e(ro,LWo),e(ro,A2e),e(A2e,yWo),e(ro,xWo),e(ro,Ua),e(Ua,$Wo),e(Ua,L2e),e(L2e,kWo),e(Ua,SWo),e(Ua,y2e),e(y2e,RWo),e(Ua,PWo),e(Ua,x2e),e(x2e,BWo),e(Ua,IWo),e(ro,NWo),e(ro,N),e(N,yb),e(yb,$2e),e($2e,qWo),e(yb,jWo),e(yb,Xz),e(Xz,DWo),e(yb,GWo),e(N,OWo),e(N,xb),e(xb,k2e),e(k2e,VWo),e(xb,XWo),e(xb,zz),e(zz,zWo),e(xb,WWo),e(N,QWo),e(N,$b),e($b,S2e),e(S2e,UWo),e($b,HWo),e($b,Wz),e(Wz,JWo),e($b,YWo),e(N,KWo),e(N,kb),e(kb,R2e),e(R2e,ZWo),e(kb,eQo),e(kb,Qz),e(Qz,oQo),e(kb,rQo),e(N,tQo),e(N,Sb),e(Sb,P2e),e(P2e,aQo),e(Sb,nQo),e(Sb,Uz),e(Uz,sQo),e(Sb,lQo),e(N,iQo),e(N,Rb),e(Rb,B2e),e(B2e,dQo),e(Rb,cQo),e(Rb,Hz),e(Hz,fQo),e(Rb,mQo),e(N,gQo),e(N,Pb),e(Pb,I2e),e(I2e,hQo),e(Pb,pQo),e(Pb,Jz),e(Jz,_Qo),e(Pb,uQo),e(N,bQo),e(N,Bb),e(Bb,N2e),e(N2e,vQo),e(Bb,FQo),e(Bb,Yz),e(Yz,TQo),e(Bb,MQo),e(N,EQo),e(N,Ib),e(Ib,q2e),e(q2e,CQo),e(Ib,wQo),e(Ib,Kz),e(Kz,AQo),e(Ib,LQo),e(N,yQo),e(N,Nb),e(Nb,j2e),e(j2e,xQo),e(Nb,$Qo),e(Nb,Zz),e(Zz,kQo),e(Nb,SQo),e(N,RQo),e(N,qb),e(qb,D2e),e(D2e,PQo),e(qb,BQo),e(qb,eW),e(eW,IQo),e(qb,NQo),e(N,qQo),e(N,jb),e(jb,G2e),e(G2e,jQo),e(jb,DQo),e(jb,oW),e(oW,GQo),e(jb,OQo),e(N,VQo),e(N,Db),e(Db,O2e),e(O2e,XQo),e(Db,zQo),e(Db,rW),e(rW,WQo),e(Db,QQo),e(N,UQo),e(N,Gb),e(Gb,V2e),e(V2e,HQo),e(Gb,JQo),e(Gb,tW),e(tW,YQo),e(Gb,KQo),e(N,ZQo),e(N,Ob),e(Ob,X2e),e(X2e,eUo),e(Ob,oUo),e(Ob,aW),e(aW,rUo),e(Ob,tUo),e(N,aUo),e(N,Vb),e(Vb,z2e),e(z2e,nUo),e(Vb,sUo),e(Vb,nW),e(nW,lUo),e(Vb,iUo),e(N,dUo),e(N,Xb),e(Xb,W2e),e(W2e,cUo),e(Xb,fUo),e(Xb,sW),e(sW,mUo),e(Xb,gUo),e(N,hUo),e(N,zb),e(zb,Q2e),e(Q2e,pUo),e(zb,_Uo),e(zb,lW),e(lW,uUo),e(zb,bUo),e(N,vUo),e(N,Wb),e(Wb,U2e),e(U2e,FUo),e(Wb,TUo),e(Wb,iW),e(iW,MUo),e(Wb,EUo),e(N,CUo),e(N,Qb),e(Qb,H2e),e(H2e,wUo),e(Qb,AUo),e(Qb,dW),e(dW,LUo),e(Qb,yUo),e(N,xUo),e(N,Ub),e(Ub,J2e),e(J2e,$Uo),e(Ub,kUo),e(Ub,cW),e(cW,SUo),e(Ub,RUo),e(N,PUo),e(N,Hb),e(Hb,Y2e),e(Y2e,BUo),e(Hb,IUo),e(Hb,fW),e(fW,NUo),e(Hb,qUo),e(N,jUo),e(N,Jb),e(Jb,K2e),e(K2e,DUo),e(Jb,GUo),e(Jb,mW),e(mW,OUo),e(Jb,VUo),e(N,XUo),e(N,Yb),e(Yb,Z2e),e(Z2e,zUo),e(Yb,WUo),e(Yb,gW),e(gW,QUo),e(Yb,UUo),e(N,HUo),e(N,Kb),e(Kb,e1e),e(e1e,JUo),e(Kb,YUo),e(Kb,hW),e(hW,KUo),e(Kb,ZUo),e(N,eHo),e(N,Zb),e(Zb,o1e),e(o1e,oHo),e(Zb,rHo),e(Zb,pW),e(pW,tHo),e(Zb,aHo),e(N,nHo),e(N,ev),e(ev,r1e),e(r1e,sHo),e(ev,lHo),e(ev,_W),e(_W,iHo),e(ev,dHo),e(N,cHo),e(N,ov),e(ov,t1e),e(t1e,fHo),e(ov,mHo),e(ov,uW),e(uW,gHo),e(ov,hHo),e(N,pHo),e(N,rv),e(rv,a1e),e(a1e,_Ho),e(rv,uHo),e(rv,bW),e(bW,bHo),e(rv,vHo),e(N,FHo),e(N,tv),e(tv,n1e),e(n1e,THo),e(tv,MHo),e(tv,vW),e(vW,EHo),e(tv,CHo),e(N,wHo),e(N,av),e(av,s1e),e(s1e,AHo),e(av,LHo),e(av,FW),e(FW,yHo),e(av,xHo),e(N,$Ho),e(N,nv),e(nv,l1e),e(l1e,kHo),e(nv,SHo),e(nv,TW),e(TW,RHo),e(nv,PHo),e(N,BHo),e(N,sv),e(sv,i1e),e(i1e,IHo),e(sv,NHo),e(sv,MW),e(MW,qHo),e(sv,jHo),e(N,DHo),e(N,lv),e(lv,d1e),e(d1e,GHo),e(lv,OHo),e(lv,EW),e(EW,VHo),e(lv,XHo),e(N,zHo),e(N,iv),e(iv,c1e),e(c1e,WHo),e(iv,QHo),e(iv,CW),e(CW,UHo),e(iv,HHo),e(N,JHo),e(N,dv),e(dv,f1e),e(f1e,YHo),e(dv,KHo),e(dv,wW),e(wW,ZHo),e(dv,eJo),e(N,oJo),e(N,cv),e(cv,m1e),e(m1e,rJo),e(cv,tJo),e(cv,AW),e(AW,aJo),e(cv,nJo),e(N,sJo),e(N,fv),e(fv,g1e),e(g1e,lJo),e(fv,iJo),e(fv,LW),e(LW,dJo),e(fv,cJo),e(N,fJo),e(N,mv),e(mv,h1e),e(h1e,mJo),e(mv,gJo),e(mv,yW),e(yW,hJo),e(mv,pJo),e(N,_Jo),e(N,gv),e(gv,p1e),e(p1e,uJo),e(gv,bJo),e(gv,xW),e(xW,vJo),e(gv,FJo),e(N,TJo),e(N,hv),e(hv,_1e),e(_1e,MJo),e(hv,EJo),e(hv,$W),e($W,CJo),e(hv,wJo),e(N,AJo),e(N,pv),e(pv,u1e),e(u1e,LJo),e(pv,yJo),e(pv,kW),e(kW,xJo),e(pv,$Jo),e(N,kJo),e(N,_v),e(_v,b1e),e(b1e,SJo),e(_v,RJo),e(_v,SW),e(SW,PJo),e(_v,BJo),e(N,IJo),e(N,uv),e(uv,v1e),e(v1e,NJo),e(uv,qJo),e(uv,RW),e(RW,jJo),e(uv,DJo),e(N,GJo),e(N,bv),e(bv,F1e),e(F1e,OJo),e(bv,VJo),e(bv,PW),e(PW,XJo),e(bv,zJo),e(N,WJo),e(N,vv),e(vv,T1e),e(T1e,QJo),e(vv,UJo),e(vv,BW),e(BW,HJo),e(vv,JJo),e(N,YJo),e(N,Fv),e(Fv,M1e),e(M1e,KJo),e(Fv,ZJo),e(Fv,IW),e(IW,eYo),e(Fv,oYo),e(N,rYo),e(N,Tv),e(Tv,E1e),e(E1e,tYo),e(Tv,aYo),e(Tv,NW),e(NW,nYo),e(Tv,sYo),e(N,lYo),e(N,Mv),e(Mv,C1e),e(C1e,iYo),e(Mv,dYo),e(Mv,qW),e(qW,cYo),e(Mv,fYo),e(N,mYo),e(N,Ev),e(Ev,w1e),e(w1e,gYo),e(Ev,hYo),e(Ev,jW),e(jW,pYo),e(Ev,_Yo),e(N,uYo),e(N,Cv),e(Cv,A1e),e(A1e,bYo),e(Cv,vYo),e(Cv,DW),e(DW,FYo),e(Cv,TYo),e(N,MYo),e(N,wv),e(wv,L1e),e(L1e,EYo),e(wv,CYo),e(wv,GW),e(GW,wYo),e(wv,AYo),e(ro,LYo),e(ro,Av),e(Av,yYo),e(Av,y1e),e(y1e,xYo),e(Av,$Yo),e(Av,x1e),e(x1e,kYo),e(ro,SYo),M(Lv,ro,null),b(f,hUe,u),b(f,Ed,u),e(Ed,yv),e(yv,$1e),M(p9,$1e,null),e(Ed,RYo),e(Ed,k1e),e(k1e,PYo),b(f,pUe,u),b(f,qo,u),M(_9,qo,null),e(qo,BYo),e(qo,Cd),e(Cd,IYo),e(Cd,OW),e(OW,NYo),e(Cd,qYo),e(Cd,VW),e(VW,jYo),e(Cd,DYo),e(qo,GYo),e(qo,u9),e(u9,OYo),e(u9,S1e),e(S1e,VYo),e(u9,XYo),e(qo,zYo),e(qo,bt),M(b9,bt,null),e(bt,WYo),e(bt,R1e),e(R1e,QYo),e(bt,UYo),e(bt,wd),e(wd,HYo),e(wd,P1e),e(P1e,JYo),e(wd,YYo),e(wd,XW),e(XW,KYo),e(wd,ZYo),e(bt,eKo),M(xv,bt,null),e(qo,oKo),e(qo,to),M(v9,to,null),e(to,rKo),e(to,B1e),e(B1e,tKo),e(to,aKo),e(to,Ha),e(Ha,nKo),e(Ha,I1e),e(I1e,sKo),e(Ha,lKo),e(Ha,N1e),e(N1e,iKo),e(Ha,dKo),e(Ha,q1e),e(q1e,cKo),e(Ha,fKo),e(to,mKo),e(to,Z),e(Z,$v),e($v,j1e),e(j1e,gKo),e($v,hKo),e($v,zW),e(zW,pKo),e($v,_Ko),e(Z,uKo),e(Z,kv),e(kv,D1e),e(D1e,bKo),e(kv,vKo),e(kv,WW),e(WW,FKo),e(kv,TKo),e(Z,MKo),e(Z,Sv),e(Sv,G1e),e(G1e,EKo),e(Sv,CKo),e(Sv,QW),e(QW,wKo),e(Sv,AKo),e(Z,LKo),e(Z,Rv),e(Rv,O1e),e(O1e,yKo),e(Rv,xKo),e(Rv,UW),e(UW,$Ko),e(Rv,kKo),e(Z,SKo),e(Z,Pv),e(Pv,V1e),e(V1e,RKo),e(Pv,PKo),e(Pv,HW),e(HW,BKo),e(Pv,IKo),e(Z,NKo),e(Z,Bv),e(Bv,X1e),e(X1e,qKo),e(Bv,jKo),e(Bv,JW),e(JW,DKo),e(Bv,GKo),e(Z,OKo),e(Z,Iv),e(Iv,z1e),e(z1e,VKo),e(Iv,XKo),e(Iv,YW),e(YW,zKo),e(Iv,WKo),e(Z,QKo),e(Z,Nv),e(Nv,W1e),e(W1e,UKo),e(Nv,HKo),e(Nv,KW),e(KW,JKo),e(Nv,YKo),e(Z,KKo),e(Z,qv),e(qv,Q1e),e(Q1e,ZKo),e(qv,eZo),e(qv,ZW),e(ZW,oZo),e(qv,rZo),e(Z,tZo),e(Z,jv),e(jv,U1e),e(U1e,aZo),e(jv,nZo),e(jv,eQ),e(eQ,sZo),e(jv,lZo),e(Z,iZo),e(Z,Dv),e(Dv,H1e),e(H1e,dZo),e(Dv,cZo),e(Dv,oQ),e(oQ,fZo),e(Dv,mZo),e(Z,gZo),e(Z,Gv),e(Gv,J1e),e(J1e,hZo),e(Gv,pZo),e(Gv,rQ),e(rQ,_Zo),e(Gv,uZo),e(Z,bZo),e(Z,Ov),e(Ov,Y1e),e(Y1e,vZo),e(Ov,FZo),e(Ov,tQ),e(tQ,TZo),e(Ov,MZo),e(Z,EZo),e(Z,Vv),e(Vv,K1e),e(K1e,CZo),e(Vv,wZo),e(Vv,aQ),e(aQ,AZo),e(Vv,LZo),e(Z,yZo),e(Z,Xv),e(Xv,Z1e),e(Z1e,xZo),e(Xv,$Zo),e(Xv,nQ),e(nQ,kZo),e(Xv,SZo),e(Z,RZo),e(Z,zv),e(zv,e4e),e(e4e,PZo),e(zv,BZo),e(zv,sQ),e(sQ,IZo),e(zv,NZo),e(Z,qZo),e(Z,Wv),e(Wv,o4e),e(o4e,jZo),e(Wv,DZo),e(Wv,lQ),e(lQ,GZo),e(Wv,OZo),e(Z,VZo),e(Z,Qv),e(Qv,r4e),e(r4e,XZo),e(Qv,zZo),e(Qv,iQ),e(iQ,WZo),e(Qv,QZo),e(Z,UZo),e(Z,Uv),e(Uv,t4e),e(t4e,HZo),e(Uv,JZo),e(Uv,dQ),e(dQ,YZo),e(Uv,KZo),e(Z,ZZo),e(Z,Hv),e(Hv,a4e),e(a4e,eer),e(Hv,oer),e(Hv,cQ),e(cQ,rer),e(Hv,ter),e(Z,aer),e(Z,Jv),e(Jv,n4e),e(n4e,ner),e(Jv,ser),e(Jv,fQ),e(fQ,ler),e(Jv,ier),e(Z,der),e(Z,Yv),e(Yv,s4e),e(s4e,cer),e(Yv,fer),e(Yv,mQ),e(mQ,mer),e(Yv,ger),e(Z,her),e(Z,Kv),e(Kv,l4e),e(l4e,per),e(Kv,_er),e(Kv,gQ),e(gQ,uer),e(Kv,ber),e(Z,ver),e(Z,Zv),e(Zv,i4e),e(i4e,Fer),e(Zv,Ter),e(Zv,hQ),e(hQ,Mer),e(Zv,Eer),e(Z,Cer),e(Z,e5),e(e5,d4e),e(d4e,wer),e(e5,Aer),e(e5,pQ),e(pQ,Ler),e(e5,yer),e(Z,xer),e(Z,o5),e(o5,c4e),e(c4e,$er),e(o5,ker),e(o5,_Q),e(_Q,Ser),e(o5,Rer),e(Z,Per),e(Z,r5),e(r5,f4e),e(f4e,Ber),e(r5,Ier),e(r5,uQ),e(uQ,Ner),e(r5,qer),e(Z,jer),e(Z,t5),e(t5,m4e),e(m4e,Der),e(t5,Ger),e(t5,bQ),e(bQ,Oer),e(t5,Ver),e(Z,Xer),e(Z,a5),e(a5,g4e),e(g4e,zer),e(a5,Wer),e(a5,vQ),e(vQ,Qer),e(a5,Uer),e(Z,Her),e(Z,n5),e(n5,h4e),e(h4e,Jer),e(n5,Yer),e(n5,FQ),e(FQ,Ker),e(n5,Zer),e(Z,eor),e(Z,s5),e(s5,p4e),e(p4e,oor),e(s5,ror),e(s5,TQ),e(TQ,tor),e(s5,aor),e(to,nor),e(to,l5),e(l5,sor),e(l5,_4e),e(_4e,lor),e(l5,ior),e(l5,u4e),e(u4e,dor),e(to,cor),M(i5,to,null),b(f,_Ue,u),b(f,Ad,u),e(Ad,d5),e(d5,b4e),M(F9,b4e,null),e(Ad,mor),e(Ad,v4e),e(v4e,gor),b(f,uUe,u),b(f,jo,u),M(T9,jo,null),e(jo,hor),e(jo,Ld),e(Ld,por),e(Ld,MQ),e(MQ,_or),e(Ld,uor),e(Ld,EQ),e(EQ,bor),e(Ld,vor),e(jo,For),e(jo,M9),e(M9,Tor),e(M9,F4e),e(F4e,Mor),e(M9,Eor),e(jo,Cor),e(jo,vt),M(E9,vt,null),e(vt,wor),e(vt,T4e),e(T4e,Aor),e(vt,Lor),e(vt,yd),e(yd,yor),e(yd,M4e),e(M4e,xor),e(yd,$or),e(yd,CQ),e(CQ,kor),e(yd,Sor),e(vt,Ror),M(c5,vt,null),e(jo,Por),e(jo,ao),M(C9,ao,null),e(ao,Bor),e(ao,E4e),e(E4e,Ior),e(ao,Nor),e(ao,Ja),e(Ja,qor),e(Ja,C4e),e(C4e,jor),e(Ja,Dor),e(Ja,w4e),e(w4e,Gor),e(Ja,Oor),e(Ja,A4e),e(A4e,Vor),e(Ja,Xor),e(ao,zor),e(ao,Do),e(Do,f5),e(f5,L4e),e(L4e,Wor),e(f5,Qor),e(f5,wQ),e(wQ,Uor),e(f5,Hor),e(Do,Jor),e(Do,m5),e(m5,y4e),e(y4e,Yor),e(m5,Kor),e(m5,AQ),e(AQ,Zor),e(m5,err),e(Do,orr),e(Do,g5),e(g5,x4e),e(x4e,rrr),e(g5,trr),e(g5,LQ),e(LQ,arr),e(g5,nrr),e(Do,srr),e(Do,h5),e(h5,$4e),e($4e,lrr),e(h5,irr),e(h5,yQ),e(yQ,drr),e(h5,crr),e(Do,frr),e(Do,p5),e(p5,k4e),e(k4e,mrr),e(p5,grr),e(p5,xQ),e(xQ,hrr),e(p5,prr),e(Do,_rr),e(Do,_5),e(_5,S4e),e(S4e,urr),e(_5,brr),e(_5,$Q),e($Q,vrr),e(_5,Frr),e(ao,Trr),e(ao,u5),e(u5,Mrr),e(u5,R4e),e(R4e,Err),e(u5,Crr),e(u5,P4e),e(P4e,wrr),e(ao,Arr),M(b5,ao,null),b(f,bUe,u),b(f,xd,u),e(xd,v5),e(v5,B4e),M(w9,B4e,null),e(xd,Lrr),e(xd,I4e),e(I4e,yrr),b(f,vUe,u),b(f,Go,u),M(A9,Go,null),e(Go,xrr),e(Go,$d),e($d,$rr),e($d,kQ),e(kQ,krr),e($d,Srr),e($d,SQ),e(SQ,Rrr),e($d,Prr),e(Go,Brr),e(Go,L9),e(L9,Irr),e(L9,N4e),e(N4e,Nrr),e(L9,qrr),e(Go,jrr),e(Go,Ft),M(y9,Ft,null),e(Ft,Drr),e(Ft,q4e),e(q4e,Grr),e(Ft,Orr),e(Ft,kd),e(kd,Vrr),e(kd,j4e),e(j4e,Xrr),e(kd,zrr),e(kd,RQ),e(RQ,Wrr),e(kd,Qrr),e(Ft,Urr),M(F5,Ft,null),e(Go,Hrr),e(Go,no),M(x9,no,null),e(no,Jrr),e(no,D4e),e(D4e,Yrr),e(no,Krr),e(no,Ya),e(Ya,Zrr),e(Ya,G4e),e(G4e,etr),e(Ya,otr),e(Ya,O4e),e(O4e,rtr),e(Ya,ttr),e(Ya,V4e),e(V4e,atr),e(Ya,ntr),e(no,str),e(no,H),e(H,T5),e(T5,X4e),e(X4e,ltr),e(T5,itr),e(T5,PQ),e(PQ,dtr),e(T5,ctr),e(H,ftr),e(H,M5),e(M5,z4e),e(z4e,mtr),e(M5,gtr),e(M5,BQ),e(BQ,htr),e(M5,ptr),e(H,_tr),e(H,E5),e(E5,W4e),e(W4e,utr),e(E5,btr),e(E5,IQ),e(IQ,vtr),e(E5,Ftr),e(H,Ttr),e(H,C5),e(C5,Q4e),e(Q4e,Mtr),e(C5,Etr),e(C5,NQ),e(NQ,Ctr),e(C5,wtr),e(H,Atr),e(H,w5),e(w5,U4e),e(U4e,Ltr),e(w5,ytr),e(w5,qQ),e(qQ,xtr),e(w5,$tr),e(H,ktr),e(H,A5),e(A5,H4e),e(H4e,Str),e(A5,Rtr),e(A5,jQ),e(jQ,Ptr),e(A5,Btr),e(H,Itr),e(H,L5),e(L5,J4e),e(J4e,Ntr),e(L5,qtr),e(L5,DQ),e(DQ,jtr),e(L5,Dtr),e(H,Gtr),e(H,y5),e(y5,Y4e),e(Y4e,Otr),e(y5,Vtr),e(y5,GQ),e(GQ,Xtr),e(y5,ztr),e(H,Wtr),e(H,x5),e(x5,K4e),e(K4e,Qtr),e(x5,Utr),e(x5,OQ),e(OQ,Htr),e(x5,Jtr),e(H,Ytr),e(H,$5),e($5,Z4e),e(Z4e,Ktr),e($5,Ztr),e($5,VQ),e(VQ,ear),e($5,oar),e(H,rar),e(H,k5),e(k5,ebe),e(ebe,tar),e(k5,aar),e(k5,XQ),e(XQ,nar),e(k5,sar),e(H,lar),e(H,S5),e(S5,obe),e(obe,iar),e(S5,dar),e(S5,zQ),e(zQ,car),e(S5,far),e(H,mar),e(H,R5),e(R5,rbe),e(rbe,gar),e(R5,har),e(R5,WQ),e(WQ,par),e(R5,_ar),e(H,uar),e(H,P5),e(P5,tbe),e(tbe,bar),e(P5,Far),e(P5,QQ),e(QQ,Tar),e(P5,Mar),e(H,Ear),e(H,B5),e(B5,abe),e(abe,Car),e(B5,war),e(B5,UQ),e(UQ,Aar),e(B5,Lar),e(H,yar),e(H,I5),e(I5,nbe),e(nbe,xar),e(I5,$ar),e(I5,HQ),e(HQ,kar),e(I5,Sar),e(H,Rar),e(H,N5),e(N5,sbe),e(sbe,Par),e(N5,Bar),e(N5,JQ),e(JQ,Iar),e(N5,Nar),e(H,qar),e(H,q5),e(q5,lbe),e(lbe,jar),e(q5,Dar),e(q5,YQ),e(YQ,Gar),e(q5,Oar),e(H,Var),e(H,j5),e(j5,ibe),e(ibe,Xar),e(j5,zar),e(j5,KQ),e(KQ,War),e(j5,Qar),e(H,Uar),e(H,D5),e(D5,dbe),e(dbe,Har),e(D5,Jar),e(D5,ZQ),e(ZQ,Yar),e(D5,Kar),e(H,Zar),e(H,G5),e(G5,cbe),e(cbe,enr),e(G5,onr),e(G5,eU),e(eU,rnr),e(G5,tnr),e(H,anr),e(H,O5),e(O5,fbe),e(fbe,nnr),e(O5,snr),e(O5,oU),e(oU,lnr),e(O5,inr),e(H,dnr),e(H,V5),e(V5,mbe),e(mbe,cnr),e(V5,fnr),e(V5,rU),e(rU,mnr),e(V5,gnr),e(H,hnr),e(H,X5),e(X5,gbe),e(gbe,pnr),e(X5,_nr),e(X5,tU),e(tU,unr),e(X5,bnr),e(H,vnr),e(H,z5),e(z5,hbe),e(hbe,Fnr),e(z5,Tnr),e(z5,aU),e(aU,Mnr),e(z5,Enr),e(H,Cnr),e(H,W5),e(W5,pbe),e(pbe,wnr),e(W5,Anr),e(W5,nU),e(nU,Lnr),e(W5,ynr),e(H,xnr),e(H,Q5),e(Q5,_be),e(_be,$nr),e(Q5,knr),e(Q5,sU),e(sU,Snr),e(Q5,Rnr),e(H,Pnr),e(H,U5),e(U5,ube),e(ube,Bnr),e(U5,Inr),e(U5,lU),e(lU,Nnr),e(U5,qnr),e(H,jnr),e(H,H5),e(H5,bbe),e(bbe,Dnr),e(H5,Gnr),e(H5,iU),e(iU,Onr),e(H5,Vnr),e(H,Xnr),e(H,J5),e(J5,vbe),e(vbe,znr),e(J5,Wnr),e(J5,dU),e(dU,Qnr),e(J5,Unr),e(H,Hnr),e(H,Y5),e(Y5,Fbe),e(Fbe,Jnr),e(Y5,Ynr),e(Y5,cU),e(cU,Knr),e(Y5,Znr),e(H,esr),e(H,K5),e(K5,Tbe),e(Tbe,osr),e(K5,rsr),e(K5,fU),e(fU,tsr),e(K5,asr),e(H,nsr),e(H,Z5),e(Z5,Mbe),e(Mbe,ssr),e(Z5,lsr),e(Z5,mU),e(mU,isr),e(Z5,dsr),e(H,csr),e(H,eF),e(eF,Ebe),e(Ebe,fsr),e(eF,msr),e(eF,gU),e(gU,gsr),e(eF,hsr),e(H,psr),e(H,oF),e(oF,Cbe),e(Cbe,_sr),e(oF,usr),e(oF,hU),e(hU,bsr),e(oF,vsr),e(H,Fsr),e(H,rF),e(rF,wbe),e(wbe,Tsr),e(rF,Msr),e(rF,pU),e(pU,Esr),e(rF,Csr),e(H,wsr),e(H,tF),e(tF,Abe),e(Abe,Asr),e(tF,Lsr),e(tF,_U),e(_U,ysr),e(tF,xsr),e(no,$sr),e(no,aF),e(aF,ksr),e(aF,Lbe),e(Lbe,Ssr),e(aF,Rsr),e(aF,ybe),e(ybe,Psr),e(no,Bsr),M(nF,no,null),b(f,FUe,u),b(f,Sd,u),e(Sd,sF),e(sF,xbe),M($9,xbe,null),e(Sd,Isr),e(Sd,$be),e($be,Nsr),b(f,TUe,u),b(f,Oo,u),M(k9,Oo,null),e(Oo,qsr),e(Oo,Rd),e(Rd,jsr),e(Rd,uU),e(uU,Dsr),e(Rd,Gsr),e(Rd,bU),e(bU,Osr),e(Rd,Vsr),e(Oo,Xsr),e(Oo,S9),e(S9,zsr),e(S9,kbe),e(kbe,Wsr),e(S9,Qsr),e(Oo,Usr),e(Oo,Tt),M(R9,Tt,null),e(Tt,Hsr),e(Tt,Sbe),e(Sbe,Jsr),e(Tt,Ysr),e(Tt,Pd),e(Pd,Ksr),e(Pd,Rbe),e(Rbe,Zsr),e(Pd,elr),e(Pd,vU),e(vU,olr),e(Pd,rlr),e(Tt,tlr),M(lF,Tt,null),e(Oo,alr),e(Oo,so),M(P9,so,null),e(so,nlr),e(so,Pbe),e(Pbe,slr),e(so,llr),e(so,Ka),e(Ka,ilr),e(Ka,Bbe),e(Bbe,dlr),e(Ka,clr),e(Ka,Ibe),e(Ibe,flr),e(Ka,mlr),e(Ka,Nbe),e(Nbe,glr),e(Ka,hlr),e(so,plr),e(so,V),e(V,iF),e(iF,qbe),e(qbe,_lr),e(iF,ulr),e(iF,FU),e(FU,blr),e(iF,vlr),e(V,Flr),e(V,dF),e(dF,jbe),e(jbe,Tlr),e(dF,Mlr),e(dF,TU),e(TU,Elr),e(dF,Clr),e(V,wlr),e(V,cF),e(cF,Dbe),e(Dbe,Alr),e(cF,Llr),e(cF,MU),e(MU,ylr),e(cF,xlr),e(V,$lr),e(V,fF),e(fF,Gbe),e(Gbe,klr),e(fF,Slr),e(fF,EU),e(EU,Rlr),e(fF,Plr),e(V,Blr),e(V,mF),e(mF,Obe),e(Obe,Ilr),e(mF,Nlr),e(mF,CU),e(CU,qlr),e(mF,jlr),e(V,Dlr),e(V,gF),e(gF,Vbe),e(Vbe,Glr),e(gF,Olr),e(gF,wU),e(wU,Vlr),e(gF,Xlr),e(V,zlr),e(V,hF),e(hF,Xbe),e(Xbe,Wlr),e(hF,Qlr),e(hF,AU),e(AU,Ulr),e(hF,Hlr),e(V,Jlr),e(V,pF),e(pF,zbe),e(zbe,Ylr),e(pF,Klr),e(pF,LU),e(LU,Zlr),e(pF,eir),e(V,oir),e(V,_F),e(_F,Wbe),e(Wbe,rir),e(_F,tir),e(_F,yU),e(yU,air),e(_F,nir),e(V,sir),e(V,uF),e(uF,Qbe),e(Qbe,lir),e(uF,iir),e(uF,xU),e(xU,dir),e(uF,cir),e(V,fir),e(V,bF),e(bF,Ube),e(Ube,mir),e(bF,gir),e(bF,$U),e($U,hir),e(bF,pir),e(V,_ir),e(V,vF),e(vF,Hbe),e(Hbe,uir),e(vF,bir),e(vF,kU),e(kU,vir),e(vF,Fir),e(V,Tir),e(V,FF),e(FF,Jbe),e(Jbe,Mir),e(FF,Eir),e(FF,SU),e(SU,Cir),e(FF,wir),e(V,Air),e(V,TF),e(TF,Ybe),e(Ybe,Lir),e(TF,yir),e(TF,RU),e(RU,xir),e(TF,$ir),e(V,kir),e(V,MF),e(MF,Kbe),e(Kbe,Sir),e(MF,Rir),e(MF,PU),e(PU,Pir),e(MF,Bir),e(V,Iir),e(V,EF),e(EF,Zbe),e(Zbe,Nir),e(EF,qir),e(EF,BU),e(BU,jir),e(EF,Dir),e(V,Gir),e(V,CF),e(CF,eve),e(eve,Oir),e(CF,Vir),e(CF,IU),e(IU,Xir),e(CF,zir),e(V,Wir),e(V,wF),e(wF,ove),e(ove,Qir),e(wF,Uir),e(wF,NU),e(NU,Hir),e(wF,Jir),e(V,Yir),e(V,AF),e(AF,rve),e(rve,Kir),e(AF,Zir),e(AF,qU),e(qU,edr),e(AF,odr),e(V,rdr),e(V,LF),e(LF,tve),e(tve,tdr),e(LF,adr),e(LF,jU),e(jU,ndr),e(LF,sdr),e(V,ldr),e(V,yF),e(yF,ave),e(ave,idr),e(yF,ddr),e(yF,DU),e(DU,cdr),e(yF,fdr),e(V,mdr),e(V,xF),e(xF,nve),e(nve,gdr),e(xF,hdr),e(xF,GU),e(GU,pdr),e(xF,_dr),e(V,udr),e(V,$F),e($F,sve),e(sve,bdr),e($F,vdr),e($F,OU),e(OU,Fdr),e($F,Tdr),e(V,Mdr),e(V,kF),e(kF,lve),e(lve,Edr),e(kF,Cdr),e(kF,VU),e(VU,wdr),e(kF,Adr),e(V,Ldr),e(V,SF),e(SF,ive),e(ive,ydr),e(SF,xdr),e(SF,XU),e(XU,$dr),e(SF,kdr),e(V,Sdr),e(V,RF),e(RF,dve),e(dve,Rdr),e(RF,Pdr),e(RF,zU),e(zU,Bdr),e(RF,Idr),e(V,Ndr),e(V,PF),e(PF,cve),e(cve,qdr),e(PF,jdr),e(PF,WU),e(WU,Ddr),e(PF,Gdr),e(V,Odr),e(V,BF),e(BF,fve),e(fve,Vdr),e(BF,Xdr),e(BF,QU),e(QU,zdr),e(BF,Wdr),e(V,Qdr),e(V,IF),e(IF,mve),e(mve,Udr),e(IF,Hdr),e(IF,UU),e(UU,Jdr),e(IF,Ydr),e(V,Kdr),e(V,NF),e(NF,gve),e(gve,Zdr),e(NF,ecr),e(NF,HU),e(HU,ocr),e(NF,rcr),e(V,tcr),e(V,qF),e(qF,hve),e(hve,acr),e(qF,ncr),e(qF,JU),e(JU,scr),e(qF,lcr),e(V,icr),e(V,jF),e(jF,pve),e(pve,dcr),e(jF,ccr),e(jF,YU),e(YU,fcr),e(jF,mcr),e(V,gcr),e(V,DF),e(DF,_ve),e(_ve,hcr),e(DF,pcr),e(DF,KU),e(KU,_cr),e(DF,ucr),e(V,bcr),e(V,GF),e(GF,uve),e(uve,vcr),e(GF,Fcr),e(GF,ZU),e(ZU,Tcr),e(GF,Mcr),e(V,Ecr),e(V,OF),e(OF,bve),e(bve,Ccr),e(OF,wcr),e(OF,eH),e(eH,Acr),e(OF,Lcr),e(V,ycr),e(V,VF),e(VF,vve),e(vve,xcr),e(VF,$cr),e(VF,oH),e(oH,kcr),e(VF,Scr),e(V,Rcr),e(V,XF),e(XF,Fve),e(Fve,Pcr),e(XF,Bcr),e(XF,rH),e(rH,Icr),e(XF,Ncr),e(V,qcr),e(V,zF),e(zF,Tve),e(Tve,jcr),e(zF,Dcr),e(zF,tH),e(tH,Gcr),e(zF,Ocr),e(V,Vcr),e(V,WF),e(WF,Mve),e(Mve,Xcr),e(WF,zcr),e(WF,aH),e(aH,Wcr),e(WF,Qcr),e(V,Ucr),e(V,QF),e(QF,Eve),e(Eve,Hcr),e(QF,Jcr),e(QF,nH),e(nH,Ycr),e(QF,Kcr),e(V,Zcr),e(V,UF),e(UF,Cve),e(Cve,efr),e(UF,ofr),e(UF,sH),e(sH,rfr),e(UF,tfr),e(V,afr),e(V,HF),e(HF,wve),e(wve,nfr),e(HF,sfr),e(HF,lH),e(lH,lfr),e(HF,ifr),e(V,dfr),e(V,JF),e(JF,Ave),e(Ave,cfr),e(JF,ffr),e(JF,iH),e(iH,mfr),e(JF,gfr),e(so,hfr),e(so,YF),e(YF,pfr),e(YF,Lve),e(Lve,_fr),e(YF,ufr),e(YF,yve),e(yve,bfr),e(so,vfr),M(KF,so,null),b(f,MUe,u),b(f,Bd,u),e(Bd,ZF),e(ZF,xve),M(B9,xve,null),e(Bd,Ffr),e(Bd,$ve),e($ve,Tfr),b(f,EUe,u),b(f,Vo,u),M(I9,Vo,null),e(Vo,Mfr),e(Vo,Id),e(Id,Efr),e(Id,dH),e(dH,Cfr),e(Id,wfr),e(Id,cH),e(cH,Afr),e(Id,Lfr),e(Vo,yfr),e(Vo,N9),e(N9,xfr),e(N9,kve),e(kve,$fr),e(N9,kfr),e(Vo,Sfr),e(Vo,Mt),M(q9,Mt,null),e(Mt,Rfr),e(Mt,Sve),e(Sve,Pfr),e(Mt,Bfr),e(Mt,Nd),e(Nd,Ifr),e(Nd,Rve),e(Rve,Nfr),e(Nd,qfr),e(Nd,fH),e(fH,jfr),e(Nd,Dfr),e(Mt,Gfr),M(eT,Mt,null),e(Vo,Ofr),e(Vo,lo),M(j9,lo,null),e(lo,Vfr),e(lo,Pve),e(Pve,Xfr),e(lo,zfr),e(lo,Za),e(Za,Wfr),e(Za,Bve),e(Bve,Qfr),e(Za,Ufr),e(Za,Ive),e(Ive,Hfr),e(Za,Jfr),e(Za,Nve),e(Nve,Yfr),e(Za,Kfr),e(lo,Zfr),e(lo,qve),e(qve,oT),e(oT,jve),e(jve,emr),e(oT,omr),e(oT,mH),e(mH,rmr),e(oT,tmr),e(lo,amr),e(lo,rT),e(rT,nmr),e(rT,Dve),e(Dve,smr),e(rT,lmr),e(rT,Gve),e(Gve,imr),e(lo,dmr),M(tT,lo,null),b(f,CUe,u),b(f,qd,u),e(qd,aT),e(aT,Ove),M(D9,Ove,null),e(qd,cmr),e(qd,Vve),e(Vve,fmr),b(f,wUe,u),b(f,Xo,u),M(G9,Xo,null),e(Xo,mmr),e(Xo,jd),e(jd,gmr),e(jd,gH),e(gH,hmr),e(jd,pmr),e(jd,hH),e(hH,_mr),e(jd,umr),e(Xo,bmr),e(Xo,O9),e(O9,vmr),e(O9,Xve),e(Xve,Fmr),e(O9,Tmr),e(Xo,Mmr),e(Xo,Et),M(V9,Et,null),e(Et,Emr),e(Et,zve),e(zve,Cmr),e(Et,wmr),e(Et,Dd),e(Dd,Amr),e(Dd,Wve),e(Wve,Lmr),e(Dd,ymr),e(Dd,pH),e(pH,xmr),e(Dd,$mr),e(Et,kmr),M(nT,Et,null),e(Xo,Smr),e(Xo,io),M(X9,io,null),e(io,Rmr),e(io,Qve),e(Qve,Pmr),e(io,Bmr),e(io,en),e(en,Imr),e(en,Uve),e(Uve,Nmr),e(en,qmr),e(en,Hve),e(Hve,jmr),e(en,Dmr),e(en,Jve),e(Jve,Gmr),e(en,Omr),e(io,Vmr),e(io,be),e(be,sT),e(sT,Yve),e(Yve,Xmr),e(sT,zmr),e(sT,_H),e(_H,Wmr),e(sT,Qmr),e(be,Umr),e(be,lT),e(lT,Kve),e(Kve,Hmr),e(lT,Jmr),e(lT,uH),e(uH,Ymr),e(lT,Kmr),e(be,Zmr),e(be,iT),e(iT,Zve),e(Zve,egr),e(iT,ogr),e(iT,bH),e(bH,rgr),e(iT,tgr),e(be,agr),e(be,dT),e(dT,e5e),e(e5e,ngr),e(dT,sgr),e(dT,vH),e(vH,lgr),e(dT,igr),e(be,dgr),e(be,dl),e(dl,o5e),e(o5e,cgr),e(dl,fgr),e(dl,FH),e(FH,mgr),e(dl,ggr),e(dl,TH),e(TH,hgr),e(dl,pgr),e(be,_gr),e(be,cT),e(cT,r5e),e(r5e,ugr),e(cT,bgr),e(cT,MH),e(MH,vgr),e(cT,Fgr),e(be,Tgr),e(be,cl),e(cl,t5e),e(t5e,Mgr),e(cl,Egr),e(cl,EH),e(EH,Cgr),e(cl,wgr),e(cl,CH),e(CH,Agr),e(cl,Lgr),e(be,ygr),e(be,fT),e(fT,a5e),e(a5e,xgr),e(fT,$gr),e(fT,wH),e(wH,kgr),e(fT,Sgr),e(be,Rgr),e(be,Ct),e(Ct,n5e),e(n5e,Pgr),e(Ct,Bgr),e(Ct,AH),e(AH,Igr),e(Ct,Ngr),e(Ct,LH),e(LH,qgr),e(Ct,jgr),e(Ct,yH),e(yH,Dgr),e(Ct,Ggr),e(be,Ogr),e(be,mT),e(mT,s5e),e(s5e,Vgr),e(mT,Xgr),e(mT,xH),e(xH,zgr),e(mT,Wgr),e(be,Qgr),e(be,gT),e(gT,l5e),e(l5e,Ugr),e(gT,Hgr),e(gT,$H),e($H,Jgr),e(gT,Ygr),e(be,Kgr),e(be,hT),e(hT,i5e),e(i5e,Zgr),e(hT,ehr),e(hT,kH),e(kH,ohr),e(hT,rhr),e(be,thr),e(be,pT),e(pT,d5e),e(d5e,ahr),e(pT,nhr),e(pT,SH),e(SH,shr),e(pT,lhr),e(be,ihr),e(be,_T),e(_T,c5e),e(c5e,dhr),e(_T,chr),e(_T,RH),e(RH,fhr),e(_T,mhr),e(be,ghr),e(be,uT),e(uT,f5e),e(f5e,hhr),e(uT,phr),e(uT,PH),e(PH,_hr),e(uT,uhr),e(be,bhr),e(be,bT),e(bT,m5e),e(m5e,vhr),e(bT,Fhr),e(bT,BH),e(BH,Thr),e(bT,Mhr),e(be,Ehr),e(be,vT),e(vT,g5e),e(g5e,Chr),e(vT,whr),e(vT,IH),e(IH,Ahr),e(vT,Lhr),e(io,yhr),e(io,FT),e(FT,xhr),e(FT,h5e),e(h5e,$hr),e(FT,khr),e(FT,p5e),e(p5e,Shr),e(io,Rhr),M(TT,io,null),b(f,AUe,u),b(f,Gd,u),e(Gd,MT),e(MT,_5e),M(z9,_5e,null),e(Gd,Phr),e(Gd,u5e),e(u5e,Bhr),b(f,LUe,u),b(f,zo,u),M(W9,zo,null),e(zo,Ihr),e(zo,Od),e(Od,Nhr),e(Od,NH),e(NH,qhr),e(Od,jhr),e(Od,qH),e(qH,Dhr),e(Od,Ghr),e(zo,Ohr),e(zo,Q9),e(Q9,Vhr),e(Q9,b5e),e(b5e,Xhr),e(Q9,zhr),e(zo,Whr),e(zo,wt),M(U9,wt,null),e(wt,Qhr),e(wt,v5e),e(v5e,Uhr),e(wt,Hhr),e(wt,Vd),e(Vd,Jhr),e(Vd,F5e),e(F5e,Yhr),e(Vd,Khr),e(Vd,jH),e(jH,Zhr),e(Vd,epr),e(wt,opr),M(ET,wt,null),e(zo,rpr),e(zo,co),M(H9,co,null),e(co,tpr),e(co,T5e),e(T5e,apr),e(co,npr),e(co,on),e(on,spr),e(on,M5e),e(M5e,lpr),e(on,ipr),e(on,E5e),e(E5e,dpr),e(on,cpr),e(on,C5e),e(C5e,fpr),e(on,mpr),e(co,gpr),e(co,w5e),e(w5e,CT),e(CT,A5e),e(A5e,hpr),e(CT,ppr),e(CT,DH),e(DH,_pr),e(CT,upr),e(co,bpr),e(co,wT),e(wT,vpr),e(wT,L5e),e(L5e,Fpr),e(wT,Tpr),e(wT,y5e),e(y5e,Mpr),e(co,Epr),M(AT,co,null),b(f,yUe,u),b(f,Xd,u),e(Xd,LT),e(LT,x5e),M(J9,x5e,null),e(Xd,Cpr),e(Xd,$5e),e($5e,wpr),b(f,xUe,u),b(f,Wo,u),M(Y9,Wo,null),e(Wo,Apr),e(Wo,zd),e(zd,Lpr),e(zd,GH),e(GH,ypr),e(zd,xpr),e(zd,OH),e(OH,$pr),e(zd,kpr),e(Wo,Spr),e(Wo,K9),e(K9,Rpr),e(K9,k5e),e(k5e,Ppr),e(K9,Bpr),e(Wo,Ipr),e(Wo,At),M(Z9,At,null),e(At,Npr),e(At,S5e),e(S5e,qpr),e(At,jpr),e(At,Wd),e(Wd,Dpr),e(Wd,R5e),e(R5e,Gpr),e(Wd,Opr),e(Wd,VH),e(VH,Vpr),e(Wd,Xpr),e(At,zpr),M(yT,At,null),e(Wo,Wpr),e(Wo,fo),M(ex,fo,null),e(fo,Qpr),e(fo,P5e),e(P5e,Upr),e(fo,Hpr),e(fo,rn),e(rn,Jpr),e(rn,B5e),e(B5e,Ypr),e(rn,Kpr),e(rn,I5e),e(I5e,Zpr),e(rn,e_r),e(rn,N5e),e(N5e,o_r),e(rn,r_r),e(fo,t_r),e(fo,q5e),e(q5e,xT),e(xT,j5e),e(j5e,a_r),e(xT,n_r),e(xT,XH),e(XH,s_r),e(xT,l_r),e(fo,i_r),e(fo,$T),e($T,d_r),e($T,D5e),e(D5e,c_r),e($T,f_r),e($T,G5e),e(G5e,m_r),e(fo,g_r),M(kT,fo,null),b(f,$Ue,u),b(f,Qd,u),e(Qd,ST),e(ST,O5e),M(ox,O5e,null),e(Qd,h_r),e(Qd,V5e),e(V5e,p_r),b(f,kUe,u),b(f,Qo,u),M(rx,Qo,null),e(Qo,__r),e(Qo,Ud),e(Ud,u_r),e(Ud,zH),e(zH,b_r),e(Ud,v_r),e(Ud,WH),e(WH,F_r),e(Ud,T_r),e(Qo,M_r),e(Qo,tx),e(tx,E_r),e(tx,X5e),e(X5e,C_r),e(tx,w_r),e(Qo,A_r),e(Qo,Lt),M(ax,Lt,null),e(Lt,L_r),e(Lt,z5e),e(z5e,y_r),e(Lt,x_r),e(Lt,Hd),e(Hd,$_r),e(Hd,W5e),e(W5e,k_r),e(Hd,S_r),e(Hd,QH),e(QH,R_r),e(Hd,P_r),e(Lt,B_r),M(RT,Lt,null),e(Qo,I_r),e(Qo,mo),M(nx,mo,null),e(mo,N_r),e(mo,Q5e),e(Q5e,q_r),e(mo,j_r),e(mo,tn),e(tn,D_r),e(tn,U5e),e(U5e,G_r),e(tn,O_r),e(tn,H5e),e(H5e,V_r),e(tn,X_r),e(tn,J5e),e(J5e,z_r),e(tn,W_r),e(mo,Q_r),e(mo,Y5e),e(Y5e,PT),e(PT,K5e),e(K5e,U_r),e(PT,H_r),e(PT,UH),e(UH,J_r),e(PT,Y_r),e(mo,K_r),e(mo,BT),e(BT,Z_r),e(BT,Z5e),e(Z5e,eur),e(BT,our),e(BT,eFe),e(eFe,rur),e(mo,tur),M(IT,mo,null),b(f,SUe,u),b(f,Jd,u),e(Jd,NT),e(NT,oFe),M(sx,oFe,null),e(Jd,aur),e(Jd,rFe),e(rFe,nur),b(f,RUe,u),b(f,Uo,u),M(lx,Uo,null),e(Uo,sur),e(Uo,Yd),e(Yd,lur),e(Yd,HH),e(HH,iur),e(Yd,dur),e(Yd,JH),e(JH,cur),e(Yd,fur),e(Uo,mur),e(Uo,ix),e(ix,gur),e(ix,tFe),e(tFe,hur),e(ix,pur),e(Uo,_ur),e(Uo,yt),M(dx,yt,null),e(yt,uur),e(yt,aFe),e(aFe,bur),e(yt,vur),e(yt,Kd),e(Kd,Fur),e(Kd,nFe),e(nFe,Tur),e(Kd,Mur),e(Kd,YH),e(YH,Eur),e(Kd,Cur),e(yt,wur),M(qT,yt,null),e(Uo,Aur),e(Uo,go),M(cx,go,null),e(go,Lur),e(go,sFe),e(sFe,yur),e(go,xur),e(go,an),e(an,$ur),e(an,lFe),e(lFe,kur),e(an,Sur),e(an,iFe),e(iFe,Rur),e(an,Pur),e(an,dFe),e(dFe,Bur),e(an,Iur),e(go,Nur),e(go,Pe),e(Pe,jT),e(jT,cFe),e(cFe,qur),e(jT,jur),e(jT,KH),e(KH,Dur),e(jT,Gur),e(Pe,Our),e(Pe,DT),e(DT,fFe),e(fFe,Vur),e(DT,Xur),e(DT,ZH),e(ZH,zur),e(DT,Wur),e(Pe,Qur),e(Pe,GT),e(GT,mFe),e(mFe,Uur),e(GT,Hur),e(GT,eJ),e(eJ,Jur),e(GT,Yur),e(Pe,Kur),e(Pe,OT),e(OT,gFe),e(gFe,Zur),e(OT,e2r),e(OT,oJ),e(oJ,o2r),e(OT,r2r),e(Pe,t2r),e(Pe,VT),e(VT,hFe),e(hFe,a2r),e(VT,n2r),e(VT,rJ),e(rJ,s2r),e(VT,l2r),e(Pe,i2r),e(Pe,XT),e(XT,pFe),e(pFe,d2r),e(XT,c2r),e(XT,tJ),e(tJ,f2r),e(XT,m2r),e(Pe,g2r),e(Pe,zT),e(zT,_Fe),e(_Fe,h2r),e(zT,p2r),e(zT,aJ),e(aJ,_2r),e(zT,u2r),e(Pe,b2r),e(Pe,WT),e(WT,uFe),e(uFe,v2r),e(WT,F2r),e(WT,nJ),e(nJ,T2r),e(WT,M2r),e(Pe,E2r),e(Pe,QT),e(QT,bFe),e(bFe,C2r),e(QT,w2r),e(QT,sJ),e(sJ,A2r),e(QT,L2r),e(go,y2r),e(go,UT),e(UT,x2r),e(UT,vFe),e(vFe,$2r),e(UT,k2r),e(UT,FFe),e(FFe,S2r),e(go,R2r),M(HT,go,null),b(f,PUe,u),b(f,Zd,u),e(Zd,JT),e(JT,TFe),M(fx,TFe,null),e(Zd,P2r),e(Zd,MFe),e(MFe,B2r),b(f,BUe,u),b(f,Ho,u),M(mx,Ho,null),e(Ho,I2r),e(Ho,ec),e(ec,N2r),e(ec,lJ),e(lJ,q2r),e(ec,j2r),e(ec,iJ),e(iJ,D2r),e(ec,G2r),e(Ho,O2r),e(Ho,gx),e(gx,V2r),e(gx,EFe),e(EFe,X2r),e(gx,z2r),e(Ho,W2r),e(Ho,xt),M(hx,xt,null),e(xt,Q2r),e(xt,CFe),e(CFe,U2r),e(xt,H2r),e(xt,oc),e(oc,J2r),e(oc,wFe),e(wFe,Y2r),e(oc,K2r),e(oc,dJ),e(dJ,Z2r),e(oc,e1r),e(xt,o1r),M(YT,xt,null),e(Ho,r1r),e(Ho,ho),M(px,ho,null),e(ho,t1r),e(ho,AFe),e(AFe,a1r),e(ho,n1r),e(ho,nn),e(nn,s1r),e(nn,LFe),e(LFe,l1r),e(nn,i1r),e(nn,yFe),e(yFe,d1r),e(nn,c1r),e(nn,xFe),e(xFe,f1r),e(nn,m1r),e(ho,g1r),e(ho,st),e(st,KT),e(KT,$Fe),e($Fe,h1r),e(KT,p1r),e(KT,cJ),e(cJ,_1r),e(KT,u1r),e(st,b1r),e(st,ZT),e(ZT,kFe),e(kFe,v1r),e(ZT,F1r),e(ZT,fJ),e(fJ,T1r),e(ZT,M1r),e(st,E1r),e(st,e7),e(e7,SFe),e(SFe,C1r),e(e7,w1r),e(e7,mJ),e(mJ,A1r),e(e7,L1r),e(st,y1r),e(st,o7),e(o7,RFe),e(RFe,x1r),e(o7,$1r),e(o7,gJ),e(gJ,k1r),e(o7,S1r),e(st,R1r),e(st,r7),e(r7,PFe),e(PFe,P1r),e(r7,B1r),e(r7,hJ),e(hJ,I1r),e(r7,N1r),e(ho,q1r),e(ho,t7),e(t7,j1r),e(t7,BFe),e(BFe,D1r),e(t7,G1r),e(t7,IFe),e(IFe,O1r),e(ho,V1r),M(a7,ho,null),b(f,IUe,u),b(f,rc,u),e(rc,n7),e(n7,NFe),M(_x,NFe,null),e(rc,X1r),e(rc,qFe),e(qFe,z1r),b(f,NUe,u),b(f,Jo,u),M(ux,Jo,null),e(Jo,W1r),e(Jo,tc),e(tc,Q1r),e(tc,pJ),e(pJ,U1r),e(tc,H1r),e(tc,_J),e(_J,J1r),e(tc,Y1r),e(Jo,K1r),e(Jo,bx),e(bx,Z1r),e(bx,jFe),e(jFe,e4r),e(bx,o4r),e(Jo,r4r),e(Jo,$t),M(vx,$t,null),e($t,t4r),e($t,DFe),e(DFe,a4r),e($t,n4r),e($t,ac),e(ac,s4r),e(ac,GFe),e(GFe,l4r),e(ac,i4r),e(ac,uJ),e(uJ,d4r),e(ac,c4r),e($t,f4r),M(s7,$t,null),e(Jo,m4r),e(Jo,po),M(Fx,po,null),e(po,g4r),e(po,OFe),e(OFe,h4r),e(po,p4r),e(po,sn),e(sn,_4r),e(sn,VFe),e(VFe,u4r),e(sn,b4r),e(sn,XFe),e(XFe,v4r),e(sn,F4r),e(sn,zFe),e(zFe,T4r),e(sn,M4r),e(po,E4r),e(po,Le),e(Le,l7),e(l7,WFe),e(WFe,C4r),e(l7,w4r),e(l7,bJ),e(bJ,A4r),e(l7,L4r),e(Le,y4r),e(Le,i7),e(i7,QFe),e(QFe,x4r),e(i7,$4r),e(i7,vJ),e(vJ,k4r),e(i7,S4r),e(Le,R4r),e(Le,d7),e(d7,UFe),e(UFe,P4r),e(d7,B4r),e(d7,FJ),e(FJ,I4r),e(d7,N4r),e(Le,q4r),e(Le,c7),e(c7,HFe),e(HFe,j4r),e(c7,D4r),e(c7,TJ),e(TJ,G4r),e(c7,O4r),e(Le,V4r),e(Le,f7),e(f7,JFe),e(JFe,X4r),e(f7,z4r),e(f7,MJ),e(MJ,W4r),e(f7,Q4r),e(Le,U4r),e(Le,m7),e(m7,YFe),e(YFe,H4r),e(m7,J4r),e(m7,EJ),e(EJ,Y4r),e(m7,K4r),e(Le,Z4r),e(Le,g7),e(g7,KFe),e(KFe,ebr),e(g7,obr),e(g7,CJ),e(CJ,rbr),e(g7,tbr),e(Le,abr),e(Le,h7),e(h7,ZFe),e(ZFe,nbr),e(h7,sbr),e(h7,wJ),e(wJ,lbr),e(h7,ibr),e(Le,dbr),e(Le,p7),e(p7,eTe),e(eTe,cbr),e(p7,fbr),e(p7,AJ),e(AJ,mbr),e(p7,gbr),e(Le,hbr),e(Le,_7),e(_7,oTe),e(oTe,pbr),e(_7,_br),e(_7,LJ),e(LJ,ubr),e(_7,bbr),e(po,vbr),e(po,u7),e(u7,Fbr),e(u7,rTe),e(rTe,Tbr),e(u7,Mbr),e(u7,tTe),e(tTe,Ebr),e(po,Cbr),M(b7,po,null),b(f,qUe,u),b(f,nc,u),e(nc,v7),e(v7,aTe),M(Tx,aTe,null),e(nc,wbr),e(nc,nTe),e(nTe,Abr),b(f,jUe,u),b(f,Yo,u),M(Mx,Yo,null),e(Yo,Lbr),e(Yo,sc),e(sc,ybr),e(sc,yJ),e(yJ,xbr),e(sc,$br),e(sc,xJ),e(xJ,kbr),e(sc,Sbr),e(Yo,Rbr),e(Yo,Ex),e(Ex,Pbr),e(Ex,sTe),e(sTe,Bbr),e(Ex,Ibr),e(Yo,Nbr),e(Yo,kt),M(Cx,kt,null),e(kt,qbr),e(kt,lTe),e(lTe,jbr),e(kt,Dbr),e(kt,lc),e(lc,Gbr),e(lc,iTe),e(iTe,Obr),e(lc,Vbr),e(lc,$J),e($J,Xbr),e(lc,zbr),e(kt,Wbr),M(F7,kt,null),e(Yo,Qbr),e(Yo,_o),M(wx,_o,null),e(_o,Ubr),e(_o,dTe),e(dTe,Hbr),e(_o,Jbr),e(_o,ln),e(ln,Ybr),e(ln,cTe),e(cTe,Kbr),e(ln,Zbr),e(ln,fTe),e(fTe,evr),e(ln,ovr),e(ln,mTe),e(mTe,rvr),e(ln,tvr),e(_o,avr),e(_o,Ax),e(Ax,T7),e(T7,gTe),e(gTe,nvr),e(T7,svr),e(T7,kJ),e(kJ,lvr),e(T7,ivr),e(Ax,dvr),e(Ax,M7),e(M7,hTe),e(hTe,cvr),e(M7,fvr),e(M7,SJ),e(SJ,mvr),e(M7,gvr),e(_o,hvr),e(_o,E7),e(E7,pvr),e(E7,pTe),e(pTe,_vr),e(E7,uvr),e(E7,_Te),e(_Te,bvr),e(_o,vvr),M(C7,_o,null),b(f,DUe,u),b(f,ic,u),e(ic,w7),e(w7,uTe),M(Lx,uTe,null),e(ic,Fvr),e(ic,bTe),e(bTe,Tvr),b(f,GUe,u),b(f,Ko,u),M(yx,Ko,null),e(Ko,Mvr),e(Ko,dc),e(dc,Evr),e(dc,RJ),e(RJ,Cvr),e(dc,wvr),e(dc,PJ),e(PJ,Avr),e(dc,Lvr),e(Ko,yvr),e(Ko,xx),e(xx,xvr),e(xx,vTe),e(vTe,$vr),e(xx,kvr),e(Ko,Svr),e(Ko,St),M($x,St,null),e(St,Rvr),e(St,FTe),e(FTe,Pvr),e(St,Bvr),e(St,cc),e(cc,Ivr),e(cc,TTe),e(TTe,Nvr),e(cc,qvr),e(cc,BJ),e(BJ,jvr),e(cc,Dvr),e(St,Gvr),M(A7,St,null),e(Ko,Ovr),e(Ko,uo),M(kx,uo,null),e(uo,Vvr),e(uo,MTe),e(MTe,Xvr),e(uo,zvr),e(uo,dn),e(dn,Wvr),e(dn,ETe),e(ETe,Qvr),e(dn,Uvr),e(dn,CTe),e(CTe,Hvr),e(dn,Jvr),e(dn,wTe),e(wTe,Yvr),e(dn,Kvr),e(uo,Zvr),e(uo,lt),e(lt,L7),e(L7,ATe),e(ATe,e5r),e(L7,o5r),e(L7,IJ),e(IJ,r5r),e(L7,t5r),e(lt,a5r),e(lt,y7),e(y7,LTe),e(LTe,n5r),e(y7,s5r),e(y7,NJ),e(NJ,l5r),e(y7,i5r),e(lt,d5r),e(lt,x7),e(x7,yTe),e(yTe,c5r),e(x7,f5r),e(x7,qJ),e(qJ,m5r),e(x7,g5r),e(lt,h5r),e(lt,$7),e($7,xTe),e(xTe,p5r),e($7,_5r),e($7,jJ),e(jJ,u5r),e($7,b5r),e(lt,v5r),e(lt,k7),e(k7,$Te),e($Te,F5r),e(k7,T5r),e(k7,DJ),e(DJ,M5r),e(k7,E5r),e(uo,C5r),e(uo,S7),e(S7,w5r),e(S7,kTe),e(kTe,A5r),e(S7,L5r),e(S7,STe),e(STe,y5r),e(uo,x5r),M(R7,uo,null),b(f,OUe,u),b(f,fc,u),e(fc,P7),e(P7,RTe),M(Sx,RTe,null),e(fc,$5r),e(fc,PTe),e(PTe,k5r),b(f,VUe,u),b(f,Zo,u),M(Rx,Zo,null),e(Zo,S5r),e(Zo,mc),e(mc,R5r),e(mc,GJ),e(GJ,P5r),e(mc,B5r),e(mc,OJ),e(OJ,I5r),e(mc,N5r),e(Zo,q5r),e(Zo,Px),e(Px,j5r),e(Px,BTe),e(BTe,D5r),e(Px,G5r),e(Zo,O5r),e(Zo,Rt),M(Bx,Rt,null),e(Rt,V5r),e(Rt,ITe),e(ITe,X5r),e(Rt,z5r),e(Rt,gc),e(gc,W5r),e(gc,NTe),e(NTe,Q5r),e(gc,U5r),e(gc,VJ),e(VJ,H5r),e(gc,J5r),e(Rt,Y5r),M(B7,Rt,null),e(Zo,K5r),e(Zo,bo),M(Ix,bo,null),e(bo,Z5r),e(bo,qTe),e(qTe,eFr),e(bo,oFr),e(bo,cn),e(cn,rFr),e(cn,jTe),e(jTe,tFr),e(cn,aFr),e(cn,DTe),e(DTe,nFr),e(cn,sFr),e(cn,GTe),e(GTe,lFr),e(cn,iFr),e(bo,dFr),e(bo,fn),e(fn,I7),e(I7,OTe),e(OTe,cFr),e(I7,fFr),e(I7,XJ),e(XJ,mFr),e(I7,gFr),e(fn,hFr),e(fn,N7),e(N7,VTe),e(VTe,pFr),e(N7,_Fr),e(N7,zJ),e(zJ,uFr),e(N7,bFr),e(fn,vFr),e(fn,q7),e(q7,XTe),e(XTe,FFr),e(q7,TFr),e(q7,WJ),e(WJ,MFr),e(q7,EFr),e(fn,CFr),e(fn,j7),e(j7,zTe),e(zTe,wFr),e(j7,AFr),e(j7,QJ),e(QJ,LFr),e(j7,yFr),e(bo,xFr),e(bo,D7),e(D7,$Fr),e(D7,WTe),e(WTe,kFr),e(D7,SFr),e(D7,QTe),e(QTe,RFr),e(bo,PFr),M(G7,bo,null),b(f,XUe,u),b(f,hc,u),e(hc,O7),e(O7,UTe),M(Nx,UTe,null),e(hc,BFr),e(hc,HTe),e(HTe,IFr),b(f,zUe,u),b(f,er,u),M(qx,er,null),e(er,NFr),e(er,pc),e(pc,qFr),e(pc,UJ),e(UJ,jFr),e(pc,DFr),e(pc,HJ),e(HJ,GFr),e(pc,OFr),e(er,VFr),e(er,jx),e(jx,XFr),e(jx,JTe),e(JTe,zFr),e(jx,WFr),e(er,QFr),e(er,Pt),M(Dx,Pt,null),e(Pt,UFr),e(Pt,YTe),e(YTe,HFr),e(Pt,JFr),e(Pt,_c),e(_c,YFr),e(_c,KTe),e(KTe,KFr),e(_c,ZFr),e(_c,JJ),e(JJ,eTr),e(_c,oTr),e(Pt,rTr),M(V7,Pt,null),e(er,tTr),e(er,vo),M(Gx,vo,null),e(vo,aTr),e(vo,ZTe),e(ZTe,nTr),e(vo,sTr),e(vo,mn),e(mn,lTr),e(mn,e7e),e(e7e,iTr),e(mn,dTr),e(mn,o7e),e(o7e,cTr),e(mn,fTr),e(mn,r7e),e(r7e,mTr),e(mn,gTr),e(vo,hTr),e(vo,Ox),e(Ox,X7),e(X7,t7e),e(t7e,pTr),e(X7,_Tr),e(X7,YJ),e(YJ,uTr),e(X7,bTr),e(Ox,vTr),e(Ox,z7),e(z7,a7e),e(a7e,FTr),e(z7,TTr),e(z7,KJ),e(KJ,MTr),e(z7,ETr),e(vo,CTr),e(vo,W7),e(W7,wTr),e(W7,n7e),e(n7e,ATr),e(W7,LTr),e(W7,s7e),e(s7e,yTr),e(vo,xTr),M(Q7,vo,null),b(f,WUe,u),b(f,uc,u),e(uc,U7),e(U7,l7e),M(Vx,l7e,null),e(uc,$Tr),e(uc,i7e),e(i7e,kTr),b(f,QUe,u),b(f,or,u),M(Xx,or,null),e(or,STr),e(or,bc),e(bc,RTr),e(bc,ZJ),e(ZJ,PTr),e(bc,BTr),e(bc,eY),e(eY,ITr),e(bc,NTr),e(or,qTr),e(or,zx),e(zx,jTr),e(zx,d7e),e(d7e,DTr),e(zx,GTr),e(or,OTr),e(or,Bt),M(Wx,Bt,null),e(Bt,VTr),e(Bt,c7e),e(c7e,XTr),e(Bt,zTr),e(Bt,vc),e(vc,WTr),e(vc,f7e),e(f7e,QTr),e(vc,UTr),e(vc,oY),e(oY,HTr),e(vc,JTr),e(Bt,YTr),M(H7,Bt,null),e(or,KTr),e(or,Fo),M(Qx,Fo,null),e(Fo,ZTr),e(Fo,m7e),e(m7e,e7r),e(Fo,o7r),e(Fo,gn),e(gn,r7r),e(gn,g7e),e(g7e,t7r),e(gn,a7r),e(gn,h7e),e(h7e,n7r),e(gn,s7r),e(gn,p7e),e(p7e,l7r),e(gn,i7r),e(Fo,d7r),e(Fo,_7e),e(_7e,J7),e(J7,u7e),e(u7e,c7r),e(J7,f7r),e(J7,rY),e(rY,m7r),e(J7,g7r),e(Fo,h7r),e(Fo,Y7),e(Y7,p7r),e(Y7,b7e),e(b7e,_7r),e(Y7,u7r),e(Y7,v7e),e(v7e,b7r),e(Fo,v7r),M(K7,Fo,null),b(f,UUe,u),b(f,Fc,u),e(Fc,Z7),e(Z7,F7e),M(Ux,F7e,null),e(Fc,F7r),e(Fc,T7e),e(T7e,T7r),b(f,HUe,u),b(f,rr,u),M(Hx,rr,null),e(rr,M7r),e(rr,Tc),e(Tc,E7r),e(Tc,tY),e(tY,C7r),e(Tc,w7r),e(Tc,aY),e(aY,A7r),e(Tc,L7r),e(rr,y7r),e(rr,Jx),e(Jx,x7r),e(Jx,M7e),e(M7e,$7r),e(Jx,k7r),e(rr,S7r),e(rr,It),M(Yx,It,null),e(It,R7r),e(It,E7e),e(E7e,P7r),e(It,B7r),e(It,Mc),e(Mc,I7r),e(Mc,C7e),e(C7e,N7r),e(Mc,q7r),e(Mc,nY),e(nY,j7r),e(Mc,D7r),e(It,G7r),M(eM,It,null),e(rr,O7r),e(rr,To),M(Kx,To,null),e(To,V7r),e(To,w7e),e(w7e,X7r),e(To,z7r),e(To,hn),e(hn,W7r),e(hn,A7e),e(A7e,Q7r),e(hn,U7r),e(hn,L7e),e(L7e,H7r),e(hn,J7r),e(hn,y7e),e(y7e,Y7r),e(hn,K7r),e(To,Z7r),e(To,it),e(it,oM),e(oM,x7e),e(x7e,eMr),e(oM,oMr),e(oM,sY),e(sY,rMr),e(oM,tMr),e(it,aMr),e(it,rM),e(rM,$7e),e($7e,nMr),e(rM,sMr),e(rM,lY),e(lY,lMr),e(rM,iMr),e(it,dMr),e(it,tM),e(tM,k7e),e(k7e,cMr),e(tM,fMr),e(tM,iY),e(iY,mMr),e(tM,gMr),e(it,hMr),e(it,aM),e(aM,S7e),e(S7e,pMr),e(aM,_Mr),e(aM,dY),e(dY,uMr),e(aM,bMr),e(it,vMr),e(it,nM),e(nM,R7e),e(R7e,FMr),e(nM,TMr),e(nM,cY),e(cY,MMr),e(nM,EMr),e(To,CMr),e(To,sM),e(sM,wMr),e(sM,P7e),e(P7e,AMr),e(sM,LMr),e(sM,B7e),e(B7e,yMr),e(To,xMr),M(lM,To,null),b(f,JUe,u),b(f,Ec,u),e(Ec,iM),e(iM,I7e),M(Zx,I7e,null),e(Ec,$Mr),e(Ec,N7e),e(N7e,kMr),b(f,YUe,u),b(f,tr,u),M(e$,tr,null),e(tr,SMr),e(tr,Cc),e(Cc,RMr),e(Cc,fY),e(fY,PMr),e(Cc,BMr),e(Cc,mY),e(mY,IMr),e(Cc,NMr),e(tr,qMr),e(tr,o$),e(o$,jMr),e(o$,q7e),e(q7e,DMr),e(o$,GMr),e(tr,OMr),e(tr,Nt),M(r$,Nt,null),e(Nt,VMr),e(Nt,j7e),e(j7e,XMr),e(Nt,zMr),e(Nt,wc),e(wc,WMr),e(wc,D7e),e(D7e,QMr),e(wc,UMr),e(wc,gY),e(gY,HMr),e(wc,JMr),e(Nt,YMr),M(dM,Nt,null),e(tr,KMr),e(tr,Mo),M(t$,Mo,null),e(Mo,ZMr),e(Mo,G7e),e(G7e,eEr),e(Mo,oEr),e(Mo,pn),e(pn,rEr),e(pn,O7e),e(O7e,tEr),e(pn,aEr),e(pn,V7e),e(V7e,nEr),e(pn,sEr),e(pn,X7e),e(X7e,lEr),e(pn,iEr),e(Mo,dEr),e(Mo,z7e),e(z7e,cM),e(cM,W7e),e(W7e,cEr),e(cM,fEr),e(cM,hY),e(hY,mEr),e(cM,gEr),e(Mo,hEr),e(Mo,fM),e(fM,pEr),e(fM,Q7e),e(Q7e,_Er),e(fM,uEr),e(fM,U7e),e(U7e,bEr),e(Mo,vEr),M(mM,Mo,null),b(f,KUe,u),b(f,Ac,u),e(Ac,gM),e(gM,H7e),M(a$,H7e,null),e(Ac,FEr),e(Ac,J7e),e(J7e,TEr),b(f,ZUe,u),b(f,ar,u),M(n$,ar,null),e(ar,MEr),e(ar,Lc),e(Lc,EEr),e(Lc,pY),e(pY,CEr),e(Lc,wEr),e(Lc,_Y),e(_Y,AEr),e(Lc,LEr),e(ar,yEr),e(ar,s$),e(s$,xEr),e(s$,Y7e),e(Y7e,$Er),e(s$,kEr),e(ar,SEr),e(ar,qt),M(l$,qt,null),e(qt,REr),e(qt,K7e),e(K7e,PEr),e(qt,BEr),e(qt,yc),e(yc,IEr),e(yc,Z7e),e(Z7e,NEr),e(yc,qEr),e(yc,uY),e(uY,jEr),e(yc,DEr),e(qt,GEr),M(hM,qt,null),e(ar,OEr),e(ar,Rr),M(i$,Rr,null),e(Rr,VEr),e(Rr,eMe),e(eMe,XEr),e(Rr,zEr),e(Rr,_n),e(_n,WEr),e(_n,oMe),e(oMe,QEr),e(_n,UEr),e(_n,rMe),e(rMe,HEr),e(_n,JEr),e(_n,tMe),e(tMe,YEr),e(_n,KEr),e(Rr,ZEr),e(Rr,q),e(q,pM),e(pM,aMe),e(aMe,eCr),e(pM,oCr),e(pM,bY),e(bY,rCr),e(pM,tCr),e(q,aCr),e(q,_M),e(_M,nMe),e(nMe,nCr),e(_M,sCr),e(_M,vY),e(vY,lCr),e(_M,iCr),e(q,dCr),e(q,uM),e(uM,sMe),e(sMe,cCr),e(uM,fCr),e(uM,FY),e(FY,mCr),e(uM,gCr),e(q,hCr),e(q,bM),e(bM,lMe),e(lMe,pCr),e(bM,_Cr),e(bM,TY),e(TY,uCr),e(bM,bCr),e(q,vCr),e(q,vM),e(vM,iMe),e(iMe,FCr),e(vM,TCr),e(vM,MY),e(MY,MCr),e(vM,ECr),e(q,CCr),e(q,FM),e(FM,dMe),e(dMe,wCr),e(FM,ACr),e(FM,EY),e(EY,LCr),e(FM,yCr),e(q,xCr),e(q,TM),e(TM,cMe),e(cMe,$Cr),e(TM,kCr),e(TM,CY),e(CY,SCr),e(TM,RCr),e(q,PCr),e(q,MM),e(MM,fMe),e(fMe,BCr),e(MM,ICr),e(MM,wY),e(wY,NCr),e(MM,qCr),e(q,jCr),e(q,EM),e(EM,mMe),e(mMe,DCr),e(EM,GCr),e(EM,AY),e(AY,OCr),e(EM,VCr),e(q,XCr),e(q,CM),e(CM,gMe),e(gMe,zCr),e(CM,WCr),e(CM,LY),e(LY,QCr),e(CM,UCr),e(q,HCr),e(q,wM),e(wM,hMe),e(hMe,JCr),e(wM,YCr),e(wM,yY),e(yY,KCr),e(wM,ZCr),e(q,e3r),e(q,AM),e(AM,pMe),e(pMe,o3r),e(AM,r3r),e(AM,xY),e(xY,t3r),e(AM,a3r),e(q,n3r),e(q,LM),e(LM,_Me),e(_Me,s3r),e(LM,l3r),e(LM,$Y),e($Y,i3r),e(LM,d3r),e(q,c3r),e(q,yM),e(yM,uMe),e(uMe,f3r),e(yM,m3r),e(yM,kY),e(kY,g3r),e(yM,h3r),e(q,p3r),e(q,xM),e(xM,bMe),e(bMe,_3r),e(xM,u3r),e(xM,SY),e(SY,b3r),e(xM,v3r),e(q,F3r),e(q,$M),e($M,vMe),e(vMe,T3r),e($M,M3r),e($M,RY),e(RY,E3r),e($M,C3r),e(q,w3r),e(q,kM),e(kM,FMe),e(FMe,A3r),e(kM,L3r),e(kM,PY),e(PY,y3r),e(kM,x3r),e(q,$3r),e(q,SM),e(SM,TMe),e(TMe,k3r),e(SM,S3r),e(SM,BY),e(BY,R3r),e(SM,P3r),e(q,B3r),e(q,fl),e(fl,MMe),e(MMe,I3r),e(fl,N3r),e(fl,IY),e(IY,q3r),e(fl,j3r),e(fl,NY),e(NY,D3r),e(fl,G3r),e(q,O3r),e(q,RM),e(RM,EMe),e(EMe,V3r),e(RM,X3r),e(RM,qY),e(qY,z3r),e(RM,W3r),e(q,Q3r),e(q,PM),e(PM,CMe),e(CMe,U3r),e(PM,H3r),e(PM,jY),e(jY,J3r),e(PM,Y3r),e(q,K3r),e(q,BM),e(BM,wMe),e(wMe,Z3r),e(BM,e0r),e(BM,DY),e(DY,o0r),e(BM,r0r),e(q,t0r),e(q,IM),e(IM,AMe),e(AMe,a0r),e(IM,n0r),e(IM,GY),e(GY,s0r),e(IM,l0r),e(q,i0r),e(q,NM),e(NM,LMe),e(LMe,d0r),e(NM,c0r),e(NM,OY),e(OY,f0r),e(NM,m0r),e(q,g0r),e(q,qM),e(qM,yMe),e(yMe,h0r),e(qM,p0r),e(qM,VY),e(VY,_0r),e(qM,u0r),e(q,b0r),e(q,jM),e(jM,xMe),e(xMe,v0r),e(jM,F0r),e(jM,XY),e(XY,T0r),e(jM,M0r),e(q,E0r),e(q,DM),e(DM,$Me),e($Me,C0r),e(DM,w0r),e(DM,zY),e(zY,A0r),e(DM,L0r),e(q,y0r),e(q,GM),e(GM,kMe),e(kMe,x0r),e(GM,$0r),e(GM,WY),e(WY,k0r),e(GM,S0r),e(q,R0r),e(q,OM),e(OM,SMe),e(SMe,P0r),e(OM,B0r),e(OM,QY),e(QY,I0r),e(OM,N0r),e(q,q0r),e(q,VM),e(VM,RMe),e(RMe,j0r),e(VM,D0r),e(VM,UY),e(UY,G0r),e(VM,O0r),e(q,V0r),e(q,XM),e(XM,PMe),e(PMe,X0r),e(XM,z0r),e(XM,HY),e(HY,W0r),e(XM,Q0r),e(q,U0r),e(q,zM),e(zM,BMe),e(BMe,H0r),e(zM,J0r),e(zM,JY),e(JY,Y0r),e(zM,K0r),e(q,Z0r),e(q,WM),e(WM,IMe),e(IMe,ewr),e(WM,owr),e(WM,YY),e(YY,rwr),e(WM,twr),e(q,awr),e(q,QM),e(QM,NMe),e(NMe,nwr),e(QM,swr),e(QM,KY),e(KY,lwr),e(QM,iwr),e(q,dwr),e(q,UM),e(UM,qMe),e(qMe,cwr),e(UM,fwr),e(UM,ZY),e(ZY,mwr),e(UM,gwr),e(q,hwr),e(q,HM),e(HM,jMe),e(jMe,pwr),e(HM,_wr),e(HM,eK),e(eK,uwr),e(HM,bwr),e(q,vwr),e(q,JM),e(JM,DMe),e(DMe,Fwr),e(JM,Twr),e(JM,oK),e(oK,Mwr),e(JM,Ewr),e(q,Cwr),e(q,YM),e(YM,GMe),e(GMe,wwr),e(YM,Awr),e(YM,rK),e(rK,Lwr),e(YM,ywr),e(q,xwr),e(q,KM),e(KM,OMe),e(OMe,$wr),e(KM,kwr),e(KM,tK),e(tK,Swr),e(KM,Rwr),e(q,Pwr),e(q,ZM),e(ZM,VMe),e(VMe,Bwr),e(ZM,Iwr),e(ZM,aK),e(aK,Nwr),e(ZM,qwr),e(q,jwr),e(q,eE),e(eE,XMe),e(XMe,Dwr),e(eE,Gwr),e(eE,nK),e(nK,Owr),e(eE,Vwr),e(q,Xwr),e(q,oE),e(oE,zMe),e(zMe,zwr),e(oE,Wwr),e(oE,sK),e(sK,Qwr),e(oE,Uwr),e(q,Hwr),e(q,rE),e(rE,WMe),e(WMe,Jwr),e(rE,Ywr),e(rE,lK),e(lK,Kwr),e(rE,Zwr),e(q,e6r),e(q,tE),e(tE,QMe),e(QMe,o6r),e(tE,r6r),e(tE,iK),e(iK,t6r),e(tE,a6r),e(q,n6r),e(q,aE),e(aE,UMe),e(UMe,s6r),e(aE,l6r),e(aE,dK),e(dK,i6r),e(aE,d6r),e(q,c6r),e(q,nE),e(nE,HMe),e(HMe,f6r),e(nE,m6r),e(nE,cK),e(cK,g6r),e(nE,h6r),e(q,p6r),e(q,sE),e(sE,JMe),e(JMe,_6r),e(sE,u6r),e(sE,fK),e(fK,b6r),e(sE,v6r),e(q,F6r),e(q,lE),e(lE,YMe),e(YMe,T6r),e(lE,M6r),e(lE,mK),e(mK,E6r),e(lE,C6r),e(q,w6r),e(q,iE),e(iE,KMe),e(KMe,A6r),e(iE,L6r),e(iE,gK),e(gK,y6r),e(iE,x6r),e(q,$6r),e(q,dE),e(dE,ZMe),e(ZMe,k6r),e(dE,S6r),e(dE,hK),e(hK,R6r),e(dE,P6r),e(q,B6r),e(q,cE),e(cE,eEe),e(eEe,I6r),e(cE,N6r),e(cE,pK),e(pK,q6r),e(cE,j6r),e(Rr,D6r),M(fE,Rr,null),b(f,eHe,u),b(f,xc,u),e(xc,mE),e(mE,oEe),M(d$,oEe,null),e(xc,G6r),e(xc,rEe),e(rEe,O6r),b(f,oHe,u),b(f,nr,u),M(c$,nr,null),e(nr,V6r),e(nr,$c),e($c,X6r),e($c,_K),e(_K,z6r),e($c,W6r),e($c,uK),e(uK,Q6r),e($c,U6r),e(nr,H6r),e(nr,f$),e(f$,J6r),e(f$,tEe),e(tEe,Y6r),e(f$,K6r),e(nr,Z6r),e(nr,jt),M(m$,jt,null),e(jt,eAr),e(jt,aEe),e(aEe,oAr),e(jt,rAr),e(jt,kc),e(kc,tAr),e(kc,nEe),e(nEe,aAr),e(kc,nAr),e(kc,bK),e(bK,sAr),e(kc,lAr),e(jt,iAr),M(gE,jt,null),e(nr,dAr),e(nr,Pr),M(g$,Pr,null),e(Pr,cAr),e(Pr,sEe),e(sEe,fAr),e(Pr,mAr),e(Pr,un),e(un,gAr),e(un,lEe),e(lEe,hAr),e(un,pAr),e(un,iEe),e(iEe,_Ar),e(un,uAr),e(un,dEe),e(dEe,bAr),e(un,vAr),e(Pr,FAr),e(Pr,se),e(se,hE),e(hE,cEe),e(cEe,TAr),e(hE,MAr),e(hE,vK),e(vK,EAr),e(hE,CAr),e(se,wAr),e(se,pE),e(pE,fEe),e(fEe,AAr),e(pE,LAr),e(pE,FK),e(FK,yAr),e(pE,xAr),e(se,$Ar),e(se,_E),e(_E,mEe),e(mEe,kAr),e(_E,SAr),e(_E,TK),e(TK,RAr),e(_E,PAr),e(se,BAr),e(se,uE),e(uE,gEe),e(gEe,IAr),e(uE,NAr),e(uE,MK),e(MK,qAr),e(uE,jAr),e(se,DAr),e(se,bE),e(bE,hEe),e(hEe,GAr),e(bE,OAr),e(bE,EK),e(EK,VAr),e(bE,XAr),e(se,zAr),e(se,vE),e(vE,pEe),e(pEe,WAr),e(vE,QAr),e(vE,CK),e(CK,UAr),e(vE,HAr),e(se,JAr),e(se,FE),e(FE,_Ee),e(_Ee,YAr),e(FE,KAr),e(FE,wK),e(wK,ZAr),e(FE,eLr),e(se,oLr),e(se,TE),e(TE,uEe),e(uEe,rLr),e(TE,tLr),e(TE,AK),e(AK,aLr),e(TE,nLr),e(se,sLr),e(se,ME),e(ME,bEe),e(bEe,lLr),e(ME,iLr),e(ME,LK),e(LK,dLr),e(ME,cLr),e(se,fLr),e(se,EE),e(EE,vEe),e(vEe,mLr),e(EE,gLr),e(EE,yK),e(yK,hLr),e(EE,pLr),e(se,_Lr),e(se,CE),e(CE,FEe),e(FEe,uLr),e(CE,bLr),e(CE,xK),e(xK,vLr),e(CE,FLr),e(se,TLr),e(se,wE),e(wE,TEe),e(TEe,MLr),e(wE,ELr),e(wE,$K),e($K,CLr),e(wE,wLr),e(se,ALr),e(se,AE),e(AE,MEe),e(MEe,LLr),e(AE,yLr),e(AE,kK),e(kK,xLr),e(AE,$Lr),e(se,kLr),e(se,LE),e(LE,EEe),e(EEe,SLr),e(LE,RLr),e(LE,SK),e(SK,PLr),e(LE,BLr),e(se,ILr),e(se,yE),e(yE,CEe),e(CEe,NLr),e(yE,qLr),e(yE,RK),e(RK,jLr),e(yE,DLr),e(se,GLr),e(se,xE),e(xE,wEe),e(wEe,OLr),e(xE,VLr),e(xE,PK),e(PK,XLr),e(xE,zLr),e(se,WLr),e(se,$E),e($E,AEe),e(AEe,QLr),e($E,ULr),e($E,BK),e(BK,HLr),e($E,JLr),e(se,YLr),e(se,kE),e(kE,LEe),e(LEe,KLr),e(kE,ZLr),e(kE,IK),e(IK,eyr),e(kE,oyr),e(se,ryr),e(se,SE),e(SE,yEe),e(yEe,tyr),e(SE,ayr),e(SE,NK),e(NK,nyr),e(SE,syr),e(se,lyr),e(se,RE),e(RE,xEe),e(xEe,iyr),e(RE,dyr),e(RE,qK),e(qK,cyr),e(RE,fyr),e(se,myr),e(se,PE),e(PE,$Ee),e($Ee,gyr),e(PE,hyr),e(PE,jK),e(jK,pyr),e(PE,_yr),e(se,uyr),e(se,BE),e(BE,kEe),e(kEe,byr),e(BE,vyr),e(BE,DK),e(DK,Fyr),e(BE,Tyr),e(se,Myr),e(se,IE),e(IE,SEe),e(SEe,Eyr),e(IE,Cyr),e(IE,GK),e(GK,wyr),e(IE,Ayr),e(Pr,Lyr),M(NE,Pr,null),b(f,rHe,u),b(f,Sc,u),e(Sc,qE),e(qE,REe),M(h$,REe,null),e(Sc,yyr),e(Sc,PEe),e(PEe,xyr),b(f,tHe,u),b(f,sr,u),M(p$,sr,null),e(sr,$yr),e(sr,Rc),e(Rc,kyr),e(Rc,OK),e(OK,Syr),e(Rc,Ryr),e(Rc,VK),e(VK,Pyr),e(Rc,Byr),e(sr,Iyr),e(sr,_$),e(_$,Nyr),e(_$,BEe),e(BEe,qyr),e(_$,jyr),e(sr,Dyr),e(sr,Dt),M(u$,Dt,null),e(Dt,Gyr),e(Dt,IEe),e(IEe,Oyr),e(Dt,Vyr),e(Dt,Pc),e(Pc,Xyr),e(Pc,NEe),e(NEe,zyr),e(Pc,Wyr),e(Pc,XK),e(XK,Qyr),e(Pc,Uyr),e(Dt,Hyr),M(jE,Dt,null),e(sr,Jyr),e(sr,Br),M(b$,Br,null),e(Br,Yyr),e(Br,qEe),e(qEe,Kyr),e(Br,Zyr),e(Br,bn),e(bn,e8r),e(bn,jEe),e(jEe,o8r),e(bn,r8r),e(bn,DEe),e(DEe,t8r),e(bn,a8r),e(bn,GEe),e(GEe,n8r),e(bn,s8r),e(Br,l8r),e(Br,Me),e(Me,DE),e(DE,OEe),e(OEe,i8r),e(DE,d8r),e(DE,zK),e(zK,c8r),e(DE,f8r),e(Me,m8r),e(Me,GE),e(GE,VEe),e(VEe,g8r),e(GE,h8r),e(GE,WK),e(WK,p8r),e(GE,_8r),e(Me,u8r),e(Me,OE),e(OE,XEe),e(XEe,b8r),e(OE,v8r),e(OE,QK),e(QK,F8r),e(OE,T8r),e(Me,M8r),e(Me,VE),e(VE,zEe),e(zEe,E8r),e(VE,C8r),e(VE,UK),e(UK,w8r),e(VE,A8r),e(Me,L8r),e(Me,XE),e(XE,WEe),e(WEe,y8r),e(XE,x8r),e(XE,HK),e(HK,$8r),e(XE,k8r),e(Me,S8r),e(Me,zE),e(zE,QEe),e(QEe,R8r),e(zE,P8r),e(zE,JK),e(JK,B8r),e(zE,I8r),e(Me,N8r),e(Me,WE),e(WE,UEe),e(UEe,q8r),e(WE,j8r),e(WE,YK),e(YK,D8r),e(WE,G8r),e(Me,O8r),e(Me,QE),e(QE,HEe),e(HEe,V8r),e(QE,X8r),e(QE,KK),e(KK,z8r),e(QE,W8r),e(Me,Q8r),e(Me,UE),e(UE,JEe),e(JEe,U8r),e(UE,H8r),e(UE,ZK),e(ZK,J8r),e(UE,Y8r),e(Me,K8r),e(Me,HE),e(HE,YEe),e(YEe,Z8r),e(HE,e9r),e(HE,eZ),e(eZ,o9r),e(HE,r9r),e(Me,t9r),e(Me,JE),e(JE,KEe),e(KEe,a9r),e(JE,n9r),e(JE,oZ),e(oZ,s9r),e(JE,l9r),e(Me,i9r),e(Me,YE),e(YE,ZEe),e(ZEe,d9r),e(YE,c9r),e(YE,rZ),e(rZ,f9r),e(YE,m9r),e(Me,g9r),e(Me,KE),e(KE,eCe),e(eCe,h9r),e(KE,p9r),e(KE,tZ),e(tZ,_9r),e(KE,u9r),e(Br,b9r),M(ZE,Br,null),b(f,aHe,u),b(f,Bc,u),e(Bc,eC),e(eC,oCe),M(v$,oCe,null),e(Bc,v9r),e(Bc,rCe),e(rCe,F9r),b(f,nHe,u),b(f,lr,u),M(F$,lr,null),e(lr,T9r),e(lr,Ic),e(Ic,M9r),e(Ic,aZ),e(aZ,E9r),e(Ic,C9r),e(Ic,nZ),e(nZ,w9r),e(Ic,A9r),e(lr,L9r),e(lr,T$),e(T$,y9r),e(T$,tCe),e(tCe,x9r),e(T$,$9r),e(lr,k9r),e(lr,Gt),M(M$,Gt,null),e(Gt,S9r),e(Gt,aCe),e(aCe,R9r),e(Gt,P9r),e(Gt,Nc),e(Nc,B9r),e(Nc,nCe),e(nCe,I9r),e(Nc,N9r),e(Nc,sZ),e(sZ,q9r),e(Nc,j9r),e(Gt,D9r),M(oC,Gt,null),e(lr,G9r),e(lr,Ir),M(E$,Ir,null),e(Ir,O9r),e(Ir,sCe),e(sCe,V9r),e(Ir,X9r),e(Ir,vn),e(vn,z9r),e(vn,lCe),e(lCe,W9r),e(vn,Q9r),e(vn,iCe),e(iCe,U9r),e(vn,H9r),e(vn,dCe),e(dCe,J9r),e(vn,Y9r),e(Ir,K9r),e(Ir,Ve),e(Ve,rC),e(rC,cCe),e(cCe,Z9r),e(rC,exr),e(rC,lZ),e(lZ,oxr),e(rC,rxr),e(Ve,txr),e(Ve,tC),e(tC,fCe),e(fCe,axr),e(tC,nxr),e(tC,iZ),e(iZ,sxr),e(tC,lxr),e(Ve,ixr),e(Ve,ml),e(ml,mCe),e(mCe,dxr),e(ml,cxr),e(ml,dZ),e(dZ,fxr),e(ml,mxr),e(ml,cZ),e(cZ,gxr),e(ml,hxr),e(Ve,pxr),e(Ve,aC),e(aC,gCe),e(gCe,_xr),e(aC,uxr),e(aC,fZ),e(fZ,bxr),e(aC,vxr),e(Ve,Fxr),e(Ve,nC),e(nC,hCe),e(hCe,Txr),e(nC,Mxr),e(nC,mZ),e(mZ,Exr),e(nC,Cxr),e(Ve,wxr),e(Ve,sC),e(sC,pCe),e(pCe,Axr),e(sC,Lxr),e(sC,gZ),e(gZ,yxr),e(sC,xxr),e(Ve,$xr),e(Ve,lC),e(lC,_Ce),e(_Ce,kxr),e(lC,Sxr),e(lC,hZ),e(hZ,Rxr),e(lC,Pxr),e(Ve,Bxr),e(Ve,iC),e(iC,uCe),e(uCe,Ixr),e(iC,Nxr),e(iC,pZ),e(pZ,qxr),e(iC,jxr),e(Ir,Dxr),M(dC,Ir,null),b(f,sHe,u),b(f,qc,u),e(qc,cC),e(cC,bCe),M(C$,bCe,null),e(qc,Gxr),e(qc,vCe),e(vCe,Oxr),b(f,lHe,u),b(f,ir,u),M(w$,ir,null),e(ir,Vxr),e(ir,jc),e(jc,Xxr),e(jc,_Z),e(_Z,zxr),e(jc,Wxr),e(jc,uZ),e(uZ,Qxr),e(jc,Uxr),e(ir,Hxr),e(ir,A$),e(A$,Jxr),e(A$,FCe),e(FCe,Yxr),e(A$,Kxr),e(ir,Zxr),e(ir,Ot),M(L$,Ot,null),e(Ot,e$r),e(Ot,TCe),e(TCe,o$r),e(Ot,r$r),e(Ot,Dc),e(Dc,t$r),e(Dc,MCe),e(MCe,a$r),e(Dc,n$r),e(Dc,bZ),e(bZ,s$r),e(Dc,l$r),e(Ot,i$r),M(fC,Ot,null),e(ir,d$r),e(ir,Nr),M(y$,Nr,null),e(Nr,c$r),e(Nr,ECe),e(ECe,f$r),e(Nr,m$r),e(Nr,Fn),e(Fn,g$r),e(Fn,CCe),e(CCe,h$r),e(Fn,p$r),e(Fn,wCe),e(wCe,_$r),e(Fn,u$r),e(Fn,ACe),e(ACe,b$r),e(Fn,v$r),e(Nr,F$r),e(Nr,x$),e(x$,mC),e(mC,LCe),e(LCe,T$r),e(mC,M$r),e(mC,vZ),e(vZ,E$r),e(mC,C$r),e(x$,w$r),e(x$,gC),e(gC,yCe),e(yCe,A$r),e(gC,L$r),e(gC,FZ),e(FZ,y$r),e(gC,x$r),e(Nr,$$r),M(hC,Nr,null),b(f,iHe,u),b(f,Gc,u),e(Gc,pC),e(pC,xCe),M($$,xCe,null),e(Gc,k$r),e(Gc,$Ce),e($Ce,S$r),b(f,dHe,u),b(f,dr,u),M(k$,dr,null),e(dr,R$r),e(dr,Oc),e(Oc,P$r),e(Oc,TZ),e(TZ,B$r),e(Oc,I$r),e(Oc,MZ),e(MZ,N$r),e(Oc,q$r),e(dr,j$r),e(dr,S$),e(S$,D$r),e(S$,kCe),e(kCe,G$r),e(S$,O$r),e(dr,V$r),e(dr,Vt),M(R$,Vt,null),e(Vt,X$r),e(Vt,SCe),e(SCe,z$r),e(Vt,W$r),e(Vt,Vc),e(Vc,Q$r),e(Vc,RCe),e(RCe,U$r),e(Vc,H$r),e(Vc,EZ),e(EZ,J$r),e(Vc,Y$r),e(Vt,K$r),M(_C,Vt,null),e(dr,Z$r),e(dr,qr),M(P$,qr,null),e(qr,ekr),e(qr,PCe),e(PCe,okr),e(qr,rkr),e(qr,Tn),e(Tn,tkr),e(Tn,BCe),e(BCe,akr),e(Tn,nkr),e(Tn,ICe),e(ICe,skr),e(Tn,lkr),e(Tn,NCe),e(NCe,ikr),e(Tn,dkr),e(qr,ckr),e(qr,de),e(de,uC),e(uC,qCe),e(qCe,fkr),e(uC,mkr),e(uC,CZ),e(CZ,gkr),e(uC,hkr),e(de,pkr),e(de,bC),e(bC,jCe),e(jCe,_kr),e(bC,ukr),e(bC,wZ),e(wZ,bkr),e(bC,vkr),e(de,Fkr),e(de,vC),e(vC,DCe),e(DCe,Tkr),e(vC,Mkr),e(vC,AZ),e(AZ,Ekr),e(vC,Ckr),e(de,wkr),e(de,FC),e(FC,GCe),e(GCe,Akr),e(FC,Lkr),e(FC,LZ),e(LZ,ykr),e(FC,xkr),e(de,$kr),e(de,TC),e(TC,OCe),e(OCe,kkr),e(TC,Skr),e(TC,yZ),e(yZ,Rkr),e(TC,Pkr),e(de,Bkr),e(de,MC),e(MC,VCe),e(VCe,Ikr),e(MC,Nkr),e(MC,xZ),e(xZ,qkr),e(MC,jkr),e(de,Dkr),e(de,EC),e(EC,XCe),e(XCe,Gkr),e(EC,Okr),e(EC,$Z),e($Z,Vkr),e(EC,Xkr),e(de,zkr),e(de,CC),e(CC,zCe),e(zCe,Wkr),e(CC,Qkr),e(CC,kZ),e(kZ,Ukr),e(CC,Hkr),e(de,Jkr),e(de,wC),e(wC,WCe),e(WCe,Ykr),e(wC,Kkr),e(wC,SZ),e(SZ,Zkr),e(wC,eSr),e(de,oSr),e(de,AC),e(AC,QCe),e(QCe,rSr),e(AC,tSr),e(AC,RZ),e(RZ,aSr),e(AC,nSr),e(de,sSr),e(de,LC),e(LC,UCe),e(UCe,lSr),e(LC,iSr),e(LC,PZ),e(PZ,dSr),e(LC,cSr),e(de,fSr),e(de,yC),e(yC,HCe),e(HCe,mSr),e(yC,gSr),e(yC,BZ),e(BZ,hSr),e(yC,pSr),e(de,_Sr),e(de,xC),e(xC,JCe),e(JCe,uSr),e(xC,bSr),e(xC,IZ),e(IZ,vSr),e(xC,FSr),e(de,TSr),e(de,$C),e($C,YCe),e(YCe,MSr),e($C,ESr),e($C,NZ),e(NZ,CSr),e($C,wSr),e(de,ASr),e(de,kC),e(kC,KCe),e(KCe,LSr),e(kC,ySr),e(kC,qZ),e(qZ,xSr),e(kC,$Sr),e(de,kSr),e(de,SC),e(SC,ZCe),e(ZCe,SSr),e(SC,RSr),e(SC,jZ),e(jZ,PSr),e(SC,BSr),e(de,ISr),e(de,RC),e(RC,e3e),e(e3e,NSr),e(RC,qSr),e(RC,DZ),e(DZ,jSr),e(RC,DSr),e(de,GSr),e(de,PC),e(PC,o3e),e(o3e,OSr),e(PC,VSr),e(PC,GZ),e(GZ,XSr),e(PC,zSr),e(de,WSr),e(de,BC),e(BC,r3e),e(r3e,QSr),e(BC,USr),e(BC,OZ),e(OZ,HSr),e(BC,JSr),e(de,YSr),e(de,IC),e(IC,t3e),e(t3e,KSr),e(IC,ZSr),e(IC,VZ),e(VZ,eRr),e(IC,oRr),e(qr,rRr),M(NC,qr,null),b(f,cHe,u),b(f,Xc,u),e(Xc,qC),e(qC,a3e),M(B$,a3e,null),e(Xc,tRr),e(Xc,n3e),e(n3e,aRr),b(f,fHe,u),b(f,cr,u),M(I$,cr,null),e(cr,nRr),e(cr,zc),e(zc,sRr),e(zc,XZ),e(XZ,lRr),e(zc,iRr),e(zc,zZ),e(zZ,dRr),e(zc,cRr),e(cr,fRr),e(cr,N$),e(N$,mRr),e(N$,s3e),e(s3e,gRr),e(N$,hRr),e(cr,pRr),e(cr,Xt),M(q$,Xt,null),e(Xt,_Rr),e(Xt,l3e),e(l3e,uRr),e(Xt,bRr),e(Xt,Wc),e(Wc,vRr),e(Wc,i3e),e(i3e,FRr),e(Wc,TRr),e(Wc,WZ),e(WZ,MRr),e(Wc,ERr),e(Xt,CRr),M(jC,Xt,null),e(cr,wRr),e(cr,jr),M(j$,jr,null),e(jr,ARr),e(jr,d3e),e(d3e,LRr),e(jr,yRr),e(jr,Mn),e(Mn,xRr),e(Mn,c3e),e(c3e,$Rr),e(Mn,kRr),e(Mn,f3e),e(f3e,SRr),e(Mn,RRr),e(Mn,m3e),e(m3e,PRr),e(Mn,BRr),e(jr,IRr),e(jr,ye),e(ye,DC),e(DC,g3e),e(g3e,NRr),e(DC,qRr),e(DC,QZ),e(QZ,jRr),e(DC,DRr),e(ye,GRr),e(ye,GC),e(GC,h3e),e(h3e,ORr),e(GC,VRr),e(GC,UZ),e(UZ,XRr),e(GC,zRr),e(ye,WRr),e(ye,OC),e(OC,p3e),e(p3e,QRr),e(OC,URr),e(OC,HZ),e(HZ,HRr),e(OC,JRr),e(ye,YRr),e(ye,VC),e(VC,_3e),e(_3e,KRr),e(VC,ZRr),e(VC,JZ),e(JZ,ePr),e(VC,oPr),e(ye,rPr),e(ye,XC),e(XC,u3e),e(u3e,tPr),e(XC,aPr),e(XC,YZ),e(YZ,nPr),e(XC,sPr),e(ye,lPr),e(ye,zC),e(zC,b3e),e(b3e,iPr),e(zC,dPr),e(zC,KZ),e(KZ,cPr),e(zC,fPr),e(ye,mPr),e(ye,WC),e(WC,v3e),e(v3e,gPr),e(WC,hPr),e(WC,ZZ),e(ZZ,pPr),e(WC,_Pr),e(ye,uPr),e(ye,QC),e(QC,F3e),e(F3e,bPr),e(QC,vPr),e(QC,eee),e(eee,FPr),e(QC,TPr),e(ye,MPr),e(ye,UC),e(UC,T3e),e(T3e,EPr),e(UC,CPr),e(UC,oee),e(oee,wPr),e(UC,APr),e(ye,LPr),e(ye,HC),e(HC,M3e),e(M3e,yPr),e(HC,xPr),e(HC,ree),e(ree,$Pr),e(HC,kPr),e(jr,SPr),M(JC,jr,null),b(f,mHe,u),b(f,Qc,u),e(Qc,YC),e(YC,E3e),M(D$,E3e,null),e(Qc,RPr),e(Qc,C3e),e(C3e,PPr),b(f,gHe,u),b(f,fr,u),M(G$,fr,null),e(fr,BPr),e(fr,Uc),e(Uc,IPr),e(Uc,tee),e(tee,NPr),e(Uc,qPr),e(Uc,aee),e(aee,jPr),e(Uc,DPr),e(fr,GPr),e(fr,O$),e(O$,OPr),e(O$,w3e),e(w3e,VPr),e(O$,XPr),e(fr,zPr),e(fr,zt),M(V$,zt,null),e(zt,WPr),e(zt,A3e),e(A3e,QPr),e(zt,UPr),e(zt,Hc),e(Hc,HPr),e(Hc,L3e),e(L3e,JPr),e(Hc,YPr),e(Hc,nee),e(nee,KPr),e(Hc,ZPr),e(zt,eBr),M(KC,zt,null),e(fr,oBr),e(fr,Dr),M(X$,Dr,null),e(Dr,rBr),e(Dr,y3e),e(y3e,tBr),e(Dr,aBr),e(Dr,En),e(En,nBr),e(En,x3e),e(x3e,sBr),e(En,lBr),e(En,$3e),e($3e,iBr),e(En,dBr),e(En,k3e),e(k3e,cBr),e(En,fBr),e(Dr,mBr),e(Dr,te),e(te,ZC),e(ZC,S3e),e(S3e,gBr),e(ZC,hBr),e(ZC,see),e(see,pBr),e(ZC,_Br),e(te,uBr),e(te,e3),e(e3,R3e),e(R3e,bBr),e(e3,vBr),e(e3,lee),e(lee,FBr),e(e3,TBr),e(te,MBr),e(te,o3),e(o3,P3e),e(P3e,EBr),e(o3,CBr),e(o3,iee),e(iee,wBr),e(o3,ABr),e(te,LBr),e(te,r3),e(r3,B3e),e(B3e,yBr),e(r3,xBr),e(r3,dee),e(dee,$Br),e(r3,kBr),e(te,SBr),e(te,t3),e(t3,I3e),e(I3e,RBr),e(t3,PBr),e(t3,cee),e(cee,BBr),e(t3,IBr),e(te,NBr),e(te,a3),e(a3,N3e),e(N3e,qBr),e(a3,jBr),e(a3,fee),e(fee,DBr),e(a3,GBr),e(te,OBr),e(te,n3),e(n3,q3e),e(q3e,VBr),e(n3,XBr),e(n3,mee),e(mee,zBr),e(n3,WBr),e(te,QBr),e(te,s3),e(s3,j3e),e(j3e,UBr),e(s3,HBr),e(s3,gee),e(gee,JBr),e(s3,YBr),e(te,KBr),e(te,l3),e(l3,D3e),e(D3e,ZBr),e(l3,eIr),e(l3,hee),e(hee,oIr),e(l3,rIr),e(te,tIr),e(te,i3),e(i3,G3e),e(G3e,aIr),e(i3,nIr),e(i3,pee),e(pee,sIr),e(i3,lIr),e(te,iIr),e(te,d3),e(d3,O3e),e(O3e,dIr),e(d3,cIr),e(d3,_ee),e(_ee,fIr),e(d3,mIr),e(te,gIr),e(te,c3),e(c3,V3e),e(V3e,hIr),e(c3,pIr),e(c3,uee),e(uee,_Ir),e(c3,uIr),e(te,bIr),e(te,f3),e(f3,X3e),e(X3e,vIr),e(f3,FIr),e(f3,bee),e(bee,TIr),e(f3,MIr),e(te,EIr),e(te,m3),e(m3,z3e),e(z3e,CIr),e(m3,wIr),e(m3,vee),e(vee,AIr),e(m3,LIr),e(te,yIr),e(te,g3),e(g3,W3e),e(W3e,xIr),e(g3,$Ir),e(g3,Fee),e(Fee,kIr),e(g3,SIr),e(te,RIr),e(te,h3),e(h3,Q3e),e(Q3e,PIr),e(h3,BIr),e(h3,Tee),e(Tee,IIr),e(h3,NIr),e(te,qIr),e(te,p3),e(p3,U3e),e(U3e,jIr),e(p3,DIr),e(p3,Mee),e(Mee,GIr),e(p3,OIr),e(te,VIr),e(te,_3),e(_3,H3e),e(H3e,XIr),e(_3,zIr),e(_3,Eee),e(Eee,WIr),e(_3,QIr),e(te,UIr),e(te,u3),e(u3,J3e),e(J3e,HIr),e(u3,JIr),e(u3,Cee),e(Cee,YIr),e(u3,KIr),e(te,ZIr),e(te,b3),e(b3,Y3e),e(Y3e,eNr),e(b3,oNr),e(b3,wee),e(wee,rNr),e(b3,tNr),e(te,aNr),e(te,v3),e(v3,K3e),e(K3e,nNr),e(v3,sNr),e(v3,Aee),e(Aee,lNr),e(v3,iNr),e(te,dNr),e(te,F3),e(F3,Z3e),e(Z3e,cNr),e(F3,fNr),e(F3,Lee),e(Lee,mNr),e(F3,gNr),e(te,hNr),e(te,T3),e(T3,e0e),e(e0e,pNr),e(T3,_Nr),e(T3,yee),e(yee,uNr),e(T3,bNr),e(te,vNr),e(te,M3),e(M3,o0e),e(o0e,FNr),e(M3,TNr),e(M3,xee),e(xee,MNr),e(M3,ENr),e(te,CNr),e(te,E3),e(E3,r0e),e(r0e,wNr),e(E3,ANr),e(E3,$ee),e($ee,LNr),e(E3,yNr),e(te,xNr),e(te,C3),e(C3,t0e),e(t0e,$Nr),e(C3,kNr),e(C3,kee),e(kee,SNr),e(C3,RNr),e(Dr,PNr),M(w3,Dr,null),b(f,hHe,u),b(f,Jc,u),e(Jc,A3),e(A3,a0e),M(z$,a0e,null),e(Jc,BNr),e(Jc,n0e),e(n0e,INr),b(f,pHe,u),b(f,mr,u),M(W$,mr,null),e(mr,NNr),e(mr,Yc),e(Yc,qNr),e(Yc,See),e(See,jNr),e(Yc,DNr),e(Yc,Ree),e(Ree,GNr),e(Yc,ONr),e(mr,VNr),e(mr,Q$),e(Q$,XNr),e(Q$,s0e),e(s0e,zNr),e(Q$,WNr),e(mr,QNr),e(mr,Wt),M(U$,Wt,null),e(Wt,UNr),e(Wt,l0e),e(l0e,HNr),e(Wt,JNr),e(Wt,Kc),e(Kc,YNr),e(Kc,i0e),e(i0e,KNr),e(Kc,ZNr),e(Kc,Pee),e(Pee,eqr),e(Kc,oqr),e(Wt,rqr),M(L3,Wt,null),e(mr,tqr),e(mr,Gr),M(H$,Gr,null),e(Gr,aqr),e(Gr,d0e),e(d0e,nqr),e(Gr,sqr),e(Gr,Cn),e(Cn,lqr),e(Cn,c0e),e(c0e,iqr),e(Cn,dqr),e(Cn,f0e),e(f0e,cqr),e(Cn,fqr),e(Cn,m0e),e(m0e,mqr),e(Cn,gqr),e(Gr,hqr),e(Gr,ve),e(ve,y3),e(y3,g0e),e(g0e,pqr),e(y3,_qr),e(y3,Bee),e(Bee,uqr),e(y3,bqr),e(ve,vqr),e(ve,x3),e(x3,h0e),e(h0e,Fqr),e(x3,Tqr),e(x3,Iee),e(Iee,Mqr),e(x3,Eqr),e(ve,Cqr),e(ve,$3),e($3,p0e),e(p0e,wqr),e($3,Aqr),e($3,Nee),e(Nee,Lqr),e($3,yqr),e(ve,xqr),e(ve,k3),e(k3,_0e),e(_0e,$qr),e(k3,kqr),e(k3,qee),e(qee,Sqr),e(k3,Rqr),e(ve,Pqr),e(ve,S3),e(S3,u0e),e(u0e,Bqr),e(S3,Iqr),e(S3,jee),e(jee,Nqr),e(S3,qqr),e(ve,jqr),e(ve,R3),e(R3,b0e),e(b0e,Dqr),e(R3,Gqr),e(R3,Dee),e(Dee,Oqr),e(R3,Vqr),e(ve,Xqr),e(ve,P3),e(P3,v0e),e(v0e,zqr),e(P3,Wqr),e(P3,Gee),e(Gee,Qqr),e(P3,Uqr),e(ve,Hqr),e(ve,B3),e(B3,F0e),e(F0e,Jqr),e(B3,Yqr),e(B3,Oee),e(Oee,Kqr),e(B3,Zqr),e(ve,ejr),e(ve,I3),e(I3,T0e),e(T0e,ojr),e(I3,rjr),e(I3,Vee),e(Vee,tjr),e(I3,ajr),e(ve,njr),e(ve,N3),e(N3,M0e),e(M0e,sjr),e(N3,ljr),e(N3,Xee),e(Xee,ijr),e(N3,djr),e(ve,cjr),e(ve,q3),e(q3,E0e),e(E0e,fjr),e(q3,mjr),e(q3,zee),e(zee,gjr),e(q3,hjr),e(ve,pjr),e(ve,j3),e(j3,C0e),e(C0e,_jr),e(j3,ujr),e(j3,Wee),e(Wee,bjr),e(j3,vjr),e(ve,Fjr),e(ve,D3),e(D3,w0e),e(w0e,Tjr),e(D3,Mjr),e(D3,Qee),e(Qee,Ejr),e(D3,Cjr),e(ve,wjr),e(ve,G3),e(G3,A0e),e(A0e,Ajr),e(G3,Ljr),e(G3,Uee),e(Uee,yjr),e(G3,xjr),e(ve,$jr),e(ve,O3),e(O3,L0e),e(L0e,kjr),e(O3,Sjr),e(O3,Hee),e(Hee,Rjr),e(O3,Pjr),e(ve,Bjr),e(ve,V3),e(V3,y0e),e(y0e,Ijr),e(V3,Njr),e(V3,Jee),e(Jee,qjr),e(V3,jjr),e(ve,Djr),e(ve,X3),e(X3,x0e),e(x0e,Gjr),e(X3,Ojr),e(X3,Yee),e(Yee,Vjr),e(X3,Xjr),e(Gr,zjr),M(z3,Gr,null),b(f,_He,u),b(f,Zc,u),e(Zc,W3),e(W3,$0e),M(J$,$0e,null),e(Zc,Wjr),e(Zc,k0e),e(k0e,Qjr),b(f,uHe,u),b(f,gr,u),M(Y$,gr,null),e(gr,Ujr),e(gr,ef),e(ef,Hjr),e(ef,Kee),e(Kee,Jjr),e(ef,Yjr),e(ef,Zee),e(Zee,Kjr),e(ef,Zjr),e(gr,eDr),e(gr,K$),e(K$,oDr),e(K$,S0e),e(S0e,rDr),e(K$,tDr),e(gr,aDr),e(gr,Qt),M(Z$,Qt,null),e(Qt,nDr),e(Qt,R0e),e(R0e,sDr),e(Qt,lDr),e(Qt,of),e(of,iDr),e(of,P0e),e(P0e,dDr),e(of,cDr),e(of,eoe),e(eoe,fDr),e(of,mDr),e(Qt,gDr),M(Q3,Qt,null),e(gr,hDr),e(gr,Or),M(ek,Or,null),e(Or,pDr),e(Or,B0e),e(B0e,_Dr),e(Or,uDr),e(Or,wn),e(wn,bDr),e(wn,I0e),e(I0e,vDr),e(wn,FDr),e(wn,N0e),e(N0e,TDr),e(wn,MDr),e(wn,q0e),e(q0e,EDr),e(wn,CDr),e(Or,wDr),e(Or,ok),e(ok,U3),e(U3,j0e),e(j0e,ADr),e(U3,LDr),e(U3,ooe),e(ooe,yDr),e(U3,xDr),e(ok,$Dr),e(ok,H3),e(H3,D0e),e(D0e,kDr),e(H3,SDr),e(H3,roe),e(roe,RDr),e(H3,PDr),e(Or,BDr),M(J3,Or,null),b(f,bHe,u),b(f,rf,u),e(rf,Y3),e(Y3,G0e),M(rk,G0e,null),e(rf,IDr),e(rf,O0e),e(O0e,NDr),b(f,vHe,u),b(f,hr,u),M(tk,hr,null),e(hr,qDr),e(hr,tf),e(tf,jDr),e(tf,toe),e(toe,DDr),e(tf,GDr),e(tf,aoe),e(aoe,ODr),e(tf,VDr),e(hr,XDr),e(hr,ak),e(ak,zDr),e(ak,V0e),e(V0e,WDr),e(ak,QDr),e(hr,UDr),e(hr,Ut),M(nk,Ut,null),e(Ut,HDr),e(Ut,X0e),e(X0e,JDr),e(Ut,YDr),e(Ut,af),e(af,KDr),e(af,z0e),e(z0e,ZDr),e(af,eGr),e(af,noe),e(noe,oGr),e(af,rGr),e(Ut,tGr),M(K3,Ut,null),e(hr,aGr),e(hr,Vr),M(sk,Vr,null),e(Vr,nGr),e(Vr,W0e),e(W0e,sGr),e(Vr,lGr),e(Vr,An),e(An,iGr),e(An,Q0e),e(Q0e,dGr),e(An,cGr),e(An,U0e),e(U0e,fGr),e(An,mGr),e(An,H0e),e(H0e,gGr),e(An,hGr),e(Vr,pGr),e(Vr,J0e),e(J0e,Z3),e(Z3,Y0e),e(Y0e,_Gr),e(Z3,uGr),e(Z3,soe),e(soe,bGr),e(Z3,vGr),e(Vr,FGr),M(e0,Vr,null),b(f,FHe,u),b(f,nf,u),e(nf,o0),e(o0,K0e),M(lk,K0e,null),e(nf,TGr),e(nf,Z0e),e(Z0e,MGr),b(f,THe,u),b(f,pr,u),M(ik,pr,null),e(pr,EGr),e(pr,sf),e(sf,CGr),e(sf,loe),e(loe,wGr),e(sf,AGr),e(sf,ioe),e(ioe,LGr),e(sf,yGr),e(pr,xGr),e(pr,dk),e(dk,$Gr),e(dk,ewe),e(ewe,kGr),e(dk,SGr),e(pr,RGr),e(pr,Ht),M(ck,Ht,null),e(Ht,PGr),e(Ht,owe),e(owe,BGr),e(Ht,IGr),e(Ht,lf),e(lf,NGr),e(lf,rwe),e(rwe,qGr),e(lf,jGr),e(lf,doe),e(doe,DGr),e(lf,GGr),e(Ht,OGr),M(r0,Ht,null),e(pr,VGr),e(pr,Xr),M(fk,Xr,null),e(Xr,XGr),e(Xr,twe),e(twe,zGr),e(Xr,WGr),e(Xr,Ln),e(Ln,QGr),e(Ln,awe),e(awe,UGr),e(Ln,HGr),e(Ln,nwe),e(nwe,JGr),e(Ln,YGr),e(Ln,swe),e(swe,KGr),e(Ln,ZGr),e(Xr,eOr),e(Xr,ce),e(ce,t0),e(t0,lwe),e(lwe,oOr),e(t0,rOr),e(t0,coe),e(coe,tOr),e(t0,aOr),e(ce,nOr),e(ce,a0),e(a0,iwe),e(iwe,sOr),e(a0,lOr),e(a0,foe),e(foe,iOr),e(a0,dOr),e(ce,cOr),e(ce,n0),e(n0,dwe),e(dwe,fOr),e(n0,mOr),e(n0,moe),e(moe,gOr),e(n0,hOr),e(ce,pOr),e(ce,s0),e(s0,cwe),e(cwe,_Or),e(s0,uOr),e(s0,goe),e(goe,bOr),e(s0,vOr),e(ce,FOr),e(ce,l0),e(l0,fwe),e(fwe,TOr),e(l0,MOr),e(l0,hoe),e(hoe,EOr),e(l0,COr),e(ce,wOr),e(ce,i0),e(i0,mwe),e(mwe,AOr),e(i0,LOr),e(i0,poe),e(poe,yOr),e(i0,xOr),e(ce,$Or),e(ce,d0),e(d0,gwe),e(gwe,kOr),e(d0,SOr),e(d0,_oe),e(_oe,ROr),e(d0,POr),e(ce,BOr),e(ce,c0),e(c0,hwe),e(hwe,IOr),e(c0,NOr),e(c0,uoe),e(uoe,qOr),e(c0,jOr),e(ce,DOr),e(ce,f0),e(f0,pwe),e(pwe,GOr),e(f0,OOr),e(f0,boe),e(boe,VOr),e(f0,XOr),e(ce,zOr),e(ce,m0),e(m0,_we),e(_we,WOr),e(m0,QOr),e(m0,voe),e(voe,UOr),e(m0,HOr),e(ce,JOr),e(ce,g0),e(g0,uwe),e(uwe,YOr),e(g0,KOr),e(g0,Foe),e(Foe,ZOr),e(g0,eVr),e(ce,oVr),e(ce,h0),e(h0,bwe),e(bwe,rVr),e(h0,tVr),e(h0,Toe),e(Toe,aVr),e(h0,nVr),e(ce,sVr),e(ce,p0),e(p0,vwe),e(vwe,lVr),e(p0,iVr),e(p0,Moe),e(Moe,dVr),e(p0,cVr),e(ce,fVr),e(ce,_0),e(_0,Fwe),e(Fwe,mVr),e(_0,gVr),e(_0,Eoe),e(Eoe,hVr),e(_0,pVr),e(ce,_Vr),e(ce,u0),e(u0,Twe),e(Twe,uVr),e(u0,bVr),e(u0,Coe),e(Coe,vVr),e(u0,FVr),e(ce,TVr),e(ce,b0),e(b0,Mwe),e(Mwe,MVr),e(b0,EVr),e(b0,woe),e(woe,CVr),e(b0,wVr),e(ce,AVr),e(ce,v0),e(v0,Ewe),e(Ewe,LVr),e(v0,yVr),e(v0,Aoe),e(Aoe,xVr),e(v0,$Vr),e(ce,kVr),e(ce,F0),e(F0,Cwe),e(Cwe,SVr),e(F0,RVr),e(F0,Loe),e(Loe,PVr),e(F0,BVr),e(ce,IVr),e(ce,T0),e(T0,wwe),e(wwe,NVr),e(T0,qVr),e(T0,yoe),e(yoe,jVr),e(T0,DVr),e(ce,GVr),e(ce,M0),e(M0,Awe),e(Awe,OVr),e(M0,VVr),e(M0,xoe),e(xoe,XVr),e(M0,zVr),e(Xr,WVr),M(E0,Xr,null),b(f,MHe,u),b(f,df,u),e(df,C0),e(C0,Lwe),M(mk,Lwe,null),e(df,QVr),e(df,ywe),e(ywe,UVr),b(f,EHe,u),b(f,_r,u),M(gk,_r,null),e(_r,HVr),e(_r,cf),e(cf,JVr),e(cf,$oe),e($oe,YVr),e(cf,KVr),e(cf,koe),e(koe,ZVr),e(cf,eXr),e(_r,oXr),e(_r,hk),e(hk,rXr),e(hk,xwe),e(xwe,tXr),e(hk,aXr),e(_r,nXr),e(_r,Jt),M(pk,Jt,null),e(Jt,sXr),e(Jt,$we),e($we,lXr),e(Jt,iXr),e(Jt,ff),e(ff,dXr),e(ff,kwe),e(kwe,cXr),e(ff,fXr),e(ff,Soe),e(Soe,mXr),e(ff,gXr),e(Jt,hXr),M(w0,Jt,null),e(_r,pXr),e(_r,zr),M(_k,zr,null),e(zr,_Xr),e(zr,Swe),e(Swe,uXr),e(zr,bXr),e(zr,yn),e(yn,vXr),e(yn,Rwe),e(Rwe,FXr),e(yn,TXr),e(yn,Pwe),e(Pwe,MXr),e(yn,EXr),e(yn,Bwe),e(Bwe,CXr),e(yn,wXr),e(zr,AXr),e(zr,fe),e(fe,A0),e(A0,Iwe),e(Iwe,LXr),e(A0,yXr),e(A0,Roe),e(Roe,xXr),e(A0,$Xr),e(fe,kXr),e(fe,L0),e(L0,Nwe),e(Nwe,SXr),e(L0,RXr),e(L0,Poe),e(Poe,PXr),e(L0,BXr),e(fe,IXr),e(fe,y0),e(y0,qwe),e(qwe,NXr),e(y0,qXr),e(y0,Boe),e(Boe,jXr),e(y0,DXr),e(fe,GXr),e(fe,x0),e(x0,jwe),e(jwe,OXr),e(x0,VXr),e(x0,Ioe),e(Ioe,XXr),e(x0,zXr),e(fe,WXr),e(fe,$0),e($0,Dwe),e(Dwe,QXr),e($0,UXr),e($0,Noe),e(Noe,HXr),e($0,JXr),e(fe,YXr),e(fe,k0),e(k0,Gwe),e(Gwe,KXr),e(k0,ZXr),e(k0,qoe),e(qoe,ezr),e(k0,ozr),e(fe,rzr),e(fe,S0),e(S0,Owe),e(Owe,tzr),e(S0,azr),e(S0,joe),e(joe,nzr),e(S0,szr),e(fe,lzr),e(fe,R0),e(R0,Vwe),e(Vwe,izr),e(R0,dzr),e(R0,Doe),e(Doe,czr),e(R0,fzr),e(fe,mzr),e(fe,P0),e(P0,Xwe),e(Xwe,gzr),e(P0,hzr),e(P0,Goe),e(Goe,pzr),e(P0,_zr),e(fe,uzr),e(fe,B0),e(B0,zwe),e(zwe,bzr),e(B0,vzr),e(B0,Ooe),e(Ooe,Fzr),e(B0,Tzr),e(fe,Mzr),e(fe,I0),e(I0,Wwe),e(Wwe,Ezr),e(I0,Czr),e(I0,Voe),e(Voe,wzr),e(I0,Azr),e(fe,Lzr),e(fe,N0),e(N0,Qwe),e(Qwe,yzr),e(N0,xzr),e(N0,Xoe),e(Xoe,$zr),e(N0,kzr),e(fe,Szr),e(fe,q0),e(q0,Uwe),e(Uwe,Rzr),e(q0,Pzr),e(q0,zoe),e(zoe,Bzr),e(q0,Izr),e(fe,Nzr),e(fe,j0),e(j0,Hwe),e(Hwe,qzr),e(j0,jzr),e(j0,Woe),e(Woe,Dzr),e(j0,Gzr),e(fe,Ozr),e(fe,D0),e(D0,Jwe),e(Jwe,Vzr),e(D0,Xzr),e(D0,Qoe),e(Qoe,zzr),e(D0,Wzr),e(fe,Qzr),e(fe,G0),e(G0,Ywe),e(Ywe,Uzr),e(G0,Hzr),e(G0,Uoe),e(Uoe,Jzr),e(G0,Yzr),e(fe,Kzr),e(fe,O0),e(O0,Kwe),e(Kwe,Zzr),e(O0,eWr),e(O0,Hoe),e(Hoe,oWr),e(O0,rWr),e(fe,tWr),e(fe,V0),e(V0,Zwe),e(Zwe,aWr),e(V0,nWr),e(V0,Joe),e(Joe,sWr),e(V0,lWr),e(fe,iWr),e(fe,X0),e(X0,e6e),e(e6e,dWr),e(X0,cWr),e(X0,Yoe),e(Yoe,fWr),e(X0,mWr),e(fe,gWr),e(fe,z0),e(z0,o6e),e(o6e,hWr),e(z0,pWr),e(z0,Koe),e(Koe,_Wr),e(z0,uWr),e(zr,bWr),M(W0,zr,null),b(f,CHe,u),b(f,mf,u),e(mf,Q0),e(Q0,r6e),M(uk,r6e,null),e(mf,vWr),e(mf,t6e),e(t6e,FWr),b(f,wHe,u),b(f,ur,u),M(bk,ur,null),e(ur,TWr),e(ur,gf),e(gf,MWr),e(gf,Zoe),e(Zoe,EWr),e(gf,CWr),e(gf,ere),e(ere,wWr),e(gf,AWr),e(ur,LWr),e(ur,vk),e(vk,yWr),e(vk,a6e),e(a6e,xWr),e(vk,$Wr),e(ur,kWr),e(ur,Yt),M(Fk,Yt,null),e(Yt,SWr),e(Yt,n6e),e(n6e,RWr),e(Yt,PWr),e(Yt,hf),e(hf,BWr),e(hf,s6e),e(s6e,IWr),e(hf,NWr),e(hf,ore),e(ore,qWr),e(hf,jWr),e(Yt,DWr),M(U0,Yt,null),e(ur,GWr),e(ur,Wr),M(Tk,Wr,null),e(Wr,OWr),e(Wr,l6e),e(l6e,VWr),e(Wr,XWr),e(Wr,xn),e(xn,zWr),e(xn,i6e),e(i6e,WWr),e(xn,QWr),e(xn,d6e),e(d6e,UWr),e(xn,HWr),e(xn,c6e),e(c6e,JWr),e(xn,YWr),e(Wr,KWr),e(Wr,f6e),e(f6e,H0),e(H0,m6e),e(m6e,ZWr),e(H0,eQr),e(H0,rre),e(rre,oQr),e(H0,rQr),e(Wr,tQr),M(J0,Wr,null),b(f,AHe,u),b(f,pf,u),e(pf,Y0),e(Y0,g6e),M(Mk,g6e,null),e(pf,aQr),e(pf,h6e),e(h6e,nQr),b(f,LHe,u),b(f,br,u),M(Ek,br,null),e(br,sQr),e(br,_f),e(_f,lQr),e(_f,tre),e(tre,iQr),e(_f,dQr),e(_f,are),e(are,cQr),e(_f,fQr),e(br,mQr),e(br,Ck),e(Ck,gQr),e(Ck,p6e),e(p6e,hQr),e(Ck,pQr),e(br,_Qr),e(br,Kt),M(wk,Kt,null),e(Kt,uQr),e(Kt,_6e),e(_6e,bQr),e(Kt,vQr),e(Kt,uf),e(uf,FQr),e(uf,u6e),e(u6e,TQr),e(uf,MQr),e(uf,nre),e(nre,EQr),e(uf,CQr),e(Kt,wQr),M(K0,Kt,null),e(br,AQr),e(br,Qr),M(Ak,Qr,null),e(Qr,LQr),e(Qr,b6e),e(b6e,yQr),e(Qr,xQr),e(Qr,$n),e($n,$Qr),e($n,v6e),e(v6e,kQr),e($n,SQr),e($n,F6e),e(F6e,RQr),e($n,PQr),e($n,T6e),e(T6e,BQr),e($n,IQr),e(Qr,NQr),e(Qr,M6e),e(M6e,Z0),e(Z0,E6e),e(E6e,qQr),e(Z0,jQr),e(Z0,sre),e(sre,DQr),e(Z0,GQr),e(Qr,OQr),M(ew,Qr,null),b(f,yHe,u),b(f,bf,u),e(bf,ow),e(ow,C6e),M(Lk,C6e,null),e(bf,VQr),e(bf,w6e),e(w6e,XQr),b(f,xHe,u),b(f,vr,u),M(yk,vr,null),e(vr,zQr),e(vr,vf),e(vf,WQr),e(vf,lre),e(lre,QQr),e(vf,UQr),e(vf,ire),e(ire,HQr),e(vf,JQr),e(vr,YQr),e(vr,xk),e(xk,KQr),e(xk,A6e),e(A6e,ZQr),e(xk,eUr),e(vr,oUr),e(vr,Zt),M($k,Zt,null),e(Zt,rUr),e(Zt,L6e),e(L6e,tUr),e(Zt,aUr),e(Zt,Ff),e(Ff,nUr),e(Ff,y6e),e(y6e,sUr),e(Ff,lUr),e(Ff,dre),e(dre,iUr),e(Ff,dUr),e(Zt,cUr),M(rw,Zt,null),e(vr,fUr),e(vr,Ur),M(kk,Ur,null),e(Ur,mUr),e(Ur,x6e),e(x6e,gUr),e(Ur,hUr),e(Ur,kn),e(kn,pUr),e(kn,$6e),e($6e,_Ur),e(kn,uUr),e(kn,k6e),e(k6e,bUr),e(kn,vUr),e(kn,S6e),e(S6e,FUr),e(kn,TUr),e(Ur,MUr),e(Ur,re),e(re,tw),e(tw,R6e),e(R6e,EUr),e(tw,CUr),e(tw,cre),e(cre,wUr),e(tw,AUr),e(re,LUr),e(re,aw),e(aw,P6e),e(P6e,yUr),e(aw,xUr),e(aw,fre),e(fre,$Ur),e(aw,kUr),e(re,SUr),e(re,nw),e(nw,B6e),e(B6e,RUr),e(nw,PUr),e(nw,mre),e(mre,BUr),e(nw,IUr),e(re,NUr),e(re,sw),e(sw,I6e),e(I6e,qUr),e(sw,jUr),e(sw,gre),e(gre,DUr),e(sw,GUr),e(re,OUr),e(re,lw),e(lw,N6e),e(N6e,VUr),e(lw,XUr),e(lw,hre),e(hre,zUr),e(lw,WUr),e(re,QUr),e(re,iw),e(iw,q6e),e(q6e,UUr),e(iw,HUr),e(iw,pre),e(pre,JUr),e(iw,YUr),e(re,KUr),e(re,dw),e(dw,j6e),e(j6e,ZUr),e(dw,eHr),e(dw,_re),e(_re,oHr),e(dw,rHr),e(re,tHr),e(re,cw),e(cw,D6e),e(D6e,aHr),e(cw,nHr),e(cw,ure),e(ure,sHr),e(cw,lHr),e(re,iHr),e(re,fw),e(fw,G6e),e(G6e,dHr),e(fw,cHr),e(fw,bre),e(bre,fHr),e(fw,mHr),e(re,gHr),e(re,mw),e(mw,O6e),e(O6e,hHr),e(mw,pHr),e(mw,vre),e(vre,_Hr),e(mw,uHr),e(re,bHr),e(re,gw),e(gw,V6e),e(V6e,vHr),e(gw,FHr),e(gw,Fre),e(Fre,THr),e(gw,MHr),e(re,EHr),e(re,hw),e(hw,X6e),e(X6e,CHr),e(hw,wHr),e(hw,Tre),e(Tre,AHr),e(hw,LHr),e(re,yHr),e(re,pw),e(pw,z6e),e(z6e,xHr),e(pw,$Hr),e(pw,Mre),e(Mre,kHr),e(pw,SHr),e(re,RHr),e(re,_w),e(_w,W6e),e(W6e,PHr),e(_w,BHr),e(_w,Ere),e(Ere,IHr),e(_w,NHr),e(re,qHr),e(re,uw),e(uw,Q6e),e(Q6e,jHr),e(uw,DHr),e(uw,Cre),e(Cre,GHr),e(uw,OHr),e(re,VHr),e(re,bw),e(bw,U6e),e(U6e,XHr),e(bw,zHr),e(bw,wre),e(wre,WHr),e(bw,QHr),e(re,UHr),e(re,vw),e(vw,H6e),e(H6e,HHr),e(vw,JHr),e(vw,Are),e(Are,YHr),e(vw,KHr),e(re,ZHr),e(re,Fw),e(Fw,J6e),e(J6e,eJr),e(Fw,oJr),e(Fw,Lre),e(Lre,rJr),e(Fw,tJr),e(re,aJr),e(re,Tw),e(Tw,Y6e),e(Y6e,nJr),e(Tw,sJr),e(Tw,yre),e(yre,lJr),e(Tw,iJr),e(re,dJr),e(re,Mw),e(Mw,K6e),e(K6e,cJr),e(Mw,fJr),e(Mw,xre),e(xre,mJr),e(Mw,gJr),e(re,hJr),e(re,Ew),e(Ew,Z6e),e(Z6e,pJr),e(Ew,_Jr),e(Ew,$re),e($re,uJr),e(Ew,bJr),e(re,vJr),e(re,Cw),e(Cw,eAe),e(eAe,FJr),e(Cw,TJr),e(Cw,kre),e(kre,MJr),e(Cw,EJr),e(re,CJr),e(re,ww),e(ww,oAe),e(oAe,wJr),e(ww,AJr),e(ww,Sre),e(Sre,LJr),e(ww,yJr),e(re,xJr),e(re,Aw),e(Aw,rAe),e(rAe,$Jr),e(Aw,kJr),e(Aw,Rre),e(Rre,SJr),e(Aw,RJr),e(re,PJr),e(re,Lw),e(Lw,tAe),e(tAe,BJr),e(Lw,IJr),e(Lw,Pre),e(Pre,NJr),e(Lw,qJr),e(re,jJr),e(re,yw),e(yw,aAe),e(aAe,DJr),e(yw,GJr),e(yw,Bre),e(Bre,OJr),e(yw,VJr),e(re,XJr),e(re,xw),e(xw,nAe),e(nAe,zJr),e(xw,WJr),e(xw,Ire),e(Ire,QJr),e(xw,UJr),e(Ur,HJr),M($w,Ur,null),b(f,$He,u),b(f,Tf,u),e(Tf,kw),e(kw,sAe),M(Sk,sAe,null),e(Tf,JJr),e(Tf,lAe),e(lAe,YJr),b(f,kHe,u),b(f,Fr,u),M(Rk,Fr,null),e(Fr,KJr),e(Fr,Mf),e(Mf,ZJr),e(Mf,Nre),e(Nre,eYr),e(Mf,oYr),e(Mf,qre),e(qre,rYr),e(Mf,tYr),e(Fr,aYr),e(Fr,Pk),e(Pk,nYr),e(Pk,iAe),e(iAe,sYr),e(Pk,lYr),e(Fr,iYr),e(Fr,ea),M(Bk,ea,null),e(ea,dYr),e(ea,dAe),e(dAe,cYr),e(ea,fYr),e(ea,Ef),e(Ef,mYr),e(Ef,cAe),e(cAe,gYr),e(Ef,hYr),e(Ef,jre),e(jre,pYr),e(Ef,_Yr),e(ea,uYr),M(Sw,ea,null),e(Fr,bYr),e(Fr,Hr),M(Ik,Hr,null),e(Hr,vYr),e(Hr,fAe),e(fAe,FYr),e(Hr,TYr),e(Hr,Sn),e(Sn,MYr),e(Sn,mAe),e(mAe,EYr),e(Sn,CYr),e(Sn,gAe),e(gAe,wYr),e(Sn,AYr),e(Sn,hAe),e(hAe,LYr),e(Sn,yYr),e(Hr,xYr),e(Hr,xe),e(xe,Rw),e(Rw,pAe),e(pAe,$Yr),e(Rw,kYr),e(Rw,Dre),e(Dre,SYr),e(Rw,RYr),e(xe,PYr),e(xe,Pw),e(Pw,_Ae),e(_Ae,BYr),e(Pw,IYr),e(Pw,Gre),e(Gre,NYr),e(Pw,qYr),e(xe,jYr),e(xe,Bw),e(Bw,uAe),e(uAe,DYr),e(Bw,GYr),e(Bw,Ore),e(Ore,OYr),e(Bw,VYr),e(xe,XYr),e(xe,Iw),e(Iw,bAe),e(bAe,zYr),e(Iw,WYr),e(Iw,Vre),e(Vre,QYr),e(Iw,UYr),e(xe,HYr),e(xe,Nw),e(Nw,vAe),e(vAe,JYr),e(Nw,YYr),e(Nw,Xre),e(Xre,KYr),e(Nw,ZYr),e(xe,eKr),e(xe,qw),e(qw,FAe),e(FAe,oKr),e(qw,rKr),e(qw,zre),e(zre,tKr),e(qw,aKr),e(xe,nKr),e(xe,jw),e(jw,TAe),e(TAe,sKr),e(jw,lKr),e(jw,Wre),e(Wre,iKr),e(jw,dKr),e(xe,cKr),e(xe,Dw),e(Dw,MAe),e(MAe,fKr),e(Dw,mKr),e(Dw,Qre),e(Qre,gKr),e(Dw,hKr),e(xe,pKr),e(xe,Gw),e(Gw,EAe),e(EAe,_Kr),e(Gw,uKr),e(Gw,Ure),e(Ure,bKr),e(Gw,vKr),e(xe,FKr),e(xe,Ow),e(Ow,CAe),e(CAe,TKr),e(Ow,MKr),e(Ow,Hre),e(Hre,EKr),e(Ow,CKr),e(Hr,wKr),M(Vw,Hr,null),b(f,SHe,u),b(f,Cf,u),e(Cf,Xw),e(Xw,wAe),M(Nk,wAe,null),e(Cf,AKr),e(Cf,AAe),e(AAe,LKr),b(f,RHe,u),b(f,Tr,u),M(qk,Tr,null),e(Tr,yKr),e(Tr,wf),e(wf,xKr),e(wf,Jre),e(Jre,$Kr),e(wf,kKr),e(wf,Yre),e(Yre,SKr),e(wf,RKr),e(Tr,PKr),e(Tr,jk),e(jk,BKr),e(jk,LAe),e(LAe,IKr),e(jk,NKr),e(Tr,qKr),e(Tr,oa),M(Dk,oa,null),e(oa,jKr),e(oa,yAe),e(yAe,DKr),e(oa,GKr),e(oa,Af),e(Af,OKr),e(Af,xAe),e(xAe,VKr),e(Af,XKr),e(Af,Kre),e(Kre,zKr),e(Af,WKr),e(oa,QKr),M(zw,oa,null),e(Tr,UKr),e(Tr,Jr),M(Gk,Jr,null),e(Jr,HKr),e(Jr,$Ae),e($Ae,JKr),e(Jr,YKr),e(Jr,Rn),e(Rn,KKr),e(Rn,kAe),e(kAe,ZKr),e(Rn,eZr),e(Rn,SAe),e(SAe,oZr),e(Rn,rZr),e(Rn,RAe),e(RAe,tZr),e(Rn,aZr),e(Jr,nZr),e(Jr,Ee),e(Ee,Ww),e(Ww,PAe),e(PAe,sZr),e(Ww,lZr),e(Ww,Zre),e(Zre,iZr),e(Ww,dZr),e(Ee,cZr),e(Ee,Qw),e(Qw,BAe),e(BAe,fZr),e(Qw,mZr),e(Qw,ete),e(ete,gZr),e(Qw,hZr),e(Ee,pZr),e(Ee,Uw),e(Uw,IAe),e(IAe,_Zr),e(Uw,uZr),e(Uw,ote),e(ote,bZr),e(Uw,vZr),e(Ee,FZr),e(Ee,Hw),e(Hw,NAe),e(NAe,TZr),e(Hw,MZr),e(Hw,rte),e(rte,EZr),e(Hw,CZr),e(Ee,wZr),e(Ee,Jw),e(Jw,qAe),e(qAe,AZr),e(Jw,LZr),e(Jw,tte),e(tte,yZr),e(Jw,xZr),e(Ee,$Zr),e(Ee,Yw),e(Yw,jAe),e(jAe,kZr),e(Yw,SZr),e(Yw,ate),e(ate,RZr),e(Yw,PZr),e(Ee,BZr),e(Ee,Kw),e(Kw,DAe),e(DAe,IZr),e(Kw,NZr),e(Kw,nte),e(nte,qZr),e(Kw,jZr),e(Ee,DZr),e(Ee,Zw),e(Zw,GAe),e(GAe,GZr),e(Zw,OZr),e(Zw,ste),e(ste,VZr),e(Zw,XZr),e(Ee,zZr),e(Ee,e6),e(e6,OAe),e(OAe,WZr),e(e6,QZr),e(e6,lte),e(lte,UZr),e(e6,HZr),e(Ee,JZr),e(Ee,o6),e(o6,VAe),e(VAe,YZr),e(o6,KZr),e(o6,ite),e(ite,ZZr),e(o6,eet),e(Ee,oet),e(Ee,r6),e(r6,XAe),e(XAe,ret),e(r6,tet),e(r6,dte),e(dte,aet),e(r6,net),e(Ee,set),e(Ee,t6),e(t6,zAe),e(zAe,iet),e(t6,det),e(t6,cte),e(cte,cet),e(t6,fet),e(Ee,met),e(Ee,a6),e(a6,WAe),e(WAe,get),e(a6,het),e(a6,fte),e(fte,pet),e(a6,_et),e(Jr,uet),M(n6,Jr,null),b(f,PHe,u),b(f,Lf,u),e(Lf,s6),e(s6,QAe),M(Ok,QAe,null),e(Lf,bet),e(Lf,UAe),e(UAe,vet),b(f,BHe,u),b(f,Mr,u),M(Vk,Mr,null),e(Mr,Fet),e(Mr,yf),e(yf,Tet),e(yf,mte),e(mte,Met),e(yf,Eet),e(yf,gte),e(gte,Cet),e(yf,wet),e(Mr,Aet),e(Mr,Xk),e(Xk,Let),e(Xk,HAe),e(HAe,yet),e(Xk,xet),e(Mr,$et),e(Mr,ra),M(zk,ra,null),e(ra,ket),e(ra,JAe),e(JAe,Set),e(ra,Ret),e(ra,xf),e(xf,Pet),e(xf,YAe),e(YAe,Bet),e(xf,Iet),e(xf,hte),e(hte,Net),e(xf,qet),e(ra,jet),M(l6,ra,null),e(Mr,Det),e(Mr,Yr),M(Wk,Yr,null),e(Yr,Get),e(Yr,KAe),e(KAe,Oet),e(Yr,Vet),e(Yr,Pn),e(Pn,Xet),e(Pn,ZAe),e(ZAe,zet),e(Pn,Wet),e(Pn,eLe),e(eLe,Qet),e(Pn,Uet),e(Pn,oLe),e(oLe,Het),e(Pn,Jet),e(Yr,Yet),e(Yr,$e),e($e,i6),e(i6,rLe),e(rLe,Ket),e(i6,Zet),e(i6,pte),e(pte,eot),e(i6,oot),e($e,rot),e($e,d6),e(d6,tLe),e(tLe,tot),e(d6,aot),e(d6,_te),e(_te,not),e(d6,sot),e($e,lot),e($e,c6),e(c6,aLe),e(aLe,iot),e(c6,dot),e(c6,ute),e(ute,cot),e(c6,fot),e($e,mot),e($e,f6),e(f6,nLe),e(nLe,got),e(f6,hot),e(f6,bte),e(bte,pot),e(f6,_ot),e($e,uot),e($e,m6),e(m6,sLe),e(sLe,bot),e(m6,vot),e(m6,vte),e(vte,Fot),e(m6,Tot),e($e,Mot),e($e,g6),e(g6,lLe),e(lLe,Eot),e(g6,Cot),e(g6,Fte),e(Fte,wot),e(g6,Aot),e($e,Lot),e($e,h6),e(h6,iLe),e(iLe,yot),e(h6,xot),e(h6,Tte),e(Tte,$ot),e(h6,kot),e($e,Sot),e($e,p6),e(p6,dLe),e(dLe,Rot),e(p6,Pot),e(p6,Mte),e(Mte,Bot),e(p6,Iot),e($e,Not),e($e,_6),e(_6,cLe),e(cLe,qot),e(_6,jot),e(_6,Ete),e(Ete,Dot),e(_6,Got),e($e,Oot),e($e,u6),e(u6,fLe),e(fLe,Vot),e(u6,Xot),e(u6,Cte),e(Cte,zot),e(u6,Wot),e(Yr,Qot),M(b6,Yr,null),b(f,IHe,u),b(f,$f,u),e($f,v6),e(v6,mLe),M(Qk,mLe,null),e($f,Uot),e($f,gLe),e(gLe,Hot),b(f,NHe,u),b(f,Er,u),M(Uk,Er,null),e(Er,Jot),e(Er,kf),e(kf,Yot),e(kf,wte),e(wte,Kot),e(kf,Zot),e(kf,Ate),e(Ate,ert),e(kf,ort),e(Er,rrt),e(Er,Hk),e(Hk,trt),e(Hk,hLe),e(hLe,art),e(Hk,nrt),e(Er,srt),e(Er,ta),M(Jk,ta,null),e(ta,lrt),e(ta,pLe),e(pLe,irt),e(ta,drt),e(ta,Sf),e(Sf,crt),e(Sf,_Le),e(_Le,frt),e(Sf,mrt),e(Sf,Lte),e(Lte,grt),e(Sf,hrt),e(ta,prt),M(F6,ta,null),e(Er,_rt),e(Er,Kr),M(Yk,Kr,null),e(Kr,urt),e(Kr,uLe),e(uLe,brt),e(Kr,vrt),e(Kr,Bn),e(Bn,Frt),e(Bn,bLe),e(bLe,Trt),e(Bn,Mrt),e(Bn,vLe),e(vLe,Ert),e(Bn,Crt),e(Bn,FLe),e(FLe,wrt),e(Bn,Art),e(Kr,Lrt),e(Kr,ke),e(ke,T6),e(T6,TLe),e(TLe,yrt),e(T6,xrt),e(T6,yte),e(yte,$rt),e(T6,krt),e(ke,Srt),e(ke,M6),e(M6,MLe),e(MLe,Rrt),e(M6,Prt),e(M6,xte),e(xte,Brt),e(M6,Irt),e(ke,Nrt),e(ke,E6),e(E6,ELe),e(ELe,qrt),e(E6,jrt),e(E6,$te),e($te,Drt),e(E6,Grt),e(ke,Ort),e(ke,C6),e(C6,CLe),e(CLe,Vrt),e(C6,Xrt),e(C6,kte),e(kte,zrt),e(C6,Wrt),e(ke,Qrt),e(ke,w6),e(w6,wLe),e(wLe,Urt),e(w6,Hrt),e(w6,Ste),e(Ste,Jrt),e(w6,Yrt),e(ke,Krt),e(ke,A6),e(A6,ALe),e(ALe,Zrt),e(A6,ett),e(A6,Rte),e(Rte,ott),e(A6,rtt),e(ke,ttt),e(ke,L6),e(L6,LLe),e(LLe,att),e(L6,ntt),e(L6,Pte),e(Pte,stt),e(L6,ltt),e(ke,itt),e(ke,y6),e(y6,yLe),e(yLe,dtt),e(y6,ctt),e(y6,Bte),e(Bte,ftt),e(y6,mtt),e(ke,gtt),e(ke,x6),e(x6,xLe),e(xLe,htt),e(x6,ptt),e(x6,Ite),e(Ite,_tt),e(x6,utt),e(ke,btt),e(ke,$6),e($6,$Le),e($Le,vtt),e($6,Ftt),e($6,Nte),e(Nte,Ttt),e($6,Mtt),e(Kr,Ett),M(k6,Kr,null),b(f,qHe,u),b(f,Rf,u),e(Rf,S6),e(S6,kLe),M(Kk,kLe,null),e(Rf,Ctt),e(Rf,SLe),e(SLe,wtt),b(f,jHe,u),b(f,Cr,u),M(Zk,Cr,null),e(Cr,Att),e(Cr,Pf),e(Pf,Ltt),e(Pf,qte),e(qte,ytt),e(Pf,xtt),e(Pf,jte),e(jte,$tt),e(Pf,ktt),e(Cr,Stt),e(Cr,eS),e(eS,Rtt),e(eS,RLe),e(RLe,Ptt),e(eS,Btt),e(Cr,Itt),e(Cr,aa),M(oS,aa,null),e(aa,Ntt),e(aa,PLe),e(PLe,qtt),e(aa,jtt),e(aa,Bf),e(Bf,Dtt),e(Bf,BLe),e(BLe,Gtt),e(Bf,Ott),e(Bf,Dte),e(Dte,Vtt),e(Bf,Xtt),e(aa,ztt),M(R6,aa,null),e(Cr,Wtt),e(Cr,Zr),M(rS,Zr,null),e(Zr,Qtt),e(Zr,ILe),e(ILe,Utt),e(Zr,Htt),e(Zr,In),e(In,Jtt),e(In,NLe),e(NLe,Ytt),e(In,Ktt),e(In,qLe),e(qLe,Ztt),e(In,eat),e(In,jLe),e(jLe,oat),e(In,rat),e(Zr,tat),e(Zr,Se),e(Se,P6),e(P6,DLe),e(DLe,aat),e(P6,nat),e(P6,Gte),e(Gte,sat),e(P6,lat),e(Se,iat),e(Se,B6),e(B6,GLe),e(GLe,dat),e(B6,cat),e(B6,Ote),e(Ote,fat),e(B6,mat),e(Se,gat),e(Se,I6),e(I6,OLe),e(OLe,hat),e(I6,pat),e(I6,Vte),e(Vte,_at),e(I6,uat),e(Se,bat),e(Se,N6),e(N6,VLe),e(VLe,vat),e(N6,Fat),e(N6,Xte),e(Xte,Tat),e(N6,Mat),e(Se,Eat),e(Se,q6),e(q6,XLe),e(XLe,Cat),e(q6,wat),e(q6,zte),e(zte,Aat),e(q6,Lat),e(Se,yat),e(Se,j6),e(j6,zLe),e(zLe,xat),e(j6,$at),e(j6,Wte),e(Wte,kat),e(j6,Sat),e(Se,Rat),e(Se,D6),e(D6,WLe),e(WLe,Pat),e(D6,Bat),e(D6,Qte),e(Qte,Iat),e(D6,Nat),e(Se,qat),e(Se,G6),e(G6,QLe),e(QLe,jat),e(G6,Dat),e(G6,Ute),e(Ute,Gat),e(G6,Oat),e(Se,Vat),e(Se,O6),e(O6,ULe),e(ULe,Xat),e(O6,zat),e(O6,Hte),e(Hte,Wat),e(O6,Qat),e(Se,Uat),e(Se,V6),e(V6,HLe),e(HLe,Hat),e(V6,Jat),e(V6,Jte),e(Jte,Yat),e(V6,Kat),e(Zr,Zat),M(X6,Zr,null),b(f,DHe,u),b(f,If,u),e(If,z6),e(z6,JLe),M(tS,JLe,null),e(If,ent),e(If,YLe),e(YLe,ont),b(f,GHe,u),b(f,wr,u),M(aS,wr,null),e(wr,rnt),e(wr,Nf),e(Nf,tnt),e(Nf,Yte),e(Yte,ant),e(Nf,nnt),e(Nf,Kte),e(Kte,snt),e(Nf,lnt),e(wr,int),e(wr,nS),e(nS,dnt),e(nS,KLe),e(KLe,cnt),e(nS,fnt),e(wr,mnt),e(wr,na),M(sS,na,null),e(na,gnt),e(na,ZLe),e(ZLe,hnt),e(na,pnt),e(na,qf),e(qf,_nt),e(qf,eye),e(eye,unt),e(qf,bnt),e(qf,Zte),e(Zte,vnt),e(qf,Fnt),e(na,Tnt),M(W6,na,null),e(wr,Mnt),e(wr,et),M(lS,et,null),e(et,Ent),e(et,oye),e(oye,Cnt),e(et,wnt),e(et,Nn),e(Nn,Ant),e(Nn,rye),e(rye,Lnt),e(Nn,ynt),e(Nn,tye),e(tye,xnt),e(Nn,$nt),e(Nn,aye),e(aye,knt),e(Nn,Snt),e(et,Rnt),e(et,Re),e(Re,Q6),e(Q6,nye),e(nye,Pnt),e(Q6,Bnt),e(Q6,eae),e(eae,Int),e(Q6,Nnt),e(Re,qnt),e(Re,U6),e(U6,sye),e(sye,jnt),e(U6,Dnt),e(U6,oae),e(oae,Gnt),e(U6,Ont),e(Re,Vnt),e(Re,H6),e(H6,lye),e(lye,Xnt),e(H6,znt),e(H6,rae),e(rae,Wnt),e(H6,Qnt),e(Re,Unt),e(Re,J6),e(J6,iye),e(iye,Hnt),e(J6,Jnt),e(J6,tae),e(tae,Ynt),e(J6,Knt),e(Re,Znt),e(Re,Y6),e(Y6,dye),e(dye,est),e(Y6,ost),e(Y6,aae),e(aae,rst),e(Y6,tst),e(Re,ast),e(Re,K6),e(K6,cye),e(cye,nst),e(K6,sst),e(K6,nae),e(nae,lst),e(K6,ist),e(Re,dst),e(Re,Z6),e(Z6,fye),e(fye,cst),e(Z6,fst),e(Z6,sae),e(sae,mst),e(Z6,gst),e(Re,hst),e(Re,eA),e(eA,mye),e(mye,pst),e(eA,_st),e(eA,lae),e(lae,ust),e(eA,bst),e(Re,vst),e(Re,oA),e(oA,gye),e(gye,Fst),e(oA,Tst),e(oA,iae),e(iae,Mst),e(oA,Est),e(Re,Cst),e(Re,rA),e(rA,hye),e(hye,wst),e(rA,Ast),e(rA,dae),e(dae,Lst),e(rA,yst),e(et,xst),M(tA,et,null),b(f,OHe,u),b(f,jf,u),e(jf,aA),e(aA,pye),M(iS,pye,null),e(jf,$st),e(jf,_ye),e(_ye,kst),b(f,VHe,u),b(f,Ar,u),M(dS,Ar,null),e(Ar,Sst),e(Ar,Df),e(Df,Rst),e(Df,cae),e(cae,Pst),e(Df,Bst),e(Df,fae),e(fae,Ist),e(Df,Nst),e(Ar,qst),e(Ar,cS),e(cS,jst),e(cS,uye),e(uye,Dst),e(cS,Gst),e(Ar,Ost),e(Ar,sa),M(fS,sa,null),e(sa,Vst),e(sa,bye),e(bye,Xst),e(sa,zst),e(sa,Gf),e(Gf,Wst),e(Gf,vye),e(vye,Qst),e(Gf,Ust),e(Gf,mae),e(mae,Hst),e(Gf,Jst),e(sa,Yst),M(nA,sa,null),e(Ar,Kst),e(Ar,ot),M(mS,ot,null),e(ot,Zst),e(ot,Fye),e(Fye,elt),e(ot,olt),e(ot,qn),e(qn,rlt),e(qn,Tye),e(Tye,tlt),e(qn,alt),e(qn,Mye),e(Mye,nlt),e(qn,slt),e(qn,Eye),e(Eye,llt),e(qn,ilt),e(ot,dlt),e(ot,Xe),e(Xe,sA),e(sA,Cye),e(Cye,clt),e(sA,flt),e(sA,gae),e(gae,mlt),e(sA,glt),e(Xe,hlt),e(Xe,lA),e(lA,wye),e(wye,plt),e(lA,_lt),e(lA,hae),e(hae,ult),e(lA,blt),e(Xe,vlt),e(Xe,iA),e(iA,Aye),e(Aye,Flt),e(iA,Tlt),e(iA,pae),e(pae,Mlt),e(iA,Elt),e(Xe,Clt),e(Xe,dA),e(dA,Lye),e(Lye,wlt),e(dA,Alt),e(dA,_ae),e(_ae,Llt),e(dA,ylt),e(Xe,xlt),e(Xe,cA),e(cA,yye),e(yye,$lt),e(cA,klt),e(cA,uae),e(uae,Slt),e(cA,Rlt),e(Xe,Plt),e(Xe,fA),e(fA,xye),e(xye,Blt),e(fA,Ilt),e(fA,bae),e(bae,Nlt),e(fA,qlt),e(Xe,jlt),e(Xe,mA),e(mA,$ye),e($ye,Dlt),e(mA,Glt),e(mA,vae),e(vae,Olt),e(mA,Vlt),e(Xe,Xlt),e(Xe,gA),e(gA,kye),e(kye,zlt),e(gA,Wlt),e(gA,Fae),e(Fae,Qlt),e(gA,Ult),e(ot,Hlt),M(hA,ot,null),b(f,XHe,u),b(f,Of,u),e(Of,pA),e(pA,Sye),M(gS,Sye,null),e(Of,Jlt),e(Of,Rye),e(Rye,Ylt),b(f,zHe,u),b(f,Lr,u),M(hS,Lr,null),e(Lr,Klt),e(Lr,Vf),e(Vf,Zlt),e(Vf,Tae),e(Tae,eit),e(Vf,oit),e(Vf,Mae),e(Mae,rit),e(Vf,tit),e(Lr,ait),e(Lr,pS),e(pS,nit),e(pS,Pye),e(Pye,sit),e(pS,lit),e(Lr,iit),e(Lr,la),M(_S,la,null),e(la,dit),e(la,Bye),e(Bye,cit),e(la,fit),e(la,Xf),e(Xf,mit),e(Xf,Iye),e(Iye,git),e(Xf,hit),e(Xf,Eae),e(Eae,pit),e(Xf,_it),e(la,uit),M(_A,la,null),e(Lr,bit),e(Lr,rt),M(uS,rt,null),e(rt,vit),e(rt,Nye),e(Nye,Fit),e(rt,Tit),e(rt,jn),e(jn,Mit),e(jn,qye),e(qye,Eit),e(jn,Cit),e(jn,jye),e(jye,wit),e(jn,Ait),e(jn,Dye),e(Dye,Lit),e(jn,yit),e(rt,xit),e(rt,ze),e(ze,uA),e(uA,Gye),e(Gye,$it),e(uA,kit),e(uA,Cae),e(Cae,Sit),e(uA,Rit),e(ze,Pit),e(ze,bA),e(bA,Oye),e(Oye,Bit),e(bA,Iit),e(bA,wae),e(wae,Nit),e(bA,qit),e(ze,jit),e(ze,vA),e(vA,Vye),e(Vye,Dit),e(vA,Git),e(vA,Aae),e(Aae,Oit),e(vA,Vit),e(ze,Xit),e(ze,FA),e(FA,Xye),e(Xye,zit),e(FA,Wit),e(FA,Lae),e(Lae,Qit),e(FA,Uit),e(ze,Hit),e(ze,TA),e(TA,zye),e(zye,Jit),e(TA,Yit),e(TA,yae),e(yae,Kit),e(TA,Zit),e(ze,edt),e(ze,MA),e(MA,Wye),e(Wye,odt),e(MA,rdt),e(MA,xae),e(xae,tdt),e(MA,adt),e(ze,ndt),e(ze,EA),e(EA,Qye),e(Qye,sdt),e(EA,ldt),e(EA,$ae),e($ae,idt),e(EA,ddt),e(ze,cdt),e(ze,CA),e(CA,Uye),e(Uye,fdt),e(CA,mdt),e(CA,kae),e(kae,gdt),e(CA,hdt),e(rt,pdt),M(wA,rt,null),b(f,WHe,u),b(f,zf,u),e(zf,AA),e(AA,Hye),M(bS,Hye,null),e(zf,_dt),e(zf,Jye),e(Jye,udt),b(f,QHe,u),b(f,yr,u),M(vS,yr,null),e(yr,bdt),e(yr,Wf),e(Wf,vdt),e(Wf,Sae),e(Sae,Fdt),e(Wf,Tdt),e(Wf,Rae),e(Rae,Mdt),e(Wf,Edt),e(yr,Cdt),e(yr,FS),e(FS,wdt),e(FS,Yye),e(Yye,Adt),e(FS,Ldt),e(yr,ydt),e(yr,ia),M(TS,ia,null),e(ia,xdt),e(ia,Kye),e(Kye,$dt),e(ia,kdt),e(ia,Qf),e(Qf,Sdt),e(Qf,Zye),e(Zye,Rdt),e(Qf,Pdt),e(Qf,Pae),e(Pae,Bdt),e(Qf,Idt),e(ia,Ndt),M(LA,ia,null),e(yr,qdt),e(yr,tt),M(MS,tt,null),e(tt,jdt),e(tt,e8e),e(e8e,Ddt),e(tt,Gdt),e(tt,Dn),e(Dn,Odt),e(Dn,o8e),e(o8e,Vdt),e(Dn,Xdt),e(Dn,r8e),e(r8e,zdt),e(Dn,Wdt),e(Dn,t8e),e(t8e,Qdt),e(Dn,Udt),e(tt,Hdt),e(tt,a8e),e(a8e,yA),e(yA,n8e),e(n8e,Jdt),e(yA,Ydt),e(yA,Bae),e(Bae,Kdt),e(yA,Zdt),e(tt,ect),M(xA,tt,null),b(f,UHe,u),b(f,Uf,u),e(Uf,$A),e($A,s8e),M(ES,s8e,null),e(Uf,oct),e(Uf,l8e),e(l8e,rct),b(f,HHe,u),b(f,xr,u),M(CS,xr,null),e(xr,tct),e(xr,Hf),e(Hf,act),e(Hf,Iae),e(Iae,nct),e(Hf,sct),e(Hf,Nae),e(Nae,lct),e(Hf,ict),e(xr,dct),e(xr,wS),e(wS,cct),e(wS,i8e),e(i8e,fct),e(wS,mct),e(xr,gct),e(xr,da),M(AS,da,null),e(da,hct),e(da,d8e),e(d8e,pct),e(da,_ct),e(da,Jf),e(Jf,uct),e(Jf,c8e),e(c8e,bct),e(Jf,vct),e(Jf,qae),e(qae,Fct),e(Jf,Tct),e(da,Mct),M(kA,da,null),e(xr,Ect),e(xr,at),M(LS,at,null),e(at,Cct),e(at,f8e),e(f8e,wct),e(at,Act),e(at,Gn),e(Gn,Lct),e(Gn,m8e),e(m8e,yct),e(Gn,xct),e(Gn,g8e),e(g8e,$ct),e(Gn,kct),e(Gn,h8e),e(h8e,Sct),e(Gn,Rct),e(at,Pct),e(at,yS),e(yS,SA),e(SA,p8e),e(p8e,Bct),e(SA,Ict),e(SA,jae),e(jae,Nct),e(SA,qct),e(yS,jct),e(yS,RA),e(RA,_8e),e(_8e,Dct),e(RA,Gct),e(RA,Dae),e(Dae,Oct),e(RA,Vct),e(at,Xct),M(PA,at,null),b(f,JHe,u),b(f,Yf,u),e(Yf,BA),e(BA,u8e),M(xS,u8e,null),e(Yf,zct),e(Yf,b8e),e(b8e,Wct),b(f,YHe,u),b(f,$r,u),M($S,$r,null),e($r,Qct),e($r,Kf),e(Kf,Uct),e(Kf,Gae),e(Gae,Hct),e(Kf,Jct),e(Kf,Oae),e(Oae,Yct),e(Kf,Kct),e($r,Zct),e($r,kS),e(kS,eft),e(kS,v8e),e(v8e,oft),e(kS,rft),e($r,tft),e($r,ca),M(SS,ca,null),e(ca,aft),e(ca,F8e),e(F8e,nft),e(ca,sft),e(ca,Zf),e(Zf,lft),e(Zf,T8e),e(T8e,ift),e(Zf,dft),e(Zf,Vae),e(Vae,cft),e(Zf,fft),e(ca,mft),M(IA,ca,null),e($r,gft),e($r,nt),M(RS,nt,null),e(nt,hft),e(nt,M8e),e(M8e,pft),e(nt,_ft),e(nt,On),e(On,uft),e(On,E8e),e(E8e,bft),e(On,vft),e(On,C8e),e(C8e,Fft),e(On,Tft),e(On,w8e),e(w8e,Mft),e(On,Eft),e(nt,Cft),e(nt,A8e),e(A8e,NA),e(NA,L8e),e(L8e,wft),e(NA,Aft),e(NA,Xae),e(Xae,Lft),e(NA,yft),e(nt,xft),M(qA,nt,null),KHe=!0},p(f,[u]){const PS={};u&2&&(PS.$$scope={dirty:u,ctx:f}),im.$set(PS);const y8e={};u&2&&(y8e.$$scope={dirty:u,ctx:f}),Ch.$set(y8e);const x8e={};u&2&&(x8e.$$scope={dirty:u,ctx:f}),tp.$set(x8e);const $8e={};u&2&&($8e.$$scope={dirty:u,ctx:f}),Xp.$set($8e);const BS={};u&2&&(BS.$$scope={dirty:u,ctx:f}),zp.$set(BS);const k8e={};u&2&&(k8e.$$scope={dirty:u,ctx:f}),h_.$set(k8e);const Vn={};u&2&&(Vn.$$scope={dirty:u,ctx:f}),p_.$set(Vn);const S8e={};u&2&&(S8e.$$scope={dirty:u,ctx:f}),b_.$set(S8e);const R8e={};u&2&&(R8e.$$scope={dirty:u,ctx:f}),L2.$set(R8e);const P8e={};u&2&&(P8e.$$scope={dirty:u,ctx:f}),x2.$set(P8e);const IS={};u&2&&(IS.$$scope={dirty:u,ctx:f}),C1.$set(IS);const B8e={};u&2&&(B8e.$$scope={dirty:u,ctx:f}),A1.$set(B8e);const NS={};u&2&&(NS.$$scope={dirty:u,ctx:f}),h4.$set(NS);const I8e={};u&2&&(I8e.$$scope={dirty:u,ctx:f}),_4.$set(I8e);const qS={};u&2&&(qS.$$scope={dirty:u,ctx:f}),rb.$set(qS);const N8e={};u&2&&(N8e.$$scope={dirty:u,ctx:f}),ab.$set(N8e);const q8e={};u&2&&(q8e.$$scope={dirty:u,ctx:f}),wb.$set(q8e);const j8e={};u&2&&(j8e.$$scope={dirty:u,ctx:f}),Lb.$set(j8e);const em={};u&2&&(em.$$scope={dirty:u,ctx:f}),Lv.$set(em);const D8e={};u&2&&(D8e.$$scope={dirty:u,ctx:f}),xv.$set(D8e);const G8e={};u&2&&(G8e.$$scope={dirty:u,ctx:f}),i5.$set(G8e);const O8e={};u&2&&(O8e.$$scope={dirty:u,ctx:f}),c5.$set(O8e);const jS={};u&2&&(jS.$$scope={dirty:u,ctx:f}),b5.$set(jS);const V8e={};u&2&&(V8e.$$scope={dirty:u,ctx:f}),F5.$set(V8e);const X8e={};u&2&&(X8e.$$scope={dirty:u,ctx:f}),nF.$set(X8e);const z8e={};u&2&&(z8e.$$scope={dirty:u,ctx:f}),lF.$set(z8e);const dt={};u&2&&(dt.$$scope={dirty:u,ctx:f}),KF.$set(dt);const DS={};u&2&&(DS.$$scope={dirty:u,ctx:f}),eT.$set(DS);const W8e={};u&2&&(W8e.$$scope={dirty:u,ctx:f}),tT.$set(W8e);const GS={};u&2&&(GS.$$scope={dirty:u,ctx:f}),nT.$set(GS);const Q8e={};u&2&&(Q8e.$$scope={dirty:u,ctx:f}),TT.$set(Q8e);const ct={};u&2&&(ct.$$scope={dirty:u,ctx:f}),ET.$set(ct);const U8e={};u&2&&(U8e.$$scope={dirty:u,ctx:f}),AT.$set(U8e);const om={};u&2&&(om.$$scope={dirty:u,ctx:f}),yT.$set(om);const H8e={};u&2&&(H8e.$$scope={dirty:u,ctx:f}),kT.$set(H8e);const J8e={};u&2&&(J8e.$$scope={dirty:u,ctx:f}),RT.$set(J8e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),IT.$set(L);const jA={};u&2&&(jA.$$scope={dirty:u,ctx:f}),qT.$set(jA);const Y8e={};u&2&&(Y8e.$$scope={dirty:u,ctx:f}),HT.$set(Y8e);const K8e={};u&2&&(K8e.$$scope={dirty:u,ctx:f}),YT.$set(K8e);const DA={};u&2&&(DA.$$scope={dirty:u,ctx:f}),a7.$set(DA);const Z8e={};u&2&&(Z8e.$$scope={dirty:u,ctx:f}),s7.$set(Z8e);const e9e={};u&2&&(e9e.$$scope={dirty:u,ctx:f}),b7.$set(e9e);const GA={};u&2&&(GA.$$scope={dirty:u,ctx:f}),F7.$set(GA);const o9e={};u&2&&(o9e.$$scope={dirty:u,ctx:f}),C7.$set(o9e);const r9e={};u&2&&(r9e.$$scope={dirty:u,ctx:f}),A7.$set(r9e);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),R7.$set(OA);const t9e={};u&2&&(t9e.$$scope={dirty:u,ctx:f}),B7.$set(t9e);const a9e={};u&2&&(a9e.$$scope={dirty:u,ctx:f}),G7.$set(a9e);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),V7.$set(VA);const n9e={};u&2&&(n9e.$$scope={dirty:u,ctx:f}),Q7.$set(n9e);const s9e={};u&2&&(s9e.$$scope={dirty:u,ctx:f}),H7.$set(s9e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),K7.$set(XA);const l9e={};u&2&&(l9e.$$scope={dirty:u,ctx:f}),eM.$set(l9e);const i9e={};u&2&&(i9e.$$scope={dirty:u,ctx:f}),lM.$set(i9e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),dM.$set(zA);const d9e={};u&2&&(d9e.$$scope={dirty:u,ctx:f}),mM.$set(d9e);const c9e={};u&2&&(c9e.$$scope={dirty:u,ctx:f}),hM.$set(c9e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),fE.$set(WA);const f9e={};u&2&&(f9e.$$scope={dirty:u,ctx:f}),gE.$set(f9e);const m9e={};u&2&&(m9e.$$scope={dirty:u,ctx:f}),NE.$set(m9e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),jE.$set(QA);const g9e={};u&2&&(g9e.$$scope={dirty:u,ctx:f}),ZE.$set(g9e);const h9e={};u&2&&(h9e.$$scope={dirty:u,ctx:f}),oC.$set(h9e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),dC.$set(UA);const p9e={};u&2&&(p9e.$$scope={dirty:u,ctx:f}),fC.$set(p9e);const _9e={};u&2&&(_9e.$$scope={dirty:u,ctx:f}),hC.$set(_9e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),_C.$set(HA);const u9e={};u&2&&(u9e.$$scope={dirty:u,ctx:f}),NC.$set(u9e);const b9e={};u&2&&(b9e.$$scope={dirty:u,ctx:f}),jC.$set(b9e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),JC.$set(JA);const v9e={};u&2&&(v9e.$$scope={dirty:u,ctx:f}),KC.$set(v9e);const F9e={};u&2&&(F9e.$$scope={dirty:u,ctx:f}),w3.$set(F9e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),L3.$set(YA);const T9e={};u&2&&(T9e.$$scope={dirty:u,ctx:f}),z3.$set(T9e);const M9e={};u&2&&(M9e.$$scope={dirty:u,ctx:f}),Q3.$set(M9e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),J3.$set(KA);const E9e={};u&2&&(E9e.$$scope={dirty:u,ctx:f}),K3.$set(E9e);const C9e={};u&2&&(C9e.$$scope={dirty:u,ctx:f}),e0.$set(C9e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),r0.$set(ZA);const w9e={};u&2&&(w9e.$$scope={dirty:u,ctx:f}),E0.$set(w9e);const A9e={};u&2&&(A9e.$$scope={dirty:u,ctx:f}),w0.$set(A9e);const eL={};u&2&&(eL.$$scope={dirty:u,ctx:f}),W0.$set(eL);const L9e={};u&2&&(L9e.$$scope={dirty:u,ctx:f}),U0.$set(L9e);const y9e={};u&2&&(y9e.$$scope={dirty:u,ctx:f}),J0.$set(y9e);const oL={};u&2&&(oL.$$scope={dirty:u,ctx:f}),K0.$set(oL);const x9e={};u&2&&(x9e.$$scope={dirty:u,ctx:f}),ew.$set(x9e);const $9e={};u&2&&($9e.$$scope={dirty:u,ctx:f}),rw.$set($9e);const rL={};u&2&&(rL.$$scope={dirty:u,ctx:f}),$w.$set(rL);const k9e={};u&2&&(k9e.$$scope={dirty:u,ctx:f}),Sw.$set(k9e);const S9e={};u&2&&(S9e.$$scope={dirty:u,ctx:f}),Vw.$set(S9e);const tL={};u&2&&(tL.$$scope={dirty:u,ctx:f}),zw.$set(tL);const R9e={};u&2&&(R9e.$$scope={dirty:u,ctx:f}),n6.$set(R9e);const P9e={};u&2&&(P9e.$$scope={dirty:u,ctx:f}),l6.$set(P9e);const aL={};u&2&&(aL.$$scope={dirty:u,ctx:f}),b6.$set(aL);const B9e={};u&2&&(B9e.$$scope={dirty:u,ctx:f}),F6.$set(B9e);const I9e={};u&2&&(I9e.$$scope={dirty:u,ctx:f}),k6.$set(I9e);const nL={};u&2&&(nL.$$scope={dirty:u,ctx:f}),R6.$set(nL);const N9e={};u&2&&(N9e.$$scope={dirty:u,ctx:f}),X6.$set(N9e);const q9e={};u&2&&(q9e.$$scope={dirty:u,ctx:f}),W6.$set(q9e);const sL={};u&2&&(sL.$$scope={dirty:u,ctx:f}),tA.$set(sL);const j9e={};u&2&&(j9e.$$scope={dirty:u,ctx:f}),nA.$set(j9e);const D9e={};u&2&&(D9e.$$scope={dirty:u,ctx:f}),hA.$set(D9e);const lL={};u&2&&(lL.$$scope={dirty:u,ctx:f}),_A.$set(lL);const G9e={};u&2&&(G9e.$$scope={dirty:u,ctx:f}),wA.$set(G9e);const O9e={};u&2&&(O9e.$$scope={dirty:u,ctx:f}),LA.$set(O9e);const iL={};u&2&&(iL.$$scope={dirty:u,ctx:f}),xA.$set(iL);const V9e={};u&2&&(V9e.$$scope={dirty:u,ctx:f}),kA.$set(V9e);const X9e={};u&2&&(X9e.$$scope={dirty:u,ctx:f}),PA.$set(X9e);const dL={};u&2&&(dL.$$scope={dirty:u,ctx:f}),IA.$set(dL);const z9e={};u&2&&(z9e.$$scope={dirty:u,ctx:f}),qA.$set(z9e)},i(f){KHe||(E(d.$$.fragment,f),E(ja.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(im.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E(Ch.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(w8.$$.fragment,f),E(tp.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E(k8.$$.fragment,f),E(Xp.$$.fragment,f),E(zp.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(N8.$$.fragment,f),E(h_.$$.fragment,f),E(p_.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(b_.$$.fragment,f),E(V8.$$.fragment,f),E(L2.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(x2.$$.fragment,f),E(U8.$$.fragment,f),E(C1.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(A1.$$.fragment,f),E(Z8.$$.fragment,f),E(h4.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(_4.$$.fragment,f),E(a9.$$.fragment,f),E(rb.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(ab.$$.fragment,f),E(d9.$$.fragment,f),E(wb.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(Lb.$$.fragment,f),E(h9.$$.fragment,f),E(Lv.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(xv.$$.fragment,f),E(v9.$$.fragment,f),E(i5.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(c5.$$.fragment,f),E(C9.$$.fragment,f),E(b5.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(F5.$$.fragment,f),E(x9.$$.fragment,f),E(nF.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(lF.$$.fragment,f),E(P9.$$.fragment,f),E(KF.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(eT.$$.fragment,f),E(j9.$$.fragment,f),E(tT.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(nT.$$.fragment,f),E(X9.$$.fragment,f),E(TT.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(U9.$$.fragment,f),E(ET.$$.fragment,f),E(H9.$$.fragment,f),E(AT.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(yT.$$.fragment,f),E(ex.$$.fragment,f),E(kT.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(RT.$$.fragment,f),E(nx.$$.fragment,f),E(IT.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(qT.$$.fragment,f),E(cx.$$.fragment,f),E(HT.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(YT.$$.fragment,f),E(px.$$.fragment,f),E(a7.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(s7.$$.fragment,f),E(Fx.$$.fragment,f),E(b7.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(F7.$$.fragment,f),E(wx.$$.fragment,f),E(C7.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(A7.$$.fragment,f),E(kx.$$.fragment,f),E(R7.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(B7.$$.fragment,f),E(Ix.$$.fragment,f),E(G7.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(V7.$$.fragment,f),E(Gx.$$.fragment,f),E(Q7.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Wx.$$.fragment,f),E(H7.$$.fragment,f),E(Qx.$$.fragment,f),E(K7.$$.fragment,f),E(Ux.$$.fragment,f),E(Hx.$$.fragment,f),E(Yx.$$.fragment,f),E(eM.$$.fragment,f),E(Kx.$$.fragment,f),E(lM.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(dM.$$.fragment,f),E(t$.$$.fragment,f),E(mM.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(hM.$$.fragment,f),E(i$.$$.fragment,f),E(fE.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(gE.$$.fragment,f),E(g$.$$.fragment,f),E(NE.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(jE.$$.fragment,f),E(b$.$$.fragment,f),E(ZE.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(oC.$$.fragment,f),E(E$.$$.fragment,f),E(dC.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(fC.$$.fragment,f),E(y$.$$.fragment,f),E(hC.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(_C.$$.fragment,f),E(P$.$$.fragment,f),E(NC.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(jC.$$.fragment,f),E(j$.$$.fragment,f),E(JC.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(KC.$$.fragment,f),E(X$.$$.fragment,f),E(w3.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(U$.$$.fragment,f),E(L3.$$.fragment,f),E(H$.$$.fragment,f),E(z3.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(Z$.$$.fragment,f),E(Q3.$$.fragment,f),E(ek.$$.fragment,f),E(J3.$$.fragment,f),E(rk.$$.fragment,f),E(tk.$$.fragment,f),E(nk.$$.fragment,f),E(K3.$$.fragment,f),E(sk.$$.fragment,f),E(e0.$$.fragment,f),E(lk.$$.fragment,f),E(ik.$$.fragment,f),E(ck.$$.fragment,f),E(r0.$$.fragment,f),E(fk.$$.fragment,f),E(E0.$$.fragment,f),E(mk.$$.fragment,f),E(gk.$$.fragment,f),E(pk.$$.fragment,f),E(w0.$$.fragment,f),E(_k.$$.fragment,f),E(W0.$$.fragment,f),E(uk.$$.fragment,f),E(bk.$$.fragment,f),E(Fk.$$.fragment,f),E(U0.$$.fragment,f),E(Tk.$$.fragment,f),E(J0.$$.fragment,f),E(Mk.$$.fragment,f),E(Ek.$$.fragment,f),E(wk.$$.fragment,f),E(K0.$$.fragment,f),E(Ak.$$.fragment,f),E(ew.$$.fragment,f),E(Lk.$$.fragment,f),E(yk.$$.fragment,f),E($k.$$.fragment,f),E(rw.$$.fragment,f),E(kk.$$.fragment,f),E($w.$$.fragment,f),E(Sk.$$.fragment,f),E(Rk.$$.fragment,f),E(Bk.$$.fragment,f),E(Sw.$$.fragment,f),E(Ik.$$.fragment,f),E(Vw.$$.fragment,f),E(Nk.$$.fragment,f),E(qk.$$.fragment,f),E(Dk.$$.fragment,f),E(zw.$$.fragment,f),E(Gk.$$.fragment,f),E(n6.$$.fragment,f),E(Ok.$$.fragment,f),E(Vk.$$.fragment,f),E(zk.$$.fragment,f),E(l6.$$.fragment,f),E(Wk.$$.fragment,f),E(b6.$$.fragment,f),E(Qk.$$.fragment,f),E(Uk.$$.fragment,f),E(Jk.$$.fragment,f),E(F6.$$.fragment,f),E(Yk.$$.fragment,f),E(k6.$$.fragment,f),E(Kk.$$.fragment,f),E(Zk.$$.fragment,f),E(oS.$$.fragment,f),E(R6.$$.fragment,f),E(rS.$$.fragment,f),E(X6.$$.fragment,f),E(tS.$$.fragment,f),E(aS.$$.fragment,f),E(sS.$$.fragment,f),E(W6.$$.fragment,f),E(lS.$$.fragment,f),E(tA.$$.fragment,f),E(iS.$$.fragment,f),E(dS.$$.fragment,f),E(fS.$$.fragment,f),E(nA.$$.fragment,f),E(mS.$$.fragment,f),E(hA.$$.fragment,f),E(gS.$$.fragment,f),E(hS.$$.fragment,f),E(_S.$$.fragment,f),E(_A.$$.fragment,f),E(uS.$$.fragment,f),E(wA.$$.fragment,f),E(bS.$$.fragment,f),E(vS.$$.fragment,f),E(TS.$$.fragment,f),E(LA.$$.fragment,f),E(MS.$$.fragment,f),E(xA.$$.fragment,f),E(ES.$$.fragment,f),E(CS.$$.fragment,f),E(AS.$$.fragment,f),E(kA.$$.fragment,f),E(LS.$$.fragment,f),E(PA.$$.fragment,f),E(xS.$$.fragment,f),E($S.$$.fragment,f),E(SS.$$.fragment,f),E(IA.$$.fragment,f),E(RS.$$.fragment,f),E(qA.$$.fragment,f),KHe=!0)},o(f){C(d.$$.fragment,f),C(ja.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(im.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C(Ch.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(w8.$$.fragment,f),C(tp.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C(k8.$$.fragment,f),C(Xp.$$.fragment,f),C(zp.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(N8.$$.fragment,f),C(h_.$$.fragment,f),C(p_.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(b_.$$.fragment,f),C(V8.$$.fragment,f),C(L2.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(x2.$$.fragment,f),C(U8.$$.fragment,f),C(C1.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(A1.$$.fragment,f),C(Z8.$$.fragment,f),C(h4.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(_4.$$.fragment,f),C(a9.$$.fragment,f),C(rb.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(ab.$$.fragment,f),C(d9.$$.fragment,f),C(wb.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(Lb.$$.fragment,f),C(h9.$$.fragment,f),C(Lv.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(xv.$$.fragment,f),C(v9.$$.fragment,f),C(i5.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(c5.$$.fragment,f),C(C9.$$.fragment,f),C(b5.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(F5.$$.fragment,f),C(x9.$$.fragment,f),C(nF.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(lF.$$.fragment,f),C(P9.$$.fragment,f),C(KF.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(eT.$$.fragment,f),C(j9.$$.fragment,f),C(tT.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(nT.$$.fragment,f),C(X9.$$.fragment,f),C(TT.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(U9.$$.fragment,f),C(ET.$$.fragment,f),C(H9.$$.fragment,f),C(AT.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(yT.$$.fragment,f),C(ex.$$.fragment,f),C(kT.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(RT.$$.fragment,f),C(nx.$$.fragment,f),C(IT.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(qT.$$.fragment,f),C(cx.$$.fragment,f),C(HT.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(YT.$$.fragment,f),C(px.$$.fragment,f),C(a7.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(s7.$$.fragment,f),C(Fx.$$.fragment,f),C(b7.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(F7.$$.fragment,f),C(wx.$$.fragment,f),C(C7.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(A7.$$.fragment,f),C(kx.$$.fragment,f),C(R7.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(B7.$$.fragment,f),C(Ix.$$.fragment,f),C(G7.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(V7.$$.fragment,f),C(Gx.$$.fragment,f),C(Q7.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Wx.$$.fragment,f),C(H7.$$.fragment,f),C(Qx.$$.fragment,f),C(K7.$$.fragment,f),C(Ux.$$.fragment,f),C(Hx.$$.fragment,f),C(Yx.$$.fragment,f),C(eM.$$.fragment,f),C(Kx.$$.fragment,f),C(lM.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(dM.$$.fragment,f),C(t$.$$.fragment,f),C(mM.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(hM.$$.fragment,f),C(i$.$$.fragment,f),C(fE.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(gE.$$.fragment,f),C(g$.$$.fragment,f),C(NE.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(jE.$$.fragment,f),C(b$.$$.fragment,f),C(ZE.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(oC.$$.fragment,f),C(E$.$$.fragment,f),C(dC.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(fC.$$.fragment,f),C(y$.$$.fragment,f),C(hC.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(_C.$$.fragment,f),C(P$.$$.fragment,f),C(NC.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(jC.$$.fragment,f),C(j$.$$.fragment,f),C(JC.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(KC.$$.fragment,f),C(X$.$$.fragment,f),C(w3.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(U$.$$.fragment,f),C(L3.$$.fragment,f),C(H$.$$.fragment,f),C(z3.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(Z$.$$.fragment,f),C(Q3.$$.fragment,f),C(ek.$$.fragment,f),C(J3.$$.fragment,f),C(rk.$$.fragment,f),C(tk.$$.fragment,f),C(nk.$$.fragment,f),C(K3.$$.fragment,f),C(sk.$$.fragment,f),C(e0.$$.fragment,f),C(lk.$$.fragment,f),C(ik.$$.fragment,f),C(ck.$$.fragment,f),C(r0.$$.fragment,f),C(fk.$$.fragment,f),C(E0.$$.fragment,f),C(mk.$$.fragment,f),C(gk.$$.fragment,f),C(pk.$$.fragment,f),C(w0.$$.fragment,f),C(_k.$$.fragment,f),C(W0.$$.fragment,f),C(uk.$$.fragment,f),C(bk.$$.fragment,f),C(Fk.$$.fragment,f),C(U0.$$.fragment,f),C(Tk.$$.fragment,f),C(J0.$$.fragment,f),C(Mk.$$.fragment,f),C(Ek.$$.fragment,f),C(wk.$$.fragment,f),C(K0.$$.fragment,f),C(Ak.$$.fragment,f),C(ew.$$.fragment,f),C(Lk.$$.fragment,f),C(yk.$$.fragment,f),C($k.$$.fragment,f),C(rw.$$.fragment,f),C(kk.$$.fragment,f),C($w.$$.fragment,f),C(Sk.$$.fragment,f),C(Rk.$$.fragment,f),C(Bk.$$.fragment,f),C(Sw.$$.fragment,f),C(Ik.$$.fragment,f),C(Vw.$$.fragment,f),C(Nk.$$.fragment,f),C(qk.$$.fragment,f),C(Dk.$$.fragment,f),C(zw.$$.fragment,f),C(Gk.$$.fragment,f),C(n6.$$.fragment,f),C(Ok.$$.fragment,f),C(Vk.$$.fragment,f),C(zk.$$.fragment,f),C(l6.$$.fragment,f),C(Wk.$$.fragment,f),C(b6.$$.fragment,f),C(Qk.$$.fragment,f),C(Uk.$$.fragment,f),C(Jk.$$.fragment,f),C(F6.$$.fragment,f),C(Yk.$$.fragment,f),C(k6.$$.fragment,f),C(Kk.$$.fragment,f),C(Zk.$$.fragment,f),C(oS.$$.fragment,f),C(R6.$$.fragment,f),C(rS.$$.fragment,f),C(X6.$$.fragment,f),C(tS.$$.fragment,f),C(aS.$$.fragment,f),C(sS.$$.fragment,f),C(W6.$$.fragment,f),C(lS.$$.fragment,f),C(tA.$$.fragment,f),C(iS.$$.fragment,f),C(dS.$$.fragment,f),C(fS.$$.fragment,f),C(nA.$$.fragment,f),C(mS.$$.fragment,f),C(hA.$$.fragment,f),C(gS.$$.fragment,f),C(hS.$$.fragment,f),C(_S.$$.fragment,f),C(_A.$$.fragment,f),C(uS.$$.fragment,f),C(wA.$$.fragment,f),C(bS.$$.fragment,f),C(vS.$$.fragment,f),C(TS.$$.fragment,f),C(LA.$$.fragment,f),C(MS.$$.fragment,f),C(xA.$$.fragment,f),C(ES.$$.fragment,f),C(CS.$$.fragment,f),C(AS.$$.fragment,f),C(kA.$$.fragment,f),C(LS.$$.fragment,f),C(PA.$$.fragment,f),C(xS.$$.fragment,f),C($S.$$.fragment,f),C(SS.$$.fragment,f),C(IA.$$.fragment,f),C(RS.$$.fragment,f),C(qA.$$.fragment,f),KHe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(tm),f&&t(ft),f&&t(Oe),f&&t(Qe),f&&t(nm),w(ja,f),f&&t(Ue),f&&t(Ae),f&&t(Lo),f&&t(Da),f&&t(VQe),f&&t(Ki),w(g8),f&&t(XQe),f&&t(Un),f&&t(zQe),w(h8,f),f&&t(WQe),f&&t(fP),f&&t(QQe),w(im,f),f&&t(UQe),f&&t(Zi),w(p8),f&&t(HQe),f&&t(yo),w(_8),w(v8),w(Ch),w(F8),f&&t(JQe),f&&t(od),w(T8),f&&t(YQe),f&&t(xo),w(M8),w(w8),w(tp),w(A8),f&&t(KQe),f&&t(rd),w(L8),f&&t(ZQe),f&&t($o),w(y8),w(k8),w(Xp),w(zp),w(S8),f&&t(eUe),f&&t(td),w(R8),f&&t(oUe),f&&t(ko),w(P8),w(N8),w(h_),w(p_),w(q8),f&&t(rUe),f&&t(nd),w(j8),f&&t(tUe),f&&t(So),w(D8),w(O8),w(b_),w(V8),w(L2),f&&t(aUe),f&&t(id),w(X8),f&&t(nUe),f&&t(Ro),w(z8),w(Q8),w(x2),w(U8),w(C1),f&&t(sUe),f&&t(fd),w(H8),f&&t(lUe),f&&t(Po),w(J8),w(K8),w(A1),w(Z8),w(h4),f&&t(iUe),f&&t(hd),w(e9),f&&t(dUe),f&&t(Bo),w(o9),w(t9),w(_4),w(a9),w(rb),f&&t(cUe),f&&t(ud),w(n9),f&&t(fUe),f&&t(Io),w(s9),w(i9),w(ab),w(d9),w(wb),f&&t(mUe),f&&t(Fd),w(c9),f&&t(gUe),f&&t(No),w(f9),w(g9),w(Lb),w(h9),w(Lv),f&&t(hUe),f&&t(Ed),w(p9),f&&t(pUe),f&&t(qo),w(_9),w(b9),w(xv),w(v9),w(i5),f&&t(_Ue),f&&t(Ad),w(F9),f&&t(uUe),f&&t(jo),w(T9),w(E9),w(c5),w(C9),w(b5),f&&t(bUe),f&&t(xd),w(w9),f&&t(vUe),f&&t(Go),w(A9),w(y9),w(F5),w(x9),w(nF),f&&t(FUe),f&&t(Sd),w($9),f&&t(TUe),f&&t(Oo),w(k9),w(R9),w(lF),w(P9),w(KF),f&&t(MUe),f&&t(Bd),w(B9),f&&t(EUe),f&&t(Vo),w(I9),w(q9),w(eT),w(j9),w(tT),f&&t(CUe),f&&t(qd),w(D9),f&&t(wUe),f&&t(Xo),w(G9),w(V9),w(nT),w(X9),w(TT),f&&t(AUe),f&&t(Gd),w(z9),f&&t(LUe),f&&t(zo),w(W9),w(U9),w(ET),w(H9),w(AT),f&&t(yUe),f&&t(Xd),w(J9),f&&t(xUe),f&&t(Wo),w(Y9),w(Z9),w(yT),w(ex),w(kT),f&&t($Ue),f&&t(Qd),w(ox),f&&t(kUe),f&&t(Qo),w(rx),w(ax),w(RT),w(nx),w(IT),f&&t(SUe),f&&t(Jd),w(sx),f&&t(RUe),f&&t(Uo),w(lx),w(dx),w(qT),w(cx),w(HT),f&&t(PUe),f&&t(Zd),w(fx),f&&t(BUe),f&&t(Ho),w(mx),w(hx),w(YT),w(px),w(a7),f&&t(IUe),f&&t(rc),w(_x),f&&t(NUe),f&&t(Jo),w(ux),w(vx),w(s7),w(Fx),w(b7),f&&t(qUe),f&&t(nc),w(Tx),f&&t(jUe),f&&t(Yo),w(Mx),w(Cx),w(F7),w(wx),w(C7),f&&t(DUe),f&&t(ic),w(Lx),f&&t(GUe),f&&t(Ko),w(yx),w($x),w(A7),w(kx),w(R7),f&&t(OUe),f&&t(fc),w(Sx),f&&t(VUe),f&&t(Zo),w(Rx),w(Bx),w(B7),w(Ix),w(G7),f&&t(XUe),f&&t(hc),w(Nx),f&&t(zUe),f&&t(er),w(qx),w(Dx),w(V7),w(Gx),w(Q7),f&&t(WUe),f&&t(uc),w(Vx),f&&t(QUe),f&&t(or),w(Xx),w(Wx),w(H7),w(Qx),w(K7),f&&t(UUe),f&&t(Fc),w(Ux),f&&t(HUe),f&&t(rr),w(Hx),w(Yx),w(eM),w(Kx),w(lM),f&&t(JUe),f&&t(Ec),w(Zx),f&&t(YUe),f&&t(tr),w(e$),w(r$),w(dM),w(t$),w(mM),f&&t(KUe),f&&t(Ac),w(a$),f&&t(ZUe),f&&t(ar),w(n$),w(l$),w(hM),w(i$),w(fE),f&&t(eHe),f&&t(xc),w(d$),f&&t(oHe),f&&t(nr),w(c$),w(m$),w(gE),w(g$),w(NE),f&&t(rHe),f&&t(Sc),w(h$),f&&t(tHe),f&&t(sr),w(p$),w(u$),w(jE),w(b$),w(ZE),f&&t(aHe),f&&t(Bc),w(v$),f&&t(nHe),f&&t(lr),w(F$),w(M$),w(oC),w(E$),w(dC),f&&t(sHe),f&&t(qc),w(C$),f&&t(lHe),f&&t(ir),w(w$),w(L$),w(fC),w(y$),w(hC),f&&t(iHe),f&&t(Gc),w($$),f&&t(dHe),f&&t(dr),w(k$),w(R$),w(_C),w(P$),w(NC),f&&t(cHe),f&&t(Xc),w(B$),f&&t(fHe),f&&t(cr),w(I$),w(q$),w(jC),w(j$),w(JC),f&&t(mHe),f&&t(Qc),w(D$),f&&t(gHe),f&&t(fr),w(G$),w(V$),w(KC),w(X$),w(w3),f&&t(hHe),f&&t(Jc),w(z$),f&&t(pHe),f&&t(mr),w(W$),w(U$),w(L3),w(H$),w(z3),f&&t(_He),f&&t(Zc),w(J$),f&&t(uHe),f&&t(gr),w(Y$),w(Z$),w(Q3),w(ek),w(J3),f&&t(bHe),f&&t(rf),w(rk),f&&t(vHe),f&&t(hr),w(tk),w(nk),w(K3),w(sk),w(e0),f&&t(FHe),f&&t(nf),w(lk),f&&t(THe),f&&t(pr),w(ik),w(ck),w(r0),w(fk),w(E0),f&&t(MHe),f&&t(df),w(mk),f&&t(EHe),f&&t(_r),w(gk),w(pk),w(w0),w(_k),w(W0),f&&t(CHe),f&&t(mf),w(uk),f&&t(wHe),f&&t(ur),w(bk),w(Fk),w(U0),w(Tk),w(J0),f&&t(AHe),f&&t(pf),w(Mk),f&&t(LHe),f&&t(br),w(Ek),w(wk),w(K0),w(Ak),w(ew),f&&t(yHe),f&&t(bf),w(Lk),f&&t(xHe),f&&t(vr),w(yk),w($k),w(rw),w(kk),w($w),f&&t($He),f&&t(Tf),w(Sk),f&&t(kHe),f&&t(Fr),w(Rk),w(Bk),w(Sw),w(Ik),w(Vw),f&&t(SHe),f&&t(Cf),w(Nk),f&&t(RHe),f&&t(Tr),w(qk),w(Dk),w(zw),w(Gk),w(n6),f&&t(PHe),f&&t(Lf),w(Ok),f&&t(BHe),f&&t(Mr),w(Vk),w(zk),w(l6),w(Wk),w(b6),f&&t(IHe),f&&t($f),w(Qk),f&&t(NHe),f&&t(Er),w(Uk),w(Jk),w(F6),w(Yk),w(k6),f&&t(qHe),f&&t(Rf),w(Kk),f&&t(jHe),f&&t(Cr),w(Zk),w(oS),w(R6),w(rS),w(X6),f&&t(DHe),f&&t(If),w(tS),f&&t(GHe),f&&t(wr),w(aS),w(sS),w(W6),w(lS),w(tA),f&&t(OHe),f&&t(jf),w(iS),f&&t(VHe),f&&t(Ar),w(dS),w(fS),w(nA),w(mS),w(hA),f&&t(XHe),f&&t(Of),w(gS),f&&t(zHe),f&&t(Lr),w(hS),w(_S),w(_A),w(uS),w(wA),f&&t(WHe),f&&t(zf),w(bS),f&&t(QHe),f&&t(yr),w(vS),w(TS),w(LA),w(MS),w(xA),f&&t(UHe),f&&t(Uf),w(ES),f&&t(HHe),f&&t(xr),w(CS),w(AS),w(kA),w(LS),w(PA),f&&t(JHe),f&&t(Yf),w(xS),f&&t(YHe),f&&t($r),w($S),w(SS),w(IA),w(RS),w(qA)}}}const ena={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function ona($){return Hra(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ina extends zra{constructor(g){super();Wra(this,g,ona,Zaa,Qra,{})}}export{ina as default,ena as metadata};
