import{S as mta,i as gta,s as hta,e as a,k as l,w as F,t as o,M as pta,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as _ta,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Uft}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function uta($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,my,om,Oe,Qe,zi,Xn,gy,zn,Wn,hy,Wi,Qn,py,Qi,rm,ja;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),em=o("model_type"),ft=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),my=o(")."),om=l(),Oe=a("p"),Qe=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),gy=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),hy=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),py=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),rm=o("NewModelConfig"),ja=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var sP=s(p);m=r(sP,"NewModelConfig"),sP.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var lP=s(Oi);em=r(lP,"model_type"),lP.forEach(t),ft=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var iP=s(Vi);Xi=r(iP,'"new-model"'),iP.forEach(t),my=r(Ae,")."),Ae.forEach(t),om=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),gy=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var dP=s(zn);Wn=r(dP,"PreTrainedModel"),dP.forEach(t),hy=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var tm=s(Wi);Qn=r(tm,"config_class"),tm.forEach(t),py=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var cP=s(Qi);rm=r(cP,"NewModelConfig"),cP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,em),e(g,ft),e(g,Vi),e(Vi,Xi),e(g,my),b(Ue,om,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,zi),e(zi,Xn),e(Oe,gy),e(Oe,zn),e(zn,Wn),e(Oe,hy),e(Oe,Wi),e(Wi,Qn),e(Oe,py),e(Oe,Qi),e(Qi,rm),e(Oe,ja)},d(Ue){Ue&&t(g),Ue&&t(om),Ue&&t(Oe)}}}function bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Tta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mta($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function Eta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ata($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ita($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ota($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zta($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Faa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Taa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Maa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Caa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Laa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $aa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Saa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Raa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Paa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Baa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Naa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Daa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Waa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Haa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zaa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ena($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ona($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ana($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ina($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _na($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function una($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vna($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fna($){let g,v,p,m,_,d,h,Ao,Oi,em,ft,Vi,Xi,my,om,Oe,Qe,zi,Xn,gy,zn,Wn,hy,Wi,Qn,py,Qi,rm,ja,Ue,Ae,sP,Ui,lP,iP,Lo,Da,dP,tm,cP,MKe,KQe,Hi,am,Ose,_y,EKe,Vse,CKe,ZQe,Un,wKe,Xse,AKe,LKe,zse,yKe,xKe,eUe,uy,oUe,fP,$Ke,rUe,nm,tUe,Ji,sm,Wse,by,kKe,Qse,SKe,aUe,yo,vy,RKe,Fy,PKe,mP,BKe,IKe,NKe,Ty,qKe,Use,jKe,DKe,GKe,kr,My,OKe,Hse,VKe,XKe,Yi,zKe,Jse,WKe,QKe,Yse,UKe,HKe,JKe,A,lm,Kse,YKe,KKe,gP,ZKe,eZe,oZe,im,Zse,rZe,tZe,hP,aZe,nZe,sZe,dm,ele,lZe,iZe,pP,dZe,cZe,fZe,cm,ole,mZe,gZe,_P,hZe,pZe,_Ze,fm,rle,uZe,bZe,uP,vZe,FZe,TZe,mm,tle,MZe,EZe,bP,CZe,wZe,AZe,gm,ale,LZe,yZe,vP,xZe,$Ze,kZe,hm,nle,SZe,RZe,FP,PZe,BZe,IZe,pm,sle,NZe,qZe,TP,jZe,DZe,GZe,_m,lle,OZe,VZe,MP,XZe,zZe,WZe,um,ile,QZe,UZe,EP,HZe,JZe,YZe,bm,dle,KZe,ZZe,CP,eeo,oeo,reo,vm,cle,teo,aeo,wP,neo,seo,leo,Fm,fle,ieo,deo,AP,ceo,feo,meo,Tm,mle,geo,heo,LP,peo,_eo,ueo,Mm,gle,beo,veo,yP,Feo,Teo,Meo,Em,hle,Eeo,Ceo,xP,weo,Aeo,Leo,Cm,ple,yeo,xeo,$P,$eo,keo,Seo,wm,_le,Reo,Peo,kP,Beo,Ieo,Neo,Am,ule,qeo,jeo,SP,Deo,Geo,Oeo,Lm,ble,Veo,Xeo,RP,zeo,Weo,Qeo,ym,vle,Ueo,Heo,PP,Jeo,Yeo,Keo,xm,Fle,Zeo,eoo,BP,ooo,roo,too,$m,Tle,aoo,noo,IP,soo,loo,ioo,km,Mle,doo,coo,NP,foo,moo,goo,Sm,Ele,hoo,poo,qP,_oo,uoo,boo,Rm,Cle,voo,Foo,jP,Too,Moo,Eoo,Pm,wle,Coo,woo,DP,Aoo,Loo,yoo,Bm,Ale,xoo,$oo,GP,koo,Soo,Roo,Im,Lle,Poo,Boo,OP,Ioo,Noo,qoo,Nm,yle,joo,Doo,VP,Goo,Ooo,Voo,qm,xle,Xoo,zoo,XP,Woo,Qoo,Uoo,jm,$le,Hoo,Joo,zP,Yoo,Koo,Zoo,Dm,kle,ero,oro,WP,rro,tro,aro,Gm,Sle,nro,sro,QP,lro,iro,dro,Om,Rle,cro,fro,UP,mro,gro,hro,Vm,Ple,pro,_ro,HP,uro,bro,vro,Xm,Ble,Fro,Tro,JP,Mro,Ero,Cro,zm,Ile,wro,Aro,YP,Lro,yro,xro,Wm,Nle,$ro,kro,KP,Sro,Rro,Pro,Qm,qle,Bro,Iro,ZP,Nro,qro,jro,Um,jle,Dro,Gro,eB,Oro,Vro,Xro,Hm,Dle,zro,Wro,oB,Qro,Uro,Hro,Jm,Gle,Jro,Yro,rB,Kro,Zro,eto,Ym,Ole,oto,rto,tB,tto,ato,nto,Km,Vle,sto,lto,aB,ito,dto,cto,Zm,Xle,fto,mto,nB,gto,hto,pto,eg,zle,_to,uto,sB,bto,vto,Fto,og,Wle,Tto,Mto,lB,Eto,Cto,wto,rg,Qle,Ato,Lto,iB,yto,xto,$to,tg,Ule,kto,Sto,dB,Rto,Pto,Bto,ag,Hle,Ito,Nto,cB,qto,jto,Dto,ng,Jle,Gto,Oto,fB,Vto,Xto,zto,sg,Yle,Wto,Qto,mB,Uto,Hto,Jto,lg,Kle,Yto,Kto,gB,Zto,eao,oao,ig,Zle,rao,tao,hB,aao,nao,sao,dg,eie,lao,iao,pB,dao,cao,fao,cg,oie,mao,gao,_B,hao,pao,_ao,fg,rie,uao,bao,uB,vao,Fao,Tao,mg,tie,Mao,Eao,bB,Cao,wao,Aao,gg,aie,Lao,yao,vB,xao,$ao,kao,hg,nie,Sao,Rao,FB,Pao,Bao,Iao,pg,sie,Nao,qao,TB,jao,Dao,Gao,_g,lie,Oao,Vao,MB,Xao,zao,Wao,ug,iie,Qao,Uao,EB,Hao,Jao,Yao,bg,die,Kao,Zao,CB,eno,ono,rno,vg,cie,tno,ano,wB,nno,sno,lno,Fg,fie,ino,dno,AB,cno,fno,mno,Tg,mie,gno,hno,LB,pno,_no,uno,Mg,gie,bno,vno,yB,Fno,Tno,Mno,Eg,hie,Eno,Cno,xB,wno,Ano,Lno,Cg,pie,yno,xno,$B,$no,kno,Sno,wg,_ie,Rno,Pno,kB,Bno,Ino,Nno,Ag,uie,qno,jno,SB,Dno,Gno,Ono,Lg,bie,Vno,Xno,RB,zno,Wno,Qno,yg,vie,Uno,Hno,PB,Jno,Yno,Kno,xg,Fie,Zno,eso,BB,oso,rso,tso,$g,Tie,aso,nso,IB,sso,lso,iso,kg,Mie,dso,cso,NB,fso,mso,gso,Sg,Eie,hso,pso,qB,_so,uso,bso,Rg,Cie,vso,Fso,jB,Tso,Mso,Eso,Pg,wie,Cso,wso,DB,Aso,Lso,yso,Bg,Aie,xso,$so,GB,kso,Sso,Rso,Ig,Lie,Pso,Bso,OB,Iso,Nso,qso,Ng,yie,jso,Dso,VB,Gso,Oso,Vso,qg,xie,Xso,zso,XB,Wso,Qso,Uso,jg,$ie,Hso,Jso,zB,Yso,Kso,Zso,Dg,kie,elo,olo,WB,rlo,tlo,alo,Gg,Sie,nlo,slo,QB,llo,ilo,dlo,Og,Rie,clo,flo,UB,mlo,glo,hlo,Vg,Pie,plo,_lo,HB,ulo,blo,vlo,Xg,Bie,Flo,Tlo,JB,Mlo,Elo,Clo,zg,Iie,wlo,Alo,YB,Llo,ylo,xlo,Wg,Nie,$lo,klo,KB,Slo,Rlo,Plo,Qg,qie,Blo,Ilo,ZB,Nlo,qlo,jlo,Ug,jie,Dlo,Glo,eI,Olo,Vlo,Xlo,Hg,Die,zlo,Wlo,oI,Qlo,Ulo,Hlo,Jg,Gie,Jlo,Ylo,rI,Klo,Zlo,eio,Yg,Oie,oio,rio,tI,tio,aio,nio,Kg,Vie,sio,lio,aI,iio,dio,cio,Zg,Xie,fio,mio,nI,gio,hio,pio,eh,zie,_io,uio,sI,bio,vio,Fio,oh,Wie,Tio,Mio,lI,Eio,Cio,wio,rh,Qie,Aio,Lio,iI,yio,xio,$io,th,Uie,kio,Sio,dI,Rio,Pio,Bio,ah,Hie,Iio,Nio,cI,qio,jio,Dio,nh,Jie,Gio,Oio,fI,Vio,Xio,zio,sh,Yie,Wio,Qio,mI,Uio,Hio,Jio,lh,Kie,Yio,Kio,gI,Zio,edo,odo,ih,Zie,rdo,tdo,hI,ado,ndo,sdo,dh,ede,ldo,ido,pI,ddo,cdo,fdo,ch,ode,mdo,gdo,_I,hdo,pdo,_do,fh,rde,udo,bdo,uI,vdo,Fdo,Tdo,mh,tde,Mdo,Edo,bI,Cdo,wdo,Ado,gh,ade,Ldo,ydo,vI,xdo,$do,kdo,hh,nde,Sdo,Rdo,FI,Pdo,Bdo,Ido,ph,sde,Ndo,qdo,TI,jdo,Ddo,Gdo,_h,lde,Odo,Vdo,MI,Xdo,zdo,Wdo,uh,ide,Qdo,Udo,EI,Hdo,Jdo,Ydo,bh,dde,Kdo,Zdo,CI,eco,oco,rco,vh,cde,tco,aco,wI,nco,sco,lco,Fh,fde,ico,dco,AI,cco,fco,mco,Th,gco,Mh,Ey,hco,mde,pco,nUe,Ki,Eh,gde,Cy,_co,hde,uco,sUe,xo,wy,bco,Ay,vco,LI,Fco,Tco,Mco,Ly,Eco,pde,Cco,wco,Aco,Sr,yy,Lco,_de,yco,xco,Ga,$co,ude,kco,Sco,bde,Rco,Pco,vde,Bco,Ico,Nco,k,Hn,Fde,qco,jco,yI,Dco,Gco,xI,Oco,Vco,Xco,Jn,Tde,zco,Wco,$I,Qco,Uco,kI,Hco,Jco,Yco,Yn,Mde,Kco,Zco,SI,efo,ofo,RI,rfo,tfo,afo,Ch,Ede,nfo,sfo,PI,lfo,ifo,dfo,Kn,Cde,cfo,ffo,BI,mfo,gfo,II,hfo,pfo,_fo,wh,wde,ufo,bfo,NI,vfo,Ffo,Tfo,Ah,Ade,Mfo,Efo,qI,Cfo,wfo,Afo,Lh,Lde,Lfo,yfo,jI,xfo,$fo,kfo,Zn,yde,Sfo,Rfo,DI,Pfo,Bfo,GI,Ifo,Nfo,qfo,es,xde,jfo,Dfo,OI,Gfo,Ofo,VI,Vfo,Xfo,zfo,os,$de,Wfo,Qfo,XI,Ufo,Hfo,zI,Jfo,Yfo,Kfo,yh,kde,Zfo,emo,WI,omo,rmo,tmo,xh,Sde,amo,nmo,QI,smo,lmo,imo,$h,Rde,dmo,cmo,UI,fmo,mmo,gmo,rs,Pde,hmo,pmo,HI,_mo,umo,JI,bmo,vmo,Fmo,kh,Bde,Tmo,Mmo,YI,Emo,Cmo,wmo,ts,Ide,Amo,Lmo,KI,ymo,xmo,ZI,$mo,kmo,Smo,as,Nde,Rmo,Pmo,eN,Bmo,Imo,oN,Nmo,qmo,jmo,ns,qde,Dmo,Gmo,rN,Omo,Vmo,tN,Xmo,zmo,Wmo,ss,jde,Qmo,Umo,aN,Hmo,Jmo,nN,Ymo,Kmo,Zmo,Sh,Dde,ego,ogo,sN,rgo,tgo,ago,ls,Gde,ngo,sgo,lN,lgo,igo,iN,dgo,cgo,fgo,is,Ode,mgo,ggo,dN,hgo,pgo,cN,_go,ugo,bgo,ds,Vde,vgo,Fgo,fN,Tgo,Mgo,mN,Ego,Cgo,wgo,cs,Xde,Ago,Lgo,gN,ygo,xgo,hN,$go,kgo,Sgo,fs,zde,Rgo,Pgo,pN,Bgo,Igo,_N,Ngo,qgo,jgo,ms,Wde,Dgo,Ggo,uN,Ogo,Vgo,bN,Xgo,zgo,Wgo,Rh,Qde,Qgo,Ugo,vN,Hgo,Jgo,Ygo,gs,Ude,Kgo,Zgo,FN,eho,oho,TN,rho,tho,aho,Ph,Hde,nho,sho,MN,lho,iho,dho,hs,Jde,cho,fho,EN,mho,gho,CN,hho,pho,_ho,ps,Yde,uho,bho,wN,vho,Fho,AN,Tho,Mho,Eho,_s,Kde,Cho,who,LN,Aho,Lho,yN,yho,xho,$ho,Bh,Zde,kho,Sho,xN,Rho,Pho,Bho,us,ece,Iho,Nho,$N,qho,jho,kN,Dho,Gho,Oho,bs,oce,Vho,Xho,SN,zho,Who,RN,Qho,Uho,Hho,vs,rce,Jho,Yho,PN,Kho,Zho,BN,epo,opo,rpo,Ih,tce,tpo,apo,IN,npo,spo,lpo,Fs,ace,ipo,dpo,NN,cpo,fpo,qN,mpo,gpo,hpo,Ts,nce,ppo,_po,jN,upo,bpo,DN,vpo,Fpo,Tpo,Ms,sce,Mpo,Epo,GN,Cpo,wpo,ON,Apo,Lpo,ypo,Es,lce,xpo,$po,VN,kpo,Spo,XN,Rpo,Ppo,Bpo,Cs,ice,Ipo,Npo,zN,qpo,jpo,WN,Dpo,Gpo,Opo,ws,dce,Vpo,Xpo,QN,zpo,Wpo,UN,Qpo,Upo,Hpo,As,cce,Jpo,Ypo,HN,Kpo,Zpo,JN,e_o,o_o,r_o,Ls,fce,t_o,a_o,YN,n_o,s_o,KN,l_o,i_o,d_o,Nh,mce,c_o,f_o,ZN,m_o,g_o,h_o,ys,gce,p_o,__o,eq,u_o,b_o,oq,v_o,F_o,T_o,qh,hce,M_o,E_o,rq,C_o,w_o,A_o,jh,pce,L_o,y_o,tq,x_o,$_o,k_o,xs,_ce,S_o,R_o,aq,P_o,B_o,nq,I_o,N_o,q_o,$s,uce,j_o,D_o,sq,G_o,O_o,lq,V_o,X_o,z_o,ks,bce,W_o,Q_o,iq,U_o,H_o,dq,J_o,Y_o,K_o,Dh,vce,Z_o,euo,cq,ouo,ruo,tuo,Ss,Fce,auo,nuo,fq,suo,luo,mq,iuo,duo,cuo,Rs,Tce,fuo,muo,gq,guo,huo,hq,puo,_uo,uuo,Ps,Mce,buo,vuo,pq,Fuo,Tuo,_q,Muo,Euo,Cuo,Bs,Ece,wuo,Auo,uq,Luo,yuo,bq,xuo,$uo,kuo,Is,Cce,Suo,Ruo,vq,Puo,Buo,Fq,Iuo,Nuo,quo,Ns,wce,juo,Duo,Tq,Guo,Ouo,Mq,Vuo,Xuo,zuo,qs,Ace,Wuo,Quo,Eq,Uuo,Huo,Cq,Juo,Yuo,Kuo,js,Lce,Zuo,e2o,wq,o2o,r2o,Aq,t2o,a2o,n2o,Gh,yce,s2o,l2o,Lq,i2o,d2o,c2o,Ds,xce,f2o,m2o,yq,g2o,h2o,xq,p2o,_2o,u2o,Gs,$ce,b2o,v2o,$q,F2o,T2o,kq,M2o,E2o,C2o,Oh,kce,w2o,A2o,Sq,L2o,y2o,x2o,Vh,Sce,$2o,k2o,Rq,S2o,R2o,P2o,Xh,Rce,B2o,I2o,Pq,N2o,q2o,j2o,zh,Pce,D2o,G2o,Bq,O2o,V2o,X2o,Os,Bce,z2o,W2o,Iq,Q2o,U2o,Nq,H2o,J2o,Y2o,Wh,Ice,K2o,Z2o,qq,e0o,o0o,r0o,Vs,Nce,t0o,a0o,jq,n0o,s0o,Dq,l0o,i0o,d0o,Xs,qce,c0o,f0o,Gq,m0o,g0o,Oq,h0o,p0o,_0o,zs,jce,u0o,b0o,Vq,v0o,F0o,Xq,T0o,M0o,E0o,Ws,Dce,C0o,w0o,zq,A0o,L0o,Wq,y0o,x0o,$0o,Qs,Gce,k0o,S0o,Qq,R0o,P0o,Uq,B0o,I0o,N0o,Us,Oce,q0o,j0o,Hq,D0o,G0o,Jq,O0o,V0o,X0o,Qh,Vce,z0o,W0o,Yq,Q0o,U0o,H0o,Uh,Xce,J0o,Y0o,Kq,K0o,Z0o,e1o,Hs,zce,o1o,r1o,Zq,t1o,a1o,ej,n1o,s1o,l1o,Js,Wce,i1o,d1o,oj,c1o,f1o,rj,m1o,g1o,h1o,Ys,Qce,p1o,_1o,tj,u1o,b1o,aj,v1o,F1o,T1o,Hh,Uce,M1o,E1o,nj,C1o,w1o,A1o,Jh,Hce,L1o,y1o,sj,x1o,$1o,k1o,Yh,Jce,S1o,R1o,lj,P1o,B1o,I1o,Ks,Yce,N1o,q1o,ij,j1o,D1o,dj,G1o,O1o,V1o,Zs,Kce,X1o,z1o,cj,W1o,Q1o,fj,U1o,H1o,J1o,Kh,Zce,Y1o,K1o,mj,Z1o,ebo,obo,Zh,efe,rbo,tbo,gj,abo,nbo,sbo,ep,ofe,lbo,ibo,hj,dbo,cbo,fbo,el,rfe,mbo,gbo,pj,hbo,pbo,_j,_bo,ubo,bbo,op,tfe,vbo,Fbo,uj,Tbo,Mbo,Ebo,rp,afe,Cbo,wbo,bj,Abo,Lbo,ybo,ol,nfe,xbo,$bo,vj,kbo,Sbo,Fj,Rbo,Pbo,Bbo,rl,sfe,Ibo,Nbo,Tj,qbo,jbo,Mj,Dbo,Gbo,Obo,tl,lfe,Vbo,Xbo,Ej,zbo,Wbo,Cj,Qbo,Ubo,Hbo,al,ife,Jbo,Ybo,wj,Kbo,Zbo,Aj,evo,ovo,rvo,tp,tvo,ap,xy,avo,dfe,nvo,lUe,Zi,np,cfe,$y,svo,ffe,lvo,iUe,$o,ky,ivo,Sy,dvo,Lj,cvo,fvo,mvo,Ry,gvo,mfe,hvo,pvo,_vo,He,Py,uvo,gfe,bvo,vvo,Oa,Fvo,hfe,Tvo,Mvo,pfe,Evo,Cvo,_fe,wvo,Avo,Lvo,Q,sp,ufe,yvo,xvo,yj,$vo,kvo,Svo,lp,bfe,Rvo,Pvo,xj,Bvo,Ivo,Nvo,ip,vfe,qvo,jvo,$j,Dvo,Gvo,Ovo,dp,Ffe,Vvo,Xvo,kj,zvo,Wvo,Qvo,cp,Tfe,Uvo,Hvo,Sj,Jvo,Yvo,Kvo,fp,Mfe,Zvo,eFo,Rj,oFo,rFo,tFo,mp,Efe,aFo,nFo,Pj,sFo,lFo,iFo,gp,Cfe,dFo,cFo,Bj,fFo,mFo,gFo,hp,wfe,hFo,pFo,Ij,_Fo,uFo,bFo,pp,Afe,vFo,FFo,Nj,TFo,MFo,EFo,_p,Lfe,CFo,wFo,qj,AFo,LFo,yFo,up,yfe,xFo,$Fo,jj,kFo,SFo,RFo,bp,xfe,PFo,BFo,Dj,IFo,NFo,qFo,vp,$fe,jFo,DFo,Gj,GFo,OFo,VFo,Fp,kfe,XFo,zFo,Oj,WFo,QFo,UFo,Tp,Sfe,HFo,JFo,Vj,YFo,KFo,ZFo,Mp,Rfe,eTo,oTo,Xj,rTo,tTo,aTo,Ep,Pfe,nTo,sTo,zj,lTo,iTo,dTo,Cp,Bfe,cTo,fTo,Wj,mTo,gTo,hTo,wp,Ife,pTo,_To,Qj,uTo,bTo,vTo,Ap,Nfe,FTo,TTo,Uj,MTo,ETo,CTo,Lp,qfe,wTo,ATo,Hj,LTo,yTo,xTo,yp,jfe,$To,kTo,Jj,STo,RTo,PTo,xp,Dfe,BTo,ITo,Yj,NTo,qTo,jTo,$p,Gfe,DTo,GTo,Kj,OTo,VTo,XTo,kp,Ofe,zTo,WTo,Zj,QTo,UTo,HTo,Sp,Vfe,JTo,YTo,eD,KTo,ZTo,e8o,Rp,Xfe,o8o,r8o,oD,t8o,a8o,n8o,Pp,zfe,s8o,l8o,rD,i8o,d8o,c8o,Bp,Wfe,f8o,m8o,tD,g8o,h8o,p8o,Ip,Qfe,_8o,u8o,aD,b8o,v8o,F8o,Np,Ufe,T8o,M8o,nD,E8o,C8o,w8o,qp,Hfe,A8o,L8o,sD,y8o,x8o,$8o,jp,Jfe,k8o,S8o,lD,R8o,P8o,B8o,Dp,Yfe,I8o,N8o,iD,q8o,j8o,D8o,Gp,Kfe,G8o,O8o,dD,V8o,X8o,z8o,Op,Zfe,W8o,Q8o,cD,U8o,H8o,J8o,Vp,eme,Y8o,K8o,fD,Z8o,eMo,oMo,Xp,rMo,zp,tMo,Wp,By,aMo,ome,nMo,dUe,ed,Qp,rme,Iy,sMo,tme,lMo,cUe,ko,Ny,iMo,qy,dMo,mD,cMo,fMo,mMo,jy,gMo,ame,hMo,pMo,_Mo,Je,Dy,uMo,nme,bMo,vMo,od,FMo,sme,TMo,MMo,lme,EMo,CMo,wMo,ie,Up,ime,AMo,LMo,gD,yMo,xMo,$Mo,Hp,dme,kMo,SMo,hD,RMo,PMo,BMo,Jp,cme,IMo,NMo,pD,qMo,jMo,DMo,Yp,fme,GMo,OMo,_D,VMo,XMo,zMo,Kp,mme,WMo,QMo,uD,UMo,HMo,JMo,Zp,gme,YMo,KMo,bD,ZMo,eEo,oEo,e_,hme,rEo,tEo,vD,aEo,nEo,sEo,o_,pme,lEo,iEo,FD,dEo,cEo,fEo,r_,_me,mEo,gEo,TD,hEo,pEo,_Eo,t_,ume,uEo,bEo,MD,vEo,FEo,TEo,a_,bme,MEo,EEo,ED,CEo,wEo,AEo,n_,vme,LEo,yEo,CD,xEo,$Eo,kEo,s_,Fme,SEo,REo,wD,PEo,BEo,IEo,l_,Tme,NEo,qEo,AD,jEo,DEo,GEo,i_,Mme,OEo,VEo,LD,XEo,zEo,WEo,d_,Eme,QEo,UEo,yD,HEo,JEo,YEo,c_,Cme,KEo,ZEo,xD,e4o,o4o,r4o,f_,wme,t4o,a4o,$D,n4o,s4o,l4o,m_,Ame,i4o,d4o,kD,c4o,f4o,m4o,g_,Lme,g4o,h4o,SD,p4o,_4o,u4o,h_,b4o,p_,v4o,__,Gy,F4o,yme,T4o,fUe,rd,u_,xme,Oy,M4o,$me,E4o,mUe,So,Vy,C4o,td,w4o,RD,A4o,L4o,PD,y4o,x4o,$4o,Xy,k4o,kme,S4o,R4o,P4o,mt,zy,B4o,Sme,I4o,N4o,ad,q4o,Rme,j4o,D4o,BD,G4o,O4o,V4o,b_,X4o,Ye,Wy,z4o,Pme,W4o,Q4o,Va,U4o,Bme,H4o,J4o,Ime,Y4o,K4o,Nme,Z4o,eCo,oCo,y,v_,qme,rCo,tCo,ID,aCo,nCo,sCo,F_,jme,lCo,iCo,ND,dCo,cCo,fCo,T_,Dme,mCo,gCo,qD,hCo,pCo,_Co,M_,Gme,uCo,bCo,jD,vCo,FCo,TCo,E_,Ome,MCo,ECo,DD,CCo,wCo,ACo,C_,Vme,LCo,yCo,GD,xCo,$Co,kCo,w_,Xme,SCo,RCo,OD,PCo,BCo,ICo,A_,zme,NCo,qCo,VD,jCo,DCo,GCo,L_,Wme,OCo,VCo,XD,XCo,zCo,WCo,y_,Qme,QCo,UCo,zD,HCo,JCo,YCo,x_,Ume,KCo,ZCo,WD,e3o,o3o,r3o,$_,Hme,t3o,a3o,QD,n3o,s3o,l3o,k_,Jme,i3o,d3o,UD,c3o,f3o,m3o,S_,Yme,g3o,h3o,HD,p3o,_3o,u3o,R_,Kme,b3o,v3o,JD,F3o,T3o,M3o,P_,Zme,E3o,C3o,YD,w3o,A3o,L3o,B_,ege,y3o,x3o,KD,$3o,k3o,S3o,I_,oge,R3o,P3o,ZD,B3o,I3o,N3o,N_,rge,q3o,j3o,eG,D3o,G3o,O3o,q_,tge,V3o,X3o,oG,z3o,W3o,Q3o,j_,age,U3o,H3o,rG,J3o,Y3o,K3o,D_,nge,Z3o,e5o,tG,o5o,r5o,t5o,G_,sge,a5o,n5o,aG,s5o,l5o,i5o,O_,lge,d5o,c5o,nG,f5o,m5o,g5o,V_,ige,h5o,p5o,sG,_5o,u5o,b5o,X_,dge,v5o,F5o,lG,T5o,M5o,E5o,z_,cge,C5o,w5o,iG,A5o,L5o,y5o,W_,fge,x5o,$5o,dG,k5o,S5o,R5o,Q_,mge,P5o,B5o,cG,I5o,N5o,q5o,U_,gge,j5o,D5o,fG,G5o,O5o,V5o,H_,hge,X5o,z5o,mG,W5o,Q5o,U5o,J_,pge,H5o,J5o,gG,Y5o,K5o,Z5o,Y_,_ge,ewo,owo,hG,rwo,two,awo,K_,uge,nwo,swo,pG,lwo,iwo,dwo,Z_,bge,cwo,fwo,_G,mwo,gwo,hwo,nl,vge,pwo,_wo,uG,uwo,bwo,bG,vwo,Fwo,Two,eu,Fge,Mwo,Ewo,vG,Cwo,wwo,Awo,ou,Tge,Lwo,ywo,FG,xwo,$wo,kwo,ru,Mge,Swo,Rwo,TG,Pwo,Bwo,Iwo,tu,Ege,Nwo,qwo,MG,jwo,Dwo,Gwo,au,Cge,Owo,Vwo,EG,Xwo,zwo,Wwo,nu,wge,Qwo,Uwo,CG,Hwo,Jwo,Ywo,su,Age,Kwo,Zwo,wG,e6o,o6o,r6o,lu,Lge,t6o,a6o,AG,n6o,s6o,l6o,iu,yge,i6o,d6o,LG,c6o,f6o,m6o,du,xge,g6o,h6o,yG,p6o,_6o,u6o,cu,$ge,b6o,v6o,xG,F6o,T6o,M6o,fu,kge,E6o,C6o,$G,w6o,A6o,L6o,mu,Sge,y6o,x6o,kG,$6o,k6o,S6o,gu,Rge,R6o,P6o,SG,B6o,I6o,N6o,hu,Pge,q6o,j6o,RG,D6o,G6o,O6o,pu,Bge,V6o,X6o,PG,z6o,W6o,Q6o,_u,Ige,U6o,H6o,BG,J6o,Y6o,K6o,uu,Nge,Z6o,eAo,IG,oAo,rAo,tAo,bu,qge,aAo,nAo,NG,sAo,lAo,iAo,vu,jge,dAo,cAo,qG,fAo,mAo,gAo,Fu,Dge,hAo,pAo,jG,_Ao,uAo,bAo,Tu,Gge,vAo,FAo,DG,TAo,MAo,EAo,Mu,Oge,CAo,wAo,GG,AAo,LAo,yAo,Eu,Vge,xAo,$Ao,OG,kAo,SAo,RAo,Cu,Xge,PAo,BAo,VG,IAo,NAo,qAo,wu,zge,jAo,DAo,XG,GAo,OAo,VAo,Au,Wge,XAo,zAo,zG,WAo,QAo,UAo,Lu,Qge,HAo,JAo,WG,YAo,KAo,ZAo,yu,Uge,e7o,o7o,QG,r7o,t7o,a7o,xu,Hge,n7o,s7o,UG,l7o,i7o,d7o,$u,Jge,c7o,f7o,HG,m7o,g7o,h7o,ku,Yge,p7o,_7o,JG,u7o,b7o,v7o,Su,Kge,F7o,T7o,YG,M7o,E7o,C7o,Ru,Zge,w7o,A7o,KG,L7o,y7o,x7o,Pu,ehe,$7o,k7o,ZG,S7o,R7o,P7o,Bu,ohe,B7o,I7o,eO,N7o,q7o,j7o,Iu,rhe,D7o,G7o,oO,O7o,V7o,X7o,Nu,the,z7o,W7o,rO,Q7o,U7o,H7o,qu,ahe,J7o,Y7o,tO,K7o,Z7o,eLo,ju,nhe,oLo,rLo,aO,tLo,aLo,nLo,Du,she,sLo,lLo,nO,iLo,dLo,cLo,Gu,lhe,fLo,mLo,sO,gLo,hLo,pLo,Ou,ihe,_Lo,uLo,lO,bLo,vLo,FLo,Vu,dhe,TLo,MLo,iO,ELo,CLo,wLo,Xu,che,ALo,LLo,dO,yLo,xLo,$Lo,zu,fhe,kLo,SLo,cO,RLo,PLo,BLo,Wu,mhe,ILo,NLo,fO,qLo,jLo,DLo,Qu,ghe,GLo,OLo,mO,VLo,XLo,zLo,Uu,hhe,WLo,QLo,gO,ULo,HLo,JLo,Hu,phe,YLo,KLo,hO,ZLo,eyo,oyo,Ju,_he,ryo,tyo,pO,ayo,nyo,syo,Yu,uhe,lyo,iyo,_O,dyo,cyo,fyo,Ku,bhe,myo,gyo,uO,hyo,pyo,_yo,Zu,vhe,uyo,byo,bO,vyo,Fyo,Tyo,e2,Fhe,Myo,Eyo,vO,Cyo,wyo,Ayo,o2,The,Lyo,yyo,FO,xyo,$yo,kyo,r2,Mhe,Syo,Ryo,TO,Pyo,Byo,Iyo,t2,Ehe,Nyo,qyo,MO,jyo,Dyo,Gyo,a2,Che,Oyo,Vyo,EO,Xyo,zyo,Wyo,n2,whe,Qyo,Uyo,CO,Hyo,Jyo,Yyo,s2,Ahe,Kyo,Zyo,wO,e9o,o9o,r9o,l2,Lhe,t9o,a9o,AO,n9o,s9o,l9o,i2,yhe,i9o,d9o,LO,c9o,f9o,m9o,d2,xhe,g9o,h9o,yO,p9o,_9o,u9o,c2,$he,b9o,v9o,xO,F9o,T9o,M9o,f2,khe,E9o,C9o,$O,w9o,A9o,L9o,m2,She,y9o,x9o,kO,$9o,k9o,S9o,g2,Rhe,R9o,P9o,SO,B9o,I9o,N9o,h2,Phe,q9o,j9o,RO,D9o,G9o,O9o,p2,Bhe,V9o,X9o,PO,z9o,W9o,Q9o,_2,Ihe,U9o,H9o,BO,J9o,Y9o,K9o,u2,Nhe,Z9o,exo,IO,oxo,rxo,txo,b2,qhe,axo,nxo,NO,sxo,lxo,ixo,v2,jhe,dxo,cxo,qO,fxo,mxo,gxo,F2,Dhe,hxo,pxo,jO,_xo,uxo,bxo,T2,Ghe,vxo,Fxo,DO,Txo,Mxo,Exo,M2,Ohe,Cxo,wxo,GO,Axo,Lxo,yxo,E2,Vhe,xxo,$xo,OO,kxo,Sxo,Rxo,C2,Xhe,Pxo,Bxo,VO,Ixo,Nxo,qxo,w2,zhe,jxo,Dxo,XO,Gxo,Oxo,Vxo,A2,Xxo,Whe,zxo,Wxo,Qhe,Qxo,Uxo,L2,gUe,nd,y2,Uhe,Qy,Hxo,Hhe,Jxo,hUe,Ro,Uy,Yxo,sd,Kxo,zO,Zxo,e$o,WO,o$o,r$o,t$o,Hy,a$o,Jhe,n$o,s$o,l$o,gt,Jy,i$o,Yhe,d$o,c$o,ld,f$o,Khe,m$o,g$o,QO,h$o,p$o,_$o,x2,u$o,Ke,Yy,b$o,Zhe,v$o,F$o,Xa,T$o,epe,M$o,E$o,ope,C$o,w$o,rpe,A$o,L$o,y$o,G,$2,tpe,x$o,$$o,UO,k$o,S$o,R$o,k2,ape,P$o,B$o,HO,I$o,N$o,q$o,S2,npe,j$o,D$o,JO,G$o,O$o,V$o,R2,spe,X$o,z$o,YO,W$o,Q$o,U$o,P2,lpe,H$o,J$o,KO,Y$o,K$o,Z$o,B2,ipe,eko,oko,ZO,rko,tko,ako,I2,dpe,nko,sko,eV,lko,iko,dko,N2,cpe,cko,fko,oV,mko,gko,hko,q2,fpe,pko,_ko,rV,uko,bko,vko,j2,mpe,Fko,Tko,tV,Mko,Eko,Cko,D2,gpe,wko,Ako,aV,Lko,yko,xko,G2,hpe,$ko,kko,nV,Sko,Rko,Pko,O2,ppe,Bko,Iko,sV,Nko,qko,jko,V2,_pe,Dko,Gko,lV,Oko,Vko,Xko,X2,upe,zko,Wko,iV,Qko,Uko,Hko,z2,bpe,Jko,Yko,dV,Kko,Zko,eSo,W2,vpe,oSo,rSo,cV,tSo,aSo,nSo,Q2,Fpe,sSo,lSo,fV,iSo,dSo,cSo,U2,Tpe,fSo,mSo,mV,gSo,hSo,pSo,H2,Mpe,_So,uSo,gV,bSo,vSo,FSo,J2,Epe,TSo,MSo,hV,ESo,CSo,wSo,Y2,Cpe,ASo,LSo,pV,ySo,xSo,$So,K2,wpe,kSo,SSo,_V,RSo,PSo,BSo,Z2,Ape,ISo,NSo,uV,qSo,jSo,DSo,e0,Lpe,GSo,OSo,bV,VSo,XSo,zSo,o0,ype,WSo,QSo,vV,USo,HSo,JSo,r0,xpe,YSo,KSo,FV,ZSo,eRo,oRo,t0,$pe,rRo,tRo,TV,aRo,nRo,sRo,a0,kpe,lRo,iRo,MV,dRo,cRo,fRo,n0,Spe,mRo,gRo,EV,hRo,pRo,_Ro,s0,Rpe,uRo,bRo,CV,vRo,FRo,TRo,l0,Ppe,MRo,ERo,wV,CRo,wRo,ARo,i0,Bpe,LRo,yRo,AV,xRo,$Ro,kRo,d0,Ipe,SRo,RRo,LV,PRo,BRo,IRo,c0,Npe,NRo,qRo,yV,jRo,DRo,GRo,f0,qpe,ORo,VRo,xV,XRo,zRo,WRo,m0,jpe,QRo,URo,$V,HRo,JRo,YRo,g0,Dpe,KRo,ZRo,kV,ePo,oPo,rPo,h0,Gpe,tPo,aPo,SV,nPo,sPo,lPo,p0,Ope,iPo,dPo,RV,cPo,fPo,mPo,_0,Vpe,gPo,hPo,PV,pPo,_Po,uPo,u0,Xpe,bPo,vPo,BV,FPo,TPo,MPo,b0,zpe,EPo,CPo,IV,wPo,APo,LPo,v0,Wpe,yPo,xPo,NV,$Po,kPo,SPo,F0,Qpe,RPo,PPo,qV,BPo,IPo,NPo,T0,Upe,qPo,jPo,jV,DPo,GPo,OPo,M0,Hpe,VPo,XPo,DV,zPo,WPo,QPo,E0,UPo,Jpe,HPo,JPo,Ype,YPo,KPo,C0,pUe,id,w0,Kpe,Ky,ZPo,Zpe,eBo,_Ue,Po,Zy,oBo,dd,rBo,GV,tBo,aBo,OV,nBo,sBo,lBo,e9,iBo,e_e,dBo,cBo,fBo,ht,o9,mBo,o_e,gBo,hBo,cd,pBo,r_e,_Bo,uBo,VV,bBo,vBo,FBo,A0,TBo,Ze,r9,MBo,t_e,EBo,CBo,za,wBo,a_e,ABo,LBo,n_e,yBo,xBo,s_e,$Bo,kBo,SBo,z,L0,l_e,RBo,PBo,XV,BBo,IBo,NBo,y0,i_e,qBo,jBo,zV,DBo,GBo,OBo,x0,d_e,VBo,XBo,WV,zBo,WBo,QBo,$0,c_e,UBo,HBo,QV,JBo,YBo,KBo,k0,f_e,ZBo,eIo,UV,oIo,rIo,tIo,S0,m_e,aIo,nIo,HV,sIo,lIo,iIo,R0,g_e,dIo,cIo,JV,fIo,mIo,gIo,P0,h_e,hIo,pIo,YV,_Io,uIo,bIo,B0,p_e,vIo,FIo,KV,TIo,MIo,EIo,I0,__e,CIo,wIo,ZV,AIo,LIo,yIo,N0,u_e,xIo,$Io,eX,kIo,SIo,RIo,q0,b_e,PIo,BIo,oX,IIo,NIo,qIo,j0,v_e,jIo,DIo,rX,GIo,OIo,VIo,D0,F_e,XIo,zIo,tX,WIo,QIo,UIo,G0,T_e,HIo,JIo,aX,YIo,KIo,ZIo,O0,M_e,eNo,oNo,nX,rNo,tNo,aNo,V0,E_e,nNo,sNo,sX,lNo,iNo,dNo,X0,C_e,cNo,fNo,lX,mNo,gNo,hNo,z0,w_e,pNo,_No,iX,uNo,bNo,vNo,W0,A_e,FNo,TNo,dX,MNo,ENo,CNo,Q0,L_e,wNo,ANo,cX,LNo,yNo,xNo,U0,y_e,$No,kNo,fX,SNo,RNo,PNo,H0,x_e,BNo,INo,mX,NNo,qNo,jNo,J0,$_e,DNo,GNo,gX,ONo,VNo,XNo,Y0,k_e,zNo,WNo,hX,QNo,UNo,HNo,K0,S_e,JNo,YNo,pX,KNo,ZNo,eqo,Z0,R_e,oqo,rqo,_X,tqo,aqo,nqo,e1,P_e,sqo,lqo,uX,iqo,dqo,cqo,o1,B_e,fqo,mqo,bX,gqo,hqo,pqo,r1,I_e,_qo,uqo,vX,bqo,vqo,Fqo,t1,N_e,Tqo,Mqo,FX,Eqo,Cqo,wqo,a1,q_e,Aqo,Lqo,TX,yqo,xqo,$qo,n1,j_e,kqo,Sqo,MX,Rqo,Pqo,Bqo,s1,D_e,Iqo,Nqo,EX,qqo,jqo,Dqo,l1,G_e,Gqo,Oqo,CX,Vqo,Xqo,zqo,i1,O_e,Wqo,Qqo,wX,Uqo,Hqo,Jqo,d1,V_e,Yqo,Kqo,AX,Zqo,ejo,ojo,c1,X_e,rjo,tjo,LX,ajo,njo,sjo,f1,z_e,ljo,ijo,yX,djo,cjo,fjo,m1,W_e,mjo,gjo,xX,hjo,pjo,_jo,g1,ujo,Q_e,bjo,vjo,U_e,Fjo,Tjo,h1,uUe,fd,p1,H_e,t9,Mjo,J_e,Ejo,bUe,Bo,a9,Cjo,md,wjo,$X,Ajo,Ljo,kX,yjo,xjo,$jo,n9,kjo,Y_e,Sjo,Rjo,Pjo,pt,s9,Bjo,K_e,Ijo,Njo,gd,qjo,Z_e,jjo,Djo,SX,Gjo,Ojo,Vjo,_1,Xjo,eo,l9,zjo,eue,Wjo,Qjo,Wa,Ujo,oue,Hjo,Jjo,rue,Yjo,Kjo,tue,Zjo,eDo,oDo,U,u1,aue,rDo,tDo,RX,aDo,nDo,sDo,b1,nue,lDo,iDo,PX,dDo,cDo,fDo,v1,sue,mDo,gDo,BX,hDo,pDo,_Do,F1,lue,uDo,bDo,IX,vDo,FDo,TDo,T1,iue,MDo,EDo,NX,CDo,wDo,ADo,M1,due,LDo,yDo,qX,xDo,$Do,kDo,E1,cue,SDo,RDo,jX,PDo,BDo,IDo,C1,fue,NDo,qDo,DX,jDo,DDo,GDo,w1,mue,ODo,VDo,GX,XDo,zDo,WDo,A1,gue,QDo,UDo,OX,HDo,JDo,YDo,L1,hue,KDo,ZDo,VX,eGo,oGo,rGo,y1,pue,tGo,aGo,XX,nGo,sGo,lGo,x1,_ue,iGo,dGo,zX,cGo,fGo,mGo,$1,uue,gGo,hGo,WX,pGo,_Go,uGo,k1,bue,bGo,vGo,QX,FGo,TGo,MGo,S1,vue,EGo,CGo,UX,wGo,AGo,LGo,R1,Fue,yGo,xGo,HX,$Go,kGo,SGo,P1,Tue,RGo,PGo,JX,BGo,IGo,NGo,B1,Mue,qGo,jGo,YX,DGo,GGo,OGo,I1,Eue,VGo,XGo,KX,zGo,WGo,QGo,N1,Cue,UGo,HGo,ZX,JGo,YGo,KGo,q1,wue,ZGo,eOo,ez,oOo,rOo,tOo,j1,Aue,aOo,nOo,oz,sOo,lOo,iOo,D1,Lue,dOo,cOo,rz,fOo,mOo,gOo,G1,yue,hOo,pOo,tz,_Oo,uOo,bOo,O1,xue,vOo,FOo,az,TOo,MOo,EOo,V1,$ue,COo,wOo,nz,AOo,LOo,yOo,X1,kue,xOo,$Oo,sz,kOo,SOo,ROo,z1,Sue,POo,BOo,lz,IOo,NOo,qOo,W1,Rue,jOo,DOo,iz,GOo,OOo,VOo,Q1,Pue,XOo,zOo,dz,WOo,QOo,UOo,U1,Bue,HOo,JOo,cz,YOo,KOo,ZOo,H1,Iue,eVo,oVo,fz,rVo,tVo,aVo,J1,Nue,nVo,sVo,que,lVo,iVo,dVo,Y1,jue,cVo,fVo,mz,mVo,gVo,hVo,K1,Due,pVo,_Vo,gz,uVo,bVo,vVo,Z1,Gue,FVo,TVo,hz,MVo,EVo,CVo,eb,Oue,wVo,AVo,pz,LVo,yVo,xVo,ob,$Vo,Vue,kVo,SVo,Xue,RVo,PVo,rb,vUe,hd,tb,zue,i9,BVo,Wue,IVo,FUe,Io,d9,NVo,pd,qVo,_z,jVo,DVo,uz,GVo,OVo,VVo,c9,XVo,Que,zVo,WVo,QVo,_t,f9,UVo,Uue,HVo,JVo,_d,YVo,Hue,KVo,ZVo,bz,eXo,oXo,rXo,ab,tXo,oo,m9,aXo,Jue,nXo,sXo,Qa,lXo,Yue,iXo,dXo,Kue,cXo,fXo,Zue,mXo,gXo,hXo,me,nb,e2e,pXo,_Xo,vz,uXo,bXo,vXo,sb,o2e,FXo,TXo,Fz,MXo,EXo,CXo,lb,r2e,wXo,AXo,Tz,LXo,yXo,xXo,ib,t2e,$Xo,kXo,Mz,SXo,RXo,PXo,db,a2e,BXo,IXo,Ez,NXo,qXo,jXo,cb,n2e,DXo,GXo,Cz,OXo,VXo,XXo,fb,s2e,zXo,WXo,wz,QXo,UXo,HXo,mb,l2e,JXo,YXo,Az,KXo,ZXo,ezo,gb,i2e,ozo,rzo,Lz,tzo,azo,nzo,hb,d2e,szo,lzo,yz,izo,dzo,czo,pb,c2e,fzo,mzo,xz,gzo,hzo,pzo,_b,f2e,_zo,uzo,$z,bzo,vzo,Fzo,ub,m2e,Tzo,Mzo,kz,Ezo,Czo,wzo,bb,g2e,Azo,Lzo,Sz,yzo,xzo,$zo,vb,h2e,kzo,Szo,Rz,Rzo,Pzo,Bzo,Fb,p2e,Izo,Nzo,Pz,qzo,jzo,Dzo,Tb,_2e,Gzo,Ozo,Bz,Vzo,Xzo,zzo,Mb,u2e,Wzo,Qzo,Iz,Uzo,Hzo,Jzo,Eb,b2e,Yzo,Kzo,Nz,Zzo,eWo,oWo,Cb,rWo,v2e,tWo,aWo,F2e,nWo,sWo,wb,TUe,ud,Ab,T2e,g9,lWo,M2e,iWo,MUe,No,h9,dWo,bd,cWo,qz,fWo,mWo,jz,gWo,hWo,pWo,p9,_Wo,E2e,uWo,bWo,vWo,ut,_9,FWo,C2e,TWo,MWo,vd,EWo,w2e,CWo,wWo,Dz,AWo,LWo,yWo,Lb,xWo,ro,u9,$Wo,A2e,kWo,SWo,Ua,RWo,L2e,PWo,BWo,y2e,IWo,NWo,x2e,qWo,jWo,DWo,q,yb,$2e,GWo,OWo,Gz,VWo,XWo,zWo,xb,k2e,WWo,QWo,Oz,UWo,HWo,JWo,$b,S2e,YWo,KWo,Vz,ZWo,eQo,oQo,kb,R2e,rQo,tQo,Xz,aQo,nQo,sQo,Sb,P2e,lQo,iQo,zz,dQo,cQo,fQo,Rb,B2e,mQo,gQo,Wz,hQo,pQo,_Qo,Pb,I2e,uQo,bQo,Qz,vQo,FQo,TQo,Bb,N2e,MQo,EQo,Uz,CQo,wQo,AQo,Ib,q2e,LQo,yQo,Hz,xQo,$Qo,kQo,Nb,j2e,SQo,RQo,Jz,PQo,BQo,IQo,qb,D2e,NQo,qQo,Yz,jQo,DQo,GQo,jb,G2e,OQo,VQo,Kz,XQo,zQo,WQo,Db,O2e,QQo,UQo,Zz,HQo,JQo,YQo,Gb,V2e,KQo,ZQo,eW,eUo,oUo,rUo,Ob,X2e,tUo,aUo,oW,nUo,sUo,lUo,Vb,z2e,iUo,dUo,rW,cUo,fUo,mUo,Xb,W2e,gUo,hUo,tW,pUo,_Uo,uUo,zb,Q2e,bUo,vUo,aW,FUo,TUo,MUo,Wb,U2e,EUo,CUo,nW,wUo,AUo,LUo,Qb,H2e,yUo,xUo,sW,$Uo,kUo,SUo,Ub,J2e,RUo,PUo,lW,BUo,IUo,NUo,Hb,Y2e,qUo,jUo,iW,DUo,GUo,OUo,Jb,K2e,VUo,XUo,dW,zUo,WUo,QUo,Yb,Z2e,UUo,HUo,cW,JUo,YUo,KUo,Kb,e0e,ZUo,eHo,fW,oHo,rHo,tHo,Zb,o0e,aHo,nHo,mW,sHo,lHo,iHo,ev,r0e,dHo,cHo,gW,fHo,mHo,gHo,ov,t0e,hHo,pHo,hW,_Ho,uHo,bHo,rv,a0e,vHo,FHo,pW,THo,MHo,EHo,tv,n0e,CHo,wHo,_W,AHo,LHo,yHo,av,s0e,xHo,$Ho,uW,kHo,SHo,RHo,nv,l0e,PHo,BHo,bW,IHo,NHo,qHo,sv,i0e,jHo,DHo,vW,GHo,OHo,VHo,lv,d0e,XHo,zHo,FW,WHo,QHo,UHo,iv,c0e,HHo,JHo,TW,YHo,KHo,ZHo,dv,f0e,eJo,oJo,MW,rJo,tJo,aJo,cv,m0e,nJo,sJo,EW,lJo,iJo,dJo,fv,g0e,cJo,fJo,CW,mJo,gJo,hJo,mv,h0e,pJo,_Jo,wW,uJo,bJo,vJo,gv,p0e,FJo,TJo,AW,MJo,EJo,CJo,hv,_0e,wJo,AJo,LW,LJo,yJo,xJo,pv,u0e,$Jo,kJo,yW,SJo,RJo,PJo,_v,b0e,BJo,IJo,xW,NJo,qJo,jJo,uv,v0e,DJo,GJo,$W,OJo,VJo,XJo,bv,F0e,zJo,WJo,kW,QJo,UJo,HJo,vv,T0e,JJo,YJo,SW,KJo,ZJo,eYo,Fv,M0e,oYo,rYo,RW,tYo,aYo,nYo,Tv,E0e,sYo,lYo,PW,iYo,dYo,cYo,Mv,C0e,fYo,mYo,BW,gYo,hYo,pYo,Ev,w0e,_Yo,uYo,IW,bYo,vYo,FYo,Cv,A0e,TYo,MYo,NW,EYo,CYo,wYo,wv,L0e,AYo,LYo,qW,yYo,xYo,$Yo,Av,kYo,y0e,SYo,RYo,x0e,PYo,BYo,Lv,EUe,Fd,yv,$0e,b9,IYo,k0e,NYo,CUe,qo,v9,qYo,Td,jYo,jW,DYo,GYo,DW,OYo,VYo,XYo,F9,zYo,S0e,WYo,QYo,UYo,bt,T9,HYo,R0e,JYo,YYo,Md,KYo,P0e,ZYo,eKo,GW,oKo,rKo,tKo,xv,aKo,to,M9,nKo,B0e,sKo,lKo,Ha,iKo,I0e,dKo,cKo,N0e,fKo,mKo,q0e,gKo,hKo,pKo,Z,$v,j0e,_Ko,uKo,OW,bKo,vKo,FKo,kv,D0e,TKo,MKo,VW,EKo,CKo,wKo,Sv,G0e,AKo,LKo,XW,yKo,xKo,$Ko,Rv,O0e,kKo,SKo,zW,RKo,PKo,BKo,Pv,V0e,IKo,NKo,WW,qKo,jKo,DKo,Bv,X0e,GKo,OKo,QW,VKo,XKo,zKo,Iv,z0e,WKo,QKo,UW,UKo,HKo,JKo,Nv,W0e,YKo,KKo,HW,ZKo,eZo,oZo,qv,Q0e,rZo,tZo,JW,aZo,nZo,sZo,jv,U0e,lZo,iZo,YW,dZo,cZo,fZo,Dv,H0e,mZo,gZo,KW,hZo,pZo,_Zo,Gv,J0e,uZo,bZo,ZW,vZo,FZo,TZo,Ov,Y0e,MZo,EZo,eQ,CZo,wZo,AZo,Vv,K0e,LZo,yZo,oQ,xZo,$Zo,kZo,Xv,Z0e,SZo,RZo,rQ,PZo,BZo,IZo,zv,e1e,NZo,qZo,tQ,jZo,DZo,GZo,Wv,o1e,OZo,VZo,aQ,XZo,zZo,WZo,Qv,r1e,QZo,UZo,nQ,HZo,JZo,YZo,Uv,t1e,KZo,ZZo,sQ,eer,oer,rer,Hv,a1e,ter,aer,lQ,ner,ser,ler,Jv,n1e,ier,der,iQ,cer,fer,mer,Yv,s1e,ger,her,dQ,per,_er,uer,Kv,l1e,ber,ver,cQ,Fer,Ter,Mer,Zv,i1e,Eer,Cer,fQ,wer,Aer,Ler,eF,d1e,yer,xer,mQ,$er,ker,Ser,oF,c1e,Rer,Per,gQ,Ber,Ier,Ner,rF,f1e,qer,jer,hQ,Der,Ger,Oer,tF,m1e,Ver,Xer,pQ,zer,Wer,Qer,aF,g1e,Uer,Her,_Q,Jer,Yer,Ker,nF,h1e,Zer,eor,uQ,oor,ror,tor,sF,p1e,aor,nor,bQ,sor,lor,ior,lF,dor,_1e,cor,mor,u1e,gor,hor,iF,wUe,Ed,dF,b1e,E9,por,v1e,_or,AUe,jo,C9,uor,Cd,bor,vQ,vor,For,FQ,Tor,Mor,Eor,w9,Cor,F1e,wor,Aor,Lor,vt,A9,yor,T1e,xor,$or,wd,kor,M1e,Sor,Ror,TQ,Por,Bor,Ior,cF,Nor,ao,L9,qor,E1e,jor,Dor,Ja,Gor,C1e,Oor,Vor,w1e,Xor,zor,A1e,Wor,Qor,Uor,Do,fF,L1e,Hor,Jor,MQ,Yor,Kor,Zor,mF,y1e,err,orr,EQ,rrr,trr,arr,gF,x1e,nrr,srr,CQ,lrr,irr,drr,hF,$1e,crr,frr,wQ,mrr,grr,hrr,pF,k1e,prr,_rr,AQ,urr,brr,vrr,_F,S1e,Frr,Trr,LQ,Mrr,Err,Crr,uF,wrr,R1e,Arr,Lrr,P1e,yrr,xrr,bF,LUe,Ad,vF,B1e,y9,$rr,I1e,krr,yUe,Go,x9,Srr,Ld,Rrr,yQ,Prr,Brr,xQ,Irr,Nrr,qrr,$9,jrr,N1e,Drr,Grr,Orr,Ft,k9,Vrr,q1e,Xrr,zrr,yd,Wrr,j1e,Qrr,Urr,$Q,Hrr,Jrr,Yrr,FF,Krr,no,S9,Zrr,D1e,etr,otr,Ya,rtr,G1e,ttr,atr,O1e,ntr,str,V1e,ltr,itr,dtr,H,TF,X1e,ctr,ftr,kQ,mtr,gtr,htr,MF,z1e,ptr,_tr,SQ,utr,btr,vtr,EF,W1e,Ftr,Ttr,RQ,Mtr,Etr,Ctr,CF,Q1e,wtr,Atr,PQ,Ltr,ytr,xtr,wF,U1e,$tr,ktr,BQ,Str,Rtr,Ptr,AF,H1e,Btr,Itr,IQ,Ntr,qtr,jtr,LF,J1e,Dtr,Gtr,NQ,Otr,Vtr,Xtr,yF,Y1e,ztr,Wtr,qQ,Qtr,Utr,Htr,xF,K1e,Jtr,Ytr,jQ,Ktr,Ztr,ear,$F,Z1e,oar,rar,DQ,tar,aar,nar,kF,ebe,sar,lar,GQ,iar,dar,car,SF,obe,far,mar,OQ,gar,har,par,RF,rbe,_ar,uar,VQ,bar,Far,Tar,PF,tbe,Mar,Ear,XQ,Car,war,Aar,BF,abe,Lar,yar,zQ,xar,$ar,kar,IF,nbe,Sar,Rar,WQ,Par,Bar,Iar,NF,sbe,Nar,qar,QQ,jar,Dar,Gar,qF,lbe,Oar,Var,UQ,Xar,zar,War,jF,ibe,Qar,Uar,HQ,Har,Jar,Yar,DF,dbe,Kar,Zar,JQ,enr,onr,rnr,GF,cbe,tnr,anr,YQ,nnr,snr,lnr,OF,fbe,inr,dnr,KQ,cnr,fnr,mnr,VF,mbe,gnr,hnr,ZQ,pnr,_nr,unr,XF,gbe,bnr,vnr,eU,Fnr,Tnr,Mnr,zF,hbe,Enr,Cnr,oU,wnr,Anr,Lnr,WF,pbe,ynr,xnr,rU,$nr,knr,Snr,QF,_be,Rnr,Pnr,tU,Bnr,Inr,Nnr,UF,ube,qnr,jnr,aU,Dnr,Gnr,Onr,HF,bbe,Vnr,Xnr,nU,znr,Wnr,Qnr,JF,vbe,Unr,Hnr,sU,Jnr,Ynr,Knr,YF,Fbe,Znr,esr,lU,osr,rsr,tsr,KF,Tbe,asr,nsr,iU,ssr,lsr,isr,ZF,Mbe,dsr,csr,dU,fsr,msr,gsr,eT,Ebe,hsr,psr,cU,_sr,usr,bsr,oT,Cbe,vsr,Fsr,fU,Tsr,Msr,Esr,rT,wbe,Csr,wsr,mU,Asr,Lsr,ysr,tT,Abe,xsr,$sr,gU,ksr,Ssr,Rsr,aT,Psr,Lbe,Bsr,Isr,ybe,Nsr,qsr,nT,xUe,xd,sT,xbe,R9,jsr,$be,Dsr,$Ue,Oo,P9,Gsr,$d,Osr,hU,Vsr,Xsr,pU,zsr,Wsr,Qsr,B9,Usr,kbe,Hsr,Jsr,Ysr,Tt,I9,Ksr,Sbe,Zsr,elr,kd,olr,Rbe,rlr,tlr,_U,alr,nlr,slr,lT,llr,so,N9,ilr,Pbe,dlr,clr,Ka,flr,Bbe,mlr,glr,Ibe,hlr,plr,Nbe,_lr,ulr,blr,V,iT,qbe,vlr,Flr,uU,Tlr,Mlr,Elr,dT,jbe,Clr,wlr,bU,Alr,Llr,ylr,cT,Dbe,xlr,$lr,vU,klr,Slr,Rlr,fT,Gbe,Plr,Blr,FU,Ilr,Nlr,qlr,mT,Obe,jlr,Dlr,TU,Glr,Olr,Vlr,gT,Vbe,Xlr,zlr,MU,Wlr,Qlr,Ulr,hT,Xbe,Hlr,Jlr,EU,Ylr,Klr,Zlr,pT,zbe,eir,oir,CU,rir,tir,air,_T,Wbe,nir,sir,wU,lir,iir,dir,uT,Qbe,cir,fir,AU,mir,gir,hir,bT,Ube,pir,_ir,LU,uir,bir,vir,vT,Hbe,Fir,Tir,yU,Mir,Eir,Cir,FT,Jbe,wir,Air,xU,Lir,yir,xir,TT,Ybe,$ir,kir,$U,Sir,Rir,Pir,MT,Kbe,Bir,Iir,kU,Nir,qir,jir,ET,Zbe,Dir,Gir,SU,Oir,Vir,Xir,CT,eve,zir,Wir,RU,Qir,Uir,Hir,wT,ove,Jir,Yir,PU,Kir,Zir,edr,AT,rve,odr,rdr,BU,tdr,adr,ndr,LT,tve,sdr,ldr,IU,idr,ddr,cdr,yT,ave,fdr,mdr,NU,gdr,hdr,pdr,xT,nve,_dr,udr,qU,bdr,vdr,Fdr,$T,sve,Tdr,Mdr,jU,Edr,Cdr,wdr,kT,lve,Adr,Ldr,DU,ydr,xdr,$dr,ST,ive,kdr,Sdr,GU,Rdr,Pdr,Bdr,RT,dve,Idr,Ndr,OU,qdr,jdr,Ddr,PT,cve,Gdr,Odr,VU,Vdr,Xdr,zdr,BT,fve,Wdr,Qdr,XU,Udr,Hdr,Jdr,IT,mve,Ydr,Kdr,zU,Zdr,ecr,ocr,NT,gve,rcr,tcr,WU,acr,ncr,scr,qT,hve,lcr,icr,QU,dcr,ccr,fcr,jT,pve,mcr,gcr,UU,hcr,pcr,_cr,DT,_ve,ucr,bcr,HU,vcr,Fcr,Tcr,GT,uve,Mcr,Ecr,JU,Ccr,wcr,Acr,OT,bve,Lcr,ycr,YU,xcr,$cr,kcr,VT,vve,Scr,Rcr,KU,Pcr,Bcr,Icr,XT,Fve,Ncr,qcr,ZU,jcr,Dcr,Gcr,zT,Tve,Ocr,Vcr,eH,Xcr,zcr,Wcr,WT,Mve,Qcr,Ucr,oH,Hcr,Jcr,Ycr,QT,Eve,Kcr,Zcr,rH,efr,ofr,rfr,UT,Cve,tfr,afr,tH,nfr,sfr,lfr,HT,wve,ifr,dfr,aH,cfr,ffr,mfr,JT,Ave,gfr,hfr,nH,pfr,_fr,ufr,YT,bfr,Lve,vfr,Ffr,yve,Tfr,Mfr,KT,kUe,Sd,ZT,xve,q9,Efr,$ve,Cfr,SUe,Vo,j9,wfr,Rd,Afr,sH,Lfr,yfr,lH,xfr,$fr,kfr,D9,Sfr,kve,Rfr,Pfr,Bfr,Mt,G9,Ifr,Sve,Nfr,qfr,Pd,jfr,Rve,Dfr,Gfr,iH,Ofr,Vfr,Xfr,e8,zfr,lo,O9,Wfr,Pve,Qfr,Ufr,Za,Hfr,Bve,Jfr,Yfr,Ive,Kfr,Zfr,Nve,emr,omr,rmr,qve,o8,jve,tmr,amr,dH,nmr,smr,lmr,r8,imr,Dve,dmr,cmr,Gve,fmr,mmr,t8,RUe,Bd,a8,Ove,V9,gmr,Vve,hmr,PUe,Xo,X9,pmr,Id,_mr,cH,umr,bmr,fH,vmr,Fmr,Tmr,z9,Mmr,Xve,Emr,Cmr,wmr,Et,W9,Amr,zve,Lmr,ymr,Nd,xmr,Wve,$mr,kmr,mH,Smr,Rmr,Pmr,n8,Bmr,io,Q9,Imr,Qve,Nmr,qmr,en,jmr,Uve,Dmr,Gmr,Hve,Omr,Vmr,Jve,Xmr,zmr,Wmr,be,s8,Yve,Qmr,Umr,gH,Hmr,Jmr,Ymr,l8,Kve,Kmr,Zmr,hH,egr,ogr,rgr,i8,Zve,tgr,agr,pH,ngr,sgr,lgr,d8,eFe,igr,dgr,_H,cgr,fgr,mgr,sl,oFe,ggr,hgr,uH,pgr,_gr,bH,ugr,bgr,vgr,c8,rFe,Fgr,Tgr,vH,Mgr,Egr,Cgr,ll,tFe,wgr,Agr,FH,Lgr,ygr,TH,xgr,$gr,kgr,f8,aFe,Sgr,Rgr,MH,Pgr,Bgr,Igr,Ct,nFe,Ngr,qgr,EH,jgr,Dgr,CH,Ggr,Ogr,wH,Vgr,Xgr,zgr,m8,sFe,Wgr,Qgr,AH,Ugr,Hgr,Jgr,g8,lFe,Ygr,Kgr,LH,Zgr,ehr,ohr,h8,iFe,rhr,thr,yH,ahr,nhr,shr,p8,dFe,lhr,ihr,xH,dhr,chr,fhr,_8,cFe,mhr,ghr,$H,hhr,phr,_hr,u8,fFe,uhr,bhr,kH,vhr,Fhr,Thr,b8,mFe,Mhr,Ehr,SH,Chr,whr,Ahr,v8,gFe,Lhr,yhr,RH,xhr,$hr,khr,F8,Shr,hFe,Rhr,Phr,pFe,Bhr,Ihr,T8,BUe,qd,M8,_Fe,U9,Nhr,uFe,qhr,IUe,zo,H9,jhr,jd,Dhr,PH,Ghr,Ohr,BH,Vhr,Xhr,zhr,J9,Whr,bFe,Qhr,Uhr,Hhr,wt,Y9,Jhr,vFe,Yhr,Khr,Dd,Zhr,FFe,epr,opr,IH,rpr,tpr,apr,E8,npr,co,K9,spr,TFe,lpr,ipr,on,dpr,MFe,cpr,fpr,EFe,mpr,gpr,CFe,hpr,ppr,_pr,wFe,C8,AFe,upr,bpr,NH,vpr,Fpr,Tpr,w8,Mpr,LFe,Epr,Cpr,yFe,wpr,Apr,A8,NUe,Gd,L8,xFe,Z9,Lpr,$Fe,ypr,qUe,Wo,ex,xpr,Od,$pr,qH,kpr,Spr,jH,Rpr,Ppr,Bpr,ox,Ipr,kFe,Npr,qpr,jpr,At,rx,Dpr,SFe,Gpr,Opr,Vd,Vpr,RFe,Xpr,zpr,DH,Wpr,Qpr,Upr,y8,Hpr,fo,tx,Jpr,PFe,Ypr,Kpr,rn,Zpr,BFe,e_r,o_r,IFe,r_r,t_r,NFe,a_r,n_r,s_r,qFe,x8,jFe,l_r,i_r,GH,d_r,c_r,f_r,$8,m_r,DFe,g_r,h_r,GFe,p_r,__r,k8,jUe,Xd,S8,OFe,ax,u_r,VFe,b_r,DUe,Qo,nx,v_r,zd,F_r,OH,T_r,M_r,VH,E_r,C_r,w_r,sx,A_r,XFe,L_r,y_r,x_r,Lt,lx,$_r,zFe,k_r,S_r,Wd,R_r,WFe,P_r,B_r,XH,I_r,N_r,q_r,R8,j_r,mo,ix,D_r,QFe,G_r,O_r,tn,V_r,UFe,X_r,z_r,HFe,W_r,Q_r,JFe,U_r,H_r,J_r,YFe,P8,KFe,Y_r,K_r,zH,Z_r,eur,our,B8,rur,ZFe,tur,aur,eTe,nur,sur,I8,GUe,Qd,N8,oTe,dx,lur,rTe,iur,OUe,Uo,cx,dur,Ud,cur,WH,fur,mur,QH,gur,hur,pur,fx,_ur,tTe,uur,bur,vur,yt,mx,Fur,aTe,Tur,Mur,Hd,Eur,nTe,Cur,wur,UH,Aur,Lur,yur,q8,xur,go,gx,$ur,sTe,kur,Sur,an,Rur,lTe,Pur,Bur,iTe,Iur,Nur,dTe,qur,jur,Dur,Pe,j8,cTe,Gur,Our,HH,Vur,Xur,zur,D8,fTe,Wur,Qur,JH,Uur,Hur,Jur,G8,mTe,Yur,Kur,YH,Zur,e2r,o2r,O8,gTe,r2r,t2r,KH,a2r,n2r,s2r,V8,hTe,l2r,i2r,ZH,d2r,c2r,f2r,X8,pTe,m2r,g2r,eJ,h2r,p2r,_2r,z8,_Te,u2r,b2r,oJ,v2r,F2r,T2r,W8,uTe,M2r,E2r,rJ,C2r,w2r,A2r,Q8,bTe,L2r,y2r,tJ,x2r,$2r,k2r,U8,S2r,vTe,R2r,P2r,FTe,B2r,I2r,H8,VUe,Jd,J8,TTe,hx,N2r,MTe,q2r,XUe,Ho,px,j2r,Yd,D2r,aJ,G2r,O2r,nJ,V2r,X2r,z2r,_x,W2r,ETe,Q2r,U2r,H2r,xt,ux,J2r,CTe,Y2r,K2r,Kd,Z2r,wTe,e0r,o0r,sJ,r0r,t0r,a0r,Y8,n0r,ho,bx,s0r,ATe,l0r,i0r,nn,d0r,LTe,c0r,f0r,yTe,m0r,g0r,xTe,h0r,p0r,_0r,st,K8,$Te,u0r,b0r,lJ,v0r,F0r,T0r,Z8,kTe,M0r,E0r,iJ,C0r,w0r,A0r,eM,STe,L0r,y0r,dJ,x0r,$0r,k0r,oM,RTe,S0r,R0r,cJ,P0r,B0r,I0r,rM,PTe,N0r,q0r,fJ,j0r,D0r,G0r,tM,O0r,BTe,V0r,X0r,ITe,z0r,W0r,aM,zUe,Zd,nM,NTe,vx,Q0r,qTe,U0r,WUe,Jo,Fx,H0r,ec,J0r,mJ,Y0r,K0r,gJ,Z0r,e1r,o1r,Tx,r1r,jTe,t1r,a1r,n1r,$t,Mx,s1r,DTe,l1r,i1r,oc,d1r,GTe,c1r,f1r,hJ,m1r,g1r,h1r,sM,p1r,po,Ex,_1r,OTe,u1r,b1r,sn,v1r,VTe,F1r,T1r,XTe,M1r,E1r,zTe,C1r,w1r,A1r,Le,lM,WTe,L1r,y1r,pJ,x1r,$1r,k1r,iM,QTe,S1r,R1r,_J,P1r,B1r,I1r,dM,UTe,N1r,q1r,uJ,j1r,D1r,G1r,cM,HTe,O1r,V1r,bJ,X1r,z1r,W1r,fM,JTe,Q1r,U1r,vJ,H1r,J1r,Y1r,mM,YTe,K1r,Z1r,FJ,ebr,obr,rbr,gM,KTe,tbr,abr,TJ,nbr,sbr,lbr,hM,ZTe,ibr,dbr,MJ,cbr,fbr,mbr,pM,e8e,gbr,hbr,EJ,pbr,_br,ubr,_M,o8e,bbr,vbr,CJ,Fbr,Tbr,Mbr,uM,Ebr,r8e,Cbr,wbr,t8e,Abr,Lbr,bM,QUe,rc,vM,a8e,Cx,ybr,n8e,xbr,UUe,Yo,wx,$br,tc,kbr,wJ,Sbr,Rbr,AJ,Pbr,Bbr,Ibr,Ax,Nbr,s8e,qbr,jbr,Dbr,kt,Lx,Gbr,l8e,Obr,Vbr,ac,Xbr,i8e,zbr,Wbr,LJ,Qbr,Ubr,Hbr,FM,Jbr,_o,yx,Ybr,d8e,Kbr,Zbr,ln,evr,c8e,ovr,rvr,f8e,tvr,avr,m8e,nvr,svr,lvr,xx,TM,g8e,ivr,dvr,yJ,cvr,fvr,mvr,MM,h8e,gvr,hvr,xJ,pvr,_vr,uvr,EM,bvr,p8e,vvr,Fvr,_8e,Tvr,Mvr,CM,HUe,nc,wM,u8e,$x,Evr,b8e,Cvr,JUe,Ko,kx,wvr,sc,Avr,$J,Lvr,yvr,kJ,xvr,$vr,kvr,Sx,Svr,v8e,Rvr,Pvr,Bvr,St,Rx,Ivr,F8e,Nvr,qvr,lc,jvr,T8e,Dvr,Gvr,SJ,Ovr,Vvr,Xvr,AM,zvr,uo,Px,Wvr,M8e,Qvr,Uvr,dn,Hvr,E8e,Jvr,Yvr,C8e,Kvr,Zvr,w8e,eFr,oFr,rFr,lt,LM,A8e,tFr,aFr,RJ,nFr,sFr,lFr,yM,L8e,iFr,dFr,PJ,cFr,fFr,mFr,xM,y8e,gFr,hFr,BJ,pFr,_Fr,uFr,$M,x8e,bFr,vFr,IJ,FFr,TFr,MFr,kM,$8e,EFr,CFr,NJ,wFr,AFr,LFr,SM,yFr,k8e,xFr,$Fr,S8e,kFr,SFr,RM,YUe,ic,PM,R8e,Bx,RFr,P8e,PFr,KUe,Zo,Ix,BFr,dc,IFr,qJ,NFr,qFr,jJ,jFr,DFr,GFr,Nx,OFr,B8e,VFr,XFr,zFr,Rt,qx,WFr,I8e,QFr,UFr,cc,HFr,N8e,JFr,YFr,DJ,KFr,ZFr,eTr,BM,oTr,bo,jx,rTr,q8e,tTr,aTr,cn,nTr,j8e,sTr,lTr,D8e,iTr,dTr,G8e,cTr,fTr,mTr,fn,IM,O8e,gTr,hTr,GJ,pTr,_Tr,uTr,NM,V8e,bTr,vTr,OJ,FTr,TTr,MTr,qM,X8e,ETr,CTr,VJ,wTr,ATr,LTr,jM,z8e,yTr,xTr,XJ,$Tr,kTr,STr,DM,RTr,W8e,PTr,BTr,Q8e,ITr,NTr,GM,ZUe,fc,OM,U8e,Dx,qTr,H8e,jTr,eHe,er,Gx,DTr,mc,GTr,zJ,OTr,VTr,WJ,XTr,zTr,WTr,Ox,QTr,J8e,UTr,HTr,JTr,Pt,Vx,YTr,Y8e,KTr,ZTr,gc,e8r,K8e,o8r,r8r,QJ,t8r,a8r,n8r,VM,s8r,vo,Xx,l8r,Z8e,i8r,d8r,mn,c8r,eMe,f8r,m8r,oMe,g8r,h8r,rMe,p8r,_8r,u8r,zx,XM,tMe,b8r,v8r,UJ,F8r,T8r,M8r,zM,aMe,E8r,C8r,HJ,w8r,A8r,L8r,WM,y8r,nMe,x8r,$8r,sMe,k8r,S8r,QM,oHe,hc,UM,lMe,Wx,R8r,iMe,P8r,rHe,or,Qx,B8r,pc,I8r,JJ,N8r,q8r,YJ,j8r,D8r,G8r,Ux,O8r,dMe,V8r,X8r,z8r,Bt,Hx,W8r,cMe,Q8r,U8r,_c,H8r,fMe,J8r,Y8r,KJ,K8r,Z8r,eMr,HM,oMr,Fo,Jx,rMr,mMe,tMr,aMr,gn,nMr,gMe,sMr,lMr,hMe,iMr,dMr,pMe,cMr,fMr,mMr,_Me,JM,uMe,gMr,hMr,ZJ,pMr,_Mr,uMr,YM,bMr,bMe,vMr,FMr,vMe,TMr,MMr,KM,tHe,uc,ZM,FMe,Yx,EMr,TMe,CMr,aHe,rr,Kx,wMr,bc,AMr,eY,LMr,yMr,oY,xMr,$Mr,kMr,Zx,SMr,MMe,RMr,PMr,BMr,It,e$,IMr,EMe,NMr,qMr,vc,jMr,CMe,DMr,GMr,rY,OMr,VMr,XMr,eE,zMr,To,o$,WMr,wMe,QMr,UMr,hn,HMr,AMe,JMr,YMr,LMe,KMr,ZMr,yMe,eEr,oEr,rEr,it,oE,xMe,tEr,aEr,tY,nEr,sEr,lEr,rE,$Me,iEr,dEr,aY,cEr,fEr,mEr,tE,kMe,gEr,hEr,nY,pEr,_Er,uEr,aE,SMe,bEr,vEr,sY,FEr,TEr,MEr,nE,RMe,EEr,CEr,lY,wEr,AEr,LEr,sE,yEr,PMe,xEr,$Er,BMe,kEr,SEr,lE,nHe,Fc,iE,IMe,r$,REr,NMe,PEr,sHe,tr,t$,BEr,Tc,IEr,iY,NEr,qEr,dY,jEr,DEr,GEr,a$,OEr,qMe,VEr,XEr,zEr,Nt,n$,WEr,jMe,QEr,UEr,Mc,HEr,DMe,JEr,YEr,cY,KEr,ZEr,e4r,dE,o4r,Mo,s$,r4r,GMe,t4r,a4r,pn,n4r,OMe,s4r,l4r,VMe,i4r,d4r,XMe,c4r,f4r,m4r,zMe,cE,WMe,g4r,h4r,fY,p4r,_4r,u4r,fE,b4r,QMe,v4r,F4r,UMe,T4r,M4r,mE,lHe,Ec,gE,HMe,l$,E4r,JMe,C4r,iHe,ar,i$,w4r,Cc,A4r,mY,L4r,y4r,gY,x4r,$4r,k4r,d$,S4r,YMe,R4r,P4r,B4r,qt,c$,I4r,KMe,N4r,q4r,wc,j4r,ZMe,D4r,G4r,hY,O4r,V4r,X4r,hE,z4r,Rr,f$,W4r,eEe,Q4r,U4r,_n,H4r,oEe,J4r,Y4r,rEe,K4r,Z4r,tEe,eCr,oCr,rCr,B,pE,aEe,tCr,aCr,pY,nCr,sCr,lCr,_E,nEe,iCr,dCr,_Y,cCr,fCr,mCr,uE,sEe,gCr,hCr,uY,pCr,_Cr,uCr,bE,lEe,bCr,vCr,bY,FCr,TCr,MCr,vE,iEe,ECr,CCr,vY,wCr,ACr,LCr,FE,dEe,yCr,xCr,FY,$Cr,kCr,SCr,TE,cEe,RCr,PCr,TY,BCr,ICr,NCr,ME,fEe,qCr,jCr,MY,DCr,GCr,OCr,EE,mEe,VCr,XCr,EY,zCr,WCr,QCr,CE,gEe,UCr,HCr,CY,JCr,YCr,KCr,wE,hEe,ZCr,e3r,wY,o3r,r3r,t3r,AE,pEe,a3r,n3r,AY,s3r,l3r,i3r,LE,_Ee,d3r,c3r,LY,f3r,m3r,g3r,yE,uEe,h3r,p3r,yY,_3r,u3r,b3r,xE,bEe,v3r,F3r,xY,T3r,M3r,E3r,$E,vEe,C3r,w3r,$Y,A3r,L3r,y3r,kE,FEe,x3r,$3r,kY,k3r,S3r,R3r,SE,TEe,P3r,B3r,SY,I3r,N3r,q3r,il,MEe,j3r,D3r,RY,G3r,O3r,PY,V3r,X3r,z3r,RE,EEe,W3r,Q3r,BY,U3r,H3r,J3r,PE,CEe,Y3r,K3r,IY,Z3r,e5r,o5r,BE,wEe,r5r,t5r,NY,a5r,n5r,s5r,IE,AEe,l5r,i5r,qY,d5r,c5r,f5r,NE,LEe,m5r,g5r,jY,h5r,p5r,_5r,qE,yEe,u5r,b5r,DY,v5r,F5r,T5r,jE,xEe,M5r,E5r,GY,C5r,w5r,A5r,DE,$Ee,L5r,y5r,OY,x5r,$5r,k5r,GE,kEe,S5r,R5r,VY,P5r,B5r,I5r,OE,SEe,N5r,q5r,XY,j5r,D5r,G5r,VE,REe,O5r,V5r,zY,X5r,z5r,W5r,XE,PEe,Q5r,U5r,WY,H5r,J5r,Y5r,zE,BEe,K5r,Z5r,QY,ewr,owr,rwr,WE,IEe,twr,awr,UY,nwr,swr,lwr,QE,NEe,iwr,dwr,HY,cwr,fwr,mwr,UE,qEe,gwr,hwr,JY,pwr,_wr,uwr,HE,jEe,bwr,vwr,YY,Fwr,Twr,Mwr,JE,DEe,Ewr,Cwr,KY,wwr,Awr,Lwr,YE,GEe,ywr,xwr,ZY,$wr,kwr,Swr,KE,OEe,Rwr,Pwr,eK,Bwr,Iwr,Nwr,ZE,VEe,qwr,jwr,oK,Dwr,Gwr,Owr,e4,XEe,Vwr,Xwr,rK,zwr,Wwr,Qwr,o4,zEe,Uwr,Hwr,tK,Jwr,Ywr,Kwr,r4,WEe,Zwr,e6r,aK,o6r,r6r,t6r,t4,QEe,a6r,n6r,nK,s6r,l6r,i6r,a4,UEe,d6r,c6r,sK,f6r,m6r,g6r,n4,HEe,h6r,p6r,lK,_6r,u6r,b6r,s4,JEe,v6r,F6r,iK,T6r,M6r,E6r,l4,YEe,C6r,w6r,dK,A6r,L6r,y6r,i4,KEe,x6r,$6r,cK,k6r,S6r,R6r,d4,ZEe,P6r,B6r,fK,I6r,N6r,q6r,c4,e4e,j6r,D6r,mK,G6r,O6r,V6r,f4,o4e,X6r,z6r,gK,W6r,Q6r,U6r,m4,r4e,H6r,J6r,hK,Y6r,K6r,Z6r,g4,dHe,Ac,h4,t4e,m$,eAr,a4e,oAr,cHe,nr,g$,rAr,Lc,tAr,pK,aAr,nAr,_K,sAr,lAr,iAr,h$,dAr,n4e,cAr,fAr,mAr,jt,p$,gAr,s4e,hAr,pAr,yc,_Ar,l4e,uAr,bAr,uK,vAr,FAr,TAr,p4,MAr,Pr,_$,EAr,i4e,CAr,wAr,un,AAr,d4e,LAr,yAr,c4e,xAr,$Ar,f4e,kAr,SAr,RAr,se,_4,m4e,PAr,BAr,bK,IAr,NAr,qAr,u4,g4e,jAr,DAr,vK,GAr,OAr,VAr,b4,h4e,XAr,zAr,FK,WAr,QAr,UAr,v4,p4e,HAr,JAr,TK,YAr,KAr,ZAr,F4,_4e,e7r,o7r,MK,r7r,t7r,a7r,T4,u4e,n7r,s7r,EK,l7r,i7r,d7r,M4,b4e,c7r,f7r,CK,m7r,g7r,h7r,E4,v4e,p7r,_7r,wK,u7r,b7r,v7r,C4,F4e,F7r,T7r,AK,M7r,E7r,C7r,w4,T4e,w7r,A7r,LK,L7r,y7r,x7r,A4,M4e,$7r,k7r,yK,S7r,R7r,P7r,L4,E4e,B7r,I7r,xK,N7r,q7r,j7r,y4,C4e,D7r,G7r,$K,O7r,V7r,X7r,x4,w4e,z7r,W7r,kK,Q7r,U7r,H7r,$4,A4e,J7r,Y7r,SK,K7r,Z7r,eLr,k4,L4e,oLr,rLr,RK,tLr,aLr,nLr,S4,y4e,sLr,lLr,PK,iLr,dLr,cLr,R4,x4e,fLr,mLr,BK,gLr,hLr,pLr,P4,$4e,_Lr,uLr,IK,bLr,vLr,FLr,B4,k4e,TLr,MLr,NK,ELr,CLr,wLr,I4,S4e,ALr,LLr,qK,yLr,xLr,$Lr,N4,R4e,kLr,SLr,jK,RLr,PLr,BLr,q4,P4e,ILr,NLr,DK,qLr,jLr,DLr,j4,fHe,xc,D4,B4e,u$,GLr,I4e,OLr,mHe,sr,b$,VLr,$c,XLr,GK,zLr,WLr,OK,QLr,ULr,HLr,v$,JLr,N4e,YLr,KLr,ZLr,Dt,F$,eyr,q4e,oyr,ryr,kc,tyr,j4e,ayr,nyr,VK,syr,lyr,iyr,G4,dyr,Br,T$,cyr,D4e,fyr,myr,bn,gyr,G4e,hyr,pyr,O4e,_yr,uyr,V4e,byr,vyr,Fyr,Me,O4,X4e,Tyr,Myr,XK,Eyr,Cyr,wyr,V4,z4e,Ayr,Lyr,zK,yyr,xyr,$yr,X4,W4e,kyr,Syr,WK,Ryr,Pyr,Byr,z4,Q4e,Iyr,Nyr,QK,qyr,jyr,Dyr,W4,U4e,Gyr,Oyr,UK,Vyr,Xyr,zyr,Q4,H4e,Wyr,Qyr,HK,Uyr,Hyr,Jyr,U4,J4e,Yyr,Kyr,JK,Zyr,e9r,o9r,H4,Y4e,r9r,t9r,YK,a9r,n9r,s9r,J4,K4e,l9r,i9r,KK,d9r,c9r,f9r,Y4,Z4e,m9r,g9r,ZK,h9r,p9r,_9r,K4,eCe,u9r,b9r,eZ,v9r,F9r,T9r,Z4,oCe,M9r,E9r,oZ,C9r,w9r,A9r,eC,rCe,L9r,y9r,rZ,x9r,$9r,k9r,oC,tCe,S9r,R9r,tZ,P9r,B9r,I9r,rC,gHe,Sc,tC,aCe,M$,N9r,nCe,q9r,hHe,lr,E$,j9r,Rc,D9r,aZ,G9r,O9r,nZ,V9r,X9r,z9r,C$,W9r,sCe,Q9r,U9r,H9r,Gt,w$,J9r,lCe,Y9r,K9r,Pc,Z9r,iCe,exr,oxr,sZ,rxr,txr,axr,aC,nxr,Ir,A$,sxr,dCe,lxr,ixr,vn,dxr,cCe,cxr,fxr,fCe,mxr,gxr,mCe,hxr,pxr,_xr,Ve,nC,gCe,uxr,bxr,lZ,vxr,Fxr,Txr,sC,hCe,Mxr,Exr,iZ,Cxr,wxr,Axr,dl,pCe,Lxr,yxr,dZ,xxr,$xr,cZ,kxr,Sxr,Rxr,lC,_Ce,Pxr,Bxr,fZ,Ixr,Nxr,qxr,iC,uCe,jxr,Dxr,mZ,Gxr,Oxr,Vxr,dC,bCe,Xxr,zxr,gZ,Wxr,Qxr,Uxr,cC,vCe,Hxr,Jxr,hZ,Yxr,Kxr,Zxr,fC,FCe,e$r,o$r,pZ,r$r,t$r,a$r,mC,pHe,Bc,gC,TCe,L$,n$r,MCe,s$r,_He,ir,y$,l$r,Ic,i$r,_Z,d$r,c$r,uZ,f$r,m$r,g$r,x$,h$r,ECe,p$r,_$r,u$r,Ot,$$,b$r,CCe,v$r,F$r,Nc,T$r,wCe,M$r,E$r,bZ,C$r,w$r,A$r,hC,L$r,Nr,k$,y$r,ACe,x$r,$$r,Fn,k$r,LCe,S$r,R$r,yCe,P$r,B$r,xCe,I$r,N$r,q$r,S$,pC,$Ce,j$r,D$r,vZ,G$r,O$r,V$r,_C,kCe,X$r,z$r,FZ,W$r,Q$r,U$r,uC,uHe,qc,bC,SCe,R$,H$r,RCe,J$r,bHe,dr,P$,Y$r,jc,K$r,TZ,Z$r,ekr,MZ,okr,rkr,tkr,B$,akr,PCe,nkr,skr,lkr,Vt,I$,ikr,BCe,dkr,ckr,Dc,fkr,ICe,mkr,gkr,EZ,hkr,pkr,_kr,vC,ukr,qr,N$,bkr,NCe,vkr,Fkr,Tn,Tkr,qCe,Mkr,Ekr,jCe,Ckr,wkr,DCe,Akr,Lkr,ykr,de,FC,GCe,xkr,$kr,CZ,kkr,Skr,Rkr,TC,OCe,Pkr,Bkr,wZ,Ikr,Nkr,qkr,MC,VCe,jkr,Dkr,AZ,Gkr,Okr,Vkr,EC,XCe,Xkr,zkr,LZ,Wkr,Qkr,Ukr,CC,zCe,Hkr,Jkr,yZ,Ykr,Kkr,Zkr,wC,WCe,eSr,oSr,xZ,rSr,tSr,aSr,AC,QCe,nSr,sSr,$Z,lSr,iSr,dSr,LC,UCe,cSr,fSr,kZ,mSr,gSr,hSr,yC,HCe,pSr,_Sr,SZ,uSr,bSr,vSr,xC,JCe,FSr,TSr,RZ,MSr,ESr,CSr,$C,YCe,wSr,ASr,PZ,LSr,ySr,xSr,kC,KCe,$Sr,kSr,BZ,SSr,RSr,PSr,SC,ZCe,BSr,ISr,IZ,NSr,qSr,jSr,RC,e3e,DSr,GSr,NZ,OSr,VSr,XSr,PC,o3e,zSr,WSr,qZ,QSr,USr,HSr,BC,r3e,JSr,YSr,jZ,KSr,ZSr,eRr,IC,t3e,oRr,rRr,DZ,tRr,aRr,nRr,NC,a3e,sRr,lRr,GZ,iRr,dRr,cRr,qC,n3e,fRr,mRr,OZ,gRr,hRr,pRr,jC,s3e,_Rr,uRr,VZ,bRr,vRr,FRr,DC,vHe,Gc,GC,l3e,q$,TRr,i3e,MRr,FHe,cr,j$,ERr,Oc,CRr,XZ,wRr,ARr,zZ,LRr,yRr,xRr,D$,$Rr,d3e,kRr,SRr,RRr,Xt,G$,PRr,c3e,BRr,IRr,Vc,NRr,f3e,qRr,jRr,WZ,DRr,GRr,ORr,OC,VRr,jr,O$,XRr,m3e,zRr,WRr,Mn,QRr,g3e,URr,HRr,h3e,JRr,YRr,p3e,KRr,ZRr,ePr,ye,VC,_3e,oPr,rPr,QZ,tPr,aPr,nPr,XC,u3e,sPr,lPr,UZ,iPr,dPr,cPr,zC,b3e,fPr,mPr,HZ,gPr,hPr,pPr,WC,v3e,_Pr,uPr,JZ,bPr,vPr,FPr,QC,F3e,TPr,MPr,YZ,EPr,CPr,wPr,UC,T3e,APr,LPr,KZ,yPr,xPr,$Pr,HC,M3e,kPr,SPr,ZZ,RPr,PPr,BPr,JC,E3e,IPr,NPr,eee,qPr,jPr,DPr,YC,C3e,GPr,OPr,oee,VPr,XPr,zPr,KC,w3e,WPr,QPr,ree,UPr,HPr,JPr,ZC,THe,Xc,e3,A3e,V$,YPr,L3e,KPr,MHe,fr,X$,ZPr,zc,eBr,tee,oBr,rBr,aee,tBr,aBr,nBr,z$,sBr,y3e,lBr,iBr,dBr,zt,W$,cBr,x3e,fBr,mBr,Wc,gBr,$3e,hBr,pBr,nee,_Br,uBr,bBr,o3,vBr,Dr,Q$,FBr,k3e,TBr,MBr,En,EBr,S3e,CBr,wBr,R3e,ABr,LBr,P3e,yBr,xBr,$Br,te,r3,B3e,kBr,SBr,see,RBr,PBr,BBr,t3,I3e,IBr,NBr,lee,qBr,jBr,DBr,a3,N3e,GBr,OBr,iee,VBr,XBr,zBr,n3,q3e,WBr,QBr,dee,UBr,HBr,JBr,s3,j3e,YBr,KBr,cee,ZBr,eIr,oIr,l3,D3e,rIr,tIr,fee,aIr,nIr,sIr,i3,G3e,lIr,iIr,mee,dIr,cIr,fIr,d3,O3e,mIr,gIr,gee,hIr,pIr,_Ir,c3,V3e,uIr,bIr,hee,vIr,FIr,TIr,f3,X3e,MIr,EIr,pee,CIr,wIr,AIr,m3,z3e,LIr,yIr,_ee,xIr,$Ir,kIr,g3,W3e,SIr,RIr,uee,PIr,BIr,IIr,h3,Q3e,NIr,qIr,bee,jIr,DIr,GIr,p3,U3e,OIr,VIr,vee,XIr,zIr,WIr,_3,H3e,QIr,UIr,Fee,HIr,JIr,YIr,u3,J3e,KIr,ZIr,Tee,eNr,oNr,rNr,b3,Y3e,tNr,aNr,Mee,nNr,sNr,lNr,v3,K3e,iNr,dNr,Eee,cNr,fNr,mNr,F3,Z3e,gNr,hNr,Cee,pNr,_Nr,uNr,T3,e5e,bNr,vNr,wee,FNr,TNr,MNr,M3,o5e,ENr,CNr,Aee,wNr,ANr,LNr,E3,r5e,yNr,xNr,Lee,$Nr,kNr,SNr,C3,t5e,RNr,PNr,yee,BNr,INr,NNr,w3,a5e,qNr,jNr,xee,DNr,GNr,ONr,A3,n5e,VNr,XNr,$ee,zNr,WNr,QNr,L3,s5e,UNr,HNr,kee,JNr,YNr,KNr,y3,EHe,Qc,x3,l5e,U$,ZNr,i5e,eqr,CHe,mr,H$,oqr,Uc,rqr,See,tqr,aqr,Ree,nqr,sqr,lqr,J$,iqr,d5e,dqr,cqr,fqr,Wt,Y$,mqr,c5e,gqr,hqr,Hc,pqr,f5e,_qr,uqr,Pee,bqr,vqr,Fqr,$3,Tqr,Gr,K$,Mqr,m5e,Eqr,Cqr,Cn,wqr,g5e,Aqr,Lqr,h5e,yqr,xqr,p5e,$qr,kqr,Sqr,ve,k3,_5e,Rqr,Pqr,Bee,Bqr,Iqr,Nqr,S3,u5e,qqr,jqr,Iee,Dqr,Gqr,Oqr,R3,b5e,Vqr,Xqr,Nee,zqr,Wqr,Qqr,P3,v5e,Uqr,Hqr,qee,Jqr,Yqr,Kqr,B3,F5e,Zqr,ejr,jee,ojr,rjr,tjr,I3,T5e,ajr,njr,Dee,sjr,ljr,ijr,N3,M5e,djr,cjr,Gee,fjr,mjr,gjr,q3,E5e,hjr,pjr,Oee,_jr,ujr,bjr,j3,C5e,vjr,Fjr,Vee,Tjr,Mjr,Ejr,D3,w5e,Cjr,wjr,Xee,Ajr,Ljr,yjr,G3,A5e,xjr,$jr,zee,kjr,Sjr,Rjr,O3,L5e,Pjr,Bjr,Wee,Ijr,Njr,qjr,V3,y5e,jjr,Djr,Qee,Gjr,Ojr,Vjr,X3,x5e,Xjr,zjr,Uee,Wjr,Qjr,Ujr,z3,$5e,Hjr,Jjr,Hee,Yjr,Kjr,Zjr,W3,k5e,eDr,oDr,Jee,rDr,tDr,aDr,Q3,S5e,nDr,sDr,Yee,lDr,iDr,dDr,U3,wHe,Jc,H3,R5e,Z$,cDr,P5e,fDr,AHe,gr,ek,mDr,Yc,gDr,Kee,hDr,pDr,Zee,_Dr,uDr,bDr,ok,vDr,B5e,FDr,TDr,MDr,Qt,rk,EDr,I5e,CDr,wDr,Kc,ADr,N5e,LDr,yDr,eoe,xDr,$Dr,kDr,J3,SDr,Or,tk,RDr,q5e,PDr,BDr,wn,IDr,j5e,NDr,qDr,D5e,jDr,DDr,G5e,GDr,ODr,VDr,ak,Y3,O5e,XDr,zDr,ooe,WDr,QDr,UDr,K3,V5e,HDr,JDr,roe,YDr,KDr,ZDr,Z3,LHe,Zc,e5,X5e,nk,eGr,z5e,oGr,yHe,hr,sk,rGr,ef,tGr,toe,aGr,nGr,aoe,sGr,lGr,iGr,lk,dGr,W5e,cGr,fGr,mGr,Ut,ik,gGr,Q5e,hGr,pGr,of,_Gr,U5e,uGr,bGr,noe,vGr,FGr,TGr,o5,MGr,Vr,dk,EGr,H5e,CGr,wGr,An,AGr,J5e,LGr,yGr,Y5e,xGr,$Gr,K5e,kGr,SGr,RGr,Z5e,r5,ewe,PGr,BGr,soe,IGr,NGr,qGr,t5,xHe,rf,a5,owe,ck,jGr,rwe,DGr,$He,pr,fk,GGr,tf,OGr,loe,VGr,XGr,ioe,zGr,WGr,QGr,mk,UGr,twe,HGr,JGr,YGr,Ht,gk,KGr,awe,ZGr,eOr,af,oOr,nwe,rOr,tOr,doe,aOr,nOr,sOr,n5,lOr,Xr,hk,iOr,swe,dOr,cOr,Ln,fOr,lwe,mOr,gOr,iwe,hOr,pOr,dwe,_Or,uOr,bOr,ce,s5,cwe,vOr,FOr,coe,TOr,MOr,EOr,l5,fwe,COr,wOr,foe,AOr,LOr,yOr,i5,mwe,xOr,$Or,moe,kOr,SOr,ROr,d5,gwe,POr,BOr,goe,IOr,NOr,qOr,c5,hwe,jOr,DOr,hoe,GOr,OOr,VOr,f5,pwe,XOr,zOr,poe,WOr,QOr,UOr,m5,_we,HOr,JOr,_oe,YOr,KOr,ZOr,g5,uwe,eVr,oVr,uoe,rVr,tVr,aVr,h5,bwe,nVr,sVr,boe,lVr,iVr,dVr,p5,vwe,cVr,fVr,voe,mVr,gVr,hVr,_5,Fwe,pVr,_Vr,Foe,uVr,bVr,vVr,u5,Twe,FVr,TVr,Toe,MVr,EVr,CVr,b5,Mwe,wVr,AVr,Moe,LVr,yVr,xVr,v5,Ewe,$Vr,kVr,Eoe,SVr,RVr,PVr,F5,Cwe,BVr,IVr,Coe,NVr,qVr,jVr,T5,wwe,DVr,GVr,woe,OVr,VVr,XVr,M5,Awe,zVr,WVr,Aoe,QVr,UVr,HVr,E5,Lwe,JVr,YVr,Loe,KVr,ZVr,eXr,C5,ywe,oXr,rXr,yoe,tXr,aXr,nXr,w5,xwe,sXr,lXr,xoe,iXr,dXr,cXr,A5,kHe,nf,L5,$we,pk,fXr,kwe,mXr,SHe,_r,_k,gXr,sf,hXr,$oe,pXr,_Xr,koe,uXr,bXr,vXr,uk,FXr,Swe,TXr,MXr,EXr,Jt,bk,CXr,Rwe,wXr,AXr,lf,LXr,Pwe,yXr,xXr,Soe,$Xr,kXr,SXr,y5,RXr,zr,vk,PXr,Bwe,BXr,IXr,yn,NXr,Iwe,qXr,jXr,Nwe,DXr,GXr,qwe,OXr,VXr,XXr,fe,x5,jwe,zXr,WXr,Roe,QXr,UXr,HXr,$5,Dwe,JXr,YXr,Poe,KXr,ZXr,ezr,k5,Gwe,ozr,rzr,Boe,tzr,azr,nzr,S5,Owe,szr,lzr,Ioe,izr,dzr,czr,R5,Vwe,fzr,mzr,Noe,gzr,hzr,pzr,P5,Xwe,_zr,uzr,qoe,bzr,vzr,Fzr,B5,zwe,Tzr,Mzr,joe,Ezr,Czr,wzr,I5,Wwe,Azr,Lzr,Doe,yzr,xzr,$zr,N5,Qwe,kzr,Szr,Goe,Rzr,Pzr,Bzr,q5,Uwe,Izr,Nzr,Ooe,qzr,jzr,Dzr,j5,Hwe,Gzr,Ozr,Voe,Vzr,Xzr,zzr,D5,Jwe,Wzr,Qzr,Xoe,Uzr,Hzr,Jzr,G5,Ywe,Yzr,Kzr,zoe,Zzr,eWr,oWr,O5,Kwe,rWr,tWr,Woe,aWr,nWr,sWr,V5,Zwe,lWr,iWr,Qoe,dWr,cWr,fWr,X5,e6e,mWr,gWr,Uoe,hWr,pWr,_Wr,z5,o6e,uWr,bWr,Hoe,vWr,FWr,TWr,W5,r6e,MWr,EWr,Joe,CWr,wWr,AWr,Q5,t6e,LWr,yWr,Yoe,xWr,$Wr,kWr,U5,a6e,SWr,RWr,Koe,PWr,BWr,IWr,H5,RHe,df,J5,n6e,Fk,NWr,s6e,qWr,PHe,ur,Tk,jWr,cf,DWr,Zoe,GWr,OWr,ere,VWr,XWr,zWr,Mk,WWr,l6e,QWr,UWr,HWr,Yt,Ek,JWr,i6e,YWr,KWr,ff,ZWr,d6e,eQr,oQr,ore,rQr,tQr,aQr,Y5,nQr,Wr,Ck,sQr,c6e,lQr,iQr,xn,dQr,f6e,cQr,fQr,m6e,mQr,gQr,g6e,hQr,pQr,_Qr,h6e,K5,p6e,uQr,bQr,rre,vQr,FQr,TQr,Z5,BHe,mf,ew,_6e,wk,MQr,u6e,EQr,IHe,br,Ak,CQr,gf,wQr,tre,AQr,LQr,are,yQr,xQr,$Qr,Lk,kQr,b6e,SQr,RQr,PQr,Kt,yk,BQr,v6e,IQr,NQr,hf,qQr,F6e,jQr,DQr,nre,GQr,OQr,VQr,ow,XQr,Qr,xk,zQr,T6e,WQr,QQr,$n,UQr,M6e,HQr,JQr,E6e,YQr,KQr,C6e,ZQr,eUr,oUr,w6e,rw,A6e,rUr,tUr,sre,aUr,nUr,sUr,tw,NHe,pf,aw,L6e,$k,lUr,y6e,iUr,qHe,vr,kk,dUr,_f,cUr,lre,fUr,mUr,ire,gUr,hUr,pUr,Sk,_Ur,x6e,uUr,bUr,vUr,Zt,Rk,FUr,$6e,TUr,MUr,uf,EUr,k6e,CUr,wUr,dre,AUr,LUr,yUr,nw,xUr,Ur,Pk,$Ur,S6e,kUr,SUr,kn,RUr,R6e,PUr,BUr,P6e,IUr,NUr,B6e,qUr,jUr,DUr,re,sw,I6e,GUr,OUr,cre,VUr,XUr,zUr,lw,N6e,WUr,QUr,fre,UUr,HUr,JUr,iw,q6e,YUr,KUr,mre,ZUr,eHr,oHr,dw,j6e,rHr,tHr,gre,aHr,nHr,sHr,cw,D6e,lHr,iHr,hre,dHr,cHr,fHr,fw,G6e,mHr,gHr,pre,hHr,pHr,_Hr,mw,O6e,uHr,bHr,_re,vHr,FHr,THr,gw,V6e,MHr,EHr,ure,CHr,wHr,AHr,hw,X6e,LHr,yHr,bre,xHr,$Hr,kHr,pw,z6e,SHr,RHr,vre,PHr,BHr,IHr,_w,W6e,NHr,qHr,Fre,jHr,DHr,GHr,uw,Q6e,OHr,VHr,Tre,XHr,zHr,WHr,bw,U6e,QHr,UHr,Mre,HHr,JHr,YHr,vw,H6e,KHr,ZHr,Ere,eJr,oJr,rJr,Fw,J6e,tJr,aJr,Cre,nJr,sJr,lJr,Tw,Y6e,iJr,dJr,wre,cJr,fJr,mJr,Mw,K6e,gJr,hJr,Are,pJr,_Jr,uJr,Ew,Z6e,bJr,vJr,Lre,FJr,TJr,MJr,Cw,eAe,EJr,CJr,yre,wJr,AJr,LJr,ww,oAe,yJr,xJr,xre,$Jr,kJr,SJr,Aw,rAe,RJr,PJr,$re,BJr,IJr,NJr,Lw,tAe,qJr,jJr,kre,DJr,GJr,OJr,yw,aAe,VJr,XJr,Sre,zJr,WJr,QJr,xw,nAe,UJr,HJr,Rre,JJr,YJr,KJr,$w,sAe,ZJr,eYr,Pre,oYr,rYr,tYr,kw,lAe,aYr,nYr,Bre,sYr,lYr,iYr,Sw,iAe,dYr,cYr,Ire,fYr,mYr,gYr,Rw,jHe,bf,Pw,dAe,Bk,hYr,cAe,pYr,DHe,Fr,Ik,_Yr,vf,uYr,Nre,bYr,vYr,qre,FYr,TYr,MYr,Nk,EYr,fAe,CYr,wYr,AYr,ea,qk,LYr,mAe,yYr,xYr,Ff,$Yr,gAe,kYr,SYr,jre,RYr,PYr,BYr,Bw,IYr,Hr,jk,NYr,hAe,qYr,jYr,Sn,DYr,pAe,GYr,OYr,_Ae,VYr,XYr,uAe,zYr,WYr,QYr,xe,Iw,bAe,UYr,HYr,Dre,JYr,YYr,KYr,Nw,vAe,ZYr,eKr,Gre,oKr,rKr,tKr,qw,FAe,aKr,nKr,Ore,sKr,lKr,iKr,jw,TAe,dKr,cKr,Vre,fKr,mKr,gKr,Dw,MAe,hKr,pKr,Xre,_Kr,uKr,bKr,Gw,EAe,vKr,FKr,zre,TKr,MKr,EKr,Ow,CAe,CKr,wKr,Wre,AKr,LKr,yKr,Vw,wAe,xKr,$Kr,Qre,kKr,SKr,RKr,Xw,AAe,PKr,BKr,Ure,IKr,NKr,qKr,zw,LAe,jKr,DKr,Hre,GKr,OKr,VKr,Ww,GHe,Tf,Qw,yAe,Dk,XKr,xAe,zKr,OHe,Tr,Gk,WKr,Mf,QKr,Jre,UKr,HKr,Yre,JKr,YKr,KKr,Ok,ZKr,$Ae,eZr,oZr,rZr,oa,Vk,tZr,kAe,aZr,nZr,Ef,sZr,SAe,lZr,iZr,Kre,dZr,cZr,fZr,Uw,mZr,Jr,Xk,gZr,RAe,hZr,pZr,Rn,_Zr,PAe,uZr,bZr,BAe,vZr,FZr,IAe,TZr,MZr,EZr,Ee,Hw,NAe,CZr,wZr,Zre,AZr,LZr,yZr,Jw,qAe,xZr,$Zr,ete,kZr,SZr,RZr,Yw,jAe,PZr,BZr,ote,IZr,NZr,qZr,Kw,DAe,jZr,DZr,rte,GZr,OZr,VZr,Zw,GAe,XZr,zZr,tte,WZr,QZr,UZr,e6,OAe,HZr,JZr,ate,YZr,KZr,ZZr,o6,VAe,eet,oet,nte,ret,tet,aet,r6,XAe,net,set,ste,iet,det,cet,t6,zAe,fet,met,lte,get,het,pet,a6,WAe,_et,uet,ite,bet,vet,Fet,n6,QAe,Tet,Met,dte,Eet,Cet,wet,s6,UAe,Aet,Let,cte,yet,xet,$et,l6,HAe,ket,Set,fte,Ret,Pet,Bet,i6,VHe,Cf,d6,JAe,zk,Iet,YAe,Net,XHe,Mr,Wk,qet,wf,jet,mte,Det,Get,gte,Oet,Vet,Xet,Qk,zet,KAe,Wet,Qet,Uet,ra,Uk,Het,ZAe,Jet,Yet,Af,Ket,e7e,Zet,eot,hte,oot,rot,tot,c6,aot,Yr,Hk,not,o7e,sot,lot,Pn,iot,r7e,dot,cot,t7e,fot,mot,a7e,got,hot,pot,$e,f6,n7e,_ot,uot,pte,bot,vot,Fot,m6,s7e,Tot,Mot,_te,Eot,Cot,wot,g6,l7e,Aot,Lot,ute,yot,xot,$ot,h6,i7e,kot,Sot,bte,Rot,Pot,Bot,p6,d7e,Iot,Not,vte,qot,jot,Dot,_6,c7e,Got,Oot,Fte,Vot,Xot,zot,u6,f7e,Wot,Qot,Tte,Uot,Hot,Jot,b6,m7e,Yot,Kot,Mte,Zot,ert,ort,v6,g7e,rrt,trt,Ete,art,nrt,srt,F6,h7e,lrt,irt,Cte,drt,crt,frt,T6,zHe,Lf,M6,p7e,Jk,mrt,_7e,grt,WHe,Er,Yk,hrt,yf,prt,wte,_rt,urt,Ate,brt,vrt,Frt,Kk,Trt,u7e,Mrt,Ert,Crt,ta,Zk,wrt,b7e,Art,Lrt,xf,yrt,v7e,xrt,$rt,Lte,krt,Srt,Rrt,E6,Prt,Kr,eS,Brt,F7e,Irt,Nrt,Bn,qrt,T7e,jrt,Drt,M7e,Grt,Ort,E7e,Vrt,Xrt,zrt,ke,C6,C7e,Wrt,Qrt,yte,Urt,Hrt,Jrt,w6,w7e,Yrt,Krt,xte,Zrt,ett,ott,A6,A7e,rtt,ttt,$te,att,ntt,stt,L6,L7e,ltt,itt,kte,dtt,ctt,ftt,y6,y7e,mtt,gtt,Ste,htt,ptt,_tt,x6,x7e,utt,btt,Rte,vtt,Ftt,Ttt,$6,$7e,Mtt,Ett,Pte,Ctt,wtt,Att,k6,k7e,Ltt,ytt,Bte,xtt,$tt,ktt,S6,S7e,Stt,Rtt,Ite,Ptt,Btt,Itt,R6,R7e,Ntt,qtt,Nte,jtt,Dtt,Gtt,P6,QHe,$f,B6,P7e,oS,Ott,B7e,Vtt,UHe,Cr,rS,Xtt,kf,ztt,qte,Wtt,Qtt,jte,Utt,Htt,Jtt,tS,Ytt,I7e,Ktt,Ztt,eat,aa,aS,oat,N7e,rat,tat,Sf,aat,q7e,nat,sat,Dte,lat,iat,dat,I6,cat,Zr,nS,fat,j7e,mat,gat,In,hat,D7e,pat,_at,G7e,uat,bat,O7e,vat,Fat,Tat,Se,N6,V7e,Mat,Eat,Gte,Cat,wat,Aat,q6,X7e,Lat,yat,Ote,xat,$at,kat,j6,z7e,Sat,Rat,Vte,Pat,Bat,Iat,D6,W7e,Nat,qat,Xte,jat,Dat,Gat,G6,Q7e,Oat,Vat,zte,Xat,zat,Wat,O6,U7e,Qat,Uat,Wte,Hat,Jat,Yat,V6,H7e,Kat,Zat,Qte,ent,ont,rnt,X6,J7e,tnt,ant,Ute,nnt,snt,lnt,z6,Y7e,int,dnt,Hte,cnt,fnt,mnt,W6,K7e,gnt,hnt,Jte,pnt,_nt,unt,Q6,HHe,Rf,U6,Z7e,sS,bnt,eLe,vnt,JHe,wr,lS,Fnt,Pf,Tnt,Yte,Mnt,Ent,Kte,Cnt,wnt,Ant,iS,Lnt,oLe,ynt,xnt,$nt,na,dS,knt,rLe,Snt,Rnt,Bf,Pnt,tLe,Bnt,Int,Zte,Nnt,qnt,jnt,H6,Dnt,et,cS,Gnt,aLe,Ont,Vnt,Nn,Xnt,nLe,znt,Wnt,sLe,Qnt,Unt,lLe,Hnt,Jnt,Ynt,Re,J6,iLe,Knt,Znt,eae,est,ost,rst,Y6,dLe,tst,ast,oae,nst,sst,lst,K6,cLe,ist,dst,rae,cst,fst,mst,Z6,fLe,gst,hst,tae,pst,_st,ust,eA,mLe,bst,vst,aae,Fst,Tst,Mst,oA,gLe,Est,Cst,nae,wst,Ast,Lst,rA,hLe,yst,xst,sae,$st,kst,Sst,tA,pLe,Rst,Pst,lae,Bst,Ist,Nst,aA,_Le,qst,jst,iae,Dst,Gst,Ost,nA,uLe,Vst,Xst,dae,zst,Wst,Qst,sA,YHe,If,lA,bLe,fS,Ust,vLe,Hst,KHe,Ar,mS,Jst,Nf,Yst,cae,Kst,Zst,fae,elt,olt,rlt,gS,tlt,FLe,alt,nlt,slt,sa,hS,llt,TLe,ilt,dlt,qf,clt,MLe,flt,mlt,mae,glt,hlt,plt,iA,_lt,ot,pS,ult,ELe,blt,vlt,qn,Flt,CLe,Tlt,Mlt,wLe,Elt,Clt,ALe,wlt,Alt,Llt,Xe,dA,LLe,ylt,xlt,gae,$lt,klt,Slt,cA,yLe,Rlt,Plt,hae,Blt,Ilt,Nlt,fA,xLe,qlt,jlt,pae,Dlt,Glt,Olt,mA,$Le,Vlt,Xlt,_ae,zlt,Wlt,Qlt,gA,kLe,Ult,Hlt,uae,Jlt,Ylt,Klt,hA,SLe,Zlt,eit,bae,oit,rit,tit,pA,RLe,ait,nit,vae,sit,lit,iit,_A,PLe,dit,cit,Fae,fit,mit,git,uA,ZHe,jf,bA,BLe,_S,hit,ILe,pit,eJe,Lr,uS,_it,Df,uit,Tae,bit,vit,Mae,Fit,Tit,Mit,bS,Eit,NLe,Cit,wit,Ait,la,vS,Lit,qLe,yit,xit,Gf,$it,jLe,kit,Sit,Eae,Rit,Pit,Bit,vA,Iit,rt,FS,Nit,DLe,qit,jit,jn,Dit,GLe,Git,Oit,OLe,Vit,Xit,VLe,zit,Wit,Qit,ze,FA,XLe,Uit,Hit,Cae,Jit,Yit,Kit,TA,zLe,Zit,edt,wae,odt,rdt,tdt,MA,WLe,adt,ndt,Aae,sdt,ldt,idt,EA,QLe,ddt,cdt,Lae,fdt,mdt,gdt,CA,ULe,hdt,pdt,yae,_dt,udt,bdt,wA,HLe,vdt,Fdt,xae,Tdt,Mdt,Edt,AA,JLe,Cdt,wdt,$ae,Adt,Ldt,ydt,LA,YLe,xdt,$dt,kae,kdt,Sdt,Rdt,yA,oJe,Of,xA,KLe,TS,Pdt,ZLe,Bdt,rJe,yr,MS,Idt,Vf,Ndt,Sae,qdt,jdt,Rae,Ddt,Gdt,Odt,ES,Vdt,eye,Xdt,zdt,Wdt,ia,CS,Qdt,oye,Udt,Hdt,Xf,Jdt,rye,Ydt,Kdt,Pae,Zdt,ect,oct,$A,rct,tt,wS,tct,tye,act,nct,Dn,sct,aye,lct,ict,nye,dct,cct,sye,fct,mct,gct,lye,kA,iye,hct,pct,Bae,_ct,uct,bct,SA,tJe,zf,RA,dye,AS,vct,cye,Fct,aJe,xr,LS,Tct,Wf,Mct,Iae,Ect,Cct,Nae,wct,Act,Lct,yS,yct,fye,xct,$ct,kct,da,xS,Sct,mye,Rct,Pct,Qf,Bct,gye,Ict,Nct,qae,qct,jct,Dct,PA,Gct,at,$S,Oct,hye,Vct,Xct,Gn,zct,pye,Wct,Qct,_ye,Uct,Hct,uye,Jct,Yct,Kct,kS,BA,bye,Zct,eft,jae,oft,rft,tft,IA,vye,aft,nft,Dae,sft,lft,ift,NA,nJe,Uf,qA,Fye,SS,dft,Tye,cft,sJe,$r,RS,fft,Hf,mft,Gae,gft,hft,Oae,pft,_ft,uft,PS,bft,Mye,vft,Fft,Tft,ca,BS,Mft,Eye,Eft,Cft,Jf,wft,Cye,Aft,Lft,Vae,yft,xft,$ft,jA,kft,nt,IS,Sft,wye,Rft,Pft,On,Bft,Aye,Ift,Nft,Lye,qft,jft,yye,Dft,Gft,Oft,xye,DA,$ye,Vft,Xft,Xae,zft,Wft,Qft,GA,lJe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),_y=new oe({}),uy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),nm=new Uft({props:{warning:!0,$$slots:{default:[uta]},$$scope:{ctx:$}}}),by=new oe({}),vy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/configuration_auto.py#L625"}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/configuration_auto.py#L648"}}),Th=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[bta]},$$scope:{ctx:$}}}),Ey=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/configuration_auto.py#L771"}}),Cy=new oe({}),wy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/tokenization_auto.py#L418"}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18020/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/tokenization_auto.py#L432"}}),tp=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[vta]},$$scope:{ctx:$}}}),xy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/tokenization_auto.py#L633"}}),$y=new oe({}),ky=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18020/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Xp=new Uft({props:{$$slots:{default:[Fta]},$$scope:{ctx:$}}}),zp=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Tta]},$$scope:{ctx:$}}}),By=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),Iy=new oe({}),Ny=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/processing_auto.py#L91"}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/processing_auto.py#L105"}}),h_=new Uft({props:{$$slots:{default:[Mta]},$$scope:{ctx:$}}}),p_=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Eta]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/processing_auto.py#L258"}}),Oy=new oe({}),Vy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L808"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),b_=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Cta]},$$scope:{ctx:$}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),L2=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[wta]},$$scope:{ctx:$}}}),Qy=new oe({}),Uy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L815"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),x2=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Ata]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Lta]},$$scope:{ctx:$}}}),Ky=new oe({}),Zy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L830"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[yta]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xta]},$$scope:{ctx:$}}}),t9=new oe({}),a9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L837"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),_1=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[$ta]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[kta]},$$scope:{ctx:$}}}),i9=new oe({}),d9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L844"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Sta]},$$scope:{ctx:$}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Rta]},$$scope:{ctx:$}}}),g9=new oe({}),h9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L853"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Pta]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),Lv=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Bta]},$$scope:{ctx:$}}}),b9=new oe({}),v9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L898"}}),T9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Ita]},$$scope:{ctx:$}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Nta]},$$scope:{ctx:$}}}),E9=new oe({}),C9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L905"}}),A9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qta]},$$scope:{ctx:$}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jta]},$$scope:{ctx:$}}}),y9=new oe({}),x9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L891"}}),k9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Dta]},$$scope:{ctx:$}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Gta]},$$scope:{ctx:$}}}),R9=new oe({}),P9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L862"}}),I9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Ota]},$$scope:{ctx:$}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Vta]},$$scope:{ctx:$}}}),q9=new oe({}),j9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L869"}}),G9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),e8=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Xta]},$$scope:{ctx:$}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[zta]},$$scope:{ctx:$}}}),V9=new oe({}),X9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L914"}}),W9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18020/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Wta]},$$scope:{ctx:$}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),T8=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Qta]},$$scope:{ctx:$}}}),U9=new oe({}),H9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L953"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),E8=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Uta]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),A8=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Hta]},$$scope:{ctx:$}}}),Z9=new oe({}),ex=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L960"}}),rx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),y8=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Jta]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),k8=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Yta]},$$scope:{ctx:$}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L880"}}),lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),R8=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Kta]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),I8=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Zta]},$$scope:{ctx:$}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L967"}}),mx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),q8=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[eaa]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),H8=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[oaa]},$$scope:{ctx:$}}}),hx=new oe({}),px=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L990"}}),ux=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),Y8=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[raa]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[taa]},$$scope:{ctx:$}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L974"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[aaa]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[naa]},$$scope:{ctx:$}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L981"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[saa]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[laa]},$$scope:{ctx:$}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L999"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[iaa]},$$scope:{ctx:$}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[daa]},$$scope:{ctx:$}}}),Bx=new oe({}),Ix=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L1006"}}),qx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[caa]},$$scope:{ctx:$}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[faa]},$$scope:{ctx:$}}}),Dx=new oe({}),Gx=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L946"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[maa]},$$scope:{ctx:$}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[gaa]},$$scope:{ctx:$}}}),Wx=new oe({}),Qx=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L921"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),HM=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[haa]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[paa]},$$scope:{ctx:$}}}),Yx=new oe({}),Kx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L928"}}),e$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[_aa]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[uaa]},$$scope:{ctx:$}}}),r$=new oe({}),t$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_auto.py#L937"}}),n$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[baa]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[vaa]},$$scope:{ctx:$}}}),l$=new oe({}),i$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),c$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/groupvit#transformers.TFGroupViTModel">TFGroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Faa]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Taa]},$$scope:{ctx:$}}}),m$=new oe({}),g$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),p$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Maa]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Eaa]},$$scope:{ctx:$}}}),u$=new oe({}),b$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),F$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Caa]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[waa]},$$scope:{ctx:$}}}),M$=new oe({}),E$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),w$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18020/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Aaa]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Laa]},$$scope:{ctx:$}}}),L$=new oe({}),y$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),$$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new I({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[yaa]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new I({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[xaa]},$$scope:{ctx:$}}}),R$=new oe({}),P$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),I$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),q$=new oe({}),j$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),G$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Saa]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),V$=new oe({}),X$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L498"}}),W$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Paa]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),U$=new oe({}),H$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L534"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),Z$=new oe({}),ek=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L541"}}),rk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),nk=new oe({}),sk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),ik=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Gaa]},$$scope:{ctx:$}}}),ck=new oe({}),fk=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),gk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Oaa]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Vaa]},$$scope:{ctx:$}}}),pk=new oe({}),_k=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),bk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Xaa]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zaa]},$$scope:{ctx:$}}}),Fk=new oe({}),Tk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Waa]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Qaa]},$$scope:{ctx:$}}}),wk=new oe({}),Ak=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_tf_auto.py#L550"}}),yk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Uaa]},$$scope:{ctx:$}}}),xk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Haa]},$$scope:{ctx:$}}}),$k=new oe({}),kk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),Pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),Bk=new oe({}),Ik=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),qk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Kaa]},$$scope:{ctx:$}}}),jk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Zaa]},$$scope:{ctx:$}}}),Dk=new oe({}),Gk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Vk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[ena]},$$scope:{ctx:$}}}),Xk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ona]},$$scope:{ctx:$}}}),zk=new oe({}),Wk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Uk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[rna]},$$scope:{ctx:$}}}),Hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[tna]},$$scope:{ctx:$}}}),Jk=new oe({}),Yk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Zk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ana]},$$scope:{ctx:$}}}),eS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[nna]},$$scope:{ctx:$}}}),oS=new oe({}),rS=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),aS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),I6=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[sna]},$$scope:{ctx:$}}}),nS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[lna]},$$scope:{ctx:$}}}),sS=new oe({}),lS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),dS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),H6=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ina]},$$scope:{ctx:$}}}),cS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),sA=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[dna]},$$scope:{ctx:$}}}),fS=new oe({}),mS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),hS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),iA=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[cna]},$$scope:{ctx:$}}}),pS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),uA=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[fna]},$$scope:{ctx:$}}}),_S=new oe({}),uS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),vS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[mna]},$$scope:{ctx:$}}}),FS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),yA=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[gna]},$$scope:{ctx:$}}}),TS=new oe({}),MS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),CS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),$A=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[hna]},$$scope:{ctx:$}}}),wS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pna]},$$scope:{ctx:$}}}),AS=new oe({}),LS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),xS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[_na]},$$scope:{ctx:$}}}),$S=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[una]},$$scope:{ctx:$}}}),SS=new oe({}),RS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),BS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18020/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18020/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L389"}}),jA=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[bna]},$$scope:{ctx:$}}}),IS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18020/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18020/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18020/src/transformers/models/auto/auto_factory.py#L417"}}),GA=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[vna]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),em=l(),ft=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),my=o("from_pretrained()"),om=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),zi=o("Instantiating one of "),Xn=a("a"),gy=o("AutoConfig"),zn=o(", "),Wn=a("a"),hy=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),py=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),rm=l(),F(ja.$$.fragment),Ue=l(),Ae=a("p"),sP=o("will create a model that is an instance of "),Ui=a("a"),lP=o("BertModel"),iP=o("."),Lo=l(),Da=a("p"),dP=o("There is one class of "),tm=a("code"),cP=o("AutoModel"),MKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),KQe=l(),Hi=a("h2"),am=a("a"),Ose=a("span"),F(_y.$$.fragment),EKe=l(),Vse=a("span"),CKe=o("Extending the Auto Classes"),ZQe=l(),Un=a("p"),wKe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xse=a("code"),AKe=o("NewModel"),LKe=o(", make sure you have a "),zse=a("code"),yKe=o("NewModelConfig"),xKe=o(` then you can add those to the auto
classes like this:`),eUe=l(),F(uy.$$.fragment),oUe=l(),fP=a("p"),$Ke=o("You will then be able to use the auto classes like you would usually do!"),rUe=l(),F(nm.$$.fragment),tUe=l(),Ji=a("h2"),sm=a("a"),Wse=a("span"),F(by.$$.fragment),kKe=l(),Qse=a("span"),SKe=o("AutoConfig"),aUe=l(),yo=a("div"),F(vy.$$.fragment),RKe=l(),Fy=a("p"),PKe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mP=a("a"),BKe=o("from_pretrained()"),IKe=o(" class method."),NKe=l(),Ty=a("p"),qKe=o("This class cannot be instantiated directly using "),Use=a("code"),jKe=o("__init__()"),DKe=o(" (throws an error)."),GKe=l(),kr=a("div"),F(My.$$.fragment),OKe=l(),Hse=a("p"),VKe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),XKe=l(),Yi=a("p"),zKe=o("The configuration class to instantiate is selected based on the "),Jse=a("code"),WKe=o("model_type"),QKe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yse=a("code"),UKe=o("pretrained_model_name_or_path"),HKe=o(":"),JKe=l(),A=a("ul"),lm=a("li"),Kse=a("strong"),YKe=o("albert"),KKe=o(" \u2014 "),gP=a("a"),ZKe=o("AlbertConfig"),eZe=o(" (ALBERT model)"),oZe=l(),im=a("li"),Zse=a("strong"),rZe=o("bart"),tZe=o(" \u2014 "),hP=a("a"),aZe=o("BartConfig"),nZe=o(" (BART model)"),sZe=l(),dm=a("li"),ele=a("strong"),lZe=o("beit"),iZe=o(" \u2014 "),pP=a("a"),dZe=o("BeitConfig"),cZe=o(" (BEiT model)"),fZe=l(),cm=a("li"),ole=a("strong"),mZe=o("bert"),gZe=o(" \u2014 "),_P=a("a"),hZe=o("BertConfig"),pZe=o(" (BERT model)"),_Ze=l(),fm=a("li"),rle=a("strong"),uZe=o("bert-generation"),bZe=o(" \u2014 "),uP=a("a"),vZe=o("BertGenerationConfig"),FZe=o(" (Bert Generation model)"),TZe=l(),mm=a("li"),tle=a("strong"),MZe=o("big_bird"),EZe=o(" \u2014 "),bP=a("a"),CZe=o("BigBirdConfig"),wZe=o(" (BigBird model)"),AZe=l(),gm=a("li"),ale=a("strong"),LZe=o("bigbird_pegasus"),yZe=o(" \u2014 "),vP=a("a"),xZe=o("BigBirdPegasusConfig"),$Ze=o(" (BigBird-Pegasus model)"),kZe=l(),hm=a("li"),nle=a("strong"),SZe=o("blenderbot"),RZe=o(" \u2014 "),FP=a("a"),PZe=o("BlenderbotConfig"),BZe=o(" (Blenderbot model)"),IZe=l(),pm=a("li"),sle=a("strong"),NZe=o("blenderbot-small"),qZe=o(" \u2014 "),TP=a("a"),jZe=o("BlenderbotSmallConfig"),DZe=o(" (BlenderbotSmall model)"),GZe=l(),_m=a("li"),lle=a("strong"),OZe=o("bloom"),VZe=o(" \u2014 "),MP=a("a"),XZe=o("BloomConfig"),zZe=o(" (BLOOM model)"),WZe=l(),um=a("li"),ile=a("strong"),QZe=o("camembert"),UZe=o(" \u2014 "),EP=a("a"),HZe=o("CamembertConfig"),JZe=o(" (CamemBERT model)"),YZe=l(),bm=a("li"),dle=a("strong"),KZe=o("canine"),ZZe=o(" \u2014 "),CP=a("a"),eeo=o("CanineConfig"),oeo=o(" (CANINE model)"),reo=l(),vm=a("li"),cle=a("strong"),teo=o("clip"),aeo=o(" \u2014 "),wP=a("a"),neo=o("CLIPConfig"),seo=o(" (CLIP model)"),leo=l(),Fm=a("li"),fle=a("strong"),ieo=o("codegen"),deo=o(" \u2014 "),AP=a("a"),ceo=o("CodeGenConfig"),feo=o(" (CodeGen model)"),meo=l(),Tm=a("li"),mle=a("strong"),geo=o("convbert"),heo=o(" \u2014 "),LP=a("a"),peo=o("ConvBertConfig"),_eo=o(" (ConvBERT model)"),ueo=l(),Mm=a("li"),gle=a("strong"),beo=o("convnext"),veo=o(" \u2014 "),yP=a("a"),Feo=o("ConvNextConfig"),Teo=o(" (ConvNeXT model)"),Meo=l(),Em=a("li"),hle=a("strong"),Eeo=o("ctrl"),Ceo=o(" \u2014 "),xP=a("a"),weo=o("CTRLConfig"),Aeo=o(" (CTRL model)"),Leo=l(),Cm=a("li"),ple=a("strong"),yeo=o("cvt"),xeo=o(" \u2014 "),$P=a("a"),$eo=o("CvtConfig"),keo=o(" (CvT model)"),Seo=l(),wm=a("li"),_le=a("strong"),Reo=o("data2vec-audio"),Peo=o(" \u2014 "),kP=a("a"),Beo=o("Data2VecAudioConfig"),Ieo=o(" (Data2VecAudio model)"),Neo=l(),Am=a("li"),ule=a("strong"),qeo=o("data2vec-text"),jeo=o(" \u2014 "),SP=a("a"),Deo=o("Data2VecTextConfig"),Geo=o(" (Data2VecText model)"),Oeo=l(),Lm=a("li"),ble=a("strong"),Veo=o("data2vec-vision"),Xeo=o(" \u2014 "),RP=a("a"),zeo=o("Data2VecVisionConfig"),Weo=o(" (Data2VecVision model)"),Qeo=l(),ym=a("li"),vle=a("strong"),Ueo=o("deberta"),Heo=o(" \u2014 "),PP=a("a"),Jeo=o("DebertaConfig"),Yeo=o(" (DeBERTa model)"),Keo=l(),xm=a("li"),Fle=a("strong"),Zeo=o("deberta-v2"),eoo=o(" \u2014 "),BP=a("a"),ooo=o("DebertaV2Config"),roo=o(" (DeBERTa-v2 model)"),too=l(),$m=a("li"),Tle=a("strong"),aoo=o("decision_transformer"),noo=o(" \u2014 "),IP=a("a"),soo=o("DecisionTransformerConfig"),loo=o(" (Decision Transformer model)"),ioo=l(),km=a("li"),Mle=a("strong"),doo=o("deit"),coo=o(" \u2014 "),NP=a("a"),foo=o("DeiTConfig"),moo=o(" (DeiT model)"),goo=l(),Sm=a("li"),Ele=a("strong"),hoo=o("detr"),poo=o(" \u2014 "),qP=a("a"),_oo=o("DetrConfig"),uoo=o(" (DETR model)"),boo=l(),Rm=a("li"),Cle=a("strong"),voo=o("distilbert"),Foo=o(" \u2014 "),jP=a("a"),Too=o("DistilBertConfig"),Moo=o(" (DistilBERT model)"),Eoo=l(),Pm=a("li"),wle=a("strong"),Coo=o("donut-swin"),woo=o(" \u2014 "),DP=a("a"),Aoo=o("DonutSwinConfig"),Loo=o(" (DonutSwin model)"),yoo=l(),Bm=a("li"),Ale=a("strong"),xoo=o("dpr"),$oo=o(" \u2014 "),GP=a("a"),koo=o("DPRConfig"),Soo=o(" (DPR model)"),Roo=l(),Im=a("li"),Lle=a("strong"),Poo=o("dpt"),Boo=o(" \u2014 "),OP=a("a"),Ioo=o("DPTConfig"),Noo=o(" (DPT model)"),qoo=l(),Nm=a("li"),yle=a("strong"),joo=o("electra"),Doo=o(" \u2014 "),VP=a("a"),Goo=o("ElectraConfig"),Ooo=o(" (ELECTRA model)"),Voo=l(),qm=a("li"),xle=a("strong"),Xoo=o("encoder-decoder"),zoo=o(" \u2014 "),XP=a("a"),Woo=o("EncoderDecoderConfig"),Qoo=o(" (Encoder decoder model)"),Uoo=l(),jm=a("li"),$le=a("strong"),Hoo=o("flaubert"),Joo=o(" \u2014 "),zP=a("a"),Yoo=o("FlaubertConfig"),Koo=o(" (FlauBERT model)"),Zoo=l(),Dm=a("li"),kle=a("strong"),ero=o("flava"),oro=o(" \u2014 "),WP=a("a"),rro=o("FlavaConfig"),tro=o(" (FLAVA model)"),aro=l(),Gm=a("li"),Sle=a("strong"),nro=o("fnet"),sro=o(" \u2014 "),QP=a("a"),lro=o("FNetConfig"),iro=o(" (FNet model)"),dro=l(),Om=a("li"),Rle=a("strong"),cro=o("fsmt"),fro=o(" \u2014 "),UP=a("a"),mro=o("FSMTConfig"),gro=o(" (FairSeq Machine-Translation model)"),hro=l(),Vm=a("li"),Ple=a("strong"),pro=o("funnel"),_ro=o(" \u2014 "),HP=a("a"),uro=o("FunnelConfig"),bro=o(" (Funnel Transformer model)"),vro=l(),Xm=a("li"),Ble=a("strong"),Fro=o("glpn"),Tro=o(" \u2014 "),JP=a("a"),Mro=o("GLPNConfig"),Ero=o(" (GLPN model)"),Cro=l(),zm=a("li"),Ile=a("strong"),wro=o("gpt2"),Aro=o(" \u2014 "),YP=a("a"),Lro=o("GPT2Config"),yro=o(" (OpenAI GPT-2 model)"),xro=l(),Wm=a("li"),Nle=a("strong"),$ro=o("gpt_neo"),kro=o(" \u2014 "),KP=a("a"),Sro=o("GPTNeoConfig"),Rro=o(" (GPT Neo model)"),Pro=l(),Qm=a("li"),qle=a("strong"),Bro=o("gpt_neox"),Iro=o(" \u2014 "),ZP=a("a"),Nro=o("GPTNeoXConfig"),qro=o(" (GPT NeoX model)"),jro=l(),Um=a("li"),jle=a("strong"),Dro=o("gptj"),Gro=o(" \u2014 "),eB=a("a"),Oro=o("GPTJConfig"),Vro=o(" (GPT-J model)"),Xro=l(),Hm=a("li"),Dle=a("strong"),zro=o("groupvit"),Wro=o(" \u2014 "),oB=a("a"),Qro=o("GroupViTConfig"),Uro=o(" (GroupViT model)"),Hro=l(),Jm=a("li"),Gle=a("strong"),Jro=o("hubert"),Yro=o(" \u2014 "),rB=a("a"),Kro=o("HubertConfig"),Zro=o(" (Hubert model)"),eto=l(),Ym=a("li"),Ole=a("strong"),oto=o("ibert"),rto=o(" \u2014 "),tB=a("a"),tto=o("IBertConfig"),ato=o(" (I-BERT model)"),nto=l(),Km=a("li"),Vle=a("strong"),sto=o("imagegpt"),lto=o(" \u2014 "),aB=a("a"),ito=o("ImageGPTConfig"),dto=o(" (ImageGPT model)"),cto=l(),Zm=a("li"),Xle=a("strong"),fto=o("layoutlm"),mto=o(" \u2014 "),nB=a("a"),gto=o("LayoutLMConfig"),hto=o(" (LayoutLM model)"),pto=l(),eg=a("li"),zle=a("strong"),_to=o("layoutlmv2"),uto=o(" \u2014 "),sB=a("a"),bto=o("LayoutLMv2Config"),vto=o(" (LayoutLMv2 model)"),Fto=l(),og=a("li"),Wle=a("strong"),Tto=o("layoutlmv3"),Mto=o(" \u2014 "),lB=a("a"),Eto=o("LayoutLMv3Config"),Cto=o(" (LayoutLMv3 model)"),wto=l(),rg=a("li"),Qle=a("strong"),Ato=o("led"),Lto=o(" \u2014 "),iB=a("a"),yto=o("LEDConfig"),xto=o(" (LED model)"),$to=l(),tg=a("li"),Ule=a("strong"),kto=o("levit"),Sto=o(" \u2014 "),dB=a("a"),Rto=o("LevitConfig"),Pto=o(" (LeViT model)"),Bto=l(),ag=a("li"),Hle=a("strong"),Ito=o("longformer"),Nto=o(" \u2014 "),cB=a("a"),qto=o("LongformerConfig"),jto=o(" (Longformer model)"),Dto=l(),ng=a("li"),Jle=a("strong"),Gto=o("longt5"),Oto=o(" \u2014 "),fB=a("a"),Vto=o("LongT5Config"),Xto=o(" (LongT5 model)"),zto=l(),sg=a("li"),Yle=a("strong"),Wto=o("luke"),Qto=o(" \u2014 "),mB=a("a"),Uto=o("LukeConfig"),Hto=o(" (LUKE model)"),Jto=l(),lg=a("li"),Kle=a("strong"),Yto=o("lxmert"),Kto=o(" \u2014 "),gB=a("a"),Zto=o("LxmertConfig"),eao=o(" (LXMERT model)"),oao=l(),ig=a("li"),Zle=a("strong"),rao=o("m2m_100"),tao=o(" \u2014 "),hB=a("a"),aao=o("M2M100Config"),nao=o(" (M2M100 model)"),sao=l(),dg=a("li"),eie=a("strong"),lao=o("marian"),iao=o(" \u2014 "),pB=a("a"),dao=o("MarianConfig"),cao=o(" (Marian model)"),fao=l(),cg=a("li"),oie=a("strong"),mao=o("maskformer"),gao=o(" \u2014 "),_B=a("a"),hao=o("MaskFormerConfig"),pao=o(" (MaskFormer model)"),_ao=l(),fg=a("li"),rie=a("strong"),uao=o("mbart"),bao=o(" \u2014 "),uB=a("a"),vao=o("MBartConfig"),Fao=o(" (mBART model)"),Tao=l(),mg=a("li"),tie=a("strong"),Mao=o("mctct"),Eao=o(" \u2014 "),bB=a("a"),Cao=o("MCTCTConfig"),wao=o(" (M-CTC-T model)"),Aao=l(),gg=a("li"),aie=a("strong"),Lao=o("megatron-bert"),yao=o(" \u2014 "),vB=a("a"),xao=o("MegatronBertConfig"),$ao=o(" (Megatron-BERT model)"),kao=l(),hg=a("li"),nie=a("strong"),Sao=o("mobilebert"),Rao=o(" \u2014 "),FB=a("a"),Pao=o("MobileBertConfig"),Bao=o(" (MobileBERT model)"),Iao=l(),pg=a("li"),sie=a("strong"),Nao=o("mobilevit"),qao=o(" \u2014 "),TB=a("a"),jao=o("MobileViTConfig"),Dao=o(" (MobileViT model)"),Gao=l(),_g=a("li"),lie=a("strong"),Oao=o("mpnet"),Vao=o(" \u2014 "),MB=a("a"),Xao=o("MPNetConfig"),zao=o(" (MPNet model)"),Wao=l(),ug=a("li"),iie=a("strong"),Qao=o("mt5"),Uao=o(" \u2014 "),EB=a("a"),Hao=o("MT5Config"),Jao=o(" (MT5 model)"),Yao=l(),bg=a("li"),die=a("strong"),Kao=o("mvp"),Zao=o(" \u2014 "),CB=a("a"),eno=o("MvpConfig"),ono=o(" (MVP model)"),rno=l(),vg=a("li"),cie=a("strong"),tno=o("nezha"),ano=o(" \u2014 "),wB=a("a"),nno=o("NezhaConfig"),sno=o(" (Nezha model)"),lno=l(),Fg=a("li"),fie=a("strong"),ino=o("nystromformer"),dno=o(" \u2014 "),AB=a("a"),cno=o("NystromformerConfig"),fno=o(" (Nystr\xF6mformer model)"),mno=l(),Tg=a("li"),mie=a("strong"),gno=o("openai-gpt"),hno=o(" \u2014 "),LB=a("a"),pno=o("OpenAIGPTConfig"),_no=o(" (OpenAI GPT model)"),uno=l(),Mg=a("li"),gie=a("strong"),bno=o("opt"),vno=o(" \u2014 "),yB=a("a"),Fno=o("OPTConfig"),Tno=o(" (OPT model)"),Mno=l(),Eg=a("li"),hie=a("strong"),Eno=o("owlvit"),Cno=o(" \u2014 "),xB=a("a"),wno=o("OwlViTConfig"),Ano=o(" (OWL-ViT model)"),Lno=l(),Cg=a("li"),pie=a("strong"),yno=o("pegasus"),xno=o(" \u2014 "),$B=a("a"),$no=o("PegasusConfig"),kno=o(" (Pegasus model)"),Sno=l(),wg=a("li"),_ie=a("strong"),Rno=o("perceiver"),Pno=o(" \u2014 "),kB=a("a"),Bno=o("PerceiverConfig"),Ino=o(" (Perceiver model)"),Nno=l(),Ag=a("li"),uie=a("strong"),qno=o("plbart"),jno=o(" \u2014 "),SB=a("a"),Dno=o("PLBartConfig"),Gno=o(" (PLBart model)"),Ono=l(),Lg=a("li"),bie=a("strong"),Vno=o("poolformer"),Xno=o(" \u2014 "),RB=a("a"),zno=o("PoolFormerConfig"),Wno=o(" (PoolFormer model)"),Qno=l(),yg=a("li"),vie=a("strong"),Uno=o("prophetnet"),Hno=o(" \u2014 "),PB=a("a"),Jno=o("ProphetNetConfig"),Yno=o(" (ProphetNet model)"),Kno=l(),xg=a("li"),Fie=a("strong"),Zno=o("qdqbert"),eso=o(" \u2014 "),BB=a("a"),oso=o("QDQBertConfig"),rso=o(" (QDQBert model)"),tso=l(),$g=a("li"),Tie=a("strong"),aso=o("rag"),nso=o(" \u2014 "),IB=a("a"),sso=o("RagConfig"),lso=o(" (RAG model)"),iso=l(),kg=a("li"),Mie=a("strong"),dso=o("realm"),cso=o(" \u2014 "),NB=a("a"),fso=o("RealmConfig"),mso=o(" (REALM model)"),gso=l(),Sg=a("li"),Eie=a("strong"),hso=o("reformer"),pso=o(" \u2014 "),qB=a("a"),_so=o("ReformerConfig"),uso=o(" (Reformer model)"),bso=l(),Rg=a("li"),Cie=a("strong"),vso=o("regnet"),Fso=o(" \u2014 "),jB=a("a"),Tso=o("RegNetConfig"),Mso=o(" (RegNet model)"),Eso=l(),Pg=a("li"),wie=a("strong"),Cso=o("rembert"),wso=o(" \u2014 "),DB=a("a"),Aso=o("RemBertConfig"),Lso=o(" (RemBERT model)"),yso=l(),Bg=a("li"),Aie=a("strong"),xso=o("resnet"),$so=o(" \u2014 "),GB=a("a"),kso=o("ResNetConfig"),Sso=o(" (ResNet model)"),Rso=l(),Ig=a("li"),Lie=a("strong"),Pso=o("retribert"),Bso=o(" \u2014 "),OB=a("a"),Iso=o("RetriBertConfig"),Nso=o(" (RetriBERT model)"),qso=l(),Ng=a("li"),yie=a("strong"),jso=o("roberta"),Dso=o(" \u2014 "),VB=a("a"),Gso=o("RobertaConfig"),Oso=o(" (RoBERTa model)"),Vso=l(),qg=a("li"),xie=a("strong"),Xso=o("roformer"),zso=o(" \u2014 "),XB=a("a"),Wso=o("RoFormerConfig"),Qso=o(" (RoFormer model)"),Uso=l(),jg=a("li"),$ie=a("strong"),Hso=o("segformer"),Jso=o(" \u2014 "),zB=a("a"),Yso=o("SegformerConfig"),Kso=o(" (SegFormer model)"),Zso=l(),Dg=a("li"),kie=a("strong"),elo=o("sew"),olo=o(" \u2014 "),WB=a("a"),rlo=o("SEWConfig"),tlo=o(" (SEW model)"),alo=l(),Gg=a("li"),Sie=a("strong"),nlo=o("sew-d"),slo=o(" \u2014 "),QB=a("a"),llo=o("SEWDConfig"),ilo=o(" (SEW-D model)"),dlo=l(),Og=a("li"),Rie=a("strong"),clo=o("speech-encoder-decoder"),flo=o(" \u2014 "),UB=a("a"),mlo=o("SpeechEncoderDecoderConfig"),glo=o(" (Speech Encoder decoder model)"),hlo=l(),Vg=a("li"),Pie=a("strong"),plo=o("speech_to_text"),_lo=o(" \u2014 "),HB=a("a"),ulo=o("Speech2TextConfig"),blo=o(" (Speech2Text model)"),vlo=l(),Xg=a("li"),Bie=a("strong"),Flo=o("speech_to_text_2"),Tlo=o(" \u2014 "),JB=a("a"),Mlo=o("Speech2Text2Config"),Elo=o(" (Speech2Text2 model)"),Clo=l(),zg=a("li"),Iie=a("strong"),wlo=o("splinter"),Alo=o(" \u2014 "),YB=a("a"),Llo=o("SplinterConfig"),ylo=o(" (Splinter model)"),xlo=l(),Wg=a("li"),Nie=a("strong"),$lo=o("squeezebert"),klo=o(" \u2014 "),KB=a("a"),Slo=o("SqueezeBertConfig"),Rlo=o(" (SqueezeBERT model)"),Plo=l(),Qg=a("li"),qie=a("strong"),Blo=o("swin"),Ilo=o(" \u2014 "),ZB=a("a"),Nlo=o("SwinConfig"),qlo=o(" (Swin Transformer model)"),jlo=l(),Ug=a("li"),jie=a("strong"),Dlo=o("swinv2"),Glo=o(" \u2014 "),eI=a("a"),Olo=o("Swinv2Config"),Vlo=o(" (Swin Transformer V2 model)"),Xlo=l(),Hg=a("li"),Die=a("strong"),zlo=o("t5"),Wlo=o(" \u2014 "),oI=a("a"),Qlo=o("T5Config"),Ulo=o(" (T5 model)"),Hlo=l(),Jg=a("li"),Gie=a("strong"),Jlo=o("tapas"),Ylo=o(" \u2014 "),rI=a("a"),Klo=o("TapasConfig"),Zlo=o(" (TAPAS model)"),eio=l(),Yg=a("li"),Oie=a("strong"),oio=o("trajectory_transformer"),rio=o(" \u2014 "),tI=a("a"),tio=o("TrajectoryTransformerConfig"),aio=o(" (Trajectory Transformer model)"),nio=l(),Kg=a("li"),Vie=a("strong"),sio=o("transfo-xl"),lio=o(" \u2014 "),aI=a("a"),iio=o("TransfoXLConfig"),dio=o(" (Transformer-XL model)"),cio=l(),Zg=a("li"),Xie=a("strong"),fio=o("trocr"),mio=o(" \u2014 "),nI=a("a"),gio=o("TrOCRConfig"),hio=o(" (TrOCR model)"),pio=l(),eh=a("li"),zie=a("strong"),_io=o("unispeech"),uio=o(" \u2014 "),sI=a("a"),bio=o("UniSpeechConfig"),vio=o(" (UniSpeech model)"),Fio=l(),oh=a("li"),Wie=a("strong"),Tio=o("unispeech-sat"),Mio=o(" \u2014 "),lI=a("a"),Eio=o("UniSpeechSatConfig"),Cio=o(" (UniSpeechSat model)"),wio=l(),rh=a("li"),Qie=a("strong"),Aio=o("van"),Lio=o(" \u2014 "),iI=a("a"),yio=o("VanConfig"),xio=o(" (VAN model)"),$io=l(),th=a("li"),Uie=a("strong"),kio=o("videomae"),Sio=o(" \u2014 "),dI=a("a"),Rio=o("VideoMAEConfig"),Pio=o(" (VideoMAE model)"),Bio=l(),ah=a("li"),Hie=a("strong"),Iio=o("vilt"),Nio=o(" \u2014 "),cI=a("a"),qio=o("ViltConfig"),jio=o(" (ViLT model)"),Dio=l(),nh=a("li"),Jie=a("strong"),Gio=o("vision-encoder-decoder"),Oio=o(" \u2014 "),fI=a("a"),Vio=o("VisionEncoderDecoderConfig"),Xio=o(" (Vision Encoder decoder model)"),zio=l(),sh=a("li"),Yie=a("strong"),Wio=o("vision-text-dual-encoder"),Qio=o(" \u2014 "),mI=a("a"),Uio=o("VisionTextDualEncoderConfig"),Hio=o(" (VisionTextDualEncoder model)"),Jio=l(),lh=a("li"),Kie=a("strong"),Yio=o("visual_bert"),Kio=o(" \u2014 "),gI=a("a"),Zio=o("VisualBertConfig"),edo=o(" (VisualBERT model)"),odo=l(),ih=a("li"),Zie=a("strong"),rdo=o("vit"),tdo=o(" \u2014 "),hI=a("a"),ado=o("ViTConfig"),ndo=o(" (ViT model)"),sdo=l(),dh=a("li"),ede=a("strong"),ldo=o("vit_mae"),ido=o(" \u2014 "),pI=a("a"),ddo=o("ViTMAEConfig"),cdo=o(" (ViTMAE model)"),fdo=l(),ch=a("li"),ode=a("strong"),mdo=o("wav2vec2"),gdo=o(" \u2014 "),_I=a("a"),hdo=o("Wav2Vec2Config"),pdo=o(" (Wav2Vec2 model)"),_do=l(),fh=a("li"),rde=a("strong"),udo=o("wav2vec2-conformer"),bdo=o(" \u2014 "),uI=a("a"),vdo=o("Wav2Vec2ConformerConfig"),Fdo=o(" (Wav2Vec2-Conformer model)"),Tdo=l(),mh=a("li"),tde=a("strong"),Mdo=o("wavlm"),Edo=o(" \u2014 "),bI=a("a"),Cdo=o("WavLMConfig"),wdo=o(" (WavLM model)"),Ado=l(),gh=a("li"),ade=a("strong"),Ldo=o("xglm"),ydo=o(" \u2014 "),vI=a("a"),xdo=o("XGLMConfig"),$do=o(" (XGLM model)"),kdo=l(),hh=a("li"),nde=a("strong"),Sdo=o("xlm"),Rdo=o(" \u2014 "),FI=a("a"),Pdo=o("XLMConfig"),Bdo=o(" (XLM model)"),Ido=l(),ph=a("li"),sde=a("strong"),Ndo=o("xlm-prophetnet"),qdo=o(" \u2014 "),TI=a("a"),jdo=o("XLMProphetNetConfig"),Ddo=o(" (XLM-ProphetNet model)"),Gdo=l(),_h=a("li"),lde=a("strong"),Odo=o("xlm-roberta"),Vdo=o(" \u2014 "),MI=a("a"),Xdo=o("XLMRobertaConfig"),zdo=o(" (XLM-RoBERTa model)"),Wdo=l(),uh=a("li"),ide=a("strong"),Qdo=o("xlm-roberta-xl"),Udo=o(" \u2014 "),EI=a("a"),Hdo=o("XLMRobertaXLConfig"),Jdo=o(" (XLM-RoBERTa-XL model)"),Ydo=l(),bh=a("li"),dde=a("strong"),Kdo=o("xlnet"),Zdo=o(" \u2014 "),CI=a("a"),eco=o("XLNetConfig"),oco=o(" (XLNet model)"),rco=l(),vh=a("li"),cde=a("strong"),tco=o("yolos"),aco=o(" \u2014 "),wI=a("a"),nco=o("YolosConfig"),sco=o(" (YOLOS model)"),lco=l(),Fh=a("li"),fde=a("strong"),ico=o("yoso"),dco=o(" \u2014 "),AI=a("a"),cco=o("YosoConfig"),fco=o(" (YOSO model)"),mco=l(),F(Th.$$.fragment),gco=l(),Mh=a("div"),F(Ey.$$.fragment),hco=l(),mde=a("p"),pco=o("Register a new configuration for this class."),nUe=l(),Ki=a("h2"),Eh=a("a"),gde=a("span"),F(Cy.$$.fragment),_co=l(),hde=a("span"),uco=o("AutoTokenizer"),sUe=l(),xo=a("div"),F(wy.$$.fragment),bco=l(),Ay=a("p"),vco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LI=a("a"),Fco=o("AutoTokenizer.from_pretrained()"),Tco=o(" class method."),Mco=l(),Ly=a("p"),Eco=o("This class cannot be instantiated directly using "),pde=a("code"),Cco=o("__init__()"),wco=o(" (throws an error)."),Aco=l(),Sr=a("div"),F(yy.$$.fragment),Lco=l(),_de=a("p"),yco=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xco=l(),Ga=a("p"),$co=o("The tokenizer class to instantiate is selected based on the "),ude=a("code"),kco=o("model_type"),Sco=o(` property of the config object (either
passed as an argument or loaded from `),bde=a("code"),Rco=o("pretrained_model_name_or_path"),Pco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=a("code"),Bco=o("pretrained_model_name_or_path"),Ico=o(":"),Nco=l(),k=a("ul"),Hn=a("li"),Fde=a("strong"),qco=o("albert"),jco=o(" \u2014 "),yI=a("a"),Dco=o("AlbertTokenizer"),Gco=o(" or "),xI=a("a"),Oco=o("AlbertTokenizerFast"),Vco=o(" (ALBERT model)"),Xco=l(),Jn=a("li"),Tde=a("strong"),zco=o("bart"),Wco=o(" \u2014 "),$I=a("a"),Qco=o("BartTokenizer"),Uco=o(" or "),kI=a("a"),Hco=o("BartTokenizerFast"),Jco=o(" (BART model)"),Yco=l(),Yn=a("li"),Mde=a("strong"),Kco=o("barthez"),Zco=o(" \u2014 "),SI=a("a"),efo=o("BarthezTokenizer"),ofo=o(" or "),RI=a("a"),rfo=o("BarthezTokenizerFast"),tfo=o(" (BARThez model)"),afo=l(),Ch=a("li"),Ede=a("strong"),nfo=o("bartpho"),sfo=o(" \u2014 "),PI=a("a"),lfo=o("BartphoTokenizer"),ifo=o(" (BARTpho model)"),dfo=l(),Kn=a("li"),Cde=a("strong"),cfo=o("bert"),ffo=o(" \u2014 "),BI=a("a"),mfo=o("BertTokenizer"),gfo=o(" or "),II=a("a"),hfo=o("BertTokenizerFast"),pfo=o(" (BERT model)"),_fo=l(),wh=a("li"),wde=a("strong"),ufo=o("bert-generation"),bfo=o(" \u2014 "),NI=a("a"),vfo=o("BertGenerationTokenizer"),Ffo=o(" (Bert Generation model)"),Tfo=l(),Ah=a("li"),Ade=a("strong"),Mfo=o("bert-japanese"),Efo=o(" \u2014 "),qI=a("a"),Cfo=o("BertJapaneseTokenizer"),wfo=o(" (BertJapanese model)"),Afo=l(),Lh=a("li"),Lde=a("strong"),Lfo=o("bertweet"),yfo=o(" \u2014 "),jI=a("a"),xfo=o("BertweetTokenizer"),$fo=o(" (BERTweet model)"),kfo=l(),Zn=a("li"),yde=a("strong"),Sfo=o("big_bird"),Rfo=o(" \u2014 "),DI=a("a"),Pfo=o("BigBirdTokenizer"),Bfo=o(" or "),GI=a("a"),Ifo=o("BigBirdTokenizerFast"),Nfo=o(" (BigBird model)"),qfo=l(),es=a("li"),xde=a("strong"),jfo=o("bigbird_pegasus"),Dfo=o(" \u2014 "),OI=a("a"),Gfo=o("PegasusTokenizer"),Ofo=o(" or "),VI=a("a"),Vfo=o("PegasusTokenizerFast"),Xfo=o(" (BigBird-Pegasus model)"),zfo=l(),os=a("li"),$de=a("strong"),Wfo=o("blenderbot"),Qfo=o(" \u2014 "),XI=a("a"),Ufo=o("BlenderbotTokenizer"),Hfo=o(" or "),zI=a("a"),Jfo=o("BlenderbotTokenizerFast"),Yfo=o(" (Blenderbot model)"),Kfo=l(),yh=a("li"),kde=a("strong"),Zfo=o("blenderbot-small"),emo=o(" \u2014 "),WI=a("a"),omo=o("BlenderbotSmallTokenizer"),rmo=o(" (BlenderbotSmall model)"),tmo=l(),xh=a("li"),Sde=a("strong"),amo=o("bloom"),nmo=o(" \u2014 "),QI=a("a"),smo=o("BloomTokenizerFast"),lmo=o(" (BLOOM model)"),imo=l(),$h=a("li"),Rde=a("strong"),dmo=o("byt5"),cmo=o(" \u2014 "),UI=a("a"),fmo=o("ByT5Tokenizer"),mmo=o(" (ByT5 model)"),gmo=l(),rs=a("li"),Pde=a("strong"),hmo=o("camembert"),pmo=o(" \u2014 "),HI=a("a"),_mo=o("CamembertTokenizer"),umo=o(" or "),JI=a("a"),bmo=o("CamembertTokenizerFast"),vmo=o(" (CamemBERT model)"),Fmo=l(),kh=a("li"),Bde=a("strong"),Tmo=o("canine"),Mmo=o(" \u2014 "),YI=a("a"),Emo=o("CanineTokenizer"),Cmo=o(" (CANINE model)"),wmo=l(),ts=a("li"),Ide=a("strong"),Amo=o("clip"),Lmo=o(" \u2014 "),KI=a("a"),ymo=o("CLIPTokenizer"),xmo=o(" or "),ZI=a("a"),$mo=o("CLIPTokenizerFast"),kmo=o(" (CLIP model)"),Smo=l(),as=a("li"),Nde=a("strong"),Rmo=o("codegen"),Pmo=o(" \u2014 "),eN=a("a"),Bmo=o("CodeGenTokenizer"),Imo=o(" or "),oN=a("a"),Nmo=o("CodeGenTokenizerFast"),qmo=o(" (CodeGen model)"),jmo=l(),ns=a("li"),qde=a("strong"),Dmo=o("convbert"),Gmo=o(" \u2014 "),rN=a("a"),Omo=o("ConvBertTokenizer"),Vmo=o(" or "),tN=a("a"),Xmo=o("ConvBertTokenizerFast"),zmo=o(" (ConvBERT model)"),Wmo=l(),ss=a("li"),jde=a("strong"),Qmo=o("cpm"),Umo=o(" \u2014 "),aN=a("a"),Hmo=o("CpmTokenizer"),Jmo=o(" or "),nN=a("a"),Ymo=o("CpmTokenizerFast"),Kmo=o(" (CPM model)"),Zmo=l(),Sh=a("li"),Dde=a("strong"),ego=o("ctrl"),ogo=o(" \u2014 "),sN=a("a"),rgo=o("CTRLTokenizer"),tgo=o(" (CTRL model)"),ago=l(),ls=a("li"),Gde=a("strong"),ngo=o("data2vec-text"),sgo=o(" \u2014 "),lN=a("a"),lgo=o("RobertaTokenizer"),igo=o(" or "),iN=a("a"),dgo=o("RobertaTokenizerFast"),cgo=o(" (Data2VecText model)"),fgo=l(),is=a("li"),Ode=a("strong"),mgo=o("deberta"),ggo=o(" \u2014 "),dN=a("a"),hgo=o("DebertaTokenizer"),pgo=o(" or "),cN=a("a"),_go=o("DebertaTokenizerFast"),ugo=o(" (DeBERTa model)"),bgo=l(),ds=a("li"),Vde=a("strong"),vgo=o("deberta-v2"),Fgo=o(" \u2014 "),fN=a("a"),Tgo=o("DebertaV2Tokenizer"),Mgo=o(" or "),mN=a("a"),Ego=o("DebertaV2TokenizerFast"),Cgo=o(" (DeBERTa-v2 model)"),wgo=l(),cs=a("li"),Xde=a("strong"),Ago=o("distilbert"),Lgo=o(" \u2014 "),gN=a("a"),ygo=o("DistilBertTokenizer"),xgo=o(" or "),hN=a("a"),$go=o("DistilBertTokenizerFast"),kgo=o(" (DistilBERT model)"),Sgo=l(),fs=a("li"),zde=a("strong"),Rgo=o("dpr"),Pgo=o(" \u2014 "),pN=a("a"),Bgo=o("DPRQuestionEncoderTokenizer"),Igo=o(" or "),_N=a("a"),Ngo=o("DPRQuestionEncoderTokenizerFast"),qgo=o(" (DPR model)"),jgo=l(),ms=a("li"),Wde=a("strong"),Dgo=o("electra"),Ggo=o(" \u2014 "),uN=a("a"),Ogo=o("ElectraTokenizer"),Vgo=o(" or "),bN=a("a"),Xgo=o("ElectraTokenizerFast"),zgo=o(" (ELECTRA model)"),Wgo=l(),Rh=a("li"),Qde=a("strong"),Qgo=o("flaubert"),Ugo=o(" \u2014 "),vN=a("a"),Hgo=o("FlaubertTokenizer"),Jgo=o(" (FlauBERT model)"),Ygo=l(),gs=a("li"),Ude=a("strong"),Kgo=o("fnet"),Zgo=o(" \u2014 "),FN=a("a"),eho=o("FNetTokenizer"),oho=o(" or "),TN=a("a"),rho=o("FNetTokenizerFast"),tho=o(" (FNet model)"),aho=l(),Ph=a("li"),Hde=a("strong"),nho=o("fsmt"),sho=o(" \u2014 "),MN=a("a"),lho=o("FSMTTokenizer"),iho=o(" (FairSeq Machine-Translation model)"),dho=l(),hs=a("li"),Jde=a("strong"),cho=o("funnel"),fho=o(" \u2014 "),EN=a("a"),mho=o("FunnelTokenizer"),gho=o(" or "),CN=a("a"),hho=o("FunnelTokenizerFast"),pho=o(" (Funnel Transformer model)"),_ho=l(),ps=a("li"),Yde=a("strong"),uho=o("gpt2"),bho=o(" \u2014 "),wN=a("a"),vho=o("GPT2Tokenizer"),Fho=o(" or "),AN=a("a"),Tho=o("GPT2TokenizerFast"),Mho=o(" (OpenAI GPT-2 model)"),Eho=l(),_s=a("li"),Kde=a("strong"),Cho=o("gpt_neo"),who=o(" \u2014 "),LN=a("a"),Aho=o("GPT2Tokenizer"),Lho=o(" or "),yN=a("a"),yho=o("GPT2TokenizerFast"),xho=o(" (GPT Neo model)"),$ho=l(),Bh=a("li"),Zde=a("strong"),kho=o("gpt_neox"),Sho=o(" \u2014 "),xN=a("a"),Rho=o("GPTNeoXTokenizerFast"),Pho=o(" (GPT NeoX model)"),Bho=l(),us=a("li"),ece=a("strong"),Iho=o("gptj"),Nho=o(" \u2014 "),$N=a("a"),qho=o("GPT2Tokenizer"),jho=o(" or "),kN=a("a"),Dho=o("GPT2TokenizerFast"),Gho=o(" (GPT-J model)"),Oho=l(),bs=a("li"),oce=a("strong"),Vho=o("groupvit"),Xho=o(" \u2014 "),SN=a("a"),zho=o("CLIPTokenizer"),Who=o(" or "),RN=a("a"),Qho=o("CLIPTokenizerFast"),Uho=o(" (GroupViT model)"),Hho=l(),vs=a("li"),rce=a("strong"),Jho=o("herbert"),Yho=o(" \u2014 "),PN=a("a"),Kho=o("HerbertTokenizer"),Zho=o(" or "),BN=a("a"),epo=o("HerbertTokenizerFast"),opo=o(" (HerBERT model)"),rpo=l(),Ih=a("li"),tce=a("strong"),tpo=o("hubert"),apo=o(" \u2014 "),IN=a("a"),npo=o("Wav2Vec2CTCTokenizer"),spo=o(" (Hubert model)"),lpo=l(),Fs=a("li"),ace=a("strong"),ipo=o("ibert"),dpo=o(" \u2014 "),NN=a("a"),cpo=o("RobertaTokenizer"),fpo=o(" or "),qN=a("a"),mpo=o("RobertaTokenizerFast"),gpo=o(" (I-BERT model)"),hpo=l(),Ts=a("li"),nce=a("strong"),ppo=o("layoutlm"),_po=o(" \u2014 "),jN=a("a"),upo=o("LayoutLMTokenizer"),bpo=o(" or "),DN=a("a"),vpo=o("LayoutLMTokenizerFast"),Fpo=o(" (LayoutLM model)"),Tpo=l(),Ms=a("li"),sce=a("strong"),Mpo=o("layoutlmv2"),Epo=o(" \u2014 "),GN=a("a"),Cpo=o("LayoutLMv2Tokenizer"),wpo=o(" or "),ON=a("a"),Apo=o("LayoutLMv2TokenizerFast"),Lpo=o(" (LayoutLMv2 model)"),ypo=l(),Es=a("li"),lce=a("strong"),xpo=o("layoutlmv3"),$po=o(" \u2014 "),VN=a("a"),kpo=o("LayoutLMv3Tokenizer"),Spo=o(" or "),XN=a("a"),Rpo=o("LayoutLMv3TokenizerFast"),Ppo=o(" (LayoutLMv3 model)"),Bpo=l(),Cs=a("li"),ice=a("strong"),Ipo=o("layoutxlm"),Npo=o(" \u2014 "),zN=a("a"),qpo=o("LayoutXLMTokenizer"),jpo=o(" or "),WN=a("a"),Dpo=o("LayoutXLMTokenizerFast"),Gpo=o(" (LayoutXLM model)"),Opo=l(),ws=a("li"),dce=a("strong"),Vpo=o("led"),Xpo=o(" \u2014 "),QN=a("a"),zpo=o("LEDTokenizer"),Wpo=o(" or "),UN=a("a"),Qpo=o("LEDTokenizerFast"),Upo=o(" (LED model)"),Hpo=l(),As=a("li"),cce=a("strong"),Jpo=o("longformer"),Ypo=o(" \u2014 "),HN=a("a"),Kpo=o("LongformerTokenizer"),Zpo=o(" or "),JN=a("a"),e_o=o("LongformerTokenizerFast"),o_o=o(" (Longformer model)"),r_o=l(),Ls=a("li"),fce=a("strong"),t_o=o("longt5"),a_o=o(" \u2014 "),YN=a("a"),n_o=o("T5Tokenizer"),s_o=o(" or "),KN=a("a"),l_o=o("T5TokenizerFast"),i_o=o(" (LongT5 model)"),d_o=l(),Nh=a("li"),mce=a("strong"),c_o=o("luke"),f_o=o(" \u2014 "),ZN=a("a"),m_o=o("LukeTokenizer"),g_o=o(" (LUKE model)"),h_o=l(),ys=a("li"),gce=a("strong"),p_o=o("lxmert"),__o=o(" \u2014 "),eq=a("a"),u_o=o("LxmertTokenizer"),b_o=o(" or "),oq=a("a"),v_o=o("LxmertTokenizerFast"),F_o=o(" (LXMERT model)"),T_o=l(),qh=a("li"),hce=a("strong"),M_o=o("m2m_100"),E_o=o(" \u2014 "),rq=a("a"),C_o=o("M2M100Tokenizer"),w_o=o(" (M2M100 model)"),A_o=l(),jh=a("li"),pce=a("strong"),L_o=o("marian"),y_o=o(" \u2014 "),tq=a("a"),x_o=o("MarianTokenizer"),$_o=o(" (Marian model)"),k_o=l(),xs=a("li"),_ce=a("strong"),S_o=o("mbart"),R_o=o(" \u2014 "),aq=a("a"),P_o=o("MBartTokenizer"),B_o=o(" or "),nq=a("a"),I_o=o("MBartTokenizerFast"),N_o=o(" (mBART model)"),q_o=l(),$s=a("li"),uce=a("strong"),j_o=o("mbart50"),D_o=o(" \u2014 "),sq=a("a"),G_o=o("MBart50Tokenizer"),O_o=o(" or "),lq=a("a"),V_o=o("MBart50TokenizerFast"),X_o=o(" (mBART-50 model)"),z_o=l(),ks=a("li"),bce=a("strong"),W_o=o("megatron-bert"),Q_o=o(" \u2014 "),iq=a("a"),U_o=o("BertTokenizer"),H_o=o(" or "),dq=a("a"),J_o=o("BertTokenizerFast"),Y_o=o(" (Megatron-BERT model)"),K_o=l(),Dh=a("li"),vce=a("strong"),Z_o=o("mluke"),euo=o(" \u2014 "),cq=a("a"),ouo=o("MLukeTokenizer"),ruo=o(" (mLUKE model)"),tuo=l(),Ss=a("li"),Fce=a("strong"),auo=o("mobilebert"),nuo=o(" \u2014 "),fq=a("a"),suo=o("MobileBertTokenizer"),luo=o(" or "),mq=a("a"),iuo=o("MobileBertTokenizerFast"),duo=o(" (MobileBERT model)"),cuo=l(),Rs=a("li"),Tce=a("strong"),fuo=o("mpnet"),muo=o(" \u2014 "),gq=a("a"),guo=o("MPNetTokenizer"),huo=o(" or "),hq=a("a"),puo=o("MPNetTokenizerFast"),_uo=o(" (MPNet model)"),uuo=l(),Ps=a("li"),Mce=a("strong"),buo=o("mt5"),vuo=o(" \u2014 "),pq=a("a"),Fuo=o("MT5Tokenizer"),Tuo=o(" or "),_q=a("a"),Muo=o("MT5TokenizerFast"),Euo=o(" (MT5 model)"),Cuo=l(),Bs=a("li"),Ece=a("strong"),wuo=o("mvp"),Auo=o(" \u2014 "),uq=a("a"),Luo=o("MvpTokenizer"),yuo=o(" or "),bq=a("a"),xuo=o("MvpTokenizerFast"),$uo=o(" (MVP model)"),kuo=l(),Is=a("li"),Cce=a("strong"),Suo=o("nezha"),Ruo=o(" \u2014 "),vq=a("a"),Puo=o("BertTokenizer"),Buo=o(" or "),Fq=a("a"),Iuo=o("BertTokenizerFast"),Nuo=o(" (Nezha model)"),quo=l(),Ns=a("li"),wce=a("strong"),juo=o("nllb"),Duo=o(" \u2014 "),Tq=a("a"),Guo=o("NllbTokenizer"),Ouo=o(" or "),Mq=a("a"),Vuo=o("NllbTokenizerFast"),Xuo=o(" (NLLB model)"),zuo=l(),qs=a("li"),Ace=a("strong"),Wuo=o("nystromformer"),Quo=o(" \u2014 "),Eq=a("a"),Uuo=o("AlbertTokenizer"),Huo=o(" or "),Cq=a("a"),Juo=o("AlbertTokenizerFast"),Yuo=o(" (Nystr\xF6mformer model)"),Kuo=l(),js=a("li"),Lce=a("strong"),Zuo=o("openai-gpt"),e2o=o(" \u2014 "),wq=a("a"),o2o=o("OpenAIGPTTokenizer"),r2o=o(" or "),Aq=a("a"),t2o=o("OpenAIGPTTokenizerFast"),a2o=o(" (OpenAI GPT model)"),n2o=l(),Gh=a("li"),yce=a("strong"),s2o=o("opt"),l2o=o(" \u2014 "),Lq=a("a"),i2o=o("GPT2Tokenizer"),d2o=o(" (OPT model)"),c2o=l(),Ds=a("li"),xce=a("strong"),f2o=o("owlvit"),m2o=o(" \u2014 "),yq=a("a"),g2o=o("CLIPTokenizer"),h2o=o(" or "),xq=a("a"),p2o=o("CLIPTokenizerFast"),_2o=o(" (OWL-ViT model)"),u2o=l(),Gs=a("li"),$ce=a("strong"),b2o=o("pegasus"),v2o=o(" \u2014 "),$q=a("a"),F2o=o("PegasusTokenizer"),T2o=o(" or "),kq=a("a"),M2o=o("PegasusTokenizerFast"),E2o=o(" (Pegasus model)"),C2o=l(),Oh=a("li"),kce=a("strong"),w2o=o("perceiver"),A2o=o(" \u2014 "),Sq=a("a"),L2o=o("PerceiverTokenizer"),y2o=o(" (Perceiver model)"),x2o=l(),Vh=a("li"),Sce=a("strong"),$2o=o("phobert"),k2o=o(" \u2014 "),Rq=a("a"),S2o=o("PhobertTokenizer"),R2o=o(" (PhoBERT model)"),P2o=l(),Xh=a("li"),Rce=a("strong"),B2o=o("plbart"),I2o=o(" \u2014 "),Pq=a("a"),N2o=o("PLBartTokenizer"),q2o=o(" (PLBart model)"),j2o=l(),zh=a("li"),Pce=a("strong"),D2o=o("prophetnet"),G2o=o(" \u2014 "),Bq=a("a"),O2o=o("ProphetNetTokenizer"),V2o=o(" (ProphetNet model)"),X2o=l(),Os=a("li"),Bce=a("strong"),z2o=o("qdqbert"),W2o=o(" \u2014 "),Iq=a("a"),Q2o=o("BertTokenizer"),U2o=o(" or "),Nq=a("a"),H2o=o("BertTokenizerFast"),J2o=o(" (QDQBert model)"),Y2o=l(),Wh=a("li"),Ice=a("strong"),K2o=o("rag"),Z2o=o(" \u2014 "),qq=a("a"),e0o=o("RagTokenizer"),o0o=o(" (RAG model)"),r0o=l(),Vs=a("li"),Nce=a("strong"),t0o=o("realm"),a0o=o(" \u2014 "),jq=a("a"),n0o=o("RealmTokenizer"),s0o=o(" or "),Dq=a("a"),l0o=o("RealmTokenizerFast"),i0o=o(" (REALM model)"),d0o=l(),Xs=a("li"),qce=a("strong"),c0o=o("reformer"),f0o=o(" \u2014 "),Gq=a("a"),m0o=o("ReformerTokenizer"),g0o=o(" or "),Oq=a("a"),h0o=o("ReformerTokenizerFast"),p0o=o(" (Reformer model)"),_0o=l(),zs=a("li"),jce=a("strong"),u0o=o("rembert"),b0o=o(" \u2014 "),Vq=a("a"),v0o=o("RemBertTokenizer"),F0o=o(" or "),Xq=a("a"),T0o=o("RemBertTokenizerFast"),M0o=o(" (RemBERT model)"),E0o=l(),Ws=a("li"),Dce=a("strong"),C0o=o("retribert"),w0o=o(" \u2014 "),zq=a("a"),A0o=o("RetriBertTokenizer"),L0o=o(" or "),Wq=a("a"),y0o=o("RetriBertTokenizerFast"),x0o=o(" (RetriBERT model)"),$0o=l(),Qs=a("li"),Gce=a("strong"),k0o=o("roberta"),S0o=o(" \u2014 "),Qq=a("a"),R0o=o("RobertaTokenizer"),P0o=o(" or "),Uq=a("a"),B0o=o("RobertaTokenizerFast"),I0o=o(" (RoBERTa model)"),N0o=l(),Us=a("li"),Oce=a("strong"),q0o=o("roformer"),j0o=o(" \u2014 "),Hq=a("a"),D0o=o("RoFormerTokenizer"),G0o=o(" or "),Jq=a("a"),O0o=o("RoFormerTokenizerFast"),V0o=o(" (RoFormer model)"),X0o=l(),Qh=a("li"),Vce=a("strong"),z0o=o("speech_to_text"),W0o=o(" \u2014 "),Yq=a("a"),Q0o=o("Speech2TextTokenizer"),U0o=o(" (Speech2Text model)"),H0o=l(),Uh=a("li"),Xce=a("strong"),J0o=o("speech_to_text_2"),Y0o=o(" \u2014 "),Kq=a("a"),K0o=o("Speech2Text2Tokenizer"),Z0o=o(" (Speech2Text2 model)"),e1o=l(),Hs=a("li"),zce=a("strong"),o1o=o("splinter"),r1o=o(" \u2014 "),Zq=a("a"),t1o=o("SplinterTokenizer"),a1o=o(" or "),ej=a("a"),n1o=o("SplinterTokenizerFast"),s1o=o(" (Splinter model)"),l1o=l(),Js=a("li"),Wce=a("strong"),i1o=o("squeezebert"),d1o=o(" \u2014 "),oj=a("a"),c1o=o("SqueezeBertTokenizer"),f1o=o(" or "),rj=a("a"),m1o=o("SqueezeBertTokenizerFast"),g1o=o(" (SqueezeBERT model)"),h1o=l(),Ys=a("li"),Qce=a("strong"),p1o=o("t5"),_1o=o(" \u2014 "),tj=a("a"),u1o=o("T5Tokenizer"),b1o=o(" or "),aj=a("a"),v1o=o("T5TokenizerFast"),F1o=o(" (T5 model)"),T1o=l(),Hh=a("li"),Uce=a("strong"),M1o=o("tapas"),E1o=o(" \u2014 "),nj=a("a"),C1o=o("TapasTokenizer"),w1o=o(" (TAPAS model)"),A1o=l(),Jh=a("li"),Hce=a("strong"),L1o=o("tapex"),y1o=o(" \u2014 "),sj=a("a"),x1o=o("TapexTokenizer"),$1o=o(" (TAPEX model)"),k1o=l(),Yh=a("li"),Jce=a("strong"),S1o=o("transfo-xl"),R1o=o(" \u2014 "),lj=a("a"),P1o=o("TransfoXLTokenizer"),B1o=o(" (Transformer-XL model)"),I1o=l(),Ks=a("li"),Yce=a("strong"),N1o=o("vilt"),q1o=o(" \u2014 "),ij=a("a"),j1o=o("BertTokenizer"),D1o=o(" or "),dj=a("a"),G1o=o("BertTokenizerFast"),O1o=o(" (ViLT model)"),V1o=l(),Zs=a("li"),Kce=a("strong"),X1o=o("visual_bert"),z1o=o(" \u2014 "),cj=a("a"),W1o=o("BertTokenizer"),Q1o=o(" or "),fj=a("a"),U1o=o("BertTokenizerFast"),H1o=o(" (VisualBERT model)"),J1o=l(),Kh=a("li"),Zce=a("strong"),Y1o=o("wav2vec2"),K1o=o(" \u2014 "),mj=a("a"),Z1o=o("Wav2Vec2CTCTokenizer"),ebo=o(" (Wav2Vec2 model)"),obo=l(),Zh=a("li"),efe=a("strong"),rbo=o("wav2vec2-conformer"),tbo=o(" \u2014 "),gj=a("a"),abo=o("Wav2Vec2CTCTokenizer"),nbo=o(" (Wav2Vec2-Conformer model)"),sbo=l(),ep=a("li"),ofe=a("strong"),lbo=o("wav2vec2_phoneme"),ibo=o(" \u2014 "),hj=a("a"),dbo=o("Wav2Vec2PhonemeCTCTokenizer"),cbo=o(" (Wav2Vec2Phoneme model)"),fbo=l(),el=a("li"),rfe=a("strong"),mbo=o("xglm"),gbo=o(" \u2014 "),pj=a("a"),hbo=o("XGLMTokenizer"),pbo=o(" or "),_j=a("a"),_bo=o("XGLMTokenizerFast"),ubo=o(" (XGLM model)"),bbo=l(),op=a("li"),tfe=a("strong"),vbo=o("xlm"),Fbo=o(" \u2014 "),uj=a("a"),Tbo=o("XLMTokenizer"),Mbo=o(" (XLM model)"),Ebo=l(),rp=a("li"),afe=a("strong"),Cbo=o("xlm-prophetnet"),wbo=o(" \u2014 "),bj=a("a"),Abo=o("XLMProphetNetTokenizer"),Lbo=o(" (XLM-ProphetNet model)"),ybo=l(),ol=a("li"),nfe=a("strong"),xbo=o("xlm-roberta"),$bo=o(" \u2014 "),vj=a("a"),kbo=o("XLMRobertaTokenizer"),Sbo=o(" or "),Fj=a("a"),Rbo=o("XLMRobertaTokenizerFast"),Pbo=o(" (XLM-RoBERTa model)"),Bbo=l(),rl=a("li"),sfe=a("strong"),Ibo=o("xlm-roberta-xl"),Nbo=o(" \u2014 "),Tj=a("a"),qbo=o("RobertaTokenizer"),jbo=o(" or "),Mj=a("a"),Dbo=o("RobertaTokenizerFast"),Gbo=o(" (XLM-RoBERTa-XL model)"),Obo=l(),tl=a("li"),lfe=a("strong"),Vbo=o("xlnet"),Xbo=o(" \u2014 "),Ej=a("a"),zbo=o("XLNetTokenizer"),Wbo=o(" or "),Cj=a("a"),Qbo=o("XLNetTokenizerFast"),Ubo=o(" (XLNet model)"),Hbo=l(),al=a("li"),ife=a("strong"),Jbo=o("yoso"),Ybo=o(" \u2014 "),wj=a("a"),Kbo=o("AlbertTokenizer"),Zbo=o(" or "),Aj=a("a"),evo=o("AlbertTokenizerFast"),ovo=o(" (YOSO model)"),rvo=l(),F(tp.$$.fragment),tvo=l(),ap=a("div"),F(xy.$$.fragment),avo=l(),dfe=a("p"),nvo=o("Register a new tokenizer in this mapping."),lUe=l(),Zi=a("h2"),np=a("a"),cfe=a("span"),F($y.$$.fragment),svo=l(),ffe=a("span"),lvo=o("AutoFeatureExtractor"),iUe=l(),$o=a("div"),F(ky.$$.fragment),ivo=l(),Sy=a("p"),dvo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Lj=a("a"),cvo=o("AutoFeatureExtractor.from_pretrained()"),fvo=o(" class method."),mvo=l(),Ry=a("p"),gvo=o("This class cannot be instantiated directly using "),mfe=a("code"),hvo=o("__init__()"),pvo=o(" (throws an error)."),_vo=l(),He=a("div"),F(Py.$$.fragment),uvo=l(),gfe=a("p"),bvo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vvo=l(),Oa=a("p"),Fvo=o("The feature extractor class to instantiate is selected based on the "),hfe=a("code"),Tvo=o("model_type"),Mvo=o(` property of the config object
(either passed as an argument or loaded from `),pfe=a("code"),Evo=o("pretrained_model_name_or_path"),Cvo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),_fe=a("code"),wvo=o("pretrained_model_name_or_path"),Avo=o(":"),Lvo=l(),Q=a("ul"),sp=a("li"),ufe=a("strong"),yvo=o("beit"),xvo=o(" \u2014 "),yj=a("a"),$vo=o("BeitFeatureExtractor"),kvo=o(" (BEiT model)"),Svo=l(),lp=a("li"),bfe=a("strong"),Rvo=o("clip"),Pvo=o(" \u2014 "),xj=a("a"),Bvo=o("CLIPFeatureExtractor"),Ivo=o(" (CLIP model)"),Nvo=l(),ip=a("li"),vfe=a("strong"),qvo=o("convnext"),jvo=o(" \u2014 "),$j=a("a"),Dvo=o("ConvNextFeatureExtractor"),Gvo=o(" (ConvNeXT model)"),Ovo=l(),dp=a("li"),Ffe=a("strong"),Vvo=o("cvt"),Xvo=o(" \u2014 "),kj=a("a"),zvo=o("ConvNextFeatureExtractor"),Wvo=o(" (CvT model)"),Qvo=l(),cp=a("li"),Tfe=a("strong"),Uvo=o("data2vec-audio"),Hvo=o(" \u2014 "),Sj=a("a"),Jvo=o("Wav2Vec2FeatureExtractor"),Yvo=o(" (Data2VecAudio model)"),Kvo=l(),fp=a("li"),Mfe=a("strong"),Zvo=o("data2vec-vision"),eFo=o(" \u2014 "),Rj=a("a"),oFo=o("BeitFeatureExtractor"),rFo=o(" (Data2VecVision model)"),tFo=l(),mp=a("li"),Efe=a("strong"),aFo=o("deit"),nFo=o(" \u2014 "),Pj=a("a"),sFo=o("DeiTFeatureExtractor"),lFo=o(" (DeiT model)"),iFo=l(),gp=a("li"),Cfe=a("strong"),dFo=o("detr"),cFo=o(" \u2014 "),Bj=a("a"),fFo=o("DetrFeatureExtractor"),mFo=o(" (DETR model)"),gFo=l(),hp=a("li"),wfe=a("strong"),hFo=o("donut"),pFo=o(" \u2014 "),Ij=a("a"),_Fo=o("DonutFeatureExtractor"),uFo=o(" (Donut model)"),bFo=l(),pp=a("li"),Afe=a("strong"),vFo=o("dpt"),FFo=o(" \u2014 "),Nj=a("a"),TFo=o("DPTFeatureExtractor"),MFo=o(" (DPT model)"),EFo=l(),_p=a("li"),Lfe=a("strong"),CFo=o("flava"),wFo=o(" \u2014 "),qj=a("a"),AFo=o("FlavaFeatureExtractor"),LFo=o(" (FLAVA model)"),yFo=l(),up=a("li"),yfe=a("strong"),xFo=o("glpn"),$Fo=o(" \u2014 "),jj=a("a"),kFo=o("GLPNFeatureExtractor"),SFo=o(" (GLPN model)"),RFo=l(),bp=a("li"),xfe=a("strong"),PFo=o("groupvit"),BFo=o(" \u2014 "),Dj=a("a"),IFo=o("CLIPFeatureExtractor"),NFo=o(" (GroupViT model)"),qFo=l(),vp=a("li"),$fe=a("strong"),jFo=o("hubert"),DFo=o(" \u2014 "),Gj=a("a"),GFo=o("Wav2Vec2FeatureExtractor"),OFo=o(" (Hubert model)"),VFo=l(),Fp=a("li"),kfe=a("strong"),XFo=o("imagegpt"),zFo=o(" \u2014 "),Oj=a("a"),WFo=o("ImageGPTFeatureExtractor"),QFo=o(" (ImageGPT model)"),UFo=l(),Tp=a("li"),Sfe=a("strong"),HFo=o("layoutlmv2"),JFo=o(" \u2014 "),Vj=a("a"),YFo=o("LayoutLMv2FeatureExtractor"),KFo=o(" (LayoutLMv2 model)"),ZFo=l(),Mp=a("li"),Rfe=a("strong"),eTo=o("layoutlmv3"),oTo=o(" \u2014 "),Xj=a("a"),rTo=o("LayoutLMv3FeatureExtractor"),tTo=o(" (LayoutLMv3 model)"),aTo=l(),Ep=a("li"),Pfe=a("strong"),nTo=o("levit"),sTo=o(" \u2014 "),zj=a("a"),lTo=o("LevitFeatureExtractor"),iTo=o(" (LeViT model)"),dTo=l(),Cp=a("li"),Bfe=a("strong"),cTo=o("maskformer"),fTo=o(" \u2014 "),Wj=a("a"),mTo=o("MaskFormerFeatureExtractor"),gTo=o(" (MaskFormer model)"),hTo=l(),wp=a("li"),Ife=a("strong"),pTo=o("mctct"),_To=o(" \u2014 "),Qj=a("a"),uTo=o("MCTCTFeatureExtractor"),bTo=o(" (M-CTC-T model)"),vTo=l(),Ap=a("li"),Nfe=a("strong"),FTo=o("mobilevit"),TTo=o(" \u2014 "),Uj=a("a"),MTo=o("MobileViTFeatureExtractor"),ETo=o(" (MobileViT model)"),CTo=l(),Lp=a("li"),qfe=a("strong"),wTo=o("owlvit"),ATo=o(" \u2014 "),Hj=a("a"),LTo=o("OwlViTFeatureExtractor"),yTo=o(" (OWL-ViT model)"),xTo=l(),yp=a("li"),jfe=a("strong"),$To=o("perceiver"),kTo=o(" \u2014 "),Jj=a("a"),STo=o("PerceiverFeatureExtractor"),RTo=o(" (Perceiver model)"),PTo=l(),xp=a("li"),Dfe=a("strong"),BTo=o("poolformer"),ITo=o(" \u2014 "),Yj=a("a"),NTo=o("PoolFormerFeatureExtractor"),qTo=o(" (PoolFormer model)"),jTo=l(),$p=a("li"),Gfe=a("strong"),DTo=o("regnet"),GTo=o(" \u2014 "),Kj=a("a"),OTo=o("ConvNextFeatureExtractor"),VTo=o(" (RegNet model)"),XTo=l(),kp=a("li"),Ofe=a("strong"),zTo=o("resnet"),WTo=o(" \u2014 "),Zj=a("a"),QTo=o("ConvNextFeatureExtractor"),UTo=o(" (ResNet model)"),HTo=l(),Sp=a("li"),Vfe=a("strong"),JTo=o("segformer"),YTo=o(" \u2014 "),eD=a("a"),KTo=o("SegformerFeatureExtractor"),ZTo=o(" (SegFormer model)"),e8o=l(),Rp=a("li"),Xfe=a("strong"),o8o=o("speech_to_text"),r8o=o(" \u2014 "),oD=a("a"),t8o=o("Speech2TextFeatureExtractor"),a8o=o(" (Speech2Text model)"),n8o=l(),Pp=a("li"),zfe=a("strong"),s8o=o("swin"),l8o=o(" \u2014 "),rD=a("a"),i8o=o("ViTFeatureExtractor"),d8o=o(" (Swin Transformer model)"),c8o=l(),Bp=a("li"),Wfe=a("strong"),f8o=o("swinv2"),m8o=o(" \u2014 "),tD=a("a"),g8o=o("ViTFeatureExtractor"),h8o=o(" (Swin Transformer V2 model)"),p8o=l(),Ip=a("li"),Qfe=a("strong"),_8o=o("van"),u8o=o(" \u2014 "),aD=a("a"),b8o=o("ConvNextFeatureExtractor"),v8o=o(" (VAN model)"),F8o=l(),Np=a("li"),Ufe=a("strong"),T8o=o("videomae"),M8o=o(" \u2014 "),nD=a("a"),E8o=o("ViTFeatureExtractor"),C8o=o(" (VideoMAE model)"),w8o=l(),qp=a("li"),Hfe=a("strong"),A8o=o("vilt"),L8o=o(" \u2014 "),sD=a("a"),y8o=o("ViltFeatureExtractor"),x8o=o(" (ViLT model)"),$8o=l(),jp=a("li"),Jfe=a("strong"),k8o=o("vit"),S8o=o(" \u2014 "),lD=a("a"),R8o=o("ViTFeatureExtractor"),P8o=o(" (ViT model)"),B8o=l(),Dp=a("li"),Yfe=a("strong"),I8o=o("vit_mae"),N8o=o(" \u2014 "),iD=a("a"),q8o=o("ViTFeatureExtractor"),j8o=o(" (ViTMAE model)"),D8o=l(),Gp=a("li"),Kfe=a("strong"),G8o=o("wav2vec2"),O8o=o(" \u2014 "),dD=a("a"),V8o=o("Wav2Vec2FeatureExtractor"),X8o=o(" (Wav2Vec2 model)"),z8o=l(),Op=a("li"),Zfe=a("strong"),W8o=o("wav2vec2-conformer"),Q8o=o(" \u2014 "),cD=a("a"),U8o=o("Wav2Vec2FeatureExtractor"),H8o=o(" (Wav2Vec2-Conformer model)"),J8o=l(),Vp=a("li"),eme=a("strong"),Y8o=o("yolos"),K8o=o(" \u2014 "),fD=a("a"),Z8o=o("YolosFeatureExtractor"),eMo=o(" (YOLOS model)"),oMo=l(),F(Xp.$$.fragment),rMo=l(),F(zp.$$.fragment),tMo=l(),Wp=a("div"),F(By.$$.fragment),aMo=l(),ome=a("p"),nMo=o("Register a new feature extractor for this class."),dUe=l(),ed=a("h2"),Qp=a("a"),rme=a("span"),F(Iy.$$.fragment),sMo=l(),tme=a("span"),lMo=o("AutoProcessor"),cUe=l(),ko=a("div"),F(Ny.$$.fragment),iMo=l(),qy=a("p"),dMo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mD=a("a"),cMo=o("AutoProcessor.from_pretrained()"),fMo=o(" class method."),mMo=l(),jy=a("p"),gMo=o("This class cannot be instantiated directly using "),ame=a("code"),hMo=o("__init__()"),pMo=o(" (throws an error)."),_Mo=l(),Je=a("div"),F(Dy.$$.fragment),uMo=l(),nme=a("p"),bMo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vMo=l(),od=a("p"),FMo=o("The processor class to instantiate is selected based on the "),sme=a("code"),TMo=o("model_type"),MMo=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),EMo=o("pretrained_model_name_or_path"),CMo=o(" if possible):"),wMo=l(),ie=a("ul"),Up=a("li"),ime=a("strong"),AMo=o("clip"),LMo=o(" \u2014 "),gD=a("a"),yMo=o("CLIPProcessor"),xMo=o(" (CLIP model)"),$Mo=l(),Hp=a("li"),dme=a("strong"),kMo=o("donut"),SMo=o(" \u2014 "),hD=a("a"),RMo=o("DonutProcessor"),PMo=o(" (Donut model)"),BMo=l(),Jp=a("li"),cme=a("strong"),IMo=o("flava"),NMo=o(" \u2014 "),pD=a("a"),qMo=o("FlavaProcessor"),jMo=o(" (FLAVA model)"),DMo=l(),Yp=a("li"),fme=a("strong"),GMo=o("groupvit"),OMo=o(" \u2014 "),_D=a("a"),VMo=o("CLIPProcessor"),XMo=o(" (GroupViT model)"),zMo=l(),Kp=a("li"),mme=a("strong"),WMo=o("layoutlmv2"),QMo=o(" \u2014 "),uD=a("a"),UMo=o("LayoutLMv2Processor"),HMo=o(" (LayoutLMv2 model)"),JMo=l(),Zp=a("li"),gme=a("strong"),YMo=o("layoutlmv3"),KMo=o(" \u2014 "),bD=a("a"),ZMo=o("LayoutLMv3Processor"),eEo=o(" (LayoutLMv3 model)"),oEo=l(),e_=a("li"),hme=a("strong"),rEo=o("layoutxlm"),tEo=o(" \u2014 "),vD=a("a"),aEo=o("LayoutXLMProcessor"),nEo=o(" (LayoutXLM model)"),sEo=l(),o_=a("li"),pme=a("strong"),lEo=o("owlvit"),iEo=o(" \u2014 "),FD=a("a"),dEo=o("OwlViTProcessor"),cEo=o(" (OWL-ViT model)"),fEo=l(),r_=a("li"),_me=a("strong"),mEo=o("sew"),gEo=o(" \u2014 "),TD=a("a"),hEo=o("Wav2Vec2Processor"),pEo=o(" (SEW model)"),_Eo=l(),t_=a("li"),ume=a("strong"),uEo=o("sew-d"),bEo=o(" \u2014 "),MD=a("a"),vEo=o("Wav2Vec2Processor"),FEo=o(" (SEW-D model)"),TEo=l(),a_=a("li"),bme=a("strong"),MEo=o("speech_to_text"),EEo=o(" \u2014 "),ED=a("a"),CEo=o("Speech2TextProcessor"),wEo=o(" (Speech2Text model)"),AEo=l(),n_=a("li"),vme=a("strong"),LEo=o("speech_to_text_2"),yEo=o(" \u2014 "),CD=a("a"),xEo=o("Speech2Text2Processor"),$Eo=o(" (Speech2Text2 model)"),kEo=l(),s_=a("li"),Fme=a("strong"),SEo=o("trocr"),REo=o(" \u2014 "),wD=a("a"),PEo=o("TrOCRProcessor"),BEo=o(" (TrOCR model)"),IEo=l(),l_=a("li"),Tme=a("strong"),NEo=o("unispeech"),qEo=o(" \u2014 "),AD=a("a"),jEo=o("Wav2Vec2Processor"),DEo=o(" (UniSpeech model)"),GEo=l(),i_=a("li"),Mme=a("strong"),OEo=o("unispeech-sat"),VEo=o(" \u2014 "),LD=a("a"),XEo=o("Wav2Vec2Processor"),zEo=o(" (UniSpeechSat model)"),WEo=l(),d_=a("li"),Eme=a("strong"),QEo=o("vilt"),UEo=o(" \u2014 "),yD=a("a"),HEo=o("ViltProcessor"),JEo=o(" (ViLT model)"),YEo=l(),c_=a("li"),Cme=a("strong"),KEo=o("vision-text-dual-encoder"),ZEo=o(" \u2014 "),xD=a("a"),e4o=o("VisionTextDualEncoderProcessor"),o4o=o(" (VisionTextDualEncoder model)"),r4o=l(),f_=a("li"),wme=a("strong"),t4o=o("wav2vec2"),a4o=o(" \u2014 "),$D=a("a"),n4o=o("Wav2Vec2Processor"),s4o=o(" (Wav2Vec2 model)"),l4o=l(),m_=a("li"),Ame=a("strong"),i4o=o("wav2vec2-conformer"),d4o=o(" \u2014 "),kD=a("a"),c4o=o("Wav2Vec2Processor"),f4o=o(" (Wav2Vec2-Conformer model)"),m4o=l(),g_=a("li"),Lme=a("strong"),g4o=o("wavlm"),h4o=o(" \u2014 "),SD=a("a"),p4o=o("Wav2Vec2Processor"),_4o=o(" (WavLM model)"),u4o=l(),F(h_.$$.fragment),b4o=l(),F(p_.$$.fragment),v4o=l(),__=a("div"),F(Gy.$$.fragment),F4o=l(),yme=a("p"),T4o=o("Register a new processor for this class."),fUe=l(),rd=a("h2"),u_=a("a"),xme=a("span"),F(Oy.$$.fragment),M4o=l(),$me=a("span"),E4o=o("AutoModel"),mUe=l(),So=a("div"),F(Vy.$$.fragment),C4o=l(),td=a("p"),w4o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RD=a("a"),A4o=o("from_pretrained()"),L4o=o(" class method or the "),PD=a("a"),y4o=o("from_config()"),x4o=o(` class
method.`),$4o=l(),Xy=a("p"),k4o=o("This class cannot be instantiated directly using "),kme=a("code"),S4o=o("__init__()"),R4o=o(" (throws an error)."),P4o=l(),mt=a("div"),F(zy.$$.fragment),B4o=l(),Sme=a("p"),I4o=o("Instantiates one of the base model classes of the library from a configuration."),N4o=l(),ad=a("p"),q4o=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),j4o=o("not"),D4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=a("a"),G4o=o("from_pretrained()"),O4o=o(" to load the model weights."),V4o=l(),F(b_.$$.fragment),X4o=l(),Ye=a("div"),F(Wy.$$.fragment),z4o=l(),Pme=a("p"),W4o=o("Instantiate one of the base model classes of the library from a pretrained model."),Q4o=l(),Va=a("p"),U4o=o("The model class to instantiate is selected based on the "),Bme=a("code"),H4o=o("model_type"),J4o=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),Y4o=o("pretrained_model_name_or_path"),K4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),Z4o=o("pretrained_model_name_or_path"),eCo=o(":"),oCo=l(),y=a("ul"),v_=a("li"),qme=a("strong"),rCo=o("albert"),tCo=o(" \u2014 "),ID=a("a"),aCo=o("AlbertModel"),nCo=o(" (ALBERT model)"),sCo=l(),F_=a("li"),jme=a("strong"),lCo=o("bart"),iCo=o(" \u2014 "),ND=a("a"),dCo=o("BartModel"),cCo=o(" (BART model)"),fCo=l(),T_=a("li"),Dme=a("strong"),mCo=o("beit"),gCo=o(" \u2014 "),qD=a("a"),hCo=o("BeitModel"),pCo=o(" (BEiT model)"),_Co=l(),M_=a("li"),Gme=a("strong"),uCo=o("bert"),bCo=o(" \u2014 "),jD=a("a"),vCo=o("BertModel"),FCo=o(" (BERT model)"),TCo=l(),E_=a("li"),Ome=a("strong"),MCo=o("bert-generation"),ECo=o(" \u2014 "),DD=a("a"),CCo=o("BertGenerationEncoder"),wCo=o(" (Bert Generation model)"),ACo=l(),C_=a("li"),Vme=a("strong"),LCo=o("big_bird"),yCo=o(" \u2014 "),GD=a("a"),xCo=o("BigBirdModel"),$Co=o(" (BigBird model)"),kCo=l(),w_=a("li"),Xme=a("strong"),SCo=o("bigbird_pegasus"),RCo=o(" \u2014 "),OD=a("a"),PCo=o("BigBirdPegasusModel"),BCo=o(" (BigBird-Pegasus model)"),ICo=l(),A_=a("li"),zme=a("strong"),NCo=o("blenderbot"),qCo=o(" \u2014 "),VD=a("a"),jCo=o("BlenderbotModel"),DCo=o(" (Blenderbot model)"),GCo=l(),L_=a("li"),Wme=a("strong"),OCo=o("blenderbot-small"),VCo=o(" \u2014 "),XD=a("a"),XCo=o("BlenderbotSmallModel"),zCo=o(" (BlenderbotSmall model)"),WCo=l(),y_=a("li"),Qme=a("strong"),QCo=o("bloom"),UCo=o(" \u2014 "),zD=a("a"),HCo=o("BloomModel"),JCo=o(" (BLOOM model)"),YCo=l(),x_=a("li"),Ume=a("strong"),KCo=o("camembert"),ZCo=o(" \u2014 "),WD=a("a"),e3o=o("CamembertModel"),o3o=o(" (CamemBERT model)"),r3o=l(),$_=a("li"),Hme=a("strong"),t3o=o("canine"),a3o=o(" \u2014 "),QD=a("a"),n3o=o("CanineModel"),s3o=o(" (CANINE model)"),l3o=l(),k_=a("li"),Jme=a("strong"),i3o=o("clip"),d3o=o(" \u2014 "),UD=a("a"),c3o=o("CLIPModel"),f3o=o(" (CLIP model)"),m3o=l(),S_=a("li"),Yme=a("strong"),g3o=o("codegen"),h3o=o(" \u2014 "),HD=a("a"),p3o=o("CodeGenModel"),_3o=o(" (CodeGen model)"),u3o=l(),R_=a("li"),Kme=a("strong"),b3o=o("convbert"),v3o=o(" \u2014 "),JD=a("a"),F3o=o("ConvBertModel"),T3o=o(" (ConvBERT model)"),M3o=l(),P_=a("li"),Zme=a("strong"),E3o=o("convnext"),C3o=o(" \u2014 "),YD=a("a"),w3o=o("ConvNextModel"),A3o=o(" (ConvNeXT model)"),L3o=l(),B_=a("li"),ege=a("strong"),y3o=o("ctrl"),x3o=o(" \u2014 "),KD=a("a"),$3o=o("CTRLModel"),k3o=o(" (CTRL model)"),S3o=l(),I_=a("li"),oge=a("strong"),R3o=o("cvt"),P3o=o(" \u2014 "),ZD=a("a"),B3o=o("CvtModel"),I3o=o(" (CvT model)"),N3o=l(),N_=a("li"),rge=a("strong"),q3o=o("data2vec-audio"),j3o=o(" \u2014 "),eG=a("a"),D3o=o("Data2VecAudioModel"),G3o=o(" (Data2VecAudio model)"),O3o=l(),q_=a("li"),tge=a("strong"),V3o=o("data2vec-text"),X3o=o(" \u2014 "),oG=a("a"),z3o=o("Data2VecTextModel"),W3o=o(" (Data2VecText model)"),Q3o=l(),j_=a("li"),age=a("strong"),U3o=o("data2vec-vision"),H3o=o(" \u2014 "),rG=a("a"),J3o=o("Data2VecVisionModel"),Y3o=o(" (Data2VecVision model)"),K3o=l(),D_=a("li"),nge=a("strong"),Z3o=o("deberta"),e5o=o(" \u2014 "),tG=a("a"),o5o=o("DebertaModel"),r5o=o(" (DeBERTa model)"),t5o=l(),G_=a("li"),sge=a("strong"),a5o=o("deberta-v2"),n5o=o(" \u2014 "),aG=a("a"),s5o=o("DebertaV2Model"),l5o=o(" (DeBERTa-v2 model)"),i5o=l(),O_=a("li"),lge=a("strong"),d5o=o("decision_transformer"),c5o=o(" \u2014 "),nG=a("a"),f5o=o("DecisionTransformerModel"),m5o=o(" (Decision Transformer model)"),g5o=l(),V_=a("li"),ige=a("strong"),h5o=o("deit"),p5o=o(" \u2014 "),sG=a("a"),_5o=o("DeiTModel"),u5o=o(" (DeiT model)"),b5o=l(),X_=a("li"),dge=a("strong"),v5o=o("detr"),F5o=o(" \u2014 "),lG=a("a"),T5o=o("DetrModel"),M5o=o(" (DETR model)"),E5o=l(),z_=a("li"),cge=a("strong"),C5o=o("distilbert"),w5o=o(" \u2014 "),iG=a("a"),A5o=o("DistilBertModel"),L5o=o(" (DistilBERT model)"),y5o=l(),W_=a("li"),fge=a("strong"),x5o=o("donut-swin"),$5o=o(" \u2014 "),dG=a("a"),k5o=o("DonutSwinModel"),S5o=o(" (DonutSwin model)"),R5o=l(),Q_=a("li"),mge=a("strong"),P5o=o("dpr"),B5o=o(" \u2014 "),cG=a("a"),I5o=o("DPRQuestionEncoder"),N5o=o(" (DPR model)"),q5o=l(),U_=a("li"),gge=a("strong"),j5o=o("dpt"),D5o=o(" \u2014 "),fG=a("a"),G5o=o("DPTModel"),O5o=o(" (DPT model)"),V5o=l(),H_=a("li"),hge=a("strong"),X5o=o("electra"),z5o=o(" \u2014 "),mG=a("a"),W5o=o("ElectraModel"),Q5o=o(" (ELECTRA model)"),U5o=l(),J_=a("li"),pge=a("strong"),H5o=o("flaubert"),J5o=o(" \u2014 "),gG=a("a"),Y5o=o("FlaubertModel"),K5o=o(" (FlauBERT model)"),Z5o=l(),Y_=a("li"),_ge=a("strong"),ewo=o("flava"),owo=o(" \u2014 "),hG=a("a"),rwo=o("FlavaModel"),two=o(" (FLAVA model)"),awo=l(),K_=a("li"),uge=a("strong"),nwo=o("fnet"),swo=o(" \u2014 "),pG=a("a"),lwo=o("FNetModel"),iwo=o(" (FNet model)"),dwo=l(),Z_=a("li"),bge=a("strong"),cwo=o("fsmt"),fwo=o(" \u2014 "),_G=a("a"),mwo=o("FSMTModel"),gwo=o(" (FairSeq Machine-Translation model)"),hwo=l(),nl=a("li"),vge=a("strong"),pwo=o("funnel"),_wo=o(" \u2014 "),uG=a("a"),uwo=o("FunnelModel"),bwo=o(" or "),bG=a("a"),vwo=o("FunnelBaseModel"),Fwo=o(" (Funnel Transformer model)"),Two=l(),eu=a("li"),Fge=a("strong"),Mwo=o("glpn"),Ewo=o(" \u2014 "),vG=a("a"),Cwo=o("GLPNModel"),wwo=o(" (GLPN model)"),Awo=l(),ou=a("li"),Tge=a("strong"),Lwo=o("gpt2"),ywo=o(" \u2014 "),FG=a("a"),xwo=o("GPT2Model"),$wo=o(" (OpenAI GPT-2 model)"),kwo=l(),ru=a("li"),Mge=a("strong"),Swo=o("gpt_neo"),Rwo=o(" \u2014 "),TG=a("a"),Pwo=o("GPTNeoModel"),Bwo=o(" (GPT Neo model)"),Iwo=l(),tu=a("li"),Ege=a("strong"),Nwo=o("gpt_neox"),qwo=o(" \u2014 "),MG=a("a"),jwo=o("GPTNeoXModel"),Dwo=o(" (GPT NeoX model)"),Gwo=l(),au=a("li"),Cge=a("strong"),Owo=o("gptj"),Vwo=o(" \u2014 "),EG=a("a"),Xwo=o("GPTJModel"),zwo=o(" (GPT-J model)"),Wwo=l(),nu=a("li"),wge=a("strong"),Qwo=o("groupvit"),Uwo=o(" \u2014 "),CG=a("a"),Hwo=o("GroupViTModel"),Jwo=o(" (GroupViT model)"),Ywo=l(),su=a("li"),Age=a("strong"),Kwo=o("hubert"),Zwo=o(" \u2014 "),wG=a("a"),e6o=o("HubertModel"),o6o=o(" (Hubert model)"),r6o=l(),lu=a("li"),Lge=a("strong"),t6o=o("ibert"),a6o=o(" \u2014 "),AG=a("a"),n6o=o("IBertModel"),s6o=o(" (I-BERT model)"),l6o=l(),iu=a("li"),yge=a("strong"),i6o=o("imagegpt"),d6o=o(" \u2014 "),LG=a("a"),c6o=o("ImageGPTModel"),f6o=o(" (ImageGPT model)"),m6o=l(),du=a("li"),xge=a("strong"),g6o=o("layoutlm"),h6o=o(" \u2014 "),yG=a("a"),p6o=o("LayoutLMModel"),_6o=o(" (LayoutLM model)"),u6o=l(),cu=a("li"),$ge=a("strong"),b6o=o("layoutlmv2"),v6o=o(" \u2014 "),xG=a("a"),F6o=o("LayoutLMv2Model"),T6o=o(" (LayoutLMv2 model)"),M6o=l(),fu=a("li"),kge=a("strong"),E6o=o("layoutlmv3"),C6o=o(" \u2014 "),$G=a("a"),w6o=o("LayoutLMv3Model"),A6o=o(" (LayoutLMv3 model)"),L6o=l(),mu=a("li"),Sge=a("strong"),y6o=o("led"),x6o=o(" \u2014 "),kG=a("a"),$6o=o("LEDModel"),k6o=o(" (LED model)"),S6o=l(),gu=a("li"),Rge=a("strong"),R6o=o("levit"),P6o=o(" \u2014 "),SG=a("a"),B6o=o("LevitModel"),I6o=o(" (LeViT model)"),N6o=l(),hu=a("li"),Pge=a("strong"),q6o=o("longformer"),j6o=o(" \u2014 "),RG=a("a"),D6o=o("LongformerModel"),G6o=o(" (Longformer model)"),O6o=l(),pu=a("li"),Bge=a("strong"),V6o=o("longt5"),X6o=o(" \u2014 "),PG=a("a"),z6o=o("LongT5Model"),W6o=o(" (LongT5 model)"),Q6o=l(),_u=a("li"),Ige=a("strong"),U6o=o("luke"),H6o=o(" \u2014 "),BG=a("a"),J6o=o("LukeModel"),Y6o=o(" (LUKE model)"),K6o=l(),uu=a("li"),Nge=a("strong"),Z6o=o("lxmert"),eAo=o(" \u2014 "),IG=a("a"),oAo=o("LxmertModel"),rAo=o(" (LXMERT model)"),tAo=l(),bu=a("li"),qge=a("strong"),aAo=o("m2m_100"),nAo=o(" \u2014 "),NG=a("a"),sAo=o("M2M100Model"),lAo=o(" (M2M100 model)"),iAo=l(),vu=a("li"),jge=a("strong"),dAo=o("marian"),cAo=o(" \u2014 "),qG=a("a"),fAo=o("MarianModel"),mAo=o(" (Marian model)"),gAo=l(),Fu=a("li"),Dge=a("strong"),hAo=o("maskformer"),pAo=o(" \u2014 "),jG=a("a"),_Ao=o("MaskFormerModel"),uAo=o(" (MaskFormer model)"),bAo=l(),Tu=a("li"),Gge=a("strong"),vAo=o("mbart"),FAo=o(" \u2014 "),DG=a("a"),TAo=o("MBartModel"),MAo=o(" (mBART model)"),EAo=l(),Mu=a("li"),Oge=a("strong"),CAo=o("mctct"),wAo=o(" \u2014 "),GG=a("a"),AAo=o("MCTCTModel"),LAo=o(" (M-CTC-T model)"),yAo=l(),Eu=a("li"),Vge=a("strong"),xAo=o("megatron-bert"),$Ao=o(" \u2014 "),OG=a("a"),kAo=o("MegatronBertModel"),SAo=o(" (Megatron-BERT model)"),RAo=l(),Cu=a("li"),Xge=a("strong"),PAo=o("mobilebert"),BAo=o(" \u2014 "),VG=a("a"),IAo=o("MobileBertModel"),NAo=o(" (MobileBERT model)"),qAo=l(),wu=a("li"),zge=a("strong"),jAo=o("mobilevit"),DAo=o(" \u2014 "),XG=a("a"),GAo=o("MobileViTModel"),OAo=o(" (MobileViT model)"),VAo=l(),Au=a("li"),Wge=a("strong"),XAo=o("mpnet"),zAo=o(" \u2014 "),zG=a("a"),WAo=o("MPNetModel"),QAo=o(" (MPNet model)"),UAo=l(),Lu=a("li"),Qge=a("strong"),HAo=o("mt5"),JAo=o(" \u2014 "),WG=a("a"),YAo=o("MT5Model"),KAo=o(" (MT5 model)"),ZAo=l(),yu=a("li"),Uge=a("strong"),e7o=o("mvp"),o7o=o(" \u2014 "),QG=a("a"),r7o=o("MvpModel"),t7o=o(" (MVP model)"),a7o=l(),xu=a("li"),Hge=a("strong"),n7o=o("nezha"),s7o=o(" \u2014 "),UG=a("a"),l7o=o("NezhaModel"),i7o=o(" (Nezha model)"),d7o=l(),$u=a("li"),Jge=a("strong"),c7o=o("nllb"),f7o=o(" \u2014 "),HG=a("a"),m7o=o("M2M100Model"),g7o=o(" (NLLB model)"),h7o=l(),ku=a("li"),Yge=a("strong"),p7o=o("nystromformer"),_7o=o(" \u2014 "),JG=a("a"),u7o=o("NystromformerModel"),b7o=o(" (Nystr\xF6mformer model)"),v7o=l(),Su=a("li"),Kge=a("strong"),F7o=o("openai-gpt"),T7o=o(" \u2014 "),YG=a("a"),M7o=o("OpenAIGPTModel"),E7o=o(" (OpenAI GPT model)"),C7o=l(),Ru=a("li"),Zge=a("strong"),w7o=o("opt"),A7o=o(" \u2014 "),KG=a("a"),L7o=o("OPTModel"),y7o=o(" (OPT model)"),x7o=l(),Pu=a("li"),ehe=a("strong"),$7o=o("owlvit"),k7o=o(" \u2014 "),ZG=a("a"),S7o=o("OwlViTModel"),R7o=o(" (OWL-ViT model)"),P7o=l(),Bu=a("li"),ohe=a("strong"),B7o=o("pegasus"),I7o=o(" \u2014 "),eO=a("a"),N7o=o("PegasusModel"),q7o=o(" (Pegasus model)"),j7o=l(),Iu=a("li"),rhe=a("strong"),D7o=o("perceiver"),G7o=o(" \u2014 "),oO=a("a"),O7o=o("PerceiverModel"),V7o=o(" (Perceiver model)"),X7o=l(),Nu=a("li"),the=a("strong"),z7o=o("plbart"),W7o=o(" \u2014 "),rO=a("a"),Q7o=o("PLBartModel"),U7o=o(" (PLBart model)"),H7o=l(),qu=a("li"),ahe=a("strong"),J7o=o("poolformer"),Y7o=o(" \u2014 "),tO=a("a"),K7o=o("PoolFormerModel"),Z7o=o(" (PoolFormer model)"),eLo=l(),ju=a("li"),nhe=a("strong"),oLo=o("prophetnet"),rLo=o(" \u2014 "),aO=a("a"),tLo=o("ProphetNetModel"),aLo=o(" (ProphetNet model)"),nLo=l(),Du=a("li"),she=a("strong"),sLo=o("qdqbert"),lLo=o(" \u2014 "),nO=a("a"),iLo=o("QDQBertModel"),dLo=o(" (QDQBert model)"),cLo=l(),Gu=a("li"),lhe=a("strong"),fLo=o("reformer"),mLo=o(" \u2014 "),sO=a("a"),gLo=o("ReformerModel"),hLo=o(" (Reformer model)"),pLo=l(),Ou=a("li"),ihe=a("strong"),_Lo=o("regnet"),uLo=o(" \u2014 "),lO=a("a"),bLo=o("RegNetModel"),vLo=o(" (RegNet model)"),FLo=l(),Vu=a("li"),dhe=a("strong"),TLo=o("rembert"),MLo=o(" \u2014 "),iO=a("a"),ELo=o("RemBertModel"),CLo=o(" (RemBERT model)"),wLo=l(),Xu=a("li"),che=a("strong"),ALo=o("resnet"),LLo=o(" \u2014 "),dO=a("a"),yLo=o("ResNetModel"),xLo=o(" (ResNet model)"),$Lo=l(),zu=a("li"),fhe=a("strong"),kLo=o("retribert"),SLo=o(" \u2014 "),cO=a("a"),RLo=o("RetriBertModel"),PLo=o(" (RetriBERT model)"),BLo=l(),Wu=a("li"),mhe=a("strong"),ILo=o("roberta"),NLo=o(" \u2014 "),fO=a("a"),qLo=o("RobertaModel"),jLo=o(" (RoBERTa model)"),DLo=l(),Qu=a("li"),ghe=a("strong"),GLo=o("roformer"),OLo=o(" \u2014 "),mO=a("a"),VLo=o("RoFormerModel"),XLo=o(" (RoFormer model)"),zLo=l(),Uu=a("li"),hhe=a("strong"),WLo=o("segformer"),QLo=o(" \u2014 "),gO=a("a"),ULo=o("SegformerModel"),HLo=o(" (SegFormer model)"),JLo=l(),Hu=a("li"),phe=a("strong"),YLo=o("sew"),KLo=o(" \u2014 "),hO=a("a"),ZLo=o("SEWModel"),eyo=o(" (SEW model)"),oyo=l(),Ju=a("li"),_he=a("strong"),ryo=o("sew-d"),tyo=o(" \u2014 "),pO=a("a"),ayo=o("SEWDModel"),nyo=o(" (SEW-D model)"),syo=l(),Yu=a("li"),uhe=a("strong"),lyo=o("speech_to_text"),iyo=o(" \u2014 "),_O=a("a"),dyo=o("Speech2TextModel"),cyo=o(" (Speech2Text model)"),fyo=l(),Ku=a("li"),bhe=a("strong"),myo=o("splinter"),gyo=o(" \u2014 "),uO=a("a"),hyo=o("SplinterModel"),pyo=o(" (Splinter model)"),_yo=l(),Zu=a("li"),vhe=a("strong"),uyo=o("squeezebert"),byo=o(" \u2014 "),bO=a("a"),vyo=o("SqueezeBertModel"),Fyo=o(" (SqueezeBERT model)"),Tyo=l(),e2=a("li"),Fhe=a("strong"),Myo=o("swin"),Eyo=o(" \u2014 "),vO=a("a"),Cyo=o("SwinModel"),wyo=o(" (Swin Transformer model)"),Ayo=l(),o2=a("li"),The=a("strong"),Lyo=o("swinv2"),yyo=o(" \u2014 "),FO=a("a"),xyo=o("Swinv2Model"),$yo=o(" (Swin Transformer V2 model)"),kyo=l(),r2=a("li"),Mhe=a("strong"),Syo=o("t5"),Ryo=o(" \u2014 "),TO=a("a"),Pyo=o("T5Model"),Byo=o(" (T5 model)"),Iyo=l(),t2=a("li"),Ehe=a("strong"),Nyo=o("tapas"),qyo=o(" \u2014 "),MO=a("a"),jyo=o("TapasModel"),Dyo=o(" (TAPAS model)"),Gyo=l(),a2=a("li"),Che=a("strong"),Oyo=o("trajectory_transformer"),Vyo=o(" \u2014 "),EO=a("a"),Xyo=o("TrajectoryTransformerModel"),zyo=o(" (Trajectory Transformer model)"),Wyo=l(),n2=a("li"),whe=a("strong"),Qyo=o("transfo-xl"),Uyo=o(" \u2014 "),CO=a("a"),Hyo=o("TransfoXLModel"),Jyo=o(" (Transformer-XL model)"),Yyo=l(),s2=a("li"),Ahe=a("strong"),Kyo=o("unispeech"),Zyo=o(" \u2014 "),wO=a("a"),e9o=o("UniSpeechModel"),o9o=o(" (UniSpeech model)"),r9o=l(),l2=a("li"),Lhe=a("strong"),t9o=o("unispeech-sat"),a9o=o(" \u2014 "),AO=a("a"),n9o=o("UniSpeechSatModel"),s9o=o(" (UniSpeechSat model)"),l9o=l(),i2=a("li"),yhe=a("strong"),i9o=o("van"),d9o=o(" \u2014 "),LO=a("a"),c9o=o("VanModel"),f9o=o(" (VAN model)"),m9o=l(),d2=a("li"),xhe=a("strong"),g9o=o("videomae"),h9o=o(" \u2014 "),yO=a("a"),p9o=o("VideoMAEModel"),_9o=o(" (VideoMAE model)"),u9o=l(),c2=a("li"),$he=a("strong"),b9o=o("vilt"),v9o=o(" \u2014 "),xO=a("a"),F9o=o("ViltModel"),T9o=o(" (ViLT model)"),M9o=l(),f2=a("li"),khe=a("strong"),E9o=o("vision-text-dual-encoder"),C9o=o(" \u2014 "),$O=a("a"),w9o=o("VisionTextDualEncoderModel"),A9o=o(" (VisionTextDualEncoder model)"),L9o=l(),m2=a("li"),She=a("strong"),y9o=o("visual_bert"),x9o=o(" \u2014 "),kO=a("a"),$9o=o("VisualBertModel"),k9o=o(" (VisualBERT model)"),S9o=l(),g2=a("li"),Rhe=a("strong"),R9o=o("vit"),P9o=o(" \u2014 "),SO=a("a"),B9o=o("ViTModel"),I9o=o(" (ViT model)"),N9o=l(),h2=a("li"),Phe=a("strong"),q9o=o("vit_mae"),j9o=o(" \u2014 "),RO=a("a"),D9o=o("ViTMAEModel"),G9o=o(" (ViTMAE model)"),O9o=l(),p2=a("li"),Bhe=a("strong"),V9o=o("wav2vec2"),X9o=o(" \u2014 "),PO=a("a"),z9o=o("Wav2Vec2Model"),W9o=o(" (Wav2Vec2 model)"),Q9o=l(),_2=a("li"),Ihe=a("strong"),U9o=o("wav2vec2-conformer"),H9o=o(" \u2014 "),BO=a("a"),J9o=o("Wav2Vec2ConformerModel"),Y9o=o(" (Wav2Vec2-Conformer model)"),K9o=l(),u2=a("li"),Nhe=a("strong"),Z9o=o("wavlm"),exo=o(" \u2014 "),IO=a("a"),oxo=o("WavLMModel"),rxo=o(" (WavLM model)"),txo=l(),b2=a("li"),qhe=a("strong"),axo=o("xglm"),nxo=o(" \u2014 "),NO=a("a"),sxo=o("XGLMModel"),lxo=o(" (XGLM model)"),ixo=l(),v2=a("li"),jhe=a("strong"),dxo=o("xlm"),cxo=o(" \u2014 "),qO=a("a"),fxo=o("XLMModel"),mxo=o(" (XLM model)"),gxo=l(),F2=a("li"),Dhe=a("strong"),hxo=o("xlm-prophetnet"),pxo=o(" \u2014 "),jO=a("a"),_xo=o("XLMProphetNetModel"),uxo=o(" (XLM-ProphetNet model)"),bxo=l(),T2=a("li"),Ghe=a("strong"),vxo=o("xlm-roberta"),Fxo=o(" \u2014 "),DO=a("a"),Txo=o("XLMRobertaModel"),Mxo=o(" (XLM-RoBERTa model)"),Exo=l(),M2=a("li"),Ohe=a("strong"),Cxo=o("xlm-roberta-xl"),wxo=o(" \u2014 "),GO=a("a"),Axo=o("XLMRobertaXLModel"),Lxo=o(" (XLM-RoBERTa-XL model)"),yxo=l(),E2=a("li"),Vhe=a("strong"),xxo=o("xlnet"),$xo=o(" \u2014 "),OO=a("a"),kxo=o("XLNetModel"),Sxo=o(" (XLNet model)"),Rxo=l(),C2=a("li"),Xhe=a("strong"),Pxo=o("yolos"),Bxo=o(" \u2014 "),VO=a("a"),Ixo=o("YolosModel"),Nxo=o(" (YOLOS model)"),qxo=l(),w2=a("li"),zhe=a("strong"),jxo=o("yoso"),Dxo=o(" \u2014 "),XO=a("a"),Gxo=o("YosoModel"),Oxo=o(" (YOSO model)"),Vxo=l(),A2=a("p"),Xxo=o("The model is set in evaluation mode by default using "),Whe=a("code"),zxo=o("model.eval()"),Wxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=a("code"),Qxo=o("model.train()"),Uxo=l(),F(L2.$$.fragment),gUe=l(),nd=a("h2"),y2=a("a"),Uhe=a("span"),F(Qy.$$.fragment),Hxo=l(),Hhe=a("span"),Jxo=o("AutoModelForPreTraining"),hUe=l(),Ro=a("div"),F(Uy.$$.fragment),Yxo=l(),sd=a("p"),Kxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zO=a("a"),Zxo=o("from_pretrained()"),e$o=o(" class method or the "),WO=a("a"),o$o=o("from_config()"),r$o=o(` class
method.`),t$o=l(),Hy=a("p"),a$o=o("This class cannot be instantiated directly using "),Jhe=a("code"),n$o=o("__init__()"),s$o=o(" (throws an error)."),l$o=l(),gt=a("div"),F(Jy.$$.fragment),i$o=l(),Yhe=a("p"),d$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),c$o=l(),ld=a("p"),f$o=o(`Note:
Loading a model from its configuration file does `),Khe=a("strong"),m$o=o("not"),g$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=a("a"),h$o=o("from_pretrained()"),p$o=o(" to load the model weights."),_$o=l(),F(x2.$$.fragment),u$o=l(),Ke=a("div"),F(Yy.$$.fragment),b$o=l(),Zhe=a("p"),v$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F$o=l(),Xa=a("p"),T$o=o("The model class to instantiate is selected based on the "),epe=a("code"),M$o=o("model_type"),E$o=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),C$o=o("pretrained_model_name_or_path"),w$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),A$o=o("pretrained_model_name_or_path"),L$o=o(":"),y$o=l(),G=a("ul"),$2=a("li"),tpe=a("strong"),x$o=o("albert"),$$o=o(" \u2014 "),UO=a("a"),k$o=o("AlbertForPreTraining"),S$o=o(" (ALBERT model)"),R$o=l(),k2=a("li"),ape=a("strong"),P$o=o("bart"),B$o=o(" \u2014 "),HO=a("a"),I$o=o("BartForConditionalGeneration"),N$o=o(" (BART model)"),q$o=l(),S2=a("li"),npe=a("strong"),j$o=o("bert"),D$o=o(" \u2014 "),JO=a("a"),G$o=o("BertForPreTraining"),O$o=o(" (BERT model)"),V$o=l(),R2=a("li"),spe=a("strong"),X$o=o("big_bird"),z$o=o(" \u2014 "),YO=a("a"),W$o=o("BigBirdForPreTraining"),Q$o=o(" (BigBird model)"),U$o=l(),P2=a("li"),lpe=a("strong"),H$o=o("bloom"),J$o=o(" \u2014 "),KO=a("a"),Y$o=o("BloomForCausalLM"),K$o=o(" (BLOOM model)"),Z$o=l(),B2=a("li"),ipe=a("strong"),eko=o("camembert"),oko=o(" \u2014 "),ZO=a("a"),rko=o("CamembertForMaskedLM"),tko=o(" (CamemBERT model)"),ako=l(),I2=a("li"),dpe=a("strong"),nko=o("ctrl"),sko=o(" \u2014 "),eV=a("a"),lko=o("CTRLLMHeadModel"),iko=o(" (CTRL model)"),dko=l(),N2=a("li"),cpe=a("strong"),cko=o("data2vec-text"),fko=o(" \u2014 "),oV=a("a"),mko=o("Data2VecTextForMaskedLM"),gko=o(" (Data2VecText model)"),hko=l(),q2=a("li"),fpe=a("strong"),pko=o("deberta"),_ko=o(" \u2014 "),rV=a("a"),uko=o("DebertaForMaskedLM"),bko=o(" (DeBERTa model)"),vko=l(),j2=a("li"),mpe=a("strong"),Fko=o("deberta-v2"),Tko=o(" \u2014 "),tV=a("a"),Mko=o("DebertaV2ForMaskedLM"),Eko=o(" (DeBERTa-v2 model)"),Cko=l(),D2=a("li"),gpe=a("strong"),wko=o("distilbert"),Ako=o(" \u2014 "),aV=a("a"),Lko=o("DistilBertForMaskedLM"),yko=o(" (DistilBERT model)"),xko=l(),G2=a("li"),hpe=a("strong"),$ko=o("electra"),kko=o(" \u2014 "),nV=a("a"),Sko=o("ElectraForPreTraining"),Rko=o(" (ELECTRA model)"),Pko=l(),O2=a("li"),ppe=a("strong"),Bko=o("flaubert"),Iko=o(" \u2014 "),sV=a("a"),Nko=o("FlaubertWithLMHeadModel"),qko=o(" (FlauBERT model)"),jko=l(),V2=a("li"),_pe=a("strong"),Dko=o("flava"),Gko=o(" \u2014 "),lV=a("a"),Oko=o("FlavaForPreTraining"),Vko=o(" (FLAVA model)"),Xko=l(),X2=a("li"),upe=a("strong"),zko=o("fnet"),Wko=o(" \u2014 "),iV=a("a"),Qko=o("FNetForPreTraining"),Uko=o(" (FNet model)"),Hko=l(),z2=a("li"),bpe=a("strong"),Jko=o("fsmt"),Yko=o(" \u2014 "),dV=a("a"),Kko=o("FSMTForConditionalGeneration"),Zko=o(" (FairSeq Machine-Translation model)"),eSo=l(),W2=a("li"),vpe=a("strong"),oSo=o("funnel"),rSo=o(" \u2014 "),cV=a("a"),tSo=o("FunnelForPreTraining"),aSo=o(" (Funnel Transformer model)"),nSo=l(),Q2=a("li"),Fpe=a("strong"),sSo=o("gpt2"),lSo=o(" \u2014 "),fV=a("a"),iSo=o("GPT2LMHeadModel"),dSo=o(" (OpenAI GPT-2 model)"),cSo=l(),U2=a("li"),Tpe=a("strong"),fSo=o("ibert"),mSo=o(" \u2014 "),mV=a("a"),gSo=o("IBertForMaskedLM"),hSo=o(" (I-BERT model)"),pSo=l(),H2=a("li"),Mpe=a("strong"),_So=o("layoutlm"),uSo=o(" \u2014 "),gV=a("a"),bSo=o("LayoutLMForMaskedLM"),vSo=o(" (LayoutLM model)"),FSo=l(),J2=a("li"),Epe=a("strong"),TSo=o("longformer"),MSo=o(" \u2014 "),hV=a("a"),ESo=o("LongformerForMaskedLM"),CSo=o(" (Longformer model)"),wSo=l(),Y2=a("li"),Cpe=a("strong"),ASo=o("luke"),LSo=o(" \u2014 "),pV=a("a"),ySo=o("LukeForMaskedLM"),xSo=o(" (LUKE model)"),$So=l(),K2=a("li"),wpe=a("strong"),kSo=o("lxmert"),SSo=o(" \u2014 "),_V=a("a"),RSo=o("LxmertForPreTraining"),PSo=o(" (LXMERT model)"),BSo=l(),Z2=a("li"),Ape=a("strong"),ISo=o("megatron-bert"),NSo=o(" \u2014 "),uV=a("a"),qSo=o("MegatronBertForPreTraining"),jSo=o(" (Megatron-BERT model)"),DSo=l(),e0=a("li"),Lpe=a("strong"),GSo=o("mobilebert"),OSo=o(" \u2014 "),bV=a("a"),VSo=o("MobileBertForPreTraining"),XSo=o(" (MobileBERT model)"),zSo=l(),o0=a("li"),ype=a("strong"),WSo=o("mpnet"),QSo=o(" \u2014 "),vV=a("a"),USo=o("MPNetForMaskedLM"),HSo=o(" (MPNet model)"),JSo=l(),r0=a("li"),xpe=a("strong"),YSo=o("mvp"),KSo=o(" \u2014 "),FV=a("a"),ZSo=o("MvpForConditionalGeneration"),eRo=o(" (MVP model)"),oRo=l(),t0=a("li"),$pe=a("strong"),rRo=o("nezha"),tRo=o(" \u2014 "),TV=a("a"),aRo=o("NezhaForPreTraining"),nRo=o(" (Nezha model)"),sRo=l(),a0=a("li"),kpe=a("strong"),lRo=o("openai-gpt"),iRo=o(" \u2014 "),MV=a("a"),dRo=o("OpenAIGPTLMHeadModel"),cRo=o(" (OpenAI GPT model)"),fRo=l(),n0=a("li"),Spe=a("strong"),mRo=o("retribert"),gRo=o(" \u2014 "),EV=a("a"),hRo=o("RetriBertModel"),pRo=o(" (RetriBERT model)"),_Ro=l(),s0=a("li"),Rpe=a("strong"),uRo=o("roberta"),bRo=o(" \u2014 "),CV=a("a"),vRo=o("RobertaForMaskedLM"),FRo=o(" (RoBERTa model)"),TRo=l(),l0=a("li"),Ppe=a("strong"),MRo=o("splinter"),ERo=o(" \u2014 "),wV=a("a"),CRo=o("SplinterForPreTraining"),wRo=o(" (Splinter model)"),ARo=l(),i0=a("li"),Bpe=a("strong"),LRo=o("squeezebert"),yRo=o(" \u2014 "),AV=a("a"),xRo=o("SqueezeBertForMaskedLM"),$Ro=o(" (SqueezeBERT model)"),kRo=l(),d0=a("li"),Ipe=a("strong"),SRo=o("t5"),RRo=o(" \u2014 "),LV=a("a"),PRo=o("T5ForConditionalGeneration"),BRo=o(" (T5 model)"),IRo=l(),c0=a("li"),Npe=a("strong"),NRo=o("tapas"),qRo=o(" \u2014 "),yV=a("a"),jRo=o("TapasForMaskedLM"),DRo=o(" (TAPAS model)"),GRo=l(),f0=a("li"),qpe=a("strong"),ORo=o("transfo-xl"),VRo=o(" \u2014 "),xV=a("a"),XRo=o("TransfoXLLMHeadModel"),zRo=o(" (Transformer-XL model)"),WRo=l(),m0=a("li"),jpe=a("strong"),QRo=o("unispeech"),URo=o(" \u2014 "),$V=a("a"),HRo=o("UniSpeechForPreTraining"),JRo=o(" (UniSpeech model)"),YRo=l(),g0=a("li"),Dpe=a("strong"),KRo=o("unispeech-sat"),ZRo=o(" \u2014 "),kV=a("a"),ePo=o("UniSpeechSatForPreTraining"),oPo=o(" (UniSpeechSat model)"),rPo=l(),h0=a("li"),Gpe=a("strong"),tPo=o("videomae"),aPo=o(" \u2014 "),SV=a("a"),nPo=o("VideoMAEForPreTraining"),sPo=o(" (VideoMAE model)"),lPo=l(),p0=a("li"),Ope=a("strong"),iPo=o("visual_bert"),dPo=o(" \u2014 "),RV=a("a"),cPo=o("VisualBertForPreTraining"),fPo=o(" (VisualBERT model)"),mPo=l(),_0=a("li"),Vpe=a("strong"),gPo=o("vit_mae"),hPo=o(" \u2014 "),PV=a("a"),pPo=o("ViTMAEForPreTraining"),_Po=o(" (ViTMAE model)"),uPo=l(),u0=a("li"),Xpe=a("strong"),bPo=o("wav2vec2"),vPo=o(" \u2014 "),BV=a("a"),FPo=o("Wav2Vec2ForPreTraining"),TPo=o(" (Wav2Vec2 model)"),MPo=l(),b0=a("li"),zpe=a("strong"),EPo=o("wav2vec2-conformer"),CPo=o(" \u2014 "),IV=a("a"),wPo=o("Wav2Vec2ConformerForPreTraining"),APo=o(" (Wav2Vec2-Conformer model)"),LPo=l(),v0=a("li"),Wpe=a("strong"),yPo=o("xlm"),xPo=o(" \u2014 "),NV=a("a"),$Po=o("XLMWithLMHeadModel"),kPo=o(" (XLM model)"),SPo=l(),F0=a("li"),Qpe=a("strong"),RPo=o("xlm-roberta"),PPo=o(" \u2014 "),qV=a("a"),BPo=o("XLMRobertaForMaskedLM"),IPo=o(" (XLM-RoBERTa model)"),NPo=l(),T0=a("li"),Upe=a("strong"),qPo=o("xlm-roberta-xl"),jPo=o(" \u2014 "),jV=a("a"),DPo=o("XLMRobertaXLForMaskedLM"),GPo=o(" (XLM-RoBERTa-XL model)"),OPo=l(),M0=a("li"),Hpe=a("strong"),VPo=o("xlnet"),XPo=o(" \u2014 "),DV=a("a"),zPo=o("XLNetLMHeadModel"),WPo=o(" (XLNet model)"),QPo=l(),E0=a("p"),UPo=o("The model is set in evaluation mode by default using "),Jpe=a("code"),HPo=o("model.eval()"),JPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=a("code"),YPo=o("model.train()"),KPo=l(),F(C0.$$.fragment),pUe=l(),id=a("h2"),w0=a("a"),Kpe=a("span"),F(Ky.$$.fragment),ZPo=l(),Zpe=a("span"),eBo=o("AutoModelForCausalLM"),_Ue=l(),Po=a("div"),F(Zy.$$.fragment),oBo=l(),dd=a("p"),rBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GV=a("a"),tBo=o("from_pretrained()"),aBo=o(" class method or the "),OV=a("a"),nBo=o("from_config()"),sBo=o(` class
method.`),lBo=l(),e9=a("p"),iBo=o("This class cannot be instantiated directly using "),e_e=a("code"),dBo=o("__init__()"),cBo=o(" (throws an error)."),fBo=l(),ht=a("div"),F(o9.$$.fragment),mBo=l(),o_e=a("p"),gBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hBo=l(),cd=a("p"),pBo=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),_Bo=o("not"),uBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),bBo=o("from_pretrained()"),vBo=o(" to load the model weights."),FBo=l(),F(A0.$$.fragment),TBo=l(),Ze=a("div"),F(r9.$$.fragment),MBo=l(),t_e=a("p"),EBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CBo=l(),za=a("p"),wBo=o("The model class to instantiate is selected based on the "),a_e=a("code"),ABo=o("model_type"),LBo=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),yBo=o("pretrained_model_name_or_path"),xBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),$Bo=o("pretrained_model_name_or_path"),kBo=o(":"),SBo=l(),z=a("ul"),L0=a("li"),l_e=a("strong"),RBo=o("bart"),PBo=o(" \u2014 "),XV=a("a"),BBo=o("BartForCausalLM"),IBo=o(" (BART model)"),NBo=l(),y0=a("li"),i_e=a("strong"),qBo=o("bert"),jBo=o(" \u2014 "),zV=a("a"),DBo=o("BertLMHeadModel"),GBo=o(" (BERT model)"),OBo=l(),x0=a("li"),d_e=a("strong"),VBo=o("bert-generation"),XBo=o(" \u2014 "),WV=a("a"),zBo=o("BertGenerationDecoder"),WBo=o(" (Bert Generation model)"),QBo=l(),$0=a("li"),c_e=a("strong"),UBo=o("big_bird"),HBo=o(" \u2014 "),QV=a("a"),JBo=o("BigBirdForCausalLM"),YBo=o(" (BigBird model)"),KBo=l(),k0=a("li"),f_e=a("strong"),ZBo=o("bigbird_pegasus"),eIo=o(" \u2014 "),UV=a("a"),oIo=o("BigBirdPegasusForCausalLM"),rIo=o(" (BigBird-Pegasus model)"),tIo=l(),S0=a("li"),m_e=a("strong"),aIo=o("blenderbot"),nIo=o(" \u2014 "),HV=a("a"),sIo=o("BlenderbotForCausalLM"),lIo=o(" (Blenderbot model)"),iIo=l(),R0=a("li"),g_e=a("strong"),dIo=o("blenderbot-small"),cIo=o(" \u2014 "),JV=a("a"),fIo=o("BlenderbotSmallForCausalLM"),mIo=o(" (BlenderbotSmall model)"),gIo=l(),P0=a("li"),h_e=a("strong"),hIo=o("bloom"),pIo=o(" \u2014 "),YV=a("a"),_Io=o("BloomForCausalLM"),uIo=o(" (BLOOM model)"),bIo=l(),B0=a("li"),p_e=a("strong"),vIo=o("camembert"),FIo=o(" \u2014 "),KV=a("a"),TIo=o("CamembertForCausalLM"),MIo=o(" (CamemBERT model)"),EIo=l(),I0=a("li"),__e=a("strong"),CIo=o("codegen"),wIo=o(" \u2014 "),ZV=a("a"),AIo=o("CodeGenForCausalLM"),LIo=o(" (CodeGen model)"),yIo=l(),N0=a("li"),u_e=a("strong"),xIo=o("ctrl"),$Io=o(" \u2014 "),eX=a("a"),kIo=o("CTRLLMHeadModel"),SIo=o(" (CTRL model)"),RIo=l(),q0=a("li"),b_e=a("strong"),PIo=o("data2vec-text"),BIo=o(" \u2014 "),oX=a("a"),IIo=o("Data2VecTextForCausalLM"),NIo=o(" (Data2VecText model)"),qIo=l(),j0=a("li"),v_e=a("strong"),jIo=o("electra"),DIo=o(" \u2014 "),rX=a("a"),GIo=o("ElectraForCausalLM"),OIo=o(" (ELECTRA model)"),VIo=l(),D0=a("li"),F_e=a("strong"),XIo=o("gpt2"),zIo=o(" \u2014 "),tX=a("a"),WIo=o("GPT2LMHeadModel"),QIo=o(" (OpenAI GPT-2 model)"),UIo=l(),G0=a("li"),T_e=a("strong"),HIo=o("gpt_neo"),JIo=o(" \u2014 "),aX=a("a"),YIo=o("GPTNeoForCausalLM"),KIo=o(" (GPT Neo model)"),ZIo=l(),O0=a("li"),M_e=a("strong"),eNo=o("gpt_neox"),oNo=o(" \u2014 "),nX=a("a"),rNo=o("GPTNeoXForCausalLM"),tNo=o(" (GPT NeoX model)"),aNo=l(),V0=a("li"),E_e=a("strong"),nNo=o("gptj"),sNo=o(" \u2014 "),sX=a("a"),lNo=o("GPTJForCausalLM"),iNo=o(" (GPT-J model)"),dNo=l(),X0=a("li"),C_e=a("strong"),cNo=o("marian"),fNo=o(" \u2014 "),lX=a("a"),mNo=o("MarianForCausalLM"),gNo=o(" (Marian model)"),hNo=l(),z0=a("li"),w_e=a("strong"),pNo=o("mbart"),_No=o(" \u2014 "),iX=a("a"),uNo=o("MBartForCausalLM"),bNo=o(" (mBART model)"),vNo=l(),W0=a("li"),A_e=a("strong"),FNo=o("megatron-bert"),TNo=o(" \u2014 "),dX=a("a"),MNo=o("MegatronBertForCausalLM"),ENo=o(" (Megatron-BERT model)"),CNo=l(),Q0=a("li"),L_e=a("strong"),wNo=o("mvp"),ANo=o(" \u2014 "),cX=a("a"),LNo=o("MvpForCausalLM"),yNo=o(" (MVP model)"),xNo=l(),U0=a("li"),y_e=a("strong"),$No=o("openai-gpt"),kNo=o(" \u2014 "),fX=a("a"),SNo=o("OpenAIGPTLMHeadModel"),RNo=o(" (OpenAI GPT model)"),PNo=l(),H0=a("li"),x_e=a("strong"),BNo=o("opt"),INo=o(" \u2014 "),mX=a("a"),NNo=o("OPTForCausalLM"),qNo=o(" (OPT model)"),jNo=l(),J0=a("li"),$_e=a("strong"),DNo=o("pegasus"),GNo=o(" \u2014 "),gX=a("a"),ONo=o("PegasusForCausalLM"),VNo=o(" (Pegasus model)"),XNo=l(),Y0=a("li"),k_e=a("strong"),zNo=o("plbart"),WNo=o(" \u2014 "),hX=a("a"),QNo=o("PLBartForCausalLM"),UNo=o(" (PLBart model)"),HNo=l(),K0=a("li"),S_e=a("strong"),JNo=o("prophetnet"),YNo=o(" \u2014 "),pX=a("a"),KNo=o("ProphetNetForCausalLM"),ZNo=o(" (ProphetNet model)"),eqo=l(),Z0=a("li"),R_e=a("strong"),oqo=o("qdqbert"),rqo=o(" \u2014 "),_X=a("a"),tqo=o("QDQBertLMHeadModel"),aqo=o(" (QDQBert model)"),nqo=l(),e1=a("li"),P_e=a("strong"),sqo=o("reformer"),lqo=o(" \u2014 "),uX=a("a"),iqo=o("ReformerModelWithLMHead"),dqo=o(" (Reformer model)"),cqo=l(),o1=a("li"),B_e=a("strong"),fqo=o("rembert"),mqo=o(" \u2014 "),bX=a("a"),gqo=o("RemBertForCausalLM"),hqo=o(" (RemBERT model)"),pqo=l(),r1=a("li"),I_e=a("strong"),_qo=o("roberta"),uqo=o(" \u2014 "),vX=a("a"),bqo=o("RobertaForCausalLM"),vqo=o(" (RoBERTa model)"),Fqo=l(),t1=a("li"),N_e=a("strong"),Tqo=o("roformer"),Mqo=o(" \u2014 "),FX=a("a"),Eqo=o("RoFormerForCausalLM"),Cqo=o(" (RoFormer model)"),wqo=l(),a1=a("li"),q_e=a("strong"),Aqo=o("speech_to_text_2"),Lqo=o(" \u2014 "),TX=a("a"),yqo=o("Speech2Text2ForCausalLM"),xqo=o(" (Speech2Text2 model)"),$qo=l(),n1=a("li"),j_e=a("strong"),kqo=o("transfo-xl"),Sqo=o(" \u2014 "),MX=a("a"),Rqo=o("TransfoXLLMHeadModel"),Pqo=o(" (Transformer-XL model)"),Bqo=l(),s1=a("li"),D_e=a("strong"),Iqo=o("trocr"),Nqo=o(" \u2014 "),EX=a("a"),qqo=o("TrOCRForCausalLM"),jqo=o(" (TrOCR model)"),Dqo=l(),l1=a("li"),G_e=a("strong"),Gqo=o("xglm"),Oqo=o(" \u2014 "),CX=a("a"),Vqo=o("XGLMForCausalLM"),Xqo=o(" (XGLM model)"),zqo=l(),i1=a("li"),O_e=a("strong"),Wqo=o("xlm"),Qqo=o(" \u2014 "),wX=a("a"),Uqo=o("XLMWithLMHeadModel"),Hqo=o(" (XLM model)"),Jqo=l(),d1=a("li"),V_e=a("strong"),Yqo=o("xlm-prophetnet"),Kqo=o(" \u2014 "),AX=a("a"),Zqo=o("XLMProphetNetForCausalLM"),ejo=o(" (XLM-ProphetNet model)"),ojo=l(),c1=a("li"),X_e=a("strong"),rjo=o("xlm-roberta"),tjo=o(" \u2014 "),LX=a("a"),ajo=o("XLMRobertaForCausalLM"),njo=o(" (XLM-RoBERTa model)"),sjo=l(),f1=a("li"),z_e=a("strong"),ljo=o("xlm-roberta-xl"),ijo=o(" \u2014 "),yX=a("a"),djo=o("XLMRobertaXLForCausalLM"),cjo=o(" (XLM-RoBERTa-XL model)"),fjo=l(),m1=a("li"),W_e=a("strong"),mjo=o("xlnet"),gjo=o(" \u2014 "),xX=a("a"),hjo=o("XLNetLMHeadModel"),pjo=o(" (XLNet model)"),_jo=l(),g1=a("p"),ujo=o("The model is set in evaluation mode by default using "),Q_e=a("code"),bjo=o("model.eval()"),vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=a("code"),Fjo=o("model.train()"),Tjo=l(),F(h1.$$.fragment),uUe=l(),fd=a("h2"),p1=a("a"),H_e=a("span"),F(t9.$$.fragment),Mjo=l(),J_e=a("span"),Ejo=o("AutoModelForMaskedLM"),bUe=l(),Bo=a("div"),F(a9.$$.fragment),Cjo=l(),md=a("p"),wjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$X=a("a"),Ajo=o("from_pretrained()"),Ljo=o(" class method or the "),kX=a("a"),yjo=o("from_config()"),xjo=o(` class
method.`),$jo=l(),n9=a("p"),kjo=o("This class cannot be instantiated directly using "),Y_e=a("code"),Sjo=o("__init__()"),Rjo=o(" (throws an error)."),Pjo=l(),pt=a("div"),F(s9.$$.fragment),Bjo=l(),K_e=a("p"),Ijo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Njo=l(),gd=a("p"),qjo=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),jjo=o("not"),Djo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),Gjo=o("from_pretrained()"),Ojo=o(" to load the model weights."),Vjo=l(),F(_1.$$.fragment),Xjo=l(),eo=a("div"),F(l9.$$.fragment),zjo=l(),eue=a("p"),Wjo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qjo=l(),Wa=a("p"),Ujo=o("The model class to instantiate is selected based on the "),oue=a("code"),Hjo=o("model_type"),Jjo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),Yjo=o("pretrained_model_name_or_path"),Kjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),Zjo=o("pretrained_model_name_or_path"),eDo=o(":"),oDo=l(),U=a("ul"),u1=a("li"),aue=a("strong"),rDo=o("albert"),tDo=o(" \u2014 "),RX=a("a"),aDo=o("AlbertForMaskedLM"),nDo=o(" (ALBERT model)"),sDo=l(),b1=a("li"),nue=a("strong"),lDo=o("bart"),iDo=o(" \u2014 "),PX=a("a"),dDo=o("BartForConditionalGeneration"),cDo=o(" (BART model)"),fDo=l(),v1=a("li"),sue=a("strong"),mDo=o("bert"),gDo=o(" \u2014 "),BX=a("a"),hDo=o("BertForMaskedLM"),pDo=o(" (BERT model)"),_Do=l(),F1=a("li"),lue=a("strong"),uDo=o("big_bird"),bDo=o(" \u2014 "),IX=a("a"),vDo=o("BigBirdForMaskedLM"),FDo=o(" (BigBird model)"),TDo=l(),T1=a("li"),iue=a("strong"),MDo=o("camembert"),EDo=o(" \u2014 "),NX=a("a"),CDo=o("CamembertForMaskedLM"),wDo=o(" (CamemBERT model)"),ADo=l(),M1=a("li"),due=a("strong"),LDo=o("convbert"),yDo=o(" \u2014 "),qX=a("a"),xDo=o("ConvBertForMaskedLM"),$Do=o(" (ConvBERT model)"),kDo=l(),E1=a("li"),cue=a("strong"),SDo=o("data2vec-text"),RDo=o(" \u2014 "),jX=a("a"),PDo=o("Data2VecTextForMaskedLM"),BDo=o(" (Data2VecText model)"),IDo=l(),C1=a("li"),fue=a("strong"),NDo=o("deberta"),qDo=o(" \u2014 "),DX=a("a"),jDo=o("DebertaForMaskedLM"),DDo=o(" (DeBERTa model)"),GDo=l(),w1=a("li"),mue=a("strong"),ODo=o("deberta-v2"),VDo=o(" \u2014 "),GX=a("a"),XDo=o("DebertaV2ForMaskedLM"),zDo=o(" (DeBERTa-v2 model)"),WDo=l(),A1=a("li"),gue=a("strong"),QDo=o("distilbert"),UDo=o(" \u2014 "),OX=a("a"),HDo=o("DistilBertForMaskedLM"),JDo=o(" (DistilBERT model)"),YDo=l(),L1=a("li"),hue=a("strong"),KDo=o("electra"),ZDo=o(" \u2014 "),VX=a("a"),eGo=o("ElectraForMaskedLM"),oGo=o(" (ELECTRA model)"),rGo=l(),y1=a("li"),pue=a("strong"),tGo=o("flaubert"),aGo=o(" \u2014 "),XX=a("a"),nGo=o("FlaubertWithLMHeadModel"),sGo=o(" (FlauBERT model)"),lGo=l(),x1=a("li"),_ue=a("strong"),iGo=o("fnet"),dGo=o(" \u2014 "),zX=a("a"),cGo=o("FNetForMaskedLM"),fGo=o(" (FNet model)"),mGo=l(),$1=a("li"),uue=a("strong"),gGo=o("funnel"),hGo=o(" \u2014 "),WX=a("a"),pGo=o("FunnelForMaskedLM"),_Go=o(" (Funnel Transformer model)"),uGo=l(),k1=a("li"),bue=a("strong"),bGo=o("ibert"),vGo=o(" \u2014 "),QX=a("a"),FGo=o("IBertForMaskedLM"),TGo=o(" (I-BERT model)"),MGo=l(),S1=a("li"),vue=a("strong"),EGo=o("layoutlm"),CGo=o(" \u2014 "),UX=a("a"),wGo=o("LayoutLMForMaskedLM"),AGo=o(" (LayoutLM model)"),LGo=l(),R1=a("li"),Fue=a("strong"),yGo=o("longformer"),xGo=o(" \u2014 "),HX=a("a"),$Go=o("LongformerForMaskedLM"),kGo=o(" (Longformer model)"),SGo=l(),P1=a("li"),Tue=a("strong"),RGo=o("luke"),PGo=o(" \u2014 "),JX=a("a"),BGo=o("LukeForMaskedLM"),IGo=o(" (LUKE model)"),NGo=l(),B1=a("li"),Mue=a("strong"),qGo=o("mbart"),jGo=o(" \u2014 "),YX=a("a"),DGo=o("MBartForConditionalGeneration"),GGo=o(" (mBART model)"),OGo=l(),I1=a("li"),Eue=a("strong"),VGo=o("megatron-bert"),XGo=o(" \u2014 "),KX=a("a"),zGo=o("MegatronBertForMaskedLM"),WGo=o(" (Megatron-BERT model)"),QGo=l(),N1=a("li"),Cue=a("strong"),UGo=o("mobilebert"),HGo=o(" \u2014 "),ZX=a("a"),JGo=o("MobileBertForMaskedLM"),YGo=o(" (MobileBERT model)"),KGo=l(),q1=a("li"),wue=a("strong"),ZGo=o("mpnet"),eOo=o(" \u2014 "),ez=a("a"),oOo=o("MPNetForMaskedLM"),rOo=o(" (MPNet model)"),tOo=l(),j1=a("li"),Aue=a("strong"),aOo=o("mvp"),nOo=o(" \u2014 "),oz=a("a"),sOo=o("MvpForConditionalGeneration"),lOo=o(" (MVP model)"),iOo=l(),D1=a("li"),Lue=a("strong"),dOo=o("nezha"),cOo=o(" \u2014 "),rz=a("a"),fOo=o("NezhaForMaskedLM"),mOo=o(" (Nezha model)"),gOo=l(),G1=a("li"),yue=a("strong"),hOo=o("nystromformer"),pOo=o(" \u2014 "),tz=a("a"),_Oo=o("NystromformerForMaskedLM"),uOo=o(" (Nystr\xF6mformer model)"),bOo=l(),O1=a("li"),xue=a("strong"),vOo=o("perceiver"),FOo=o(" \u2014 "),az=a("a"),TOo=o("PerceiverForMaskedLM"),MOo=o(" (Perceiver model)"),EOo=l(),V1=a("li"),$ue=a("strong"),COo=o("qdqbert"),wOo=o(" \u2014 "),nz=a("a"),AOo=o("QDQBertForMaskedLM"),LOo=o(" (QDQBert model)"),yOo=l(),X1=a("li"),kue=a("strong"),xOo=o("reformer"),$Oo=o(" \u2014 "),sz=a("a"),kOo=o("ReformerForMaskedLM"),SOo=o(" (Reformer model)"),ROo=l(),z1=a("li"),Sue=a("strong"),POo=o("rembert"),BOo=o(" \u2014 "),lz=a("a"),IOo=o("RemBertForMaskedLM"),NOo=o(" (RemBERT model)"),qOo=l(),W1=a("li"),Rue=a("strong"),jOo=o("roberta"),DOo=o(" \u2014 "),iz=a("a"),GOo=o("RobertaForMaskedLM"),OOo=o(" (RoBERTa model)"),VOo=l(),Q1=a("li"),Pue=a("strong"),XOo=o("roformer"),zOo=o(" \u2014 "),dz=a("a"),WOo=o("RoFormerForMaskedLM"),QOo=o(" (RoFormer model)"),UOo=l(),U1=a("li"),Bue=a("strong"),HOo=o("squeezebert"),JOo=o(" \u2014 "),cz=a("a"),YOo=o("SqueezeBertForMaskedLM"),KOo=o(" (SqueezeBERT model)"),ZOo=l(),H1=a("li"),Iue=a("strong"),eVo=o("tapas"),oVo=o(" \u2014 "),fz=a("a"),rVo=o("TapasForMaskedLM"),tVo=o(" (TAPAS model)"),aVo=l(),J1=a("li"),Nue=a("strong"),nVo=o("wav2vec2"),sVo=o(" \u2014 "),que=a("code"),lVo=o("Wav2Vec2ForMaskedLM"),iVo=o(" (Wav2Vec2 model)"),dVo=l(),Y1=a("li"),jue=a("strong"),cVo=o("xlm"),fVo=o(" \u2014 "),mz=a("a"),mVo=o("XLMWithLMHeadModel"),gVo=o(" (XLM model)"),hVo=l(),K1=a("li"),Due=a("strong"),pVo=o("xlm-roberta"),_Vo=o(" \u2014 "),gz=a("a"),uVo=o("XLMRobertaForMaskedLM"),bVo=o(" (XLM-RoBERTa model)"),vVo=l(),Z1=a("li"),Gue=a("strong"),FVo=o("xlm-roberta-xl"),TVo=o(" \u2014 "),hz=a("a"),MVo=o("XLMRobertaXLForMaskedLM"),EVo=o(" (XLM-RoBERTa-XL model)"),CVo=l(),eb=a("li"),Oue=a("strong"),wVo=o("yoso"),AVo=o(" \u2014 "),pz=a("a"),LVo=o("YosoForMaskedLM"),yVo=o(" (YOSO model)"),xVo=l(),ob=a("p"),$Vo=o("The model is set in evaluation mode by default using "),Vue=a("code"),kVo=o("model.eval()"),SVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=a("code"),RVo=o("model.train()"),PVo=l(),F(rb.$$.fragment),vUe=l(),hd=a("h2"),tb=a("a"),zue=a("span"),F(i9.$$.fragment),BVo=l(),Wue=a("span"),IVo=o("AutoModelForSeq2SeqLM"),FUe=l(),Io=a("div"),F(d9.$$.fragment),NVo=l(),pd=a("p"),qVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_z=a("a"),jVo=o("from_pretrained()"),DVo=o(" class method or the "),uz=a("a"),GVo=o("from_config()"),OVo=o(` class
method.`),VVo=l(),c9=a("p"),XVo=o("This class cannot be instantiated directly using "),Que=a("code"),zVo=o("__init__()"),WVo=o(" (throws an error)."),QVo=l(),_t=a("div"),F(f9.$$.fragment),UVo=l(),Uue=a("p"),HVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JVo=l(),_d=a("p"),YVo=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),KVo=o("not"),ZVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),eXo=o("from_pretrained()"),oXo=o(" to load the model weights."),rXo=l(),F(ab.$$.fragment),tXo=l(),oo=a("div"),F(m9.$$.fragment),aXo=l(),Jue=a("p"),nXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sXo=l(),Qa=a("p"),lXo=o("The model class to instantiate is selected based on the "),Yue=a("code"),iXo=o("model_type"),dXo=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),cXo=o("pretrained_model_name_or_path"),fXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),mXo=o("pretrained_model_name_or_path"),gXo=o(":"),hXo=l(),me=a("ul"),nb=a("li"),e2e=a("strong"),pXo=o("bart"),_Xo=o(" \u2014 "),vz=a("a"),uXo=o("BartForConditionalGeneration"),bXo=o(" (BART model)"),vXo=l(),sb=a("li"),o2e=a("strong"),FXo=o("bigbird_pegasus"),TXo=o(" \u2014 "),Fz=a("a"),MXo=o("BigBirdPegasusForConditionalGeneration"),EXo=o(" (BigBird-Pegasus model)"),CXo=l(),lb=a("li"),r2e=a("strong"),wXo=o("blenderbot"),AXo=o(" \u2014 "),Tz=a("a"),LXo=o("BlenderbotForConditionalGeneration"),yXo=o(" (Blenderbot model)"),xXo=l(),ib=a("li"),t2e=a("strong"),$Xo=o("blenderbot-small"),kXo=o(" \u2014 "),Mz=a("a"),SXo=o("BlenderbotSmallForConditionalGeneration"),RXo=o(" (BlenderbotSmall model)"),PXo=l(),db=a("li"),a2e=a("strong"),BXo=o("encoder-decoder"),IXo=o(" \u2014 "),Ez=a("a"),NXo=o("EncoderDecoderModel"),qXo=o(" (Encoder decoder model)"),jXo=l(),cb=a("li"),n2e=a("strong"),DXo=o("fsmt"),GXo=o(" \u2014 "),Cz=a("a"),OXo=o("FSMTForConditionalGeneration"),VXo=o(" (FairSeq Machine-Translation model)"),XXo=l(),fb=a("li"),s2e=a("strong"),zXo=o("led"),WXo=o(" \u2014 "),wz=a("a"),QXo=o("LEDForConditionalGeneration"),UXo=o(" (LED model)"),HXo=l(),mb=a("li"),l2e=a("strong"),JXo=o("longt5"),YXo=o(" \u2014 "),Az=a("a"),KXo=o("LongT5ForConditionalGeneration"),ZXo=o(" (LongT5 model)"),ezo=l(),gb=a("li"),i2e=a("strong"),ozo=o("m2m_100"),rzo=o(" \u2014 "),Lz=a("a"),tzo=o("M2M100ForConditionalGeneration"),azo=o(" (M2M100 model)"),nzo=l(),hb=a("li"),d2e=a("strong"),szo=o("marian"),lzo=o(" \u2014 "),yz=a("a"),izo=o("MarianMTModel"),dzo=o(" (Marian model)"),czo=l(),pb=a("li"),c2e=a("strong"),fzo=o("mbart"),mzo=o(" \u2014 "),xz=a("a"),gzo=o("MBartForConditionalGeneration"),hzo=o(" (mBART model)"),pzo=l(),_b=a("li"),f2e=a("strong"),_zo=o("mt5"),uzo=o(" \u2014 "),$z=a("a"),bzo=o("MT5ForConditionalGeneration"),vzo=o(" (MT5 model)"),Fzo=l(),ub=a("li"),m2e=a("strong"),Tzo=o("mvp"),Mzo=o(" \u2014 "),kz=a("a"),Ezo=o("MvpForConditionalGeneration"),Czo=o(" (MVP model)"),wzo=l(),bb=a("li"),g2e=a("strong"),Azo=o("nllb"),Lzo=o(" \u2014 "),Sz=a("a"),yzo=o("M2M100ForConditionalGeneration"),xzo=o(" (NLLB model)"),$zo=l(),vb=a("li"),h2e=a("strong"),kzo=o("pegasus"),Szo=o(" \u2014 "),Rz=a("a"),Rzo=o("PegasusForConditionalGeneration"),Pzo=o(" (Pegasus model)"),Bzo=l(),Fb=a("li"),p2e=a("strong"),Izo=o("plbart"),Nzo=o(" \u2014 "),Pz=a("a"),qzo=o("PLBartForConditionalGeneration"),jzo=o(" (PLBart model)"),Dzo=l(),Tb=a("li"),_2e=a("strong"),Gzo=o("prophetnet"),Ozo=o(" \u2014 "),Bz=a("a"),Vzo=o("ProphetNetForConditionalGeneration"),Xzo=o(" (ProphetNet model)"),zzo=l(),Mb=a("li"),u2e=a("strong"),Wzo=o("t5"),Qzo=o(" \u2014 "),Iz=a("a"),Uzo=o("T5ForConditionalGeneration"),Hzo=o(" (T5 model)"),Jzo=l(),Eb=a("li"),b2e=a("strong"),Yzo=o("xlm-prophetnet"),Kzo=o(" \u2014 "),Nz=a("a"),Zzo=o("XLMProphetNetForConditionalGeneration"),eWo=o(" (XLM-ProphetNet model)"),oWo=l(),Cb=a("p"),rWo=o("The model is set in evaluation mode by default using "),v2e=a("code"),tWo=o("model.eval()"),aWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=a("code"),nWo=o("model.train()"),sWo=l(),F(wb.$$.fragment),TUe=l(),ud=a("h2"),Ab=a("a"),T2e=a("span"),F(g9.$$.fragment),lWo=l(),M2e=a("span"),iWo=o("AutoModelForSequenceClassification"),MUe=l(),No=a("div"),F(h9.$$.fragment),dWo=l(),bd=a("p"),cWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qz=a("a"),fWo=o("from_pretrained()"),mWo=o(" class method or the "),jz=a("a"),gWo=o("from_config()"),hWo=o(` class
method.`),pWo=l(),p9=a("p"),_Wo=o("This class cannot be instantiated directly using "),E2e=a("code"),uWo=o("__init__()"),bWo=o(" (throws an error)."),vWo=l(),ut=a("div"),F(_9.$$.fragment),FWo=l(),C2e=a("p"),TWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MWo=l(),vd=a("p"),EWo=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),CWo=o("not"),wWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),AWo=o("from_pretrained()"),LWo=o(" to load the model weights."),yWo=l(),F(Lb.$$.fragment),xWo=l(),ro=a("div"),F(u9.$$.fragment),$Wo=l(),A2e=a("p"),kWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SWo=l(),Ua=a("p"),RWo=o("The model class to instantiate is selected based on the "),L2e=a("code"),PWo=o("model_type"),BWo=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),IWo=o("pretrained_model_name_or_path"),NWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),qWo=o("pretrained_model_name_or_path"),jWo=o(":"),DWo=l(),q=a("ul"),yb=a("li"),$2e=a("strong"),GWo=o("albert"),OWo=o(" \u2014 "),Gz=a("a"),VWo=o("AlbertForSequenceClassification"),XWo=o(" (ALBERT model)"),zWo=l(),xb=a("li"),k2e=a("strong"),WWo=o("bart"),QWo=o(" \u2014 "),Oz=a("a"),UWo=o("BartForSequenceClassification"),HWo=o(" (BART model)"),JWo=l(),$b=a("li"),S2e=a("strong"),YWo=o("bert"),KWo=o(" \u2014 "),Vz=a("a"),ZWo=o("BertForSequenceClassification"),eQo=o(" (BERT model)"),oQo=l(),kb=a("li"),R2e=a("strong"),rQo=o("big_bird"),tQo=o(" \u2014 "),Xz=a("a"),aQo=o("BigBirdForSequenceClassification"),nQo=o(" (BigBird model)"),sQo=l(),Sb=a("li"),P2e=a("strong"),lQo=o("bigbird_pegasus"),iQo=o(" \u2014 "),zz=a("a"),dQo=o("BigBirdPegasusForSequenceClassification"),cQo=o(" (BigBird-Pegasus model)"),fQo=l(),Rb=a("li"),B2e=a("strong"),mQo=o("bloom"),gQo=o(" \u2014 "),Wz=a("a"),hQo=o("BloomForSequenceClassification"),pQo=o(" (BLOOM model)"),_Qo=l(),Pb=a("li"),I2e=a("strong"),uQo=o("camembert"),bQo=o(" \u2014 "),Qz=a("a"),vQo=o("CamembertForSequenceClassification"),FQo=o(" (CamemBERT model)"),TQo=l(),Bb=a("li"),N2e=a("strong"),MQo=o("canine"),EQo=o(" \u2014 "),Uz=a("a"),CQo=o("CanineForSequenceClassification"),wQo=o(" (CANINE model)"),AQo=l(),Ib=a("li"),q2e=a("strong"),LQo=o("convbert"),yQo=o(" \u2014 "),Hz=a("a"),xQo=o("ConvBertForSequenceClassification"),$Qo=o(" (ConvBERT model)"),kQo=l(),Nb=a("li"),j2e=a("strong"),SQo=o("ctrl"),RQo=o(" \u2014 "),Jz=a("a"),PQo=o("CTRLForSequenceClassification"),BQo=o(" (CTRL model)"),IQo=l(),qb=a("li"),D2e=a("strong"),NQo=o("data2vec-text"),qQo=o(" \u2014 "),Yz=a("a"),jQo=o("Data2VecTextForSequenceClassification"),DQo=o(" (Data2VecText model)"),GQo=l(),jb=a("li"),G2e=a("strong"),OQo=o("deberta"),VQo=o(" \u2014 "),Kz=a("a"),XQo=o("DebertaForSequenceClassification"),zQo=o(" (DeBERTa model)"),WQo=l(),Db=a("li"),O2e=a("strong"),QQo=o("deberta-v2"),UQo=o(" \u2014 "),Zz=a("a"),HQo=o("DebertaV2ForSequenceClassification"),JQo=o(" (DeBERTa-v2 model)"),YQo=l(),Gb=a("li"),V2e=a("strong"),KQo=o("distilbert"),ZQo=o(" \u2014 "),eW=a("a"),eUo=o("DistilBertForSequenceClassification"),oUo=o(" (DistilBERT model)"),rUo=l(),Ob=a("li"),X2e=a("strong"),tUo=o("electra"),aUo=o(" \u2014 "),oW=a("a"),nUo=o("ElectraForSequenceClassification"),sUo=o(" (ELECTRA model)"),lUo=l(),Vb=a("li"),z2e=a("strong"),iUo=o("flaubert"),dUo=o(" \u2014 "),rW=a("a"),cUo=o("FlaubertForSequenceClassification"),fUo=o(" (FlauBERT model)"),mUo=l(),Xb=a("li"),W2e=a("strong"),gUo=o("fnet"),hUo=o(" \u2014 "),tW=a("a"),pUo=o("FNetForSequenceClassification"),_Uo=o(" (FNet model)"),uUo=l(),zb=a("li"),Q2e=a("strong"),bUo=o("funnel"),vUo=o(" \u2014 "),aW=a("a"),FUo=o("FunnelForSequenceClassification"),TUo=o(" (Funnel Transformer model)"),MUo=l(),Wb=a("li"),U2e=a("strong"),EUo=o("gpt2"),CUo=o(" \u2014 "),nW=a("a"),wUo=o("GPT2ForSequenceClassification"),AUo=o(" (OpenAI GPT-2 model)"),LUo=l(),Qb=a("li"),H2e=a("strong"),yUo=o("gpt_neo"),xUo=o(" \u2014 "),sW=a("a"),$Uo=o("GPTNeoForSequenceClassification"),kUo=o(" (GPT Neo model)"),SUo=l(),Ub=a("li"),J2e=a("strong"),RUo=o("gptj"),PUo=o(" \u2014 "),lW=a("a"),BUo=o("GPTJForSequenceClassification"),IUo=o(" (GPT-J model)"),NUo=l(),Hb=a("li"),Y2e=a("strong"),qUo=o("ibert"),jUo=o(" \u2014 "),iW=a("a"),DUo=o("IBertForSequenceClassification"),GUo=o(" (I-BERT model)"),OUo=l(),Jb=a("li"),K2e=a("strong"),VUo=o("layoutlm"),XUo=o(" \u2014 "),dW=a("a"),zUo=o("LayoutLMForSequenceClassification"),WUo=o(" (LayoutLM model)"),QUo=l(),Yb=a("li"),Z2e=a("strong"),UUo=o("layoutlmv2"),HUo=o(" \u2014 "),cW=a("a"),JUo=o("LayoutLMv2ForSequenceClassification"),YUo=o(" (LayoutLMv2 model)"),KUo=l(),Kb=a("li"),e0e=a("strong"),ZUo=o("layoutlmv3"),eHo=o(" \u2014 "),fW=a("a"),oHo=o("LayoutLMv3ForSequenceClassification"),rHo=o(" (LayoutLMv3 model)"),tHo=l(),Zb=a("li"),o0e=a("strong"),aHo=o("led"),nHo=o(" \u2014 "),mW=a("a"),sHo=o("LEDForSequenceClassification"),lHo=o(" (LED model)"),iHo=l(),ev=a("li"),r0e=a("strong"),dHo=o("longformer"),cHo=o(" \u2014 "),gW=a("a"),fHo=o("LongformerForSequenceClassification"),mHo=o(" (Longformer model)"),gHo=l(),ov=a("li"),t0e=a("strong"),hHo=o("luke"),pHo=o(" \u2014 "),hW=a("a"),_Ho=o("LukeForSequenceClassification"),uHo=o(" (LUKE model)"),bHo=l(),rv=a("li"),a0e=a("strong"),vHo=o("mbart"),FHo=o(" \u2014 "),pW=a("a"),THo=o("MBartForSequenceClassification"),MHo=o(" (mBART model)"),EHo=l(),tv=a("li"),n0e=a("strong"),CHo=o("megatron-bert"),wHo=o(" \u2014 "),_W=a("a"),AHo=o("MegatronBertForSequenceClassification"),LHo=o(" (Megatron-BERT model)"),yHo=l(),av=a("li"),s0e=a("strong"),xHo=o("mobilebert"),$Ho=o(" \u2014 "),uW=a("a"),kHo=o("MobileBertForSequenceClassification"),SHo=o(" (MobileBERT model)"),RHo=l(),nv=a("li"),l0e=a("strong"),PHo=o("mpnet"),BHo=o(" \u2014 "),bW=a("a"),IHo=o("MPNetForSequenceClassification"),NHo=o(" (MPNet model)"),qHo=l(),sv=a("li"),i0e=a("strong"),jHo=o("mvp"),DHo=o(" \u2014 "),vW=a("a"),GHo=o("MvpForSequenceClassification"),OHo=o(" (MVP model)"),VHo=l(),lv=a("li"),d0e=a("strong"),XHo=o("nezha"),zHo=o(" \u2014 "),FW=a("a"),WHo=o("NezhaForSequenceClassification"),QHo=o(" (Nezha model)"),UHo=l(),iv=a("li"),c0e=a("strong"),HHo=o("nystromformer"),JHo=o(" \u2014 "),TW=a("a"),YHo=o("NystromformerForSequenceClassification"),KHo=o(" (Nystr\xF6mformer model)"),ZHo=l(),dv=a("li"),f0e=a("strong"),eJo=o("openai-gpt"),oJo=o(" \u2014 "),MW=a("a"),rJo=o("OpenAIGPTForSequenceClassification"),tJo=o(" (OpenAI GPT model)"),aJo=l(),cv=a("li"),m0e=a("strong"),nJo=o("opt"),sJo=o(" \u2014 "),EW=a("a"),lJo=o("OPTForSequenceClassification"),iJo=o(" (OPT model)"),dJo=l(),fv=a("li"),g0e=a("strong"),cJo=o("perceiver"),fJo=o(" \u2014 "),CW=a("a"),mJo=o("PerceiverForSequenceClassification"),gJo=o(" (Perceiver model)"),hJo=l(),mv=a("li"),h0e=a("strong"),pJo=o("plbart"),_Jo=o(" \u2014 "),wW=a("a"),uJo=o("PLBartForSequenceClassification"),bJo=o(" (PLBart model)"),vJo=l(),gv=a("li"),p0e=a("strong"),FJo=o("qdqbert"),TJo=o(" \u2014 "),AW=a("a"),MJo=o("QDQBertForSequenceClassification"),EJo=o(" (QDQBert model)"),CJo=l(),hv=a("li"),_0e=a("strong"),wJo=o("reformer"),AJo=o(" \u2014 "),LW=a("a"),LJo=o("ReformerForSequenceClassification"),yJo=o(" (Reformer model)"),xJo=l(),pv=a("li"),u0e=a("strong"),$Jo=o("rembert"),kJo=o(" \u2014 "),yW=a("a"),SJo=o("RemBertForSequenceClassification"),RJo=o(" (RemBERT model)"),PJo=l(),_v=a("li"),b0e=a("strong"),BJo=o("roberta"),IJo=o(" \u2014 "),xW=a("a"),NJo=o("RobertaForSequenceClassification"),qJo=o(" (RoBERTa model)"),jJo=l(),uv=a("li"),v0e=a("strong"),DJo=o("roformer"),GJo=o(" \u2014 "),$W=a("a"),OJo=o("RoFormerForSequenceClassification"),VJo=o(" (RoFormer model)"),XJo=l(),bv=a("li"),F0e=a("strong"),zJo=o("squeezebert"),WJo=o(" \u2014 "),kW=a("a"),QJo=o("SqueezeBertForSequenceClassification"),UJo=o(" (SqueezeBERT model)"),HJo=l(),vv=a("li"),T0e=a("strong"),JJo=o("tapas"),YJo=o(" \u2014 "),SW=a("a"),KJo=o("TapasForSequenceClassification"),ZJo=o(" (TAPAS model)"),eYo=l(),Fv=a("li"),M0e=a("strong"),oYo=o("transfo-xl"),rYo=o(" \u2014 "),RW=a("a"),tYo=o("TransfoXLForSequenceClassification"),aYo=o(" (Transformer-XL model)"),nYo=l(),Tv=a("li"),E0e=a("strong"),sYo=o("xlm"),lYo=o(" \u2014 "),PW=a("a"),iYo=o("XLMForSequenceClassification"),dYo=o(" (XLM model)"),cYo=l(),Mv=a("li"),C0e=a("strong"),fYo=o("xlm-roberta"),mYo=o(" \u2014 "),BW=a("a"),gYo=o("XLMRobertaForSequenceClassification"),hYo=o(" (XLM-RoBERTa model)"),pYo=l(),Ev=a("li"),w0e=a("strong"),_Yo=o("xlm-roberta-xl"),uYo=o(" \u2014 "),IW=a("a"),bYo=o("XLMRobertaXLForSequenceClassification"),vYo=o(" (XLM-RoBERTa-XL model)"),FYo=l(),Cv=a("li"),A0e=a("strong"),TYo=o("xlnet"),MYo=o(" \u2014 "),NW=a("a"),EYo=o("XLNetForSequenceClassification"),CYo=o(" (XLNet model)"),wYo=l(),wv=a("li"),L0e=a("strong"),AYo=o("yoso"),LYo=o(" \u2014 "),qW=a("a"),yYo=o("YosoForSequenceClassification"),xYo=o(" (YOSO model)"),$Yo=l(),Av=a("p"),kYo=o("The model is set in evaluation mode by default using "),y0e=a("code"),SYo=o("model.eval()"),RYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x0e=a("code"),PYo=o("model.train()"),BYo=l(),F(Lv.$$.fragment),EUe=l(),Fd=a("h2"),yv=a("a"),$0e=a("span"),F(b9.$$.fragment),IYo=l(),k0e=a("span"),NYo=o("AutoModelForMultipleChoice"),CUe=l(),qo=a("div"),F(v9.$$.fragment),qYo=l(),Td=a("p"),jYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jW=a("a"),DYo=o("from_pretrained()"),GYo=o(" class method or the "),DW=a("a"),OYo=o("from_config()"),VYo=o(` class
method.`),XYo=l(),F9=a("p"),zYo=o("This class cannot be instantiated directly using "),S0e=a("code"),WYo=o("__init__()"),QYo=o(" (throws an error)."),UYo=l(),bt=a("div"),F(T9.$$.fragment),HYo=l(),R0e=a("p"),JYo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),YYo=l(),Md=a("p"),KYo=o(`Note:
Loading a model from its configuration file does `),P0e=a("strong"),ZYo=o("not"),eKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),oKo=o("from_pretrained()"),rKo=o(" to load the model weights."),tKo=l(),F(xv.$$.fragment),aKo=l(),to=a("div"),F(M9.$$.fragment),nKo=l(),B0e=a("p"),sKo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lKo=l(),Ha=a("p"),iKo=o("The model class to instantiate is selected based on the "),I0e=a("code"),dKo=o("model_type"),cKo=o(` property of the config object (either
passed as an argument or loaded from `),N0e=a("code"),fKo=o("pretrained_model_name_or_path"),mKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=a("code"),gKo=o("pretrained_model_name_or_path"),hKo=o(":"),pKo=l(),Z=a("ul"),$v=a("li"),j0e=a("strong"),_Ko=o("albert"),uKo=o(" \u2014 "),OW=a("a"),bKo=o("AlbertForMultipleChoice"),vKo=o(" (ALBERT model)"),FKo=l(),kv=a("li"),D0e=a("strong"),TKo=o("bert"),MKo=o(" \u2014 "),VW=a("a"),EKo=o("BertForMultipleChoice"),CKo=o(" (BERT model)"),wKo=l(),Sv=a("li"),G0e=a("strong"),AKo=o("big_bird"),LKo=o(" \u2014 "),XW=a("a"),yKo=o("BigBirdForMultipleChoice"),xKo=o(" (BigBird model)"),$Ko=l(),Rv=a("li"),O0e=a("strong"),kKo=o("camembert"),SKo=o(" \u2014 "),zW=a("a"),RKo=o("CamembertForMultipleChoice"),PKo=o(" (CamemBERT model)"),BKo=l(),Pv=a("li"),V0e=a("strong"),IKo=o("canine"),NKo=o(" \u2014 "),WW=a("a"),qKo=o("CanineForMultipleChoice"),jKo=o(" (CANINE model)"),DKo=l(),Bv=a("li"),X0e=a("strong"),GKo=o("convbert"),OKo=o(" \u2014 "),QW=a("a"),VKo=o("ConvBertForMultipleChoice"),XKo=o(" (ConvBERT model)"),zKo=l(),Iv=a("li"),z0e=a("strong"),WKo=o("data2vec-text"),QKo=o(" \u2014 "),UW=a("a"),UKo=o("Data2VecTextForMultipleChoice"),HKo=o(" (Data2VecText model)"),JKo=l(),Nv=a("li"),W0e=a("strong"),YKo=o("deberta-v2"),KKo=o(" \u2014 "),HW=a("a"),ZKo=o("DebertaV2ForMultipleChoice"),eZo=o(" (DeBERTa-v2 model)"),oZo=l(),qv=a("li"),Q0e=a("strong"),rZo=o("distilbert"),tZo=o(" \u2014 "),JW=a("a"),aZo=o("DistilBertForMultipleChoice"),nZo=o(" (DistilBERT model)"),sZo=l(),jv=a("li"),U0e=a("strong"),lZo=o("electra"),iZo=o(" \u2014 "),YW=a("a"),dZo=o("ElectraForMultipleChoice"),cZo=o(" (ELECTRA model)"),fZo=l(),Dv=a("li"),H0e=a("strong"),mZo=o("flaubert"),gZo=o(" \u2014 "),KW=a("a"),hZo=o("FlaubertForMultipleChoice"),pZo=o(" (FlauBERT model)"),_Zo=l(),Gv=a("li"),J0e=a("strong"),uZo=o("fnet"),bZo=o(" \u2014 "),ZW=a("a"),vZo=o("FNetForMultipleChoice"),FZo=o(" (FNet model)"),TZo=l(),Ov=a("li"),Y0e=a("strong"),MZo=o("funnel"),EZo=o(" \u2014 "),eQ=a("a"),CZo=o("FunnelForMultipleChoice"),wZo=o(" (Funnel Transformer model)"),AZo=l(),Vv=a("li"),K0e=a("strong"),LZo=o("ibert"),yZo=o(" \u2014 "),oQ=a("a"),xZo=o("IBertForMultipleChoice"),$Zo=o(" (I-BERT model)"),kZo=l(),Xv=a("li"),Z0e=a("strong"),SZo=o("longformer"),RZo=o(" \u2014 "),rQ=a("a"),PZo=o("LongformerForMultipleChoice"),BZo=o(" (Longformer model)"),IZo=l(),zv=a("li"),e1e=a("strong"),NZo=o("luke"),qZo=o(" \u2014 "),tQ=a("a"),jZo=o("LukeForMultipleChoice"),DZo=o(" (LUKE model)"),GZo=l(),Wv=a("li"),o1e=a("strong"),OZo=o("megatron-bert"),VZo=o(" \u2014 "),aQ=a("a"),XZo=o("MegatronBertForMultipleChoice"),zZo=o(" (Megatron-BERT model)"),WZo=l(),Qv=a("li"),r1e=a("strong"),QZo=o("mobilebert"),UZo=o(" \u2014 "),nQ=a("a"),HZo=o("MobileBertForMultipleChoice"),JZo=o(" (MobileBERT model)"),YZo=l(),Uv=a("li"),t1e=a("strong"),KZo=o("mpnet"),ZZo=o(" \u2014 "),sQ=a("a"),eer=o("MPNetForMultipleChoice"),oer=o(" (MPNet model)"),rer=l(),Hv=a("li"),a1e=a("strong"),ter=o("nezha"),aer=o(" \u2014 "),lQ=a("a"),ner=o("NezhaForMultipleChoice"),ser=o(" (Nezha model)"),ler=l(),Jv=a("li"),n1e=a("strong"),ier=o("nystromformer"),der=o(" \u2014 "),iQ=a("a"),cer=o("NystromformerForMultipleChoice"),fer=o(" (Nystr\xF6mformer model)"),mer=l(),Yv=a("li"),s1e=a("strong"),ger=o("qdqbert"),her=o(" \u2014 "),dQ=a("a"),per=o("QDQBertForMultipleChoice"),_er=o(" (QDQBert model)"),uer=l(),Kv=a("li"),l1e=a("strong"),ber=o("rembert"),ver=o(" \u2014 "),cQ=a("a"),Fer=o("RemBertForMultipleChoice"),Ter=o(" (RemBERT model)"),Mer=l(),Zv=a("li"),i1e=a("strong"),Eer=o("roberta"),Cer=o(" \u2014 "),fQ=a("a"),wer=o("RobertaForMultipleChoice"),Aer=o(" (RoBERTa model)"),Ler=l(),eF=a("li"),d1e=a("strong"),yer=o("roformer"),xer=o(" \u2014 "),mQ=a("a"),$er=o("RoFormerForMultipleChoice"),ker=o(" (RoFormer model)"),Ser=l(),oF=a("li"),c1e=a("strong"),Rer=o("squeezebert"),Per=o(" \u2014 "),gQ=a("a"),Ber=o("SqueezeBertForMultipleChoice"),Ier=o(" (SqueezeBERT model)"),Ner=l(),rF=a("li"),f1e=a("strong"),qer=o("xlm"),jer=o(" \u2014 "),hQ=a("a"),Der=o("XLMForMultipleChoice"),Ger=o(" (XLM model)"),Oer=l(),tF=a("li"),m1e=a("strong"),Ver=o("xlm-roberta"),Xer=o(" \u2014 "),pQ=a("a"),zer=o("XLMRobertaForMultipleChoice"),Wer=o(" (XLM-RoBERTa model)"),Qer=l(),aF=a("li"),g1e=a("strong"),Uer=o("xlm-roberta-xl"),Her=o(" \u2014 "),_Q=a("a"),Jer=o("XLMRobertaXLForMultipleChoice"),Yer=o(" (XLM-RoBERTa-XL model)"),Ker=l(),nF=a("li"),h1e=a("strong"),Zer=o("xlnet"),eor=o(" \u2014 "),uQ=a("a"),oor=o("XLNetForMultipleChoice"),ror=o(" (XLNet model)"),tor=l(),sF=a("li"),p1e=a("strong"),aor=o("yoso"),nor=o(" \u2014 "),bQ=a("a"),sor=o("YosoForMultipleChoice"),lor=o(" (YOSO model)"),ior=l(),lF=a("p"),dor=o("The model is set in evaluation mode by default using "),_1e=a("code"),cor=o("model.eval()"),mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),gor=o("model.train()"),hor=l(),F(iF.$$.fragment),wUe=l(),Ed=a("h2"),dF=a("a"),b1e=a("span"),F(E9.$$.fragment),por=l(),v1e=a("span"),_or=o("AutoModelForNextSentencePrediction"),AUe=l(),jo=a("div"),F(C9.$$.fragment),uor=l(),Cd=a("p"),bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vQ=a("a"),vor=o("from_pretrained()"),For=o(" class method or the "),FQ=a("a"),Tor=o("from_config()"),Mor=o(` class
method.`),Eor=l(),w9=a("p"),Cor=o("This class cannot be instantiated directly using "),F1e=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),Lor=l(),vt=a("div"),F(A9.$$.fragment),yor=l(),T1e=a("p"),xor=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$or=l(),wd=a("p"),kor=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),Sor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Por=o("from_pretrained()"),Bor=o(" to load the model weights."),Ior=l(),F(cF.$$.fragment),Nor=l(),ao=a("div"),F(L9.$$.fragment),qor=l(),E1e=a("p"),jor=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Dor=l(),Ja=a("p"),Gor=o("The model class to instantiate is selected based on the "),C1e=a("code"),Oor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),Wor=o("pretrained_model_name_or_path"),Qor=o(":"),Uor=l(),Do=a("ul"),fF=a("li"),L1e=a("strong"),Hor=o("bert"),Jor=o(" \u2014 "),MQ=a("a"),Yor=o("BertForNextSentencePrediction"),Kor=o(" (BERT model)"),Zor=l(),mF=a("li"),y1e=a("strong"),err=o("fnet"),orr=o(" \u2014 "),EQ=a("a"),rrr=o("FNetForNextSentencePrediction"),trr=o(" (FNet model)"),arr=l(),gF=a("li"),x1e=a("strong"),nrr=o("megatron-bert"),srr=o(" \u2014 "),CQ=a("a"),lrr=o("MegatronBertForNextSentencePrediction"),irr=o(" (Megatron-BERT model)"),drr=l(),hF=a("li"),$1e=a("strong"),crr=o("mobilebert"),frr=o(" \u2014 "),wQ=a("a"),mrr=o("MobileBertForNextSentencePrediction"),grr=o(" (MobileBERT model)"),hrr=l(),pF=a("li"),k1e=a("strong"),prr=o("nezha"),_rr=o(" \u2014 "),AQ=a("a"),urr=o("NezhaForNextSentencePrediction"),brr=o(" (Nezha model)"),vrr=l(),_F=a("li"),S1e=a("strong"),Frr=o("qdqbert"),Trr=o(" \u2014 "),LQ=a("a"),Mrr=o("QDQBertForNextSentencePrediction"),Err=o(" (QDQBert model)"),Crr=l(),uF=a("p"),wrr=o("The model is set in evaluation mode by default using "),R1e=a("code"),Arr=o("model.eval()"),Lrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),yrr=o("model.train()"),xrr=l(),F(bF.$$.fragment),LUe=l(),Ad=a("h2"),vF=a("a"),B1e=a("span"),F(y9.$$.fragment),$rr=l(),I1e=a("span"),krr=o("AutoModelForTokenClassification"),yUe=l(),Go=a("div"),F(x9.$$.fragment),Srr=l(),Ld=a("p"),Rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yQ=a("a"),Prr=o("from_pretrained()"),Brr=o(" class method or the "),xQ=a("a"),Irr=o("from_config()"),Nrr=o(` class
method.`),qrr=l(),$9=a("p"),jrr=o("This class cannot be instantiated directly using "),N1e=a("code"),Drr=o("__init__()"),Grr=o(" (throws an error)."),Orr=l(),Ft=a("div"),F(k9.$$.fragment),Vrr=l(),q1e=a("p"),Xrr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zrr=l(),yd=a("p"),Wrr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),Qrr=o("not"),Urr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Hrr=o("from_pretrained()"),Jrr=o(" to load the model weights."),Yrr=l(),F(FF.$$.fragment),Krr=l(),no=a("div"),F(S9.$$.fragment),Zrr=l(),D1e=a("p"),etr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),otr=l(),Ya=a("p"),rtr=o("The model class to instantiate is selected based on the "),G1e=a("code"),ttr=o("model_type"),atr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),ntr=o("pretrained_model_name_or_path"),str=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),ltr=o("pretrained_model_name_or_path"),itr=o(":"),dtr=l(),H=a("ul"),TF=a("li"),X1e=a("strong"),ctr=o("albert"),ftr=o(" \u2014 "),kQ=a("a"),mtr=o("AlbertForTokenClassification"),gtr=o(" (ALBERT model)"),htr=l(),MF=a("li"),z1e=a("strong"),ptr=o("bert"),_tr=o(" \u2014 "),SQ=a("a"),utr=o("BertForTokenClassification"),btr=o(" (BERT model)"),vtr=l(),EF=a("li"),W1e=a("strong"),Ftr=o("big_bird"),Ttr=o(" \u2014 "),RQ=a("a"),Mtr=o("BigBirdForTokenClassification"),Etr=o(" (BigBird model)"),Ctr=l(),CF=a("li"),Q1e=a("strong"),wtr=o("bloom"),Atr=o(" \u2014 "),PQ=a("a"),Ltr=o("BloomForTokenClassification"),ytr=o(" (BLOOM model)"),xtr=l(),wF=a("li"),U1e=a("strong"),$tr=o("camembert"),ktr=o(" \u2014 "),BQ=a("a"),Str=o("CamembertForTokenClassification"),Rtr=o(" (CamemBERT model)"),Ptr=l(),AF=a("li"),H1e=a("strong"),Btr=o("canine"),Itr=o(" \u2014 "),IQ=a("a"),Ntr=o("CanineForTokenClassification"),qtr=o(" (CANINE model)"),jtr=l(),LF=a("li"),J1e=a("strong"),Dtr=o("convbert"),Gtr=o(" \u2014 "),NQ=a("a"),Otr=o("ConvBertForTokenClassification"),Vtr=o(" (ConvBERT model)"),Xtr=l(),yF=a("li"),Y1e=a("strong"),ztr=o("data2vec-text"),Wtr=o(" \u2014 "),qQ=a("a"),Qtr=o("Data2VecTextForTokenClassification"),Utr=o(" (Data2VecText model)"),Htr=l(),xF=a("li"),K1e=a("strong"),Jtr=o("deberta"),Ytr=o(" \u2014 "),jQ=a("a"),Ktr=o("DebertaForTokenClassification"),Ztr=o(" (DeBERTa model)"),ear=l(),$F=a("li"),Z1e=a("strong"),oar=o("deberta-v2"),rar=o(" \u2014 "),DQ=a("a"),tar=o("DebertaV2ForTokenClassification"),aar=o(" (DeBERTa-v2 model)"),nar=l(),kF=a("li"),ebe=a("strong"),sar=o("distilbert"),lar=o(" \u2014 "),GQ=a("a"),iar=o("DistilBertForTokenClassification"),dar=o(" (DistilBERT model)"),car=l(),SF=a("li"),obe=a("strong"),far=o("electra"),mar=o(" \u2014 "),OQ=a("a"),gar=o("ElectraForTokenClassification"),har=o(" (ELECTRA model)"),par=l(),RF=a("li"),rbe=a("strong"),_ar=o("flaubert"),uar=o(" \u2014 "),VQ=a("a"),bar=o("FlaubertForTokenClassification"),Far=o(" (FlauBERT model)"),Tar=l(),PF=a("li"),tbe=a("strong"),Mar=o("fnet"),Ear=o(" \u2014 "),XQ=a("a"),Car=o("FNetForTokenClassification"),war=o(" (FNet model)"),Aar=l(),BF=a("li"),abe=a("strong"),Lar=o("funnel"),yar=o(" \u2014 "),zQ=a("a"),xar=o("FunnelForTokenClassification"),$ar=o(" (Funnel Transformer model)"),kar=l(),IF=a("li"),nbe=a("strong"),Sar=o("gpt2"),Rar=o(" \u2014 "),WQ=a("a"),Par=o("GPT2ForTokenClassification"),Bar=o(" (OpenAI GPT-2 model)"),Iar=l(),NF=a("li"),sbe=a("strong"),Nar=o("ibert"),qar=o(" \u2014 "),QQ=a("a"),jar=o("IBertForTokenClassification"),Dar=o(" (I-BERT model)"),Gar=l(),qF=a("li"),lbe=a("strong"),Oar=o("layoutlm"),Var=o(" \u2014 "),UQ=a("a"),Xar=o("LayoutLMForTokenClassification"),zar=o(" (LayoutLM model)"),War=l(),jF=a("li"),ibe=a("strong"),Qar=o("layoutlmv2"),Uar=o(" \u2014 "),HQ=a("a"),Har=o("LayoutLMv2ForTokenClassification"),Jar=o(" (LayoutLMv2 model)"),Yar=l(),DF=a("li"),dbe=a("strong"),Kar=o("layoutlmv3"),Zar=o(" \u2014 "),JQ=a("a"),enr=o("LayoutLMv3ForTokenClassification"),onr=o(" (LayoutLMv3 model)"),rnr=l(),GF=a("li"),cbe=a("strong"),tnr=o("longformer"),anr=o(" \u2014 "),YQ=a("a"),nnr=o("LongformerForTokenClassification"),snr=o(" (Longformer model)"),lnr=l(),OF=a("li"),fbe=a("strong"),inr=o("luke"),dnr=o(" \u2014 "),KQ=a("a"),cnr=o("LukeForTokenClassification"),fnr=o(" (LUKE model)"),mnr=l(),VF=a("li"),mbe=a("strong"),gnr=o("megatron-bert"),hnr=o(" \u2014 "),ZQ=a("a"),pnr=o("MegatronBertForTokenClassification"),_nr=o(" (Megatron-BERT model)"),unr=l(),XF=a("li"),gbe=a("strong"),bnr=o("mobilebert"),vnr=o(" \u2014 "),eU=a("a"),Fnr=o("MobileBertForTokenClassification"),Tnr=o(" (MobileBERT model)"),Mnr=l(),zF=a("li"),hbe=a("strong"),Enr=o("mpnet"),Cnr=o(" \u2014 "),oU=a("a"),wnr=o("MPNetForTokenClassification"),Anr=o(" (MPNet model)"),Lnr=l(),WF=a("li"),pbe=a("strong"),ynr=o("nezha"),xnr=o(" \u2014 "),rU=a("a"),$nr=o("NezhaForTokenClassification"),knr=o(" (Nezha model)"),Snr=l(),QF=a("li"),_be=a("strong"),Rnr=o("nystromformer"),Pnr=o(" \u2014 "),tU=a("a"),Bnr=o("NystromformerForTokenClassification"),Inr=o(" (Nystr\xF6mformer model)"),Nnr=l(),UF=a("li"),ube=a("strong"),qnr=o("qdqbert"),jnr=o(" \u2014 "),aU=a("a"),Dnr=o("QDQBertForTokenClassification"),Gnr=o(" (QDQBert model)"),Onr=l(),HF=a("li"),bbe=a("strong"),Vnr=o("rembert"),Xnr=o(" \u2014 "),nU=a("a"),znr=o("RemBertForTokenClassification"),Wnr=o(" (RemBERT model)"),Qnr=l(),JF=a("li"),vbe=a("strong"),Unr=o("roberta"),Hnr=o(" \u2014 "),sU=a("a"),Jnr=o("RobertaForTokenClassification"),Ynr=o(" (RoBERTa model)"),Knr=l(),YF=a("li"),Fbe=a("strong"),Znr=o("roformer"),esr=o(" \u2014 "),lU=a("a"),osr=o("RoFormerForTokenClassification"),rsr=o(" (RoFormer model)"),tsr=l(),KF=a("li"),Tbe=a("strong"),asr=o("squeezebert"),nsr=o(" \u2014 "),iU=a("a"),ssr=o("SqueezeBertForTokenClassification"),lsr=o(" (SqueezeBERT model)"),isr=l(),ZF=a("li"),Mbe=a("strong"),dsr=o("xlm"),csr=o(" \u2014 "),dU=a("a"),fsr=o("XLMForTokenClassification"),msr=o(" (XLM model)"),gsr=l(),eT=a("li"),Ebe=a("strong"),hsr=o("xlm-roberta"),psr=o(" \u2014 "),cU=a("a"),_sr=o("XLMRobertaForTokenClassification"),usr=o(" (XLM-RoBERTa model)"),bsr=l(),oT=a("li"),Cbe=a("strong"),vsr=o("xlm-roberta-xl"),Fsr=o(" \u2014 "),fU=a("a"),Tsr=o("XLMRobertaXLForTokenClassification"),Msr=o(" (XLM-RoBERTa-XL model)"),Esr=l(),rT=a("li"),wbe=a("strong"),Csr=o("xlnet"),wsr=o(" \u2014 "),mU=a("a"),Asr=o("XLNetForTokenClassification"),Lsr=o(" (XLNet model)"),ysr=l(),tT=a("li"),Abe=a("strong"),xsr=o("yoso"),$sr=o(" \u2014 "),gU=a("a"),ksr=o("YosoForTokenClassification"),Ssr=o(" (YOSO model)"),Rsr=l(),aT=a("p"),Psr=o("The model is set in evaluation mode by default using "),Lbe=a("code"),Bsr=o("model.eval()"),Isr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=a("code"),Nsr=o("model.train()"),qsr=l(),F(nT.$$.fragment),xUe=l(),xd=a("h2"),sT=a("a"),xbe=a("span"),F(R9.$$.fragment),jsr=l(),$be=a("span"),Dsr=o("AutoModelForQuestionAnswering"),$Ue=l(),Oo=a("div"),F(P9.$$.fragment),Gsr=l(),$d=a("p"),Osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hU=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" class method or the "),pU=a("a"),zsr=o("from_config()"),Wsr=o(` class
method.`),Qsr=l(),B9=a("p"),Usr=o("This class cannot be instantiated directly using "),kbe=a("code"),Hsr=o("__init__()"),Jsr=o(" (throws an error)."),Ysr=l(),Tt=a("div"),F(I9.$$.fragment),Ksr=l(),Sbe=a("p"),Zsr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),elr=l(),kd=a("p"),olr=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),rlr=o("not"),tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),alr=o("from_pretrained()"),nlr=o(" to load the model weights."),slr=l(),F(lT.$$.fragment),llr=l(),so=a("div"),F(N9.$$.fragment),ilr=l(),Pbe=a("p"),dlr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),clr=l(),Ka=a("p"),flr=o("The model class to instantiate is selected based on the "),Bbe=a("code"),mlr=o("model_type"),glr=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),hlr=o("pretrained_model_name_or_path"),plr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),_lr=o("pretrained_model_name_or_path"),ulr=o(":"),blr=l(),V=a("ul"),iT=a("li"),qbe=a("strong"),vlr=o("albert"),Flr=o(" \u2014 "),uU=a("a"),Tlr=o("AlbertForQuestionAnswering"),Mlr=o(" (ALBERT model)"),Elr=l(),dT=a("li"),jbe=a("strong"),Clr=o("bart"),wlr=o(" \u2014 "),bU=a("a"),Alr=o("BartForQuestionAnswering"),Llr=o(" (BART model)"),ylr=l(),cT=a("li"),Dbe=a("strong"),xlr=o("bert"),$lr=o(" \u2014 "),vU=a("a"),klr=o("BertForQuestionAnswering"),Slr=o(" (BERT model)"),Rlr=l(),fT=a("li"),Gbe=a("strong"),Plr=o("big_bird"),Blr=o(" \u2014 "),FU=a("a"),Ilr=o("BigBirdForQuestionAnswering"),Nlr=o(" (BigBird model)"),qlr=l(),mT=a("li"),Obe=a("strong"),jlr=o("bigbird_pegasus"),Dlr=o(" \u2014 "),TU=a("a"),Glr=o("BigBirdPegasusForQuestionAnswering"),Olr=o(" (BigBird-Pegasus model)"),Vlr=l(),gT=a("li"),Vbe=a("strong"),Xlr=o("camembert"),zlr=o(" \u2014 "),MU=a("a"),Wlr=o("CamembertForQuestionAnswering"),Qlr=o(" (CamemBERT model)"),Ulr=l(),hT=a("li"),Xbe=a("strong"),Hlr=o("canine"),Jlr=o(" \u2014 "),EU=a("a"),Ylr=o("CanineForQuestionAnswering"),Klr=o(" (CANINE model)"),Zlr=l(),pT=a("li"),zbe=a("strong"),eir=o("convbert"),oir=o(" \u2014 "),CU=a("a"),rir=o("ConvBertForQuestionAnswering"),tir=o(" (ConvBERT model)"),air=l(),_T=a("li"),Wbe=a("strong"),nir=o("data2vec-text"),sir=o(" \u2014 "),wU=a("a"),lir=o("Data2VecTextForQuestionAnswering"),iir=o(" (Data2VecText model)"),dir=l(),uT=a("li"),Qbe=a("strong"),cir=o("deberta"),fir=o(" \u2014 "),AU=a("a"),mir=o("DebertaForQuestionAnswering"),gir=o(" (DeBERTa model)"),hir=l(),bT=a("li"),Ube=a("strong"),pir=o("deberta-v2"),_ir=o(" \u2014 "),LU=a("a"),uir=o("DebertaV2ForQuestionAnswering"),bir=o(" (DeBERTa-v2 model)"),vir=l(),vT=a("li"),Hbe=a("strong"),Fir=o("distilbert"),Tir=o(" \u2014 "),yU=a("a"),Mir=o("DistilBertForQuestionAnswering"),Eir=o(" (DistilBERT model)"),Cir=l(),FT=a("li"),Jbe=a("strong"),wir=o("electra"),Air=o(" \u2014 "),xU=a("a"),Lir=o("ElectraForQuestionAnswering"),yir=o(" (ELECTRA model)"),xir=l(),TT=a("li"),Ybe=a("strong"),$ir=o("flaubert"),kir=o(" \u2014 "),$U=a("a"),Sir=o("FlaubertForQuestionAnsweringSimple"),Rir=o(" (FlauBERT model)"),Pir=l(),MT=a("li"),Kbe=a("strong"),Bir=o("fnet"),Iir=o(" \u2014 "),kU=a("a"),Nir=o("FNetForQuestionAnswering"),qir=o(" (FNet model)"),jir=l(),ET=a("li"),Zbe=a("strong"),Dir=o("funnel"),Gir=o(" \u2014 "),SU=a("a"),Oir=o("FunnelForQuestionAnswering"),Vir=o(" (Funnel Transformer model)"),Xir=l(),CT=a("li"),eve=a("strong"),zir=o("gptj"),Wir=o(" \u2014 "),RU=a("a"),Qir=o("GPTJForQuestionAnswering"),Uir=o(" (GPT-J model)"),Hir=l(),wT=a("li"),ove=a("strong"),Jir=o("ibert"),Yir=o(" \u2014 "),PU=a("a"),Kir=o("IBertForQuestionAnswering"),Zir=o(" (I-BERT model)"),edr=l(),AT=a("li"),rve=a("strong"),odr=o("layoutlmv2"),rdr=o(" \u2014 "),BU=a("a"),tdr=o("LayoutLMv2ForQuestionAnswering"),adr=o(" (LayoutLMv2 model)"),ndr=l(),LT=a("li"),tve=a("strong"),sdr=o("layoutlmv3"),ldr=o(" \u2014 "),IU=a("a"),idr=o("LayoutLMv3ForQuestionAnswering"),ddr=o(" (LayoutLMv3 model)"),cdr=l(),yT=a("li"),ave=a("strong"),fdr=o("led"),mdr=o(" \u2014 "),NU=a("a"),gdr=o("LEDForQuestionAnswering"),hdr=o(" (LED model)"),pdr=l(),xT=a("li"),nve=a("strong"),_dr=o("longformer"),udr=o(" \u2014 "),qU=a("a"),bdr=o("LongformerForQuestionAnswering"),vdr=o(" (Longformer model)"),Fdr=l(),$T=a("li"),sve=a("strong"),Tdr=o("luke"),Mdr=o(" \u2014 "),jU=a("a"),Edr=o("LukeForQuestionAnswering"),Cdr=o(" (LUKE model)"),wdr=l(),kT=a("li"),lve=a("strong"),Adr=o("lxmert"),Ldr=o(" \u2014 "),DU=a("a"),ydr=o("LxmertForQuestionAnswering"),xdr=o(" (LXMERT model)"),$dr=l(),ST=a("li"),ive=a("strong"),kdr=o("mbart"),Sdr=o(" \u2014 "),GU=a("a"),Rdr=o("MBartForQuestionAnswering"),Pdr=o(" (mBART model)"),Bdr=l(),RT=a("li"),dve=a("strong"),Idr=o("megatron-bert"),Ndr=o(" \u2014 "),OU=a("a"),qdr=o("MegatronBertForQuestionAnswering"),jdr=o(" (Megatron-BERT model)"),Ddr=l(),PT=a("li"),cve=a("strong"),Gdr=o("mobilebert"),Odr=o(" \u2014 "),VU=a("a"),Vdr=o("MobileBertForQuestionAnswering"),Xdr=o(" (MobileBERT model)"),zdr=l(),BT=a("li"),fve=a("strong"),Wdr=o("mpnet"),Qdr=o(" \u2014 "),XU=a("a"),Udr=o("MPNetForQuestionAnswering"),Hdr=o(" (MPNet model)"),Jdr=l(),IT=a("li"),mve=a("strong"),Ydr=o("mvp"),Kdr=o(" \u2014 "),zU=a("a"),Zdr=o("MvpForQuestionAnswering"),ecr=o(" (MVP model)"),ocr=l(),NT=a("li"),gve=a("strong"),rcr=o("nezha"),tcr=o(" \u2014 "),WU=a("a"),acr=o("NezhaForQuestionAnswering"),ncr=o(" (Nezha model)"),scr=l(),qT=a("li"),hve=a("strong"),lcr=o("nystromformer"),icr=o(" \u2014 "),QU=a("a"),dcr=o("NystromformerForQuestionAnswering"),ccr=o(" (Nystr\xF6mformer model)"),fcr=l(),jT=a("li"),pve=a("strong"),mcr=o("qdqbert"),gcr=o(" \u2014 "),UU=a("a"),hcr=o("QDQBertForQuestionAnswering"),pcr=o(" (QDQBert model)"),_cr=l(),DT=a("li"),_ve=a("strong"),ucr=o("reformer"),bcr=o(" \u2014 "),HU=a("a"),vcr=o("ReformerForQuestionAnswering"),Fcr=o(" (Reformer model)"),Tcr=l(),GT=a("li"),uve=a("strong"),Mcr=o("rembert"),Ecr=o(" \u2014 "),JU=a("a"),Ccr=o("RemBertForQuestionAnswering"),wcr=o(" (RemBERT model)"),Acr=l(),OT=a("li"),bve=a("strong"),Lcr=o("roberta"),ycr=o(" \u2014 "),YU=a("a"),xcr=o("RobertaForQuestionAnswering"),$cr=o(" (RoBERTa model)"),kcr=l(),VT=a("li"),vve=a("strong"),Scr=o("roformer"),Rcr=o(" \u2014 "),KU=a("a"),Pcr=o("RoFormerForQuestionAnswering"),Bcr=o(" (RoFormer model)"),Icr=l(),XT=a("li"),Fve=a("strong"),Ncr=o("splinter"),qcr=o(" \u2014 "),ZU=a("a"),jcr=o("SplinterForQuestionAnswering"),Dcr=o(" (Splinter model)"),Gcr=l(),zT=a("li"),Tve=a("strong"),Ocr=o("squeezebert"),Vcr=o(" \u2014 "),eH=a("a"),Xcr=o("SqueezeBertForQuestionAnswering"),zcr=o(" (SqueezeBERT model)"),Wcr=l(),WT=a("li"),Mve=a("strong"),Qcr=o("xlm"),Ucr=o(" \u2014 "),oH=a("a"),Hcr=o("XLMForQuestionAnsweringSimple"),Jcr=o(" (XLM model)"),Ycr=l(),QT=a("li"),Eve=a("strong"),Kcr=o("xlm-roberta"),Zcr=o(" \u2014 "),rH=a("a"),efr=o("XLMRobertaForQuestionAnswering"),ofr=o(" (XLM-RoBERTa model)"),rfr=l(),UT=a("li"),Cve=a("strong"),tfr=o("xlm-roberta-xl"),afr=o(" \u2014 "),tH=a("a"),nfr=o("XLMRobertaXLForQuestionAnswering"),sfr=o(" (XLM-RoBERTa-XL model)"),lfr=l(),HT=a("li"),wve=a("strong"),ifr=o("xlnet"),dfr=o(" \u2014 "),aH=a("a"),cfr=o("XLNetForQuestionAnsweringSimple"),ffr=o(" (XLNet model)"),mfr=l(),JT=a("li"),Ave=a("strong"),gfr=o("yoso"),hfr=o(" \u2014 "),nH=a("a"),pfr=o("YosoForQuestionAnswering"),_fr=o(" (YOSO model)"),ufr=l(),YT=a("p"),bfr=o("The model is set in evaluation mode by default using "),Lve=a("code"),vfr=o("model.eval()"),Ffr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=a("code"),Tfr=o("model.train()"),Mfr=l(),F(KT.$$.fragment),kUe=l(),Sd=a("h2"),ZT=a("a"),xve=a("span"),F(q9.$$.fragment),Efr=l(),$ve=a("span"),Cfr=o("AutoModelForTableQuestionAnswering"),SUe=l(),Vo=a("div"),F(j9.$$.fragment),wfr=l(),Rd=a("p"),Afr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sH=a("a"),Lfr=o("from_pretrained()"),yfr=o(" class method or the "),lH=a("a"),xfr=o("from_config()"),$fr=o(` class
method.`),kfr=l(),D9=a("p"),Sfr=o("This class cannot be instantiated directly using "),kve=a("code"),Rfr=o("__init__()"),Pfr=o(" (throws an error)."),Bfr=l(),Mt=a("div"),F(G9.$$.fragment),Ifr=l(),Sve=a("p"),Nfr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qfr=l(),Pd=a("p"),jfr=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),Dfr=o("not"),Gfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),Ofr=o("from_pretrained()"),Vfr=o(" to load the model weights."),Xfr=l(),F(e8.$$.fragment),zfr=l(),lo=a("div"),F(O9.$$.fragment),Wfr=l(),Pve=a("p"),Qfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ufr=l(),Za=a("p"),Hfr=o("The model class to instantiate is selected based on the "),Bve=a("code"),Jfr=o("model_type"),Yfr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),Kfr=o("pretrained_model_name_or_path"),Zfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(":"),rmr=l(),qve=a("ul"),o8=a("li"),jve=a("strong"),tmr=o("tapas"),amr=o(" \u2014 "),dH=a("a"),nmr=o("TapasForQuestionAnswering"),smr=o(" (TAPAS model)"),lmr=l(),r8=a("p"),imr=o("The model is set in evaluation mode by default using "),Dve=a("code"),dmr=o("model.eval()"),cmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gve=a("code"),fmr=o("model.train()"),mmr=l(),F(t8.$$.fragment),RUe=l(),Bd=a("h2"),a8=a("a"),Ove=a("span"),F(V9.$$.fragment),gmr=l(),Vve=a("span"),hmr=o("AutoModelForImageClassification"),PUe=l(),Xo=a("div"),F(X9.$$.fragment),pmr=l(),Id=a("p"),_mr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cH=a("a"),umr=o("from_pretrained()"),bmr=o(" class method or the "),fH=a("a"),vmr=o("from_config()"),Fmr=o(` class
method.`),Tmr=l(),z9=a("p"),Mmr=o("This class cannot be instantiated directly using "),Xve=a("code"),Emr=o("__init__()"),Cmr=o(" (throws an error)."),wmr=l(),Et=a("div"),F(W9.$$.fragment),Amr=l(),zve=a("p"),Lmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ymr=l(),Nd=a("p"),xmr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),$mr=o("not"),kmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),Smr=o("from_pretrained()"),Rmr=o(" to load the model weights."),Pmr=l(),F(n8.$$.fragment),Bmr=l(),io=a("div"),F(Q9.$$.fragment),Imr=l(),Qve=a("p"),Nmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qmr=l(),en=a("p"),jmr=o("The model class to instantiate is selected based on the "),Uve=a("code"),Dmr=o("model_type"),Gmr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),Omr=o("pretrained_model_name_or_path"),Vmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),Xmr=o("pretrained_model_name_or_path"),zmr=o(":"),Wmr=l(),be=a("ul"),s8=a("li"),Yve=a("strong"),Qmr=o("beit"),Umr=o(" \u2014 "),gH=a("a"),Hmr=o("BeitForImageClassification"),Jmr=o(" (BEiT model)"),Ymr=l(),l8=a("li"),Kve=a("strong"),Kmr=o("convnext"),Zmr=o(" \u2014 "),hH=a("a"),egr=o("ConvNextForImageClassification"),ogr=o(" (ConvNeXT model)"),rgr=l(),i8=a("li"),Zve=a("strong"),tgr=o("cvt"),agr=o(" \u2014 "),pH=a("a"),ngr=o("CvtForImageClassification"),sgr=o(" (CvT model)"),lgr=l(),d8=a("li"),eFe=a("strong"),igr=o("data2vec-vision"),dgr=o(" \u2014 "),_H=a("a"),cgr=o("Data2VecVisionForImageClassification"),fgr=o(" (Data2VecVision model)"),mgr=l(),sl=a("li"),oFe=a("strong"),ggr=o("deit"),hgr=o(" \u2014 "),uH=a("a"),pgr=o("DeiTForImageClassification"),_gr=o(" or "),bH=a("a"),ugr=o("DeiTForImageClassificationWithTeacher"),bgr=o(" (DeiT model)"),vgr=l(),c8=a("li"),rFe=a("strong"),Fgr=o("imagegpt"),Tgr=o(" \u2014 "),vH=a("a"),Mgr=o("ImageGPTForImageClassification"),Egr=o(" (ImageGPT model)"),Cgr=l(),ll=a("li"),tFe=a("strong"),wgr=o("levit"),Agr=o(" \u2014 "),FH=a("a"),Lgr=o("LevitForImageClassification"),ygr=o(" or "),TH=a("a"),xgr=o("LevitForImageClassificationWithTeacher"),$gr=o(" (LeViT model)"),kgr=l(),f8=a("li"),aFe=a("strong"),Sgr=o("mobilevit"),Rgr=o(" \u2014 "),MH=a("a"),Pgr=o("MobileViTForImageClassification"),Bgr=o(" (MobileViT model)"),Igr=l(),Ct=a("li"),nFe=a("strong"),Ngr=o("perceiver"),qgr=o(" \u2014 "),EH=a("a"),jgr=o("PerceiverForImageClassificationLearned"),Dgr=o(" or "),CH=a("a"),Ggr=o("PerceiverForImageClassificationFourier"),Ogr=o(" or "),wH=a("a"),Vgr=o("PerceiverForImageClassificationConvProcessing"),Xgr=o(" (Perceiver model)"),zgr=l(),m8=a("li"),sFe=a("strong"),Wgr=o("poolformer"),Qgr=o(" \u2014 "),AH=a("a"),Ugr=o("PoolFormerForImageClassification"),Hgr=o(" (PoolFormer model)"),Jgr=l(),g8=a("li"),lFe=a("strong"),Ygr=o("regnet"),Kgr=o(" \u2014 "),LH=a("a"),Zgr=o("RegNetForImageClassification"),ehr=o(" (RegNet model)"),ohr=l(),h8=a("li"),iFe=a("strong"),rhr=o("resnet"),thr=o(" \u2014 "),yH=a("a"),ahr=o("ResNetForImageClassification"),nhr=o(" (ResNet model)"),shr=l(),p8=a("li"),dFe=a("strong"),lhr=o("segformer"),ihr=o(" \u2014 "),xH=a("a"),dhr=o("SegformerForImageClassification"),chr=o(" (SegFormer model)"),fhr=l(),_8=a("li"),cFe=a("strong"),mhr=o("swin"),ghr=o(" \u2014 "),$H=a("a"),hhr=o("SwinForImageClassification"),phr=o(" (Swin Transformer model)"),_hr=l(),u8=a("li"),fFe=a("strong"),uhr=o("swinv2"),bhr=o(" \u2014 "),kH=a("a"),vhr=o("Swinv2ForImageClassification"),Fhr=o(" (Swin Transformer V2 model)"),Thr=l(),b8=a("li"),mFe=a("strong"),Mhr=o("van"),Ehr=o(" \u2014 "),SH=a("a"),Chr=o("VanForImageClassification"),whr=o(" (VAN model)"),Ahr=l(),v8=a("li"),gFe=a("strong"),Lhr=o("vit"),yhr=o(" \u2014 "),RH=a("a"),xhr=o("ViTForImageClassification"),$hr=o(" (ViT model)"),khr=l(),F8=a("p"),Shr=o("The model is set in evaluation mode by default using "),hFe=a("code"),Rhr=o("model.eval()"),Phr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pFe=a("code"),Bhr=o("model.train()"),Ihr=l(),F(T8.$$.fragment),BUe=l(),qd=a("h2"),M8=a("a"),_Fe=a("span"),F(U9.$$.fragment),Nhr=l(),uFe=a("span"),qhr=o("AutoModelForVideoClassification"),IUe=l(),zo=a("div"),F(H9.$$.fragment),jhr=l(),jd=a("p"),Dhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),PH=a("a"),Ghr=o("from_pretrained()"),Ohr=o(" class method or the "),BH=a("a"),Vhr=o("from_config()"),Xhr=o(` class
method.`),zhr=l(),J9=a("p"),Whr=o("This class cannot be instantiated directly using "),bFe=a("code"),Qhr=o("__init__()"),Uhr=o(" (throws an error)."),Hhr=l(),wt=a("div"),F(Y9.$$.fragment),Jhr=l(),vFe=a("p"),Yhr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Khr=l(),Dd=a("p"),Zhr=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),epr=o("not"),opr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),rpr=o("from_pretrained()"),tpr=o(" to load the model weights."),apr=l(),F(E8.$$.fragment),npr=l(),co=a("div"),F(K9.$$.fragment),spr=l(),TFe=a("p"),lpr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),ipr=l(),on=a("p"),dpr=o("The model class to instantiate is selected based on the "),MFe=a("code"),cpr=o("model_type"),fpr=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),mpr=o("pretrained_model_name_or_path"),gpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),hpr=o("pretrained_model_name_or_path"),ppr=o(":"),_pr=l(),wFe=a("ul"),C8=a("li"),AFe=a("strong"),upr=o("videomae"),bpr=o(" \u2014 "),NH=a("a"),vpr=o("VideoMAEForVideoClassification"),Fpr=o(" (VideoMAE model)"),Tpr=l(),w8=a("p"),Mpr=o("The model is set in evaluation mode by default using "),LFe=a("code"),Epr=o("model.eval()"),Cpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=a("code"),wpr=o("model.train()"),Apr=l(),F(A8.$$.fragment),NUe=l(),Gd=a("h2"),L8=a("a"),xFe=a("span"),F(Z9.$$.fragment),Lpr=l(),$Fe=a("span"),ypr=o("AutoModelForVision2Seq"),qUe=l(),Wo=a("div"),F(ex.$$.fragment),xpr=l(),Od=a("p"),$pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qH=a("a"),kpr=o("from_pretrained()"),Spr=o(" class method or the "),jH=a("a"),Rpr=o("from_config()"),Ppr=o(` class
method.`),Bpr=l(),ox=a("p"),Ipr=o("This class cannot be instantiated directly using "),kFe=a("code"),Npr=o("__init__()"),qpr=o(" (throws an error)."),jpr=l(),At=a("div"),F(rx.$$.fragment),Dpr=l(),SFe=a("p"),Gpr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Opr=l(),Vd=a("p"),Vpr=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),Xpr=o("not"),zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),Wpr=o("from_pretrained()"),Qpr=o(" to load the model weights."),Upr=l(),F(y8.$$.fragment),Hpr=l(),fo=a("div"),F(tx.$$.fragment),Jpr=l(),PFe=a("p"),Ypr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kpr=l(),rn=a("p"),Zpr=o("The model class to instantiate is selected based on the "),BFe=a("code"),e_r=o("model_type"),o_r=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),r_r=o("pretrained_model_name_or_path"),t_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(":"),s_r=l(),qFe=a("ul"),x8=a("li"),jFe=a("strong"),l_r=o("vision-encoder-decoder"),i_r=o(" \u2014 "),GH=a("a"),d_r=o("VisionEncoderDecoderModel"),c_r=o(" (Vision Encoder decoder model)"),f_r=l(),$8=a("p"),m_r=o("The model is set in evaluation mode by default using "),DFe=a("code"),g_r=o("model.eval()"),h_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GFe=a("code"),p_r=o("model.train()"),__r=l(),F(k8.$$.fragment),jUe=l(),Xd=a("h2"),S8=a("a"),OFe=a("span"),F(ax.$$.fragment),u_r=l(),VFe=a("span"),b_r=o("AutoModelForVisualQuestionAnswering"),DUe=l(),Qo=a("div"),F(nx.$$.fragment),v_r=l(),zd=a("p"),F_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OH=a("a"),T_r=o("from_pretrained()"),M_r=o(" class method or the "),VH=a("a"),E_r=o("from_config()"),C_r=o(` class
method.`),w_r=l(),sx=a("p"),A_r=o("This class cannot be instantiated directly using "),XFe=a("code"),L_r=o("__init__()"),y_r=o(" (throws an error)."),x_r=l(),Lt=a("div"),F(lx.$$.fragment),$_r=l(),zFe=a("p"),k_r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),S_r=l(),Wd=a("p"),R_r=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),P_r=o("not"),B_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),I_r=o("from_pretrained()"),N_r=o(" to load the model weights."),q_r=l(),F(R8.$$.fragment),j_r=l(),mo=a("div"),F(ix.$$.fragment),D_r=l(),QFe=a("p"),G_r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),O_r=l(),tn=a("p"),V_r=o("The model class to instantiate is selected based on the "),UFe=a("code"),X_r=o("model_type"),z_r=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),W_r=o("pretrained_model_name_or_path"),Q_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),U_r=o("pretrained_model_name_or_path"),H_r=o(":"),J_r=l(),YFe=a("ul"),P8=a("li"),KFe=a("strong"),Y_r=o("vilt"),K_r=o(" \u2014 "),zH=a("a"),Z_r=o("ViltForQuestionAnswering"),eur=o(" (ViLT model)"),our=l(),B8=a("p"),rur=o("The model is set in evaluation mode by default using "),ZFe=a("code"),tur=o("model.eval()"),aur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eTe=a("code"),nur=o("model.train()"),sur=l(),F(I8.$$.fragment),GUe=l(),Qd=a("h2"),N8=a("a"),oTe=a("span"),F(dx.$$.fragment),lur=l(),rTe=a("span"),iur=o("AutoModelForAudioClassification"),OUe=l(),Uo=a("div"),F(cx.$$.fragment),dur=l(),Ud=a("p"),cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WH=a("a"),fur=o("from_pretrained()"),mur=o(" class method or the "),QH=a("a"),gur=o("from_config()"),hur=o(` class
method.`),pur=l(),fx=a("p"),_ur=o("This class cannot be instantiated directly using "),tTe=a("code"),uur=o("__init__()"),bur=o(" (throws an error)."),vur=l(),yt=a("div"),F(mx.$$.fragment),Fur=l(),aTe=a("p"),Tur=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mur=l(),Hd=a("p"),Eur=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),Cur=o("not"),wur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),Aur=o("from_pretrained()"),Lur=o(" to load the model weights."),yur=l(),F(q8.$$.fragment),xur=l(),go=a("div"),F(gx.$$.fragment),$ur=l(),sTe=a("p"),kur=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Sur=l(),an=a("p"),Rur=o("The model class to instantiate is selected based on the "),lTe=a("code"),Pur=o("model_type"),Bur=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),Iur=o("pretrained_model_name_or_path"),Nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),qur=o("pretrained_model_name_or_path"),jur=o(":"),Dur=l(),Pe=a("ul"),j8=a("li"),cTe=a("strong"),Gur=o("data2vec-audio"),Our=o(" \u2014 "),HH=a("a"),Vur=o("Data2VecAudioForSequenceClassification"),Xur=o(" (Data2VecAudio model)"),zur=l(),D8=a("li"),fTe=a("strong"),Wur=o("hubert"),Qur=o(" \u2014 "),JH=a("a"),Uur=o("HubertForSequenceClassification"),Hur=o(" (Hubert model)"),Jur=l(),G8=a("li"),mTe=a("strong"),Yur=o("sew"),Kur=o(" \u2014 "),YH=a("a"),Zur=o("SEWForSequenceClassification"),e2r=o(" (SEW model)"),o2r=l(),O8=a("li"),gTe=a("strong"),r2r=o("sew-d"),t2r=o(" \u2014 "),KH=a("a"),a2r=o("SEWDForSequenceClassification"),n2r=o(" (SEW-D model)"),s2r=l(),V8=a("li"),hTe=a("strong"),l2r=o("unispeech"),i2r=o(" \u2014 "),ZH=a("a"),d2r=o("UniSpeechForSequenceClassification"),c2r=o(" (UniSpeech model)"),f2r=l(),X8=a("li"),pTe=a("strong"),m2r=o("unispeech-sat"),g2r=o(" \u2014 "),eJ=a("a"),h2r=o("UniSpeechSatForSequenceClassification"),p2r=o(" (UniSpeechSat model)"),_2r=l(),z8=a("li"),_Te=a("strong"),u2r=o("wav2vec2"),b2r=o(" \u2014 "),oJ=a("a"),v2r=o("Wav2Vec2ForSequenceClassification"),F2r=o(" (Wav2Vec2 model)"),T2r=l(),W8=a("li"),uTe=a("strong"),M2r=o("wav2vec2-conformer"),E2r=o(" \u2014 "),rJ=a("a"),C2r=o("Wav2Vec2ConformerForSequenceClassification"),w2r=o(" (Wav2Vec2-Conformer model)"),A2r=l(),Q8=a("li"),bTe=a("strong"),L2r=o("wavlm"),y2r=o(" \u2014 "),tJ=a("a"),x2r=o("WavLMForSequenceClassification"),$2r=o(" (WavLM model)"),k2r=l(),U8=a("p"),S2r=o("The model is set in evaluation mode by default using "),vTe=a("code"),R2r=o("model.eval()"),P2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FTe=a("code"),B2r=o("model.train()"),I2r=l(),F(H8.$$.fragment),VUe=l(),Jd=a("h2"),J8=a("a"),TTe=a("span"),F(hx.$$.fragment),N2r=l(),MTe=a("span"),q2r=o("AutoModelForAudioFrameClassification"),XUe=l(),Ho=a("div"),F(px.$$.fragment),j2r=l(),Yd=a("p"),D2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aJ=a("a"),G2r=o("from_pretrained()"),O2r=o(" class method or the "),nJ=a("a"),V2r=o("from_config()"),X2r=o(` class
method.`),z2r=l(),_x=a("p"),W2r=o("This class cannot be instantiated directly using "),ETe=a("code"),Q2r=o("__init__()"),U2r=o(" (throws an error)."),H2r=l(),xt=a("div"),F(ux.$$.fragment),J2r=l(),CTe=a("p"),Y2r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),K2r=l(),Kd=a("p"),Z2r=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),e0r=o("not"),o0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),r0r=o("from_pretrained()"),t0r=o(" to load the model weights."),a0r=l(),F(Y8.$$.fragment),n0r=l(),ho=a("div"),F(bx.$$.fragment),s0r=l(),ATe=a("p"),l0r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),i0r=l(),nn=a("p"),d0r=o("The model class to instantiate is selected based on the "),LTe=a("code"),c0r=o("model_type"),f0r=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),m0r=o("pretrained_model_name_or_path"),g0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),h0r=o("pretrained_model_name_or_path"),p0r=o(":"),_0r=l(),st=a("ul"),K8=a("li"),$Te=a("strong"),u0r=o("data2vec-audio"),b0r=o(" \u2014 "),lJ=a("a"),v0r=o("Data2VecAudioForAudioFrameClassification"),F0r=o(" (Data2VecAudio model)"),T0r=l(),Z8=a("li"),kTe=a("strong"),M0r=o("unispeech-sat"),E0r=o(" \u2014 "),iJ=a("a"),C0r=o("UniSpeechSatForAudioFrameClassification"),w0r=o(" (UniSpeechSat model)"),A0r=l(),eM=a("li"),STe=a("strong"),L0r=o("wav2vec2"),y0r=o(" \u2014 "),dJ=a("a"),x0r=o("Wav2Vec2ForAudioFrameClassification"),$0r=o(" (Wav2Vec2 model)"),k0r=l(),oM=a("li"),RTe=a("strong"),S0r=o("wav2vec2-conformer"),R0r=o(" \u2014 "),cJ=a("a"),P0r=o("Wav2Vec2ConformerForAudioFrameClassification"),B0r=o(" (Wav2Vec2-Conformer model)"),I0r=l(),rM=a("li"),PTe=a("strong"),N0r=o("wavlm"),q0r=o(" \u2014 "),fJ=a("a"),j0r=o("WavLMForAudioFrameClassification"),D0r=o(" (WavLM model)"),G0r=l(),tM=a("p"),O0r=o("The model is set in evaluation mode by default using "),BTe=a("code"),V0r=o("model.eval()"),X0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ITe=a("code"),z0r=o("model.train()"),W0r=l(),F(aM.$$.fragment),zUe=l(),Zd=a("h2"),nM=a("a"),NTe=a("span"),F(vx.$$.fragment),Q0r=l(),qTe=a("span"),U0r=o("AutoModelForCTC"),WUe=l(),Jo=a("div"),F(Fx.$$.fragment),H0r=l(),ec=a("p"),J0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mJ=a("a"),Y0r=o("from_pretrained()"),K0r=o(" class method or the "),gJ=a("a"),Z0r=o("from_config()"),e1r=o(` class
method.`),o1r=l(),Tx=a("p"),r1r=o("This class cannot be instantiated directly using "),jTe=a("code"),t1r=o("__init__()"),a1r=o(" (throws an error)."),n1r=l(),$t=a("div"),F(Mx.$$.fragment),s1r=l(),DTe=a("p"),l1r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),i1r=l(),oc=a("p"),d1r=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),c1r=o("not"),f1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),m1r=o("from_pretrained()"),g1r=o(" to load the model weights."),h1r=l(),F(sM.$$.fragment),p1r=l(),po=a("div"),F(Ex.$$.fragment),_1r=l(),OTe=a("p"),u1r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),b1r=l(),sn=a("p"),v1r=o("The model class to instantiate is selected based on the "),VTe=a("code"),F1r=o("model_type"),T1r=o(` property of the config object (either
passed as an argument or loaded from `),XTe=a("code"),M1r=o("pretrained_model_name_or_path"),E1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=a("code"),C1r=o("pretrained_model_name_or_path"),w1r=o(":"),A1r=l(),Le=a("ul"),lM=a("li"),WTe=a("strong"),L1r=o("data2vec-audio"),y1r=o(" \u2014 "),pJ=a("a"),x1r=o("Data2VecAudioForCTC"),$1r=o(" (Data2VecAudio model)"),k1r=l(),iM=a("li"),QTe=a("strong"),S1r=o("hubert"),R1r=o(" \u2014 "),_J=a("a"),P1r=o("HubertForCTC"),B1r=o(" (Hubert model)"),I1r=l(),dM=a("li"),UTe=a("strong"),N1r=o("mctct"),q1r=o(" \u2014 "),uJ=a("a"),j1r=o("MCTCTForCTC"),D1r=o(" (M-CTC-T model)"),G1r=l(),cM=a("li"),HTe=a("strong"),O1r=o("sew"),V1r=o(" \u2014 "),bJ=a("a"),X1r=o("SEWForCTC"),z1r=o(" (SEW model)"),W1r=l(),fM=a("li"),JTe=a("strong"),Q1r=o("sew-d"),U1r=o(" \u2014 "),vJ=a("a"),H1r=o("SEWDForCTC"),J1r=o(" (SEW-D model)"),Y1r=l(),mM=a("li"),YTe=a("strong"),K1r=o("unispeech"),Z1r=o(" \u2014 "),FJ=a("a"),ebr=o("UniSpeechForCTC"),obr=o(" (UniSpeech model)"),rbr=l(),gM=a("li"),KTe=a("strong"),tbr=o("unispeech-sat"),abr=o(" \u2014 "),TJ=a("a"),nbr=o("UniSpeechSatForCTC"),sbr=o(" (UniSpeechSat model)"),lbr=l(),hM=a("li"),ZTe=a("strong"),ibr=o("wav2vec2"),dbr=o(" \u2014 "),MJ=a("a"),cbr=o("Wav2Vec2ForCTC"),fbr=o(" (Wav2Vec2 model)"),mbr=l(),pM=a("li"),e8e=a("strong"),gbr=o("wav2vec2-conformer"),hbr=o(" \u2014 "),EJ=a("a"),pbr=o("Wav2Vec2ConformerForCTC"),_br=o(" (Wav2Vec2-Conformer model)"),ubr=l(),_M=a("li"),o8e=a("strong"),bbr=o("wavlm"),vbr=o(" \u2014 "),CJ=a("a"),Fbr=o("WavLMForCTC"),Tbr=o(" (WavLM model)"),Mbr=l(),uM=a("p"),Ebr=o("The model is set in evaluation mode by default using "),r8e=a("code"),Cbr=o("model.eval()"),wbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t8e=a("code"),Abr=o("model.train()"),Lbr=l(),F(bM.$$.fragment),QUe=l(),rc=a("h2"),vM=a("a"),a8e=a("span"),F(Cx.$$.fragment),ybr=l(),n8e=a("span"),xbr=o("AutoModelForSpeechSeq2Seq"),UUe=l(),Yo=a("div"),F(wx.$$.fragment),$br=l(),tc=a("p"),kbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wJ=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" class method or the "),AJ=a("a"),Pbr=o("from_config()"),Bbr=o(` class
method.`),Ibr=l(),Ax=a("p"),Nbr=o("This class cannot be instantiated directly using "),s8e=a("code"),qbr=o("__init__()"),jbr=o(" (throws an error)."),Dbr=l(),kt=a("div"),F(Lx.$$.fragment),Gbr=l(),l8e=a("p"),Obr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Vbr=l(),ac=a("p"),Xbr=o(`Note:
Loading a model from its configuration file does `),i8e=a("strong"),zbr=o("not"),Wbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=a("a"),Qbr=o("from_pretrained()"),Ubr=o(" to load the model weights."),Hbr=l(),F(FM.$$.fragment),Jbr=l(),_o=a("div"),F(yx.$$.fragment),Ybr=l(),d8e=a("p"),Kbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Zbr=l(),ln=a("p"),evr=o("The model class to instantiate is selected based on the "),c8e=a("code"),ovr=o("model_type"),rvr=o(` property of the config object (either
passed as an argument or loaded from `),f8e=a("code"),tvr=o("pretrained_model_name_or_path"),avr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m8e=a("code"),nvr=o("pretrained_model_name_or_path"),svr=o(":"),lvr=l(),xx=a("ul"),TM=a("li"),g8e=a("strong"),ivr=o("speech-encoder-decoder"),dvr=o(" \u2014 "),yJ=a("a"),cvr=o("SpeechEncoderDecoderModel"),fvr=o(" (Speech Encoder decoder model)"),mvr=l(),MM=a("li"),h8e=a("strong"),gvr=o("speech_to_text"),hvr=o(" \u2014 "),xJ=a("a"),pvr=o("Speech2TextForConditionalGeneration"),_vr=o(" (Speech2Text model)"),uvr=l(),EM=a("p"),bvr=o("The model is set in evaluation mode by default using "),p8e=a("code"),vvr=o("model.eval()"),Fvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_8e=a("code"),Tvr=o("model.train()"),Mvr=l(),F(CM.$$.fragment),HUe=l(),nc=a("h2"),wM=a("a"),u8e=a("span"),F($x.$$.fragment),Evr=l(),b8e=a("span"),Cvr=o("AutoModelForAudioXVector"),JUe=l(),Ko=a("div"),F(kx.$$.fragment),wvr=l(),sc=a("p"),Avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$J=a("a"),Lvr=o("from_pretrained()"),yvr=o(" class method or the "),kJ=a("a"),xvr=o("from_config()"),$vr=o(` class
method.`),kvr=l(),Sx=a("p"),Svr=o("This class cannot be instantiated directly using "),v8e=a("code"),Rvr=o("__init__()"),Pvr=o(" (throws an error)."),Bvr=l(),St=a("div"),F(Rx.$$.fragment),Ivr=l(),F8e=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qvr=l(),lc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),T8e=a("strong"),Dvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" to load the model weights."),Xvr=l(),F(AM.$$.fragment),zvr=l(),uo=a("div"),F(Px.$$.fragment),Wvr=l(),M8e=a("p"),Qvr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Uvr=l(),dn=a("p"),Hvr=o("The model class to instantiate is selected based on the "),E8e=a("code"),Jvr=o("model_type"),Yvr=o(` property of the config object (either
passed as an argument or loaded from `),C8e=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(":"),rFr=l(),lt=a("ul"),LM=a("li"),A8e=a("strong"),tFr=o("data2vec-audio"),aFr=o(" \u2014 "),RJ=a("a"),nFr=o("Data2VecAudioForXVector"),sFr=o(" (Data2VecAudio model)"),lFr=l(),yM=a("li"),L8e=a("strong"),iFr=o("unispeech-sat"),dFr=o(" \u2014 "),PJ=a("a"),cFr=o("UniSpeechSatForXVector"),fFr=o(" (UniSpeechSat model)"),mFr=l(),xM=a("li"),y8e=a("strong"),gFr=o("wav2vec2"),hFr=o(" \u2014 "),BJ=a("a"),pFr=o("Wav2Vec2ForXVector"),_Fr=o(" (Wav2Vec2 model)"),uFr=l(),$M=a("li"),x8e=a("strong"),bFr=o("wav2vec2-conformer"),vFr=o(" \u2014 "),IJ=a("a"),FFr=o("Wav2Vec2ConformerForXVector"),TFr=o(" (Wav2Vec2-Conformer model)"),MFr=l(),kM=a("li"),$8e=a("strong"),EFr=o("wavlm"),CFr=o(" \u2014 "),NJ=a("a"),wFr=o("WavLMForXVector"),AFr=o(" (WavLM model)"),LFr=l(),SM=a("p"),yFr=o("The model is set in evaluation mode by default using "),k8e=a("code"),xFr=o("model.eval()"),$Fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S8e=a("code"),kFr=o("model.train()"),SFr=l(),F(RM.$$.fragment),YUe=l(),ic=a("h2"),PM=a("a"),R8e=a("span"),F(Bx.$$.fragment),RFr=l(),P8e=a("span"),PFr=o("AutoModelForMaskedImageModeling"),KUe=l(),Zo=a("div"),F(Ix.$$.fragment),BFr=l(),dc=a("p"),IFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qJ=a("a"),NFr=o("from_pretrained()"),qFr=o(" class method or the "),jJ=a("a"),jFr=o("from_config()"),DFr=o(` class
method.`),GFr=l(),Nx=a("p"),OFr=o("This class cannot be instantiated directly using "),B8e=a("code"),VFr=o("__init__()"),XFr=o(" (throws an error)."),zFr=l(),Rt=a("div"),F(qx.$$.fragment),WFr=l(),I8e=a("p"),QFr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),UFr=l(),cc=a("p"),HFr=o(`Note:
Loading a model from its configuration file does `),N8e=a("strong"),JFr=o("not"),YFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=a("a"),KFr=o("from_pretrained()"),ZFr=o(" to load the model weights."),eTr=l(),F(BM.$$.fragment),oTr=l(),bo=a("div"),F(jx.$$.fragment),rTr=l(),q8e=a("p"),tTr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aTr=l(),cn=a("p"),nTr=o("The model class to instantiate is selected based on the "),j8e=a("code"),sTr=o("model_type"),lTr=o(` property of the config object (either
passed as an argument or loaded from `),D8e=a("code"),iTr=o("pretrained_model_name_or_path"),dTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=a("code"),cTr=o("pretrained_model_name_or_path"),fTr=o(":"),mTr=l(),fn=a("ul"),IM=a("li"),O8e=a("strong"),gTr=o("deit"),hTr=o(" \u2014 "),GJ=a("a"),pTr=o("DeiTForMaskedImageModeling"),_Tr=o(" (DeiT model)"),uTr=l(),NM=a("li"),V8e=a("strong"),bTr=o("swin"),vTr=o(" \u2014 "),OJ=a("a"),FTr=o("SwinForMaskedImageModeling"),TTr=o(" (Swin Transformer model)"),MTr=l(),qM=a("li"),X8e=a("strong"),ETr=o("swinv2"),CTr=o(" \u2014 "),VJ=a("a"),wTr=o("Swinv2ForMaskedImageModeling"),ATr=o(" (Swin Transformer V2 model)"),LTr=l(),jM=a("li"),z8e=a("strong"),yTr=o("vit"),xTr=o(" \u2014 "),XJ=a("a"),$Tr=o("ViTForMaskedImageModeling"),kTr=o(" (ViT model)"),STr=l(),DM=a("p"),RTr=o("The model is set in evaluation mode by default using "),W8e=a("code"),PTr=o("model.eval()"),BTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q8e=a("code"),ITr=o("model.train()"),NTr=l(),F(GM.$$.fragment),ZUe=l(),fc=a("h2"),OM=a("a"),U8e=a("span"),F(Dx.$$.fragment),qTr=l(),H8e=a("span"),jTr=o("AutoModelForObjectDetection"),eHe=l(),er=a("div"),F(Gx.$$.fragment),DTr=l(),mc=a("p"),GTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zJ=a("a"),OTr=o("from_pretrained()"),VTr=o(" class method or the "),WJ=a("a"),XTr=o("from_config()"),zTr=o(` class
method.`),WTr=l(),Ox=a("p"),QTr=o("This class cannot be instantiated directly using "),J8e=a("code"),UTr=o("__init__()"),HTr=o(" (throws an error)."),JTr=l(),Pt=a("div"),F(Vx.$$.fragment),YTr=l(),Y8e=a("p"),KTr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ZTr=l(),gc=a("p"),e8r=o(`Note:
Loading a model from its configuration file does `),K8e=a("strong"),o8r=o("not"),r8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),t8r=o("from_pretrained()"),a8r=o(" to load the model weights."),n8r=l(),F(VM.$$.fragment),s8r=l(),vo=a("div"),F(Xx.$$.fragment),l8r=l(),Z8e=a("p"),i8r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),d8r=l(),mn=a("p"),c8r=o("The model class to instantiate is selected based on the "),eMe=a("code"),f8r=o("model_type"),m8r=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),g8r=o("pretrained_model_name_or_path"),h8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),p8r=o("pretrained_model_name_or_path"),_8r=o(":"),u8r=l(),zx=a("ul"),XM=a("li"),tMe=a("strong"),b8r=o("detr"),v8r=o(" \u2014 "),UJ=a("a"),F8r=o("DetrForObjectDetection"),T8r=o(" (DETR model)"),M8r=l(),zM=a("li"),aMe=a("strong"),E8r=o("yolos"),C8r=o(" \u2014 "),HJ=a("a"),w8r=o("YolosForObjectDetection"),A8r=o(" (YOLOS model)"),L8r=l(),WM=a("p"),y8r=o("The model is set in evaluation mode by default using "),nMe=a("code"),x8r=o("model.eval()"),$8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sMe=a("code"),k8r=o("model.train()"),S8r=l(),F(QM.$$.fragment),oHe=l(),hc=a("h2"),UM=a("a"),lMe=a("span"),F(Wx.$$.fragment),R8r=l(),iMe=a("span"),P8r=o("AutoModelForImageSegmentation"),rHe=l(),or=a("div"),F(Qx.$$.fragment),B8r=l(),pc=a("p"),I8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),JJ=a("a"),N8r=o("from_pretrained()"),q8r=o(" class method or the "),YJ=a("a"),j8r=o("from_config()"),D8r=o(` class
method.`),G8r=l(),Ux=a("p"),O8r=o("This class cannot be instantiated directly using "),dMe=a("code"),V8r=o("__init__()"),X8r=o(" (throws an error)."),z8r=l(),Bt=a("div"),F(Hx.$$.fragment),W8r=l(),cMe=a("p"),Q8r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),U8r=l(),_c=a("p"),H8r=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),J8r=o("not"),Y8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),K8r=o("from_pretrained()"),Z8r=o(" to load the model weights."),eMr=l(),F(HM.$$.fragment),oMr=l(),Fo=a("div"),F(Jx.$$.fragment),rMr=l(),mMe=a("p"),tMr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),aMr=l(),gn=a("p"),nMr=o("The model class to instantiate is selected based on the "),gMe=a("code"),sMr=o("model_type"),lMr=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),iMr=o("pretrained_model_name_or_path"),dMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),cMr=o("pretrained_model_name_or_path"),fMr=o(":"),mMr=l(),_Me=a("ul"),JM=a("li"),uMe=a("strong"),gMr=o("detr"),hMr=o(" \u2014 "),ZJ=a("a"),pMr=o("DetrForSegmentation"),_Mr=o(" (DETR model)"),uMr=l(),YM=a("p"),bMr=o("The model is set in evaluation mode by default using "),bMe=a("code"),vMr=o("model.eval()"),FMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vMe=a("code"),TMr=o("model.train()"),MMr=l(),F(KM.$$.fragment),tHe=l(),uc=a("h2"),ZM=a("a"),FMe=a("span"),F(Yx.$$.fragment),EMr=l(),TMe=a("span"),CMr=o("AutoModelForSemanticSegmentation"),aHe=l(),rr=a("div"),F(Kx.$$.fragment),wMr=l(),bc=a("p"),AMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),eY=a("a"),LMr=o("from_pretrained()"),yMr=o(" class method or the "),oY=a("a"),xMr=o("from_config()"),$Mr=o(` class
method.`),kMr=l(),Zx=a("p"),SMr=o("This class cannot be instantiated directly using "),MMe=a("code"),RMr=o("__init__()"),PMr=o(" (throws an error)."),BMr=l(),It=a("div"),F(e$.$$.fragment),IMr=l(),EMe=a("p"),NMr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),qMr=l(),vc=a("p"),jMr=o(`Note:
Loading a model from its configuration file does `),CMe=a("strong"),DMr=o("not"),GMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),OMr=o("from_pretrained()"),VMr=o(" to load the model weights."),XMr=l(),F(eE.$$.fragment),zMr=l(),To=a("div"),F(o$.$$.fragment),WMr=l(),wMe=a("p"),QMr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),UMr=l(),hn=a("p"),HMr=o("The model class to instantiate is selected based on the "),AMe=a("code"),JMr=o("model_type"),YMr=o(` property of the config object (either
passed as an argument or loaded from `),LMe=a("code"),KMr=o("pretrained_model_name_or_path"),ZMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=a("code"),eEr=o("pretrained_model_name_or_path"),oEr=o(":"),rEr=l(),it=a("ul"),oE=a("li"),xMe=a("strong"),tEr=o("beit"),aEr=o(" \u2014 "),tY=a("a"),nEr=o("BeitForSemanticSegmentation"),sEr=o(" (BEiT model)"),lEr=l(),rE=a("li"),$Me=a("strong"),iEr=o("data2vec-vision"),dEr=o(" \u2014 "),aY=a("a"),cEr=o("Data2VecVisionForSemanticSegmentation"),fEr=o(" (Data2VecVision model)"),mEr=l(),tE=a("li"),kMe=a("strong"),gEr=o("dpt"),hEr=o(" \u2014 "),nY=a("a"),pEr=o("DPTForSemanticSegmentation"),_Er=o(" (DPT model)"),uEr=l(),aE=a("li"),SMe=a("strong"),bEr=o("mobilevit"),vEr=o(" \u2014 "),sY=a("a"),FEr=o("MobileViTForSemanticSegmentation"),TEr=o(" (MobileViT model)"),MEr=l(),nE=a("li"),RMe=a("strong"),EEr=o("segformer"),CEr=o(" \u2014 "),lY=a("a"),wEr=o("SegformerForSemanticSegmentation"),AEr=o(" (SegFormer model)"),LEr=l(),sE=a("p"),yEr=o("The model is set in evaluation mode by default using "),PMe=a("code"),xEr=o("model.eval()"),$Er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BMe=a("code"),kEr=o("model.train()"),SEr=l(),F(lE.$$.fragment),nHe=l(),Fc=a("h2"),iE=a("a"),IMe=a("span"),F(r$.$$.fragment),REr=l(),NMe=a("span"),PEr=o("AutoModelForInstanceSegmentation"),sHe=l(),tr=a("div"),F(t$.$$.fragment),BEr=l(),Tc=a("p"),IEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iY=a("a"),NEr=o("from_pretrained()"),qEr=o(" class method or the "),dY=a("a"),jEr=o("from_config()"),DEr=o(` class
method.`),GEr=l(),a$=a("p"),OEr=o("This class cannot be instantiated directly using "),qMe=a("code"),VEr=o("__init__()"),XEr=o(" (throws an error)."),zEr=l(),Nt=a("div"),F(n$.$$.fragment),WEr=l(),jMe=a("p"),QEr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),UEr=l(),Mc=a("p"),HEr=o(`Note:
Loading a model from its configuration file does `),DMe=a("strong"),JEr=o("not"),YEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),KEr=o("from_pretrained()"),ZEr=o(" to load the model weights."),e4r=l(),F(dE.$$.fragment),o4r=l(),Mo=a("div"),F(s$.$$.fragment),r4r=l(),GMe=a("p"),t4r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),a4r=l(),pn=a("p"),n4r=o("The model class to instantiate is selected based on the "),OMe=a("code"),s4r=o("model_type"),l4r=o(` property of the config object (either
passed as an argument or loaded from `),VMe=a("code"),i4r=o("pretrained_model_name_or_path"),d4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=a("code"),c4r=o("pretrained_model_name_or_path"),f4r=o(":"),m4r=l(),zMe=a("ul"),cE=a("li"),WMe=a("strong"),g4r=o("maskformer"),h4r=o(" \u2014 "),fY=a("a"),p4r=o("MaskFormerForInstanceSegmentation"),_4r=o(" (MaskFormer model)"),u4r=l(),fE=a("p"),b4r=o("The model is set in evaluation mode by default using "),QMe=a("code"),v4r=o("model.eval()"),F4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UMe=a("code"),T4r=o("model.train()"),M4r=l(),F(mE.$$.fragment),lHe=l(),Ec=a("h2"),gE=a("a"),HMe=a("span"),F(l$.$$.fragment),E4r=l(),JMe=a("span"),C4r=o("TFAutoModel"),iHe=l(),ar=a("div"),F(i$.$$.fragment),w4r=l(),Cc=a("p"),A4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mY=a("a"),L4r=o("from_pretrained()"),y4r=o(" class method or the "),gY=a("a"),x4r=o("from_config()"),$4r=o(` class
method.`),k4r=l(),d$=a("p"),S4r=o("This class cannot be instantiated directly using "),YMe=a("code"),R4r=o("__init__()"),P4r=o(" (throws an error)."),B4r=l(),qt=a("div"),F(c$.$$.fragment),I4r=l(),KMe=a("p"),N4r=o("Instantiates one of the base model classes of the library from a configuration."),q4r=l(),wc=a("p"),j4r=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),D4r=o("not"),G4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),O4r=o("from_pretrained()"),V4r=o(" to load the model weights."),X4r=l(),F(hE.$$.fragment),z4r=l(),Rr=a("div"),F(f$.$$.fragment),W4r=l(),eEe=a("p"),Q4r=o("Instantiate one of the base model classes of the library from a pretrained model."),U4r=l(),_n=a("p"),H4r=o("The model class to instantiate is selected based on the "),oEe=a("code"),J4r=o("model_type"),Y4r=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),K4r=o("pretrained_model_name_or_path"),Z4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),eCr=o("pretrained_model_name_or_path"),oCr=o(":"),rCr=l(),B=a("ul"),pE=a("li"),aEe=a("strong"),tCr=o("albert"),aCr=o(" \u2014 "),pY=a("a"),nCr=o("TFAlbertModel"),sCr=o(" (ALBERT model)"),lCr=l(),_E=a("li"),nEe=a("strong"),iCr=o("bart"),dCr=o(" \u2014 "),_Y=a("a"),cCr=o("TFBartModel"),fCr=o(" (BART model)"),mCr=l(),uE=a("li"),sEe=a("strong"),gCr=o("bert"),hCr=o(" \u2014 "),uY=a("a"),pCr=o("TFBertModel"),_Cr=o(" (BERT model)"),uCr=l(),bE=a("li"),lEe=a("strong"),bCr=o("blenderbot"),vCr=o(" \u2014 "),bY=a("a"),FCr=o("TFBlenderbotModel"),TCr=o(" (Blenderbot model)"),MCr=l(),vE=a("li"),iEe=a("strong"),ECr=o("blenderbot-small"),CCr=o(" \u2014 "),vY=a("a"),wCr=o("TFBlenderbotSmallModel"),ACr=o(" (BlenderbotSmall model)"),LCr=l(),FE=a("li"),dEe=a("strong"),yCr=o("camembert"),xCr=o(" \u2014 "),FY=a("a"),$Cr=o("TFCamembertModel"),kCr=o(" (CamemBERT model)"),SCr=l(),TE=a("li"),cEe=a("strong"),RCr=o("clip"),PCr=o(" \u2014 "),TY=a("a"),BCr=o("TFCLIPModel"),ICr=o(" (CLIP model)"),NCr=l(),ME=a("li"),fEe=a("strong"),qCr=o("convbert"),jCr=o(" \u2014 "),MY=a("a"),DCr=o("TFConvBertModel"),GCr=o(" (ConvBERT model)"),OCr=l(),EE=a("li"),mEe=a("strong"),VCr=o("convnext"),XCr=o(" \u2014 "),EY=a("a"),zCr=o("TFConvNextModel"),WCr=o(" (ConvNeXT model)"),QCr=l(),CE=a("li"),gEe=a("strong"),UCr=o("ctrl"),HCr=o(" \u2014 "),CY=a("a"),JCr=o("TFCTRLModel"),YCr=o(" (CTRL model)"),KCr=l(),wE=a("li"),hEe=a("strong"),ZCr=o("data2vec-vision"),e3r=o(" \u2014 "),wY=a("a"),o3r=o("TFData2VecVisionModel"),r3r=o(" (Data2VecVision model)"),t3r=l(),AE=a("li"),pEe=a("strong"),a3r=o("deberta"),n3r=o(" \u2014 "),AY=a("a"),s3r=o("TFDebertaModel"),l3r=o(" (DeBERTa model)"),i3r=l(),LE=a("li"),_Ee=a("strong"),d3r=o("deberta-v2"),c3r=o(" \u2014 "),LY=a("a"),f3r=o("TFDebertaV2Model"),m3r=o(" (DeBERTa-v2 model)"),g3r=l(),yE=a("li"),uEe=a("strong"),h3r=o("deit"),p3r=o(" \u2014 "),yY=a("a"),_3r=o("TFDeiTModel"),u3r=o(" (DeiT model)"),b3r=l(),xE=a("li"),bEe=a("strong"),v3r=o("distilbert"),F3r=o(" \u2014 "),xY=a("a"),T3r=o("TFDistilBertModel"),M3r=o(" (DistilBERT model)"),E3r=l(),$E=a("li"),vEe=a("strong"),C3r=o("dpr"),w3r=o(" \u2014 "),$Y=a("a"),A3r=o("TFDPRQuestionEncoder"),L3r=o(" (DPR model)"),y3r=l(),kE=a("li"),FEe=a("strong"),x3r=o("electra"),$3r=o(" \u2014 "),kY=a("a"),k3r=o("TFElectraModel"),S3r=o(" (ELECTRA model)"),R3r=l(),SE=a("li"),TEe=a("strong"),P3r=o("flaubert"),B3r=o(" \u2014 "),SY=a("a"),I3r=o("TFFlaubertModel"),N3r=o(" (FlauBERT model)"),q3r=l(),il=a("li"),MEe=a("strong"),j3r=o("funnel"),D3r=o(" \u2014 "),RY=a("a"),G3r=o("TFFunnelModel"),O3r=o(" or "),PY=a("a"),V3r=o("TFFunnelBaseModel"),X3r=o(" (Funnel Transformer model)"),z3r=l(),RE=a("li"),EEe=a("strong"),W3r=o("gpt2"),Q3r=o(" \u2014 "),BY=a("a"),U3r=o("TFGPT2Model"),H3r=o(" (OpenAI GPT-2 model)"),J3r=l(),PE=a("li"),CEe=a("strong"),Y3r=o("gptj"),K3r=o(" \u2014 "),IY=a("a"),Z3r=o("TFGPTJModel"),e5r=o(" (GPT-J model)"),o5r=l(),BE=a("li"),wEe=a("strong"),r5r=o("groupvit"),t5r=o(" \u2014 "),NY=a("a"),a5r=o("TFGroupViTModel"),n5r=o(" (GroupViT model)"),s5r=l(),IE=a("li"),AEe=a("strong"),l5r=o("hubert"),i5r=o(" \u2014 "),qY=a("a"),d5r=o("TFHubertModel"),c5r=o(" (Hubert model)"),f5r=l(),NE=a("li"),LEe=a("strong"),m5r=o("layoutlm"),g5r=o(" \u2014 "),jY=a("a"),h5r=o("TFLayoutLMModel"),p5r=o(" (LayoutLM model)"),_5r=l(),qE=a("li"),yEe=a("strong"),u5r=o("led"),b5r=o(" \u2014 "),DY=a("a"),v5r=o("TFLEDModel"),F5r=o(" (LED model)"),T5r=l(),jE=a("li"),xEe=a("strong"),M5r=o("longformer"),E5r=o(" \u2014 "),GY=a("a"),C5r=o("TFLongformerModel"),w5r=o(" (Longformer model)"),A5r=l(),DE=a("li"),$Ee=a("strong"),L5r=o("lxmert"),y5r=o(" \u2014 "),OY=a("a"),x5r=o("TFLxmertModel"),$5r=o(" (LXMERT model)"),k5r=l(),GE=a("li"),kEe=a("strong"),S5r=o("marian"),R5r=o(" \u2014 "),VY=a("a"),P5r=o("TFMarianModel"),B5r=o(" (Marian model)"),I5r=l(),OE=a("li"),SEe=a("strong"),N5r=o("mbart"),q5r=o(" \u2014 "),XY=a("a"),j5r=o("TFMBartModel"),D5r=o(" (mBART model)"),G5r=l(),VE=a("li"),REe=a("strong"),O5r=o("mobilebert"),V5r=o(" \u2014 "),zY=a("a"),X5r=o("TFMobileBertModel"),z5r=o(" (MobileBERT model)"),W5r=l(),XE=a("li"),PEe=a("strong"),Q5r=o("mpnet"),U5r=o(" \u2014 "),WY=a("a"),H5r=o("TFMPNetModel"),J5r=o(" (MPNet model)"),Y5r=l(),zE=a("li"),BEe=a("strong"),K5r=o("mt5"),Z5r=o(" \u2014 "),QY=a("a"),ewr=o("TFMT5Model"),owr=o(" (MT5 model)"),rwr=l(),WE=a("li"),IEe=a("strong"),twr=o("openai-gpt"),awr=o(" \u2014 "),UY=a("a"),nwr=o("TFOpenAIGPTModel"),swr=o(" (OpenAI GPT model)"),lwr=l(),QE=a("li"),NEe=a("strong"),iwr=o("opt"),dwr=o(" \u2014 "),HY=a("a"),cwr=o("TFOPTModel"),fwr=o(" (OPT model)"),mwr=l(),UE=a("li"),qEe=a("strong"),gwr=o("pegasus"),hwr=o(" \u2014 "),JY=a("a"),pwr=o("TFPegasusModel"),_wr=o(" (Pegasus model)"),uwr=l(),HE=a("li"),jEe=a("strong"),bwr=o("regnet"),vwr=o(" \u2014 "),YY=a("a"),Fwr=o("TFRegNetModel"),Twr=o(" (RegNet model)"),Mwr=l(),JE=a("li"),DEe=a("strong"),Ewr=o("rembert"),Cwr=o(" \u2014 "),KY=a("a"),wwr=o("TFRemBertModel"),Awr=o(" (RemBERT model)"),Lwr=l(),YE=a("li"),GEe=a("strong"),ywr=o("resnet"),xwr=o(" \u2014 "),ZY=a("a"),$wr=o("TFResNetModel"),kwr=o(" (ResNet model)"),Swr=l(),KE=a("li"),OEe=a("strong"),Rwr=o("roberta"),Pwr=o(" \u2014 "),eK=a("a"),Bwr=o("TFRobertaModel"),Iwr=o(" (RoBERTa model)"),Nwr=l(),ZE=a("li"),VEe=a("strong"),qwr=o("roformer"),jwr=o(" \u2014 "),oK=a("a"),Dwr=o("TFRoFormerModel"),Gwr=o(" (RoFormer model)"),Owr=l(),e4=a("li"),XEe=a("strong"),Vwr=o("segformer"),Xwr=o(" \u2014 "),rK=a("a"),zwr=o("TFSegformerModel"),Wwr=o(" (SegFormer model)"),Qwr=l(),o4=a("li"),zEe=a("strong"),Uwr=o("speech_to_text"),Hwr=o(" \u2014 "),tK=a("a"),Jwr=o("TFSpeech2TextModel"),Ywr=o(" (Speech2Text model)"),Kwr=l(),r4=a("li"),WEe=a("strong"),Zwr=o("swin"),e6r=o(" \u2014 "),aK=a("a"),o6r=o("TFSwinModel"),r6r=o(" (Swin Transformer model)"),t6r=l(),t4=a("li"),QEe=a("strong"),a6r=o("t5"),n6r=o(" \u2014 "),nK=a("a"),s6r=o("TFT5Model"),l6r=o(" (T5 model)"),i6r=l(),a4=a("li"),UEe=a("strong"),d6r=o("tapas"),c6r=o(" \u2014 "),sK=a("a"),f6r=o("TFTapasModel"),m6r=o(" (TAPAS model)"),g6r=l(),n4=a("li"),HEe=a("strong"),h6r=o("transfo-xl"),p6r=o(" \u2014 "),lK=a("a"),_6r=o("TFTransfoXLModel"),u6r=o(" (Transformer-XL model)"),b6r=l(),s4=a("li"),JEe=a("strong"),v6r=o("vit"),F6r=o(" \u2014 "),iK=a("a"),T6r=o("TFViTModel"),M6r=o(" (ViT model)"),E6r=l(),l4=a("li"),YEe=a("strong"),C6r=o("vit_mae"),w6r=o(" \u2014 "),dK=a("a"),A6r=o("TFViTMAEModel"),L6r=o(" (ViTMAE model)"),y6r=l(),i4=a("li"),KEe=a("strong"),x6r=o("wav2vec2"),$6r=o(" \u2014 "),cK=a("a"),k6r=o("TFWav2Vec2Model"),S6r=o(" (Wav2Vec2 model)"),R6r=l(),d4=a("li"),ZEe=a("strong"),P6r=o("xglm"),B6r=o(" \u2014 "),fK=a("a"),I6r=o("TFXGLMModel"),N6r=o(" (XGLM model)"),q6r=l(),c4=a("li"),e4e=a("strong"),j6r=o("xlm"),D6r=o(" \u2014 "),mK=a("a"),G6r=o("TFXLMModel"),O6r=o(" (XLM model)"),V6r=l(),f4=a("li"),o4e=a("strong"),X6r=o("xlm-roberta"),z6r=o(" \u2014 "),gK=a("a"),W6r=o("TFXLMRobertaModel"),Q6r=o(" (XLM-RoBERTa model)"),U6r=l(),m4=a("li"),r4e=a("strong"),H6r=o("xlnet"),J6r=o(" \u2014 "),hK=a("a"),Y6r=o("TFXLNetModel"),K6r=o(" (XLNet model)"),Z6r=l(),F(g4.$$.fragment),dHe=l(),Ac=a("h2"),h4=a("a"),t4e=a("span"),F(m$.$$.fragment),eAr=l(),a4e=a("span"),oAr=o("TFAutoModelForPreTraining"),cHe=l(),nr=a("div"),F(g$.$$.fragment),rAr=l(),Lc=a("p"),tAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pK=a("a"),aAr=o("from_pretrained()"),nAr=o(" class method or the "),_K=a("a"),sAr=o("from_config()"),lAr=o(` class
method.`),iAr=l(),h$=a("p"),dAr=o("This class cannot be instantiated directly using "),n4e=a("code"),cAr=o("__init__()"),fAr=o(" (throws an error)."),mAr=l(),jt=a("div"),F(p$.$$.fragment),gAr=l(),s4e=a("p"),hAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pAr=l(),yc=a("p"),_Ar=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),uAr=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),vAr=o("from_pretrained()"),FAr=o(" to load the model weights."),TAr=l(),F(p4.$$.fragment),MAr=l(),Pr=a("div"),F(_$.$$.fragment),EAr=l(),i4e=a("p"),CAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wAr=l(),un=a("p"),AAr=o("The model class to instantiate is selected based on the "),d4e=a("code"),LAr=o("model_type"),yAr=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),xAr=o("pretrained_model_name_or_path"),$Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(":"),RAr=l(),se=a("ul"),_4=a("li"),m4e=a("strong"),PAr=o("albert"),BAr=o(" \u2014 "),bK=a("a"),IAr=o("TFAlbertForPreTraining"),NAr=o(" (ALBERT model)"),qAr=l(),u4=a("li"),g4e=a("strong"),jAr=o("bart"),DAr=o(" \u2014 "),vK=a("a"),GAr=o("TFBartForConditionalGeneration"),OAr=o(" (BART model)"),VAr=l(),b4=a("li"),h4e=a("strong"),XAr=o("bert"),zAr=o(" \u2014 "),FK=a("a"),WAr=o("TFBertForPreTraining"),QAr=o(" (BERT model)"),UAr=l(),v4=a("li"),p4e=a("strong"),HAr=o("camembert"),JAr=o(" \u2014 "),TK=a("a"),YAr=o("TFCamembertForMaskedLM"),KAr=o(" (CamemBERT model)"),ZAr=l(),F4=a("li"),_4e=a("strong"),e7r=o("ctrl"),o7r=o(" \u2014 "),MK=a("a"),r7r=o("TFCTRLLMHeadModel"),t7r=o(" (CTRL model)"),a7r=l(),T4=a("li"),u4e=a("strong"),n7r=o("distilbert"),s7r=o(" \u2014 "),EK=a("a"),l7r=o("TFDistilBertForMaskedLM"),i7r=o(" (DistilBERT model)"),d7r=l(),M4=a("li"),b4e=a("strong"),c7r=o("electra"),f7r=o(" \u2014 "),CK=a("a"),m7r=o("TFElectraForPreTraining"),g7r=o(" (ELECTRA model)"),h7r=l(),E4=a("li"),v4e=a("strong"),p7r=o("flaubert"),_7r=o(" \u2014 "),wK=a("a"),u7r=o("TFFlaubertWithLMHeadModel"),b7r=o(" (FlauBERT model)"),v7r=l(),C4=a("li"),F4e=a("strong"),F7r=o("funnel"),T7r=o(" \u2014 "),AK=a("a"),M7r=o("TFFunnelForPreTraining"),E7r=o(" (Funnel Transformer model)"),C7r=l(),w4=a("li"),T4e=a("strong"),w7r=o("gpt2"),A7r=o(" \u2014 "),LK=a("a"),L7r=o("TFGPT2LMHeadModel"),y7r=o(" (OpenAI GPT-2 model)"),x7r=l(),A4=a("li"),M4e=a("strong"),$7r=o("layoutlm"),k7r=o(" \u2014 "),yK=a("a"),S7r=o("TFLayoutLMForMaskedLM"),R7r=o(" (LayoutLM model)"),P7r=l(),L4=a("li"),E4e=a("strong"),B7r=o("lxmert"),I7r=o(" \u2014 "),xK=a("a"),N7r=o("TFLxmertForPreTraining"),q7r=o(" (LXMERT model)"),j7r=l(),y4=a("li"),C4e=a("strong"),D7r=o("mobilebert"),G7r=o(" \u2014 "),$K=a("a"),O7r=o("TFMobileBertForPreTraining"),V7r=o(" (MobileBERT model)"),X7r=l(),x4=a("li"),w4e=a("strong"),z7r=o("mpnet"),W7r=o(" \u2014 "),kK=a("a"),Q7r=o("TFMPNetForMaskedLM"),U7r=o(" (MPNet model)"),H7r=l(),$4=a("li"),A4e=a("strong"),J7r=o("openai-gpt"),Y7r=o(" \u2014 "),SK=a("a"),K7r=o("TFOpenAIGPTLMHeadModel"),Z7r=o(" (OpenAI GPT model)"),eLr=l(),k4=a("li"),L4e=a("strong"),oLr=o("roberta"),rLr=o(" \u2014 "),RK=a("a"),tLr=o("TFRobertaForMaskedLM"),aLr=o(" (RoBERTa model)"),nLr=l(),S4=a("li"),y4e=a("strong"),sLr=o("t5"),lLr=o(" \u2014 "),PK=a("a"),iLr=o("TFT5ForConditionalGeneration"),dLr=o(" (T5 model)"),cLr=l(),R4=a("li"),x4e=a("strong"),fLr=o("tapas"),mLr=o(" \u2014 "),BK=a("a"),gLr=o("TFTapasForMaskedLM"),hLr=o(" (TAPAS model)"),pLr=l(),P4=a("li"),$4e=a("strong"),_Lr=o("transfo-xl"),uLr=o(" \u2014 "),IK=a("a"),bLr=o("TFTransfoXLLMHeadModel"),vLr=o(" (Transformer-XL model)"),FLr=l(),B4=a("li"),k4e=a("strong"),TLr=o("vit_mae"),MLr=o(" \u2014 "),NK=a("a"),ELr=o("TFViTMAEForPreTraining"),CLr=o(" (ViTMAE model)"),wLr=l(),I4=a("li"),S4e=a("strong"),ALr=o("xlm"),LLr=o(" \u2014 "),qK=a("a"),yLr=o("TFXLMWithLMHeadModel"),xLr=o(" (XLM model)"),$Lr=l(),N4=a("li"),R4e=a("strong"),kLr=o("xlm-roberta"),SLr=o(" \u2014 "),jK=a("a"),RLr=o("TFXLMRobertaForMaskedLM"),PLr=o(" (XLM-RoBERTa model)"),BLr=l(),q4=a("li"),P4e=a("strong"),ILr=o("xlnet"),NLr=o(" \u2014 "),DK=a("a"),qLr=o("TFXLNetLMHeadModel"),jLr=o(" (XLNet model)"),DLr=l(),F(j4.$$.fragment),fHe=l(),xc=a("h2"),D4=a("a"),B4e=a("span"),F(u$.$$.fragment),GLr=l(),I4e=a("span"),OLr=o("TFAutoModelForCausalLM"),mHe=l(),sr=a("div"),F(b$.$$.fragment),VLr=l(),$c=a("p"),XLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GK=a("a"),zLr=o("from_pretrained()"),WLr=o(" class method or the "),OK=a("a"),QLr=o("from_config()"),ULr=o(` class
method.`),HLr=l(),v$=a("p"),JLr=o("This class cannot be instantiated directly using "),N4e=a("code"),YLr=o("__init__()"),KLr=o(" (throws an error)."),ZLr=l(),Dt=a("div"),F(F$.$$.fragment),eyr=l(),q4e=a("p"),oyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ryr=l(),kc=a("p"),tyr=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),ayr=o("not"),nyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),syr=o("from_pretrained()"),lyr=o(" to load the model weights."),iyr=l(),F(G4.$$.fragment),dyr=l(),Br=a("div"),F(T$.$$.fragment),cyr=l(),D4e=a("p"),fyr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),myr=l(),bn=a("p"),gyr=o("The model class to instantiate is selected based on the "),G4e=a("code"),hyr=o("model_type"),pyr=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),_yr=o("pretrained_model_name_or_path"),uyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),byr=o("pretrained_model_name_or_path"),vyr=o(":"),Fyr=l(),Me=a("ul"),O4=a("li"),X4e=a("strong"),Tyr=o("bert"),Myr=o(" \u2014 "),XK=a("a"),Eyr=o("TFBertLMHeadModel"),Cyr=o(" (BERT model)"),wyr=l(),V4=a("li"),z4e=a("strong"),Ayr=o("camembert"),Lyr=o(" \u2014 "),zK=a("a"),yyr=o("TFCamembertForCausalLM"),xyr=o(" (CamemBERT model)"),$yr=l(),X4=a("li"),W4e=a("strong"),kyr=o("ctrl"),Syr=o(" \u2014 "),WK=a("a"),Ryr=o("TFCTRLLMHeadModel"),Pyr=o(" (CTRL model)"),Byr=l(),z4=a("li"),Q4e=a("strong"),Iyr=o("gpt2"),Nyr=o(" \u2014 "),QK=a("a"),qyr=o("TFGPT2LMHeadModel"),jyr=o(" (OpenAI GPT-2 model)"),Dyr=l(),W4=a("li"),U4e=a("strong"),Gyr=o("gptj"),Oyr=o(" \u2014 "),UK=a("a"),Vyr=o("TFGPTJForCausalLM"),Xyr=o(" (GPT-J model)"),zyr=l(),Q4=a("li"),H4e=a("strong"),Wyr=o("openai-gpt"),Qyr=o(" \u2014 "),HK=a("a"),Uyr=o("TFOpenAIGPTLMHeadModel"),Hyr=o(" (OpenAI GPT model)"),Jyr=l(),U4=a("li"),J4e=a("strong"),Yyr=o("opt"),Kyr=o(" \u2014 "),JK=a("a"),Zyr=o("TFOPTForCausalLM"),e9r=o(" (OPT model)"),o9r=l(),H4=a("li"),Y4e=a("strong"),r9r=o("rembert"),t9r=o(" \u2014 "),YK=a("a"),a9r=o("TFRemBertForCausalLM"),n9r=o(" (RemBERT model)"),s9r=l(),J4=a("li"),K4e=a("strong"),l9r=o("roberta"),i9r=o(" \u2014 "),KK=a("a"),d9r=o("TFRobertaForCausalLM"),c9r=o(" (RoBERTa model)"),f9r=l(),Y4=a("li"),Z4e=a("strong"),m9r=o("roformer"),g9r=o(" \u2014 "),ZK=a("a"),h9r=o("TFRoFormerForCausalLM"),p9r=o(" (RoFormer model)"),_9r=l(),K4=a("li"),eCe=a("strong"),u9r=o("transfo-xl"),b9r=o(" \u2014 "),eZ=a("a"),v9r=o("TFTransfoXLLMHeadModel"),F9r=o(" (Transformer-XL model)"),T9r=l(),Z4=a("li"),oCe=a("strong"),M9r=o("xglm"),E9r=o(" \u2014 "),oZ=a("a"),C9r=o("TFXGLMForCausalLM"),w9r=o(" (XGLM model)"),A9r=l(),eC=a("li"),rCe=a("strong"),L9r=o("xlm"),y9r=o(" \u2014 "),rZ=a("a"),x9r=o("TFXLMWithLMHeadModel"),$9r=o(" (XLM model)"),k9r=l(),oC=a("li"),tCe=a("strong"),S9r=o("xlnet"),R9r=o(" \u2014 "),tZ=a("a"),P9r=o("TFXLNetLMHeadModel"),B9r=o(" (XLNet model)"),I9r=l(),F(rC.$$.fragment),gHe=l(),Sc=a("h2"),tC=a("a"),aCe=a("span"),F(M$.$$.fragment),N9r=l(),nCe=a("span"),q9r=o("TFAutoModelForImageClassification"),hHe=l(),lr=a("div"),F(E$.$$.fragment),j9r=l(),Rc=a("p"),D9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aZ=a("a"),G9r=o("from_pretrained()"),O9r=o(" class method or the "),nZ=a("a"),V9r=o("from_config()"),X9r=o(` class
method.`),z9r=l(),C$=a("p"),W9r=o("This class cannot be instantiated directly using "),sCe=a("code"),Q9r=o("__init__()"),U9r=o(" (throws an error)."),H9r=l(),Gt=a("div"),F(w$.$$.fragment),J9r=l(),lCe=a("p"),Y9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),K9r=l(),Pc=a("p"),Z9r=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),exr=o("not"),oxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=a("a"),rxr=o("from_pretrained()"),txr=o(" to load the model weights."),axr=l(),F(aC.$$.fragment),nxr=l(),Ir=a("div"),F(A$.$$.fragment),sxr=l(),dCe=a("p"),lxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ixr=l(),vn=a("p"),dxr=o("The model class to instantiate is selected based on the "),cCe=a("code"),cxr=o("model_type"),fxr=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),mxr=o("pretrained_model_name_or_path"),gxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),hxr=o("pretrained_model_name_or_path"),pxr=o(":"),_xr=l(),Ve=a("ul"),nC=a("li"),gCe=a("strong"),uxr=o("convnext"),bxr=o(" \u2014 "),lZ=a("a"),vxr=o("TFConvNextForImageClassification"),Fxr=o(" (ConvNeXT model)"),Txr=l(),sC=a("li"),hCe=a("strong"),Mxr=o("data2vec-vision"),Exr=o(" \u2014 "),iZ=a("a"),Cxr=o("TFData2VecVisionForImageClassification"),wxr=o(" (Data2VecVision model)"),Axr=l(),dl=a("li"),pCe=a("strong"),Lxr=o("deit"),yxr=o(" \u2014 "),dZ=a("a"),xxr=o("TFDeiTForImageClassification"),$xr=o(" or "),cZ=a("a"),kxr=o("TFDeiTForImageClassificationWithTeacher"),Sxr=o(" (DeiT model)"),Rxr=l(),lC=a("li"),_Ce=a("strong"),Pxr=o("regnet"),Bxr=o(" \u2014 "),fZ=a("a"),Ixr=o("TFRegNetForImageClassification"),Nxr=o(" (RegNet model)"),qxr=l(),iC=a("li"),uCe=a("strong"),jxr=o("resnet"),Dxr=o(" \u2014 "),mZ=a("a"),Gxr=o("TFResNetForImageClassification"),Oxr=o(" (ResNet model)"),Vxr=l(),dC=a("li"),bCe=a("strong"),Xxr=o("segformer"),zxr=o(" \u2014 "),gZ=a("a"),Wxr=o("TFSegformerForImageClassification"),Qxr=o(" (SegFormer model)"),Uxr=l(),cC=a("li"),vCe=a("strong"),Hxr=o("swin"),Jxr=o(" \u2014 "),hZ=a("a"),Yxr=o("TFSwinForImageClassification"),Kxr=o(" (Swin Transformer model)"),Zxr=l(),fC=a("li"),FCe=a("strong"),e$r=o("vit"),o$r=o(" \u2014 "),pZ=a("a"),r$r=o("TFViTForImageClassification"),t$r=o(" (ViT model)"),a$r=l(),F(mC.$$.fragment),pHe=l(),Bc=a("h2"),gC=a("a"),TCe=a("span"),F(L$.$$.fragment),n$r=l(),MCe=a("span"),s$r=o("TFAutoModelForSemanticSegmentation"),_He=l(),ir=a("div"),F(y$.$$.fragment),l$r=l(),Ic=a("p"),i$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_Z=a("a"),d$r=o("from_pretrained()"),c$r=o(" class method or the "),uZ=a("a"),f$r=o("from_config()"),m$r=o(` class
method.`),g$r=l(),x$=a("p"),h$r=o("This class cannot be instantiated directly using "),ECe=a("code"),p$r=o("__init__()"),_$r=o(" (throws an error)."),u$r=l(),Ot=a("div"),F($$.$$.fragment),b$r=l(),CCe=a("p"),v$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),F$r=l(),Nc=a("p"),T$r=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),M$r=o("not"),E$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bZ=a("a"),C$r=o("from_pretrained()"),w$r=o(" to load the model weights."),A$r=l(),F(hC.$$.fragment),L$r=l(),Nr=a("div"),F(k$.$$.fragment),y$r=l(),ACe=a("p"),x$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$$r=l(),Fn=a("p"),k$r=o("The model class to instantiate is selected based on the "),LCe=a("code"),S$r=o("model_type"),R$r=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),P$r=o("pretrained_model_name_or_path"),B$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),I$r=o("pretrained_model_name_or_path"),N$r=o(":"),q$r=l(),S$=a("ul"),pC=a("li"),$Ce=a("strong"),j$r=o("data2vec-vision"),D$r=o(" \u2014 "),vZ=a("a"),G$r=o("TFData2VecVisionForSemanticSegmentation"),O$r=o(" (Data2VecVision model)"),V$r=l(),_C=a("li"),kCe=a("strong"),X$r=o("segformer"),z$r=o(" \u2014 "),FZ=a("a"),W$r=o("TFSegformerForSemanticSegmentation"),Q$r=o(" (SegFormer model)"),U$r=l(),F(uC.$$.fragment),uHe=l(),qc=a("h2"),bC=a("a"),SCe=a("span"),F(R$.$$.fragment),H$r=l(),RCe=a("span"),J$r=o("TFAutoModelForMaskedLM"),bHe=l(),dr=a("div"),F(P$.$$.fragment),Y$r=l(),jc=a("p"),K$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=a("a"),Z$r=o("from_pretrained()"),ekr=o(" class method or the "),MZ=a("a"),okr=o("from_config()"),rkr=o(` class
method.`),tkr=l(),B$=a("p"),akr=o("This class cannot be instantiated directly using "),PCe=a("code"),nkr=o("__init__()"),skr=o(" (throws an error)."),lkr=l(),Vt=a("div"),F(I$.$$.fragment),ikr=l(),BCe=a("p"),dkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ckr=l(),Dc=a("p"),fkr=o(`Note:
Loading a model from its configuration file does `),ICe=a("strong"),mkr=o("not"),gkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),hkr=o("from_pretrained()"),pkr=o(" to load the model weights."),_kr=l(),F(vC.$$.fragment),ukr=l(),qr=a("div"),F(N$.$$.fragment),bkr=l(),NCe=a("p"),vkr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fkr=l(),Tn=a("p"),Tkr=o("The model class to instantiate is selected based on the "),qCe=a("code"),Mkr=o("model_type"),Ekr=o(` property of the config object (either
passed as an argument or loaded from `),jCe=a("code"),Ckr=o("pretrained_model_name_or_path"),wkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DCe=a("code"),Akr=o("pretrained_model_name_or_path"),Lkr=o(":"),ykr=l(),de=a("ul"),FC=a("li"),GCe=a("strong"),xkr=o("albert"),$kr=o(" \u2014 "),CZ=a("a"),kkr=o("TFAlbertForMaskedLM"),Skr=o(" (ALBERT model)"),Rkr=l(),TC=a("li"),OCe=a("strong"),Pkr=o("bert"),Bkr=o(" \u2014 "),wZ=a("a"),Ikr=o("TFBertForMaskedLM"),Nkr=o(" (BERT model)"),qkr=l(),MC=a("li"),VCe=a("strong"),jkr=o("camembert"),Dkr=o(" \u2014 "),AZ=a("a"),Gkr=o("TFCamembertForMaskedLM"),Okr=o(" (CamemBERT model)"),Vkr=l(),EC=a("li"),XCe=a("strong"),Xkr=o("convbert"),zkr=o(" \u2014 "),LZ=a("a"),Wkr=o("TFConvBertForMaskedLM"),Qkr=o(" (ConvBERT model)"),Ukr=l(),CC=a("li"),zCe=a("strong"),Hkr=o("deberta"),Jkr=o(" \u2014 "),yZ=a("a"),Ykr=o("TFDebertaForMaskedLM"),Kkr=o(" (DeBERTa model)"),Zkr=l(),wC=a("li"),WCe=a("strong"),eSr=o("deberta-v2"),oSr=o(" \u2014 "),xZ=a("a"),rSr=o("TFDebertaV2ForMaskedLM"),tSr=o(" (DeBERTa-v2 model)"),aSr=l(),AC=a("li"),QCe=a("strong"),nSr=o("distilbert"),sSr=o(" \u2014 "),$Z=a("a"),lSr=o("TFDistilBertForMaskedLM"),iSr=o(" (DistilBERT model)"),dSr=l(),LC=a("li"),UCe=a("strong"),cSr=o("electra"),fSr=o(" \u2014 "),kZ=a("a"),mSr=o("TFElectraForMaskedLM"),gSr=o(" (ELECTRA model)"),hSr=l(),yC=a("li"),HCe=a("strong"),pSr=o("flaubert"),_Sr=o(" \u2014 "),SZ=a("a"),uSr=o("TFFlaubertWithLMHeadModel"),bSr=o(" (FlauBERT model)"),vSr=l(),xC=a("li"),JCe=a("strong"),FSr=o("funnel"),TSr=o(" \u2014 "),RZ=a("a"),MSr=o("TFFunnelForMaskedLM"),ESr=o(" (Funnel Transformer model)"),CSr=l(),$C=a("li"),YCe=a("strong"),wSr=o("layoutlm"),ASr=o(" \u2014 "),PZ=a("a"),LSr=o("TFLayoutLMForMaskedLM"),ySr=o(" (LayoutLM model)"),xSr=l(),kC=a("li"),KCe=a("strong"),$Sr=o("longformer"),kSr=o(" \u2014 "),BZ=a("a"),SSr=o("TFLongformerForMaskedLM"),RSr=o(" (Longformer model)"),PSr=l(),SC=a("li"),ZCe=a("strong"),BSr=o("mobilebert"),ISr=o(" \u2014 "),IZ=a("a"),NSr=o("TFMobileBertForMaskedLM"),qSr=o(" (MobileBERT model)"),jSr=l(),RC=a("li"),e3e=a("strong"),DSr=o("mpnet"),GSr=o(" \u2014 "),NZ=a("a"),OSr=o("TFMPNetForMaskedLM"),VSr=o(" (MPNet model)"),XSr=l(),PC=a("li"),o3e=a("strong"),zSr=o("rembert"),WSr=o(" \u2014 "),qZ=a("a"),QSr=o("TFRemBertForMaskedLM"),USr=o(" (RemBERT model)"),HSr=l(),BC=a("li"),r3e=a("strong"),JSr=o("roberta"),YSr=o(" \u2014 "),jZ=a("a"),KSr=o("TFRobertaForMaskedLM"),ZSr=o(" (RoBERTa model)"),eRr=l(),IC=a("li"),t3e=a("strong"),oRr=o("roformer"),rRr=o(" \u2014 "),DZ=a("a"),tRr=o("TFRoFormerForMaskedLM"),aRr=o(" (RoFormer model)"),nRr=l(),NC=a("li"),a3e=a("strong"),sRr=o("tapas"),lRr=o(" \u2014 "),GZ=a("a"),iRr=o("TFTapasForMaskedLM"),dRr=o(" (TAPAS model)"),cRr=l(),qC=a("li"),n3e=a("strong"),fRr=o("xlm"),mRr=o(" \u2014 "),OZ=a("a"),gRr=o("TFXLMWithLMHeadModel"),hRr=o(" (XLM model)"),pRr=l(),jC=a("li"),s3e=a("strong"),_Rr=o("xlm-roberta"),uRr=o(" \u2014 "),VZ=a("a"),bRr=o("TFXLMRobertaForMaskedLM"),vRr=o(" (XLM-RoBERTa model)"),FRr=l(),F(DC.$$.fragment),vHe=l(),Gc=a("h2"),GC=a("a"),l3e=a("span"),F(q$.$$.fragment),TRr=l(),i3e=a("span"),MRr=o("TFAutoModelForSeq2SeqLM"),FHe=l(),cr=a("div"),F(j$.$$.fragment),ERr=l(),Oc=a("p"),CRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XZ=a("a"),wRr=o("from_pretrained()"),ARr=o(" class method or the "),zZ=a("a"),LRr=o("from_config()"),yRr=o(` class
method.`),xRr=l(),D$=a("p"),$Rr=o("This class cannot be instantiated directly using "),d3e=a("code"),kRr=o("__init__()"),SRr=o(" (throws an error)."),RRr=l(),Xt=a("div"),F(G$.$$.fragment),PRr=l(),c3e=a("p"),BRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IRr=l(),Vc=a("p"),NRr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),qRr=o("not"),jRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("a"),DRr=o("from_pretrained()"),GRr=o(" to load the model weights."),ORr=l(),F(OC.$$.fragment),VRr=l(),jr=a("div"),F(O$.$$.fragment),XRr=l(),m3e=a("p"),zRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WRr=l(),Mn=a("p"),QRr=o("The model class to instantiate is selected based on the "),g3e=a("code"),URr=o("model_type"),HRr=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),JRr=o("pretrained_model_name_or_path"),YRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(":"),ePr=l(),ye=a("ul"),VC=a("li"),_3e=a("strong"),oPr=o("bart"),rPr=o(" \u2014 "),QZ=a("a"),tPr=o("TFBartForConditionalGeneration"),aPr=o(" (BART model)"),nPr=l(),XC=a("li"),u3e=a("strong"),sPr=o("blenderbot"),lPr=o(" \u2014 "),UZ=a("a"),iPr=o("TFBlenderbotForConditionalGeneration"),dPr=o(" (Blenderbot model)"),cPr=l(),zC=a("li"),b3e=a("strong"),fPr=o("blenderbot-small"),mPr=o(" \u2014 "),HZ=a("a"),gPr=o("TFBlenderbotSmallForConditionalGeneration"),hPr=o(" (BlenderbotSmall model)"),pPr=l(),WC=a("li"),v3e=a("strong"),_Pr=o("encoder-decoder"),uPr=o(" \u2014 "),JZ=a("a"),bPr=o("TFEncoderDecoderModel"),vPr=o(" (Encoder decoder model)"),FPr=l(),QC=a("li"),F3e=a("strong"),TPr=o("led"),MPr=o(" \u2014 "),YZ=a("a"),EPr=o("TFLEDForConditionalGeneration"),CPr=o(" (LED model)"),wPr=l(),UC=a("li"),T3e=a("strong"),APr=o("marian"),LPr=o(" \u2014 "),KZ=a("a"),yPr=o("TFMarianMTModel"),xPr=o(" (Marian model)"),$Pr=l(),HC=a("li"),M3e=a("strong"),kPr=o("mbart"),SPr=o(" \u2014 "),ZZ=a("a"),RPr=o("TFMBartForConditionalGeneration"),PPr=o(" (mBART model)"),BPr=l(),JC=a("li"),E3e=a("strong"),IPr=o("mt5"),NPr=o(" \u2014 "),eee=a("a"),qPr=o("TFMT5ForConditionalGeneration"),jPr=o(" (MT5 model)"),DPr=l(),YC=a("li"),C3e=a("strong"),GPr=o("pegasus"),OPr=o(" \u2014 "),oee=a("a"),VPr=o("TFPegasusForConditionalGeneration"),XPr=o(" (Pegasus model)"),zPr=l(),KC=a("li"),w3e=a("strong"),WPr=o("t5"),QPr=o(" \u2014 "),ree=a("a"),UPr=o("TFT5ForConditionalGeneration"),HPr=o(" (T5 model)"),JPr=l(),F(ZC.$$.fragment),THe=l(),Xc=a("h2"),e3=a("a"),A3e=a("span"),F(V$.$$.fragment),YPr=l(),L3e=a("span"),KPr=o("TFAutoModelForSequenceClassification"),MHe=l(),fr=a("div"),F(X$.$$.fragment),ZPr=l(),zc=a("p"),eBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tee=a("a"),oBr=o("from_pretrained()"),rBr=o(" class method or the "),aee=a("a"),tBr=o("from_config()"),aBr=o(` class
method.`),nBr=l(),z$=a("p"),sBr=o("This class cannot be instantiated directly using "),y3e=a("code"),lBr=o("__init__()"),iBr=o(" (throws an error)."),dBr=l(),zt=a("div"),F(W$.$$.fragment),cBr=l(),x3e=a("p"),fBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mBr=l(),Wc=a("p"),gBr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),hBr=o("not"),pBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=a("a"),_Br=o("from_pretrained()"),uBr=o(" to load the model weights."),bBr=l(),F(o3.$$.fragment),vBr=l(),Dr=a("div"),F(Q$.$$.fragment),FBr=l(),k3e=a("p"),TBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MBr=l(),En=a("p"),EBr=o("The model class to instantiate is selected based on the "),S3e=a("code"),CBr=o("model_type"),wBr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),ABr=o("pretrained_model_name_or_path"),LBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),yBr=o("pretrained_model_name_or_path"),xBr=o(":"),$Br=l(),te=a("ul"),r3=a("li"),B3e=a("strong"),kBr=o("albert"),SBr=o(" \u2014 "),see=a("a"),RBr=o("TFAlbertForSequenceClassification"),PBr=o(" (ALBERT model)"),BBr=l(),t3=a("li"),I3e=a("strong"),IBr=o("bert"),NBr=o(" \u2014 "),lee=a("a"),qBr=o("TFBertForSequenceClassification"),jBr=o(" (BERT model)"),DBr=l(),a3=a("li"),N3e=a("strong"),GBr=o("camembert"),OBr=o(" \u2014 "),iee=a("a"),VBr=o("TFCamembertForSequenceClassification"),XBr=o(" (CamemBERT model)"),zBr=l(),n3=a("li"),q3e=a("strong"),WBr=o("convbert"),QBr=o(" \u2014 "),dee=a("a"),UBr=o("TFConvBertForSequenceClassification"),HBr=o(" (ConvBERT model)"),JBr=l(),s3=a("li"),j3e=a("strong"),YBr=o("ctrl"),KBr=o(" \u2014 "),cee=a("a"),ZBr=o("TFCTRLForSequenceClassification"),eIr=o(" (CTRL model)"),oIr=l(),l3=a("li"),D3e=a("strong"),rIr=o("deberta"),tIr=o(" \u2014 "),fee=a("a"),aIr=o("TFDebertaForSequenceClassification"),nIr=o(" (DeBERTa model)"),sIr=l(),i3=a("li"),G3e=a("strong"),lIr=o("deberta-v2"),iIr=o(" \u2014 "),mee=a("a"),dIr=o("TFDebertaV2ForSequenceClassification"),cIr=o(" (DeBERTa-v2 model)"),fIr=l(),d3=a("li"),O3e=a("strong"),mIr=o("distilbert"),gIr=o(" \u2014 "),gee=a("a"),hIr=o("TFDistilBertForSequenceClassification"),pIr=o(" (DistilBERT model)"),_Ir=l(),c3=a("li"),V3e=a("strong"),uIr=o("electra"),bIr=o(" \u2014 "),hee=a("a"),vIr=o("TFElectraForSequenceClassification"),FIr=o(" (ELECTRA model)"),TIr=l(),f3=a("li"),X3e=a("strong"),MIr=o("flaubert"),EIr=o(" \u2014 "),pee=a("a"),CIr=o("TFFlaubertForSequenceClassification"),wIr=o(" (FlauBERT model)"),AIr=l(),m3=a("li"),z3e=a("strong"),LIr=o("funnel"),yIr=o(" \u2014 "),_ee=a("a"),xIr=o("TFFunnelForSequenceClassification"),$Ir=o(" (Funnel Transformer model)"),kIr=l(),g3=a("li"),W3e=a("strong"),SIr=o("gpt2"),RIr=o(" \u2014 "),uee=a("a"),PIr=o("TFGPT2ForSequenceClassification"),BIr=o(" (OpenAI GPT-2 model)"),IIr=l(),h3=a("li"),Q3e=a("strong"),NIr=o("gptj"),qIr=o(" \u2014 "),bee=a("a"),jIr=o("TFGPTJForSequenceClassification"),DIr=o(" (GPT-J model)"),GIr=l(),p3=a("li"),U3e=a("strong"),OIr=o("layoutlm"),VIr=o(" \u2014 "),vee=a("a"),XIr=o("TFLayoutLMForSequenceClassification"),zIr=o(" (LayoutLM model)"),WIr=l(),_3=a("li"),H3e=a("strong"),QIr=o("longformer"),UIr=o(" \u2014 "),Fee=a("a"),HIr=o("TFLongformerForSequenceClassification"),JIr=o(" (Longformer model)"),YIr=l(),u3=a("li"),J3e=a("strong"),KIr=o("mobilebert"),ZIr=o(" \u2014 "),Tee=a("a"),eNr=o("TFMobileBertForSequenceClassification"),oNr=o(" (MobileBERT model)"),rNr=l(),b3=a("li"),Y3e=a("strong"),tNr=o("mpnet"),aNr=o(" \u2014 "),Mee=a("a"),nNr=o("TFMPNetForSequenceClassification"),sNr=o(" (MPNet model)"),lNr=l(),v3=a("li"),K3e=a("strong"),iNr=o("openai-gpt"),dNr=o(" \u2014 "),Eee=a("a"),cNr=o("TFOpenAIGPTForSequenceClassification"),fNr=o(" (OpenAI GPT model)"),mNr=l(),F3=a("li"),Z3e=a("strong"),gNr=o("rembert"),hNr=o(" \u2014 "),Cee=a("a"),pNr=o("TFRemBertForSequenceClassification"),_Nr=o(" (RemBERT model)"),uNr=l(),T3=a("li"),e5e=a("strong"),bNr=o("roberta"),vNr=o(" \u2014 "),wee=a("a"),FNr=o("TFRobertaForSequenceClassification"),TNr=o(" (RoBERTa model)"),MNr=l(),M3=a("li"),o5e=a("strong"),ENr=o("roformer"),CNr=o(" \u2014 "),Aee=a("a"),wNr=o("TFRoFormerForSequenceClassification"),ANr=o(" (RoFormer model)"),LNr=l(),E3=a("li"),r5e=a("strong"),yNr=o("tapas"),xNr=o(" \u2014 "),Lee=a("a"),$Nr=o("TFTapasForSequenceClassification"),kNr=o(" (TAPAS model)"),SNr=l(),C3=a("li"),t5e=a("strong"),RNr=o("transfo-xl"),PNr=o(" \u2014 "),yee=a("a"),BNr=o("TFTransfoXLForSequenceClassification"),INr=o(" (Transformer-XL model)"),NNr=l(),w3=a("li"),a5e=a("strong"),qNr=o("xlm"),jNr=o(" \u2014 "),xee=a("a"),DNr=o("TFXLMForSequenceClassification"),GNr=o(" (XLM model)"),ONr=l(),A3=a("li"),n5e=a("strong"),VNr=o("xlm-roberta"),XNr=o(" \u2014 "),$ee=a("a"),zNr=o("TFXLMRobertaForSequenceClassification"),WNr=o(" (XLM-RoBERTa model)"),QNr=l(),L3=a("li"),s5e=a("strong"),UNr=o("xlnet"),HNr=o(" \u2014 "),kee=a("a"),JNr=o("TFXLNetForSequenceClassification"),YNr=o(" (XLNet model)"),KNr=l(),F(y3.$$.fragment),EHe=l(),Qc=a("h2"),x3=a("a"),l5e=a("span"),F(U$.$$.fragment),ZNr=l(),i5e=a("span"),eqr=o("TFAutoModelForMultipleChoice"),CHe=l(),mr=a("div"),F(H$.$$.fragment),oqr=l(),Uc=a("p"),rqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),See=a("a"),tqr=o("from_pretrained()"),aqr=o(" class method or the "),Ree=a("a"),nqr=o("from_config()"),sqr=o(` class
method.`),lqr=l(),J$=a("p"),iqr=o("This class cannot be instantiated directly using "),d5e=a("code"),dqr=o("__init__()"),cqr=o(" (throws an error)."),fqr=l(),Wt=a("div"),F(Y$.$$.fragment),mqr=l(),c5e=a("p"),gqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hqr=l(),Hc=a("p"),pqr=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),_qr=o("not"),uqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),bqr=o("from_pretrained()"),vqr=o(" to load the model weights."),Fqr=l(),F($3.$$.fragment),Tqr=l(),Gr=a("div"),F(K$.$$.fragment),Mqr=l(),m5e=a("p"),Eqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cqr=l(),Cn=a("p"),wqr=o("The model class to instantiate is selected based on the "),g5e=a("code"),Aqr=o("model_type"),Lqr=o(` property of the config object (either
passed as an argument or loaded from `),h5e=a("code"),yqr=o("pretrained_model_name_or_path"),xqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),$qr=o("pretrained_model_name_or_path"),kqr=o(":"),Sqr=l(),ve=a("ul"),k3=a("li"),_5e=a("strong"),Rqr=o("albert"),Pqr=o(" \u2014 "),Bee=a("a"),Bqr=o("TFAlbertForMultipleChoice"),Iqr=o(" (ALBERT model)"),Nqr=l(),S3=a("li"),u5e=a("strong"),qqr=o("bert"),jqr=o(" \u2014 "),Iee=a("a"),Dqr=o("TFBertForMultipleChoice"),Gqr=o(" (BERT model)"),Oqr=l(),R3=a("li"),b5e=a("strong"),Vqr=o("camembert"),Xqr=o(" \u2014 "),Nee=a("a"),zqr=o("TFCamembertForMultipleChoice"),Wqr=o(" (CamemBERT model)"),Qqr=l(),P3=a("li"),v5e=a("strong"),Uqr=o("convbert"),Hqr=o(" \u2014 "),qee=a("a"),Jqr=o("TFConvBertForMultipleChoice"),Yqr=o(" (ConvBERT model)"),Kqr=l(),B3=a("li"),F5e=a("strong"),Zqr=o("distilbert"),ejr=o(" \u2014 "),jee=a("a"),ojr=o("TFDistilBertForMultipleChoice"),rjr=o(" (DistilBERT model)"),tjr=l(),I3=a("li"),T5e=a("strong"),ajr=o("electra"),njr=o(" \u2014 "),Dee=a("a"),sjr=o("TFElectraForMultipleChoice"),ljr=o(" (ELECTRA model)"),ijr=l(),N3=a("li"),M5e=a("strong"),djr=o("flaubert"),cjr=o(" \u2014 "),Gee=a("a"),fjr=o("TFFlaubertForMultipleChoice"),mjr=o(" (FlauBERT model)"),gjr=l(),q3=a("li"),E5e=a("strong"),hjr=o("funnel"),pjr=o(" \u2014 "),Oee=a("a"),_jr=o("TFFunnelForMultipleChoice"),ujr=o(" (Funnel Transformer model)"),bjr=l(),j3=a("li"),C5e=a("strong"),vjr=o("longformer"),Fjr=o(" \u2014 "),Vee=a("a"),Tjr=o("TFLongformerForMultipleChoice"),Mjr=o(" (Longformer model)"),Ejr=l(),D3=a("li"),w5e=a("strong"),Cjr=o("mobilebert"),wjr=o(" \u2014 "),Xee=a("a"),Ajr=o("TFMobileBertForMultipleChoice"),Ljr=o(" (MobileBERT model)"),yjr=l(),G3=a("li"),A5e=a("strong"),xjr=o("mpnet"),$jr=o(" \u2014 "),zee=a("a"),kjr=o("TFMPNetForMultipleChoice"),Sjr=o(" (MPNet model)"),Rjr=l(),O3=a("li"),L5e=a("strong"),Pjr=o("rembert"),Bjr=o(" \u2014 "),Wee=a("a"),Ijr=o("TFRemBertForMultipleChoice"),Njr=o(" (RemBERT model)"),qjr=l(),V3=a("li"),y5e=a("strong"),jjr=o("roberta"),Djr=o(" \u2014 "),Qee=a("a"),Gjr=o("TFRobertaForMultipleChoice"),Ojr=o(" (RoBERTa model)"),Vjr=l(),X3=a("li"),x5e=a("strong"),Xjr=o("roformer"),zjr=o(" \u2014 "),Uee=a("a"),Wjr=o("TFRoFormerForMultipleChoice"),Qjr=o(" (RoFormer model)"),Ujr=l(),z3=a("li"),$5e=a("strong"),Hjr=o("xlm"),Jjr=o(" \u2014 "),Hee=a("a"),Yjr=o("TFXLMForMultipleChoice"),Kjr=o(" (XLM model)"),Zjr=l(),W3=a("li"),k5e=a("strong"),eDr=o("xlm-roberta"),oDr=o(" \u2014 "),Jee=a("a"),rDr=o("TFXLMRobertaForMultipleChoice"),tDr=o(" (XLM-RoBERTa model)"),aDr=l(),Q3=a("li"),S5e=a("strong"),nDr=o("xlnet"),sDr=o(" \u2014 "),Yee=a("a"),lDr=o("TFXLNetForMultipleChoice"),iDr=o(" (XLNet model)"),dDr=l(),F(U3.$$.fragment),wHe=l(),Jc=a("h2"),H3=a("a"),R5e=a("span"),F(Z$.$$.fragment),cDr=l(),P5e=a("span"),fDr=o("TFAutoModelForNextSentencePrediction"),AHe=l(),gr=a("div"),F(ek.$$.fragment),mDr=l(),Yc=a("p"),gDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kee=a("a"),hDr=o("from_pretrained()"),pDr=o(" class method or the "),Zee=a("a"),_Dr=o("from_config()"),uDr=o(` class
method.`),bDr=l(),ok=a("p"),vDr=o("This class cannot be instantiated directly using "),B5e=a("code"),FDr=o("__init__()"),TDr=o(" (throws an error)."),MDr=l(),Qt=a("div"),F(rk.$$.fragment),EDr=l(),I5e=a("p"),CDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wDr=l(),Kc=a("p"),ADr=o(`Note:
Loading a model from its configuration file does `),N5e=a("strong"),LDr=o("not"),yDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=a("a"),xDr=o("from_pretrained()"),$Dr=o(" to load the model weights."),kDr=l(),F(J3.$$.fragment),SDr=l(),Or=a("div"),F(tk.$$.fragment),RDr=l(),q5e=a("p"),PDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BDr=l(),wn=a("p"),IDr=o("The model class to instantiate is selected based on the "),j5e=a("code"),NDr=o("model_type"),qDr=o(` property of the config object (either
passed as an argument or loaded from `),D5e=a("code"),jDr=o("pretrained_model_name_or_path"),DDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=a("code"),GDr=o("pretrained_model_name_or_path"),ODr=o(":"),VDr=l(),ak=a("ul"),Y3=a("li"),O5e=a("strong"),XDr=o("bert"),zDr=o(" \u2014 "),ooe=a("a"),WDr=o("TFBertForNextSentencePrediction"),QDr=o(" (BERT model)"),UDr=l(),K3=a("li"),V5e=a("strong"),HDr=o("mobilebert"),JDr=o(" \u2014 "),roe=a("a"),YDr=o("TFMobileBertForNextSentencePrediction"),KDr=o(" (MobileBERT model)"),ZDr=l(),F(Z3.$$.fragment),LHe=l(),Zc=a("h2"),e5=a("a"),X5e=a("span"),F(nk.$$.fragment),eGr=l(),z5e=a("span"),oGr=o("TFAutoModelForTableQuestionAnswering"),yHe=l(),hr=a("div"),F(sk.$$.fragment),rGr=l(),ef=a("p"),tGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),toe=a("a"),aGr=o("from_pretrained()"),nGr=o(" class method or the "),aoe=a("a"),sGr=o("from_config()"),lGr=o(` class
method.`),iGr=l(),lk=a("p"),dGr=o("This class cannot be instantiated directly using "),W5e=a("code"),cGr=o("__init__()"),fGr=o(" (throws an error)."),mGr=l(),Ut=a("div"),F(ik.$$.fragment),gGr=l(),Q5e=a("p"),hGr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pGr=l(),of=a("p"),_Gr=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),uGr=o("not"),bGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),vGr=o("from_pretrained()"),FGr=o(" to load the model weights."),TGr=l(),F(o5.$$.fragment),MGr=l(),Vr=a("div"),F(dk.$$.fragment),EGr=l(),H5e=a("p"),CGr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wGr=l(),An=a("p"),AGr=o("The model class to instantiate is selected based on the "),J5e=a("code"),LGr=o("model_type"),yGr=o(` property of the config object (either
passed as an argument or loaded from `),Y5e=a("code"),xGr=o("pretrained_model_name_or_path"),$Gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=a("code"),kGr=o("pretrained_model_name_or_path"),SGr=o(":"),RGr=l(),Z5e=a("ul"),r5=a("li"),ewe=a("strong"),PGr=o("tapas"),BGr=o(" \u2014 "),soe=a("a"),IGr=o("TFTapasForQuestionAnswering"),NGr=o(" (TAPAS model)"),qGr=l(),F(t5.$$.fragment),xHe=l(),rf=a("h2"),a5=a("a"),owe=a("span"),F(ck.$$.fragment),jGr=l(),rwe=a("span"),DGr=o("TFAutoModelForTokenClassification"),$He=l(),pr=a("div"),F(fk.$$.fragment),GGr=l(),tf=a("p"),OGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),loe=a("a"),VGr=o("from_pretrained()"),XGr=o(" class method or the "),ioe=a("a"),zGr=o("from_config()"),WGr=o(` class
method.`),QGr=l(),mk=a("p"),UGr=o("This class cannot be instantiated directly using "),twe=a("code"),HGr=o("__init__()"),JGr=o(" (throws an error)."),YGr=l(),Ht=a("div"),F(gk.$$.fragment),KGr=l(),awe=a("p"),ZGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eOr=l(),af=a("p"),oOr=o(`Note:
Loading a model from its configuration file does `),nwe=a("strong"),rOr=o("not"),tOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=a("a"),aOr=o("from_pretrained()"),nOr=o(" to load the model weights."),sOr=l(),F(n5.$$.fragment),lOr=l(),Xr=a("div"),F(hk.$$.fragment),iOr=l(),swe=a("p"),dOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cOr=l(),Ln=a("p"),fOr=o("The model class to instantiate is selected based on the "),lwe=a("code"),mOr=o("model_type"),gOr=o(` property of the config object (either
passed as an argument or loaded from `),iwe=a("code"),hOr=o("pretrained_model_name_or_path"),pOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=a("code"),_Or=o("pretrained_model_name_or_path"),uOr=o(":"),bOr=l(),ce=a("ul"),s5=a("li"),cwe=a("strong"),vOr=o("albert"),FOr=o(" \u2014 "),coe=a("a"),TOr=o("TFAlbertForTokenClassification"),MOr=o(" (ALBERT model)"),EOr=l(),l5=a("li"),fwe=a("strong"),COr=o("bert"),wOr=o(" \u2014 "),foe=a("a"),AOr=o("TFBertForTokenClassification"),LOr=o(" (BERT model)"),yOr=l(),i5=a("li"),mwe=a("strong"),xOr=o("camembert"),$Or=o(" \u2014 "),moe=a("a"),kOr=o("TFCamembertForTokenClassification"),SOr=o(" (CamemBERT model)"),ROr=l(),d5=a("li"),gwe=a("strong"),POr=o("convbert"),BOr=o(" \u2014 "),goe=a("a"),IOr=o("TFConvBertForTokenClassification"),NOr=o(" (ConvBERT model)"),qOr=l(),c5=a("li"),hwe=a("strong"),jOr=o("deberta"),DOr=o(" \u2014 "),hoe=a("a"),GOr=o("TFDebertaForTokenClassification"),OOr=o(" (DeBERTa model)"),VOr=l(),f5=a("li"),pwe=a("strong"),XOr=o("deberta-v2"),zOr=o(" \u2014 "),poe=a("a"),WOr=o("TFDebertaV2ForTokenClassification"),QOr=o(" (DeBERTa-v2 model)"),UOr=l(),m5=a("li"),_we=a("strong"),HOr=o("distilbert"),JOr=o(" \u2014 "),_oe=a("a"),YOr=o("TFDistilBertForTokenClassification"),KOr=o(" (DistilBERT model)"),ZOr=l(),g5=a("li"),uwe=a("strong"),eVr=o("electra"),oVr=o(" \u2014 "),uoe=a("a"),rVr=o("TFElectraForTokenClassification"),tVr=o(" (ELECTRA model)"),aVr=l(),h5=a("li"),bwe=a("strong"),nVr=o("flaubert"),sVr=o(" \u2014 "),boe=a("a"),lVr=o("TFFlaubertForTokenClassification"),iVr=o(" (FlauBERT model)"),dVr=l(),p5=a("li"),vwe=a("strong"),cVr=o("funnel"),fVr=o(" \u2014 "),voe=a("a"),mVr=o("TFFunnelForTokenClassification"),gVr=o(" (Funnel Transformer model)"),hVr=l(),_5=a("li"),Fwe=a("strong"),pVr=o("layoutlm"),_Vr=o(" \u2014 "),Foe=a("a"),uVr=o("TFLayoutLMForTokenClassification"),bVr=o(" (LayoutLM model)"),vVr=l(),u5=a("li"),Twe=a("strong"),FVr=o("longformer"),TVr=o(" \u2014 "),Toe=a("a"),MVr=o("TFLongformerForTokenClassification"),EVr=o(" (Longformer model)"),CVr=l(),b5=a("li"),Mwe=a("strong"),wVr=o("mobilebert"),AVr=o(" \u2014 "),Moe=a("a"),LVr=o("TFMobileBertForTokenClassification"),yVr=o(" (MobileBERT model)"),xVr=l(),v5=a("li"),Ewe=a("strong"),$Vr=o("mpnet"),kVr=o(" \u2014 "),Eoe=a("a"),SVr=o("TFMPNetForTokenClassification"),RVr=o(" (MPNet model)"),PVr=l(),F5=a("li"),Cwe=a("strong"),BVr=o("rembert"),IVr=o(" \u2014 "),Coe=a("a"),NVr=o("TFRemBertForTokenClassification"),qVr=o(" (RemBERT model)"),jVr=l(),T5=a("li"),wwe=a("strong"),DVr=o("roberta"),GVr=o(" \u2014 "),woe=a("a"),OVr=o("TFRobertaForTokenClassification"),VVr=o(" (RoBERTa model)"),XVr=l(),M5=a("li"),Awe=a("strong"),zVr=o("roformer"),WVr=o(" \u2014 "),Aoe=a("a"),QVr=o("TFRoFormerForTokenClassification"),UVr=o(" (RoFormer model)"),HVr=l(),E5=a("li"),Lwe=a("strong"),JVr=o("xlm"),YVr=o(" \u2014 "),Loe=a("a"),KVr=o("TFXLMForTokenClassification"),ZVr=o(" (XLM model)"),eXr=l(),C5=a("li"),ywe=a("strong"),oXr=o("xlm-roberta"),rXr=o(" \u2014 "),yoe=a("a"),tXr=o("TFXLMRobertaForTokenClassification"),aXr=o(" (XLM-RoBERTa model)"),nXr=l(),w5=a("li"),xwe=a("strong"),sXr=o("xlnet"),lXr=o(" \u2014 "),xoe=a("a"),iXr=o("TFXLNetForTokenClassification"),dXr=o(" (XLNet model)"),cXr=l(),F(A5.$$.fragment),kHe=l(),nf=a("h2"),L5=a("a"),$we=a("span"),F(pk.$$.fragment),fXr=l(),kwe=a("span"),mXr=o("TFAutoModelForQuestionAnswering"),SHe=l(),_r=a("div"),F(_k.$$.fragment),gXr=l(),sf=a("p"),hXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=a("a"),pXr=o("from_pretrained()"),_Xr=o(" class method or the "),koe=a("a"),uXr=o("from_config()"),bXr=o(` class
method.`),vXr=l(),uk=a("p"),FXr=o("This class cannot be instantiated directly using "),Swe=a("code"),TXr=o("__init__()"),MXr=o(" (throws an error)."),EXr=l(),Jt=a("div"),F(bk.$$.fragment),CXr=l(),Rwe=a("p"),wXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),AXr=l(),lf=a("p"),LXr=o(`Note:
Loading a model from its configuration file does `),Pwe=a("strong"),yXr=o("not"),xXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("a"),$Xr=o("from_pretrained()"),kXr=o(" to load the model weights."),SXr=l(),F(y5.$$.fragment),RXr=l(),zr=a("div"),F(vk.$$.fragment),PXr=l(),Bwe=a("p"),BXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),IXr=l(),yn=a("p"),NXr=o("The model class to instantiate is selected based on the "),Iwe=a("code"),qXr=o("model_type"),jXr=o(` property of the config object (either
passed as an argument or loaded from `),Nwe=a("code"),DXr=o("pretrained_model_name_or_path"),GXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(":"),XXr=l(),fe=a("ul"),x5=a("li"),jwe=a("strong"),zXr=o("albert"),WXr=o(" \u2014 "),Roe=a("a"),QXr=o("TFAlbertForQuestionAnswering"),UXr=o(" (ALBERT model)"),HXr=l(),$5=a("li"),Dwe=a("strong"),JXr=o("bert"),YXr=o(" \u2014 "),Poe=a("a"),KXr=o("TFBertForQuestionAnswering"),ZXr=o(" (BERT model)"),ezr=l(),k5=a("li"),Gwe=a("strong"),ozr=o("camembert"),rzr=o(" \u2014 "),Boe=a("a"),tzr=o("TFCamembertForQuestionAnswering"),azr=o(" (CamemBERT model)"),nzr=l(),S5=a("li"),Owe=a("strong"),szr=o("convbert"),lzr=o(" \u2014 "),Ioe=a("a"),izr=o("TFConvBertForQuestionAnswering"),dzr=o(" (ConvBERT model)"),czr=l(),R5=a("li"),Vwe=a("strong"),fzr=o("deberta"),mzr=o(" \u2014 "),Noe=a("a"),gzr=o("TFDebertaForQuestionAnswering"),hzr=o(" (DeBERTa model)"),pzr=l(),P5=a("li"),Xwe=a("strong"),_zr=o("deberta-v2"),uzr=o(" \u2014 "),qoe=a("a"),bzr=o("TFDebertaV2ForQuestionAnswering"),vzr=o(" (DeBERTa-v2 model)"),Fzr=l(),B5=a("li"),zwe=a("strong"),Tzr=o("distilbert"),Mzr=o(" \u2014 "),joe=a("a"),Ezr=o("TFDistilBertForQuestionAnswering"),Czr=o(" (DistilBERT model)"),wzr=l(),I5=a("li"),Wwe=a("strong"),Azr=o("electra"),Lzr=o(" \u2014 "),Doe=a("a"),yzr=o("TFElectraForQuestionAnswering"),xzr=o(" (ELECTRA model)"),$zr=l(),N5=a("li"),Qwe=a("strong"),kzr=o("flaubert"),Szr=o(" \u2014 "),Goe=a("a"),Rzr=o("TFFlaubertForQuestionAnsweringSimple"),Pzr=o(" (FlauBERT model)"),Bzr=l(),q5=a("li"),Uwe=a("strong"),Izr=o("funnel"),Nzr=o(" \u2014 "),Ooe=a("a"),qzr=o("TFFunnelForQuestionAnswering"),jzr=o(" (Funnel Transformer model)"),Dzr=l(),j5=a("li"),Hwe=a("strong"),Gzr=o("gptj"),Ozr=o(" \u2014 "),Voe=a("a"),Vzr=o("TFGPTJForQuestionAnswering"),Xzr=o(" (GPT-J model)"),zzr=l(),D5=a("li"),Jwe=a("strong"),Wzr=o("longformer"),Qzr=o(" \u2014 "),Xoe=a("a"),Uzr=o("TFLongformerForQuestionAnswering"),Hzr=o(" (Longformer model)"),Jzr=l(),G5=a("li"),Ywe=a("strong"),Yzr=o("mobilebert"),Kzr=o(" \u2014 "),zoe=a("a"),Zzr=o("TFMobileBertForQuestionAnswering"),eWr=o(" (MobileBERT model)"),oWr=l(),O5=a("li"),Kwe=a("strong"),rWr=o("mpnet"),tWr=o(" \u2014 "),Woe=a("a"),aWr=o("TFMPNetForQuestionAnswering"),nWr=o(" (MPNet model)"),sWr=l(),V5=a("li"),Zwe=a("strong"),lWr=o("rembert"),iWr=o(" \u2014 "),Qoe=a("a"),dWr=o("TFRemBertForQuestionAnswering"),cWr=o(" (RemBERT model)"),fWr=l(),X5=a("li"),e6e=a("strong"),mWr=o("roberta"),gWr=o(" \u2014 "),Uoe=a("a"),hWr=o("TFRobertaForQuestionAnswering"),pWr=o(" (RoBERTa model)"),_Wr=l(),z5=a("li"),o6e=a("strong"),uWr=o("roformer"),bWr=o(" \u2014 "),Hoe=a("a"),vWr=o("TFRoFormerForQuestionAnswering"),FWr=o(" (RoFormer model)"),TWr=l(),W5=a("li"),r6e=a("strong"),MWr=o("xlm"),EWr=o(" \u2014 "),Joe=a("a"),CWr=o("TFXLMForQuestionAnsweringSimple"),wWr=o(" (XLM model)"),AWr=l(),Q5=a("li"),t6e=a("strong"),LWr=o("xlm-roberta"),yWr=o(" \u2014 "),Yoe=a("a"),xWr=o("TFXLMRobertaForQuestionAnswering"),$Wr=o(" (XLM-RoBERTa model)"),kWr=l(),U5=a("li"),a6e=a("strong"),SWr=o("xlnet"),RWr=o(" \u2014 "),Koe=a("a"),PWr=o("TFXLNetForQuestionAnsweringSimple"),BWr=o(" (XLNet model)"),IWr=l(),F(H5.$$.fragment),RHe=l(),df=a("h2"),J5=a("a"),n6e=a("span"),F(Fk.$$.fragment),NWr=l(),s6e=a("span"),qWr=o("TFAutoModelForVision2Seq"),PHe=l(),ur=a("div"),F(Tk.$$.fragment),jWr=l(),cf=a("p"),DWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zoe=a("a"),GWr=o("from_pretrained()"),OWr=o(" class method or the "),ere=a("a"),VWr=o("from_config()"),XWr=o(` class
method.`),zWr=l(),Mk=a("p"),WWr=o("This class cannot be instantiated directly using "),l6e=a("code"),QWr=o("__init__()"),UWr=o(" (throws an error)."),HWr=l(),Yt=a("div"),F(Ek.$$.fragment),JWr=l(),i6e=a("p"),YWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KWr=l(),ff=a("p"),ZWr=o(`Note:
Loading a model from its configuration file does `),d6e=a("strong"),eQr=o("not"),oQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=a("a"),rQr=o("from_pretrained()"),tQr=o(" to load the model weights."),aQr=l(),F(Y5.$$.fragment),nQr=l(),Wr=a("div"),F(Ck.$$.fragment),sQr=l(),c6e=a("p"),lQr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iQr=l(),xn=a("p"),dQr=o("The model class to instantiate is selected based on the "),f6e=a("code"),cQr=o("model_type"),fQr=o(` property of the config object (either
passed as an argument or loaded from `),m6e=a("code"),mQr=o("pretrained_model_name_or_path"),gQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=a("code"),hQr=o("pretrained_model_name_or_path"),pQr=o(":"),_Qr=l(),h6e=a("ul"),K5=a("li"),p6e=a("strong"),uQr=o("vision-encoder-decoder"),bQr=o(" \u2014 "),rre=a("a"),vQr=o("TFVisionEncoderDecoderModel"),FQr=o(" (Vision Encoder decoder model)"),TQr=l(),F(Z5.$$.fragment),BHe=l(),mf=a("h2"),ew=a("a"),_6e=a("span"),F(wk.$$.fragment),MQr=l(),u6e=a("span"),EQr=o("TFAutoModelForSpeechSeq2Seq"),IHe=l(),br=a("div"),F(Ak.$$.fragment),CQr=l(),gf=a("p"),wQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tre=a("a"),AQr=o("from_pretrained()"),LQr=o(" class method or the "),are=a("a"),yQr=o("from_config()"),xQr=o(` class
method.`),$Qr=l(),Lk=a("p"),kQr=o("This class cannot be instantiated directly using "),b6e=a("code"),SQr=o("__init__()"),RQr=o(" (throws an error)."),PQr=l(),Kt=a("div"),F(yk.$$.fragment),BQr=l(),v6e=a("p"),IQr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NQr=l(),hf=a("p"),qQr=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),jQr=o("not"),DQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("a"),GQr=o("from_pretrained()"),OQr=o(" to load the model weights."),VQr=l(),F(ow.$$.fragment),XQr=l(),Qr=a("div"),F(xk.$$.fragment),zQr=l(),T6e=a("p"),WQr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),QQr=l(),$n=a("p"),UQr=o("The model class to instantiate is selected based on the "),M6e=a("code"),HQr=o("model_type"),JQr=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),YQr=o("pretrained_model_name_or_path"),KQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),ZQr=o("pretrained_model_name_or_path"),eUr=o(":"),oUr=l(),w6e=a("ul"),rw=a("li"),A6e=a("strong"),rUr=o("speech_to_text"),tUr=o(" \u2014 "),sre=a("a"),aUr=o("TFSpeech2TextForConditionalGeneration"),nUr=o(" (Speech2Text model)"),sUr=l(),F(tw.$$.fragment),NHe=l(),pf=a("h2"),aw=a("a"),L6e=a("span"),F($k.$$.fragment),lUr=l(),y6e=a("span"),iUr=o("FlaxAutoModel"),qHe=l(),vr=a("div"),F(kk.$$.fragment),dUr=l(),_f=a("p"),cUr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lre=a("a"),fUr=o("from_pretrained()"),mUr=o(" class method or the "),ire=a("a"),gUr=o("from_config()"),hUr=o(` class
method.`),pUr=l(),Sk=a("p"),_Ur=o("This class cannot be instantiated directly using "),x6e=a("code"),uUr=o("__init__()"),bUr=o(" (throws an error)."),vUr=l(),Zt=a("div"),F(Rk.$$.fragment),FUr=l(),$6e=a("p"),TUr=o("Instantiates one of the base model classes of the library from a configuration."),MUr=l(),uf=a("p"),EUr=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),CUr=o("not"),wUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=a("a"),AUr=o("from_pretrained()"),LUr=o(" to load the model weights."),yUr=l(),F(nw.$$.fragment),xUr=l(),Ur=a("div"),F(Pk.$$.fragment),$Ur=l(),S6e=a("p"),kUr=o("Instantiate one of the base model classes of the library from a pretrained model."),SUr=l(),kn=a("p"),RUr=o("The model class to instantiate is selected based on the "),R6e=a("code"),PUr=o("model_type"),BUr=o(` property of the config object (either
passed as an argument or loaded from `),P6e=a("code"),IUr=o("pretrained_model_name_or_path"),NUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B6e=a("code"),qUr=o("pretrained_model_name_or_path"),jUr=o(":"),DUr=l(),re=a("ul"),sw=a("li"),I6e=a("strong"),GUr=o("albert"),OUr=o(" \u2014 "),cre=a("a"),VUr=o("FlaxAlbertModel"),XUr=o(" (ALBERT model)"),zUr=l(),lw=a("li"),N6e=a("strong"),WUr=o("bart"),QUr=o(" \u2014 "),fre=a("a"),UUr=o("FlaxBartModel"),HUr=o(" (BART model)"),JUr=l(),iw=a("li"),q6e=a("strong"),YUr=o("beit"),KUr=o(" \u2014 "),mre=a("a"),ZUr=o("FlaxBeitModel"),eHr=o(" (BEiT model)"),oHr=l(),dw=a("li"),j6e=a("strong"),rHr=o("bert"),tHr=o(" \u2014 "),gre=a("a"),aHr=o("FlaxBertModel"),nHr=o(" (BERT model)"),sHr=l(),cw=a("li"),D6e=a("strong"),lHr=o("big_bird"),iHr=o(" \u2014 "),hre=a("a"),dHr=o("FlaxBigBirdModel"),cHr=o(" (BigBird model)"),fHr=l(),fw=a("li"),G6e=a("strong"),mHr=o("blenderbot"),gHr=o(" \u2014 "),pre=a("a"),hHr=o("FlaxBlenderbotModel"),pHr=o(" (Blenderbot model)"),_Hr=l(),mw=a("li"),O6e=a("strong"),uHr=o("blenderbot-small"),bHr=o(" \u2014 "),_re=a("a"),vHr=o("FlaxBlenderbotSmallModel"),FHr=o(" (BlenderbotSmall model)"),THr=l(),gw=a("li"),V6e=a("strong"),MHr=o("clip"),EHr=o(" \u2014 "),ure=a("a"),CHr=o("FlaxCLIPModel"),wHr=o(" (CLIP model)"),AHr=l(),hw=a("li"),X6e=a("strong"),LHr=o("distilbert"),yHr=o(" \u2014 "),bre=a("a"),xHr=o("FlaxDistilBertModel"),$Hr=o(" (DistilBERT model)"),kHr=l(),pw=a("li"),z6e=a("strong"),SHr=o("electra"),RHr=o(" \u2014 "),vre=a("a"),PHr=o("FlaxElectraModel"),BHr=o(" (ELECTRA model)"),IHr=l(),_w=a("li"),W6e=a("strong"),NHr=o("gpt2"),qHr=o(" \u2014 "),Fre=a("a"),jHr=o("FlaxGPT2Model"),DHr=o(" (OpenAI GPT-2 model)"),GHr=l(),uw=a("li"),Q6e=a("strong"),OHr=o("gpt_neo"),VHr=o(" \u2014 "),Tre=a("a"),XHr=o("FlaxGPTNeoModel"),zHr=o(" (GPT Neo model)"),WHr=l(),bw=a("li"),U6e=a("strong"),QHr=o("gptj"),UHr=o(" \u2014 "),Mre=a("a"),HHr=o("FlaxGPTJModel"),JHr=o(" (GPT-J model)"),YHr=l(),vw=a("li"),H6e=a("strong"),KHr=o("longt5"),ZHr=o(" \u2014 "),Ere=a("a"),eJr=o("FlaxLongT5Model"),oJr=o(" (LongT5 model)"),rJr=l(),Fw=a("li"),J6e=a("strong"),tJr=o("marian"),aJr=o(" \u2014 "),Cre=a("a"),nJr=o("FlaxMarianModel"),sJr=o(" (Marian model)"),lJr=l(),Tw=a("li"),Y6e=a("strong"),iJr=o("mbart"),dJr=o(" \u2014 "),wre=a("a"),cJr=o("FlaxMBartModel"),fJr=o(" (mBART model)"),mJr=l(),Mw=a("li"),K6e=a("strong"),gJr=o("mt5"),hJr=o(" \u2014 "),Are=a("a"),pJr=o("FlaxMT5Model"),_Jr=o(" (MT5 model)"),uJr=l(),Ew=a("li"),Z6e=a("strong"),bJr=o("opt"),vJr=o(" \u2014 "),Lre=a("a"),FJr=o("FlaxOPTModel"),TJr=o(" (OPT model)"),MJr=l(),Cw=a("li"),eAe=a("strong"),EJr=o("pegasus"),CJr=o(" \u2014 "),yre=a("a"),wJr=o("FlaxPegasusModel"),AJr=o(" (Pegasus model)"),LJr=l(),ww=a("li"),oAe=a("strong"),yJr=o("roberta"),xJr=o(" \u2014 "),xre=a("a"),$Jr=o("FlaxRobertaModel"),kJr=o(" (RoBERTa model)"),SJr=l(),Aw=a("li"),rAe=a("strong"),RJr=o("roformer"),PJr=o(" \u2014 "),$re=a("a"),BJr=o("FlaxRoFormerModel"),IJr=o(" (RoFormer model)"),NJr=l(),Lw=a("li"),tAe=a("strong"),qJr=o("t5"),jJr=o(" \u2014 "),kre=a("a"),DJr=o("FlaxT5Model"),GJr=o(" (T5 model)"),OJr=l(),yw=a("li"),aAe=a("strong"),VJr=o("vision-text-dual-encoder"),XJr=o(" \u2014 "),Sre=a("a"),zJr=o("FlaxVisionTextDualEncoderModel"),WJr=o(" (VisionTextDualEncoder model)"),QJr=l(),xw=a("li"),nAe=a("strong"),UJr=o("vit"),HJr=o(" \u2014 "),Rre=a("a"),JJr=o("FlaxViTModel"),YJr=o(" (ViT model)"),KJr=l(),$w=a("li"),sAe=a("strong"),ZJr=o("wav2vec2"),eYr=o(" \u2014 "),Pre=a("a"),oYr=o("FlaxWav2Vec2Model"),rYr=o(" (Wav2Vec2 model)"),tYr=l(),kw=a("li"),lAe=a("strong"),aYr=o("xglm"),nYr=o(" \u2014 "),Bre=a("a"),sYr=o("FlaxXGLMModel"),lYr=o(" (XGLM model)"),iYr=l(),Sw=a("li"),iAe=a("strong"),dYr=o("xlm-roberta"),cYr=o(" \u2014 "),Ire=a("a"),fYr=o("FlaxXLMRobertaModel"),mYr=o(" (XLM-RoBERTa model)"),gYr=l(),F(Rw.$$.fragment),jHe=l(),bf=a("h2"),Pw=a("a"),dAe=a("span"),F(Bk.$$.fragment),hYr=l(),cAe=a("span"),pYr=o("FlaxAutoModelForCausalLM"),DHe=l(),Fr=a("div"),F(Ik.$$.fragment),_Yr=l(),vf=a("p"),uYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nre=a("a"),bYr=o("from_pretrained()"),vYr=o(" class method or the "),qre=a("a"),FYr=o("from_config()"),TYr=o(` class
method.`),MYr=l(),Nk=a("p"),EYr=o("This class cannot be instantiated directly using "),fAe=a("code"),CYr=o("__init__()"),wYr=o(" (throws an error)."),AYr=l(),ea=a("div"),F(qk.$$.fragment),LYr=l(),mAe=a("p"),yYr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xYr=l(),Ff=a("p"),$Yr=o(`Note:
Loading a model from its configuration file does `),gAe=a("strong"),kYr=o("not"),SYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=a("a"),RYr=o("from_pretrained()"),PYr=o(" to load the model weights."),BYr=l(),F(Bw.$$.fragment),IYr=l(),Hr=a("div"),F(jk.$$.fragment),NYr=l(),hAe=a("p"),qYr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jYr=l(),Sn=a("p"),DYr=o("The model class to instantiate is selected based on the "),pAe=a("code"),GYr=o("model_type"),OYr=o(` property of the config object (either
passed as an argument or loaded from `),_Ae=a("code"),VYr=o("pretrained_model_name_or_path"),XYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uAe=a("code"),zYr=o("pretrained_model_name_or_path"),WYr=o(":"),QYr=l(),xe=a("ul"),Iw=a("li"),bAe=a("strong"),UYr=o("bart"),HYr=o(" \u2014 "),Dre=a("a"),JYr=o("FlaxBartForCausalLM"),YYr=o(" (BART model)"),KYr=l(),Nw=a("li"),vAe=a("strong"),ZYr=o("bert"),eKr=o(" \u2014 "),Gre=a("a"),oKr=o("FlaxBertForCausalLM"),rKr=o(" (BERT model)"),tKr=l(),qw=a("li"),FAe=a("strong"),aKr=o("big_bird"),nKr=o(" \u2014 "),Ore=a("a"),sKr=o("FlaxBigBirdForCausalLM"),lKr=o(" (BigBird model)"),iKr=l(),jw=a("li"),TAe=a("strong"),dKr=o("electra"),cKr=o(" \u2014 "),Vre=a("a"),fKr=o("FlaxElectraForCausalLM"),mKr=o(" (ELECTRA model)"),gKr=l(),Dw=a("li"),MAe=a("strong"),hKr=o("gpt2"),pKr=o(" \u2014 "),Xre=a("a"),_Kr=o("FlaxGPT2LMHeadModel"),uKr=o(" (OpenAI GPT-2 model)"),bKr=l(),Gw=a("li"),EAe=a("strong"),vKr=o("gpt_neo"),FKr=o(" \u2014 "),zre=a("a"),TKr=o("FlaxGPTNeoForCausalLM"),MKr=o(" (GPT Neo model)"),EKr=l(),Ow=a("li"),CAe=a("strong"),CKr=o("gptj"),wKr=o(" \u2014 "),Wre=a("a"),AKr=o("FlaxGPTJForCausalLM"),LKr=o(" (GPT-J model)"),yKr=l(),Vw=a("li"),wAe=a("strong"),xKr=o("opt"),$Kr=o(" \u2014 "),Qre=a("a"),kKr=o("FlaxOPTForCausalLM"),SKr=o(" (OPT model)"),RKr=l(),Xw=a("li"),AAe=a("strong"),PKr=o("roberta"),BKr=o(" \u2014 "),Ure=a("a"),IKr=o("FlaxRobertaForCausalLM"),NKr=o(" (RoBERTa model)"),qKr=l(),zw=a("li"),LAe=a("strong"),jKr=o("xglm"),DKr=o(" \u2014 "),Hre=a("a"),GKr=o("FlaxXGLMForCausalLM"),OKr=o(" (XGLM model)"),VKr=l(),F(Ww.$$.fragment),GHe=l(),Tf=a("h2"),Qw=a("a"),yAe=a("span"),F(Dk.$$.fragment),XKr=l(),xAe=a("span"),zKr=o("FlaxAutoModelForPreTraining"),OHe=l(),Tr=a("div"),F(Gk.$$.fragment),WKr=l(),Mf=a("p"),QKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jre=a("a"),UKr=o("from_pretrained()"),HKr=o(" class method or the "),Yre=a("a"),JKr=o("from_config()"),YKr=o(` class
method.`),KKr=l(),Ok=a("p"),ZKr=o("This class cannot be instantiated directly using "),$Ae=a("code"),eZr=o("__init__()"),oZr=o(" (throws an error)."),rZr=l(),oa=a("div"),F(Vk.$$.fragment),tZr=l(),kAe=a("p"),aZr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nZr=l(),Ef=a("p"),sZr=o(`Note:
Loading a model from its configuration file does `),SAe=a("strong"),lZr=o("not"),iZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kre=a("a"),dZr=o("from_pretrained()"),cZr=o(" to load the model weights."),fZr=l(),F(Uw.$$.fragment),mZr=l(),Jr=a("div"),F(Xk.$$.fragment),gZr=l(),RAe=a("p"),hZr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pZr=l(),Rn=a("p"),_Zr=o("The model class to instantiate is selected based on the "),PAe=a("code"),uZr=o("model_type"),bZr=o(` property of the config object (either
passed as an argument or loaded from `),BAe=a("code"),vZr=o("pretrained_model_name_or_path"),FZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IAe=a("code"),TZr=o("pretrained_model_name_or_path"),MZr=o(":"),EZr=l(),Ee=a("ul"),Hw=a("li"),NAe=a("strong"),CZr=o("albert"),wZr=o(" \u2014 "),Zre=a("a"),AZr=o("FlaxAlbertForPreTraining"),LZr=o(" (ALBERT model)"),yZr=l(),Jw=a("li"),qAe=a("strong"),xZr=o("bart"),$Zr=o(" \u2014 "),ete=a("a"),kZr=o("FlaxBartForConditionalGeneration"),SZr=o(" (BART model)"),RZr=l(),Yw=a("li"),jAe=a("strong"),PZr=o("bert"),BZr=o(" \u2014 "),ote=a("a"),IZr=o("FlaxBertForPreTraining"),NZr=o(" (BERT model)"),qZr=l(),Kw=a("li"),DAe=a("strong"),jZr=o("big_bird"),DZr=o(" \u2014 "),rte=a("a"),GZr=o("FlaxBigBirdForPreTraining"),OZr=o(" (BigBird model)"),VZr=l(),Zw=a("li"),GAe=a("strong"),XZr=o("electra"),zZr=o(" \u2014 "),tte=a("a"),WZr=o("FlaxElectraForPreTraining"),QZr=o(" (ELECTRA model)"),UZr=l(),e6=a("li"),OAe=a("strong"),HZr=o("longt5"),JZr=o(" \u2014 "),ate=a("a"),YZr=o("FlaxLongT5ForConditionalGeneration"),KZr=o(" (LongT5 model)"),ZZr=l(),o6=a("li"),VAe=a("strong"),eet=o("mbart"),oet=o(" \u2014 "),nte=a("a"),ret=o("FlaxMBartForConditionalGeneration"),tet=o(" (mBART model)"),aet=l(),r6=a("li"),XAe=a("strong"),net=o("mt5"),set=o(" \u2014 "),ste=a("a"),iet=o("FlaxMT5ForConditionalGeneration"),det=o(" (MT5 model)"),cet=l(),t6=a("li"),zAe=a("strong"),fet=o("roberta"),met=o(" \u2014 "),lte=a("a"),get=o("FlaxRobertaForMaskedLM"),het=o(" (RoBERTa model)"),pet=l(),a6=a("li"),WAe=a("strong"),_et=o("roformer"),uet=o(" \u2014 "),ite=a("a"),bet=o("FlaxRoFormerForMaskedLM"),vet=o(" (RoFormer model)"),Fet=l(),n6=a("li"),QAe=a("strong"),Tet=o("t5"),Met=o(" \u2014 "),dte=a("a"),Eet=o("FlaxT5ForConditionalGeneration"),Cet=o(" (T5 model)"),wet=l(),s6=a("li"),UAe=a("strong"),Aet=o("wav2vec2"),Let=o(" \u2014 "),cte=a("a"),yet=o("FlaxWav2Vec2ForPreTraining"),xet=o(" (Wav2Vec2 model)"),$et=l(),l6=a("li"),HAe=a("strong"),ket=o("xlm-roberta"),Set=o(" \u2014 "),fte=a("a"),Ret=o("FlaxXLMRobertaForMaskedLM"),Pet=o(" (XLM-RoBERTa model)"),Bet=l(),F(i6.$$.fragment),VHe=l(),Cf=a("h2"),d6=a("a"),JAe=a("span"),F(zk.$$.fragment),Iet=l(),YAe=a("span"),Net=o("FlaxAutoModelForMaskedLM"),XHe=l(),Mr=a("div"),F(Wk.$$.fragment),qet=l(),wf=a("p"),jet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mte=a("a"),Det=o("from_pretrained()"),Get=o(" class method or the "),gte=a("a"),Oet=o("from_config()"),Vet=o(` class
method.`),Xet=l(),Qk=a("p"),zet=o("This class cannot be instantiated directly using "),KAe=a("code"),Wet=o("__init__()"),Qet=o(" (throws an error)."),Uet=l(),ra=a("div"),F(Uk.$$.fragment),Het=l(),ZAe=a("p"),Jet=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yet=l(),Af=a("p"),Ket=o(`Note:
Loading a model from its configuration file does `),e7e=a("strong"),Zet=o("not"),eot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=a("a"),oot=o("from_pretrained()"),rot=o(" to load the model weights."),tot=l(),F(c6.$$.fragment),aot=l(),Yr=a("div"),F(Hk.$$.fragment),not=l(),o7e=a("p"),sot=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lot=l(),Pn=a("p"),iot=o("The model class to instantiate is selected based on the "),r7e=a("code"),dot=o("model_type"),cot=o(` property of the config object (either
passed as an argument or loaded from `),t7e=a("code"),fot=o("pretrained_model_name_or_path"),mot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=a("code"),got=o("pretrained_model_name_or_path"),hot=o(":"),pot=l(),$e=a("ul"),f6=a("li"),n7e=a("strong"),_ot=o("albert"),uot=o(" \u2014 "),pte=a("a"),bot=o("FlaxAlbertForMaskedLM"),vot=o(" (ALBERT model)"),Fot=l(),m6=a("li"),s7e=a("strong"),Tot=o("bart"),Mot=o(" \u2014 "),_te=a("a"),Eot=o("FlaxBartForConditionalGeneration"),Cot=o(" (BART model)"),wot=l(),g6=a("li"),l7e=a("strong"),Aot=o("bert"),Lot=o(" \u2014 "),ute=a("a"),yot=o("FlaxBertForMaskedLM"),xot=o(" (BERT model)"),$ot=l(),h6=a("li"),i7e=a("strong"),kot=o("big_bird"),Sot=o(" \u2014 "),bte=a("a"),Rot=o("FlaxBigBirdForMaskedLM"),Pot=o(" (BigBird model)"),Bot=l(),p6=a("li"),d7e=a("strong"),Iot=o("distilbert"),Not=o(" \u2014 "),vte=a("a"),qot=o("FlaxDistilBertForMaskedLM"),jot=o(" (DistilBERT model)"),Dot=l(),_6=a("li"),c7e=a("strong"),Got=o("electra"),Oot=o(" \u2014 "),Fte=a("a"),Vot=o("FlaxElectraForMaskedLM"),Xot=o(" (ELECTRA model)"),zot=l(),u6=a("li"),f7e=a("strong"),Wot=o("mbart"),Qot=o(" \u2014 "),Tte=a("a"),Uot=o("FlaxMBartForConditionalGeneration"),Hot=o(" (mBART model)"),Jot=l(),b6=a("li"),m7e=a("strong"),Yot=o("roberta"),Kot=o(" \u2014 "),Mte=a("a"),Zot=o("FlaxRobertaForMaskedLM"),ert=o(" (RoBERTa model)"),ort=l(),v6=a("li"),g7e=a("strong"),rrt=o("roformer"),trt=o(" \u2014 "),Ete=a("a"),art=o("FlaxRoFormerForMaskedLM"),nrt=o(" (RoFormer model)"),srt=l(),F6=a("li"),h7e=a("strong"),lrt=o("xlm-roberta"),irt=o(" \u2014 "),Cte=a("a"),drt=o("FlaxXLMRobertaForMaskedLM"),crt=o(" (XLM-RoBERTa model)"),frt=l(),F(T6.$$.fragment),zHe=l(),Lf=a("h2"),M6=a("a"),p7e=a("span"),F(Jk.$$.fragment),mrt=l(),_7e=a("span"),grt=o("FlaxAutoModelForSeq2SeqLM"),WHe=l(),Er=a("div"),F(Yk.$$.fragment),hrt=l(),yf=a("p"),prt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wte=a("a"),_rt=o("from_pretrained()"),urt=o(" class method or the "),Ate=a("a"),brt=o("from_config()"),vrt=o(` class
method.`),Frt=l(),Kk=a("p"),Trt=o("This class cannot be instantiated directly using "),u7e=a("code"),Mrt=o("__init__()"),Ert=o(" (throws an error)."),Crt=l(),ta=a("div"),F(Zk.$$.fragment),wrt=l(),b7e=a("p"),Art=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Lrt=l(),xf=a("p"),yrt=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),xrt=o("not"),$rt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lte=a("a"),krt=o("from_pretrained()"),Srt=o(" to load the model weights."),Rrt=l(),F(E6.$$.fragment),Prt=l(),Kr=a("div"),F(eS.$$.fragment),Brt=l(),F7e=a("p"),Irt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Nrt=l(),Bn=a("p"),qrt=o("The model class to instantiate is selected based on the "),T7e=a("code"),jrt=o("model_type"),Drt=o(` property of the config object (either
passed as an argument or loaded from `),M7e=a("code"),Grt=o("pretrained_model_name_or_path"),Ort=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=a("code"),Vrt=o("pretrained_model_name_or_path"),Xrt=o(":"),zrt=l(),ke=a("ul"),C6=a("li"),C7e=a("strong"),Wrt=o("bart"),Qrt=o(" \u2014 "),yte=a("a"),Urt=o("FlaxBartForConditionalGeneration"),Hrt=o(" (BART model)"),Jrt=l(),w6=a("li"),w7e=a("strong"),Yrt=o("blenderbot"),Krt=o(" \u2014 "),xte=a("a"),Zrt=o("FlaxBlenderbotForConditionalGeneration"),ett=o(" (Blenderbot model)"),ott=l(),A6=a("li"),A7e=a("strong"),rtt=o("blenderbot-small"),ttt=o(" \u2014 "),$te=a("a"),att=o("FlaxBlenderbotSmallForConditionalGeneration"),ntt=o(" (BlenderbotSmall model)"),stt=l(),L6=a("li"),L7e=a("strong"),ltt=o("encoder-decoder"),itt=o(" \u2014 "),kte=a("a"),dtt=o("FlaxEncoderDecoderModel"),ctt=o(" (Encoder decoder model)"),ftt=l(),y6=a("li"),y7e=a("strong"),mtt=o("longt5"),gtt=o(" \u2014 "),Ste=a("a"),htt=o("FlaxLongT5ForConditionalGeneration"),ptt=o(" (LongT5 model)"),_tt=l(),x6=a("li"),x7e=a("strong"),utt=o("marian"),btt=o(" \u2014 "),Rte=a("a"),vtt=o("FlaxMarianMTModel"),Ftt=o(" (Marian model)"),Ttt=l(),$6=a("li"),$7e=a("strong"),Mtt=o("mbart"),Ett=o(" \u2014 "),Pte=a("a"),Ctt=o("FlaxMBartForConditionalGeneration"),wtt=o(" (mBART model)"),Att=l(),k6=a("li"),k7e=a("strong"),Ltt=o("mt5"),ytt=o(" \u2014 "),Bte=a("a"),xtt=o("FlaxMT5ForConditionalGeneration"),$tt=o(" (MT5 model)"),ktt=l(),S6=a("li"),S7e=a("strong"),Stt=o("pegasus"),Rtt=o(" \u2014 "),Ite=a("a"),Ptt=o("FlaxPegasusForConditionalGeneration"),Btt=o(" (Pegasus model)"),Itt=l(),R6=a("li"),R7e=a("strong"),Ntt=o("t5"),qtt=o(" \u2014 "),Nte=a("a"),jtt=o("FlaxT5ForConditionalGeneration"),Dtt=o(" (T5 model)"),Gtt=l(),F(P6.$$.fragment),QHe=l(),$f=a("h2"),B6=a("a"),P7e=a("span"),F(oS.$$.fragment),Ott=l(),B7e=a("span"),Vtt=o("FlaxAutoModelForSequenceClassification"),UHe=l(),Cr=a("div"),F(rS.$$.fragment),Xtt=l(),kf=a("p"),ztt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qte=a("a"),Wtt=o("from_pretrained()"),Qtt=o(" class method or the "),jte=a("a"),Utt=o("from_config()"),Htt=o(` class
method.`),Jtt=l(),tS=a("p"),Ytt=o("This class cannot be instantiated directly using "),I7e=a("code"),Ktt=o("__init__()"),Ztt=o(" (throws an error)."),eat=l(),aa=a("div"),F(aS.$$.fragment),oat=l(),N7e=a("p"),rat=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tat=l(),Sf=a("p"),aat=o(`Note:
Loading a model from its configuration file does `),q7e=a("strong"),nat=o("not"),sat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=a("a"),lat=o("from_pretrained()"),iat=o(" to load the model weights."),dat=l(),F(I6.$$.fragment),cat=l(),Zr=a("div"),F(nS.$$.fragment),fat=l(),j7e=a("p"),mat=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gat=l(),In=a("p"),hat=o("The model class to instantiate is selected based on the "),D7e=a("code"),pat=o("model_type"),_at=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),uat=o("pretrained_model_name_or_path"),bat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),vat=o("pretrained_model_name_or_path"),Fat=o(":"),Tat=l(),Se=a("ul"),N6=a("li"),V7e=a("strong"),Mat=o("albert"),Eat=o(" \u2014 "),Gte=a("a"),Cat=o("FlaxAlbertForSequenceClassification"),wat=o(" (ALBERT model)"),Aat=l(),q6=a("li"),X7e=a("strong"),Lat=o("bart"),yat=o(" \u2014 "),Ote=a("a"),xat=o("FlaxBartForSequenceClassification"),$at=o(" (BART model)"),kat=l(),j6=a("li"),z7e=a("strong"),Sat=o("bert"),Rat=o(" \u2014 "),Vte=a("a"),Pat=o("FlaxBertForSequenceClassification"),Bat=o(" (BERT model)"),Iat=l(),D6=a("li"),W7e=a("strong"),Nat=o("big_bird"),qat=o(" \u2014 "),Xte=a("a"),jat=o("FlaxBigBirdForSequenceClassification"),Dat=o(" (BigBird model)"),Gat=l(),G6=a("li"),Q7e=a("strong"),Oat=o("distilbert"),Vat=o(" \u2014 "),zte=a("a"),Xat=o("FlaxDistilBertForSequenceClassification"),zat=o(" (DistilBERT model)"),Wat=l(),O6=a("li"),U7e=a("strong"),Qat=o("electra"),Uat=o(" \u2014 "),Wte=a("a"),Hat=o("FlaxElectraForSequenceClassification"),Jat=o(" (ELECTRA model)"),Yat=l(),V6=a("li"),H7e=a("strong"),Kat=o("mbart"),Zat=o(" \u2014 "),Qte=a("a"),ent=o("FlaxMBartForSequenceClassification"),ont=o(" (mBART model)"),rnt=l(),X6=a("li"),J7e=a("strong"),tnt=o("roberta"),ant=o(" \u2014 "),Ute=a("a"),nnt=o("FlaxRobertaForSequenceClassification"),snt=o(" (RoBERTa model)"),lnt=l(),z6=a("li"),Y7e=a("strong"),int=o("roformer"),dnt=o(" \u2014 "),Hte=a("a"),cnt=o("FlaxRoFormerForSequenceClassification"),fnt=o(" (RoFormer model)"),mnt=l(),W6=a("li"),K7e=a("strong"),gnt=o("xlm-roberta"),hnt=o(" \u2014 "),Jte=a("a"),pnt=o("FlaxXLMRobertaForSequenceClassification"),_nt=o(" (XLM-RoBERTa model)"),unt=l(),F(Q6.$$.fragment),HHe=l(),Rf=a("h2"),U6=a("a"),Z7e=a("span"),F(sS.$$.fragment),bnt=l(),eLe=a("span"),vnt=o("FlaxAutoModelForQuestionAnswering"),JHe=l(),wr=a("div"),F(lS.$$.fragment),Fnt=l(),Pf=a("p"),Tnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yte=a("a"),Mnt=o("from_pretrained()"),Ent=o(" class method or the "),Kte=a("a"),Cnt=o("from_config()"),wnt=o(` class
method.`),Ant=l(),iS=a("p"),Lnt=o("This class cannot be instantiated directly using "),oLe=a("code"),ynt=o("__init__()"),xnt=o(" (throws an error)."),$nt=l(),na=a("div"),F(dS.$$.fragment),knt=l(),rLe=a("p"),Snt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rnt=l(),Bf=a("p"),Pnt=o(`Note:
Loading a model from its configuration file does `),tLe=a("strong"),Bnt=o("not"),Int=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zte=a("a"),Nnt=o("from_pretrained()"),qnt=o(" to load the model weights."),jnt=l(),F(H6.$$.fragment),Dnt=l(),et=a("div"),F(cS.$$.fragment),Gnt=l(),aLe=a("p"),Ont=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vnt=l(),Nn=a("p"),Xnt=o("The model class to instantiate is selected based on the "),nLe=a("code"),znt=o("model_type"),Wnt=o(` property of the config object (either
passed as an argument or loaded from `),sLe=a("code"),Qnt=o("pretrained_model_name_or_path"),Unt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lLe=a("code"),Hnt=o("pretrained_model_name_or_path"),Jnt=o(":"),Ynt=l(),Re=a("ul"),J6=a("li"),iLe=a("strong"),Knt=o("albert"),Znt=o(" \u2014 "),eae=a("a"),est=o("FlaxAlbertForQuestionAnswering"),ost=o(" (ALBERT model)"),rst=l(),Y6=a("li"),dLe=a("strong"),tst=o("bart"),ast=o(" \u2014 "),oae=a("a"),nst=o("FlaxBartForQuestionAnswering"),sst=o(" (BART model)"),lst=l(),K6=a("li"),cLe=a("strong"),ist=o("bert"),dst=o(" \u2014 "),rae=a("a"),cst=o("FlaxBertForQuestionAnswering"),fst=o(" (BERT model)"),mst=l(),Z6=a("li"),fLe=a("strong"),gst=o("big_bird"),hst=o(" \u2014 "),tae=a("a"),pst=o("FlaxBigBirdForQuestionAnswering"),_st=o(" (BigBird model)"),ust=l(),eA=a("li"),mLe=a("strong"),bst=o("distilbert"),vst=o(" \u2014 "),aae=a("a"),Fst=o("FlaxDistilBertForQuestionAnswering"),Tst=o(" (DistilBERT model)"),Mst=l(),oA=a("li"),gLe=a("strong"),Est=o("electra"),Cst=o(" \u2014 "),nae=a("a"),wst=o("FlaxElectraForQuestionAnswering"),Ast=o(" (ELECTRA model)"),Lst=l(),rA=a("li"),hLe=a("strong"),yst=o("mbart"),xst=o(" \u2014 "),sae=a("a"),$st=o("FlaxMBartForQuestionAnswering"),kst=o(" (mBART model)"),Sst=l(),tA=a("li"),pLe=a("strong"),Rst=o("roberta"),Pst=o(" \u2014 "),lae=a("a"),Bst=o("FlaxRobertaForQuestionAnswering"),Ist=o(" (RoBERTa model)"),Nst=l(),aA=a("li"),_Le=a("strong"),qst=o("roformer"),jst=o(" \u2014 "),iae=a("a"),Dst=o("FlaxRoFormerForQuestionAnswering"),Gst=o(" (RoFormer model)"),Ost=l(),nA=a("li"),uLe=a("strong"),Vst=o("xlm-roberta"),Xst=o(" \u2014 "),dae=a("a"),zst=o("FlaxXLMRobertaForQuestionAnswering"),Wst=o(" (XLM-RoBERTa model)"),Qst=l(),F(sA.$$.fragment),YHe=l(),If=a("h2"),lA=a("a"),bLe=a("span"),F(fS.$$.fragment),Ust=l(),vLe=a("span"),Hst=o("FlaxAutoModelForTokenClassification"),KHe=l(),Ar=a("div"),F(mS.$$.fragment),Jst=l(),Nf=a("p"),Yst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cae=a("a"),Kst=o("from_pretrained()"),Zst=o(" class method or the "),fae=a("a"),elt=o("from_config()"),olt=o(` class
method.`),rlt=l(),gS=a("p"),tlt=o("This class cannot be instantiated directly using "),FLe=a("code"),alt=o("__init__()"),nlt=o(" (throws an error)."),slt=l(),sa=a("div"),F(hS.$$.fragment),llt=l(),TLe=a("p"),ilt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dlt=l(),qf=a("p"),clt=o(`Note:
Loading a model from its configuration file does `),MLe=a("strong"),flt=o("not"),mlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=a("a"),glt=o("from_pretrained()"),hlt=o(" to load the model weights."),plt=l(),F(iA.$$.fragment),_lt=l(),ot=a("div"),F(pS.$$.fragment),ult=l(),ELe=a("p"),blt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vlt=l(),qn=a("p"),Flt=o("The model class to instantiate is selected based on the "),CLe=a("code"),Tlt=o("model_type"),Mlt=o(` property of the config object (either
passed as an argument or loaded from `),wLe=a("code"),Elt=o("pretrained_model_name_or_path"),Clt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ALe=a("code"),wlt=o("pretrained_model_name_or_path"),Alt=o(":"),Llt=l(),Xe=a("ul"),dA=a("li"),LLe=a("strong"),ylt=o("albert"),xlt=o(" \u2014 "),gae=a("a"),$lt=o("FlaxAlbertForTokenClassification"),klt=o(" (ALBERT model)"),Slt=l(),cA=a("li"),yLe=a("strong"),Rlt=o("bert"),Plt=o(" \u2014 "),hae=a("a"),Blt=o("FlaxBertForTokenClassification"),Ilt=o(" (BERT model)"),Nlt=l(),fA=a("li"),xLe=a("strong"),qlt=o("big_bird"),jlt=o(" \u2014 "),pae=a("a"),Dlt=o("FlaxBigBirdForTokenClassification"),Glt=o(" (BigBird model)"),Olt=l(),mA=a("li"),$Le=a("strong"),Vlt=o("distilbert"),Xlt=o(" \u2014 "),_ae=a("a"),zlt=o("FlaxDistilBertForTokenClassification"),Wlt=o(" (DistilBERT model)"),Qlt=l(),gA=a("li"),kLe=a("strong"),Ult=o("electra"),Hlt=o(" \u2014 "),uae=a("a"),Jlt=o("FlaxElectraForTokenClassification"),Ylt=o(" (ELECTRA model)"),Klt=l(),hA=a("li"),SLe=a("strong"),Zlt=o("roberta"),eit=o(" \u2014 "),bae=a("a"),oit=o("FlaxRobertaForTokenClassification"),rit=o(" (RoBERTa model)"),tit=l(),pA=a("li"),RLe=a("strong"),ait=o("roformer"),nit=o(" \u2014 "),vae=a("a"),sit=o("FlaxRoFormerForTokenClassification"),lit=o(" (RoFormer model)"),iit=l(),_A=a("li"),PLe=a("strong"),dit=o("xlm-roberta"),cit=o(" \u2014 "),Fae=a("a"),fit=o("FlaxXLMRobertaForTokenClassification"),mit=o(" (XLM-RoBERTa model)"),git=l(),F(uA.$$.fragment),ZHe=l(),jf=a("h2"),bA=a("a"),BLe=a("span"),F(_S.$$.fragment),hit=l(),ILe=a("span"),pit=o("FlaxAutoModelForMultipleChoice"),eJe=l(),Lr=a("div"),F(uS.$$.fragment),_it=l(),Df=a("p"),uit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tae=a("a"),bit=o("from_pretrained()"),vit=o(" class method or the "),Mae=a("a"),Fit=o("from_config()"),Tit=o(` class
method.`),Mit=l(),bS=a("p"),Eit=o("This class cannot be instantiated directly using "),NLe=a("code"),Cit=o("__init__()"),wit=o(" (throws an error)."),Ait=l(),la=a("div"),F(vS.$$.fragment),Lit=l(),qLe=a("p"),yit=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xit=l(),Gf=a("p"),$it=o(`Note:
Loading a model from its configuration file does `),jLe=a("strong"),kit=o("not"),Sit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eae=a("a"),Rit=o("from_pretrained()"),Pit=o(" to load the model weights."),Bit=l(),F(vA.$$.fragment),Iit=l(),rt=a("div"),F(FS.$$.fragment),Nit=l(),DLe=a("p"),qit=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jit=l(),jn=a("p"),Dit=o("The model class to instantiate is selected based on the "),GLe=a("code"),Git=o("model_type"),Oit=o(` property of the config object (either
passed as an argument or loaded from `),OLe=a("code"),Vit=o("pretrained_model_name_or_path"),Xit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VLe=a("code"),zit=o("pretrained_model_name_or_path"),Wit=o(":"),Qit=l(),ze=a("ul"),FA=a("li"),XLe=a("strong"),Uit=o("albert"),Hit=o(" \u2014 "),Cae=a("a"),Jit=o("FlaxAlbertForMultipleChoice"),Yit=o(" (ALBERT model)"),Kit=l(),TA=a("li"),zLe=a("strong"),Zit=o("bert"),edt=o(" \u2014 "),wae=a("a"),odt=o("FlaxBertForMultipleChoice"),rdt=o(" (BERT model)"),tdt=l(),MA=a("li"),WLe=a("strong"),adt=o("big_bird"),ndt=o(" \u2014 "),Aae=a("a"),sdt=o("FlaxBigBirdForMultipleChoice"),ldt=o(" (BigBird model)"),idt=l(),EA=a("li"),QLe=a("strong"),ddt=o("distilbert"),cdt=o(" \u2014 "),Lae=a("a"),fdt=o("FlaxDistilBertForMultipleChoice"),mdt=o(" (DistilBERT model)"),gdt=l(),CA=a("li"),ULe=a("strong"),hdt=o("electra"),pdt=o(" \u2014 "),yae=a("a"),_dt=o("FlaxElectraForMultipleChoice"),udt=o(" (ELECTRA model)"),bdt=l(),wA=a("li"),HLe=a("strong"),vdt=o("roberta"),Fdt=o(" \u2014 "),xae=a("a"),Tdt=o("FlaxRobertaForMultipleChoice"),Mdt=o(" (RoBERTa model)"),Edt=l(),AA=a("li"),JLe=a("strong"),Cdt=o("roformer"),wdt=o(" \u2014 "),$ae=a("a"),Adt=o("FlaxRoFormerForMultipleChoice"),Ldt=o(" (RoFormer model)"),ydt=l(),LA=a("li"),YLe=a("strong"),xdt=o("xlm-roberta"),$dt=o(" \u2014 "),kae=a("a"),kdt=o("FlaxXLMRobertaForMultipleChoice"),Sdt=o(" (XLM-RoBERTa model)"),Rdt=l(),F(yA.$$.fragment),oJe=l(),Of=a("h2"),xA=a("a"),KLe=a("span"),F(TS.$$.fragment),Pdt=l(),ZLe=a("span"),Bdt=o("FlaxAutoModelForNextSentencePrediction"),rJe=l(),yr=a("div"),F(MS.$$.fragment),Idt=l(),Vf=a("p"),Ndt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sae=a("a"),qdt=o("from_pretrained()"),jdt=o(" class method or the "),Rae=a("a"),Ddt=o("from_config()"),Gdt=o(` class
method.`),Odt=l(),ES=a("p"),Vdt=o("This class cannot be instantiated directly using "),eye=a("code"),Xdt=o("__init__()"),zdt=o(" (throws an error)."),Wdt=l(),ia=a("div"),F(CS.$$.fragment),Qdt=l(),oye=a("p"),Udt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hdt=l(),Xf=a("p"),Jdt=o(`Note:
Loading a model from its configuration file does `),rye=a("strong"),Ydt=o("not"),Kdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pae=a("a"),Zdt=o("from_pretrained()"),ect=o(" to load the model weights."),oct=l(),F($A.$$.fragment),rct=l(),tt=a("div"),F(wS.$$.fragment),tct=l(),tye=a("p"),act=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nct=l(),Dn=a("p"),sct=o("The model class to instantiate is selected based on the "),aye=a("code"),lct=o("model_type"),ict=o(` property of the config object (either
passed as an argument or loaded from `),nye=a("code"),dct=o("pretrained_model_name_or_path"),cct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sye=a("code"),fct=o("pretrained_model_name_or_path"),mct=o(":"),gct=l(),lye=a("ul"),kA=a("li"),iye=a("strong"),hct=o("bert"),pct=o(" \u2014 "),Bae=a("a"),_ct=o("FlaxBertForNextSentencePrediction"),uct=o(" (BERT model)"),bct=l(),F(SA.$$.fragment),tJe=l(),zf=a("h2"),RA=a("a"),dye=a("span"),F(AS.$$.fragment),vct=l(),cye=a("span"),Fct=o("FlaxAutoModelForImageClassification"),aJe=l(),xr=a("div"),F(LS.$$.fragment),Tct=l(),Wf=a("p"),Mct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Iae=a("a"),Ect=o("from_pretrained()"),Cct=o(" class method or the "),Nae=a("a"),wct=o("from_config()"),Act=o(` class
method.`),Lct=l(),yS=a("p"),yct=o("This class cannot be instantiated directly using "),fye=a("code"),xct=o("__init__()"),$ct=o(" (throws an error)."),kct=l(),da=a("div"),F(xS.$$.fragment),Sct=l(),mye=a("p"),Rct=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pct=l(),Qf=a("p"),Bct=o(`Note:
Loading a model from its configuration file does `),gye=a("strong"),Ict=o("not"),Nct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qae=a("a"),qct=o("from_pretrained()"),jct=o(" to load the model weights."),Dct=l(),F(PA.$$.fragment),Gct=l(),at=a("div"),F($S.$$.fragment),Oct=l(),hye=a("p"),Vct=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xct=l(),Gn=a("p"),zct=o("The model class to instantiate is selected based on the "),pye=a("code"),Wct=o("model_type"),Qct=o(` property of the config object (either
passed as an argument or loaded from `),_ye=a("code"),Uct=o("pretrained_model_name_or_path"),Hct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uye=a("code"),Jct=o("pretrained_model_name_or_path"),Yct=o(":"),Kct=l(),kS=a("ul"),BA=a("li"),bye=a("strong"),Zct=o("beit"),eft=o(" \u2014 "),jae=a("a"),oft=o("FlaxBeitForImageClassification"),rft=o(" (BEiT model)"),tft=l(),IA=a("li"),vye=a("strong"),aft=o("vit"),nft=o(" \u2014 "),Dae=a("a"),sft=o("FlaxViTForImageClassification"),lft=o(" (ViT model)"),ift=l(),F(NA.$$.fragment),nJe=l(),Uf=a("h2"),qA=a("a"),Fye=a("span"),F(SS.$$.fragment),dft=l(),Tye=a("span"),cft=o("FlaxAutoModelForVision2Seq"),sJe=l(),$r=a("div"),F(RS.$$.fragment),fft=l(),Hf=a("p"),mft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gae=a("a"),gft=o("from_pretrained()"),hft=o(" class method or the "),Oae=a("a"),pft=o("from_config()"),_ft=o(` class
method.`),uft=l(),PS=a("p"),bft=o("This class cannot be instantiated directly using "),Mye=a("code"),vft=o("__init__()"),Fft=o(" (throws an error)."),Tft=l(),ca=a("div"),F(BS.$$.fragment),Mft=l(),Eye=a("p"),Eft=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cft=l(),Jf=a("p"),wft=o(`Note:
Loading a model from its configuration file does `),Cye=a("strong"),Aft=o("not"),Lft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vae=a("a"),yft=o("from_pretrained()"),xft=o(" to load the model weights."),$ft=l(),F(jA.$$.fragment),kft=l(),nt=a("div"),F(IS.$$.fragment),Sft=l(),wye=a("p"),Rft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pft=l(),On=a("p"),Bft=o("The model class to instantiate is selected based on the "),Aye=a("code"),Ift=o("model_type"),Nft=o(` property of the config object (either
passed as an argument or loaded from `),Lye=a("code"),qft=o("pretrained_model_name_or_path"),jft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yye=a("code"),Dft=o("pretrained_model_name_or_path"),Gft=o(":"),Oft=l(),xye=a("ul"),DA=a("li"),$ye=a("strong"),Vft=o("vision-encoder-decoder"),Xft=o(" \u2014 "),Xae=a("a"),zft=o("FlaxVisionEncoderDecoderModel"),Wft=o(" (Vision Encoder decoder model)"),Qft=l(),F(GA.$$.fragment),this.h()},l(f){const u=pta('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var NS=s(p);m=n(NS,"A",{id:!0,class:!0,href:!0});var kye=s(m);_=n(kye,"SPAN",{});var Sye=s(_);T(d.$$.fragment,Sye),Sye.forEach(t),kye.forEach(t),h=i(NS),Ao=n(NS,"SPAN",{});var Rye=s(Ao);Oi=r(Rye,"Auto Classes"),Rye.forEach(t),NS.forEach(t),em=i(f),ft=n(f,"P",{});var qS=s(ft);Vi=r(qS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(qS,"CODE",{});var Pye=s(Xi);my=r(Pye,"from_pretrained()"),Pye.forEach(t),om=r(qS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qS.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Vn=s(Qe);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var Bye=s(Xn);gy=r(Bye,"AutoConfig"),Bye.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var Iye=s(Wn);hy=r(Iye,"AutoModel"),Iye.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var Nye=s(Qn);py=r(Nye,"AutoTokenizer"),Nye.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),rm=i(f),T(ja.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var jS=s(Ae);sP=r(jS,"will create a model that is an instance of "),Ui=n(jS,"A",{href:!0});var qye=s(Ui);lP=r(qye,"BertModel"),qye.forEach(t),iP=r(jS,"."),jS.forEach(t),Lo=i(f),Da=n(f,"P",{});var DS=s(Da);dP=r(DS,"There is one class of "),tm=n(DS,"CODE",{});var jye=s(tm);cP=r(jye,"AutoModel"),jye.forEach(t),MKe=r(DS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),DS.forEach(t),KQe=i(f),Hi=n(f,"H2",{class:!0});var GS=s(Hi);am=n(GS,"A",{id:!0,class:!0,href:!0});var Dye=s(am);Ose=n(Dye,"SPAN",{});var Gye=s(Ose);T(_y.$$.fragment,Gye),Gye.forEach(t),Dye.forEach(t),EKe=i(GS),Vse=n(GS,"SPAN",{});var Oye=s(Vse);CKe=r(Oye,"Extending the Auto Classes"),Oye.forEach(t),GS.forEach(t),ZQe=i(f),Un=n(f,"P",{});var Yf=s(Un);wKe=r(Yf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xse=n(Yf,"CODE",{});var Vye=s(Xse);AKe=r(Vye,"NewModel"),Vye.forEach(t),LKe=r(Yf,", make sure you have a "),zse=n(Yf,"CODE",{});var Xye=s(zse);yKe=r(Xye,"NewModelConfig"),Xye.forEach(t),xKe=r(Yf,` then you can add those to the auto
classes like this:`),Yf.forEach(t),eUe=i(f),T(uy.$$.fragment,f),oUe=i(f),fP=n(f,"P",{});var zye=s(fP);$Ke=r(zye,"You will then be able to use the auto classes like you would usually do!"),zye.forEach(t),rUe=i(f),T(nm.$$.fragment,f),tUe=i(f),Ji=n(f,"H2",{class:!0});var OS=s(Ji);sm=n(OS,"A",{id:!0,class:!0,href:!0});var Wye=s(sm);Wse=n(Wye,"SPAN",{});var Qye=s(Wse);T(by.$$.fragment,Qye),Qye.forEach(t),Wye.forEach(t),kKe=i(OS),Qse=n(OS,"SPAN",{});var Uye=s(Qse);SKe=r(Uye,"AutoConfig"),Uye.forEach(t),OS.forEach(t),aUe=i(f),yo=n(f,"DIV",{class:!0});var dt=s(yo);T(vy.$$.fragment,dt),RKe=i(dt),Fy=n(dt,"P",{});var VS=s(Fy);PKe=r(VS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),mP=n(VS,"A",{href:!0});var Hye=s(mP);BKe=r(Hye,"from_pretrained()"),Hye.forEach(t),IKe=r(VS," class method."),VS.forEach(t),NKe=i(dt),Ty=n(dt,"P",{});var XS=s(Ty);qKe=r(XS,"This class cannot be instantiated directly using "),Use=n(XS,"CODE",{});var Jye=s(Use);jKe=r(Jye,"__init__()"),Jye.forEach(t),DKe=r(XS," (throws an error)."),XS.forEach(t),GKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(My.$$.fragment,ct),OKe=i(ct),Hse=n(ct,"P",{});var Yye=s(Hse);VKe=r(Yye,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Yye.forEach(t),XKe=i(ct),Yi=n(ct,"P",{});var Kf=s(Yi);zKe=r(Kf,"The configuration class to instantiate is selected based on the "),Jse=n(Kf,"CODE",{});var Kye=s(Jse);WKe=r(Kye,"model_type"),Kye.forEach(t),QKe=r(Kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yse=n(Kf,"CODE",{});var Zye=s(Yse);UKe=r(Zye,"pretrained_model_name_or_path"),Zye.forEach(t),HKe=r(Kf,":"),Kf.forEach(t),JKe=i(ct),A=n(ct,"UL",{});var L=s(A);lm=n(L,"LI",{});var OA=s(lm);Kse=n(OA,"STRONG",{});var e9e=s(Kse);YKe=r(e9e,"albert"),e9e.forEach(t),KKe=r(OA," \u2014 "),gP=n(OA,"A",{href:!0});var o9e=s(gP);ZKe=r(o9e,"AlbertConfig"),o9e.forEach(t),eZe=r(OA," (ALBERT model)"),OA.forEach(t),oZe=i(L),im=n(L,"LI",{});var VA=s(im);Zse=n(VA,"STRONG",{});var r9e=s(Zse);rZe=r(r9e,"bart"),r9e.forEach(t),tZe=r(VA," \u2014 "),hP=n(VA,"A",{href:!0});var t9e=s(hP);aZe=r(t9e,"BartConfig"),t9e.forEach(t),nZe=r(VA," (BART model)"),VA.forEach(t),sZe=i(L),dm=n(L,"LI",{});var XA=s(dm);ele=n(XA,"STRONG",{});var a9e=s(ele);lZe=r(a9e,"beit"),a9e.forEach(t),iZe=r(XA," \u2014 "),pP=n(XA,"A",{href:!0});var n9e=s(pP);dZe=r(n9e,"BeitConfig"),n9e.forEach(t),cZe=r(XA," (BEiT model)"),XA.forEach(t),fZe=i(L),cm=n(L,"LI",{});var zA=s(cm);ole=n(zA,"STRONG",{});var s9e=s(ole);mZe=r(s9e,"bert"),s9e.forEach(t),gZe=r(zA," \u2014 "),_P=n(zA,"A",{href:!0});var l9e=s(_P);hZe=r(l9e,"BertConfig"),l9e.forEach(t),pZe=r(zA," (BERT model)"),zA.forEach(t),_Ze=i(L),fm=n(L,"LI",{});var WA=s(fm);rle=n(WA,"STRONG",{});var i9e=s(rle);uZe=r(i9e,"bert-generation"),i9e.forEach(t),bZe=r(WA," \u2014 "),uP=n(WA,"A",{href:!0});var d9e=s(uP);vZe=r(d9e,"BertGenerationConfig"),d9e.forEach(t),FZe=r(WA," (Bert Generation model)"),WA.forEach(t),TZe=i(L),mm=n(L,"LI",{});var QA=s(mm);tle=n(QA,"STRONG",{});var c9e=s(tle);MZe=r(c9e,"big_bird"),c9e.forEach(t),EZe=r(QA," \u2014 "),bP=n(QA,"A",{href:!0});var f9e=s(bP);CZe=r(f9e,"BigBirdConfig"),f9e.forEach(t),wZe=r(QA," (BigBird model)"),QA.forEach(t),AZe=i(L),gm=n(L,"LI",{});var UA=s(gm);ale=n(UA,"STRONG",{});var m9e=s(ale);LZe=r(m9e,"bigbird_pegasus"),m9e.forEach(t),yZe=r(UA," \u2014 "),vP=n(UA,"A",{href:!0});var g9e=s(vP);xZe=r(g9e,"BigBirdPegasusConfig"),g9e.forEach(t),$Ze=r(UA," (BigBird-Pegasus model)"),UA.forEach(t),kZe=i(L),hm=n(L,"LI",{});var HA=s(hm);nle=n(HA,"STRONG",{});var h9e=s(nle);SZe=r(h9e,"blenderbot"),h9e.forEach(t),RZe=r(HA," \u2014 "),FP=n(HA,"A",{href:!0});var p9e=s(FP);PZe=r(p9e,"BlenderbotConfig"),p9e.forEach(t),BZe=r(HA," (Blenderbot model)"),HA.forEach(t),IZe=i(L),pm=n(L,"LI",{});var JA=s(pm);sle=n(JA,"STRONG",{});var _9e=s(sle);NZe=r(_9e,"blenderbot-small"),_9e.forEach(t),qZe=r(JA," \u2014 "),TP=n(JA,"A",{href:!0});var u9e=s(TP);jZe=r(u9e,"BlenderbotSmallConfig"),u9e.forEach(t),DZe=r(JA," (BlenderbotSmall model)"),JA.forEach(t),GZe=i(L),_m=n(L,"LI",{});var YA=s(_m);lle=n(YA,"STRONG",{});var b9e=s(lle);OZe=r(b9e,"bloom"),b9e.forEach(t),VZe=r(YA," \u2014 "),MP=n(YA,"A",{href:!0});var v9e=s(MP);XZe=r(v9e,"BloomConfig"),v9e.forEach(t),zZe=r(YA," (BLOOM model)"),YA.forEach(t),WZe=i(L),um=n(L,"LI",{});var KA=s(um);ile=n(KA,"STRONG",{});var F9e=s(ile);QZe=r(F9e,"camembert"),F9e.forEach(t),UZe=r(KA," \u2014 "),EP=n(KA,"A",{href:!0});var T9e=s(EP);HZe=r(T9e,"CamembertConfig"),T9e.forEach(t),JZe=r(KA," (CamemBERT model)"),KA.forEach(t),YZe=i(L),bm=n(L,"LI",{});var ZA=s(bm);dle=n(ZA,"STRONG",{});var M9e=s(dle);KZe=r(M9e,"canine"),M9e.forEach(t),ZZe=r(ZA," \u2014 "),CP=n(ZA,"A",{href:!0});var E9e=s(CP);eeo=r(E9e,"CanineConfig"),E9e.forEach(t),oeo=r(ZA," (CANINE model)"),ZA.forEach(t),reo=i(L),vm=n(L,"LI",{});var e7=s(vm);cle=n(e7,"STRONG",{});var C9e=s(cle);teo=r(C9e,"clip"),C9e.forEach(t),aeo=r(e7," \u2014 "),wP=n(e7,"A",{href:!0});var w9e=s(wP);neo=r(w9e,"CLIPConfig"),w9e.forEach(t),seo=r(e7," (CLIP model)"),e7.forEach(t),leo=i(L),Fm=n(L,"LI",{});var o7=s(Fm);fle=n(o7,"STRONG",{});var A9e=s(fle);ieo=r(A9e,"codegen"),A9e.forEach(t),deo=r(o7," \u2014 "),AP=n(o7,"A",{href:!0});var L9e=s(AP);ceo=r(L9e,"CodeGenConfig"),L9e.forEach(t),feo=r(o7," (CodeGen model)"),o7.forEach(t),meo=i(L),Tm=n(L,"LI",{});var r7=s(Tm);mle=n(r7,"STRONG",{});var y9e=s(mle);geo=r(y9e,"convbert"),y9e.forEach(t),heo=r(r7," \u2014 "),LP=n(r7,"A",{href:!0});var x9e=s(LP);peo=r(x9e,"ConvBertConfig"),x9e.forEach(t),_eo=r(r7," (ConvBERT model)"),r7.forEach(t),ueo=i(L),Mm=n(L,"LI",{});var t7=s(Mm);gle=n(t7,"STRONG",{});var $9e=s(gle);beo=r($9e,"convnext"),$9e.forEach(t),veo=r(t7," \u2014 "),yP=n(t7,"A",{href:!0});var k9e=s(yP);Feo=r(k9e,"ConvNextConfig"),k9e.forEach(t),Teo=r(t7," (ConvNeXT model)"),t7.forEach(t),Meo=i(L),Em=n(L,"LI",{});var a7=s(Em);hle=n(a7,"STRONG",{});var S9e=s(hle);Eeo=r(S9e,"ctrl"),S9e.forEach(t),Ceo=r(a7," \u2014 "),xP=n(a7,"A",{href:!0});var R9e=s(xP);weo=r(R9e,"CTRLConfig"),R9e.forEach(t),Aeo=r(a7," (CTRL model)"),a7.forEach(t),Leo=i(L),Cm=n(L,"LI",{});var n7=s(Cm);ple=n(n7,"STRONG",{});var P9e=s(ple);yeo=r(P9e,"cvt"),P9e.forEach(t),xeo=r(n7," \u2014 "),$P=n(n7,"A",{href:!0});var B9e=s($P);$eo=r(B9e,"CvtConfig"),B9e.forEach(t),keo=r(n7," (CvT model)"),n7.forEach(t),Seo=i(L),wm=n(L,"LI",{});var s7=s(wm);_le=n(s7,"STRONG",{});var I9e=s(_le);Reo=r(I9e,"data2vec-audio"),I9e.forEach(t),Peo=r(s7," \u2014 "),kP=n(s7,"A",{href:!0});var N9e=s(kP);Beo=r(N9e,"Data2VecAudioConfig"),N9e.forEach(t),Ieo=r(s7," (Data2VecAudio model)"),s7.forEach(t),Neo=i(L),Am=n(L,"LI",{});var l7=s(Am);ule=n(l7,"STRONG",{});var q9e=s(ule);qeo=r(q9e,"data2vec-text"),q9e.forEach(t),jeo=r(l7," \u2014 "),SP=n(l7,"A",{href:!0});var j9e=s(SP);Deo=r(j9e,"Data2VecTextConfig"),j9e.forEach(t),Geo=r(l7," (Data2VecText model)"),l7.forEach(t),Oeo=i(L),Lm=n(L,"LI",{});var i7=s(Lm);ble=n(i7,"STRONG",{});var D9e=s(ble);Veo=r(D9e,"data2vec-vision"),D9e.forEach(t),Xeo=r(i7," \u2014 "),RP=n(i7,"A",{href:!0});var G9e=s(RP);zeo=r(G9e,"Data2VecVisionConfig"),G9e.forEach(t),Weo=r(i7," (Data2VecVision model)"),i7.forEach(t),Qeo=i(L),ym=n(L,"LI",{});var d7=s(ym);vle=n(d7,"STRONG",{});var O9e=s(vle);Ueo=r(O9e,"deberta"),O9e.forEach(t),Heo=r(d7," \u2014 "),PP=n(d7,"A",{href:!0});var V9e=s(PP);Jeo=r(V9e,"DebertaConfig"),V9e.forEach(t),Yeo=r(d7," (DeBERTa model)"),d7.forEach(t),Keo=i(L),xm=n(L,"LI",{});var c7=s(xm);Fle=n(c7,"STRONG",{});var X9e=s(Fle);Zeo=r(X9e,"deberta-v2"),X9e.forEach(t),eoo=r(c7," \u2014 "),BP=n(c7,"A",{href:!0});var z9e=s(BP);ooo=r(z9e,"DebertaV2Config"),z9e.forEach(t),roo=r(c7," (DeBERTa-v2 model)"),c7.forEach(t),too=i(L),$m=n(L,"LI",{});var f7=s($m);Tle=n(f7,"STRONG",{});var W9e=s(Tle);aoo=r(W9e,"decision_transformer"),W9e.forEach(t),noo=r(f7," \u2014 "),IP=n(f7,"A",{href:!0});var Q9e=s(IP);soo=r(Q9e,"DecisionTransformerConfig"),Q9e.forEach(t),loo=r(f7," (Decision Transformer model)"),f7.forEach(t),ioo=i(L),km=n(L,"LI",{});var m7=s(km);Mle=n(m7,"STRONG",{});var U9e=s(Mle);doo=r(U9e,"deit"),U9e.forEach(t),coo=r(m7," \u2014 "),NP=n(m7,"A",{href:!0});var Hft=s(NP);foo=r(Hft,"DeiTConfig"),Hft.forEach(t),moo=r(m7," (DeiT model)"),m7.forEach(t),goo=i(L),Sm=n(L,"LI",{});var H9e=s(Sm);Ele=n(H9e,"STRONG",{});var Jft=s(Ele);hoo=r(Jft,"detr"),Jft.forEach(t),poo=r(H9e," \u2014 "),qP=n(H9e,"A",{href:!0});var Yft=s(qP);_oo=r(Yft,"DetrConfig"),Yft.forEach(t),uoo=r(H9e," (DETR model)"),H9e.forEach(t),boo=i(L),Rm=n(L,"LI",{});var J9e=s(Rm);Cle=n(J9e,"STRONG",{});var Kft=s(Cle);voo=r(Kft,"distilbert"),Kft.forEach(t),Foo=r(J9e," \u2014 "),jP=n(J9e,"A",{href:!0});var Zft=s(jP);Too=r(Zft,"DistilBertConfig"),Zft.forEach(t),Moo=r(J9e," (DistilBERT model)"),J9e.forEach(t),Eoo=i(L),Pm=n(L,"LI",{});var Y9e=s(Pm);wle=n(Y9e,"STRONG",{});var emt=s(wle);Coo=r(emt,"donut-swin"),emt.forEach(t),woo=r(Y9e," \u2014 "),DP=n(Y9e,"A",{href:!0});var omt=s(DP);Aoo=r(omt,"DonutSwinConfig"),omt.forEach(t),Loo=r(Y9e," (DonutSwin model)"),Y9e.forEach(t),yoo=i(L),Bm=n(L,"LI",{});var K9e=s(Bm);Ale=n(K9e,"STRONG",{});var rmt=s(Ale);xoo=r(rmt,"dpr"),rmt.forEach(t),$oo=r(K9e," \u2014 "),GP=n(K9e,"A",{href:!0});var tmt=s(GP);koo=r(tmt,"DPRConfig"),tmt.forEach(t),Soo=r(K9e," (DPR model)"),K9e.forEach(t),Roo=i(L),Im=n(L,"LI",{});var Z9e=s(Im);Lle=n(Z9e,"STRONG",{});var amt=s(Lle);Poo=r(amt,"dpt"),amt.forEach(t),Boo=r(Z9e," \u2014 "),OP=n(Z9e,"A",{href:!0});var nmt=s(OP);Ioo=r(nmt,"DPTConfig"),nmt.forEach(t),Noo=r(Z9e," (DPT model)"),Z9e.forEach(t),qoo=i(L),Nm=n(L,"LI",{});var exe=s(Nm);yle=n(exe,"STRONG",{});var smt=s(yle);joo=r(smt,"electra"),smt.forEach(t),Doo=r(exe," \u2014 "),VP=n(exe,"A",{href:!0});var lmt=s(VP);Goo=r(lmt,"ElectraConfig"),lmt.forEach(t),Ooo=r(exe," (ELECTRA model)"),exe.forEach(t),Voo=i(L),qm=n(L,"LI",{});var oxe=s(qm);xle=n(oxe,"STRONG",{});var imt=s(xle);Xoo=r(imt,"encoder-decoder"),imt.forEach(t),zoo=r(oxe," \u2014 "),XP=n(oxe,"A",{href:!0});var dmt=s(XP);Woo=r(dmt,"EncoderDecoderConfig"),dmt.forEach(t),Qoo=r(oxe," (Encoder decoder model)"),oxe.forEach(t),Uoo=i(L),jm=n(L,"LI",{});var rxe=s(jm);$le=n(rxe,"STRONG",{});var cmt=s($le);Hoo=r(cmt,"flaubert"),cmt.forEach(t),Joo=r(rxe," \u2014 "),zP=n(rxe,"A",{href:!0});var fmt=s(zP);Yoo=r(fmt,"FlaubertConfig"),fmt.forEach(t),Koo=r(rxe," (FlauBERT model)"),rxe.forEach(t),Zoo=i(L),Dm=n(L,"LI",{});var txe=s(Dm);kle=n(txe,"STRONG",{});var mmt=s(kle);ero=r(mmt,"flava"),mmt.forEach(t),oro=r(txe," \u2014 "),WP=n(txe,"A",{href:!0});var gmt=s(WP);rro=r(gmt,"FlavaConfig"),gmt.forEach(t),tro=r(txe," (FLAVA model)"),txe.forEach(t),aro=i(L),Gm=n(L,"LI",{});var axe=s(Gm);Sle=n(axe,"STRONG",{});var hmt=s(Sle);nro=r(hmt,"fnet"),hmt.forEach(t),sro=r(axe," \u2014 "),QP=n(axe,"A",{href:!0});var pmt=s(QP);lro=r(pmt,"FNetConfig"),pmt.forEach(t),iro=r(axe," (FNet model)"),axe.forEach(t),dro=i(L),Om=n(L,"LI",{});var nxe=s(Om);Rle=n(nxe,"STRONG",{});var _mt=s(Rle);cro=r(_mt,"fsmt"),_mt.forEach(t),fro=r(nxe," \u2014 "),UP=n(nxe,"A",{href:!0});var umt=s(UP);mro=r(umt,"FSMTConfig"),umt.forEach(t),gro=r(nxe," (FairSeq Machine-Translation model)"),nxe.forEach(t),hro=i(L),Vm=n(L,"LI",{});var sxe=s(Vm);Ple=n(sxe,"STRONG",{});var bmt=s(Ple);pro=r(bmt,"funnel"),bmt.forEach(t),_ro=r(sxe," \u2014 "),HP=n(sxe,"A",{href:!0});var vmt=s(HP);uro=r(vmt,"FunnelConfig"),vmt.forEach(t),bro=r(sxe," (Funnel Transformer model)"),sxe.forEach(t),vro=i(L),Xm=n(L,"LI",{});var lxe=s(Xm);Ble=n(lxe,"STRONG",{});var Fmt=s(Ble);Fro=r(Fmt,"glpn"),Fmt.forEach(t),Tro=r(lxe," \u2014 "),JP=n(lxe,"A",{href:!0});var Tmt=s(JP);Mro=r(Tmt,"GLPNConfig"),Tmt.forEach(t),Ero=r(lxe," (GLPN model)"),lxe.forEach(t),Cro=i(L),zm=n(L,"LI",{});var ixe=s(zm);Ile=n(ixe,"STRONG",{});var Mmt=s(Ile);wro=r(Mmt,"gpt2"),Mmt.forEach(t),Aro=r(ixe," \u2014 "),YP=n(ixe,"A",{href:!0});var Emt=s(YP);Lro=r(Emt,"GPT2Config"),Emt.forEach(t),yro=r(ixe," (OpenAI GPT-2 model)"),ixe.forEach(t),xro=i(L),Wm=n(L,"LI",{});var dxe=s(Wm);Nle=n(dxe,"STRONG",{});var Cmt=s(Nle);$ro=r(Cmt,"gpt_neo"),Cmt.forEach(t),kro=r(dxe," \u2014 "),KP=n(dxe,"A",{href:!0});var wmt=s(KP);Sro=r(wmt,"GPTNeoConfig"),wmt.forEach(t),Rro=r(dxe," (GPT Neo model)"),dxe.forEach(t),Pro=i(L),Qm=n(L,"LI",{});var cxe=s(Qm);qle=n(cxe,"STRONG",{});var Amt=s(qle);Bro=r(Amt,"gpt_neox"),Amt.forEach(t),Iro=r(cxe," \u2014 "),ZP=n(cxe,"A",{href:!0});var Lmt=s(ZP);Nro=r(Lmt,"GPTNeoXConfig"),Lmt.forEach(t),qro=r(cxe," (GPT NeoX model)"),cxe.forEach(t),jro=i(L),Um=n(L,"LI",{});var fxe=s(Um);jle=n(fxe,"STRONG",{});var ymt=s(jle);Dro=r(ymt,"gptj"),ymt.forEach(t),Gro=r(fxe," \u2014 "),eB=n(fxe,"A",{href:!0});var xmt=s(eB);Oro=r(xmt,"GPTJConfig"),xmt.forEach(t),Vro=r(fxe," (GPT-J model)"),fxe.forEach(t),Xro=i(L),Hm=n(L,"LI",{});var mxe=s(Hm);Dle=n(mxe,"STRONG",{});var $mt=s(Dle);zro=r($mt,"groupvit"),$mt.forEach(t),Wro=r(mxe," \u2014 "),oB=n(mxe,"A",{href:!0});var kmt=s(oB);Qro=r(kmt,"GroupViTConfig"),kmt.forEach(t),Uro=r(mxe," (GroupViT model)"),mxe.forEach(t),Hro=i(L),Jm=n(L,"LI",{});var gxe=s(Jm);Gle=n(gxe,"STRONG",{});var Smt=s(Gle);Jro=r(Smt,"hubert"),Smt.forEach(t),Yro=r(gxe," \u2014 "),rB=n(gxe,"A",{href:!0});var Rmt=s(rB);Kro=r(Rmt,"HubertConfig"),Rmt.forEach(t),Zro=r(gxe," (Hubert model)"),gxe.forEach(t),eto=i(L),Ym=n(L,"LI",{});var hxe=s(Ym);Ole=n(hxe,"STRONG",{});var Pmt=s(Ole);oto=r(Pmt,"ibert"),Pmt.forEach(t),rto=r(hxe," \u2014 "),tB=n(hxe,"A",{href:!0});var Bmt=s(tB);tto=r(Bmt,"IBertConfig"),Bmt.forEach(t),ato=r(hxe," (I-BERT model)"),hxe.forEach(t),nto=i(L),Km=n(L,"LI",{});var pxe=s(Km);Vle=n(pxe,"STRONG",{});var Imt=s(Vle);sto=r(Imt,"imagegpt"),Imt.forEach(t),lto=r(pxe," \u2014 "),aB=n(pxe,"A",{href:!0});var Nmt=s(aB);ito=r(Nmt,"ImageGPTConfig"),Nmt.forEach(t),dto=r(pxe," (ImageGPT model)"),pxe.forEach(t),cto=i(L),Zm=n(L,"LI",{});var _xe=s(Zm);Xle=n(_xe,"STRONG",{});var qmt=s(Xle);fto=r(qmt,"layoutlm"),qmt.forEach(t),mto=r(_xe," \u2014 "),nB=n(_xe,"A",{href:!0});var jmt=s(nB);gto=r(jmt,"LayoutLMConfig"),jmt.forEach(t),hto=r(_xe," (LayoutLM model)"),_xe.forEach(t),pto=i(L),eg=n(L,"LI",{});var uxe=s(eg);zle=n(uxe,"STRONG",{});var Dmt=s(zle);_to=r(Dmt,"layoutlmv2"),Dmt.forEach(t),uto=r(uxe," \u2014 "),sB=n(uxe,"A",{href:!0});var Gmt=s(sB);bto=r(Gmt,"LayoutLMv2Config"),Gmt.forEach(t),vto=r(uxe," (LayoutLMv2 model)"),uxe.forEach(t),Fto=i(L),og=n(L,"LI",{});var bxe=s(og);Wle=n(bxe,"STRONG",{});var Omt=s(Wle);Tto=r(Omt,"layoutlmv3"),Omt.forEach(t),Mto=r(bxe," \u2014 "),lB=n(bxe,"A",{href:!0});var Vmt=s(lB);Eto=r(Vmt,"LayoutLMv3Config"),Vmt.forEach(t),Cto=r(bxe," (LayoutLMv3 model)"),bxe.forEach(t),wto=i(L),rg=n(L,"LI",{});var vxe=s(rg);Qle=n(vxe,"STRONG",{});var Xmt=s(Qle);Ato=r(Xmt,"led"),Xmt.forEach(t),Lto=r(vxe," \u2014 "),iB=n(vxe,"A",{href:!0});var zmt=s(iB);yto=r(zmt,"LEDConfig"),zmt.forEach(t),xto=r(vxe," (LED model)"),vxe.forEach(t),$to=i(L),tg=n(L,"LI",{});var Fxe=s(tg);Ule=n(Fxe,"STRONG",{});var Wmt=s(Ule);kto=r(Wmt,"levit"),Wmt.forEach(t),Sto=r(Fxe," \u2014 "),dB=n(Fxe,"A",{href:!0});var Qmt=s(dB);Rto=r(Qmt,"LevitConfig"),Qmt.forEach(t),Pto=r(Fxe," (LeViT model)"),Fxe.forEach(t),Bto=i(L),ag=n(L,"LI",{});var Txe=s(ag);Hle=n(Txe,"STRONG",{});var Umt=s(Hle);Ito=r(Umt,"longformer"),Umt.forEach(t),Nto=r(Txe," \u2014 "),cB=n(Txe,"A",{href:!0});var Hmt=s(cB);qto=r(Hmt,"LongformerConfig"),Hmt.forEach(t),jto=r(Txe," (Longformer model)"),Txe.forEach(t),Dto=i(L),ng=n(L,"LI",{});var Mxe=s(ng);Jle=n(Mxe,"STRONG",{});var Jmt=s(Jle);Gto=r(Jmt,"longt5"),Jmt.forEach(t),Oto=r(Mxe," \u2014 "),fB=n(Mxe,"A",{href:!0});var Ymt=s(fB);Vto=r(Ymt,"LongT5Config"),Ymt.forEach(t),Xto=r(Mxe," (LongT5 model)"),Mxe.forEach(t),zto=i(L),sg=n(L,"LI",{});var Exe=s(sg);Yle=n(Exe,"STRONG",{});var Kmt=s(Yle);Wto=r(Kmt,"luke"),Kmt.forEach(t),Qto=r(Exe," \u2014 "),mB=n(Exe,"A",{href:!0});var Zmt=s(mB);Uto=r(Zmt,"LukeConfig"),Zmt.forEach(t),Hto=r(Exe," (LUKE model)"),Exe.forEach(t),Jto=i(L),lg=n(L,"LI",{});var Cxe=s(lg);Kle=n(Cxe,"STRONG",{});var egt=s(Kle);Yto=r(egt,"lxmert"),egt.forEach(t),Kto=r(Cxe," \u2014 "),gB=n(Cxe,"A",{href:!0});var ogt=s(gB);Zto=r(ogt,"LxmertConfig"),ogt.forEach(t),eao=r(Cxe," (LXMERT model)"),Cxe.forEach(t),oao=i(L),ig=n(L,"LI",{});var wxe=s(ig);Zle=n(wxe,"STRONG",{});var rgt=s(Zle);rao=r(rgt,"m2m_100"),rgt.forEach(t),tao=r(wxe," \u2014 "),hB=n(wxe,"A",{href:!0});var tgt=s(hB);aao=r(tgt,"M2M100Config"),tgt.forEach(t),nao=r(wxe," (M2M100 model)"),wxe.forEach(t),sao=i(L),dg=n(L,"LI",{});var Axe=s(dg);eie=n(Axe,"STRONG",{});var agt=s(eie);lao=r(agt,"marian"),agt.forEach(t),iao=r(Axe," \u2014 "),pB=n(Axe,"A",{href:!0});var ngt=s(pB);dao=r(ngt,"MarianConfig"),ngt.forEach(t),cao=r(Axe," (Marian model)"),Axe.forEach(t),fao=i(L),cg=n(L,"LI",{});var Lxe=s(cg);oie=n(Lxe,"STRONG",{});var sgt=s(oie);mao=r(sgt,"maskformer"),sgt.forEach(t),gao=r(Lxe," \u2014 "),_B=n(Lxe,"A",{href:!0});var lgt=s(_B);hao=r(lgt,"MaskFormerConfig"),lgt.forEach(t),pao=r(Lxe," (MaskFormer model)"),Lxe.forEach(t),_ao=i(L),fg=n(L,"LI",{});var yxe=s(fg);rie=n(yxe,"STRONG",{});var igt=s(rie);uao=r(igt,"mbart"),igt.forEach(t),bao=r(yxe," \u2014 "),uB=n(yxe,"A",{href:!0});var dgt=s(uB);vao=r(dgt,"MBartConfig"),dgt.forEach(t),Fao=r(yxe," (mBART model)"),yxe.forEach(t),Tao=i(L),mg=n(L,"LI",{});var xxe=s(mg);tie=n(xxe,"STRONG",{});var cgt=s(tie);Mao=r(cgt,"mctct"),cgt.forEach(t),Eao=r(xxe," \u2014 "),bB=n(xxe,"A",{href:!0});var fgt=s(bB);Cao=r(fgt,"MCTCTConfig"),fgt.forEach(t),wao=r(xxe," (M-CTC-T model)"),xxe.forEach(t),Aao=i(L),gg=n(L,"LI",{});var $xe=s(gg);aie=n($xe,"STRONG",{});var mgt=s(aie);Lao=r(mgt,"megatron-bert"),mgt.forEach(t),yao=r($xe," \u2014 "),vB=n($xe,"A",{href:!0});var ggt=s(vB);xao=r(ggt,"MegatronBertConfig"),ggt.forEach(t),$ao=r($xe," (Megatron-BERT model)"),$xe.forEach(t),kao=i(L),hg=n(L,"LI",{});var kxe=s(hg);nie=n(kxe,"STRONG",{});var hgt=s(nie);Sao=r(hgt,"mobilebert"),hgt.forEach(t),Rao=r(kxe," \u2014 "),FB=n(kxe,"A",{href:!0});var pgt=s(FB);Pao=r(pgt,"MobileBertConfig"),pgt.forEach(t),Bao=r(kxe," (MobileBERT model)"),kxe.forEach(t),Iao=i(L),pg=n(L,"LI",{});var Sxe=s(pg);sie=n(Sxe,"STRONG",{});var _gt=s(sie);Nao=r(_gt,"mobilevit"),_gt.forEach(t),qao=r(Sxe," \u2014 "),TB=n(Sxe,"A",{href:!0});var ugt=s(TB);jao=r(ugt,"MobileViTConfig"),ugt.forEach(t),Dao=r(Sxe," (MobileViT model)"),Sxe.forEach(t),Gao=i(L),_g=n(L,"LI",{});var Rxe=s(_g);lie=n(Rxe,"STRONG",{});var bgt=s(lie);Oao=r(bgt,"mpnet"),bgt.forEach(t),Vao=r(Rxe," \u2014 "),MB=n(Rxe,"A",{href:!0});var vgt=s(MB);Xao=r(vgt,"MPNetConfig"),vgt.forEach(t),zao=r(Rxe," (MPNet model)"),Rxe.forEach(t),Wao=i(L),ug=n(L,"LI",{});var Pxe=s(ug);iie=n(Pxe,"STRONG",{});var Fgt=s(iie);Qao=r(Fgt,"mt5"),Fgt.forEach(t),Uao=r(Pxe," \u2014 "),EB=n(Pxe,"A",{href:!0});var Tgt=s(EB);Hao=r(Tgt,"MT5Config"),Tgt.forEach(t),Jao=r(Pxe," (MT5 model)"),Pxe.forEach(t),Yao=i(L),bg=n(L,"LI",{});var Bxe=s(bg);die=n(Bxe,"STRONG",{});var Mgt=s(die);Kao=r(Mgt,"mvp"),Mgt.forEach(t),Zao=r(Bxe," \u2014 "),CB=n(Bxe,"A",{href:!0});var Egt=s(CB);eno=r(Egt,"MvpConfig"),Egt.forEach(t),ono=r(Bxe," (MVP model)"),Bxe.forEach(t),rno=i(L),vg=n(L,"LI",{});var Ixe=s(vg);cie=n(Ixe,"STRONG",{});var Cgt=s(cie);tno=r(Cgt,"nezha"),Cgt.forEach(t),ano=r(Ixe," \u2014 "),wB=n(Ixe,"A",{href:!0});var wgt=s(wB);nno=r(wgt,"NezhaConfig"),wgt.forEach(t),sno=r(Ixe," (Nezha model)"),Ixe.forEach(t),lno=i(L),Fg=n(L,"LI",{});var Nxe=s(Fg);fie=n(Nxe,"STRONG",{});var Agt=s(fie);ino=r(Agt,"nystromformer"),Agt.forEach(t),dno=r(Nxe," \u2014 "),AB=n(Nxe,"A",{href:!0});var Lgt=s(AB);cno=r(Lgt,"NystromformerConfig"),Lgt.forEach(t),fno=r(Nxe," (Nystr\xF6mformer model)"),Nxe.forEach(t),mno=i(L),Tg=n(L,"LI",{});var qxe=s(Tg);mie=n(qxe,"STRONG",{});var ygt=s(mie);gno=r(ygt,"openai-gpt"),ygt.forEach(t),hno=r(qxe," \u2014 "),LB=n(qxe,"A",{href:!0});var xgt=s(LB);pno=r(xgt,"OpenAIGPTConfig"),xgt.forEach(t),_no=r(qxe," (OpenAI GPT model)"),qxe.forEach(t),uno=i(L),Mg=n(L,"LI",{});var jxe=s(Mg);gie=n(jxe,"STRONG",{});var $gt=s(gie);bno=r($gt,"opt"),$gt.forEach(t),vno=r(jxe," \u2014 "),yB=n(jxe,"A",{href:!0});var kgt=s(yB);Fno=r(kgt,"OPTConfig"),kgt.forEach(t),Tno=r(jxe," (OPT model)"),jxe.forEach(t),Mno=i(L),Eg=n(L,"LI",{});var Dxe=s(Eg);hie=n(Dxe,"STRONG",{});var Sgt=s(hie);Eno=r(Sgt,"owlvit"),Sgt.forEach(t),Cno=r(Dxe," \u2014 "),xB=n(Dxe,"A",{href:!0});var Rgt=s(xB);wno=r(Rgt,"OwlViTConfig"),Rgt.forEach(t),Ano=r(Dxe," (OWL-ViT model)"),Dxe.forEach(t),Lno=i(L),Cg=n(L,"LI",{});var Gxe=s(Cg);pie=n(Gxe,"STRONG",{});var Pgt=s(pie);yno=r(Pgt,"pegasus"),Pgt.forEach(t),xno=r(Gxe," \u2014 "),$B=n(Gxe,"A",{href:!0});var Bgt=s($B);$no=r(Bgt,"PegasusConfig"),Bgt.forEach(t),kno=r(Gxe," (Pegasus model)"),Gxe.forEach(t),Sno=i(L),wg=n(L,"LI",{});var Oxe=s(wg);_ie=n(Oxe,"STRONG",{});var Igt=s(_ie);Rno=r(Igt,"perceiver"),Igt.forEach(t),Pno=r(Oxe," \u2014 "),kB=n(Oxe,"A",{href:!0});var Ngt=s(kB);Bno=r(Ngt,"PerceiverConfig"),Ngt.forEach(t),Ino=r(Oxe," (Perceiver model)"),Oxe.forEach(t),Nno=i(L),Ag=n(L,"LI",{});var Vxe=s(Ag);uie=n(Vxe,"STRONG",{});var qgt=s(uie);qno=r(qgt,"plbart"),qgt.forEach(t),jno=r(Vxe," \u2014 "),SB=n(Vxe,"A",{href:!0});var jgt=s(SB);Dno=r(jgt,"PLBartConfig"),jgt.forEach(t),Gno=r(Vxe," (PLBart model)"),Vxe.forEach(t),Ono=i(L),Lg=n(L,"LI",{});var Xxe=s(Lg);bie=n(Xxe,"STRONG",{});var Dgt=s(bie);Vno=r(Dgt,"poolformer"),Dgt.forEach(t),Xno=r(Xxe," \u2014 "),RB=n(Xxe,"A",{href:!0});var Ggt=s(RB);zno=r(Ggt,"PoolFormerConfig"),Ggt.forEach(t),Wno=r(Xxe," (PoolFormer model)"),Xxe.forEach(t),Qno=i(L),yg=n(L,"LI",{});var zxe=s(yg);vie=n(zxe,"STRONG",{});var Ogt=s(vie);Uno=r(Ogt,"prophetnet"),Ogt.forEach(t),Hno=r(zxe," \u2014 "),PB=n(zxe,"A",{href:!0});var Vgt=s(PB);Jno=r(Vgt,"ProphetNetConfig"),Vgt.forEach(t),Yno=r(zxe," (ProphetNet model)"),zxe.forEach(t),Kno=i(L),xg=n(L,"LI",{});var Wxe=s(xg);Fie=n(Wxe,"STRONG",{});var Xgt=s(Fie);Zno=r(Xgt,"qdqbert"),Xgt.forEach(t),eso=r(Wxe," \u2014 "),BB=n(Wxe,"A",{href:!0});var zgt=s(BB);oso=r(zgt,"QDQBertConfig"),zgt.forEach(t),rso=r(Wxe," (QDQBert model)"),Wxe.forEach(t),tso=i(L),$g=n(L,"LI",{});var Qxe=s($g);Tie=n(Qxe,"STRONG",{});var Wgt=s(Tie);aso=r(Wgt,"rag"),Wgt.forEach(t),nso=r(Qxe," \u2014 "),IB=n(Qxe,"A",{href:!0});var Qgt=s(IB);sso=r(Qgt,"RagConfig"),Qgt.forEach(t),lso=r(Qxe," (RAG model)"),Qxe.forEach(t),iso=i(L),kg=n(L,"LI",{});var Uxe=s(kg);Mie=n(Uxe,"STRONG",{});var Ugt=s(Mie);dso=r(Ugt,"realm"),Ugt.forEach(t),cso=r(Uxe," \u2014 "),NB=n(Uxe,"A",{href:!0});var Hgt=s(NB);fso=r(Hgt,"RealmConfig"),Hgt.forEach(t),mso=r(Uxe," (REALM model)"),Uxe.forEach(t),gso=i(L),Sg=n(L,"LI",{});var Hxe=s(Sg);Eie=n(Hxe,"STRONG",{});var Jgt=s(Eie);hso=r(Jgt,"reformer"),Jgt.forEach(t),pso=r(Hxe," \u2014 "),qB=n(Hxe,"A",{href:!0});var Ygt=s(qB);_so=r(Ygt,"ReformerConfig"),Ygt.forEach(t),uso=r(Hxe," (Reformer model)"),Hxe.forEach(t),bso=i(L),Rg=n(L,"LI",{});var Jxe=s(Rg);Cie=n(Jxe,"STRONG",{});var Kgt=s(Cie);vso=r(Kgt,"regnet"),Kgt.forEach(t),Fso=r(Jxe," \u2014 "),jB=n(Jxe,"A",{href:!0});var Zgt=s(jB);Tso=r(Zgt,"RegNetConfig"),Zgt.forEach(t),Mso=r(Jxe," (RegNet model)"),Jxe.forEach(t),Eso=i(L),Pg=n(L,"LI",{});var Yxe=s(Pg);wie=n(Yxe,"STRONG",{});var eht=s(wie);Cso=r(eht,"rembert"),eht.forEach(t),wso=r(Yxe," \u2014 "),DB=n(Yxe,"A",{href:!0});var oht=s(DB);Aso=r(oht,"RemBertConfig"),oht.forEach(t),Lso=r(Yxe," (RemBERT model)"),Yxe.forEach(t),yso=i(L),Bg=n(L,"LI",{});var Kxe=s(Bg);Aie=n(Kxe,"STRONG",{});var rht=s(Aie);xso=r(rht,"resnet"),rht.forEach(t),$so=r(Kxe," \u2014 "),GB=n(Kxe,"A",{href:!0});var tht=s(GB);kso=r(tht,"ResNetConfig"),tht.forEach(t),Sso=r(Kxe," (ResNet model)"),Kxe.forEach(t),Rso=i(L),Ig=n(L,"LI",{});var Zxe=s(Ig);Lie=n(Zxe,"STRONG",{});var aht=s(Lie);Pso=r(aht,"retribert"),aht.forEach(t),Bso=r(Zxe," \u2014 "),OB=n(Zxe,"A",{href:!0});var nht=s(OB);Iso=r(nht,"RetriBertConfig"),nht.forEach(t),Nso=r(Zxe," (RetriBERT model)"),Zxe.forEach(t),qso=i(L),Ng=n(L,"LI",{});var e$e=s(Ng);yie=n(e$e,"STRONG",{});var sht=s(yie);jso=r(sht,"roberta"),sht.forEach(t),Dso=r(e$e," \u2014 "),VB=n(e$e,"A",{href:!0});var lht=s(VB);Gso=r(lht,"RobertaConfig"),lht.forEach(t),Oso=r(e$e," (RoBERTa model)"),e$e.forEach(t),Vso=i(L),qg=n(L,"LI",{});var o$e=s(qg);xie=n(o$e,"STRONG",{});var iht=s(xie);Xso=r(iht,"roformer"),iht.forEach(t),zso=r(o$e," \u2014 "),XB=n(o$e,"A",{href:!0});var dht=s(XB);Wso=r(dht,"RoFormerConfig"),dht.forEach(t),Qso=r(o$e," (RoFormer model)"),o$e.forEach(t),Uso=i(L),jg=n(L,"LI",{});var r$e=s(jg);$ie=n(r$e,"STRONG",{});var cht=s($ie);Hso=r(cht,"segformer"),cht.forEach(t),Jso=r(r$e," \u2014 "),zB=n(r$e,"A",{href:!0});var fht=s(zB);Yso=r(fht,"SegformerConfig"),fht.forEach(t),Kso=r(r$e," (SegFormer model)"),r$e.forEach(t),Zso=i(L),Dg=n(L,"LI",{});var t$e=s(Dg);kie=n(t$e,"STRONG",{});var mht=s(kie);elo=r(mht,"sew"),mht.forEach(t),olo=r(t$e," \u2014 "),WB=n(t$e,"A",{href:!0});var ght=s(WB);rlo=r(ght,"SEWConfig"),ght.forEach(t),tlo=r(t$e," (SEW model)"),t$e.forEach(t),alo=i(L),Gg=n(L,"LI",{});var a$e=s(Gg);Sie=n(a$e,"STRONG",{});var hht=s(Sie);nlo=r(hht,"sew-d"),hht.forEach(t),slo=r(a$e," \u2014 "),QB=n(a$e,"A",{href:!0});var pht=s(QB);llo=r(pht,"SEWDConfig"),pht.forEach(t),ilo=r(a$e," (SEW-D model)"),a$e.forEach(t),dlo=i(L),Og=n(L,"LI",{});var n$e=s(Og);Rie=n(n$e,"STRONG",{});var _ht=s(Rie);clo=r(_ht,"speech-encoder-decoder"),_ht.forEach(t),flo=r(n$e," \u2014 "),UB=n(n$e,"A",{href:!0});var uht=s(UB);mlo=r(uht,"SpeechEncoderDecoderConfig"),uht.forEach(t),glo=r(n$e," (Speech Encoder decoder model)"),n$e.forEach(t),hlo=i(L),Vg=n(L,"LI",{});var s$e=s(Vg);Pie=n(s$e,"STRONG",{});var bht=s(Pie);plo=r(bht,"speech_to_text"),bht.forEach(t),_lo=r(s$e," \u2014 "),HB=n(s$e,"A",{href:!0});var vht=s(HB);ulo=r(vht,"Speech2TextConfig"),vht.forEach(t),blo=r(s$e," (Speech2Text model)"),s$e.forEach(t),vlo=i(L),Xg=n(L,"LI",{});var l$e=s(Xg);Bie=n(l$e,"STRONG",{});var Fht=s(Bie);Flo=r(Fht,"speech_to_text_2"),Fht.forEach(t),Tlo=r(l$e," \u2014 "),JB=n(l$e,"A",{href:!0});var Tht=s(JB);Mlo=r(Tht,"Speech2Text2Config"),Tht.forEach(t),Elo=r(l$e," (Speech2Text2 model)"),l$e.forEach(t),Clo=i(L),zg=n(L,"LI",{});var i$e=s(zg);Iie=n(i$e,"STRONG",{});var Mht=s(Iie);wlo=r(Mht,"splinter"),Mht.forEach(t),Alo=r(i$e," \u2014 "),YB=n(i$e,"A",{href:!0});var Eht=s(YB);Llo=r(Eht,"SplinterConfig"),Eht.forEach(t),ylo=r(i$e," (Splinter model)"),i$e.forEach(t),xlo=i(L),Wg=n(L,"LI",{});var d$e=s(Wg);Nie=n(d$e,"STRONG",{});var Cht=s(Nie);$lo=r(Cht,"squeezebert"),Cht.forEach(t),klo=r(d$e," \u2014 "),KB=n(d$e,"A",{href:!0});var wht=s(KB);Slo=r(wht,"SqueezeBertConfig"),wht.forEach(t),Rlo=r(d$e," (SqueezeBERT model)"),d$e.forEach(t),Plo=i(L),Qg=n(L,"LI",{});var c$e=s(Qg);qie=n(c$e,"STRONG",{});var Aht=s(qie);Blo=r(Aht,"swin"),Aht.forEach(t),Ilo=r(c$e," \u2014 "),ZB=n(c$e,"A",{href:!0});var Lht=s(ZB);Nlo=r(Lht,"SwinConfig"),Lht.forEach(t),qlo=r(c$e," (Swin Transformer model)"),c$e.forEach(t),jlo=i(L),Ug=n(L,"LI",{});var f$e=s(Ug);jie=n(f$e,"STRONG",{});var yht=s(jie);Dlo=r(yht,"swinv2"),yht.forEach(t),Glo=r(f$e," \u2014 "),eI=n(f$e,"A",{href:!0});var xht=s(eI);Olo=r(xht,"Swinv2Config"),xht.forEach(t),Vlo=r(f$e," (Swin Transformer V2 model)"),f$e.forEach(t),Xlo=i(L),Hg=n(L,"LI",{});var m$e=s(Hg);Die=n(m$e,"STRONG",{});var $ht=s(Die);zlo=r($ht,"t5"),$ht.forEach(t),Wlo=r(m$e," \u2014 "),oI=n(m$e,"A",{href:!0});var kht=s(oI);Qlo=r(kht,"T5Config"),kht.forEach(t),Ulo=r(m$e," (T5 model)"),m$e.forEach(t),Hlo=i(L),Jg=n(L,"LI",{});var g$e=s(Jg);Gie=n(g$e,"STRONG",{});var Sht=s(Gie);Jlo=r(Sht,"tapas"),Sht.forEach(t),Ylo=r(g$e," \u2014 "),rI=n(g$e,"A",{href:!0});var Rht=s(rI);Klo=r(Rht,"TapasConfig"),Rht.forEach(t),Zlo=r(g$e," (TAPAS model)"),g$e.forEach(t),eio=i(L),Yg=n(L,"LI",{});var h$e=s(Yg);Oie=n(h$e,"STRONG",{});var Pht=s(Oie);oio=r(Pht,"trajectory_transformer"),Pht.forEach(t),rio=r(h$e," \u2014 "),tI=n(h$e,"A",{href:!0});var Bht=s(tI);tio=r(Bht,"TrajectoryTransformerConfig"),Bht.forEach(t),aio=r(h$e," (Trajectory Transformer model)"),h$e.forEach(t),nio=i(L),Kg=n(L,"LI",{});var p$e=s(Kg);Vie=n(p$e,"STRONG",{});var Iht=s(Vie);sio=r(Iht,"transfo-xl"),Iht.forEach(t),lio=r(p$e," \u2014 "),aI=n(p$e,"A",{href:!0});var Nht=s(aI);iio=r(Nht,"TransfoXLConfig"),Nht.forEach(t),dio=r(p$e," (Transformer-XL model)"),p$e.forEach(t),cio=i(L),Zg=n(L,"LI",{});var _$e=s(Zg);Xie=n(_$e,"STRONG",{});var qht=s(Xie);fio=r(qht,"trocr"),qht.forEach(t),mio=r(_$e," \u2014 "),nI=n(_$e,"A",{href:!0});var jht=s(nI);gio=r(jht,"TrOCRConfig"),jht.forEach(t),hio=r(_$e," (TrOCR model)"),_$e.forEach(t),pio=i(L),eh=n(L,"LI",{});var u$e=s(eh);zie=n(u$e,"STRONG",{});var Dht=s(zie);_io=r(Dht,"unispeech"),Dht.forEach(t),uio=r(u$e," \u2014 "),sI=n(u$e,"A",{href:!0});var Ght=s(sI);bio=r(Ght,"UniSpeechConfig"),Ght.forEach(t),vio=r(u$e," (UniSpeech model)"),u$e.forEach(t),Fio=i(L),oh=n(L,"LI",{});var b$e=s(oh);Wie=n(b$e,"STRONG",{});var Oht=s(Wie);Tio=r(Oht,"unispeech-sat"),Oht.forEach(t),Mio=r(b$e," \u2014 "),lI=n(b$e,"A",{href:!0});var Vht=s(lI);Eio=r(Vht,"UniSpeechSatConfig"),Vht.forEach(t),Cio=r(b$e," (UniSpeechSat model)"),b$e.forEach(t),wio=i(L),rh=n(L,"LI",{});var v$e=s(rh);Qie=n(v$e,"STRONG",{});var Xht=s(Qie);Aio=r(Xht,"van"),Xht.forEach(t),Lio=r(v$e," \u2014 "),iI=n(v$e,"A",{href:!0});var zht=s(iI);yio=r(zht,"VanConfig"),zht.forEach(t),xio=r(v$e," (VAN model)"),v$e.forEach(t),$io=i(L),th=n(L,"LI",{});var F$e=s(th);Uie=n(F$e,"STRONG",{});var Wht=s(Uie);kio=r(Wht,"videomae"),Wht.forEach(t),Sio=r(F$e," \u2014 "),dI=n(F$e,"A",{href:!0});var Qht=s(dI);Rio=r(Qht,"VideoMAEConfig"),Qht.forEach(t),Pio=r(F$e," (VideoMAE model)"),F$e.forEach(t),Bio=i(L),ah=n(L,"LI",{});var T$e=s(ah);Hie=n(T$e,"STRONG",{});var Uht=s(Hie);Iio=r(Uht,"vilt"),Uht.forEach(t),Nio=r(T$e," \u2014 "),cI=n(T$e,"A",{href:!0});var Hht=s(cI);qio=r(Hht,"ViltConfig"),Hht.forEach(t),jio=r(T$e," (ViLT model)"),T$e.forEach(t),Dio=i(L),nh=n(L,"LI",{});var M$e=s(nh);Jie=n(M$e,"STRONG",{});var Jht=s(Jie);Gio=r(Jht,"vision-encoder-decoder"),Jht.forEach(t),Oio=r(M$e," \u2014 "),fI=n(M$e,"A",{href:!0});var Yht=s(fI);Vio=r(Yht,"VisionEncoderDecoderConfig"),Yht.forEach(t),Xio=r(M$e," (Vision Encoder decoder model)"),M$e.forEach(t),zio=i(L),sh=n(L,"LI",{});var E$e=s(sh);Yie=n(E$e,"STRONG",{});var Kht=s(Yie);Wio=r(Kht,"vision-text-dual-encoder"),Kht.forEach(t),Qio=r(E$e," \u2014 "),mI=n(E$e,"A",{href:!0});var Zht=s(mI);Uio=r(Zht,"VisionTextDualEncoderConfig"),Zht.forEach(t),Hio=r(E$e," (VisionTextDualEncoder model)"),E$e.forEach(t),Jio=i(L),lh=n(L,"LI",{});var C$e=s(lh);Kie=n(C$e,"STRONG",{});var ept=s(Kie);Yio=r(ept,"visual_bert"),ept.forEach(t),Kio=r(C$e," \u2014 "),gI=n(C$e,"A",{href:!0});var opt=s(gI);Zio=r(opt,"VisualBertConfig"),opt.forEach(t),edo=r(C$e," (VisualBERT model)"),C$e.forEach(t),odo=i(L),ih=n(L,"LI",{});var w$e=s(ih);Zie=n(w$e,"STRONG",{});var rpt=s(Zie);rdo=r(rpt,"vit"),rpt.forEach(t),tdo=r(w$e," \u2014 "),hI=n(w$e,"A",{href:!0});var tpt=s(hI);ado=r(tpt,"ViTConfig"),tpt.forEach(t),ndo=r(w$e," (ViT model)"),w$e.forEach(t),sdo=i(L),dh=n(L,"LI",{});var A$e=s(dh);ede=n(A$e,"STRONG",{});var apt=s(ede);ldo=r(apt,"vit_mae"),apt.forEach(t),ido=r(A$e," \u2014 "),pI=n(A$e,"A",{href:!0});var npt=s(pI);ddo=r(npt,"ViTMAEConfig"),npt.forEach(t),cdo=r(A$e," (ViTMAE model)"),A$e.forEach(t),fdo=i(L),ch=n(L,"LI",{});var L$e=s(ch);ode=n(L$e,"STRONG",{});var spt=s(ode);mdo=r(spt,"wav2vec2"),spt.forEach(t),gdo=r(L$e," \u2014 "),_I=n(L$e,"A",{href:!0});var lpt=s(_I);hdo=r(lpt,"Wav2Vec2Config"),lpt.forEach(t),pdo=r(L$e," (Wav2Vec2 model)"),L$e.forEach(t),_do=i(L),fh=n(L,"LI",{});var y$e=s(fh);rde=n(y$e,"STRONG",{});var ipt=s(rde);udo=r(ipt,"wav2vec2-conformer"),ipt.forEach(t),bdo=r(y$e," \u2014 "),uI=n(y$e,"A",{href:!0});var dpt=s(uI);vdo=r(dpt,"Wav2Vec2ConformerConfig"),dpt.forEach(t),Fdo=r(y$e," (Wav2Vec2-Conformer model)"),y$e.forEach(t),Tdo=i(L),mh=n(L,"LI",{});var x$e=s(mh);tde=n(x$e,"STRONG",{});var cpt=s(tde);Mdo=r(cpt,"wavlm"),cpt.forEach(t),Edo=r(x$e," \u2014 "),bI=n(x$e,"A",{href:!0});var fpt=s(bI);Cdo=r(fpt,"WavLMConfig"),fpt.forEach(t),wdo=r(x$e," (WavLM model)"),x$e.forEach(t),Ado=i(L),gh=n(L,"LI",{});var $$e=s(gh);ade=n($$e,"STRONG",{});var mpt=s(ade);Ldo=r(mpt,"xglm"),mpt.forEach(t),ydo=r($$e," \u2014 "),vI=n($$e,"A",{href:!0});var gpt=s(vI);xdo=r(gpt,"XGLMConfig"),gpt.forEach(t),$do=r($$e," (XGLM model)"),$$e.forEach(t),kdo=i(L),hh=n(L,"LI",{});var k$e=s(hh);nde=n(k$e,"STRONG",{});var hpt=s(nde);Sdo=r(hpt,"xlm"),hpt.forEach(t),Rdo=r(k$e," \u2014 "),FI=n(k$e,"A",{href:!0});var ppt=s(FI);Pdo=r(ppt,"XLMConfig"),ppt.forEach(t),Bdo=r(k$e," (XLM model)"),k$e.forEach(t),Ido=i(L),ph=n(L,"LI",{});var S$e=s(ph);sde=n(S$e,"STRONG",{});var _pt=s(sde);Ndo=r(_pt,"xlm-prophetnet"),_pt.forEach(t),qdo=r(S$e," \u2014 "),TI=n(S$e,"A",{href:!0});var upt=s(TI);jdo=r(upt,"XLMProphetNetConfig"),upt.forEach(t),Ddo=r(S$e," (XLM-ProphetNet model)"),S$e.forEach(t),Gdo=i(L),_h=n(L,"LI",{});var R$e=s(_h);lde=n(R$e,"STRONG",{});var bpt=s(lde);Odo=r(bpt,"xlm-roberta"),bpt.forEach(t),Vdo=r(R$e," \u2014 "),MI=n(R$e,"A",{href:!0});var vpt=s(MI);Xdo=r(vpt,"XLMRobertaConfig"),vpt.forEach(t),zdo=r(R$e," (XLM-RoBERTa model)"),R$e.forEach(t),Wdo=i(L),uh=n(L,"LI",{});var P$e=s(uh);ide=n(P$e,"STRONG",{});var Fpt=s(ide);Qdo=r(Fpt,"xlm-roberta-xl"),Fpt.forEach(t),Udo=r(P$e," \u2014 "),EI=n(P$e,"A",{href:!0});var Tpt=s(EI);Hdo=r(Tpt,"XLMRobertaXLConfig"),Tpt.forEach(t),Jdo=r(P$e," (XLM-RoBERTa-XL model)"),P$e.forEach(t),Ydo=i(L),bh=n(L,"LI",{});var B$e=s(bh);dde=n(B$e,"STRONG",{});var Mpt=s(dde);Kdo=r(Mpt,"xlnet"),Mpt.forEach(t),Zdo=r(B$e," \u2014 "),CI=n(B$e,"A",{href:!0});var Ept=s(CI);eco=r(Ept,"XLNetConfig"),Ept.forEach(t),oco=r(B$e," (XLNet model)"),B$e.forEach(t),rco=i(L),vh=n(L,"LI",{});var I$e=s(vh);cde=n(I$e,"STRONG",{});var Cpt=s(cde);tco=r(Cpt,"yolos"),Cpt.forEach(t),aco=r(I$e," \u2014 "),wI=n(I$e,"A",{href:!0});var wpt=s(wI);nco=r(wpt,"YolosConfig"),wpt.forEach(t),sco=r(I$e," (YOLOS model)"),I$e.forEach(t),lco=i(L),Fh=n(L,"LI",{});var N$e=s(Fh);fde=n(N$e,"STRONG",{});var Apt=s(fde);ico=r(Apt,"yoso"),Apt.forEach(t),dco=r(N$e," \u2014 "),AI=n(N$e,"A",{href:!0});var Lpt=s(AI);cco=r(Lpt,"YosoConfig"),Lpt.forEach(t),fco=r(N$e," (YOSO model)"),N$e.forEach(t),L.forEach(t),mco=i(ct),T(Th.$$.fragment,ct),ct.forEach(t),gco=i(dt),Mh=n(dt,"DIV",{class:!0});var iJe=s(Mh);T(Ey.$$.fragment,iJe),hco=i(iJe),mde=n(iJe,"P",{});var ypt=s(mde);pco=r(ypt,"Register a new configuration for this class."),ypt.forEach(t),iJe.forEach(t),dt.forEach(t),nUe=i(f),Ki=n(f,"H2",{class:!0});var dJe=s(Ki);Eh=n(dJe,"A",{id:!0,class:!0,href:!0});var xpt=s(Eh);gde=n(xpt,"SPAN",{});var $pt=s(gde);T(Cy.$$.fragment,$pt),$pt.forEach(t),xpt.forEach(t),_co=i(dJe),hde=n(dJe,"SPAN",{});var kpt=s(hde);uco=r(kpt,"AutoTokenizer"),kpt.forEach(t),dJe.forEach(t),sUe=i(f),xo=n(f,"DIV",{class:!0});var cl=s(xo);T(wy.$$.fragment,cl),bco=i(cl),Ay=n(cl,"P",{});var cJe=s(Ay);vco=r(cJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LI=n(cJe,"A",{href:!0});var Spt=s(LI);Fco=r(Spt,"AutoTokenizer.from_pretrained()"),Spt.forEach(t),Tco=r(cJe," class method."),cJe.forEach(t),Mco=i(cl),Ly=n(cl,"P",{});var fJe=s(Ly);Eco=r(fJe,"This class cannot be instantiated directly using "),pde=n(fJe,"CODE",{});var Rpt=s(pde);Cco=r(Rpt,"__init__()"),Rpt.forEach(t),wco=r(fJe," (throws an error)."),fJe.forEach(t),Aco=i(cl),Sr=n(cl,"DIV",{class:!0});var fl=s(Sr);T(yy.$$.fragment,fl),Lco=i(fl),_de=n(fl,"P",{});var Ppt=s(_de);yco=r(Ppt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ppt.forEach(t),xco=i(fl),Ga=n(fl,"P",{});var g7=s(Ga);$co=r(g7,"The tokenizer class to instantiate is selected based on the "),ude=n(g7,"CODE",{});var Bpt=s(ude);kco=r(Bpt,"model_type"),Bpt.forEach(t),Sco=r(g7,` property of the config object (either
passed as an argument or loaded from `),bde=n(g7,"CODE",{});var Ipt=s(bde);Rco=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),Pco=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=n(g7,"CODE",{});var Npt=s(vde);Bco=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),Ico=r(g7,":"),g7.forEach(t),Nco=i(fl),k=n(fl,"UL",{});var S=s(k);Hn=n(S,"LI",{});var zS=s(Hn);Fde=n(zS,"STRONG",{});var qpt=s(Fde);qco=r(qpt,"albert"),qpt.forEach(t),jco=r(zS," \u2014 "),yI=n(zS,"A",{href:!0});var jpt=s(yI);Dco=r(jpt,"AlbertTokenizer"),jpt.forEach(t),Gco=r(zS," or "),xI=n(zS,"A",{href:!0});var Dpt=s(xI);Oco=r(Dpt,"AlbertTokenizerFast"),Dpt.forEach(t),Vco=r(zS," (ALBERT model)"),zS.forEach(t),Xco=i(S),Jn=n(S,"LI",{});var WS=s(Jn);Tde=n(WS,"STRONG",{});var Gpt=s(Tde);zco=r(Gpt,"bart"),Gpt.forEach(t),Wco=r(WS," \u2014 "),$I=n(WS,"A",{href:!0});var Opt=s($I);Qco=r(Opt,"BartTokenizer"),Opt.forEach(t),Uco=r(WS," or "),kI=n(WS,"A",{href:!0});var Vpt=s(kI);Hco=r(Vpt,"BartTokenizerFast"),Vpt.forEach(t),Jco=r(WS," (BART model)"),WS.forEach(t),Yco=i(S),Yn=n(S,"LI",{});var QS=s(Yn);Mde=n(QS,"STRONG",{});var Xpt=s(Mde);Kco=r(Xpt,"barthez"),Xpt.forEach(t),Zco=r(QS," \u2014 "),SI=n(QS,"A",{href:!0});var zpt=s(SI);efo=r(zpt,"BarthezTokenizer"),zpt.forEach(t),ofo=r(QS," or "),RI=n(QS,"A",{href:!0});var Wpt=s(RI);rfo=r(Wpt,"BarthezTokenizerFast"),Wpt.forEach(t),tfo=r(QS," (BARThez model)"),QS.forEach(t),afo=i(S),Ch=n(S,"LI",{});var q$e=s(Ch);Ede=n(q$e,"STRONG",{});var Qpt=s(Ede);nfo=r(Qpt,"bartpho"),Qpt.forEach(t),sfo=r(q$e," \u2014 "),PI=n(q$e,"A",{href:!0});var Upt=s(PI);lfo=r(Upt,"BartphoTokenizer"),Upt.forEach(t),ifo=r(q$e," (BARTpho model)"),q$e.forEach(t),dfo=i(S),Kn=n(S,"LI",{});var US=s(Kn);Cde=n(US,"STRONG",{});var Hpt=s(Cde);cfo=r(Hpt,"bert"),Hpt.forEach(t),ffo=r(US," \u2014 "),BI=n(US,"A",{href:!0});var Jpt=s(BI);mfo=r(Jpt,"BertTokenizer"),Jpt.forEach(t),gfo=r(US," or "),II=n(US,"A",{href:!0});var Ypt=s(II);hfo=r(Ypt,"BertTokenizerFast"),Ypt.forEach(t),pfo=r(US," (BERT model)"),US.forEach(t),_fo=i(S),wh=n(S,"LI",{});var j$e=s(wh);wde=n(j$e,"STRONG",{});var Kpt=s(wde);ufo=r(Kpt,"bert-generation"),Kpt.forEach(t),bfo=r(j$e," \u2014 "),NI=n(j$e,"A",{href:!0});var Zpt=s(NI);vfo=r(Zpt,"BertGenerationTokenizer"),Zpt.forEach(t),Ffo=r(j$e," (Bert Generation model)"),j$e.forEach(t),Tfo=i(S),Ah=n(S,"LI",{});var D$e=s(Ah);Ade=n(D$e,"STRONG",{});var e_t=s(Ade);Mfo=r(e_t,"bert-japanese"),e_t.forEach(t),Efo=r(D$e," \u2014 "),qI=n(D$e,"A",{href:!0});var o_t=s(qI);Cfo=r(o_t,"BertJapaneseTokenizer"),o_t.forEach(t),wfo=r(D$e," (BertJapanese model)"),D$e.forEach(t),Afo=i(S),Lh=n(S,"LI",{});var G$e=s(Lh);Lde=n(G$e,"STRONG",{});var r_t=s(Lde);Lfo=r(r_t,"bertweet"),r_t.forEach(t),yfo=r(G$e," \u2014 "),jI=n(G$e,"A",{href:!0});var t_t=s(jI);xfo=r(t_t,"BertweetTokenizer"),t_t.forEach(t),$fo=r(G$e," (BERTweet model)"),G$e.forEach(t),kfo=i(S),Zn=n(S,"LI",{});var HS=s(Zn);yde=n(HS,"STRONG",{});var a_t=s(yde);Sfo=r(a_t,"big_bird"),a_t.forEach(t),Rfo=r(HS," \u2014 "),DI=n(HS,"A",{href:!0});var n_t=s(DI);Pfo=r(n_t,"BigBirdTokenizer"),n_t.forEach(t),Bfo=r(HS," or "),GI=n(HS,"A",{href:!0});var s_t=s(GI);Ifo=r(s_t,"BigBirdTokenizerFast"),s_t.forEach(t),Nfo=r(HS," (BigBird model)"),HS.forEach(t),qfo=i(S),es=n(S,"LI",{});var JS=s(es);xde=n(JS,"STRONG",{});var l_t=s(xde);jfo=r(l_t,"bigbird_pegasus"),l_t.forEach(t),Dfo=r(JS," \u2014 "),OI=n(JS,"A",{href:!0});var i_t=s(OI);Gfo=r(i_t,"PegasusTokenizer"),i_t.forEach(t),Ofo=r(JS," or "),VI=n(JS,"A",{href:!0});var d_t=s(VI);Vfo=r(d_t,"PegasusTokenizerFast"),d_t.forEach(t),Xfo=r(JS," (BigBird-Pegasus model)"),JS.forEach(t),zfo=i(S),os=n(S,"LI",{});var YS=s(os);$de=n(YS,"STRONG",{});var c_t=s($de);Wfo=r(c_t,"blenderbot"),c_t.forEach(t),Qfo=r(YS," \u2014 "),XI=n(YS,"A",{href:!0});var f_t=s(XI);Ufo=r(f_t,"BlenderbotTokenizer"),f_t.forEach(t),Hfo=r(YS," or "),zI=n(YS,"A",{href:!0});var m_t=s(zI);Jfo=r(m_t,"BlenderbotTokenizerFast"),m_t.forEach(t),Yfo=r(YS," (Blenderbot model)"),YS.forEach(t),Kfo=i(S),yh=n(S,"LI",{});var O$e=s(yh);kde=n(O$e,"STRONG",{});var g_t=s(kde);Zfo=r(g_t,"blenderbot-small"),g_t.forEach(t),emo=r(O$e," \u2014 "),WI=n(O$e,"A",{href:!0});var h_t=s(WI);omo=r(h_t,"BlenderbotSmallTokenizer"),h_t.forEach(t),rmo=r(O$e," (BlenderbotSmall model)"),O$e.forEach(t),tmo=i(S),xh=n(S,"LI",{});var V$e=s(xh);Sde=n(V$e,"STRONG",{});var p_t=s(Sde);amo=r(p_t,"bloom"),p_t.forEach(t),nmo=r(V$e," \u2014 "),QI=n(V$e,"A",{href:!0});var __t=s(QI);smo=r(__t,"BloomTokenizerFast"),__t.forEach(t),lmo=r(V$e," (BLOOM model)"),V$e.forEach(t),imo=i(S),$h=n(S,"LI",{});var X$e=s($h);Rde=n(X$e,"STRONG",{});var u_t=s(Rde);dmo=r(u_t,"byt5"),u_t.forEach(t),cmo=r(X$e," \u2014 "),UI=n(X$e,"A",{href:!0});var b_t=s(UI);fmo=r(b_t,"ByT5Tokenizer"),b_t.forEach(t),mmo=r(X$e," (ByT5 model)"),X$e.forEach(t),gmo=i(S),rs=n(S,"LI",{});var KS=s(rs);Pde=n(KS,"STRONG",{});var v_t=s(Pde);hmo=r(v_t,"camembert"),v_t.forEach(t),pmo=r(KS," \u2014 "),HI=n(KS,"A",{href:!0});var F_t=s(HI);_mo=r(F_t,"CamembertTokenizer"),F_t.forEach(t),umo=r(KS," or "),JI=n(KS,"A",{href:!0});var T_t=s(JI);bmo=r(T_t,"CamembertTokenizerFast"),T_t.forEach(t),vmo=r(KS," (CamemBERT model)"),KS.forEach(t),Fmo=i(S),kh=n(S,"LI",{});var z$e=s(kh);Bde=n(z$e,"STRONG",{});var M_t=s(Bde);Tmo=r(M_t,"canine"),M_t.forEach(t),Mmo=r(z$e," \u2014 "),YI=n(z$e,"A",{href:!0});var E_t=s(YI);Emo=r(E_t,"CanineTokenizer"),E_t.forEach(t),Cmo=r(z$e," (CANINE model)"),z$e.forEach(t),wmo=i(S),ts=n(S,"LI",{});var ZS=s(ts);Ide=n(ZS,"STRONG",{});var C_t=s(Ide);Amo=r(C_t,"clip"),C_t.forEach(t),Lmo=r(ZS," \u2014 "),KI=n(ZS,"A",{href:!0});var w_t=s(KI);ymo=r(w_t,"CLIPTokenizer"),w_t.forEach(t),xmo=r(ZS," or "),ZI=n(ZS,"A",{href:!0});var A_t=s(ZI);$mo=r(A_t,"CLIPTokenizerFast"),A_t.forEach(t),kmo=r(ZS," (CLIP model)"),ZS.forEach(t),Smo=i(S),as=n(S,"LI",{});var eR=s(as);Nde=n(eR,"STRONG",{});var L_t=s(Nde);Rmo=r(L_t,"codegen"),L_t.forEach(t),Pmo=r(eR," \u2014 "),eN=n(eR,"A",{href:!0});var y_t=s(eN);Bmo=r(y_t,"CodeGenTokenizer"),y_t.forEach(t),Imo=r(eR," or "),oN=n(eR,"A",{href:!0});var x_t=s(oN);Nmo=r(x_t,"CodeGenTokenizerFast"),x_t.forEach(t),qmo=r(eR," (CodeGen model)"),eR.forEach(t),jmo=i(S),ns=n(S,"LI",{});var oR=s(ns);qde=n(oR,"STRONG",{});var $_t=s(qde);Dmo=r($_t,"convbert"),$_t.forEach(t),Gmo=r(oR," \u2014 "),rN=n(oR,"A",{href:!0});var k_t=s(rN);Omo=r(k_t,"ConvBertTokenizer"),k_t.forEach(t),Vmo=r(oR," or "),tN=n(oR,"A",{href:!0});var S_t=s(tN);Xmo=r(S_t,"ConvBertTokenizerFast"),S_t.forEach(t),zmo=r(oR," (ConvBERT model)"),oR.forEach(t),Wmo=i(S),ss=n(S,"LI",{});var rR=s(ss);jde=n(rR,"STRONG",{});var R_t=s(jde);Qmo=r(R_t,"cpm"),R_t.forEach(t),Umo=r(rR," \u2014 "),aN=n(rR,"A",{href:!0});var P_t=s(aN);Hmo=r(P_t,"CpmTokenizer"),P_t.forEach(t),Jmo=r(rR," or "),nN=n(rR,"A",{href:!0});var B_t=s(nN);Ymo=r(B_t,"CpmTokenizerFast"),B_t.forEach(t),Kmo=r(rR," (CPM model)"),rR.forEach(t),Zmo=i(S),Sh=n(S,"LI",{});var W$e=s(Sh);Dde=n(W$e,"STRONG",{});var I_t=s(Dde);ego=r(I_t,"ctrl"),I_t.forEach(t),ogo=r(W$e," \u2014 "),sN=n(W$e,"A",{href:!0});var N_t=s(sN);rgo=r(N_t,"CTRLTokenizer"),N_t.forEach(t),tgo=r(W$e," (CTRL model)"),W$e.forEach(t),ago=i(S),ls=n(S,"LI",{});var tR=s(ls);Gde=n(tR,"STRONG",{});var q_t=s(Gde);ngo=r(q_t,"data2vec-text"),q_t.forEach(t),sgo=r(tR," \u2014 "),lN=n(tR,"A",{href:!0});var j_t=s(lN);lgo=r(j_t,"RobertaTokenizer"),j_t.forEach(t),igo=r(tR," or "),iN=n(tR,"A",{href:!0});var D_t=s(iN);dgo=r(D_t,"RobertaTokenizerFast"),D_t.forEach(t),cgo=r(tR," (Data2VecText model)"),tR.forEach(t),fgo=i(S),is=n(S,"LI",{});var aR=s(is);Ode=n(aR,"STRONG",{});var G_t=s(Ode);mgo=r(G_t,"deberta"),G_t.forEach(t),ggo=r(aR," \u2014 "),dN=n(aR,"A",{href:!0});var O_t=s(dN);hgo=r(O_t,"DebertaTokenizer"),O_t.forEach(t),pgo=r(aR," or "),cN=n(aR,"A",{href:!0});var V_t=s(cN);_go=r(V_t,"DebertaTokenizerFast"),V_t.forEach(t),ugo=r(aR," (DeBERTa model)"),aR.forEach(t),bgo=i(S),ds=n(S,"LI",{});var nR=s(ds);Vde=n(nR,"STRONG",{});var X_t=s(Vde);vgo=r(X_t,"deberta-v2"),X_t.forEach(t),Fgo=r(nR," \u2014 "),fN=n(nR,"A",{href:!0});var z_t=s(fN);Tgo=r(z_t,"DebertaV2Tokenizer"),z_t.forEach(t),Mgo=r(nR," or "),mN=n(nR,"A",{href:!0});var W_t=s(mN);Ego=r(W_t,"DebertaV2TokenizerFast"),W_t.forEach(t),Cgo=r(nR," (DeBERTa-v2 model)"),nR.forEach(t),wgo=i(S),cs=n(S,"LI",{});var sR=s(cs);Xde=n(sR,"STRONG",{});var Q_t=s(Xde);Ago=r(Q_t,"distilbert"),Q_t.forEach(t),Lgo=r(sR," \u2014 "),gN=n(sR,"A",{href:!0});var U_t=s(gN);ygo=r(U_t,"DistilBertTokenizer"),U_t.forEach(t),xgo=r(sR," or "),hN=n(sR,"A",{href:!0});var H_t=s(hN);$go=r(H_t,"DistilBertTokenizerFast"),H_t.forEach(t),kgo=r(sR," (DistilBERT model)"),sR.forEach(t),Sgo=i(S),fs=n(S,"LI",{});var lR=s(fs);zde=n(lR,"STRONG",{});var J_t=s(zde);Rgo=r(J_t,"dpr"),J_t.forEach(t),Pgo=r(lR," \u2014 "),pN=n(lR,"A",{href:!0});var Y_t=s(pN);Bgo=r(Y_t,"DPRQuestionEncoderTokenizer"),Y_t.forEach(t),Igo=r(lR," or "),_N=n(lR,"A",{href:!0});var K_t=s(_N);Ngo=r(K_t,"DPRQuestionEncoderTokenizerFast"),K_t.forEach(t),qgo=r(lR," (DPR model)"),lR.forEach(t),jgo=i(S),ms=n(S,"LI",{});var iR=s(ms);Wde=n(iR,"STRONG",{});var Z_t=s(Wde);Dgo=r(Z_t,"electra"),Z_t.forEach(t),Ggo=r(iR," \u2014 "),uN=n(iR,"A",{href:!0});var eut=s(uN);Ogo=r(eut,"ElectraTokenizer"),eut.forEach(t),Vgo=r(iR," or "),bN=n(iR,"A",{href:!0});var out=s(bN);Xgo=r(out,"ElectraTokenizerFast"),out.forEach(t),zgo=r(iR," (ELECTRA model)"),iR.forEach(t),Wgo=i(S),Rh=n(S,"LI",{});var Q$e=s(Rh);Qde=n(Q$e,"STRONG",{});var rut=s(Qde);Qgo=r(rut,"flaubert"),rut.forEach(t),Ugo=r(Q$e," \u2014 "),vN=n(Q$e,"A",{href:!0});var tut=s(vN);Hgo=r(tut,"FlaubertTokenizer"),tut.forEach(t),Jgo=r(Q$e," (FlauBERT model)"),Q$e.forEach(t),Ygo=i(S),gs=n(S,"LI",{});var dR=s(gs);Ude=n(dR,"STRONG",{});var aut=s(Ude);Kgo=r(aut,"fnet"),aut.forEach(t),Zgo=r(dR," \u2014 "),FN=n(dR,"A",{href:!0});var nut=s(FN);eho=r(nut,"FNetTokenizer"),nut.forEach(t),oho=r(dR," or "),TN=n(dR,"A",{href:!0});var sut=s(TN);rho=r(sut,"FNetTokenizerFast"),sut.forEach(t),tho=r(dR," (FNet model)"),dR.forEach(t),aho=i(S),Ph=n(S,"LI",{});var U$e=s(Ph);Hde=n(U$e,"STRONG",{});var lut=s(Hde);nho=r(lut,"fsmt"),lut.forEach(t),sho=r(U$e," \u2014 "),MN=n(U$e,"A",{href:!0});var iut=s(MN);lho=r(iut,"FSMTTokenizer"),iut.forEach(t),iho=r(U$e," (FairSeq Machine-Translation model)"),U$e.forEach(t),dho=i(S),hs=n(S,"LI",{});var cR=s(hs);Jde=n(cR,"STRONG",{});var dut=s(Jde);cho=r(dut,"funnel"),dut.forEach(t),fho=r(cR," \u2014 "),EN=n(cR,"A",{href:!0});var cut=s(EN);mho=r(cut,"FunnelTokenizer"),cut.forEach(t),gho=r(cR," or "),CN=n(cR,"A",{href:!0});var fut=s(CN);hho=r(fut,"FunnelTokenizerFast"),fut.forEach(t),pho=r(cR," (Funnel Transformer model)"),cR.forEach(t),_ho=i(S),ps=n(S,"LI",{});var fR=s(ps);Yde=n(fR,"STRONG",{});var mut=s(Yde);uho=r(mut,"gpt2"),mut.forEach(t),bho=r(fR," \u2014 "),wN=n(fR,"A",{href:!0});var gut=s(wN);vho=r(gut,"GPT2Tokenizer"),gut.forEach(t),Fho=r(fR," or "),AN=n(fR,"A",{href:!0});var hut=s(AN);Tho=r(hut,"GPT2TokenizerFast"),hut.forEach(t),Mho=r(fR," (OpenAI GPT-2 model)"),fR.forEach(t),Eho=i(S),_s=n(S,"LI",{});var mR=s(_s);Kde=n(mR,"STRONG",{});var put=s(Kde);Cho=r(put,"gpt_neo"),put.forEach(t),who=r(mR," \u2014 "),LN=n(mR,"A",{href:!0});var _ut=s(LN);Aho=r(_ut,"GPT2Tokenizer"),_ut.forEach(t),Lho=r(mR," or "),yN=n(mR,"A",{href:!0});var uut=s(yN);yho=r(uut,"GPT2TokenizerFast"),uut.forEach(t),xho=r(mR," (GPT Neo model)"),mR.forEach(t),$ho=i(S),Bh=n(S,"LI",{});var H$e=s(Bh);Zde=n(H$e,"STRONG",{});var but=s(Zde);kho=r(but,"gpt_neox"),but.forEach(t),Sho=r(H$e," \u2014 "),xN=n(H$e,"A",{href:!0});var vut=s(xN);Rho=r(vut,"GPTNeoXTokenizerFast"),vut.forEach(t),Pho=r(H$e," (GPT NeoX model)"),H$e.forEach(t),Bho=i(S),us=n(S,"LI",{});var gR=s(us);ece=n(gR,"STRONG",{});var Fut=s(ece);Iho=r(Fut,"gptj"),Fut.forEach(t),Nho=r(gR," \u2014 "),$N=n(gR,"A",{href:!0});var Tut=s($N);qho=r(Tut,"GPT2Tokenizer"),Tut.forEach(t),jho=r(gR," or "),kN=n(gR,"A",{href:!0});var Mut=s(kN);Dho=r(Mut,"GPT2TokenizerFast"),Mut.forEach(t),Gho=r(gR," (GPT-J model)"),gR.forEach(t),Oho=i(S),bs=n(S,"LI",{});var hR=s(bs);oce=n(hR,"STRONG",{});var Eut=s(oce);Vho=r(Eut,"groupvit"),Eut.forEach(t),Xho=r(hR," \u2014 "),SN=n(hR,"A",{href:!0});var Cut=s(SN);zho=r(Cut,"CLIPTokenizer"),Cut.forEach(t),Who=r(hR," or "),RN=n(hR,"A",{href:!0});var wut=s(RN);Qho=r(wut,"CLIPTokenizerFast"),wut.forEach(t),Uho=r(hR," (GroupViT model)"),hR.forEach(t),Hho=i(S),vs=n(S,"LI",{});var pR=s(vs);rce=n(pR,"STRONG",{});var Aut=s(rce);Jho=r(Aut,"herbert"),Aut.forEach(t),Yho=r(pR," \u2014 "),PN=n(pR,"A",{href:!0});var Lut=s(PN);Kho=r(Lut,"HerbertTokenizer"),Lut.forEach(t),Zho=r(pR," or "),BN=n(pR,"A",{href:!0});var yut=s(BN);epo=r(yut,"HerbertTokenizerFast"),yut.forEach(t),opo=r(pR," (HerBERT model)"),pR.forEach(t),rpo=i(S),Ih=n(S,"LI",{});var J$e=s(Ih);tce=n(J$e,"STRONG",{});var xut=s(tce);tpo=r(xut,"hubert"),xut.forEach(t),apo=r(J$e," \u2014 "),IN=n(J$e,"A",{href:!0});var $ut=s(IN);npo=r($ut,"Wav2Vec2CTCTokenizer"),$ut.forEach(t),spo=r(J$e," (Hubert model)"),J$e.forEach(t),lpo=i(S),Fs=n(S,"LI",{});var _R=s(Fs);ace=n(_R,"STRONG",{});var kut=s(ace);ipo=r(kut,"ibert"),kut.forEach(t),dpo=r(_R," \u2014 "),NN=n(_R,"A",{href:!0});var Sut=s(NN);cpo=r(Sut,"RobertaTokenizer"),Sut.forEach(t),fpo=r(_R," or "),qN=n(_R,"A",{href:!0});var Rut=s(qN);mpo=r(Rut,"RobertaTokenizerFast"),Rut.forEach(t),gpo=r(_R," (I-BERT model)"),_R.forEach(t),hpo=i(S),Ts=n(S,"LI",{});var uR=s(Ts);nce=n(uR,"STRONG",{});var Put=s(nce);ppo=r(Put,"layoutlm"),Put.forEach(t),_po=r(uR," \u2014 "),jN=n(uR,"A",{href:!0});var But=s(jN);upo=r(But,"LayoutLMTokenizer"),But.forEach(t),bpo=r(uR," or "),DN=n(uR,"A",{href:!0});var Iut=s(DN);vpo=r(Iut,"LayoutLMTokenizerFast"),Iut.forEach(t),Fpo=r(uR," (LayoutLM model)"),uR.forEach(t),Tpo=i(S),Ms=n(S,"LI",{});var bR=s(Ms);sce=n(bR,"STRONG",{});var Nut=s(sce);Mpo=r(Nut,"layoutlmv2"),Nut.forEach(t),Epo=r(bR," \u2014 "),GN=n(bR,"A",{href:!0});var qut=s(GN);Cpo=r(qut,"LayoutLMv2Tokenizer"),qut.forEach(t),wpo=r(bR," or "),ON=n(bR,"A",{href:!0});var jut=s(ON);Apo=r(jut,"LayoutLMv2TokenizerFast"),jut.forEach(t),Lpo=r(bR," (LayoutLMv2 model)"),bR.forEach(t),ypo=i(S),Es=n(S,"LI",{});var vR=s(Es);lce=n(vR,"STRONG",{});var Dut=s(lce);xpo=r(Dut,"layoutlmv3"),Dut.forEach(t),$po=r(vR," \u2014 "),VN=n(vR,"A",{href:!0});var Gut=s(VN);kpo=r(Gut,"LayoutLMv3Tokenizer"),Gut.forEach(t),Spo=r(vR," or "),XN=n(vR,"A",{href:!0});var Out=s(XN);Rpo=r(Out,"LayoutLMv3TokenizerFast"),Out.forEach(t),Ppo=r(vR," (LayoutLMv3 model)"),vR.forEach(t),Bpo=i(S),Cs=n(S,"LI",{});var FR=s(Cs);ice=n(FR,"STRONG",{});var Vut=s(ice);Ipo=r(Vut,"layoutxlm"),Vut.forEach(t),Npo=r(FR," \u2014 "),zN=n(FR,"A",{href:!0});var Xut=s(zN);qpo=r(Xut,"LayoutXLMTokenizer"),Xut.forEach(t),jpo=r(FR," or "),WN=n(FR,"A",{href:!0});var zut=s(WN);Dpo=r(zut,"LayoutXLMTokenizerFast"),zut.forEach(t),Gpo=r(FR," (LayoutXLM model)"),FR.forEach(t),Opo=i(S),ws=n(S,"LI",{});var TR=s(ws);dce=n(TR,"STRONG",{});var Wut=s(dce);Vpo=r(Wut,"led"),Wut.forEach(t),Xpo=r(TR," \u2014 "),QN=n(TR,"A",{href:!0});var Qut=s(QN);zpo=r(Qut,"LEDTokenizer"),Qut.forEach(t),Wpo=r(TR," or "),UN=n(TR,"A",{href:!0});var Uut=s(UN);Qpo=r(Uut,"LEDTokenizerFast"),Uut.forEach(t),Upo=r(TR," (LED model)"),TR.forEach(t),Hpo=i(S),As=n(S,"LI",{});var MR=s(As);cce=n(MR,"STRONG",{});var Hut=s(cce);Jpo=r(Hut,"longformer"),Hut.forEach(t),Ypo=r(MR," \u2014 "),HN=n(MR,"A",{href:!0});var Jut=s(HN);Kpo=r(Jut,"LongformerTokenizer"),Jut.forEach(t),Zpo=r(MR," or "),JN=n(MR,"A",{href:!0});var Yut=s(JN);e_o=r(Yut,"LongformerTokenizerFast"),Yut.forEach(t),o_o=r(MR," (Longformer model)"),MR.forEach(t),r_o=i(S),Ls=n(S,"LI",{});var ER=s(Ls);fce=n(ER,"STRONG",{});var Kut=s(fce);t_o=r(Kut,"longt5"),Kut.forEach(t),a_o=r(ER," \u2014 "),YN=n(ER,"A",{href:!0});var Zut=s(YN);n_o=r(Zut,"T5Tokenizer"),Zut.forEach(t),s_o=r(ER," or "),KN=n(ER,"A",{href:!0});var e2t=s(KN);l_o=r(e2t,"T5TokenizerFast"),e2t.forEach(t),i_o=r(ER," (LongT5 model)"),ER.forEach(t),d_o=i(S),Nh=n(S,"LI",{});var Y$e=s(Nh);mce=n(Y$e,"STRONG",{});var o2t=s(mce);c_o=r(o2t,"luke"),o2t.forEach(t),f_o=r(Y$e," \u2014 "),ZN=n(Y$e,"A",{href:!0});var r2t=s(ZN);m_o=r(r2t,"LukeTokenizer"),r2t.forEach(t),g_o=r(Y$e," (LUKE model)"),Y$e.forEach(t),h_o=i(S),ys=n(S,"LI",{});var CR=s(ys);gce=n(CR,"STRONG",{});var t2t=s(gce);p_o=r(t2t,"lxmert"),t2t.forEach(t),__o=r(CR," \u2014 "),eq=n(CR,"A",{href:!0});var a2t=s(eq);u_o=r(a2t,"LxmertTokenizer"),a2t.forEach(t),b_o=r(CR," or "),oq=n(CR,"A",{href:!0});var n2t=s(oq);v_o=r(n2t,"LxmertTokenizerFast"),n2t.forEach(t),F_o=r(CR," (LXMERT model)"),CR.forEach(t),T_o=i(S),qh=n(S,"LI",{});var K$e=s(qh);hce=n(K$e,"STRONG",{});var s2t=s(hce);M_o=r(s2t,"m2m_100"),s2t.forEach(t),E_o=r(K$e," \u2014 "),rq=n(K$e,"A",{href:!0});var l2t=s(rq);C_o=r(l2t,"M2M100Tokenizer"),l2t.forEach(t),w_o=r(K$e," (M2M100 model)"),K$e.forEach(t),A_o=i(S),jh=n(S,"LI",{});var Z$e=s(jh);pce=n(Z$e,"STRONG",{});var i2t=s(pce);L_o=r(i2t,"marian"),i2t.forEach(t),y_o=r(Z$e," \u2014 "),tq=n(Z$e,"A",{href:!0});var d2t=s(tq);x_o=r(d2t,"MarianTokenizer"),d2t.forEach(t),$_o=r(Z$e," (Marian model)"),Z$e.forEach(t),k_o=i(S),xs=n(S,"LI",{});var wR=s(xs);_ce=n(wR,"STRONG",{});var c2t=s(_ce);S_o=r(c2t,"mbart"),c2t.forEach(t),R_o=r(wR," \u2014 "),aq=n(wR,"A",{href:!0});var f2t=s(aq);P_o=r(f2t,"MBartTokenizer"),f2t.forEach(t),B_o=r(wR," or "),nq=n(wR,"A",{href:!0});var m2t=s(nq);I_o=r(m2t,"MBartTokenizerFast"),m2t.forEach(t),N_o=r(wR," (mBART model)"),wR.forEach(t),q_o=i(S),$s=n(S,"LI",{});var AR=s($s);uce=n(AR,"STRONG",{});var g2t=s(uce);j_o=r(g2t,"mbart50"),g2t.forEach(t),D_o=r(AR," \u2014 "),sq=n(AR,"A",{href:!0});var h2t=s(sq);G_o=r(h2t,"MBart50Tokenizer"),h2t.forEach(t),O_o=r(AR," or "),lq=n(AR,"A",{href:!0});var p2t=s(lq);V_o=r(p2t,"MBart50TokenizerFast"),p2t.forEach(t),X_o=r(AR," (mBART-50 model)"),AR.forEach(t),z_o=i(S),ks=n(S,"LI",{});var LR=s(ks);bce=n(LR,"STRONG",{});var _2t=s(bce);W_o=r(_2t,"megatron-bert"),_2t.forEach(t),Q_o=r(LR," \u2014 "),iq=n(LR,"A",{href:!0});var u2t=s(iq);U_o=r(u2t,"BertTokenizer"),u2t.forEach(t),H_o=r(LR," or "),dq=n(LR,"A",{href:!0});var b2t=s(dq);J_o=r(b2t,"BertTokenizerFast"),b2t.forEach(t),Y_o=r(LR," (Megatron-BERT model)"),LR.forEach(t),K_o=i(S),Dh=n(S,"LI",{});var eke=s(Dh);vce=n(eke,"STRONG",{});var v2t=s(vce);Z_o=r(v2t,"mluke"),v2t.forEach(t),euo=r(eke," \u2014 "),cq=n(eke,"A",{href:!0});var F2t=s(cq);ouo=r(F2t,"MLukeTokenizer"),F2t.forEach(t),ruo=r(eke," (mLUKE model)"),eke.forEach(t),tuo=i(S),Ss=n(S,"LI",{});var yR=s(Ss);Fce=n(yR,"STRONG",{});var T2t=s(Fce);auo=r(T2t,"mobilebert"),T2t.forEach(t),nuo=r(yR," \u2014 "),fq=n(yR,"A",{href:!0});var M2t=s(fq);suo=r(M2t,"MobileBertTokenizer"),M2t.forEach(t),luo=r(yR," or "),mq=n(yR,"A",{href:!0});var E2t=s(mq);iuo=r(E2t,"MobileBertTokenizerFast"),E2t.forEach(t),duo=r(yR," (MobileBERT model)"),yR.forEach(t),cuo=i(S),Rs=n(S,"LI",{});var xR=s(Rs);Tce=n(xR,"STRONG",{});var C2t=s(Tce);fuo=r(C2t,"mpnet"),C2t.forEach(t),muo=r(xR," \u2014 "),gq=n(xR,"A",{href:!0});var w2t=s(gq);guo=r(w2t,"MPNetTokenizer"),w2t.forEach(t),huo=r(xR," or "),hq=n(xR,"A",{href:!0});var A2t=s(hq);puo=r(A2t,"MPNetTokenizerFast"),A2t.forEach(t),_uo=r(xR," (MPNet model)"),xR.forEach(t),uuo=i(S),Ps=n(S,"LI",{});var $R=s(Ps);Mce=n($R,"STRONG",{});var L2t=s(Mce);buo=r(L2t,"mt5"),L2t.forEach(t),vuo=r($R," \u2014 "),pq=n($R,"A",{href:!0});var y2t=s(pq);Fuo=r(y2t,"MT5Tokenizer"),y2t.forEach(t),Tuo=r($R," or "),_q=n($R,"A",{href:!0});var x2t=s(_q);Muo=r(x2t,"MT5TokenizerFast"),x2t.forEach(t),Euo=r($R," (MT5 model)"),$R.forEach(t),Cuo=i(S),Bs=n(S,"LI",{});var kR=s(Bs);Ece=n(kR,"STRONG",{});var $2t=s(Ece);wuo=r($2t,"mvp"),$2t.forEach(t),Auo=r(kR," \u2014 "),uq=n(kR,"A",{href:!0});var k2t=s(uq);Luo=r(k2t,"MvpTokenizer"),k2t.forEach(t),yuo=r(kR," or "),bq=n(kR,"A",{href:!0});var S2t=s(bq);xuo=r(S2t,"MvpTokenizerFast"),S2t.forEach(t),$uo=r(kR," (MVP model)"),kR.forEach(t),kuo=i(S),Is=n(S,"LI",{});var SR=s(Is);Cce=n(SR,"STRONG",{});var R2t=s(Cce);Suo=r(R2t,"nezha"),R2t.forEach(t),Ruo=r(SR," \u2014 "),vq=n(SR,"A",{href:!0});var P2t=s(vq);Puo=r(P2t,"BertTokenizer"),P2t.forEach(t),Buo=r(SR," or "),Fq=n(SR,"A",{href:!0});var B2t=s(Fq);Iuo=r(B2t,"BertTokenizerFast"),B2t.forEach(t),Nuo=r(SR," (Nezha model)"),SR.forEach(t),quo=i(S),Ns=n(S,"LI",{});var RR=s(Ns);wce=n(RR,"STRONG",{});var I2t=s(wce);juo=r(I2t,"nllb"),I2t.forEach(t),Duo=r(RR," \u2014 "),Tq=n(RR,"A",{href:!0});var N2t=s(Tq);Guo=r(N2t,"NllbTokenizer"),N2t.forEach(t),Ouo=r(RR," or "),Mq=n(RR,"A",{href:!0});var q2t=s(Mq);Vuo=r(q2t,"NllbTokenizerFast"),q2t.forEach(t),Xuo=r(RR," (NLLB model)"),RR.forEach(t),zuo=i(S),qs=n(S,"LI",{});var PR=s(qs);Ace=n(PR,"STRONG",{});var j2t=s(Ace);Wuo=r(j2t,"nystromformer"),j2t.forEach(t),Quo=r(PR," \u2014 "),Eq=n(PR,"A",{href:!0});var D2t=s(Eq);Uuo=r(D2t,"AlbertTokenizer"),D2t.forEach(t),Huo=r(PR," or "),Cq=n(PR,"A",{href:!0});var G2t=s(Cq);Juo=r(G2t,"AlbertTokenizerFast"),G2t.forEach(t),Yuo=r(PR," (Nystr\xF6mformer model)"),PR.forEach(t),Kuo=i(S),js=n(S,"LI",{});var BR=s(js);Lce=n(BR,"STRONG",{});var O2t=s(Lce);Zuo=r(O2t,"openai-gpt"),O2t.forEach(t),e2o=r(BR," \u2014 "),wq=n(BR,"A",{href:!0});var V2t=s(wq);o2o=r(V2t,"OpenAIGPTTokenizer"),V2t.forEach(t),r2o=r(BR," or "),Aq=n(BR,"A",{href:!0});var X2t=s(Aq);t2o=r(X2t,"OpenAIGPTTokenizerFast"),X2t.forEach(t),a2o=r(BR," (OpenAI GPT model)"),BR.forEach(t),n2o=i(S),Gh=n(S,"LI",{});var oke=s(Gh);yce=n(oke,"STRONG",{});var z2t=s(yce);s2o=r(z2t,"opt"),z2t.forEach(t),l2o=r(oke," \u2014 "),Lq=n(oke,"A",{href:!0});var W2t=s(Lq);i2o=r(W2t,"GPT2Tokenizer"),W2t.forEach(t),d2o=r(oke," (OPT model)"),oke.forEach(t),c2o=i(S),Ds=n(S,"LI",{});var IR=s(Ds);xce=n(IR,"STRONG",{});var Q2t=s(xce);f2o=r(Q2t,"owlvit"),Q2t.forEach(t),m2o=r(IR," \u2014 "),yq=n(IR,"A",{href:!0});var U2t=s(yq);g2o=r(U2t,"CLIPTokenizer"),U2t.forEach(t),h2o=r(IR," or "),xq=n(IR,"A",{href:!0});var H2t=s(xq);p2o=r(H2t,"CLIPTokenizerFast"),H2t.forEach(t),_2o=r(IR," (OWL-ViT model)"),IR.forEach(t),u2o=i(S),Gs=n(S,"LI",{});var NR=s(Gs);$ce=n(NR,"STRONG",{});var J2t=s($ce);b2o=r(J2t,"pegasus"),J2t.forEach(t),v2o=r(NR," \u2014 "),$q=n(NR,"A",{href:!0});var Y2t=s($q);F2o=r(Y2t,"PegasusTokenizer"),Y2t.forEach(t),T2o=r(NR," or "),kq=n(NR,"A",{href:!0});var K2t=s(kq);M2o=r(K2t,"PegasusTokenizerFast"),K2t.forEach(t),E2o=r(NR," (Pegasus model)"),NR.forEach(t),C2o=i(S),Oh=n(S,"LI",{});var rke=s(Oh);kce=n(rke,"STRONG",{});var Z2t=s(kce);w2o=r(Z2t,"perceiver"),Z2t.forEach(t),A2o=r(rke," \u2014 "),Sq=n(rke,"A",{href:!0});var e0t=s(Sq);L2o=r(e0t,"PerceiverTokenizer"),e0t.forEach(t),y2o=r(rke," (Perceiver model)"),rke.forEach(t),x2o=i(S),Vh=n(S,"LI",{});var tke=s(Vh);Sce=n(tke,"STRONG",{});var o0t=s(Sce);$2o=r(o0t,"phobert"),o0t.forEach(t),k2o=r(tke," \u2014 "),Rq=n(tke,"A",{href:!0});var r0t=s(Rq);S2o=r(r0t,"PhobertTokenizer"),r0t.forEach(t),R2o=r(tke," (PhoBERT model)"),tke.forEach(t),P2o=i(S),Xh=n(S,"LI",{});var ake=s(Xh);Rce=n(ake,"STRONG",{});var t0t=s(Rce);B2o=r(t0t,"plbart"),t0t.forEach(t),I2o=r(ake," \u2014 "),Pq=n(ake,"A",{href:!0});var a0t=s(Pq);N2o=r(a0t,"PLBartTokenizer"),a0t.forEach(t),q2o=r(ake," (PLBart model)"),ake.forEach(t),j2o=i(S),zh=n(S,"LI",{});var nke=s(zh);Pce=n(nke,"STRONG",{});var n0t=s(Pce);D2o=r(n0t,"prophetnet"),n0t.forEach(t),G2o=r(nke," \u2014 "),Bq=n(nke,"A",{href:!0});var s0t=s(Bq);O2o=r(s0t,"ProphetNetTokenizer"),s0t.forEach(t),V2o=r(nke," (ProphetNet model)"),nke.forEach(t),X2o=i(S),Os=n(S,"LI",{});var qR=s(Os);Bce=n(qR,"STRONG",{});var l0t=s(Bce);z2o=r(l0t,"qdqbert"),l0t.forEach(t),W2o=r(qR," \u2014 "),Iq=n(qR,"A",{href:!0});var i0t=s(Iq);Q2o=r(i0t,"BertTokenizer"),i0t.forEach(t),U2o=r(qR," or "),Nq=n(qR,"A",{href:!0});var d0t=s(Nq);H2o=r(d0t,"BertTokenizerFast"),d0t.forEach(t),J2o=r(qR," (QDQBert model)"),qR.forEach(t),Y2o=i(S),Wh=n(S,"LI",{});var ske=s(Wh);Ice=n(ske,"STRONG",{});var c0t=s(Ice);K2o=r(c0t,"rag"),c0t.forEach(t),Z2o=r(ske," \u2014 "),qq=n(ske,"A",{href:!0});var f0t=s(qq);e0o=r(f0t,"RagTokenizer"),f0t.forEach(t),o0o=r(ske," (RAG model)"),ske.forEach(t),r0o=i(S),Vs=n(S,"LI",{});var jR=s(Vs);Nce=n(jR,"STRONG",{});var m0t=s(Nce);t0o=r(m0t,"realm"),m0t.forEach(t),a0o=r(jR," \u2014 "),jq=n(jR,"A",{href:!0});var g0t=s(jq);n0o=r(g0t,"RealmTokenizer"),g0t.forEach(t),s0o=r(jR," or "),Dq=n(jR,"A",{href:!0});var h0t=s(Dq);l0o=r(h0t,"RealmTokenizerFast"),h0t.forEach(t),i0o=r(jR," (REALM model)"),jR.forEach(t),d0o=i(S),Xs=n(S,"LI",{});var DR=s(Xs);qce=n(DR,"STRONG",{});var p0t=s(qce);c0o=r(p0t,"reformer"),p0t.forEach(t),f0o=r(DR," \u2014 "),Gq=n(DR,"A",{href:!0});var _0t=s(Gq);m0o=r(_0t,"ReformerTokenizer"),_0t.forEach(t),g0o=r(DR," or "),Oq=n(DR,"A",{href:!0});var u0t=s(Oq);h0o=r(u0t,"ReformerTokenizerFast"),u0t.forEach(t),p0o=r(DR," (Reformer model)"),DR.forEach(t),_0o=i(S),zs=n(S,"LI",{});var GR=s(zs);jce=n(GR,"STRONG",{});var b0t=s(jce);u0o=r(b0t,"rembert"),b0t.forEach(t),b0o=r(GR," \u2014 "),Vq=n(GR,"A",{href:!0});var v0t=s(Vq);v0o=r(v0t,"RemBertTokenizer"),v0t.forEach(t),F0o=r(GR," or "),Xq=n(GR,"A",{href:!0});var F0t=s(Xq);T0o=r(F0t,"RemBertTokenizerFast"),F0t.forEach(t),M0o=r(GR," (RemBERT model)"),GR.forEach(t),E0o=i(S),Ws=n(S,"LI",{});var OR=s(Ws);Dce=n(OR,"STRONG",{});var T0t=s(Dce);C0o=r(T0t,"retribert"),T0t.forEach(t),w0o=r(OR," \u2014 "),zq=n(OR,"A",{href:!0});var M0t=s(zq);A0o=r(M0t,"RetriBertTokenizer"),M0t.forEach(t),L0o=r(OR," or "),Wq=n(OR,"A",{href:!0});var E0t=s(Wq);y0o=r(E0t,"RetriBertTokenizerFast"),E0t.forEach(t),x0o=r(OR," (RetriBERT model)"),OR.forEach(t),$0o=i(S),Qs=n(S,"LI",{});var VR=s(Qs);Gce=n(VR,"STRONG",{});var C0t=s(Gce);k0o=r(C0t,"roberta"),C0t.forEach(t),S0o=r(VR," \u2014 "),Qq=n(VR,"A",{href:!0});var w0t=s(Qq);R0o=r(w0t,"RobertaTokenizer"),w0t.forEach(t),P0o=r(VR," or "),Uq=n(VR,"A",{href:!0});var A0t=s(Uq);B0o=r(A0t,"RobertaTokenizerFast"),A0t.forEach(t),I0o=r(VR," (RoBERTa model)"),VR.forEach(t),N0o=i(S),Us=n(S,"LI",{});var XR=s(Us);Oce=n(XR,"STRONG",{});var L0t=s(Oce);q0o=r(L0t,"roformer"),L0t.forEach(t),j0o=r(XR," \u2014 "),Hq=n(XR,"A",{href:!0});var y0t=s(Hq);D0o=r(y0t,"RoFormerTokenizer"),y0t.forEach(t),G0o=r(XR," or "),Jq=n(XR,"A",{href:!0});var x0t=s(Jq);O0o=r(x0t,"RoFormerTokenizerFast"),x0t.forEach(t),V0o=r(XR," (RoFormer model)"),XR.forEach(t),X0o=i(S),Qh=n(S,"LI",{});var lke=s(Qh);Vce=n(lke,"STRONG",{});var $0t=s(Vce);z0o=r($0t,"speech_to_text"),$0t.forEach(t),W0o=r(lke," \u2014 "),Yq=n(lke,"A",{href:!0});var k0t=s(Yq);Q0o=r(k0t,"Speech2TextTokenizer"),k0t.forEach(t),U0o=r(lke," (Speech2Text model)"),lke.forEach(t),H0o=i(S),Uh=n(S,"LI",{});var ike=s(Uh);Xce=n(ike,"STRONG",{});var S0t=s(Xce);J0o=r(S0t,"speech_to_text_2"),S0t.forEach(t),Y0o=r(ike," \u2014 "),Kq=n(ike,"A",{href:!0});var R0t=s(Kq);K0o=r(R0t,"Speech2Text2Tokenizer"),R0t.forEach(t),Z0o=r(ike," (Speech2Text2 model)"),ike.forEach(t),e1o=i(S),Hs=n(S,"LI",{});var zR=s(Hs);zce=n(zR,"STRONG",{});var P0t=s(zce);o1o=r(P0t,"splinter"),P0t.forEach(t),r1o=r(zR," \u2014 "),Zq=n(zR,"A",{href:!0});var B0t=s(Zq);t1o=r(B0t,"SplinterTokenizer"),B0t.forEach(t),a1o=r(zR," or "),ej=n(zR,"A",{href:!0});var I0t=s(ej);n1o=r(I0t,"SplinterTokenizerFast"),I0t.forEach(t),s1o=r(zR," (Splinter model)"),zR.forEach(t),l1o=i(S),Js=n(S,"LI",{});var WR=s(Js);Wce=n(WR,"STRONG",{});var N0t=s(Wce);i1o=r(N0t,"squeezebert"),N0t.forEach(t),d1o=r(WR," \u2014 "),oj=n(WR,"A",{href:!0});var q0t=s(oj);c1o=r(q0t,"SqueezeBertTokenizer"),q0t.forEach(t),f1o=r(WR," or "),rj=n(WR,"A",{href:!0});var j0t=s(rj);m1o=r(j0t,"SqueezeBertTokenizerFast"),j0t.forEach(t),g1o=r(WR," (SqueezeBERT model)"),WR.forEach(t),h1o=i(S),Ys=n(S,"LI",{});var QR=s(Ys);Qce=n(QR,"STRONG",{});var D0t=s(Qce);p1o=r(D0t,"t5"),D0t.forEach(t),_1o=r(QR," \u2014 "),tj=n(QR,"A",{href:!0});var G0t=s(tj);u1o=r(G0t,"T5Tokenizer"),G0t.forEach(t),b1o=r(QR," or "),aj=n(QR,"A",{href:!0});var O0t=s(aj);v1o=r(O0t,"T5TokenizerFast"),O0t.forEach(t),F1o=r(QR," (T5 model)"),QR.forEach(t),T1o=i(S),Hh=n(S,"LI",{});var dke=s(Hh);Uce=n(dke,"STRONG",{});var V0t=s(Uce);M1o=r(V0t,"tapas"),V0t.forEach(t),E1o=r(dke," \u2014 "),nj=n(dke,"A",{href:!0});var X0t=s(nj);C1o=r(X0t,"TapasTokenizer"),X0t.forEach(t),w1o=r(dke," (TAPAS model)"),dke.forEach(t),A1o=i(S),Jh=n(S,"LI",{});var cke=s(Jh);Hce=n(cke,"STRONG",{});var z0t=s(Hce);L1o=r(z0t,"tapex"),z0t.forEach(t),y1o=r(cke," \u2014 "),sj=n(cke,"A",{href:!0});var W0t=s(sj);x1o=r(W0t,"TapexTokenizer"),W0t.forEach(t),$1o=r(cke," (TAPEX model)"),cke.forEach(t),k1o=i(S),Yh=n(S,"LI",{});var fke=s(Yh);Jce=n(fke,"STRONG",{});var Q0t=s(Jce);S1o=r(Q0t,"transfo-xl"),Q0t.forEach(t),R1o=r(fke," \u2014 "),lj=n(fke,"A",{href:!0});var U0t=s(lj);P1o=r(U0t,"TransfoXLTokenizer"),U0t.forEach(t),B1o=r(fke," (Transformer-XL model)"),fke.forEach(t),I1o=i(S),Ks=n(S,"LI",{});var UR=s(Ks);Yce=n(UR,"STRONG",{});var H0t=s(Yce);N1o=r(H0t,"vilt"),H0t.forEach(t),q1o=r(UR," \u2014 "),ij=n(UR,"A",{href:!0});var J0t=s(ij);j1o=r(J0t,"BertTokenizer"),J0t.forEach(t),D1o=r(UR," or "),dj=n(UR,"A",{href:!0});var Y0t=s(dj);G1o=r(Y0t,"BertTokenizerFast"),Y0t.forEach(t),O1o=r(UR," (ViLT model)"),UR.forEach(t),V1o=i(S),Zs=n(S,"LI",{});var HR=s(Zs);Kce=n(HR,"STRONG",{});var K0t=s(Kce);X1o=r(K0t,"visual_bert"),K0t.forEach(t),z1o=r(HR," \u2014 "),cj=n(HR,"A",{href:!0});var Z0t=s(cj);W1o=r(Z0t,"BertTokenizer"),Z0t.forEach(t),Q1o=r(HR," or "),fj=n(HR,"A",{href:!0});var e1t=s(fj);U1o=r(e1t,"BertTokenizerFast"),e1t.forEach(t),H1o=r(HR," (VisualBERT model)"),HR.forEach(t),J1o=i(S),Kh=n(S,"LI",{});var mke=s(Kh);Zce=n(mke,"STRONG",{});var o1t=s(Zce);Y1o=r(o1t,"wav2vec2"),o1t.forEach(t),K1o=r(mke," \u2014 "),mj=n(mke,"A",{href:!0});var r1t=s(mj);Z1o=r(r1t,"Wav2Vec2CTCTokenizer"),r1t.forEach(t),ebo=r(mke," (Wav2Vec2 model)"),mke.forEach(t),obo=i(S),Zh=n(S,"LI",{});var gke=s(Zh);efe=n(gke,"STRONG",{});var t1t=s(efe);rbo=r(t1t,"wav2vec2-conformer"),t1t.forEach(t),tbo=r(gke," \u2014 "),gj=n(gke,"A",{href:!0});var a1t=s(gj);abo=r(a1t,"Wav2Vec2CTCTokenizer"),a1t.forEach(t),nbo=r(gke," (Wav2Vec2-Conformer model)"),gke.forEach(t),sbo=i(S),ep=n(S,"LI",{});var hke=s(ep);ofe=n(hke,"STRONG",{});var n1t=s(ofe);lbo=r(n1t,"wav2vec2_phoneme"),n1t.forEach(t),ibo=r(hke," \u2014 "),hj=n(hke,"A",{href:!0});var s1t=s(hj);dbo=r(s1t,"Wav2Vec2PhonemeCTCTokenizer"),s1t.forEach(t),cbo=r(hke," (Wav2Vec2Phoneme model)"),hke.forEach(t),fbo=i(S),el=n(S,"LI",{});var JR=s(el);rfe=n(JR,"STRONG",{});var l1t=s(rfe);mbo=r(l1t,"xglm"),l1t.forEach(t),gbo=r(JR," \u2014 "),pj=n(JR,"A",{href:!0});var i1t=s(pj);hbo=r(i1t,"XGLMTokenizer"),i1t.forEach(t),pbo=r(JR," or "),_j=n(JR,"A",{href:!0});var d1t=s(_j);_bo=r(d1t,"XGLMTokenizerFast"),d1t.forEach(t),ubo=r(JR," (XGLM model)"),JR.forEach(t),bbo=i(S),op=n(S,"LI",{});var pke=s(op);tfe=n(pke,"STRONG",{});var c1t=s(tfe);vbo=r(c1t,"xlm"),c1t.forEach(t),Fbo=r(pke," \u2014 "),uj=n(pke,"A",{href:!0});var f1t=s(uj);Tbo=r(f1t,"XLMTokenizer"),f1t.forEach(t),Mbo=r(pke," (XLM model)"),pke.forEach(t),Ebo=i(S),rp=n(S,"LI",{});var _ke=s(rp);afe=n(_ke,"STRONG",{});var m1t=s(afe);Cbo=r(m1t,"xlm-prophetnet"),m1t.forEach(t),wbo=r(_ke," \u2014 "),bj=n(_ke,"A",{href:!0});var g1t=s(bj);Abo=r(g1t,"XLMProphetNetTokenizer"),g1t.forEach(t),Lbo=r(_ke," (XLM-ProphetNet model)"),_ke.forEach(t),ybo=i(S),ol=n(S,"LI",{});var YR=s(ol);nfe=n(YR,"STRONG",{});var h1t=s(nfe);xbo=r(h1t,"xlm-roberta"),h1t.forEach(t),$bo=r(YR," \u2014 "),vj=n(YR,"A",{href:!0});var p1t=s(vj);kbo=r(p1t,"XLMRobertaTokenizer"),p1t.forEach(t),Sbo=r(YR," or "),Fj=n(YR,"A",{href:!0});var _1t=s(Fj);Rbo=r(_1t,"XLMRobertaTokenizerFast"),_1t.forEach(t),Pbo=r(YR," (XLM-RoBERTa model)"),YR.forEach(t),Bbo=i(S),rl=n(S,"LI",{});var KR=s(rl);sfe=n(KR,"STRONG",{});var u1t=s(sfe);Ibo=r(u1t,"xlm-roberta-xl"),u1t.forEach(t),Nbo=r(KR," \u2014 "),Tj=n(KR,"A",{href:!0});var b1t=s(Tj);qbo=r(b1t,"RobertaTokenizer"),b1t.forEach(t),jbo=r(KR," or "),Mj=n(KR,"A",{href:!0});var v1t=s(Mj);Dbo=r(v1t,"RobertaTokenizerFast"),v1t.forEach(t),Gbo=r(KR," (XLM-RoBERTa-XL model)"),KR.forEach(t),Obo=i(S),tl=n(S,"LI",{});var ZR=s(tl);lfe=n(ZR,"STRONG",{});var F1t=s(lfe);Vbo=r(F1t,"xlnet"),F1t.forEach(t),Xbo=r(ZR," \u2014 "),Ej=n(ZR,"A",{href:!0});var T1t=s(Ej);zbo=r(T1t,"XLNetTokenizer"),T1t.forEach(t),Wbo=r(ZR," or "),Cj=n(ZR,"A",{href:!0});var M1t=s(Cj);Qbo=r(M1t,"XLNetTokenizerFast"),M1t.forEach(t),Ubo=r(ZR," (XLNet model)"),ZR.forEach(t),Hbo=i(S),al=n(S,"LI",{});var eP=s(al);ife=n(eP,"STRONG",{});var E1t=s(ife);Jbo=r(E1t,"yoso"),E1t.forEach(t),Ybo=r(eP," \u2014 "),wj=n(eP,"A",{href:!0});var C1t=s(wj);Kbo=r(C1t,"AlbertTokenizer"),C1t.forEach(t),Zbo=r(eP," or "),Aj=n(eP,"A",{href:!0});var w1t=s(Aj);evo=r(w1t,"AlbertTokenizerFast"),w1t.forEach(t),ovo=r(eP," (YOSO model)"),eP.forEach(t),S.forEach(t),rvo=i(fl),T(tp.$$.fragment,fl),fl.forEach(t),tvo=i(cl),ap=n(cl,"DIV",{class:!0});var mJe=s(ap);T(xy.$$.fragment,mJe),avo=i(mJe),dfe=n(mJe,"P",{});var A1t=s(dfe);nvo=r(A1t,"Register a new tokenizer in this mapping."),A1t.forEach(t),mJe.forEach(t),cl.forEach(t),lUe=i(f),Zi=n(f,"H2",{class:!0});var gJe=s(Zi);np=n(gJe,"A",{id:!0,class:!0,href:!0});var L1t=s(np);cfe=n(L1t,"SPAN",{});var y1t=s(cfe);T($y.$$.fragment,y1t),y1t.forEach(t),L1t.forEach(t),svo=i(gJe),ffe=n(gJe,"SPAN",{});var x1t=s(ffe);lvo=r(x1t,"AutoFeatureExtractor"),x1t.forEach(t),gJe.forEach(t),iUe=i(f),$o=n(f,"DIV",{class:!0});var ml=s($o);T(ky.$$.fragment,ml),ivo=i(ml),Sy=n(ml,"P",{});var hJe=s(Sy);dvo=r(hJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Lj=n(hJe,"A",{href:!0});var $1t=s(Lj);cvo=r($1t,"AutoFeatureExtractor.from_pretrained()"),$1t.forEach(t),fvo=r(hJe," class method."),hJe.forEach(t),mvo=i(ml),Ry=n(ml,"P",{});var pJe=s(Ry);gvo=r(pJe,"This class cannot be instantiated directly using "),mfe=n(pJe,"CODE",{});var k1t=s(mfe);hvo=r(k1t,"__init__()"),k1t.forEach(t),pvo=r(pJe," (throws an error)."),pJe.forEach(t),_vo=i(ml),He=n(ml,"DIV",{class:!0});var fa=s(He);T(Py.$$.fragment,fa),uvo=i(fa),gfe=n(fa,"P",{});var S1t=s(gfe);bvo=r(S1t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),S1t.forEach(t),vvo=i(fa),Oa=n(fa,"P",{});var h7=s(Oa);Fvo=r(h7,"The feature extractor class to instantiate is selected based on the "),hfe=n(h7,"CODE",{});var R1t=s(hfe);Tvo=r(R1t,"model_type"),R1t.forEach(t),Mvo=r(h7,` property of the config object
(either passed as an argument or loaded from `),pfe=n(h7,"CODE",{});var P1t=s(pfe);Evo=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),Cvo=r(h7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),_fe=n(h7,"CODE",{});var B1t=s(_fe);wvo=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),Avo=r(h7,":"),h7.forEach(t),Lvo=i(fa),Q=n(fa,"UL",{});var J=s(Q);sp=n(J,"LI",{});var uke=s(sp);ufe=n(uke,"STRONG",{});var I1t=s(ufe);yvo=r(I1t,"beit"),I1t.forEach(t),xvo=r(uke," \u2014 "),yj=n(uke,"A",{href:!0});var N1t=s(yj);$vo=r(N1t,"BeitFeatureExtractor"),N1t.forEach(t),kvo=r(uke," (BEiT model)"),uke.forEach(t),Svo=i(J),lp=n(J,"LI",{});var bke=s(lp);bfe=n(bke,"STRONG",{});var q1t=s(bfe);Rvo=r(q1t,"clip"),q1t.forEach(t),Pvo=r(bke," \u2014 "),xj=n(bke,"A",{href:!0});var j1t=s(xj);Bvo=r(j1t,"CLIPFeatureExtractor"),j1t.forEach(t),Ivo=r(bke," (CLIP model)"),bke.forEach(t),Nvo=i(J),ip=n(J,"LI",{});var vke=s(ip);vfe=n(vke,"STRONG",{});var D1t=s(vfe);qvo=r(D1t,"convnext"),D1t.forEach(t),jvo=r(vke," \u2014 "),$j=n(vke,"A",{href:!0});var G1t=s($j);Dvo=r(G1t,"ConvNextFeatureExtractor"),G1t.forEach(t),Gvo=r(vke," (ConvNeXT model)"),vke.forEach(t),Ovo=i(J),dp=n(J,"LI",{});var Fke=s(dp);Ffe=n(Fke,"STRONG",{});var O1t=s(Ffe);Vvo=r(O1t,"cvt"),O1t.forEach(t),Xvo=r(Fke," \u2014 "),kj=n(Fke,"A",{href:!0});var V1t=s(kj);zvo=r(V1t,"ConvNextFeatureExtractor"),V1t.forEach(t),Wvo=r(Fke," (CvT model)"),Fke.forEach(t),Qvo=i(J),cp=n(J,"LI",{});var Tke=s(cp);Tfe=n(Tke,"STRONG",{});var X1t=s(Tfe);Uvo=r(X1t,"data2vec-audio"),X1t.forEach(t),Hvo=r(Tke," \u2014 "),Sj=n(Tke,"A",{href:!0});var z1t=s(Sj);Jvo=r(z1t,"Wav2Vec2FeatureExtractor"),z1t.forEach(t),Yvo=r(Tke," (Data2VecAudio model)"),Tke.forEach(t),Kvo=i(J),fp=n(J,"LI",{});var Mke=s(fp);Mfe=n(Mke,"STRONG",{});var W1t=s(Mfe);Zvo=r(W1t,"data2vec-vision"),W1t.forEach(t),eFo=r(Mke," \u2014 "),Rj=n(Mke,"A",{href:!0});var Q1t=s(Rj);oFo=r(Q1t,"BeitFeatureExtractor"),Q1t.forEach(t),rFo=r(Mke," (Data2VecVision model)"),Mke.forEach(t),tFo=i(J),mp=n(J,"LI",{});var Eke=s(mp);Efe=n(Eke,"STRONG",{});var U1t=s(Efe);aFo=r(U1t,"deit"),U1t.forEach(t),nFo=r(Eke," \u2014 "),Pj=n(Eke,"A",{href:!0});var H1t=s(Pj);sFo=r(H1t,"DeiTFeatureExtractor"),H1t.forEach(t),lFo=r(Eke," (DeiT model)"),Eke.forEach(t),iFo=i(J),gp=n(J,"LI",{});var Cke=s(gp);Cfe=n(Cke,"STRONG",{});var J1t=s(Cfe);dFo=r(J1t,"detr"),J1t.forEach(t),cFo=r(Cke," \u2014 "),Bj=n(Cke,"A",{href:!0});var Y1t=s(Bj);fFo=r(Y1t,"DetrFeatureExtractor"),Y1t.forEach(t),mFo=r(Cke," (DETR model)"),Cke.forEach(t),gFo=i(J),hp=n(J,"LI",{});var wke=s(hp);wfe=n(wke,"STRONG",{});var K1t=s(wfe);hFo=r(K1t,"donut"),K1t.forEach(t),pFo=r(wke," \u2014 "),Ij=n(wke,"A",{href:!0});var Z1t=s(Ij);_Fo=r(Z1t,"DonutFeatureExtractor"),Z1t.forEach(t),uFo=r(wke," (Donut model)"),wke.forEach(t),bFo=i(J),pp=n(J,"LI",{});var Ake=s(pp);Afe=n(Ake,"STRONG",{});var ebt=s(Afe);vFo=r(ebt,"dpt"),ebt.forEach(t),FFo=r(Ake," \u2014 "),Nj=n(Ake,"A",{href:!0});var obt=s(Nj);TFo=r(obt,"DPTFeatureExtractor"),obt.forEach(t),MFo=r(Ake," (DPT model)"),Ake.forEach(t),EFo=i(J),_p=n(J,"LI",{});var Lke=s(_p);Lfe=n(Lke,"STRONG",{});var rbt=s(Lfe);CFo=r(rbt,"flava"),rbt.forEach(t),wFo=r(Lke," \u2014 "),qj=n(Lke,"A",{href:!0});var tbt=s(qj);AFo=r(tbt,"FlavaFeatureExtractor"),tbt.forEach(t),LFo=r(Lke," (FLAVA model)"),Lke.forEach(t),yFo=i(J),up=n(J,"LI",{});var yke=s(up);yfe=n(yke,"STRONG",{});var abt=s(yfe);xFo=r(abt,"glpn"),abt.forEach(t),$Fo=r(yke," \u2014 "),jj=n(yke,"A",{href:!0});var nbt=s(jj);kFo=r(nbt,"GLPNFeatureExtractor"),nbt.forEach(t),SFo=r(yke," (GLPN model)"),yke.forEach(t),RFo=i(J),bp=n(J,"LI",{});var xke=s(bp);xfe=n(xke,"STRONG",{});var sbt=s(xfe);PFo=r(sbt,"groupvit"),sbt.forEach(t),BFo=r(xke," \u2014 "),Dj=n(xke,"A",{href:!0});var lbt=s(Dj);IFo=r(lbt,"CLIPFeatureExtractor"),lbt.forEach(t),NFo=r(xke," (GroupViT model)"),xke.forEach(t),qFo=i(J),vp=n(J,"LI",{});var $ke=s(vp);$fe=n($ke,"STRONG",{});var ibt=s($fe);jFo=r(ibt,"hubert"),ibt.forEach(t),DFo=r($ke," \u2014 "),Gj=n($ke,"A",{href:!0});var dbt=s(Gj);GFo=r(dbt,"Wav2Vec2FeatureExtractor"),dbt.forEach(t),OFo=r($ke," (Hubert model)"),$ke.forEach(t),VFo=i(J),Fp=n(J,"LI",{});var kke=s(Fp);kfe=n(kke,"STRONG",{});var cbt=s(kfe);XFo=r(cbt,"imagegpt"),cbt.forEach(t),zFo=r(kke," \u2014 "),Oj=n(kke,"A",{href:!0});var fbt=s(Oj);WFo=r(fbt,"ImageGPTFeatureExtractor"),fbt.forEach(t),QFo=r(kke," (ImageGPT model)"),kke.forEach(t),UFo=i(J),Tp=n(J,"LI",{});var Ske=s(Tp);Sfe=n(Ske,"STRONG",{});var mbt=s(Sfe);HFo=r(mbt,"layoutlmv2"),mbt.forEach(t),JFo=r(Ske," \u2014 "),Vj=n(Ske,"A",{href:!0});var gbt=s(Vj);YFo=r(gbt,"LayoutLMv2FeatureExtractor"),gbt.forEach(t),KFo=r(Ske," (LayoutLMv2 model)"),Ske.forEach(t),ZFo=i(J),Mp=n(J,"LI",{});var Rke=s(Mp);Rfe=n(Rke,"STRONG",{});var hbt=s(Rfe);eTo=r(hbt,"layoutlmv3"),hbt.forEach(t),oTo=r(Rke," \u2014 "),Xj=n(Rke,"A",{href:!0});var pbt=s(Xj);rTo=r(pbt,"LayoutLMv3FeatureExtractor"),pbt.forEach(t),tTo=r(Rke," (LayoutLMv3 model)"),Rke.forEach(t),aTo=i(J),Ep=n(J,"LI",{});var Pke=s(Ep);Pfe=n(Pke,"STRONG",{});var _bt=s(Pfe);nTo=r(_bt,"levit"),_bt.forEach(t),sTo=r(Pke," \u2014 "),zj=n(Pke,"A",{href:!0});var ubt=s(zj);lTo=r(ubt,"LevitFeatureExtractor"),ubt.forEach(t),iTo=r(Pke," (LeViT model)"),Pke.forEach(t),dTo=i(J),Cp=n(J,"LI",{});var Bke=s(Cp);Bfe=n(Bke,"STRONG",{});var bbt=s(Bfe);cTo=r(bbt,"maskformer"),bbt.forEach(t),fTo=r(Bke," \u2014 "),Wj=n(Bke,"A",{href:!0});var vbt=s(Wj);mTo=r(vbt,"MaskFormerFeatureExtractor"),vbt.forEach(t),gTo=r(Bke," (MaskFormer model)"),Bke.forEach(t),hTo=i(J),wp=n(J,"LI",{});var Ike=s(wp);Ife=n(Ike,"STRONG",{});var Fbt=s(Ife);pTo=r(Fbt,"mctct"),Fbt.forEach(t),_To=r(Ike," \u2014 "),Qj=n(Ike,"A",{href:!0});var Tbt=s(Qj);uTo=r(Tbt,"MCTCTFeatureExtractor"),Tbt.forEach(t),bTo=r(Ike," (M-CTC-T model)"),Ike.forEach(t),vTo=i(J),Ap=n(J,"LI",{});var Nke=s(Ap);Nfe=n(Nke,"STRONG",{});var Mbt=s(Nfe);FTo=r(Mbt,"mobilevit"),Mbt.forEach(t),TTo=r(Nke," \u2014 "),Uj=n(Nke,"A",{href:!0});var Ebt=s(Uj);MTo=r(Ebt,"MobileViTFeatureExtractor"),Ebt.forEach(t),ETo=r(Nke," (MobileViT model)"),Nke.forEach(t),CTo=i(J),Lp=n(J,"LI",{});var qke=s(Lp);qfe=n(qke,"STRONG",{});var Cbt=s(qfe);wTo=r(Cbt,"owlvit"),Cbt.forEach(t),ATo=r(qke," \u2014 "),Hj=n(qke,"A",{href:!0});var wbt=s(Hj);LTo=r(wbt,"OwlViTFeatureExtractor"),wbt.forEach(t),yTo=r(qke," (OWL-ViT model)"),qke.forEach(t),xTo=i(J),yp=n(J,"LI",{});var jke=s(yp);jfe=n(jke,"STRONG",{});var Abt=s(jfe);$To=r(Abt,"perceiver"),Abt.forEach(t),kTo=r(jke," \u2014 "),Jj=n(jke,"A",{href:!0});var Lbt=s(Jj);STo=r(Lbt,"PerceiverFeatureExtractor"),Lbt.forEach(t),RTo=r(jke," (Perceiver model)"),jke.forEach(t),PTo=i(J),xp=n(J,"LI",{});var Dke=s(xp);Dfe=n(Dke,"STRONG",{});var ybt=s(Dfe);BTo=r(ybt,"poolformer"),ybt.forEach(t),ITo=r(Dke," \u2014 "),Yj=n(Dke,"A",{href:!0});var xbt=s(Yj);NTo=r(xbt,"PoolFormerFeatureExtractor"),xbt.forEach(t),qTo=r(Dke," (PoolFormer model)"),Dke.forEach(t),jTo=i(J),$p=n(J,"LI",{});var Gke=s($p);Gfe=n(Gke,"STRONG",{});var $bt=s(Gfe);DTo=r($bt,"regnet"),$bt.forEach(t),GTo=r(Gke," \u2014 "),Kj=n(Gke,"A",{href:!0});var kbt=s(Kj);OTo=r(kbt,"ConvNextFeatureExtractor"),kbt.forEach(t),VTo=r(Gke," (RegNet model)"),Gke.forEach(t),XTo=i(J),kp=n(J,"LI",{});var Oke=s(kp);Ofe=n(Oke,"STRONG",{});var Sbt=s(Ofe);zTo=r(Sbt,"resnet"),Sbt.forEach(t),WTo=r(Oke," \u2014 "),Zj=n(Oke,"A",{href:!0});var Rbt=s(Zj);QTo=r(Rbt,"ConvNextFeatureExtractor"),Rbt.forEach(t),UTo=r(Oke," (ResNet model)"),Oke.forEach(t),HTo=i(J),Sp=n(J,"LI",{});var Vke=s(Sp);Vfe=n(Vke,"STRONG",{});var Pbt=s(Vfe);JTo=r(Pbt,"segformer"),Pbt.forEach(t),YTo=r(Vke," \u2014 "),eD=n(Vke,"A",{href:!0});var Bbt=s(eD);KTo=r(Bbt,"SegformerFeatureExtractor"),Bbt.forEach(t),ZTo=r(Vke," (SegFormer model)"),Vke.forEach(t),e8o=i(J),Rp=n(J,"LI",{});var Xke=s(Rp);Xfe=n(Xke,"STRONG",{});var Ibt=s(Xfe);o8o=r(Ibt,"speech_to_text"),Ibt.forEach(t),r8o=r(Xke," \u2014 "),oD=n(Xke,"A",{href:!0});var Nbt=s(oD);t8o=r(Nbt,"Speech2TextFeatureExtractor"),Nbt.forEach(t),a8o=r(Xke," (Speech2Text model)"),Xke.forEach(t),n8o=i(J),Pp=n(J,"LI",{});var zke=s(Pp);zfe=n(zke,"STRONG",{});var qbt=s(zfe);s8o=r(qbt,"swin"),qbt.forEach(t),l8o=r(zke," \u2014 "),rD=n(zke,"A",{href:!0});var jbt=s(rD);i8o=r(jbt,"ViTFeatureExtractor"),jbt.forEach(t),d8o=r(zke," (Swin Transformer model)"),zke.forEach(t),c8o=i(J),Bp=n(J,"LI",{});var Wke=s(Bp);Wfe=n(Wke,"STRONG",{});var Dbt=s(Wfe);f8o=r(Dbt,"swinv2"),Dbt.forEach(t),m8o=r(Wke," \u2014 "),tD=n(Wke,"A",{href:!0});var Gbt=s(tD);g8o=r(Gbt,"ViTFeatureExtractor"),Gbt.forEach(t),h8o=r(Wke," (Swin Transformer V2 model)"),Wke.forEach(t),p8o=i(J),Ip=n(J,"LI",{});var Qke=s(Ip);Qfe=n(Qke,"STRONG",{});var Obt=s(Qfe);_8o=r(Obt,"van"),Obt.forEach(t),u8o=r(Qke," \u2014 "),aD=n(Qke,"A",{href:!0});var Vbt=s(aD);b8o=r(Vbt,"ConvNextFeatureExtractor"),Vbt.forEach(t),v8o=r(Qke," (VAN model)"),Qke.forEach(t),F8o=i(J),Np=n(J,"LI",{});var Uke=s(Np);Ufe=n(Uke,"STRONG",{});var Xbt=s(Ufe);T8o=r(Xbt,"videomae"),Xbt.forEach(t),M8o=r(Uke," \u2014 "),nD=n(Uke,"A",{href:!0});var zbt=s(nD);E8o=r(zbt,"ViTFeatureExtractor"),zbt.forEach(t),C8o=r(Uke," (VideoMAE model)"),Uke.forEach(t),w8o=i(J),qp=n(J,"LI",{});var Hke=s(qp);Hfe=n(Hke,"STRONG",{});var Wbt=s(Hfe);A8o=r(Wbt,"vilt"),Wbt.forEach(t),L8o=r(Hke," \u2014 "),sD=n(Hke,"A",{href:!0});var Qbt=s(sD);y8o=r(Qbt,"ViltFeatureExtractor"),Qbt.forEach(t),x8o=r(Hke," (ViLT model)"),Hke.forEach(t),$8o=i(J),jp=n(J,"LI",{});var Jke=s(jp);Jfe=n(Jke,"STRONG",{});var Ubt=s(Jfe);k8o=r(Ubt,"vit"),Ubt.forEach(t),S8o=r(Jke," \u2014 "),lD=n(Jke,"A",{href:!0});var Hbt=s(lD);R8o=r(Hbt,"ViTFeatureExtractor"),Hbt.forEach(t),P8o=r(Jke," (ViT model)"),Jke.forEach(t),B8o=i(J),Dp=n(J,"LI",{});var Yke=s(Dp);Yfe=n(Yke,"STRONG",{});var Jbt=s(Yfe);I8o=r(Jbt,"vit_mae"),Jbt.forEach(t),N8o=r(Yke," \u2014 "),iD=n(Yke,"A",{href:!0});var Ybt=s(iD);q8o=r(Ybt,"ViTFeatureExtractor"),Ybt.forEach(t),j8o=r(Yke," (ViTMAE model)"),Yke.forEach(t),D8o=i(J),Gp=n(J,"LI",{});var Kke=s(Gp);Kfe=n(Kke,"STRONG",{});var Kbt=s(Kfe);G8o=r(Kbt,"wav2vec2"),Kbt.forEach(t),O8o=r(Kke," \u2014 "),dD=n(Kke,"A",{href:!0});var Zbt=s(dD);V8o=r(Zbt,"Wav2Vec2FeatureExtractor"),Zbt.forEach(t),X8o=r(Kke," (Wav2Vec2 model)"),Kke.forEach(t),z8o=i(J),Op=n(J,"LI",{});var Zke=s(Op);Zfe=n(Zke,"STRONG",{});var evt=s(Zfe);W8o=r(evt,"wav2vec2-conformer"),evt.forEach(t),Q8o=r(Zke," \u2014 "),cD=n(Zke,"A",{href:!0});var ovt=s(cD);U8o=r(ovt,"Wav2Vec2FeatureExtractor"),ovt.forEach(t),H8o=r(Zke," (Wav2Vec2-Conformer model)"),Zke.forEach(t),J8o=i(J),Vp=n(J,"LI",{});var eSe=s(Vp);eme=n(eSe,"STRONG",{});var rvt=s(eme);Y8o=r(rvt,"yolos"),rvt.forEach(t),K8o=r(eSe," \u2014 "),fD=n(eSe,"A",{href:!0});var tvt=s(fD);Z8o=r(tvt,"YolosFeatureExtractor"),tvt.forEach(t),eMo=r(eSe," (YOLOS model)"),eSe.forEach(t),J.forEach(t),oMo=i(fa),T(Xp.$$.fragment,fa),rMo=i(fa),T(zp.$$.fragment,fa),fa.forEach(t),tMo=i(ml),Wp=n(ml,"DIV",{class:!0});var _Je=s(Wp);T(By.$$.fragment,_Je),aMo=i(_Je),ome=n(_Je,"P",{});var avt=s(ome);nMo=r(avt,"Register a new feature extractor for this class."),avt.forEach(t),_Je.forEach(t),ml.forEach(t),dUe=i(f),ed=n(f,"H2",{class:!0});var uJe=s(ed);Qp=n(uJe,"A",{id:!0,class:!0,href:!0});var nvt=s(Qp);rme=n(nvt,"SPAN",{});var svt=s(rme);T(Iy.$$.fragment,svt),svt.forEach(t),nvt.forEach(t),sMo=i(uJe),tme=n(uJe,"SPAN",{});var lvt=s(tme);lMo=r(lvt,"AutoProcessor"),lvt.forEach(t),uJe.forEach(t),cUe=i(f),ko=n(f,"DIV",{class:!0});var gl=s(ko);T(Ny.$$.fragment,gl),iMo=i(gl),qy=n(gl,"P",{});var bJe=s(qy);dMo=r(bJe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mD=n(bJe,"A",{href:!0});var ivt=s(mD);cMo=r(ivt,"AutoProcessor.from_pretrained()"),ivt.forEach(t),fMo=r(bJe," class method."),bJe.forEach(t),mMo=i(gl),jy=n(gl,"P",{});var vJe=s(jy);gMo=r(vJe,"This class cannot be instantiated directly using "),ame=n(vJe,"CODE",{});var dvt=s(ame);hMo=r(dvt,"__init__()"),dvt.forEach(t),pMo=r(vJe," (throws an error)."),vJe.forEach(t),_Mo=i(gl),Je=n(gl,"DIV",{class:!0});var ma=s(Je);T(Dy.$$.fragment,ma),uMo=i(ma),nme=n(ma,"P",{});var cvt=s(nme);bMo=r(cvt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cvt.forEach(t),vMo=i(ma),od=n(ma,"P",{});var zae=s(od);FMo=r(zae,"The processor class to instantiate is selected based on the "),sme=n(zae,"CODE",{});var fvt=s(sme);TMo=r(fvt,"model_type"),fvt.forEach(t),MMo=r(zae,` property of the config object (either
passed as an argument or loaded from `),lme=n(zae,"CODE",{});var mvt=s(lme);EMo=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),CMo=r(zae," if possible):"),zae.forEach(t),wMo=i(ma),ie=n(ma,"UL",{});var ge=s(ie);Up=n(ge,"LI",{});var oSe=s(Up);ime=n(oSe,"STRONG",{});var gvt=s(ime);AMo=r(gvt,"clip"),gvt.forEach(t),LMo=r(oSe," \u2014 "),gD=n(oSe,"A",{href:!0});var hvt=s(gD);yMo=r(hvt,"CLIPProcessor"),hvt.forEach(t),xMo=r(oSe," (CLIP model)"),oSe.forEach(t),$Mo=i(ge),Hp=n(ge,"LI",{});var rSe=s(Hp);dme=n(rSe,"STRONG",{});var pvt=s(dme);kMo=r(pvt,"donut"),pvt.forEach(t),SMo=r(rSe," \u2014 "),hD=n(rSe,"A",{href:!0});var _vt=s(hD);RMo=r(_vt,"DonutProcessor"),_vt.forEach(t),PMo=r(rSe," (Donut model)"),rSe.forEach(t),BMo=i(ge),Jp=n(ge,"LI",{});var tSe=s(Jp);cme=n(tSe,"STRONG",{});var uvt=s(cme);IMo=r(uvt,"flava"),uvt.forEach(t),NMo=r(tSe," \u2014 "),pD=n(tSe,"A",{href:!0});var bvt=s(pD);qMo=r(bvt,"FlavaProcessor"),bvt.forEach(t),jMo=r(tSe," (FLAVA model)"),tSe.forEach(t),DMo=i(ge),Yp=n(ge,"LI",{});var aSe=s(Yp);fme=n(aSe,"STRONG",{});var vvt=s(fme);GMo=r(vvt,"groupvit"),vvt.forEach(t),OMo=r(aSe," \u2014 "),_D=n(aSe,"A",{href:!0});var Fvt=s(_D);VMo=r(Fvt,"CLIPProcessor"),Fvt.forEach(t),XMo=r(aSe," (GroupViT model)"),aSe.forEach(t),zMo=i(ge),Kp=n(ge,"LI",{});var nSe=s(Kp);mme=n(nSe,"STRONG",{});var Tvt=s(mme);WMo=r(Tvt,"layoutlmv2"),Tvt.forEach(t),QMo=r(nSe," \u2014 "),uD=n(nSe,"A",{href:!0});var Mvt=s(uD);UMo=r(Mvt,"LayoutLMv2Processor"),Mvt.forEach(t),HMo=r(nSe," (LayoutLMv2 model)"),nSe.forEach(t),JMo=i(ge),Zp=n(ge,"LI",{});var sSe=s(Zp);gme=n(sSe,"STRONG",{});var Evt=s(gme);YMo=r(Evt,"layoutlmv3"),Evt.forEach(t),KMo=r(sSe," \u2014 "),bD=n(sSe,"A",{href:!0});var Cvt=s(bD);ZMo=r(Cvt,"LayoutLMv3Processor"),Cvt.forEach(t),eEo=r(sSe," (LayoutLMv3 model)"),sSe.forEach(t),oEo=i(ge),e_=n(ge,"LI",{});var lSe=s(e_);hme=n(lSe,"STRONG",{});var wvt=s(hme);rEo=r(wvt,"layoutxlm"),wvt.forEach(t),tEo=r(lSe," \u2014 "),vD=n(lSe,"A",{href:!0});var Avt=s(vD);aEo=r(Avt,"LayoutXLMProcessor"),Avt.forEach(t),nEo=r(lSe," (LayoutXLM model)"),lSe.forEach(t),sEo=i(ge),o_=n(ge,"LI",{});var iSe=s(o_);pme=n(iSe,"STRONG",{});var Lvt=s(pme);lEo=r(Lvt,"owlvit"),Lvt.forEach(t),iEo=r(iSe," \u2014 "),FD=n(iSe,"A",{href:!0});var yvt=s(FD);dEo=r(yvt,"OwlViTProcessor"),yvt.forEach(t),cEo=r(iSe," (OWL-ViT model)"),iSe.forEach(t),fEo=i(ge),r_=n(ge,"LI",{});var dSe=s(r_);_me=n(dSe,"STRONG",{});var xvt=s(_me);mEo=r(xvt,"sew"),xvt.forEach(t),gEo=r(dSe," \u2014 "),TD=n(dSe,"A",{href:!0});var $vt=s(TD);hEo=r($vt,"Wav2Vec2Processor"),$vt.forEach(t),pEo=r(dSe," (SEW model)"),dSe.forEach(t),_Eo=i(ge),t_=n(ge,"LI",{});var cSe=s(t_);ume=n(cSe,"STRONG",{});var kvt=s(ume);uEo=r(kvt,"sew-d"),kvt.forEach(t),bEo=r(cSe," \u2014 "),MD=n(cSe,"A",{href:!0});var Svt=s(MD);vEo=r(Svt,"Wav2Vec2Processor"),Svt.forEach(t),FEo=r(cSe," (SEW-D model)"),cSe.forEach(t),TEo=i(ge),a_=n(ge,"LI",{});var fSe=s(a_);bme=n(fSe,"STRONG",{});var Rvt=s(bme);MEo=r(Rvt,"speech_to_text"),Rvt.forEach(t),EEo=r(fSe," \u2014 "),ED=n(fSe,"A",{href:!0});var Pvt=s(ED);CEo=r(Pvt,"Speech2TextProcessor"),Pvt.forEach(t),wEo=r(fSe," (Speech2Text model)"),fSe.forEach(t),AEo=i(ge),n_=n(ge,"LI",{});var mSe=s(n_);vme=n(mSe,"STRONG",{});var Bvt=s(vme);LEo=r(Bvt,"speech_to_text_2"),Bvt.forEach(t),yEo=r(mSe," \u2014 "),CD=n(mSe,"A",{href:!0});var Ivt=s(CD);xEo=r(Ivt,"Speech2Text2Processor"),Ivt.forEach(t),$Eo=r(mSe," (Speech2Text2 model)"),mSe.forEach(t),kEo=i(ge),s_=n(ge,"LI",{});var gSe=s(s_);Fme=n(gSe,"STRONG",{});var Nvt=s(Fme);SEo=r(Nvt,"trocr"),Nvt.forEach(t),REo=r(gSe," \u2014 "),wD=n(gSe,"A",{href:!0});var qvt=s(wD);PEo=r(qvt,"TrOCRProcessor"),qvt.forEach(t),BEo=r(gSe," (TrOCR model)"),gSe.forEach(t),IEo=i(ge),l_=n(ge,"LI",{});var hSe=s(l_);Tme=n(hSe,"STRONG",{});var jvt=s(Tme);NEo=r(jvt,"unispeech"),jvt.forEach(t),qEo=r(hSe," \u2014 "),AD=n(hSe,"A",{href:!0});var Dvt=s(AD);jEo=r(Dvt,"Wav2Vec2Processor"),Dvt.forEach(t),DEo=r(hSe," (UniSpeech model)"),hSe.forEach(t),GEo=i(ge),i_=n(ge,"LI",{});var pSe=s(i_);Mme=n(pSe,"STRONG",{});var Gvt=s(Mme);OEo=r(Gvt,"unispeech-sat"),Gvt.forEach(t),VEo=r(pSe," \u2014 "),LD=n(pSe,"A",{href:!0});var Ovt=s(LD);XEo=r(Ovt,"Wav2Vec2Processor"),Ovt.forEach(t),zEo=r(pSe," (UniSpeechSat model)"),pSe.forEach(t),WEo=i(ge),d_=n(ge,"LI",{});var _Se=s(d_);Eme=n(_Se,"STRONG",{});var Vvt=s(Eme);QEo=r(Vvt,"vilt"),Vvt.forEach(t),UEo=r(_Se," \u2014 "),yD=n(_Se,"A",{href:!0});var Xvt=s(yD);HEo=r(Xvt,"ViltProcessor"),Xvt.forEach(t),JEo=r(_Se," (ViLT model)"),_Se.forEach(t),YEo=i(ge),c_=n(ge,"LI",{});var uSe=s(c_);Cme=n(uSe,"STRONG",{});var zvt=s(Cme);KEo=r(zvt,"vision-text-dual-encoder"),zvt.forEach(t),ZEo=r(uSe," \u2014 "),xD=n(uSe,"A",{href:!0});var Wvt=s(xD);e4o=r(Wvt,"VisionTextDualEncoderProcessor"),Wvt.forEach(t),o4o=r(uSe," (VisionTextDualEncoder model)"),uSe.forEach(t),r4o=i(ge),f_=n(ge,"LI",{});var bSe=s(f_);wme=n(bSe,"STRONG",{});var Qvt=s(wme);t4o=r(Qvt,"wav2vec2"),Qvt.forEach(t),a4o=r(bSe," \u2014 "),$D=n(bSe,"A",{href:!0});var Uvt=s($D);n4o=r(Uvt,"Wav2Vec2Processor"),Uvt.forEach(t),s4o=r(bSe," (Wav2Vec2 model)"),bSe.forEach(t),l4o=i(ge),m_=n(ge,"LI",{});var vSe=s(m_);Ame=n(vSe,"STRONG",{});var Hvt=s(Ame);i4o=r(Hvt,"wav2vec2-conformer"),Hvt.forEach(t),d4o=r(vSe," \u2014 "),kD=n(vSe,"A",{href:!0});var Jvt=s(kD);c4o=r(Jvt,"Wav2Vec2Processor"),Jvt.forEach(t),f4o=r(vSe," (Wav2Vec2-Conformer model)"),vSe.forEach(t),m4o=i(ge),g_=n(ge,"LI",{});var FSe=s(g_);Lme=n(FSe,"STRONG",{});var Yvt=s(Lme);g4o=r(Yvt,"wavlm"),Yvt.forEach(t),h4o=r(FSe," \u2014 "),SD=n(FSe,"A",{href:!0});var Kvt=s(SD);p4o=r(Kvt,"Wav2Vec2Processor"),Kvt.forEach(t),_4o=r(FSe," (WavLM model)"),FSe.forEach(t),ge.forEach(t),u4o=i(ma),T(h_.$$.fragment,ma),b4o=i(ma),T(p_.$$.fragment,ma),ma.forEach(t),v4o=i(gl),__=n(gl,"DIV",{class:!0});var FJe=s(__);T(Gy.$$.fragment,FJe),F4o=i(FJe),yme=n(FJe,"P",{});var Zvt=s(yme);T4o=r(Zvt,"Register a new processor for this class."),Zvt.forEach(t),FJe.forEach(t),gl.forEach(t),fUe=i(f),rd=n(f,"H2",{class:!0});var TJe=s(rd);u_=n(TJe,"A",{id:!0,class:!0,href:!0});var eFt=s(u_);xme=n(eFt,"SPAN",{});var oFt=s(xme);T(Oy.$$.fragment,oFt),oFt.forEach(t),eFt.forEach(t),M4o=i(TJe),$me=n(TJe,"SPAN",{});var rFt=s($me);E4o=r(rFt,"AutoModel"),rFt.forEach(t),TJe.forEach(t),mUe=i(f),So=n(f,"DIV",{class:!0});var hl=s(So);T(Vy.$$.fragment,hl),C4o=i(hl),td=n(hl,"P",{});var Wae=s(td);w4o=r(Wae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RD=n(Wae,"A",{href:!0});var tFt=s(RD);A4o=r(tFt,"from_pretrained()"),tFt.forEach(t),L4o=r(Wae," class method or the "),PD=n(Wae,"A",{href:!0});var aFt=s(PD);y4o=r(aFt,"from_config()"),aFt.forEach(t),x4o=r(Wae,` class
method.`),Wae.forEach(t),$4o=i(hl),Xy=n(hl,"P",{});var MJe=s(Xy);k4o=r(MJe,"This class cannot be instantiated directly using "),kme=n(MJe,"CODE",{});var nFt=s(kme);S4o=r(nFt,"__init__()"),nFt.forEach(t),R4o=r(MJe," (throws an error)."),MJe.forEach(t),P4o=i(hl),mt=n(hl,"DIV",{class:!0});var p7=s(mt);T(zy.$$.fragment,p7),B4o=i(p7),Sme=n(p7,"P",{});var sFt=s(Sme);I4o=r(sFt,"Instantiates one of the base model classes of the library from a configuration."),sFt.forEach(t),N4o=i(p7),ad=n(p7,"P",{});var Qae=s(ad);q4o=r(Qae,`Note:
Loading a model from its configuration file does `),Rme=n(Qae,"STRONG",{});var lFt=s(Rme);j4o=r(lFt,"not"),lFt.forEach(t),D4o=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=n(Qae,"A",{href:!0});var iFt=s(BD);G4o=r(iFt,"from_pretrained()"),iFt.forEach(t),O4o=r(Qae," to load the model weights."),Qae.forEach(t),V4o=i(p7),T(b_.$$.fragment,p7),p7.forEach(t),X4o=i(hl),Ye=n(hl,"DIV",{class:!0});var ga=s(Ye);T(Wy.$$.fragment,ga),z4o=i(ga),Pme=n(ga,"P",{});var dFt=s(Pme);W4o=r(dFt,"Instantiate one of the base model classes of the library from a pretrained model."),dFt.forEach(t),Q4o=i(ga),Va=n(ga,"P",{});var _7=s(Va);U4o=r(_7,"The model class to instantiate is selected based on the "),Bme=n(_7,"CODE",{});var cFt=s(Bme);H4o=r(cFt,"model_type"),cFt.forEach(t),J4o=r(_7,` property of the config object (either
passed as an argument or loaded from `),Ime=n(_7,"CODE",{});var fFt=s(Ime);Y4o=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),K4o=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(_7,"CODE",{});var mFt=s(Nme);Z4o=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),eCo=r(_7,":"),_7.forEach(t),oCo=i(ga),y=n(ga,"UL",{});var x=s(y);v_=n(x,"LI",{});var TSe=s(v_);qme=n(TSe,"STRONG",{});var gFt=s(qme);rCo=r(gFt,"albert"),gFt.forEach(t),tCo=r(TSe," \u2014 "),ID=n(TSe,"A",{href:!0});var hFt=s(ID);aCo=r(hFt,"AlbertModel"),hFt.forEach(t),nCo=r(TSe," (ALBERT model)"),TSe.forEach(t),sCo=i(x),F_=n(x,"LI",{});var MSe=s(F_);jme=n(MSe,"STRONG",{});var pFt=s(jme);lCo=r(pFt,"bart"),pFt.forEach(t),iCo=r(MSe," \u2014 "),ND=n(MSe,"A",{href:!0});var _Ft=s(ND);dCo=r(_Ft,"BartModel"),_Ft.forEach(t),cCo=r(MSe," (BART model)"),MSe.forEach(t),fCo=i(x),T_=n(x,"LI",{});var ESe=s(T_);Dme=n(ESe,"STRONG",{});var uFt=s(Dme);mCo=r(uFt,"beit"),uFt.forEach(t),gCo=r(ESe," \u2014 "),qD=n(ESe,"A",{href:!0});var bFt=s(qD);hCo=r(bFt,"BeitModel"),bFt.forEach(t),pCo=r(ESe," (BEiT model)"),ESe.forEach(t),_Co=i(x),M_=n(x,"LI",{});var CSe=s(M_);Gme=n(CSe,"STRONG",{});var vFt=s(Gme);uCo=r(vFt,"bert"),vFt.forEach(t),bCo=r(CSe," \u2014 "),jD=n(CSe,"A",{href:!0});var FFt=s(jD);vCo=r(FFt,"BertModel"),FFt.forEach(t),FCo=r(CSe," (BERT model)"),CSe.forEach(t),TCo=i(x),E_=n(x,"LI",{});var wSe=s(E_);Ome=n(wSe,"STRONG",{});var TFt=s(Ome);MCo=r(TFt,"bert-generation"),TFt.forEach(t),ECo=r(wSe," \u2014 "),DD=n(wSe,"A",{href:!0});var MFt=s(DD);CCo=r(MFt,"BertGenerationEncoder"),MFt.forEach(t),wCo=r(wSe," (Bert Generation model)"),wSe.forEach(t),ACo=i(x),C_=n(x,"LI",{});var ASe=s(C_);Vme=n(ASe,"STRONG",{});var EFt=s(Vme);LCo=r(EFt,"big_bird"),EFt.forEach(t),yCo=r(ASe," \u2014 "),GD=n(ASe,"A",{href:!0});var CFt=s(GD);xCo=r(CFt,"BigBirdModel"),CFt.forEach(t),$Co=r(ASe," (BigBird model)"),ASe.forEach(t),kCo=i(x),w_=n(x,"LI",{});var LSe=s(w_);Xme=n(LSe,"STRONG",{});var wFt=s(Xme);SCo=r(wFt,"bigbird_pegasus"),wFt.forEach(t),RCo=r(LSe," \u2014 "),OD=n(LSe,"A",{href:!0});var AFt=s(OD);PCo=r(AFt,"BigBirdPegasusModel"),AFt.forEach(t),BCo=r(LSe," (BigBird-Pegasus model)"),LSe.forEach(t),ICo=i(x),A_=n(x,"LI",{});var ySe=s(A_);zme=n(ySe,"STRONG",{});var LFt=s(zme);NCo=r(LFt,"blenderbot"),LFt.forEach(t),qCo=r(ySe," \u2014 "),VD=n(ySe,"A",{href:!0});var yFt=s(VD);jCo=r(yFt,"BlenderbotModel"),yFt.forEach(t),DCo=r(ySe," (Blenderbot model)"),ySe.forEach(t),GCo=i(x),L_=n(x,"LI",{});var xSe=s(L_);Wme=n(xSe,"STRONG",{});var xFt=s(Wme);OCo=r(xFt,"blenderbot-small"),xFt.forEach(t),VCo=r(xSe," \u2014 "),XD=n(xSe,"A",{href:!0});var $Ft=s(XD);XCo=r($Ft,"BlenderbotSmallModel"),$Ft.forEach(t),zCo=r(xSe," (BlenderbotSmall model)"),xSe.forEach(t),WCo=i(x),y_=n(x,"LI",{});var $Se=s(y_);Qme=n($Se,"STRONG",{});var kFt=s(Qme);QCo=r(kFt,"bloom"),kFt.forEach(t),UCo=r($Se," \u2014 "),zD=n($Se,"A",{href:!0});var SFt=s(zD);HCo=r(SFt,"BloomModel"),SFt.forEach(t),JCo=r($Se," (BLOOM model)"),$Se.forEach(t),YCo=i(x),x_=n(x,"LI",{});var kSe=s(x_);Ume=n(kSe,"STRONG",{});var RFt=s(Ume);KCo=r(RFt,"camembert"),RFt.forEach(t),ZCo=r(kSe," \u2014 "),WD=n(kSe,"A",{href:!0});var PFt=s(WD);e3o=r(PFt,"CamembertModel"),PFt.forEach(t),o3o=r(kSe," (CamemBERT model)"),kSe.forEach(t),r3o=i(x),$_=n(x,"LI",{});var SSe=s($_);Hme=n(SSe,"STRONG",{});var BFt=s(Hme);t3o=r(BFt,"canine"),BFt.forEach(t),a3o=r(SSe," \u2014 "),QD=n(SSe,"A",{href:!0});var IFt=s(QD);n3o=r(IFt,"CanineModel"),IFt.forEach(t),s3o=r(SSe," (CANINE model)"),SSe.forEach(t),l3o=i(x),k_=n(x,"LI",{});var RSe=s(k_);Jme=n(RSe,"STRONG",{});var NFt=s(Jme);i3o=r(NFt,"clip"),NFt.forEach(t),d3o=r(RSe," \u2014 "),UD=n(RSe,"A",{href:!0});var qFt=s(UD);c3o=r(qFt,"CLIPModel"),qFt.forEach(t),f3o=r(RSe," (CLIP model)"),RSe.forEach(t),m3o=i(x),S_=n(x,"LI",{});var PSe=s(S_);Yme=n(PSe,"STRONG",{});var jFt=s(Yme);g3o=r(jFt,"codegen"),jFt.forEach(t),h3o=r(PSe," \u2014 "),HD=n(PSe,"A",{href:!0});var DFt=s(HD);p3o=r(DFt,"CodeGenModel"),DFt.forEach(t),_3o=r(PSe," (CodeGen model)"),PSe.forEach(t),u3o=i(x),R_=n(x,"LI",{});var BSe=s(R_);Kme=n(BSe,"STRONG",{});var GFt=s(Kme);b3o=r(GFt,"convbert"),GFt.forEach(t),v3o=r(BSe," \u2014 "),JD=n(BSe,"A",{href:!0});var OFt=s(JD);F3o=r(OFt,"ConvBertModel"),OFt.forEach(t),T3o=r(BSe," (ConvBERT model)"),BSe.forEach(t),M3o=i(x),P_=n(x,"LI",{});var ISe=s(P_);Zme=n(ISe,"STRONG",{});var VFt=s(Zme);E3o=r(VFt,"convnext"),VFt.forEach(t),C3o=r(ISe," \u2014 "),YD=n(ISe,"A",{href:!0});var XFt=s(YD);w3o=r(XFt,"ConvNextModel"),XFt.forEach(t),A3o=r(ISe," (ConvNeXT model)"),ISe.forEach(t),L3o=i(x),B_=n(x,"LI",{});var NSe=s(B_);ege=n(NSe,"STRONG",{});var zFt=s(ege);y3o=r(zFt,"ctrl"),zFt.forEach(t),x3o=r(NSe," \u2014 "),KD=n(NSe,"A",{href:!0});var WFt=s(KD);$3o=r(WFt,"CTRLModel"),WFt.forEach(t),k3o=r(NSe," (CTRL model)"),NSe.forEach(t),S3o=i(x),I_=n(x,"LI",{});var qSe=s(I_);oge=n(qSe,"STRONG",{});var QFt=s(oge);R3o=r(QFt,"cvt"),QFt.forEach(t),P3o=r(qSe," \u2014 "),ZD=n(qSe,"A",{href:!0});var UFt=s(ZD);B3o=r(UFt,"CvtModel"),UFt.forEach(t),I3o=r(qSe," (CvT model)"),qSe.forEach(t),N3o=i(x),N_=n(x,"LI",{});var jSe=s(N_);rge=n(jSe,"STRONG",{});var HFt=s(rge);q3o=r(HFt,"data2vec-audio"),HFt.forEach(t),j3o=r(jSe," \u2014 "),eG=n(jSe,"A",{href:!0});var JFt=s(eG);D3o=r(JFt,"Data2VecAudioModel"),JFt.forEach(t),G3o=r(jSe," (Data2VecAudio model)"),jSe.forEach(t),O3o=i(x),q_=n(x,"LI",{});var DSe=s(q_);tge=n(DSe,"STRONG",{});var YFt=s(tge);V3o=r(YFt,"data2vec-text"),YFt.forEach(t),X3o=r(DSe," \u2014 "),oG=n(DSe,"A",{href:!0});var KFt=s(oG);z3o=r(KFt,"Data2VecTextModel"),KFt.forEach(t),W3o=r(DSe," (Data2VecText model)"),DSe.forEach(t),Q3o=i(x),j_=n(x,"LI",{});var GSe=s(j_);age=n(GSe,"STRONG",{});var ZFt=s(age);U3o=r(ZFt,"data2vec-vision"),ZFt.forEach(t),H3o=r(GSe," \u2014 "),rG=n(GSe,"A",{href:!0});var eTt=s(rG);J3o=r(eTt,"Data2VecVisionModel"),eTt.forEach(t),Y3o=r(GSe," (Data2VecVision model)"),GSe.forEach(t),K3o=i(x),D_=n(x,"LI",{});var OSe=s(D_);nge=n(OSe,"STRONG",{});var oTt=s(nge);Z3o=r(oTt,"deberta"),oTt.forEach(t),e5o=r(OSe," \u2014 "),tG=n(OSe,"A",{href:!0});var rTt=s(tG);o5o=r(rTt,"DebertaModel"),rTt.forEach(t),r5o=r(OSe," (DeBERTa model)"),OSe.forEach(t),t5o=i(x),G_=n(x,"LI",{});var VSe=s(G_);sge=n(VSe,"STRONG",{});var tTt=s(sge);a5o=r(tTt,"deberta-v2"),tTt.forEach(t),n5o=r(VSe," \u2014 "),aG=n(VSe,"A",{href:!0});var aTt=s(aG);s5o=r(aTt,"DebertaV2Model"),aTt.forEach(t),l5o=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),i5o=i(x),O_=n(x,"LI",{});var XSe=s(O_);lge=n(XSe,"STRONG",{});var nTt=s(lge);d5o=r(nTt,"decision_transformer"),nTt.forEach(t),c5o=r(XSe," \u2014 "),nG=n(XSe,"A",{href:!0});var sTt=s(nG);f5o=r(sTt,"DecisionTransformerModel"),sTt.forEach(t),m5o=r(XSe," (Decision Transformer model)"),XSe.forEach(t),g5o=i(x),V_=n(x,"LI",{});var zSe=s(V_);ige=n(zSe,"STRONG",{});var lTt=s(ige);h5o=r(lTt,"deit"),lTt.forEach(t),p5o=r(zSe," \u2014 "),sG=n(zSe,"A",{href:!0});var iTt=s(sG);_5o=r(iTt,"DeiTModel"),iTt.forEach(t),u5o=r(zSe," (DeiT model)"),zSe.forEach(t),b5o=i(x),X_=n(x,"LI",{});var WSe=s(X_);dge=n(WSe,"STRONG",{});var dTt=s(dge);v5o=r(dTt,"detr"),dTt.forEach(t),F5o=r(WSe," \u2014 "),lG=n(WSe,"A",{href:!0});var cTt=s(lG);T5o=r(cTt,"DetrModel"),cTt.forEach(t),M5o=r(WSe," (DETR model)"),WSe.forEach(t),E5o=i(x),z_=n(x,"LI",{});var QSe=s(z_);cge=n(QSe,"STRONG",{});var fTt=s(cge);C5o=r(fTt,"distilbert"),fTt.forEach(t),w5o=r(QSe," \u2014 "),iG=n(QSe,"A",{href:!0});var mTt=s(iG);A5o=r(mTt,"DistilBertModel"),mTt.forEach(t),L5o=r(QSe," (DistilBERT model)"),QSe.forEach(t),y5o=i(x),W_=n(x,"LI",{});var USe=s(W_);fge=n(USe,"STRONG",{});var gTt=s(fge);x5o=r(gTt,"donut-swin"),gTt.forEach(t),$5o=r(USe," \u2014 "),dG=n(USe,"A",{href:!0});var hTt=s(dG);k5o=r(hTt,"DonutSwinModel"),hTt.forEach(t),S5o=r(USe," (DonutSwin model)"),USe.forEach(t),R5o=i(x),Q_=n(x,"LI",{});var HSe=s(Q_);mge=n(HSe,"STRONG",{});var pTt=s(mge);P5o=r(pTt,"dpr"),pTt.forEach(t),B5o=r(HSe," \u2014 "),cG=n(HSe,"A",{href:!0});var _Tt=s(cG);I5o=r(_Tt,"DPRQuestionEncoder"),_Tt.forEach(t),N5o=r(HSe," (DPR model)"),HSe.forEach(t),q5o=i(x),U_=n(x,"LI",{});var JSe=s(U_);gge=n(JSe,"STRONG",{});var uTt=s(gge);j5o=r(uTt,"dpt"),uTt.forEach(t),D5o=r(JSe," \u2014 "),fG=n(JSe,"A",{href:!0});var bTt=s(fG);G5o=r(bTt,"DPTModel"),bTt.forEach(t),O5o=r(JSe," (DPT model)"),JSe.forEach(t),V5o=i(x),H_=n(x,"LI",{});var YSe=s(H_);hge=n(YSe,"STRONG",{});var vTt=s(hge);X5o=r(vTt,"electra"),vTt.forEach(t),z5o=r(YSe," \u2014 "),mG=n(YSe,"A",{href:!0});var FTt=s(mG);W5o=r(FTt,"ElectraModel"),FTt.forEach(t),Q5o=r(YSe," (ELECTRA model)"),YSe.forEach(t),U5o=i(x),J_=n(x,"LI",{});var KSe=s(J_);pge=n(KSe,"STRONG",{});var TTt=s(pge);H5o=r(TTt,"flaubert"),TTt.forEach(t),J5o=r(KSe," \u2014 "),gG=n(KSe,"A",{href:!0});var MTt=s(gG);Y5o=r(MTt,"FlaubertModel"),MTt.forEach(t),K5o=r(KSe," (FlauBERT model)"),KSe.forEach(t),Z5o=i(x),Y_=n(x,"LI",{});var ZSe=s(Y_);_ge=n(ZSe,"STRONG",{});var ETt=s(_ge);ewo=r(ETt,"flava"),ETt.forEach(t),owo=r(ZSe," \u2014 "),hG=n(ZSe,"A",{href:!0});var CTt=s(hG);rwo=r(CTt,"FlavaModel"),CTt.forEach(t),two=r(ZSe," (FLAVA model)"),ZSe.forEach(t),awo=i(x),K_=n(x,"LI",{});var eRe=s(K_);uge=n(eRe,"STRONG",{});var wTt=s(uge);nwo=r(wTt,"fnet"),wTt.forEach(t),swo=r(eRe," \u2014 "),pG=n(eRe,"A",{href:!0});var ATt=s(pG);lwo=r(ATt,"FNetModel"),ATt.forEach(t),iwo=r(eRe," (FNet model)"),eRe.forEach(t),dwo=i(x),Z_=n(x,"LI",{});var oRe=s(Z_);bge=n(oRe,"STRONG",{});var LTt=s(bge);cwo=r(LTt,"fsmt"),LTt.forEach(t),fwo=r(oRe," \u2014 "),_G=n(oRe,"A",{href:!0});var yTt=s(_G);mwo=r(yTt,"FSMTModel"),yTt.forEach(t),gwo=r(oRe," (FairSeq Machine-Translation model)"),oRe.forEach(t),hwo=i(x),nl=n(x,"LI",{});var oP=s(nl);vge=n(oP,"STRONG",{});var xTt=s(vge);pwo=r(xTt,"funnel"),xTt.forEach(t),_wo=r(oP," \u2014 "),uG=n(oP,"A",{href:!0});var $Tt=s(uG);uwo=r($Tt,"FunnelModel"),$Tt.forEach(t),bwo=r(oP," or "),bG=n(oP,"A",{href:!0});var kTt=s(bG);vwo=r(kTt,"FunnelBaseModel"),kTt.forEach(t),Fwo=r(oP," (Funnel Transformer model)"),oP.forEach(t),Two=i(x),eu=n(x,"LI",{});var rRe=s(eu);Fge=n(rRe,"STRONG",{});var STt=s(Fge);Mwo=r(STt,"glpn"),STt.forEach(t),Ewo=r(rRe," \u2014 "),vG=n(rRe,"A",{href:!0});var RTt=s(vG);Cwo=r(RTt,"GLPNModel"),RTt.forEach(t),wwo=r(rRe," (GLPN model)"),rRe.forEach(t),Awo=i(x),ou=n(x,"LI",{});var tRe=s(ou);Tge=n(tRe,"STRONG",{});var PTt=s(Tge);Lwo=r(PTt,"gpt2"),PTt.forEach(t),ywo=r(tRe," \u2014 "),FG=n(tRe,"A",{href:!0});var BTt=s(FG);xwo=r(BTt,"GPT2Model"),BTt.forEach(t),$wo=r(tRe," (OpenAI GPT-2 model)"),tRe.forEach(t),kwo=i(x),ru=n(x,"LI",{});var aRe=s(ru);Mge=n(aRe,"STRONG",{});var ITt=s(Mge);Swo=r(ITt,"gpt_neo"),ITt.forEach(t),Rwo=r(aRe," \u2014 "),TG=n(aRe,"A",{href:!0});var NTt=s(TG);Pwo=r(NTt,"GPTNeoModel"),NTt.forEach(t),Bwo=r(aRe," (GPT Neo model)"),aRe.forEach(t),Iwo=i(x),tu=n(x,"LI",{});var nRe=s(tu);Ege=n(nRe,"STRONG",{});var qTt=s(Ege);Nwo=r(qTt,"gpt_neox"),qTt.forEach(t),qwo=r(nRe," \u2014 "),MG=n(nRe,"A",{href:!0});var jTt=s(MG);jwo=r(jTt,"GPTNeoXModel"),jTt.forEach(t),Dwo=r(nRe," (GPT NeoX model)"),nRe.forEach(t),Gwo=i(x),au=n(x,"LI",{});var sRe=s(au);Cge=n(sRe,"STRONG",{});var DTt=s(Cge);Owo=r(DTt,"gptj"),DTt.forEach(t),Vwo=r(sRe," \u2014 "),EG=n(sRe,"A",{href:!0});var GTt=s(EG);Xwo=r(GTt,"GPTJModel"),GTt.forEach(t),zwo=r(sRe," (GPT-J model)"),sRe.forEach(t),Wwo=i(x),nu=n(x,"LI",{});var lRe=s(nu);wge=n(lRe,"STRONG",{});var OTt=s(wge);Qwo=r(OTt,"groupvit"),OTt.forEach(t),Uwo=r(lRe," \u2014 "),CG=n(lRe,"A",{href:!0});var VTt=s(CG);Hwo=r(VTt,"GroupViTModel"),VTt.forEach(t),Jwo=r(lRe," (GroupViT model)"),lRe.forEach(t),Ywo=i(x),su=n(x,"LI",{});var iRe=s(su);Age=n(iRe,"STRONG",{});var XTt=s(Age);Kwo=r(XTt,"hubert"),XTt.forEach(t),Zwo=r(iRe," \u2014 "),wG=n(iRe,"A",{href:!0});var zTt=s(wG);e6o=r(zTt,"HubertModel"),zTt.forEach(t),o6o=r(iRe," (Hubert model)"),iRe.forEach(t),r6o=i(x),lu=n(x,"LI",{});var dRe=s(lu);Lge=n(dRe,"STRONG",{});var WTt=s(Lge);t6o=r(WTt,"ibert"),WTt.forEach(t),a6o=r(dRe," \u2014 "),AG=n(dRe,"A",{href:!0});var QTt=s(AG);n6o=r(QTt,"IBertModel"),QTt.forEach(t),s6o=r(dRe," (I-BERT model)"),dRe.forEach(t),l6o=i(x),iu=n(x,"LI",{});var cRe=s(iu);yge=n(cRe,"STRONG",{});var UTt=s(yge);i6o=r(UTt,"imagegpt"),UTt.forEach(t),d6o=r(cRe," \u2014 "),LG=n(cRe,"A",{href:!0});var HTt=s(LG);c6o=r(HTt,"ImageGPTModel"),HTt.forEach(t),f6o=r(cRe," (ImageGPT model)"),cRe.forEach(t),m6o=i(x),du=n(x,"LI",{});var fRe=s(du);xge=n(fRe,"STRONG",{});var JTt=s(xge);g6o=r(JTt,"layoutlm"),JTt.forEach(t),h6o=r(fRe," \u2014 "),yG=n(fRe,"A",{href:!0});var YTt=s(yG);p6o=r(YTt,"LayoutLMModel"),YTt.forEach(t),_6o=r(fRe," (LayoutLM model)"),fRe.forEach(t),u6o=i(x),cu=n(x,"LI",{});var mRe=s(cu);$ge=n(mRe,"STRONG",{});var KTt=s($ge);b6o=r(KTt,"layoutlmv2"),KTt.forEach(t),v6o=r(mRe," \u2014 "),xG=n(mRe,"A",{href:!0});var ZTt=s(xG);F6o=r(ZTt,"LayoutLMv2Model"),ZTt.forEach(t),T6o=r(mRe," (LayoutLMv2 model)"),mRe.forEach(t),M6o=i(x),fu=n(x,"LI",{});var gRe=s(fu);kge=n(gRe,"STRONG",{});var e8t=s(kge);E6o=r(e8t,"layoutlmv3"),e8t.forEach(t),C6o=r(gRe," \u2014 "),$G=n(gRe,"A",{href:!0});var o8t=s($G);w6o=r(o8t,"LayoutLMv3Model"),o8t.forEach(t),A6o=r(gRe," (LayoutLMv3 model)"),gRe.forEach(t),L6o=i(x),mu=n(x,"LI",{});var hRe=s(mu);Sge=n(hRe,"STRONG",{});var r8t=s(Sge);y6o=r(r8t,"led"),r8t.forEach(t),x6o=r(hRe," \u2014 "),kG=n(hRe,"A",{href:!0});var t8t=s(kG);$6o=r(t8t,"LEDModel"),t8t.forEach(t),k6o=r(hRe," (LED model)"),hRe.forEach(t),S6o=i(x),gu=n(x,"LI",{});var pRe=s(gu);Rge=n(pRe,"STRONG",{});var a8t=s(Rge);R6o=r(a8t,"levit"),a8t.forEach(t),P6o=r(pRe," \u2014 "),SG=n(pRe,"A",{href:!0});var n8t=s(SG);B6o=r(n8t,"LevitModel"),n8t.forEach(t),I6o=r(pRe," (LeViT model)"),pRe.forEach(t),N6o=i(x),hu=n(x,"LI",{});var _Re=s(hu);Pge=n(_Re,"STRONG",{});var s8t=s(Pge);q6o=r(s8t,"longformer"),s8t.forEach(t),j6o=r(_Re," \u2014 "),RG=n(_Re,"A",{href:!0});var l8t=s(RG);D6o=r(l8t,"LongformerModel"),l8t.forEach(t),G6o=r(_Re," (Longformer model)"),_Re.forEach(t),O6o=i(x),pu=n(x,"LI",{});var uRe=s(pu);Bge=n(uRe,"STRONG",{});var i8t=s(Bge);V6o=r(i8t,"longt5"),i8t.forEach(t),X6o=r(uRe," \u2014 "),PG=n(uRe,"A",{href:!0});var d8t=s(PG);z6o=r(d8t,"LongT5Model"),d8t.forEach(t),W6o=r(uRe," (LongT5 model)"),uRe.forEach(t),Q6o=i(x),_u=n(x,"LI",{});var bRe=s(_u);Ige=n(bRe,"STRONG",{});var c8t=s(Ige);U6o=r(c8t,"luke"),c8t.forEach(t),H6o=r(bRe," \u2014 "),BG=n(bRe,"A",{href:!0});var f8t=s(BG);J6o=r(f8t,"LukeModel"),f8t.forEach(t),Y6o=r(bRe," (LUKE model)"),bRe.forEach(t),K6o=i(x),uu=n(x,"LI",{});var vRe=s(uu);Nge=n(vRe,"STRONG",{});var m8t=s(Nge);Z6o=r(m8t,"lxmert"),m8t.forEach(t),eAo=r(vRe," \u2014 "),IG=n(vRe,"A",{href:!0});var g8t=s(IG);oAo=r(g8t,"LxmertModel"),g8t.forEach(t),rAo=r(vRe," (LXMERT model)"),vRe.forEach(t),tAo=i(x),bu=n(x,"LI",{});var FRe=s(bu);qge=n(FRe,"STRONG",{});var h8t=s(qge);aAo=r(h8t,"m2m_100"),h8t.forEach(t),nAo=r(FRe," \u2014 "),NG=n(FRe,"A",{href:!0});var p8t=s(NG);sAo=r(p8t,"M2M100Model"),p8t.forEach(t),lAo=r(FRe," (M2M100 model)"),FRe.forEach(t),iAo=i(x),vu=n(x,"LI",{});var TRe=s(vu);jge=n(TRe,"STRONG",{});var _8t=s(jge);dAo=r(_8t,"marian"),_8t.forEach(t),cAo=r(TRe," \u2014 "),qG=n(TRe,"A",{href:!0});var u8t=s(qG);fAo=r(u8t,"MarianModel"),u8t.forEach(t),mAo=r(TRe," (Marian model)"),TRe.forEach(t),gAo=i(x),Fu=n(x,"LI",{});var MRe=s(Fu);Dge=n(MRe,"STRONG",{});var b8t=s(Dge);hAo=r(b8t,"maskformer"),b8t.forEach(t),pAo=r(MRe," \u2014 "),jG=n(MRe,"A",{href:!0});var v8t=s(jG);_Ao=r(v8t,"MaskFormerModel"),v8t.forEach(t),uAo=r(MRe," (MaskFormer model)"),MRe.forEach(t),bAo=i(x),Tu=n(x,"LI",{});var ERe=s(Tu);Gge=n(ERe,"STRONG",{});var F8t=s(Gge);vAo=r(F8t,"mbart"),F8t.forEach(t),FAo=r(ERe," \u2014 "),DG=n(ERe,"A",{href:!0});var T8t=s(DG);TAo=r(T8t,"MBartModel"),T8t.forEach(t),MAo=r(ERe," (mBART model)"),ERe.forEach(t),EAo=i(x),Mu=n(x,"LI",{});var CRe=s(Mu);Oge=n(CRe,"STRONG",{});var M8t=s(Oge);CAo=r(M8t,"mctct"),M8t.forEach(t),wAo=r(CRe," \u2014 "),GG=n(CRe,"A",{href:!0});var E8t=s(GG);AAo=r(E8t,"MCTCTModel"),E8t.forEach(t),LAo=r(CRe," (M-CTC-T model)"),CRe.forEach(t),yAo=i(x),Eu=n(x,"LI",{});var wRe=s(Eu);Vge=n(wRe,"STRONG",{});var C8t=s(Vge);xAo=r(C8t,"megatron-bert"),C8t.forEach(t),$Ao=r(wRe," \u2014 "),OG=n(wRe,"A",{href:!0});var w8t=s(OG);kAo=r(w8t,"MegatronBertModel"),w8t.forEach(t),SAo=r(wRe," (Megatron-BERT model)"),wRe.forEach(t),RAo=i(x),Cu=n(x,"LI",{});var ARe=s(Cu);Xge=n(ARe,"STRONG",{});var A8t=s(Xge);PAo=r(A8t,"mobilebert"),A8t.forEach(t),BAo=r(ARe," \u2014 "),VG=n(ARe,"A",{href:!0});var L8t=s(VG);IAo=r(L8t,"MobileBertModel"),L8t.forEach(t),NAo=r(ARe," (MobileBERT model)"),ARe.forEach(t),qAo=i(x),wu=n(x,"LI",{});var LRe=s(wu);zge=n(LRe,"STRONG",{});var y8t=s(zge);jAo=r(y8t,"mobilevit"),y8t.forEach(t),DAo=r(LRe," \u2014 "),XG=n(LRe,"A",{href:!0});var x8t=s(XG);GAo=r(x8t,"MobileViTModel"),x8t.forEach(t),OAo=r(LRe," (MobileViT model)"),LRe.forEach(t),VAo=i(x),Au=n(x,"LI",{});var yRe=s(Au);Wge=n(yRe,"STRONG",{});var $8t=s(Wge);XAo=r($8t,"mpnet"),$8t.forEach(t),zAo=r(yRe," \u2014 "),zG=n(yRe,"A",{href:!0});var k8t=s(zG);WAo=r(k8t,"MPNetModel"),k8t.forEach(t),QAo=r(yRe," (MPNet model)"),yRe.forEach(t),UAo=i(x),Lu=n(x,"LI",{});var xRe=s(Lu);Qge=n(xRe,"STRONG",{});var S8t=s(Qge);HAo=r(S8t,"mt5"),S8t.forEach(t),JAo=r(xRe," \u2014 "),WG=n(xRe,"A",{href:!0});var R8t=s(WG);YAo=r(R8t,"MT5Model"),R8t.forEach(t),KAo=r(xRe," (MT5 model)"),xRe.forEach(t),ZAo=i(x),yu=n(x,"LI",{});var $Re=s(yu);Uge=n($Re,"STRONG",{});var P8t=s(Uge);e7o=r(P8t,"mvp"),P8t.forEach(t),o7o=r($Re," \u2014 "),QG=n($Re,"A",{href:!0});var B8t=s(QG);r7o=r(B8t,"MvpModel"),B8t.forEach(t),t7o=r($Re," (MVP model)"),$Re.forEach(t),a7o=i(x),xu=n(x,"LI",{});var kRe=s(xu);Hge=n(kRe,"STRONG",{});var I8t=s(Hge);n7o=r(I8t,"nezha"),I8t.forEach(t),s7o=r(kRe," \u2014 "),UG=n(kRe,"A",{href:!0});var N8t=s(UG);l7o=r(N8t,"NezhaModel"),N8t.forEach(t),i7o=r(kRe," (Nezha model)"),kRe.forEach(t),d7o=i(x),$u=n(x,"LI",{});var SRe=s($u);Jge=n(SRe,"STRONG",{});var q8t=s(Jge);c7o=r(q8t,"nllb"),q8t.forEach(t),f7o=r(SRe," \u2014 "),HG=n(SRe,"A",{href:!0});var j8t=s(HG);m7o=r(j8t,"M2M100Model"),j8t.forEach(t),g7o=r(SRe," (NLLB model)"),SRe.forEach(t),h7o=i(x),ku=n(x,"LI",{});var RRe=s(ku);Yge=n(RRe,"STRONG",{});var D8t=s(Yge);p7o=r(D8t,"nystromformer"),D8t.forEach(t),_7o=r(RRe," \u2014 "),JG=n(RRe,"A",{href:!0});var G8t=s(JG);u7o=r(G8t,"NystromformerModel"),G8t.forEach(t),b7o=r(RRe," (Nystr\xF6mformer model)"),RRe.forEach(t),v7o=i(x),Su=n(x,"LI",{});var PRe=s(Su);Kge=n(PRe,"STRONG",{});var O8t=s(Kge);F7o=r(O8t,"openai-gpt"),O8t.forEach(t),T7o=r(PRe," \u2014 "),YG=n(PRe,"A",{href:!0});var V8t=s(YG);M7o=r(V8t,"OpenAIGPTModel"),V8t.forEach(t),E7o=r(PRe," (OpenAI GPT model)"),PRe.forEach(t),C7o=i(x),Ru=n(x,"LI",{});var BRe=s(Ru);Zge=n(BRe,"STRONG",{});var X8t=s(Zge);w7o=r(X8t,"opt"),X8t.forEach(t),A7o=r(BRe," \u2014 "),KG=n(BRe,"A",{href:!0});var z8t=s(KG);L7o=r(z8t,"OPTModel"),z8t.forEach(t),y7o=r(BRe," (OPT model)"),BRe.forEach(t),x7o=i(x),Pu=n(x,"LI",{});var IRe=s(Pu);ehe=n(IRe,"STRONG",{});var W8t=s(ehe);$7o=r(W8t,"owlvit"),W8t.forEach(t),k7o=r(IRe," \u2014 "),ZG=n(IRe,"A",{href:!0});var Q8t=s(ZG);S7o=r(Q8t,"OwlViTModel"),Q8t.forEach(t),R7o=r(IRe," (OWL-ViT model)"),IRe.forEach(t),P7o=i(x),Bu=n(x,"LI",{});var NRe=s(Bu);ohe=n(NRe,"STRONG",{});var U8t=s(ohe);B7o=r(U8t,"pegasus"),U8t.forEach(t),I7o=r(NRe," \u2014 "),eO=n(NRe,"A",{href:!0});var H8t=s(eO);N7o=r(H8t,"PegasusModel"),H8t.forEach(t),q7o=r(NRe," (Pegasus model)"),NRe.forEach(t),j7o=i(x),Iu=n(x,"LI",{});var qRe=s(Iu);rhe=n(qRe,"STRONG",{});var J8t=s(rhe);D7o=r(J8t,"perceiver"),J8t.forEach(t),G7o=r(qRe," \u2014 "),oO=n(qRe,"A",{href:!0});var Y8t=s(oO);O7o=r(Y8t,"PerceiverModel"),Y8t.forEach(t),V7o=r(qRe," (Perceiver model)"),qRe.forEach(t),X7o=i(x),Nu=n(x,"LI",{});var jRe=s(Nu);the=n(jRe,"STRONG",{});var K8t=s(the);z7o=r(K8t,"plbart"),K8t.forEach(t),W7o=r(jRe," \u2014 "),rO=n(jRe,"A",{href:!0});var Z8t=s(rO);Q7o=r(Z8t,"PLBartModel"),Z8t.forEach(t),U7o=r(jRe," (PLBart model)"),jRe.forEach(t),H7o=i(x),qu=n(x,"LI",{});var DRe=s(qu);ahe=n(DRe,"STRONG",{});var eMt=s(ahe);J7o=r(eMt,"poolformer"),eMt.forEach(t),Y7o=r(DRe," \u2014 "),tO=n(DRe,"A",{href:!0});var oMt=s(tO);K7o=r(oMt,"PoolFormerModel"),oMt.forEach(t),Z7o=r(DRe," (PoolFormer model)"),DRe.forEach(t),eLo=i(x),ju=n(x,"LI",{});var GRe=s(ju);nhe=n(GRe,"STRONG",{});var rMt=s(nhe);oLo=r(rMt,"prophetnet"),rMt.forEach(t),rLo=r(GRe," \u2014 "),aO=n(GRe,"A",{href:!0});var tMt=s(aO);tLo=r(tMt,"ProphetNetModel"),tMt.forEach(t),aLo=r(GRe," (ProphetNet model)"),GRe.forEach(t),nLo=i(x),Du=n(x,"LI",{});var ORe=s(Du);she=n(ORe,"STRONG",{});var aMt=s(she);sLo=r(aMt,"qdqbert"),aMt.forEach(t),lLo=r(ORe," \u2014 "),nO=n(ORe,"A",{href:!0});var nMt=s(nO);iLo=r(nMt,"QDQBertModel"),nMt.forEach(t),dLo=r(ORe," (QDQBert model)"),ORe.forEach(t),cLo=i(x),Gu=n(x,"LI",{});var VRe=s(Gu);lhe=n(VRe,"STRONG",{});var sMt=s(lhe);fLo=r(sMt,"reformer"),sMt.forEach(t),mLo=r(VRe," \u2014 "),sO=n(VRe,"A",{href:!0});var lMt=s(sO);gLo=r(lMt,"ReformerModel"),lMt.forEach(t),hLo=r(VRe," (Reformer model)"),VRe.forEach(t),pLo=i(x),Ou=n(x,"LI",{});var XRe=s(Ou);ihe=n(XRe,"STRONG",{});var iMt=s(ihe);_Lo=r(iMt,"regnet"),iMt.forEach(t),uLo=r(XRe," \u2014 "),lO=n(XRe,"A",{href:!0});var dMt=s(lO);bLo=r(dMt,"RegNetModel"),dMt.forEach(t),vLo=r(XRe," (RegNet model)"),XRe.forEach(t),FLo=i(x),Vu=n(x,"LI",{});var zRe=s(Vu);dhe=n(zRe,"STRONG",{});var cMt=s(dhe);TLo=r(cMt,"rembert"),cMt.forEach(t),MLo=r(zRe," \u2014 "),iO=n(zRe,"A",{href:!0});var fMt=s(iO);ELo=r(fMt,"RemBertModel"),fMt.forEach(t),CLo=r(zRe," (RemBERT model)"),zRe.forEach(t),wLo=i(x),Xu=n(x,"LI",{});var WRe=s(Xu);che=n(WRe,"STRONG",{});var mMt=s(che);ALo=r(mMt,"resnet"),mMt.forEach(t),LLo=r(WRe," \u2014 "),dO=n(WRe,"A",{href:!0});var gMt=s(dO);yLo=r(gMt,"ResNetModel"),gMt.forEach(t),xLo=r(WRe," (ResNet model)"),WRe.forEach(t),$Lo=i(x),zu=n(x,"LI",{});var QRe=s(zu);fhe=n(QRe,"STRONG",{});var hMt=s(fhe);kLo=r(hMt,"retribert"),hMt.forEach(t),SLo=r(QRe," \u2014 "),cO=n(QRe,"A",{href:!0});var pMt=s(cO);RLo=r(pMt,"RetriBertModel"),pMt.forEach(t),PLo=r(QRe," (RetriBERT model)"),QRe.forEach(t),BLo=i(x),Wu=n(x,"LI",{});var URe=s(Wu);mhe=n(URe,"STRONG",{});var _Mt=s(mhe);ILo=r(_Mt,"roberta"),_Mt.forEach(t),NLo=r(URe," \u2014 "),fO=n(URe,"A",{href:!0});var uMt=s(fO);qLo=r(uMt,"RobertaModel"),uMt.forEach(t),jLo=r(URe," (RoBERTa model)"),URe.forEach(t),DLo=i(x),Qu=n(x,"LI",{});var HRe=s(Qu);ghe=n(HRe,"STRONG",{});var bMt=s(ghe);GLo=r(bMt,"roformer"),bMt.forEach(t),OLo=r(HRe," \u2014 "),mO=n(HRe,"A",{href:!0});var vMt=s(mO);VLo=r(vMt,"RoFormerModel"),vMt.forEach(t),XLo=r(HRe," (RoFormer model)"),HRe.forEach(t),zLo=i(x),Uu=n(x,"LI",{});var JRe=s(Uu);hhe=n(JRe,"STRONG",{});var FMt=s(hhe);WLo=r(FMt,"segformer"),FMt.forEach(t),QLo=r(JRe," \u2014 "),gO=n(JRe,"A",{href:!0});var TMt=s(gO);ULo=r(TMt,"SegformerModel"),TMt.forEach(t),HLo=r(JRe," (SegFormer model)"),JRe.forEach(t),JLo=i(x),Hu=n(x,"LI",{});var YRe=s(Hu);phe=n(YRe,"STRONG",{});var MMt=s(phe);YLo=r(MMt,"sew"),MMt.forEach(t),KLo=r(YRe," \u2014 "),hO=n(YRe,"A",{href:!0});var EMt=s(hO);ZLo=r(EMt,"SEWModel"),EMt.forEach(t),eyo=r(YRe," (SEW model)"),YRe.forEach(t),oyo=i(x),Ju=n(x,"LI",{});var KRe=s(Ju);_he=n(KRe,"STRONG",{});var CMt=s(_he);ryo=r(CMt,"sew-d"),CMt.forEach(t),tyo=r(KRe," \u2014 "),pO=n(KRe,"A",{href:!0});var wMt=s(pO);ayo=r(wMt,"SEWDModel"),wMt.forEach(t),nyo=r(KRe," (SEW-D model)"),KRe.forEach(t),syo=i(x),Yu=n(x,"LI",{});var ZRe=s(Yu);uhe=n(ZRe,"STRONG",{});var AMt=s(uhe);lyo=r(AMt,"speech_to_text"),AMt.forEach(t),iyo=r(ZRe," \u2014 "),_O=n(ZRe,"A",{href:!0});var LMt=s(_O);dyo=r(LMt,"Speech2TextModel"),LMt.forEach(t),cyo=r(ZRe," (Speech2Text model)"),ZRe.forEach(t),fyo=i(x),Ku=n(x,"LI",{});var ePe=s(Ku);bhe=n(ePe,"STRONG",{});var yMt=s(bhe);myo=r(yMt,"splinter"),yMt.forEach(t),gyo=r(ePe," \u2014 "),uO=n(ePe,"A",{href:!0});var xMt=s(uO);hyo=r(xMt,"SplinterModel"),xMt.forEach(t),pyo=r(ePe," (Splinter model)"),ePe.forEach(t),_yo=i(x),Zu=n(x,"LI",{});var oPe=s(Zu);vhe=n(oPe,"STRONG",{});var $Mt=s(vhe);uyo=r($Mt,"squeezebert"),$Mt.forEach(t),byo=r(oPe," \u2014 "),bO=n(oPe,"A",{href:!0});var kMt=s(bO);vyo=r(kMt,"SqueezeBertModel"),kMt.forEach(t),Fyo=r(oPe," (SqueezeBERT model)"),oPe.forEach(t),Tyo=i(x),e2=n(x,"LI",{});var rPe=s(e2);Fhe=n(rPe,"STRONG",{});var SMt=s(Fhe);Myo=r(SMt,"swin"),SMt.forEach(t),Eyo=r(rPe," \u2014 "),vO=n(rPe,"A",{href:!0});var RMt=s(vO);Cyo=r(RMt,"SwinModel"),RMt.forEach(t),wyo=r(rPe," (Swin Transformer model)"),rPe.forEach(t),Ayo=i(x),o2=n(x,"LI",{});var tPe=s(o2);The=n(tPe,"STRONG",{});var PMt=s(The);Lyo=r(PMt,"swinv2"),PMt.forEach(t),yyo=r(tPe," \u2014 "),FO=n(tPe,"A",{href:!0});var BMt=s(FO);xyo=r(BMt,"Swinv2Model"),BMt.forEach(t),$yo=r(tPe," (Swin Transformer V2 model)"),tPe.forEach(t),kyo=i(x),r2=n(x,"LI",{});var aPe=s(r2);Mhe=n(aPe,"STRONG",{});var IMt=s(Mhe);Syo=r(IMt,"t5"),IMt.forEach(t),Ryo=r(aPe," \u2014 "),TO=n(aPe,"A",{href:!0});var NMt=s(TO);Pyo=r(NMt,"T5Model"),NMt.forEach(t),Byo=r(aPe," (T5 model)"),aPe.forEach(t),Iyo=i(x),t2=n(x,"LI",{});var nPe=s(t2);Ehe=n(nPe,"STRONG",{});var qMt=s(Ehe);Nyo=r(qMt,"tapas"),qMt.forEach(t),qyo=r(nPe," \u2014 "),MO=n(nPe,"A",{href:!0});var jMt=s(MO);jyo=r(jMt,"TapasModel"),jMt.forEach(t),Dyo=r(nPe," (TAPAS model)"),nPe.forEach(t),Gyo=i(x),a2=n(x,"LI",{});var sPe=s(a2);Che=n(sPe,"STRONG",{});var DMt=s(Che);Oyo=r(DMt,"trajectory_transformer"),DMt.forEach(t),Vyo=r(sPe," \u2014 "),EO=n(sPe,"A",{href:!0});var GMt=s(EO);Xyo=r(GMt,"TrajectoryTransformerModel"),GMt.forEach(t),zyo=r(sPe," (Trajectory Transformer model)"),sPe.forEach(t),Wyo=i(x),n2=n(x,"LI",{});var lPe=s(n2);whe=n(lPe,"STRONG",{});var OMt=s(whe);Qyo=r(OMt,"transfo-xl"),OMt.forEach(t),Uyo=r(lPe," \u2014 "),CO=n(lPe,"A",{href:!0});var VMt=s(CO);Hyo=r(VMt,"TransfoXLModel"),VMt.forEach(t),Jyo=r(lPe," (Transformer-XL model)"),lPe.forEach(t),Yyo=i(x),s2=n(x,"LI",{});var iPe=s(s2);Ahe=n(iPe,"STRONG",{});var XMt=s(Ahe);Kyo=r(XMt,"unispeech"),XMt.forEach(t),Zyo=r(iPe," \u2014 "),wO=n(iPe,"A",{href:!0});var zMt=s(wO);e9o=r(zMt,"UniSpeechModel"),zMt.forEach(t),o9o=r(iPe," (UniSpeech model)"),iPe.forEach(t),r9o=i(x),l2=n(x,"LI",{});var dPe=s(l2);Lhe=n(dPe,"STRONG",{});var WMt=s(Lhe);t9o=r(WMt,"unispeech-sat"),WMt.forEach(t),a9o=r(dPe," \u2014 "),AO=n(dPe,"A",{href:!0});var QMt=s(AO);n9o=r(QMt,"UniSpeechSatModel"),QMt.forEach(t),s9o=r(dPe," (UniSpeechSat model)"),dPe.forEach(t),l9o=i(x),i2=n(x,"LI",{});var cPe=s(i2);yhe=n(cPe,"STRONG",{});var UMt=s(yhe);i9o=r(UMt,"van"),UMt.forEach(t),d9o=r(cPe," \u2014 "),LO=n(cPe,"A",{href:!0});var HMt=s(LO);c9o=r(HMt,"VanModel"),HMt.forEach(t),f9o=r(cPe," (VAN model)"),cPe.forEach(t),m9o=i(x),d2=n(x,"LI",{});var fPe=s(d2);xhe=n(fPe,"STRONG",{});var JMt=s(xhe);g9o=r(JMt,"videomae"),JMt.forEach(t),h9o=r(fPe," \u2014 "),yO=n(fPe,"A",{href:!0});var YMt=s(yO);p9o=r(YMt,"VideoMAEModel"),YMt.forEach(t),_9o=r(fPe," (VideoMAE model)"),fPe.forEach(t),u9o=i(x),c2=n(x,"LI",{});var mPe=s(c2);$he=n(mPe,"STRONG",{});var KMt=s($he);b9o=r(KMt,"vilt"),KMt.forEach(t),v9o=r(mPe," \u2014 "),xO=n(mPe,"A",{href:!0});var ZMt=s(xO);F9o=r(ZMt,"ViltModel"),ZMt.forEach(t),T9o=r(mPe," (ViLT model)"),mPe.forEach(t),M9o=i(x),f2=n(x,"LI",{});var gPe=s(f2);khe=n(gPe,"STRONG",{});var eEt=s(khe);E9o=r(eEt,"vision-text-dual-encoder"),eEt.forEach(t),C9o=r(gPe," \u2014 "),$O=n(gPe,"A",{href:!0});var oEt=s($O);w9o=r(oEt,"VisionTextDualEncoderModel"),oEt.forEach(t),A9o=r(gPe," (VisionTextDualEncoder model)"),gPe.forEach(t),L9o=i(x),m2=n(x,"LI",{});var hPe=s(m2);She=n(hPe,"STRONG",{});var rEt=s(She);y9o=r(rEt,"visual_bert"),rEt.forEach(t),x9o=r(hPe," \u2014 "),kO=n(hPe,"A",{href:!0});var tEt=s(kO);$9o=r(tEt,"VisualBertModel"),tEt.forEach(t),k9o=r(hPe," (VisualBERT model)"),hPe.forEach(t),S9o=i(x),g2=n(x,"LI",{});var pPe=s(g2);Rhe=n(pPe,"STRONG",{});var aEt=s(Rhe);R9o=r(aEt,"vit"),aEt.forEach(t),P9o=r(pPe," \u2014 "),SO=n(pPe,"A",{href:!0});var nEt=s(SO);B9o=r(nEt,"ViTModel"),nEt.forEach(t),I9o=r(pPe," (ViT model)"),pPe.forEach(t),N9o=i(x),h2=n(x,"LI",{});var _Pe=s(h2);Phe=n(_Pe,"STRONG",{});var sEt=s(Phe);q9o=r(sEt,"vit_mae"),sEt.forEach(t),j9o=r(_Pe," \u2014 "),RO=n(_Pe,"A",{href:!0});var lEt=s(RO);D9o=r(lEt,"ViTMAEModel"),lEt.forEach(t),G9o=r(_Pe," (ViTMAE model)"),_Pe.forEach(t),O9o=i(x),p2=n(x,"LI",{});var uPe=s(p2);Bhe=n(uPe,"STRONG",{});var iEt=s(Bhe);V9o=r(iEt,"wav2vec2"),iEt.forEach(t),X9o=r(uPe," \u2014 "),PO=n(uPe,"A",{href:!0});var dEt=s(PO);z9o=r(dEt,"Wav2Vec2Model"),dEt.forEach(t),W9o=r(uPe," (Wav2Vec2 model)"),uPe.forEach(t),Q9o=i(x),_2=n(x,"LI",{});var bPe=s(_2);Ihe=n(bPe,"STRONG",{});var cEt=s(Ihe);U9o=r(cEt,"wav2vec2-conformer"),cEt.forEach(t),H9o=r(bPe," \u2014 "),BO=n(bPe,"A",{href:!0});var fEt=s(BO);J9o=r(fEt,"Wav2Vec2ConformerModel"),fEt.forEach(t),Y9o=r(bPe," (Wav2Vec2-Conformer model)"),bPe.forEach(t),K9o=i(x),u2=n(x,"LI",{});var vPe=s(u2);Nhe=n(vPe,"STRONG",{});var mEt=s(Nhe);Z9o=r(mEt,"wavlm"),mEt.forEach(t),exo=r(vPe," \u2014 "),IO=n(vPe,"A",{href:!0});var gEt=s(IO);oxo=r(gEt,"WavLMModel"),gEt.forEach(t),rxo=r(vPe," (WavLM model)"),vPe.forEach(t),txo=i(x),b2=n(x,"LI",{});var FPe=s(b2);qhe=n(FPe,"STRONG",{});var hEt=s(qhe);axo=r(hEt,"xglm"),hEt.forEach(t),nxo=r(FPe," \u2014 "),NO=n(FPe,"A",{href:!0});var pEt=s(NO);sxo=r(pEt,"XGLMModel"),pEt.forEach(t),lxo=r(FPe," (XGLM model)"),FPe.forEach(t),ixo=i(x),v2=n(x,"LI",{});var TPe=s(v2);jhe=n(TPe,"STRONG",{});var _Et=s(jhe);dxo=r(_Et,"xlm"),_Et.forEach(t),cxo=r(TPe," \u2014 "),qO=n(TPe,"A",{href:!0});var uEt=s(qO);fxo=r(uEt,"XLMModel"),uEt.forEach(t),mxo=r(TPe," (XLM model)"),TPe.forEach(t),gxo=i(x),F2=n(x,"LI",{});var MPe=s(F2);Dhe=n(MPe,"STRONG",{});var bEt=s(Dhe);hxo=r(bEt,"xlm-prophetnet"),bEt.forEach(t),pxo=r(MPe," \u2014 "),jO=n(MPe,"A",{href:!0});var vEt=s(jO);_xo=r(vEt,"XLMProphetNetModel"),vEt.forEach(t),uxo=r(MPe," (XLM-ProphetNet model)"),MPe.forEach(t),bxo=i(x),T2=n(x,"LI",{});var EPe=s(T2);Ghe=n(EPe,"STRONG",{});var FEt=s(Ghe);vxo=r(FEt,"xlm-roberta"),FEt.forEach(t),Fxo=r(EPe," \u2014 "),DO=n(EPe,"A",{href:!0});var TEt=s(DO);Txo=r(TEt,"XLMRobertaModel"),TEt.forEach(t),Mxo=r(EPe," (XLM-RoBERTa model)"),EPe.forEach(t),Exo=i(x),M2=n(x,"LI",{});var CPe=s(M2);Ohe=n(CPe,"STRONG",{});var MEt=s(Ohe);Cxo=r(MEt,"xlm-roberta-xl"),MEt.forEach(t),wxo=r(CPe," \u2014 "),GO=n(CPe,"A",{href:!0});var EEt=s(GO);Axo=r(EEt,"XLMRobertaXLModel"),EEt.forEach(t),Lxo=r(CPe," (XLM-RoBERTa-XL model)"),CPe.forEach(t),yxo=i(x),E2=n(x,"LI",{});var wPe=s(E2);Vhe=n(wPe,"STRONG",{});var CEt=s(Vhe);xxo=r(CEt,"xlnet"),CEt.forEach(t),$xo=r(wPe," \u2014 "),OO=n(wPe,"A",{href:!0});var wEt=s(OO);kxo=r(wEt,"XLNetModel"),wEt.forEach(t),Sxo=r(wPe," (XLNet model)"),wPe.forEach(t),Rxo=i(x),C2=n(x,"LI",{});var APe=s(C2);Xhe=n(APe,"STRONG",{});var AEt=s(Xhe);Pxo=r(AEt,"yolos"),AEt.forEach(t),Bxo=r(APe," \u2014 "),VO=n(APe,"A",{href:!0});var LEt=s(VO);Ixo=r(LEt,"YolosModel"),LEt.forEach(t),Nxo=r(APe," (YOLOS model)"),APe.forEach(t),qxo=i(x),w2=n(x,"LI",{});var LPe=s(w2);zhe=n(LPe,"STRONG",{});var yEt=s(zhe);jxo=r(yEt,"yoso"),yEt.forEach(t),Dxo=r(LPe," \u2014 "),XO=n(LPe,"A",{href:!0});var xEt=s(XO);Gxo=r(xEt,"YosoModel"),xEt.forEach(t),Oxo=r(LPe," (YOSO model)"),LPe.forEach(t),x.forEach(t),Vxo=i(ga),A2=n(ga,"P",{});var yPe=s(A2);Xxo=r(yPe,"The model is set in evaluation mode by default using "),Whe=n(yPe,"CODE",{});var $Et=s(Whe);zxo=r($Et,"model.eval()"),$Et.forEach(t),Wxo=r(yPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qhe=n(yPe,"CODE",{});var kEt=s(Qhe);Qxo=r(kEt,"model.train()"),kEt.forEach(t),yPe.forEach(t),Uxo=i(ga),T(L2.$$.fragment,ga),ga.forEach(t),hl.forEach(t),gUe=i(f),nd=n(f,"H2",{class:!0});var EJe=s(nd);y2=n(EJe,"A",{id:!0,class:!0,href:!0});var SEt=s(y2);Uhe=n(SEt,"SPAN",{});var REt=s(Uhe);T(Qy.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),Hxo=i(EJe),Hhe=n(EJe,"SPAN",{});var PEt=s(Hhe);Jxo=r(PEt,"AutoModelForPreTraining"),PEt.forEach(t),EJe.forEach(t),hUe=i(f),Ro=n(f,"DIV",{class:!0});var pl=s(Ro);T(Uy.$$.fragment,pl),Yxo=i(pl),sd=n(pl,"P",{});var Uae=s(sd);Kxo=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zO=n(Uae,"A",{href:!0});var BEt=s(zO);Zxo=r(BEt,"from_pretrained()"),BEt.forEach(t),e$o=r(Uae," class method or the "),WO=n(Uae,"A",{href:!0});var IEt=s(WO);o$o=r(IEt,"from_config()"),IEt.forEach(t),r$o=r(Uae,` class
method.`),Uae.forEach(t),t$o=i(pl),Hy=n(pl,"P",{});var CJe=s(Hy);a$o=r(CJe,"This class cannot be instantiated directly using "),Jhe=n(CJe,"CODE",{});var NEt=s(Jhe);n$o=r(NEt,"__init__()"),NEt.forEach(t),s$o=r(CJe," (throws an error)."),CJe.forEach(t),l$o=i(pl),gt=n(pl,"DIV",{class:!0});var u7=s(gt);T(Jy.$$.fragment,u7),i$o=i(u7),Yhe=n(u7,"P",{});var qEt=s(Yhe);d$o=r(qEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qEt.forEach(t),c$o=i(u7),ld=n(u7,"P",{});var Hae=s(ld);f$o=r(Hae,`Note:
Loading a model from its configuration file does `),Khe=n(Hae,"STRONG",{});var jEt=s(Khe);m$o=r(jEt,"not"),jEt.forEach(t),g$o=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=n(Hae,"A",{href:!0});var DEt=s(QO);h$o=r(DEt,"from_pretrained()"),DEt.forEach(t),p$o=r(Hae," to load the model weights."),Hae.forEach(t),_$o=i(u7),T(x2.$$.fragment,u7),u7.forEach(t),u$o=i(pl),Ke=n(pl,"DIV",{class:!0});var ha=s(Ke);T(Yy.$$.fragment,ha),b$o=i(ha),Zhe=n(ha,"P",{});var GEt=s(Zhe);v$o=r(GEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GEt.forEach(t),F$o=i(ha),Xa=n(ha,"P",{});var b7=s(Xa);T$o=r(b7,"The model class to instantiate is selected based on the "),epe=n(b7,"CODE",{});var OEt=s(epe);M$o=r(OEt,"model_type"),OEt.forEach(t),E$o=r(b7,` property of the config object (either
passed as an argument or loaded from `),ope=n(b7,"CODE",{});var VEt=s(ope);C$o=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),w$o=r(b7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(b7,"CODE",{});var XEt=s(rpe);A$o=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),L$o=r(b7,":"),b7.forEach(t),y$o=i(ha),G=n(ha,"UL",{});var O=s(G);$2=n(O,"LI",{});var xPe=s($2);tpe=n(xPe,"STRONG",{});var zEt=s(tpe);x$o=r(zEt,"albert"),zEt.forEach(t),$$o=r(xPe," \u2014 "),UO=n(xPe,"A",{href:!0});var WEt=s(UO);k$o=r(WEt,"AlbertForPreTraining"),WEt.forEach(t),S$o=r(xPe," (ALBERT model)"),xPe.forEach(t),R$o=i(O),k2=n(O,"LI",{});var $Pe=s(k2);ape=n($Pe,"STRONG",{});var QEt=s(ape);P$o=r(QEt,"bart"),QEt.forEach(t),B$o=r($Pe," \u2014 "),HO=n($Pe,"A",{href:!0});var UEt=s(HO);I$o=r(UEt,"BartForConditionalGeneration"),UEt.forEach(t),N$o=r($Pe," (BART model)"),$Pe.forEach(t),q$o=i(O),S2=n(O,"LI",{});var kPe=s(S2);npe=n(kPe,"STRONG",{});var HEt=s(npe);j$o=r(HEt,"bert"),HEt.forEach(t),D$o=r(kPe," \u2014 "),JO=n(kPe,"A",{href:!0});var JEt=s(JO);G$o=r(JEt,"BertForPreTraining"),JEt.forEach(t),O$o=r(kPe," (BERT model)"),kPe.forEach(t),V$o=i(O),R2=n(O,"LI",{});var SPe=s(R2);spe=n(SPe,"STRONG",{});var YEt=s(spe);X$o=r(YEt,"big_bird"),YEt.forEach(t),z$o=r(SPe," \u2014 "),YO=n(SPe,"A",{href:!0});var KEt=s(YO);W$o=r(KEt,"BigBirdForPreTraining"),KEt.forEach(t),Q$o=r(SPe," (BigBird model)"),SPe.forEach(t),U$o=i(O),P2=n(O,"LI",{});var RPe=s(P2);lpe=n(RPe,"STRONG",{});var ZEt=s(lpe);H$o=r(ZEt,"bloom"),ZEt.forEach(t),J$o=r(RPe," \u2014 "),KO=n(RPe,"A",{href:!0});var e4t=s(KO);Y$o=r(e4t,"BloomForCausalLM"),e4t.forEach(t),K$o=r(RPe," (BLOOM model)"),RPe.forEach(t),Z$o=i(O),B2=n(O,"LI",{});var PPe=s(B2);ipe=n(PPe,"STRONG",{});var o4t=s(ipe);eko=r(o4t,"camembert"),o4t.forEach(t),oko=r(PPe," \u2014 "),ZO=n(PPe,"A",{href:!0});var r4t=s(ZO);rko=r(r4t,"CamembertForMaskedLM"),r4t.forEach(t),tko=r(PPe," (CamemBERT model)"),PPe.forEach(t),ako=i(O),I2=n(O,"LI",{});var BPe=s(I2);dpe=n(BPe,"STRONG",{});var t4t=s(dpe);nko=r(t4t,"ctrl"),t4t.forEach(t),sko=r(BPe," \u2014 "),eV=n(BPe,"A",{href:!0});var a4t=s(eV);lko=r(a4t,"CTRLLMHeadModel"),a4t.forEach(t),iko=r(BPe," (CTRL model)"),BPe.forEach(t),dko=i(O),N2=n(O,"LI",{});var IPe=s(N2);cpe=n(IPe,"STRONG",{});var n4t=s(cpe);cko=r(n4t,"data2vec-text"),n4t.forEach(t),fko=r(IPe," \u2014 "),oV=n(IPe,"A",{href:!0});var s4t=s(oV);mko=r(s4t,"Data2VecTextForMaskedLM"),s4t.forEach(t),gko=r(IPe," (Data2VecText model)"),IPe.forEach(t),hko=i(O),q2=n(O,"LI",{});var NPe=s(q2);fpe=n(NPe,"STRONG",{});var l4t=s(fpe);pko=r(l4t,"deberta"),l4t.forEach(t),_ko=r(NPe," \u2014 "),rV=n(NPe,"A",{href:!0});var i4t=s(rV);uko=r(i4t,"DebertaForMaskedLM"),i4t.forEach(t),bko=r(NPe," (DeBERTa model)"),NPe.forEach(t),vko=i(O),j2=n(O,"LI",{});var qPe=s(j2);mpe=n(qPe,"STRONG",{});var d4t=s(mpe);Fko=r(d4t,"deberta-v2"),d4t.forEach(t),Tko=r(qPe," \u2014 "),tV=n(qPe,"A",{href:!0});var c4t=s(tV);Mko=r(c4t,"DebertaV2ForMaskedLM"),c4t.forEach(t),Eko=r(qPe," (DeBERTa-v2 model)"),qPe.forEach(t),Cko=i(O),D2=n(O,"LI",{});var jPe=s(D2);gpe=n(jPe,"STRONG",{});var f4t=s(gpe);wko=r(f4t,"distilbert"),f4t.forEach(t),Ako=r(jPe," \u2014 "),aV=n(jPe,"A",{href:!0});var m4t=s(aV);Lko=r(m4t,"DistilBertForMaskedLM"),m4t.forEach(t),yko=r(jPe," (DistilBERT model)"),jPe.forEach(t),xko=i(O),G2=n(O,"LI",{});var DPe=s(G2);hpe=n(DPe,"STRONG",{});var g4t=s(hpe);$ko=r(g4t,"electra"),g4t.forEach(t),kko=r(DPe," \u2014 "),nV=n(DPe,"A",{href:!0});var h4t=s(nV);Sko=r(h4t,"ElectraForPreTraining"),h4t.forEach(t),Rko=r(DPe," (ELECTRA model)"),DPe.forEach(t),Pko=i(O),O2=n(O,"LI",{});var GPe=s(O2);ppe=n(GPe,"STRONG",{});var p4t=s(ppe);Bko=r(p4t,"flaubert"),p4t.forEach(t),Iko=r(GPe," \u2014 "),sV=n(GPe,"A",{href:!0});var _4t=s(sV);Nko=r(_4t,"FlaubertWithLMHeadModel"),_4t.forEach(t),qko=r(GPe," (FlauBERT model)"),GPe.forEach(t),jko=i(O),V2=n(O,"LI",{});var OPe=s(V2);_pe=n(OPe,"STRONG",{});var u4t=s(_pe);Dko=r(u4t,"flava"),u4t.forEach(t),Gko=r(OPe," \u2014 "),lV=n(OPe,"A",{href:!0});var b4t=s(lV);Oko=r(b4t,"FlavaForPreTraining"),b4t.forEach(t),Vko=r(OPe," (FLAVA model)"),OPe.forEach(t),Xko=i(O),X2=n(O,"LI",{});var VPe=s(X2);upe=n(VPe,"STRONG",{});var v4t=s(upe);zko=r(v4t,"fnet"),v4t.forEach(t),Wko=r(VPe," \u2014 "),iV=n(VPe,"A",{href:!0});var F4t=s(iV);Qko=r(F4t,"FNetForPreTraining"),F4t.forEach(t),Uko=r(VPe," (FNet model)"),VPe.forEach(t),Hko=i(O),z2=n(O,"LI",{});var XPe=s(z2);bpe=n(XPe,"STRONG",{});var T4t=s(bpe);Jko=r(T4t,"fsmt"),T4t.forEach(t),Yko=r(XPe," \u2014 "),dV=n(XPe,"A",{href:!0});var M4t=s(dV);Kko=r(M4t,"FSMTForConditionalGeneration"),M4t.forEach(t),Zko=r(XPe," (FairSeq Machine-Translation model)"),XPe.forEach(t),eSo=i(O),W2=n(O,"LI",{});var zPe=s(W2);vpe=n(zPe,"STRONG",{});var E4t=s(vpe);oSo=r(E4t,"funnel"),E4t.forEach(t),rSo=r(zPe," \u2014 "),cV=n(zPe,"A",{href:!0});var C4t=s(cV);tSo=r(C4t,"FunnelForPreTraining"),C4t.forEach(t),aSo=r(zPe," (Funnel Transformer model)"),zPe.forEach(t),nSo=i(O),Q2=n(O,"LI",{});var WPe=s(Q2);Fpe=n(WPe,"STRONG",{});var w4t=s(Fpe);sSo=r(w4t,"gpt2"),w4t.forEach(t),lSo=r(WPe," \u2014 "),fV=n(WPe,"A",{href:!0});var A4t=s(fV);iSo=r(A4t,"GPT2LMHeadModel"),A4t.forEach(t),dSo=r(WPe," (OpenAI GPT-2 model)"),WPe.forEach(t),cSo=i(O),U2=n(O,"LI",{});var QPe=s(U2);Tpe=n(QPe,"STRONG",{});var L4t=s(Tpe);fSo=r(L4t,"ibert"),L4t.forEach(t),mSo=r(QPe," \u2014 "),mV=n(QPe,"A",{href:!0});var y4t=s(mV);gSo=r(y4t,"IBertForMaskedLM"),y4t.forEach(t),hSo=r(QPe," (I-BERT model)"),QPe.forEach(t),pSo=i(O),H2=n(O,"LI",{});var UPe=s(H2);Mpe=n(UPe,"STRONG",{});var x4t=s(Mpe);_So=r(x4t,"layoutlm"),x4t.forEach(t),uSo=r(UPe," \u2014 "),gV=n(UPe,"A",{href:!0});var $4t=s(gV);bSo=r($4t,"LayoutLMForMaskedLM"),$4t.forEach(t),vSo=r(UPe," (LayoutLM model)"),UPe.forEach(t),FSo=i(O),J2=n(O,"LI",{});var HPe=s(J2);Epe=n(HPe,"STRONG",{});var k4t=s(Epe);TSo=r(k4t,"longformer"),k4t.forEach(t),MSo=r(HPe," \u2014 "),hV=n(HPe,"A",{href:!0});var S4t=s(hV);ESo=r(S4t,"LongformerForMaskedLM"),S4t.forEach(t),CSo=r(HPe," (Longformer model)"),HPe.forEach(t),wSo=i(O),Y2=n(O,"LI",{});var JPe=s(Y2);Cpe=n(JPe,"STRONG",{});var R4t=s(Cpe);ASo=r(R4t,"luke"),R4t.forEach(t),LSo=r(JPe," \u2014 "),pV=n(JPe,"A",{href:!0});var P4t=s(pV);ySo=r(P4t,"LukeForMaskedLM"),P4t.forEach(t),xSo=r(JPe," (LUKE model)"),JPe.forEach(t),$So=i(O),K2=n(O,"LI",{});var YPe=s(K2);wpe=n(YPe,"STRONG",{});var B4t=s(wpe);kSo=r(B4t,"lxmert"),B4t.forEach(t),SSo=r(YPe," \u2014 "),_V=n(YPe,"A",{href:!0});var I4t=s(_V);RSo=r(I4t,"LxmertForPreTraining"),I4t.forEach(t),PSo=r(YPe," (LXMERT model)"),YPe.forEach(t),BSo=i(O),Z2=n(O,"LI",{});var KPe=s(Z2);Ape=n(KPe,"STRONG",{});var N4t=s(Ape);ISo=r(N4t,"megatron-bert"),N4t.forEach(t),NSo=r(KPe," \u2014 "),uV=n(KPe,"A",{href:!0});var q4t=s(uV);qSo=r(q4t,"MegatronBertForPreTraining"),q4t.forEach(t),jSo=r(KPe," (Megatron-BERT model)"),KPe.forEach(t),DSo=i(O),e0=n(O,"LI",{});var ZPe=s(e0);Lpe=n(ZPe,"STRONG",{});var j4t=s(Lpe);GSo=r(j4t,"mobilebert"),j4t.forEach(t),OSo=r(ZPe," \u2014 "),bV=n(ZPe,"A",{href:!0});var D4t=s(bV);VSo=r(D4t,"MobileBertForPreTraining"),D4t.forEach(t),XSo=r(ZPe," (MobileBERT model)"),ZPe.forEach(t),zSo=i(O),o0=n(O,"LI",{});var eBe=s(o0);ype=n(eBe,"STRONG",{});var G4t=s(ype);WSo=r(G4t,"mpnet"),G4t.forEach(t),QSo=r(eBe," \u2014 "),vV=n(eBe,"A",{href:!0});var O4t=s(vV);USo=r(O4t,"MPNetForMaskedLM"),O4t.forEach(t),HSo=r(eBe," (MPNet model)"),eBe.forEach(t),JSo=i(O),r0=n(O,"LI",{});var oBe=s(r0);xpe=n(oBe,"STRONG",{});var V4t=s(xpe);YSo=r(V4t,"mvp"),V4t.forEach(t),KSo=r(oBe," \u2014 "),FV=n(oBe,"A",{href:!0});var X4t=s(FV);ZSo=r(X4t,"MvpForConditionalGeneration"),X4t.forEach(t),eRo=r(oBe," (MVP model)"),oBe.forEach(t),oRo=i(O),t0=n(O,"LI",{});var rBe=s(t0);$pe=n(rBe,"STRONG",{});var z4t=s($pe);rRo=r(z4t,"nezha"),z4t.forEach(t),tRo=r(rBe," \u2014 "),TV=n(rBe,"A",{href:!0});var W4t=s(TV);aRo=r(W4t,"NezhaForPreTraining"),W4t.forEach(t),nRo=r(rBe," (Nezha model)"),rBe.forEach(t),sRo=i(O),a0=n(O,"LI",{});var tBe=s(a0);kpe=n(tBe,"STRONG",{});var Q4t=s(kpe);lRo=r(Q4t,"openai-gpt"),Q4t.forEach(t),iRo=r(tBe," \u2014 "),MV=n(tBe,"A",{href:!0});var U4t=s(MV);dRo=r(U4t,"OpenAIGPTLMHeadModel"),U4t.forEach(t),cRo=r(tBe," (OpenAI GPT model)"),tBe.forEach(t),fRo=i(O),n0=n(O,"LI",{});var aBe=s(n0);Spe=n(aBe,"STRONG",{});var H4t=s(Spe);mRo=r(H4t,"retribert"),H4t.forEach(t),gRo=r(aBe," \u2014 "),EV=n(aBe,"A",{href:!0});var J4t=s(EV);hRo=r(J4t,"RetriBertModel"),J4t.forEach(t),pRo=r(aBe," (RetriBERT model)"),aBe.forEach(t),_Ro=i(O),s0=n(O,"LI",{});var nBe=s(s0);Rpe=n(nBe,"STRONG",{});var Y4t=s(Rpe);uRo=r(Y4t,"roberta"),Y4t.forEach(t),bRo=r(nBe," \u2014 "),CV=n(nBe,"A",{href:!0});var K4t=s(CV);vRo=r(K4t,"RobertaForMaskedLM"),K4t.forEach(t),FRo=r(nBe," (RoBERTa model)"),nBe.forEach(t),TRo=i(O),l0=n(O,"LI",{});var sBe=s(l0);Ppe=n(sBe,"STRONG",{});var Z4t=s(Ppe);MRo=r(Z4t,"splinter"),Z4t.forEach(t),ERo=r(sBe," \u2014 "),wV=n(sBe,"A",{href:!0});var eCt=s(wV);CRo=r(eCt,"SplinterForPreTraining"),eCt.forEach(t),wRo=r(sBe," (Splinter model)"),sBe.forEach(t),ARo=i(O),i0=n(O,"LI",{});var lBe=s(i0);Bpe=n(lBe,"STRONG",{});var oCt=s(Bpe);LRo=r(oCt,"squeezebert"),oCt.forEach(t),yRo=r(lBe," \u2014 "),AV=n(lBe,"A",{href:!0});var rCt=s(AV);xRo=r(rCt,"SqueezeBertForMaskedLM"),rCt.forEach(t),$Ro=r(lBe," (SqueezeBERT model)"),lBe.forEach(t),kRo=i(O),d0=n(O,"LI",{});var iBe=s(d0);Ipe=n(iBe,"STRONG",{});var tCt=s(Ipe);SRo=r(tCt,"t5"),tCt.forEach(t),RRo=r(iBe," \u2014 "),LV=n(iBe,"A",{href:!0});var aCt=s(LV);PRo=r(aCt,"T5ForConditionalGeneration"),aCt.forEach(t),BRo=r(iBe," (T5 model)"),iBe.forEach(t),IRo=i(O),c0=n(O,"LI",{});var dBe=s(c0);Npe=n(dBe,"STRONG",{});var nCt=s(Npe);NRo=r(nCt,"tapas"),nCt.forEach(t),qRo=r(dBe," \u2014 "),yV=n(dBe,"A",{href:!0});var sCt=s(yV);jRo=r(sCt,"TapasForMaskedLM"),sCt.forEach(t),DRo=r(dBe," (TAPAS model)"),dBe.forEach(t),GRo=i(O),f0=n(O,"LI",{});var cBe=s(f0);qpe=n(cBe,"STRONG",{});var lCt=s(qpe);ORo=r(lCt,"transfo-xl"),lCt.forEach(t),VRo=r(cBe," \u2014 "),xV=n(cBe,"A",{href:!0});var iCt=s(xV);XRo=r(iCt,"TransfoXLLMHeadModel"),iCt.forEach(t),zRo=r(cBe," (Transformer-XL model)"),cBe.forEach(t),WRo=i(O),m0=n(O,"LI",{});var fBe=s(m0);jpe=n(fBe,"STRONG",{});var dCt=s(jpe);QRo=r(dCt,"unispeech"),dCt.forEach(t),URo=r(fBe," \u2014 "),$V=n(fBe,"A",{href:!0});var cCt=s($V);HRo=r(cCt,"UniSpeechForPreTraining"),cCt.forEach(t),JRo=r(fBe," (UniSpeech model)"),fBe.forEach(t),YRo=i(O),g0=n(O,"LI",{});var mBe=s(g0);Dpe=n(mBe,"STRONG",{});var fCt=s(Dpe);KRo=r(fCt,"unispeech-sat"),fCt.forEach(t),ZRo=r(mBe," \u2014 "),kV=n(mBe,"A",{href:!0});var mCt=s(kV);ePo=r(mCt,"UniSpeechSatForPreTraining"),mCt.forEach(t),oPo=r(mBe," (UniSpeechSat model)"),mBe.forEach(t),rPo=i(O),h0=n(O,"LI",{});var gBe=s(h0);Gpe=n(gBe,"STRONG",{});var gCt=s(Gpe);tPo=r(gCt,"videomae"),gCt.forEach(t),aPo=r(gBe," \u2014 "),SV=n(gBe,"A",{href:!0});var hCt=s(SV);nPo=r(hCt,"VideoMAEForPreTraining"),hCt.forEach(t),sPo=r(gBe," (VideoMAE model)"),gBe.forEach(t),lPo=i(O),p0=n(O,"LI",{});var hBe=s(p0);Ope=n(hBe,"STRONG",{});var pCt=s(Ope);iPo=r(pCt,"visual_bert"),pCt.forEach(t),dPo=r(hBe," \u2014 "),RV=n(hBe,"A",{href:!0});var _Ct=s(RV);cPo=r(_Ct,"VisualBertForPreTraining"),_Ct.forEach(t),fPo=r(hBe," (VisualBERT model)"),hBe.forEach(t),mPo=i(O),_0=n(O,"LI",{});var pBe=s(_0);Vpe=n(pBe,"STRONG",{});var uCt=s(Vpe);gPo=r(uCt,"vit_mae"),uCt.forEach(t),hPo=r(pBe," \u2014 "),PV=n(pBe,"A",{href:!0});var bCt=s(PV);pPo=r(bCt,"ViTMAEForPreTraining"),bCt.forEach(t),_Po=r(pBe," (ViTMAE model)"),pBe.forEach(t),uPo=i(O),u0=n(O,"LI",{});var _Be=s(u0);Xpe=n(_Be,"STRONG",{});var vCt=s(Xpe);bPo=r(vCt,"wav2vec2"),vCt.forEach(t),vPo=r(_Be," \u2014 "),BV=n(_Be,"A",{href:!0});var FCt=s(BV);FPo=r(FCt,"Wav2Vec2ForPreTraining"),FCt.forEach(t),TPo=r(_Be," (Wav2Vec2 model)"),_Be.forEach(t),MPo=i(O),b0=n(O,"LI",{});var uBe=s(b0);zpe=n(uBe,"STRONG",{});var TCt=s(zpe);EPo=r(TCt,"wav2vec2-conformer"),TCt.forEach(t),CPo=r(uBe," \u2014 "),IV=n(uBe,"A",{href:!0});var MCt=s(IV);wPo=r(MCt,"Wav2Vec2ConformerForPreTraining"),MCt.forEach(t),APo=r(uBe," (Wav2Vec2-Conformer model)"),uBe.forEach(t),LPo=i(O),v0=n(O,"LI",{});var bBe=s(v0);Wpe=n(bBe,"STRONG",{});var ECt=s(Wpe);yPo=r(ECt,"xlm"),ECt.forEach(t),xPo=r(bBe," \u2014 "),NV=n(bBe,"A",{href:!0});var CCt=s(NV);$Po=r(CCt,"XLMWithLMHeadModel"),CCt.forEach(t),kPo=r(bBe," (XLM model)"),bBe.forEach(t),SPo=i(O),F0=n(O,"LI",{});var vBe=s(F0);Qpe=n(vBe,"STRONG",{});var wCt=s(Qpe);RPo=r(wCt,"xlm-roberta"),wCt.forEach(t),PPo=r(vBe," \u2014 "),qV=n(vBe,"A",{href:!0});var ACt=s(qV);BPo=r(ACt,"XLMRobertaForMaskedLM"),ACt.forEach(t),IPo=r(vBe," (XLM-RoBERTa model)"),vBe.forEach(t),NPo=i(O),T0=n(O,"LI",{});var FBe=s(T0);Upe=n(FBe,"STRONG",{});var LCt=s(Upe);qPo=r(LCt,"xlm-roberta-xl"),LCt.forEach(t),jPo=r(FBe," \u2014 "),jV=n(FBe,"A",{href:!0});var yCt=s(jV);DPo=r(yCt,"XLMRobertaXLForMaskedLM"),yCt.forEach(t),GPo=r(FBe," (XLM-RoBERTa-XL model)"),FBe.forEach(t),OPo=i(O),M0=n(O,"LI",{});var TBe=s(M0);Hpe=n(TBe,"STRONG",{});var xCt=s(Hpe);VPo=r(xCt,"xlnet"),xCt.forEach(t),XPo=r(TBe," \u2014 "),DV=n(TBe,"A",{href:!0});var $Ct=s(DV);zPo=r($Ct,"XLNetLMHeadModel"),$Ct.forEach(t),WPo=r(TBe," (XLNet model)"),TBe.forEach(t),O.forEach(t),QPo=i(ha),E0=n(ha,"P",{});var MBe=s(E0);UPo=r(MBe,"The model is set in evaluation mode by default using "),Jpe=n(MBe,"CODE",{});var kCt=s(Jpe);HPo=r(kCt,"model.eval()"),kCt.forEach(t),JPo=r(MBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=n(MBe,"CODE",{});var SCt=s(Ype);YPo=r(SCt,"model.train()"),SCt.forEach(t),MBe.forEach(t),KPo=i(ha),T(C0.$$.fragment,ha),ha.forEach(t),pl.forEach(t),pUe=i(f),id=n(f,"H2",{class:!0});var wJe=s(id);w0=n(wJe,"A",{id:!0,class:!0,href:!0});var RCt=s(w0);Kpe=n(RCt,"SPAN",{});var PCt=s(Kpe);T(Ky.$$.fragment,PCt),PCt.forEach(t),RCt.forEach(t),ZPo=i(wJe),Zpe=n(wJe,"SPAN",{});var BCt=s(Zpe);eBo=r(BCt,"AutoModelForCausalLM"),BCt.forEach(t),wJe.forEach(t),_Ue=i(f),Po=n(f,"DIV",{class:!0});var _l=s(Po);T(Zy.$$.fragment,_l),oBo=i(_l),dd=n(_l,"P",{});var Jae=s(dd);rBo=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GV=n(Jae,"A",{href:!0});var ICt=s(GV);tBo=r(ICt,"from_pretrained()"),ICt.forEach(t),aBo=r(Jae," class method or the "),OV=n(Jae,"A",{href:!0});var NCt=s(OV);nBo=r(NCt,"from_config()"),NCt.forEach(t),sBo=r(Jae,` class
method.`),Jae.forEach(t),lBo=i(_l),e9=n(_l,"P",{});var AJe=s(e9);iBo=r(AJe,"This class cannot be instantiated directly using "),e_e=n(AJe,"CODE",{});var qCt=s(e_e);dBo=r(qCt,"__init__()"),qCt.forEach(t),cBo=r(AJe," (throws an error)."),AJe.forEach(t),fBo=i(_l),ht=n(_l,"DIV",{class:!0});var v7=s(ht);T(o9.$$.fragment,v7),mBo=i(v7),o_e=n(v7,"P",{});var jCt=s(o_e);gBo=r(jCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jCt.forEach(t),hBo=i(v7),cd=n(v7,"P",{});var Yae=s(cd);pBo=r(Yae,`Note:
Loading a model from its configuration file does `),r_e=n(Yae,"STRONG",{});var DCt=s(r_e);_Bo=r(DCt,"not"),DCt.forEach(t),uBo=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(Yae,"A",{href:!0});var GCt=s(VV);bBo=r(GCt,"from_pretrained()"),GCt.forEach(t),vBo=r(Yae," to load the model weights."),Yae.forEach(t),FBo=i(v7),T(A0.$$.fragment,v7),v7.forEach(t),TBo=i(_l),Ze=n(_l,"DIV",{class:!0});var pa=s(Ze);T(r9.$$.fragment,pa),MBo=i(pa),t_e=n(pa,"P",{});var OCt=s(t_e);EBo=r(OCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),OCt.forEach(t),CBo=i(pa),za=n(pa,"P",{});var F7=s(za);wBo=r(F7,"The model class to instantiate is selected based on the "),a_e=n(F7,"CODE",{});var VCt=s(a_e);ABo=r(VCt,"model_type"),VCt.forEach(t),LBo=r(F7,` property of the config object (either
passed as an argument or loaded from `),n_e=n(F7,"CODE",{});var XCt=s(n_e);yBo=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),xBo=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(F7,"CODE",{});var zCt=s(s_e);$Bo=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),kBo=r(F7,":"),F7.forEach(t),SBo=i(pa),z=n(pa,"UL",{});var W=s(z);L0=n(W,"LI",{});var EBe=s(L0);l_e=n(EBe,"STRONG",{});var WCt=s(l_e);RBo=r(WCt,"bart"),WCt.forEach(t),PBo=r(EBe," \u2014 "),XV=n(EBe,"A",{href:!0});var QCt=s(XV);BBo=r(QCt,"BartForCausalLM"),QCt.forEach(t),IBo=r(EBe," (BART model)"),EBe.forEach(t),NBo=i(W),y0=n(W,"LI",{});var CBe=s(y0);i_e=n(CBe,"STRONG",{});var UCt=s(i_e);qBo=r(UCt,"bert"),UCt.forEach(t),jBo=r(CBe," \u2014 "),zV=n(CBe,"A",{href:!0});var HCt=s(zV);DBo=r(HCt,"BertLMHeadModel"),HCt.forEach(t),GBo=r(CBe," (BERT model)"),CBe.forEach(t),OBo=i(W),x0=n(W,"LI",{});var wBe=s(x0);d_e=n(wBe,"STRONG",{});var JCt=s(d_e);VBo=r(JCt,"bert-generation"),JCt.forEach(t),XBo=r(wBe," \u2014 "),WV=n(wBe,"A",{href:!0});var YCt=s(WV);zBo=r(YCt,"BertGenerationDecoder"),YCt.forEach(t),WBo=r(wBe," (Bert Generation model)"),wBe.forEach(t),QBo=i(W),$0=n(W,"LI",{});var ABe=s($0);c_e=n(ABe,"STRONG",{});var KCt=s(c_e);UBo=r(KCt,"big_bird"),KCt.forEach(t),HBo=r(ABe," \u2014 "),QV=n(ABe,"A",{href:!0});var ZCt=s(QV);JBo=r(ZCt,"BigBirdForCausalLM"),ZCt.forEach(t),YBo=r(ABe," (BigBird model)"),ABe.forEach(t),KBo=i(W),k0=n(W,"LI",{});var LBe=s(k0);f_e=n(LBe,"STRONG",{});var e3t=s(f_e);ZBo=r(e3t,"bigbird_pegasus"),e3t.forEach(t),eIo=r(LBe," \u2014 "),UV=n(LBe,"A",{href:!0});var o3t=s(UV);oIo=r(o3t,"BigBirdPegasusForCausalLM"),o3t.forEach(t),rIo=r(LBe," (BigBird-Pegasus model)"),LBe.forEach(t),tIo=i(W),S0=n(W,"LI",{});var yBe=s(S0);m_e=n(yBe,"STRONG",{});var r3t=s(m_e);aIo=r(r3t,"blenderbot"),r3t.forEach(t),nIo=r(yBe," \u2014 "),HV=n(yBe,"A",{href:!0});var t3t=s(HV);sIo=r(t3t,"BlenderbotForCausalLM"),t3t.forEach(t),lIo=r(yBe," (Blenderbot model)"),yBe.forEach(t),iIo=i(W),R0=n(W,"LI",{});var xBe=s(R0);g_e=n(xBe,"STRONG",{});var a3t=s(g_e);dIo=r(a3t,"blenderbot-small"),a3t.forEach(t),cIo=r(xBe," \u2014 "),JV=n(xBe,"A",{href:!0});var n3t=s(JV);fIo=r(n3t,"BlenderbotSmallForCausalLM"),n3t.forEach(t),mIo=r(xBe," (BlenderbotSmall model)"),xBe.forEach(t),gIo=i(W),P0=n(W,"LI",{});var $Be=s(P0);h_e=n($Be,"STRONG",{});var s3t=s(h_e);hIo=r(s3t,"bloom"),s3t.forEach(t),pIo=r($Be," \u2014 "),YV=n($Be,"A",{href:!0});var l3t=s(YV);_Io=r(l3t,"BloomForCausalLM"),l3t.forEach(t),uIo=r($Be," (BLOOM model)"),$Be.forEach(t),bIo=i(W),B0=n(W,"LI",{});var kBe=s(B0);p_e=n(kBe,"STRONG",{});var i3t=s(p_e);vIo=r(i3t,"camembert"),i3t.forEach(t),FIo=r(kBe," \u2014 "),KV=n(kBe,"A",{href:!0});var d3t=s(KV);TIo=r(d3t,"CamembertForCausalLM"),d3t.forEach(t),MIo=r(kBe," (CamemBERT model)"),kBe.forEach(t),EIo=i(W),I0=n(W,"LI",{});var SBe=s(I0);__e=n(SBe,"STRONG",{});var c3t=s(__e);CIo=r(c3t,"codegen"),c3t.forEach(t),wIo=r(SBe," \u2014 "),ZV=n(SBe,"A",{href:!0});var f3t=s(ZV);AIo=r(f3t,"CodeGenForCausalLM"),f3t.forEach(t),LIo=r(SBe," (CodeGen model)"),SBe.forEach(t),yIo=i(W),N0=n(W,"LI",{});var RBe=s(N0);u_e=n(RBe,"STRONG",{});var m3t=s(u_e);xIo=r(m3t,"ctrl"),m3t.forEach(t),$Io=r(RBe," \u2014 "),eX=n(RBe,"A",{href:!0});var g3t=s(eX);kIo=r(g3t,"CTRLLMHeadModel"),g3t.forEach(t),SIo=r(RBe," (CTRL model)"),RBe.forEach(t),RIo=i(W),q0=n(W,"LI",{});var PBe=s(q0);b_e=n(PBe,"STRONG",{});var h3t=s(b_e);PIo=r(h3t,"data2vec-text"),h3t.forEach(t),BIo=r(PBe," \u2014 "),oX=n(PBe,"A",{href:!0});var p3t=s(oX);IIo=r(p3t,"Data2VecTextForCausalLM"),p3t.forEach(t),NIo=r(PBe," (Data2VecText model)"),PBe.forEach(t),qIo=i(W),j0=n(W,"LI",{});var BBe=s(j0);v_e=n(BBe,"STRONG",{});var _3t=s(v_e);jIo=r(_3t,"electra"),_3t.forEach(t),DIo=r(BBe," \u2014 "),rX=n(BBe,"A",{href:!0});var u3t=s(rX);GIo=r(u3t,"ElectraForCausalLM"),u3t.forEach(t),OIo=r(BBe," (ELECTRA model)"),BBe.forEach(t),VIo=i(W),D0=n(W,"LI",{});var IBe=s(D0);F_e=n(IBe,"STRONG",{});var b3t=s(F_e);XIo=r(b3t,"gpt2"),b3t.forEach(t),zIo=r(IBe," \u2014 "),tX=n(IBe,"A",{href:!0});var v3t=s(tX);WIo=r(v3t,"GPT2LMHeadModel"),v3t.forEach(t),QIo=r(IBe," (OpenAI GPT-2 model)"),IBe.forEach(t),UIo=i(W),G0=n(W,"LI",{});var NBe=s(G0);T_e=n(NBe,"STRONG",{});var F3t=s(T_e);HIo=r(F3t,"gpt_neo"),F3t.forEach(t),JIo=r(NBe," \u2014 "),aX=n(NBe,"A",{href:!0});var T3t=s(aX);YIo=r(T3t,"GPTNeoForCausalLM"),T3t.forEach(t),KIo=r(NBe," (GPT Neo model)"),NBe.forEach(t),ZIo=i(W),O0=n(W,"LI",{});var qBe=s(O0);M_e=n(qBe,"STRONG",{});var M3t=s(M_e);eNo=r(M3t,"gpt_neox"),M3t.forEach(t),oNo=r(qBe," \u2014 "),nX=n(qBe,"A",{href:!0});var E3t=s(nX);rNo=r(E3t,"GPTNeoXForCausalLM"),E3t.forEach(t),tNo=r(qBe," (GPT NeoX model)"),qBe.forEach(t),aNo=i(W),V0=n(W,"LI",{});var jBe=s(V0);E_e=n(jBe,"STRONG",{});var C3t=s(E_e);nNo=r(C3t,"gptj"),C3t.forEach(t),sNo=r(jBe," \u2014 "),sX=n(jBe,"A",{href:!0});var w3t=s(sX);lNo=r(w3t,"GPTJForCausalLM"),w3t.forEach(t),iNo=r(jBe," (GPT-J model)"),jBe.forEach(t),dNo=i(W),X0=n(W,"LI",{});var DBe=s(X0);C_e=n(DBe,"STRONG",{});var A3t=s(C_e);cNo=r(A3t,"marian"),A3t.forEach(t),fNo=r(DBe," \u2014 "),lX=n(DBe,"A",{href:!0});var L3t=s(lX);mNo=r(L3t,"MarianForCausalLM"),L3t.forEach(t),gNo=r(DBe," (Marian model)"),DBe.forEach(t),hNo=i(W),z0=n(W,"LI",{});var GBe=s(z0);w_e=n(GBe,"STRONG",{});var y3t=s(w_e);pNo=r(y3t,"mbart"),y3t.forEach(t),_No=r(GBe," \u2014 "),iX=n(GBe,"A",{href:!0});var x3t=s(iX);uNo=r(x3t,"MBartForCausalLM"),x3t.forEach(t),bNo=r(GBe," (mBART model)"),GBe.forEach(t),vNo=i(W),W0=n(W,"LI",{});var OBe=s(W0);A_e=n(OBe,"STRONG",{});var $3t=s(A_e);FNo=r($3t,"megatron-bert"),$3t.forEach(t),TNo=r(OBe," \u2014 "),dX=n(OBe,"A",{href:!0});var k3t=s(dX);MNo=r(k3t,"MegatronBertForCausalLM"),k3t.forEach(t),ENo=r(OBe," (Megatron-BERT model)"),OBe.forEach(t),CNo=i(W),Q0=n(W,"LI",{});var VBe=s(Q0);L_e=n(VBe,"STRONG",{});var S3t=s(L_e);wNo=r(S3t,"mvp"),S3t.forEach(t),ANo=r(VBe," \u2014 "),cX=n(VBe,"A",{href:!0});var R3t=s(cX);LNo=r(R3t,"MvpForCausalLM"),R3t.forEach(t),yNo=r(VBe," (MVP model)"),VBe.forEach(t),xNo=i(W),U0=n(W,"LI",{});var XBe=s(U0);y_e=n(XBe,"STRONG",{});var P3t=s(y_e);$No=r(P3t,"openai-gpt"),P3t.forEach(t),kNo=r(XBe," \u2014 "),fX=n(XBe,"A",{href:!0});var B3t=s(fX);SNo=r(B3t,"OpenAIGPTLMHeadModel"),B3t.forEach(t),RNo=r(XBe," (OpenAI GPT model)"),XBe.forEach(t),PNo=i(W),H0=n(W,"LI",{});var zBe=s(H0);x_e=n(zBe,"STRONG",{});var I3t=s(x_e);BNo=r(I3t,"opt"),I3t.forEach(t),INo=r(zBe," \u2014 "),mX=n(zBe,"A",{href:!0});var N3t=s(mX);NNo=r(N3t,"OPTForCausalLM"),N3t.forEach(t),qNo=r(zBe," (OPT model)"),zBe.forEach(t),jNo=i(W),J0=n(W,"LI",{});var WBe=s(J0);$_e=n(WBe,"STRONG",{});var q3t=s($_e);DNo=r(q3t,"pegasus"),q3t.forEach(t),GNo=r(WBe," \u2014 "),gX=n(WBe,"A",{href:!0});var j3t=s(gX);ONo=r(j3t,"PegasusForCausalLM"),j3t.forEach(t),VNo=r(WBe," (Pegasus model)"),WBe.forEach(t),XNo=i(W),Y0=n(W,"LI",{});var QBe=s(Y0);k_e=n(QBe,"STRONG",{});var D3t=s(k_e);zNo=r(D3t,"plbart"),D3t.forEach(t),WNo=r(QBe," \u2014 "),hX=n(QBe,"A",{href:!0});var G3t=s(hX);QNo=r(G3t,"PLBartForCausalLM"),G3t.forEach(t),UNo=r(QBe," (PLBart model)"),QBe.forEach(t),HNo=i(W),K0=n(W,"LI",{});var UBe=s(K0);S_e=n(UBe,"STRONG",{});var O3t=s(S_e);JNo=r(O3t,"prophetnet"),O3t.forEach(t),YNo=r(UBe," \u2014 "),pX=n(UBe,"A",{href:!0});var V3t=s(pX);KNo=r(V3t,"ProphetNetForCausalLM"),V3t.forEach(t),ZNo=r(UBe," (ProphetNet model)"),UBe.forEach(t),eqo=i(W),Z0=n(W,"LI",{});var HBe=s(Z0);R_e=n(HBe,"STRONG",{});var X3t=s(R_e);oqo=r(X3t,"qdqbert"),X3t.forEach(t),rqo=r(HBe," \u2014 "),_X=n(HBe,"A",{href:!0});var z3t=s(_X);tqo=r(z3t,"QDQBertLMHeadModel"),z3t.forEach(t),aqo=r(HBe," (QDQBert model)"),HBe.forEach(t),nqo=i(W),e1=n(W,"LI",{});var JBe=s(e1);P_e=n(JBe,"STRONG",{});var W3t=s(P_e);sqo=r(W3t,"reformer"),W3t.forEach(t),lqo=r(JBe," \u2014 "),uX=n(JBe,"A",{href:!0});var Q3t=s(uX);iqo=r(Q3t,"ReformerModelWithLMHead"),Q3t.forEach(t),dqo=r(JBe," (Reformer model)"),JBe.forEach(t),cqo=i(W),o1=n(W,"LI",{});var YBe=s(o1);B_e=n(YBe,"STRONG",{});var U3t=s(B_e);fqo=r(U3t,"rembert"),U3t.forEach(t),mqo=r(YBe," \u2014 "),bX=n(YBe,"A",{href:!0});var H3t=s(bX);gqo=r(H3t,"RemBertForCausalLM"),H3t.forEach(t),hqo=r(YBe," (RemBERT model)"),YBe.forEach(t),pqo=i(W),r1=n(W,"LI",{});var KBe=s(r1);I_e=n(KBe,"STRONG",{});var J3t=s(I_e);_qo=r(J3t,"roberta"),J3t.forEach(t),uqo=r(KBe," \u2014 "),vX=n(KBe,"A",{href:!0});var Y3t=s(vX);bqo=r(Y3t,"RobertaForCausalLM"),Y3t.forEach(t),vqo=r(KBe," (RoBERTa model)"),KBe.forEach(t),Fqo=i(W),t1=n(W,"LI",{});var ZBe=s(t1);N_e=n(ZBe,"STRONG",{});var K3t=s(N_e);Tqo=r(K3t,"roformer"),K3t.forEach(t),Mqo=r(ZBe," \u2014 "),FX=n(ZBe,"A",{href:!0});var Z3t=s(FX);Eqo=r(Z3t,"RoFormerForCausalLM"),Z3t.forEach(t),Cqo=r(ZBe," (RoFormer model)"),ZBe.forEach(t),wqo=i(W),a1=n(W,"LI",{});var eIe=s(a1);q_e=n(eIe,"STRONG",{});var e5t=s(q_e);Aqo=r(e5t,"speech_to_text_2"),e5t.forEach(t),Lqo=r(eIe," \u2014 "),TX=n(eIe,"A",{href:!0});var o5t=s(TX);yqo=r(o5t,"Speech2Text2ForCausalLM"),o5t.forEach(t),xqo=r(eIe," (Speech2Text2 model)"),eIe.forEach(t),$qo=i(W),n1=n(W,"LI",{});var oIe=s(n1);j_e=n(oIe,"STRONG",{});var r5t=s(j_e);kqo=r(r5t,"transfo-xl"),r5t.forEach(t),Sqo=r(oIe," \u2014 "),MX=n(oIe,"A",{href:!0});var t5t=s(MX);Rqo=r(t5t,"TransfoXLLMHeadModel"),t5t.forEach(t),Pqo=r(oIe," (Transformer-XL model)"),oIe.forEach(t),Bqo=i(W),s1=n(W,"LI",{});var rIe=s(s1);D_e=n(rIe,"STRONG",{});var a5t=s(D_e);Iqo=r(a5t,"trocr"),a5t.forEach(t),Nqo=r(rIe," \u2014 "),EX=n(rIe,"A",{href:!0});var n5t=s(EX);qqo=r(n5t,"TrOCRForCausalLM"),n5t.forEach(t),jqo=r(rIe," (TrOCR model)"),rIe.forEach(t),Dqo=i(W),l1=n(W,"LI",{});var tIe=s(l1);G_e=n(tIe,"STRONG",{});var s5t=s(G_e);Gqo=r(s5t,"xglm"),s5t.forEach(t),Oqo=r(tIe," \u2014 "),CX=n(tIe,"A",{href:!0});var l5t=s(CX);Vqo=r(l5t,"XGLMForCausalLM"),l5t.forEach(t),Xqo=r(tIe," (XGLM model)"),tIe.forEach(t),zqo=i(W),i1=n(W,"LI",{});var aIe=s(i1);O_e=n(aIe,"STRONG",{});var i5t=s(O_e);Wqo=r(i5t,"xlm"),i5t.forEach(t),Qqo=r(aIe," \u2014 "),wX=n(aIe,"A",{href:!0});var d5t=s(wX);Uqo=r(d5t,"XLMWithLMHeadModel"),d5t.forEach(t),Hqo=r(aIe," (XLM model)"),aIe.forEach(t),Jqo=i(W),d1=n(W,"LI",{});var nIe=s(d1);V_e=n(nIe,"STRONG",{});var c5t=s(V_e);Yqo=r(c5t,"xlm-prophetnet"),c5t.forEach(t),Kqo=r(nIe," \u2014 "),AX=n(nIe,"A",{href:!0});var f5t=s(AX);Zqo=r(f5t,"XLMProphetNetForCausalLM"),f5t.forEach(t),ejo=r(nIe," (XLM-ProphetNet model)"),nIe.forEach(t),ojo=i(W),c1=n(W,"LI",{});var sIe=s(c1);X_e=n(sIe,"STRONG",{});var m5t=s(X_e);rjo=r(m5t,"xlm-roberta"),m5t.forEach(t),tjo=r(sIe," \u2014 "),LX=n(sIe,"A",{href:!0});var g5t=s(LX);ajo=r(g5t,"XLMRobertaForCausalLM"),g5t.forEach(t),njo=r(sIe," (XLM-RoBERTa model)"),sIe.forEach(t),sjo=i(W),f1=n(W,"LI",{});var lIe=s(f1);z_e=n(lIe,"STRONG",{});var h5t=s(z_e);ljo=r(h5t,"xlm-roberta-xl"),h5t.forEach(t),ijo=r(lIe," \u2014 "),yX=n(lIe,"A",{href:!0});var p5t=s(yX);djo=r(p5t,"XLMRobertaXLForCausalLM"),p5t.forEach(t),cjo=r(lIe," (XLM-RoBERTa-XL model)"),lIe.forEach(t),fjo=i(W),m1=n(W,"LI",{});var iIe=s(m1);W_e=n(iIe,"STRONG",{});var _5t=s(W_e);mjo=r(_5t,"xlnet"),_5t.forEach(t),gjo=r(iIe," \u2014 "),xX=n(iIe,"A",{href:!0});var u5t=s(xX);hjo=r(u5t,"XLNetLMHeadModel"),u5t.forEach(t),pjo=r(iIe," (XLNet model)"),iIe.forEach(t),W.forEach(t),_jo=i(pa),g1=n(pa,"P",{});var dIe=s(g1);ujo=r(dIe,"The model is set in evaluation mode by default using "),Q_e=n(dIe,"CODE",{});var b5t=s(Q_e);bjo=r(b5t,"model.eval()"),b5t.forEach(t),vjo=r(dIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=n(dIe,"CODE",{});var v5t=s(U_e);Fjo=r(v5t,"model.train()"),v5t.forEach(t),dIe.forEach(t),Tjo=i(pa),T(h1.$$.fragment,pa),pa.forEach(t),_l.forEach(t),uUe=i(f),fd=n(f,"H2",{class:!0});var LJe=s(fd);p1=n(LJe,"A",{id:!0,class:!0,href:!0});var F5t=s(p1);H_e=n(F5t,"SPAN",{});var T5t=s(H_e);T(t9.$$.fragment,T5t),T5t.forEach(t),F5t.forEach(t),Mjo=i(LJe),J_e=n(LJe,"SPAN",{});var M5t=s(J_e);Ejo=r(M5t,"AutoModelForMaskedLM"),M5t.forEach(t),LJe.forEach(t),bUe=i(f),Bo=n(f,"DIV",{class:!0});var ul=s(Bo);T(a9.$$.fragment,ul),Cjo=i(ul),md=n(ul,"P",{});var Kae=s(md);wjo=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$X=n(Kae,"A",{href:!0});var E5t=s($X);Ajo=r(E5t,"from_pretrained()"),E5t.forEach(t),Ljo=r(Kae," class method or the "),kX=n(Kae,"A",{href:!0});var C5t=s(kX);yjo=r(C5t,"from_config()"),C5t.forEach(t),xjo=r(Kae,` class
method.`),Kae.forEach(t),$jo=i(ul),n9=n(ul,"P",{});var yJe=s(n9);kjo=r(yJe,"This class cannot be instantiated directly using "),Y_e=n(yJe,"CODE",{});var w5t=s(Y_e);Sjo=r(w5t,"__init__()"),w5t.forEach(t),Rjo=r(yJe," (throws an error)."),yJe.forEach(t),Pjo=i(ul),pt=n(ul,"DIV",{class:!0});var T7=s(pt);T(s9.$$.fragment,T7),Bjo=i(T7),K_e=n(T7,"P",{});var A5t=s(K_e);Ijo=r(A5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A5t.forEach(t),Njo=i(T7),gd=n(T7,"P",{});var Zae=s(gd);qjo=r(Zae,`Note:
Loading a model from its configuration file does `),Z_e=n(Zae,"STRONG",{});var L5t=s(Z_e);jjo=r(L5t,"not"),L5t.forEach(t),Djo=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(Zae,"A",{href:!0});var y5t=s(SX);Gjo=r(y5t,"from_pretrained()"),y5t.forEach(t),Ojo=r(Zae," to load the model weights."),Zae.forEach(t),Vjo=i(T7),T(_1.$$.fragment,T7),T7.forEach(t),Xjo=i(ul),eo=n(ul,"DIV",{class:!0});var _a=s(eo);T(l9.$$.fragment,_a),zjo=i(_a),eue=n(_a,"P",{});var x5t=s(eue);Wjo=r(x5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),x5t.forEach(t),Qjo=i(_a),Wa=n(_a,"P",{});var M7=s(Wa);Ujo=r(M7,"The model class to instantiate is selected based on the "),oue=n(M7,"CODE",{});var $5t=s(oue);Hjo=r($5t,"model_type"),$5t.forEach(t),Jjo=r(M7,` property of the config object (either
passed as an argument or loaded from `),rue=n(M7,"CODE",{});var k5t=s(rue);Yjo=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),Kjo=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(M7,"CODE",{});var S5t=s(tue);Zjo=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),eDo=r(M7,":"),M7.forEach(t),oDo=i(_a),U=n(_a,"UL",{});var Y=s(U);u1=n(Y,"LI",{});var cIe=s(u1);aue=n(cIe,"STRONG",{});var R5t=s(aue);rDo=r(R5t,"albert"),R5t.forEach(t),tDo=r(cIe," \u2014 "),RX=n(cIe,"A",{href:!0});var P5t=s(RX);aDo=r(P5t,"AlbertForMaskedLM"),P5t.forEach(t),nDo=r(cIe," (ALBERT model)"),cIe.forEach(t),sDo=i(Y),b1=n(Y,"LI",{});var fIe=s(b1);nue=n(fIe,"STRONG",{});var B5t=s(nue);lDo=r(B5t,"bart"),B5t.forEach(t),iDo=r(fIe," \u2014 "),PX=n(fIe,"A",{href:!0});var I5t=s(PX);dDo=r(I5t,"BartForConditionalGeneration"),I5t.forEach(t),cDo=r(fIe," (BART model)"),fIe.forEach(t),fDo=i(Y),v1=n(Y,"LI",{});var mIe=s(v1);sue=n(mIe,"STRONG",{});var N5t=s(sue);mDo=r(N5t,"bert"),N5t.forEach(t),gDo=r(mIe," \u2014 "),BX=n(mIe,"A",{href:!0});var q5t=s(BX);hDo=r(q5t,"BertForMaskedLM"),q5t.forEach(t),pDo=r(mIe," (BERT model)"),mIe.forEach(t),_Do=i(Y),F1=n(Y,"LI",{});var gIe=s(F1);lue=n(gIe,"STRONG",{});var j5t=s(lue);uDo=r(j5t,"big_bird"),j5t.forEach(t),bDo=r(gIe," \u2014 "),IX=n(gIe,"A",{href:!0});var D5t=s(IX);vDo=r(D5t,"BigBirdForMaskedLM"),D5t.forEach(t),FDo=r(gIe," (BigBird model)"),gIe.forEach(t),TDo=i(Y),T1=n(Y,"LI",{});var hIe=s(T1);iue=n(hIe,"STRONG",{});var G5t=s(iue);MDo=r(G5t,"camembert"),G5t.forEach(t),EDo=r(hIe," \u2014 "),NX=n(hIe,"A",{href:!0});var O5t=s(NX);CDo=r(O5t,"CamembertForMaskedLM"),O5t.forEach(t),wDo=r(hIe," (CamemBERT model)"),hIe.forEach(t),ADo=i(Y),M1=n(Y,"LI",{});var pIe=s(M1);due=n(pIe,"STRONG",{});var V5t=s(due);LDo=r(V5t,"convbert"),V5t.forEach(t),yDo=r(pIe," \u2014 "),qX=n(pIe,"A",{href:!0});var X5t=s(qX);xDo=r(X5t,"ConvBertForMaskedLM"),X5t.forEach(t),$Do=r(pIe," (ConvBERT model)"),pIe.forEach(t),kDo=i(Y),E1=n(Y,"LI",{});var _Ie=s(E1);cue=n(_Ie,"STRONG",{});var z5t=s(cue);SDo=r(z5t,"data2vec-text"),z5t.forEach(t),RDo=r(_Ie," \u2014 "),jX=n(_Ie,"A",{href:!0});var W5t=s(jX);PDo=r(W5t,"Data2VecTextForMaskedLM"),W5t.forEach(t),BDo=r(_Ie," (Data2VecText model)"),_Ie.forEach(t),IDo=i(Y),C1=n(Y,"LI",{});var uIe=s(C1);fue=n(uIe,"STRONG",{});var Q5t=s(fue);NDo=r(Q5t,"deberta"),Q5t.forEach(t),qDo=r(uIe," \u2014 "),DX=n(uIe,"A",{href:!0});var U5t=s(DX);jDo=r(U5t,"DebertaForMaskedLM"),U5t.forEach(t),DDo=r(uIe," (DeBERTa model)"),uIe.forEach(t),GDo=i(Y),w1=n(Y,"LI",{});var bIe=s(w1);mue=n(bIe,"STRONG",{});var H5t=s(mue);ODo=r(H5t,"deberta-v2"),H5t.forEach(t),VDo=r(bIe," \u2014 "),GX=n(bIe,"A",{href:!0});var J5t=s(GX);XDo=r(J5t,"DebertaV2ForMaskedLM"),J5t.forEach(t),zDo=r(bIe," (DeBERTa-v2 model)"),bIe.forEach(t),WDo=i(Y),A1=n(Y,"LI",{});var vIe=s(A1);gue=n(vIe,"STRONG",{});var Y5t=s(gue);QDo=r(Y5t,"distilbert"),Y5t.forEach(t),UDo=r(vIe," \u2014 "),OX=n(vIe,"A",{href:!0});var K5t=s(OX);HDo=r(K5t,"DistilBertForMaskedLM"),K5t.forEach(t),JDo=r(vIe," (DistilBERT model)"),vIe.forEach(t),YDo=i(Y),L1=n(Y,"LI",{});var FIe=s(L1);hue=n(FIe,"STRONG",{});var Z5t=s(hue);KDo=r(Z5t,"electra"),Z5t.forEach(t),ZDo=r(FIe," \u2014 "),VX=n(FIe,"A",{href:!0});var ewt=s(VX);eGo=r(ewt,"ElectraForMaskedLM"),ewt.forEach(t),oGo=r(FIe," (ELECTRA model)"),FIe.forEach(t),rGo=i(Y),y1=n(Y,"LI",{});var TIe=s(y1);pue=n(TIe,"STRONG",{});var owt=s(pue);tGo=r(owt,"flaubert"),owt.forEach(t),aGo=r(TIe," \u2014 "),XX=n(TIe,"A",{href:!0});var rwt=s(XX);nGo=r(rwt,"FlaubertWithLMHeadModel"),rwt.forEach(t),sGo=r(TIe," (FlauBERT model)"),TIe.forEach(t),lGo=i(Y),x1=n(Y,"LI",{});var MIe=s(x1);_ue=n(MIe,"STRONG",{});var twt=s(_ue);iGo=r(twt,"fnet"),twt.forEach(t),dGo=r(MIe," \u2014 "),zX=n(MIe,"A",{href:!0});var awt=s(zX);cGo=r(awt,"FNetForMaskedLM"),awt.forEach(t),fGo=r(MIe," (FNet model)"),MIe.forEach(t),mGo=i(Y),$1=n(Y,"LI",{});var EIe=s($1);uue=n(EIe,"STRONG",{});var nwt=s(uue);gGo=r(nwt,"funnel"),nwt.forEach(t),hGo=r(EIe," \u2014 "),WX=n(EIe,"A",{href:!0});var swt=s(WX);pGo=r(swt,"FunnelForMaskedLM"),swt.forEach(t),_Go=r(EIe," (Funnel Transformer model)"),EIe.forEach(t),uGo=i(Y),k1=n(Y,"LI",{});var CIe=s(k1);bue=n(CIe,"STRONG",{});var lwt=s(bue);bGo=r(lwt,"ibert"),lwt.forEach(t),vGo=r(CIe," \u2014 "),QX=n(CIe,"A",{href:!0});var iwt=s(QX);FGo=r(iwt,"IBertForMaskedLM"),iwt.forEach(t),TGo=r(CIe," (I-BERT model)"),CIe.forEach(t),MGo=i(Y),S1=n(Y,"LI",{});var wIe=s(S1);vue=n(wIe,"STRONG",{});var dwt=s(vue);EGo=r(dwt,"layoutlm"),dwt.forEach(t),CGo=r(wIe," \u2014 "),UX=n(wIe,"A",{href:!0});var cwt=s(UX);wGo=r(cwt,"LayoutLMForMaskedLM"),cwt.forEach(t),AGo=r(wIe," (LayoutLM model)"),wIe.forEach(t),LGo=i(Y),R1=n(Y,"LI",{});var AIe=s(R1);Fue=n(AIe,"STRONG",{});var fwt=s(Fue);yGo=r(fwt,"longformer"),fwt.forEach(t),xGo=r(AIe," \u2014 "),HX=n(AIe,"A",{href:!0});var mwt=s(HX);$Go=r(mwt,"LongformerForMaskedLM"),mwt.forEach(t),kGo=r(AIe," (Longformer model)"),AIe.forEach(t),SGo=i(Y),P1=n(Y,"LI",{});var LIe=s(P1);Tue=n(LIe,"STRONG",{});var gwt=s(Tue);RGo=r(gwt,"luke"),gwt.forEach(t),PGo=r(LIe," \u2014 "),JX=n(LIe,"A",{href:!0});var hwt=s(JX);BGo=r(hwt,"LukeForMaskedLM"),hwt.forEach(t),IGo=r(LIe," (LUKE model)"),LIe.forEach(t),NGo=i(Y),B1=n(Y,"LI",{});var yIe=s(B1);Mue=n(yIe,"STRONG",{});var pwt=s(Mue);qGo=r(pwt,"mbart"),pwt.forEach(t),jGo=r(yIe," \u2014 "),YX=n(yIe,"A",{href:!0});var _wt=s(YX);DGo=r(_wt,"MBartForConditionalGeneration"),_wt.forEach(t),GGo=r(yIe," (mBART model)"),yIe.forEach(t),OGo=i(Y),I1=n(Y,"LI",{});var xIe=s(I1);Eue=n(xIe,"STRONG",{});var uwt=s(Eue);VGo=r(uwt,"megatron-bert"),uwt.forEach(t),XGo=r(xIe," \u2014 "),KX=n(xIe,"A",{href:!0});var bwt=s(KX);zGo=r(bwt,"MegatronBertForMaskedLM"),bwt.forEach(t),WGo=r(xIe," (Megatron-BERT model)"),xIe.forEach(t),QGo=i(Y),N1=n(Y,"LI",{});var $Ie=s(N1);Cue=n($Ie,"STRONG",{});var vwt=s(Cue);UGo=r(vwt,"mobilebert"),vwt.forEach(t),HGo=r($Ie," \u2014 "),ZX=n($Ie,"A",{href:!0});var Fwt=s(ZX);JGo=r(Fwt,"MobileBertForMaskedLM"),Fwt.forEach(t),YGo=r($Ie," (MobileBERT model)"),$Ie.forEach(t),KGo=i(Y),q1=n(Y,"LI",{});var kIe=s(q1);wue=n(kIe,"STRONG",{});var Twt=s(wue);ZGo=r(Twt,"mpnet"),Twt.forEach(t),eOo=r(kIe," \u2014 "),ez=n(kIe,"A",{href:!0});var Mwt=s(ez);oOo=r(Mwt,"MPNetForMaskedLM"),Mwt.forEach(t),rOo=r(kIe," (MPNet model)"),kIe.forEach(t),tOo=i(Y),j1=n(Y,"LI",{});var SIe=s(j1);Aue=n(SIe,"STRONG",{});var Ewt=s(Aue);aOo=r(Ewt,"mvp"),Ewt.forEach(t),nOo=r(SIe," \u2014 "),oz=n(SIe,"A",{href:!0});var Cwt=s(oz);sOo=r(Cwt,"MvpForConditionalGeneration"),Cwt.forEach(t),lOo=r(SIe," (MVP model)"),SIe.forEach(t),iOo=i(Y),D1=n(Y,"LI",{});var RIe=s(D1);Lue=n(RIe,"STRONG",{});var wwt=s(Lue);dOo=r(wwt,"nezha"),wwt.forEach(t),cOo=r(RIe," \u2014 "),rz=n(RIe,"A",{href:!0});var Awt=s(rz);fOo=r(Awt,"NezhaForMaskedLM"),Awt.forEach(t),mOo=r(RIe," (Nezha model)"),RIe.forEach(t),gOo=i(Y),G1=n(Y,"LI",{});var PIe=s(G1);yue=n(PIe,"STRONG",{});var Lwt=s(yue);hOo=r(Lwt,"nystromformer"),Lwt.forEach(t),pOo=r(PIe," \u2014 "),tz=n(PIe,"A",{href:!0});var ywt=s(tz);_Oo=r(ywt,"NystromformerForMaskedLM"),ywt.forEach(t),uOo=r(PIe," (Nystr\xF6mformer model)"),PIe.forEach(t),bOo=i(Y),O1=n(Y,"LI",{});var BIe=s(O1);xue=n(BIe,"STRONG",{});var xwt=s(xue);vOo=r(xwt,"perceiver"),xwt.forEach(t),FOo=r(BIe," \u2014 "),az=n(BIe,"A",{href:!0});var $wt=s(az);TOo=r($wt,"PerceiverForMaskedLM"),$wt.forEach(t),MOo=r(BIe," (Perceiver model)"),BIe.forEach(t),EOo=i(Y),V1=n(Y,"LI",{});var IIe=s(V1);$ue=n(IIe,"STRONG",{});var kwt=s($ue);COo=r(kwt,"qdqbert"),kwt.forEach(t),wOo=r(IIe," \u2014 "),nz=n(IIe,"A",{href:!0});var Swt=s(nz);AOo=r(Swt,"QDQBertForMaskedLM"),Swt.forEach(t),LOo=r(IIe," (QDQBert model)"),IIe.forEach(t),yOo=i(Y),X1=n(Y,"LI",{});var NIe=s(X1);kue=n(NIe,"STRONG",{});var Rwt=s(kue);xOo=r(Rwt,"reformer"),Rwt.forEach(t),$Oo=r(NIe," \u2014 "),sz=n(NIe,"A",{href:!0});var Pwt=s(sz);kOo=r(Pwt,"ReformerForMaskedLM"),Pwt.forEach(t),SOo=r(NIe," (Reformer model)"),NIe.forEach(t),ROo=i(Y),z1=n(Y,"LI",{});var qIe=s(z1);Sue=n(qIe,"STRONG",{});var Bwt=s(Sue);POo=r(Bwt,"rembert"),Bwt.forEach(t),BOo=r(qIe," \u2014 "),lz=n(qIe,"A",{href:!0});var Iwt=s(lz);IOo=r(Iwt,"RemBertForMaskedLM"),Iwt.forEach(t),NOo=r(qIe," (RemBERT model)"),qIe.forEach(t),qOo=i(Y),W1=n(Y,"LI",{});var jIe=s(W1);Rue=n(jIe,"STRONG",{});var Nwt=s(Rue);jOo=r(Nwt,"roberta"),Nwt.forEach(t),DOo=r(jIe," \u2014 "),iz=n(jIe,"A",{href:!0});var qwt=s(iz);GOo=r(qwt,"RobertaForMaskedLM"),qwt.forEach(t),OOo=r(jIe," (RoBERTa model)"),jIe.forEach(t),VOo=i(Y),Q1=n(Y,"LI",{});var DIe=s(Q1);Pue=n(DIe,"STRONG",{});var jwt=s(Pue);XOo=r(jwt,"roformer"),jwt.forEach(t),zOo=r(DIe," \u2014 "),dz=n(DIe,"A",{href:!0});var Dwt=s(dz);WOo=r(Dwt,"RoFormerForMaskedLM"),Dwt.forEach(t),QOo=r(DIe," (RoFormer model)"),DIe.forEach(t),UOo=i(Y),U1=n(Y,"LI",{});var GIe=s(U1);Bue=n(GIe,"STRONG",{});var Gwt=s(Bue);HOo=r(Gwt,"squeezebert"),Gwt.forEach(t),JOo=r(GIe," \u2014 "),cz=n(GIe,"A",{href:!0});var Owt=s(cz);YOo=r(Owt,"SqueezeBertForMaskedLM"),Owt.forEach(t),KOo=r(GIe," (SqueezeBERT model)"),GIe.forEach(t),ZOo=i(Y),H1=n(Y,"LI",{});var OIe=s(H1);Iue=n(OIe,"STRONG",{});var Vwt=s(Iue);eVo=r(Vwt,"tapas"),Vwt.forEach(t),oVo=r(OIe," \u2014 "),fz=n(OIe,"A",{href:!0});var Xwt=s(fz);rVo=r(Xwt,"TapasForMaskedLM"),Xwt.forEach(t),tVo=r(OIe," (TAPAS model)"),OIe.forEach(t),aVo=i(Y),J1=n(Y,"LI",{});var VIe=s(J1);Nue=n(VIe,"STRONG",{});var zwt=s(Nue);nVo=r(zwt,"wav2vec2"),zwt.forEach(t),sVo=r(VIe," \u2014 "),que=n(VIe,"CODE",{});var Wwt=s(que);lVo=r(Wwt,"Wav2Vec2ForMaskedLM"),Wwt.forEach(t),iVo=r(VIe," (Wav2Vec2 model)"),VIe.forEach(t),dVo=i(Y),Y1=n(Y,"LI",{});var XIe=s(Y1);jue=n(XIe,"STRONG",{});var Qwt=s(jue);cVo=r(Qwt,"xlm"),Qwt.forEach(t),fVo=r(XIe," \u2014 "),mz=n(XIe,"A",{href:!0});var Uwt=s(mz);mVo=r(Uwt,"XLMWithLMHeadModel"),Uwt.forEach(t),gVo=r(XIe," (XLM model)"),XIe.forEach(t),hVo=i(Y),K1=n(Y,"LI",{});var zIe=s(K1);Due=n(zIe,"STRONG",{});var Hwt=s(Due);pVo=r(Hwt,"xlm-roberta"),Hwt.forEach(t),_Vo=r(zIe," \u2014 "),gz=n(zIe,"A",{href:!0});var Jwt=s(gz);uVo=r(Jwt,"XLMRobertaForMaskedLM"),Jwt.forEach(t),bVo=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),vVo=i(Y),Z1=n(Y,"LI",{});var WIe=s(Z1);Gue=n(WIe,"STRONG",{});var Ywt=s(Gue);FVo=r(Ywt,"xlm-roberta-xl"),Ywt.forEach(t),TVo=r(WIe," \u2014 "),hz=n(WIe,"A",{href:!0});var Kwt=s(hz);MVo=r(Kwt,"XLMRobertaXLForMaskedLM"),Kwt.forEach(t),EVo=r(WIe," (XLM-RoBERTa-XL model)"),WIe.forEach(t),CVo=i(Y),eb=n(Y,"LI",{});var QIe=s(eb);Oue=n(QIe,"STRONG",{});var Zwt=s(Oue);wVo=r(Zwt,"yoso"),Zwt.forEach(t),AVo=r(QIe," \u2014 "),pz=n(QIe,"A",{href:!0});var e6t=s(pz);LVo=r(e6t,"YosoForMaskedLM"),e6t.forEach(t),yVo=r(QIe," (YOSO model)"),QIe.forEach(t),Y.forEach(t),xVo=i(_a),ob=n(_a,"P",{});var UIe=s(ob);$Vo=r(UIe,"The model is set in evaluation mode by default using "),Vue=n(UIe,"CODE",{});var o6t=s(Vue);kVo=r(o6t,"model.eval()"),o6t.forEach(t),SVo=r(UIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xue=n(UIe,"CODE",{});var r6t=s(Xue);RVo=r(r6t,"model.train()"),r6t.forEach(t),UIe.forEach(t),PVo=i(_a),T(rb.$$.fragment,_a),_a.forEach(t),ul.forEach(t),vUe=i(f),hd=n(f,"H2",{class:!0});var xJe=s(hd);tb=n(xJe,"A",{id:!0,class:!0,href:!0});var t6t=s(tb);zue=n(t6t,"SPAN",{});var a6t=s(zue);T(i9.$$.fragment,a6t),a6t.forEach(t),t6t.forEach(t),BVo=i(xJe),Wue=n(xJe,"SPAN",{});var n6t=s(Wue);IVo=r(n6t,"AutoModelForSeq2SeqLM"),n6t.forEach(t),xJe.forEach(t),FUe=i(f),Io=n(f,"DIV",{class:!0});var bl=s(Io);T(d9.$$.fragment,bl),NVo=i(bl),pd=n(bl,"P",{});var ene=s(pd);qVo=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_z=n(ene,"A",{href:!0});var s6t=s(_z);jVo=r(s6t,"from_pretrained()"),s6t.forEach(t),DVo=r(ene," class method or the "),uz=n(ene,"A",{href:!0});var l6t=s(uz);GVo=r(l6t,"from_config()"),l6t.forEach(t),OVo=r(ene,` class
method.`),ene.forEach(t),VVo=i(bl),c9=n(bl,"P",{});var $Je=s(c9);XVo=r($Je,"This class cannot be instantiated directly using "),Que=n($Je,"CODE",{});var i6t=s(Que);zVo=r(i6t,"__init__()"),i6t.forEach(t),WVo=r($Je," (throws an error)."),$Je.forEach(t),QVo=i(bl),_t=n(bl,"DIV",{class:!0});var E7=s(_t);T(f9.$$.fragment,E7),UVo=i(E7),Uue=n(E7,"P",{});var d6t=s(Uue);HVo=r(d6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),d6t.forEach(t),JVo=i(E7),_d=n(E7,"P",{});var one=s(_d);YVo=r(one,`Note:
Loading a model from its configuration file does `),Hue=n(one,"STRONG",{});var c6t=s(Hue);KVo=r(c6t,"not"),c6t.forEach(t),ZVo=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(one,"A",{href:!0});var f6t=s(bz);eXo=r(f6t,"from_pretrained()"),f6t.forEach(t),oXo=r(one," to load the model weights."),one.forEach(t),rXo=i(E7),T(ab.$$.fragment,E7),E7.forEach(t),tXo=i(bl),oo=n(bl,"DIV",{class:!0});var ua=s(oo);T(m9.$$.fragment,ua),aXo=i(ua),Jue=n(ua,"P",{});var m6t=s(Jue);nXo=r(m6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m6t.forEach(t),sXo=i(ua),Qa=n(ua,"P",{});var C7=s(Qa);lXo=r(C7,"The model class to instantiate is selected based on the "),Yue=n(C7,"CODE",{});var g6t=s(Yue);iXo=r(g6t,"model_type"),g6t.forEach(t),dXo=r(C7,` property of the config object (either
passed as an argument or loaded from `),Kue=n(C7,"CODE",{});var h6t=s(Kue);cXo=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),fXo=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(C7,"CODE",{});var p6t=s(Zue);mXo=r(p6t,"pretrained_model_name_or_path"),p6t.forEach(t),gXo=r(C7,":"),C7.forEach(t),hXo=i(ua),me=n(ua,"UL",{});var ue=s(me);nb=n(ue,"LI",{});var HIe=s(nb);e2e=n(HIe,"STRONG",{});var _6t=s(e2e);pXo=r(_6t,"bart"),_6t.forEach(t),_Xo=r(HIe," \u2014 "),vz=n(HIe,"A",{href:!0});var u6t=s(vz);uXo=r(u6t,"BartForConditionalGeneration"),u6t.forEach(t),bXo=r(HIe," (BART model)"),HIe.forEach(t),vXo=i(ue),sb=n(ue,"LI",{});var JIe=s(sb);o2e=n(JIe,"STRONG",{});var b6t=s(o2e);FXo=r(b6t,"bigbird_pegasus"),b6t.forEach(t),TXo=r(JIe," \u2014 "),Fz=n(JIe,"A",{href:!0});var v6t=s(Fz);MXo=r(v6t,"BigBirdPegasusForConditionalGeneration"),v6t.forEach(t),EXo=r(JIe," (BigBird-Pegasus model)"),JIe.forEach(t),CXo=i(ue),lb=n(ue,"LI",{});var YIe=s(lb);r2e=n(YIe,"STRONG",{});var F6t=s(r2e);wXo=r(F6t,"blenderbot"),F6t.forEach(t),AXo=r(YIe," \u2014 "),Tz=n(YIe,"A",{href:!0});var T6t=s(Tz);LXo=r(T6t,"BlenderbotForConditionalGeneration"),T6t.forEach(t),yXo=r(YIe," (Blenderbot model)"),YIe.forEach(t),xXo=i(ue),ib=n(ue,"LI",{});var KIe=s(ib);t2e=n(KIe,"STRONG",{});var M6t=s(t2e);$Xo=r(M6t,"blenderbot-small"),M6t.forEach(t),kXo=r(KIe," \u2014 "),Mz=n(KIe,"A",{href:!0});var E6t=s(Mz);SXo=r(E6t,"BlenderbotSmallForConditionalGeneration"),E6t.forEach(t),RXo=r(KIe," (BlenderbotSmall model)"),KIe.forEach(t),PXo=i(ue),db=n(ue,"LI",{});var ZIe=s(db);a2e=n(ZIe,"STRONG",{});var C6t=s(a2e);BXo=r(C6t,"encoder-decoder"),C6t.forEach(t),IXo=r(ZIe," \u2014 "),Ez=n(ZIe,"A",{href:!0});var w6t=s(Ez);NXo=r(w6t,"EncoderDecoderModel"),w6t.forEach(t),qXo=r(ZIe," (Encoder decoder model)"),ZIe.forEach(t),jXo=i(ue),cb=n(ue,"LI",{});var eNe=s(cb);n2e=n(eNe,"STRONG",{});var A6t=s(n2e);DXo=r(A6t,"fsmt"),A6t.forEach(t),GXo=r(eNe," \u2014 "),Cz=n(eNe,"A",{href:!0});var L6t=s(Cz);OXo=r(L6t,"FSMTForConditionalGeneration"),L6t.forEach(t),VXo=r(eNe," (FairSeq Machine-Translation model)"),eNe.forEach(t),XXo=i(ue),fb=n(ue,"LI",{});var oNe=s(fb);s2e=n(oNe,"STRONG",{});var y6t=s(s2e);zXo=r(y6t,"led"),y6t.forEach(t),WXo=r(oNe," \u2014 "),wz=n(oNe,"A",{href:!0});var x6t=s(wz);QXo=r(x6t,"LEDForConditionalGeneration"),x6t.forEach(t),UXo=r(oNe," (LED model)"),oNe.forEach(t),HXo=i(ue),mb=n(ue,"LI",{});var rNe=s(mb);l2e=n(rNe,"STRONG",{});var $6t=s(l2e);JXo=r($6t,"longt5"),$6t.forEach(t),YXo=r(rNe," \u2014 "),Az=n(rNe,"A",{href:!0});var k6t=s(Az);KXo=r(k6t,"LongT5ForConditionalGeneration"),k6t.forEach(t),ZXo=r(rNe," (LongT5 model)"),rNe.forEach(t),ezo=i(ue),gb=n(ue,"LI",{});var tNe=s(gb);i2e=n(tNe,"STRONG",{});var S6t=s(i2e);ozo=r(S6t,"m2m_100"),S6t.forEach(t),rzo=r(tNe," \u2014 "),Lz=n(tNe,"A",{href:!0});var R6t=s(Lz);tzo=r(R6t,"M2M100ForConditionalGeneration"),R6t.forEach(t),azo=r(tNe," (M2M100 model)"),tNe.forEach(t),nzo=i(ue),hb=n(ue,"LI",{});var aNe=s(hb);d2e=n(aNe,"STRONG",{});var P6t=s(d2e);szo=r(P6t,"marian"),P6t.forEach(t),lzo=r(aNe," \u2014 "),yz=n(aNe,"A",{href:!0});var B6t=s(yz);izo=r(B6t,"MarianMTModel"),B6t.forEach(t),dzo=r(aNe," (Marian model)"),aNe.forEach(t),czo=i(ue),pb=n(ue,"LI",{});var nNe=s(pb);c2e=n(nNe,"STRONG",{});var I6t=s(c2e);fzo=r(I6t,"mbart"),I6t.forEach(t),mzo=r(nNe," \u2014 "),xz=n(nNe,"A",{href:!0});var N6t=s(xz);gzo=r(N6t,"MBartForConditionalGeneration"),N6t.forEach(t),hzo=r(nNe," (mBART model)"),nNe.forEach(t),pzo=i(ue),_b=n(ue,"LI",{});var sNe=s(_b);f2e=n(sNe,"STRONG",{});var q6t=s(f2e);_zo=r(q6t,"mt5"),q6t.forEach(t),uzo=r(sNe," \u2014 "),$z=n(sNe,"A",{href:!0});var j6t=s($z);bzo=r(j6t,"MT5ForConditionalGeneration"),j6t.forEach(t),vzo=r(sNe," (MT5 model)"),sNe.forEach(t),Fzo=i(ue),ub=n(ue,"LI",{});var lNe=s(ub);m2e=n(lNe,"STRONG",{});var D6t=s(m2e);Tzo=r(D6t,"mvp"),D6t.forEach(t),Mzo=r(lNe," \u2014 "),kz=n(lNe,"A",{href:!0});var G6t=s(kz);Ezo=r(G6t,"MvpForConditionalGeneration"),G6t.forEach(t),Czo=r(lNe," (MVP model)"),lNe.forEach(t),wzo=i(ue),bb=n(ue,"LI",{});var iNe=s(bb);g2e=n(iNe,"STRONG",{});var O6t=s(g2e);Azo=r(O6t,"nllb"),O6t.forEach(t),Lzo=r(iNe," \u2014 "),Sz=n(iNe,"A",{href:!0});var V6t=s(Sz);yzo=r(V6t,"M2M100ForConditionalGeneration"),V6t.forEach(t),xzo=r(iNe," (NLLB model)"),iNe.forEach(t),$zo=i(ue),vb=n(ue,"LI",{});var dNe=s(vb);h2e=n(dNe,"STRONG",{});var X6t=s(h2e);kzo=r(X6t,"pegasus"),X6t.forEach(t),Szo=r(dNe," \u2014 "),Rz=n(dNe,"A",{href:!0});var z6t=s(Rz);Rzo=r(z6t,"PegasusForConditionalGeneration"),z6t.forEach(t),Pzo=r(dNe," (Pegasus model)"),dNe.forEach(t),Bzo=i(ue),Fb=n(ue,"LI",{});var cNe=s(Fb);p2e=n(cNe,"STRONG",{});var W6t=s(p2e);Izo=r(W6t,"plbart"),W6t.forEach(t),Nzo=r(cNe," \u2014 "),Pz=n(cNe,"A",{href:!0});var Q6t=s(Pz);qzo=r(Q6t,"PLBartForConditionalGeneration"),Q6t.forEach(t),jzo=r(cNe," (PLBart model)"),cNe.forEach(t),Dzo=i(ue),Tb=n(ue,"LI",{});var fNe=s(Tb);_2e=n(fNe,"STRONG",{});var U6t=s(_2e);Gzo=r(U6t,"prophetnet"),U6t.forEach(t),Ozo=r(fNe," \u2014 "),Bz=n(fNe,"A",{href:!0});var H6t=s(Bz);Vzo=r(H6t,"ProphetNetForConditionalGeneration"),H6t.forEach(t),Xzo=r(fNe," (ProphetNet model)"),fNe.forEach(t),zzo=i(ue),Mb=n(ue,"LI",{});var mNe=s(Mb);u2e=n(mNe,"STRONG",{});var J6t=s(u2e);Wzo=r(J6t,"t5"),J6t.forEach(t),Qzo=r(mNe," \u2014 "),Iz=n(mNe,"A",{href:!0});var Y6t=s(Iz);Uzo=r(Y6t,"T5ForConditionalGeneration"),Y6t.forEach(t),Hzo=r(mNe," (T5 model)"),mNe.forEach(t),Jzo=i(ue),Eb=n(ue,"LI",{});var gNe=s(Eb);b2e=n(gNe,"STRONG",{});var K6t=s(b2e);Yzo=r(K6t,"xlm-prophetnet"),K6t.forEach(t),Kzo=r(gNe," \u2014 "),Nz=n(gNe,"A",{href:!0});var Z6t=s(Nz);Zzo=r(Z6t,"XLMProphetNetForConditionalGeneration"),Z6t.forEach(t),eWo=r(gNe," (XLM-ProphetNet model)"),gNe.forEach(t),ue.forEach(t),oWo=i(ua),Cb=n(ua,"P",{});var hNe=s(Cb);rWo=r(hNe,"The model is set in evaluation mode by default using "),v2e=n(hNe,"CODE",{});var eAt=s(v2e);tWo=r(eAt,"model.eval()"),eAt.forEach(t),aWo=r(hNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=n(hNe,"CODE",{});var oAt=s(F2e);nWo=r(oAt,"model.train()"),oAt.forEach(t),hNe.forEach(t),sWo=i(ua),T(wb.$$.fragment,ua),ua.forEach(t),bl.forEach(t),TUe=i(f),ud=n(f,"H2",{class:!0});var kJe=s(ud);Ab=n(kJe,"A",{id:!0,class:!0,href:!0});var rAt=s(Ab);T2e=n(rAt,"SPAN",{});var tAt=s(T2e);T(g9.$$.fragment,tAt),tAt.forEach(t),rAt.forEach(t),lWo=i(kJe),M2e=n(kJe,"SPAN",{});var aAt=s(M2e);iWo=r(aAt,"AutoModelForSequenceClassification"),aAt.forEach(t),kJe.forEach(t),MUe=i(f),No=n(f,"DIV",{class:!0});var vl=s(No);T(h9.$$.fragment,vl),dWo=i(vl),bd=n(vl,"P",{});var rne=s(bd);cWo=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qz=n(rne,"A",{href:!0});var nAt=s(qz);fWo=r(nAt,"from_pretrained()"),nAt.forEach(t),mWo=r(rne," class method or the "),jz=n(rne,"A",{href:!0});var sAt=s(jz);gWo=r(sAt,"from_config()"),sAt.forEach(t),hWo=r(rne,` class
method.`),rne.forEach(t),pWo=i(vl),p9=n(vl,"P",{});var SJe=s(p9);_Wo=r(SJe,"This class cannot be instantiated directly using "),E2e=n(SJe,"CODE",{});var lAt=s(E2e);uWo=r(lAt,"__init__()"),lAt.forEach(t),bWo=r(SJe," (throws an error)."),SJe.forEach(t),vWo=i(vl),ut=n(vl,"DIV",{class:!0});var w7=s(ut);T(_9.$$.fragment,w7),FWo=i(w7),C2e=n(w7,"P",{});var iAt=s(C2e);TWo=r(iAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iAt.forEach(t),MWo=i(w7),vd=n(w7,"P",{});var tne=s(vd);EWo=r(tne,`Note:
Loading a model from its configuration file does `),w2e=n(tne,"STRONG",{});var dAt=s(w2e);CWo=r(dAt,"not"),dAt.forEach(t),wWo=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(tne,"A",{href:!0});var cAt=s(Dz);AWo=r(cAt,"from_pretrained()"),cAt.forEach(t),LWo=r(tne," to load the model weights."),tne.forEach(t),yWo=i(w7),T(Lb.$$.fragment,w7),w7.forEach(t),xWo=i(vl),ro=n(vl,"DIV",{class:!0});var ba=s(ro);T(u9.$$.fragment,ba),$Wo=i(ba),A2e=n(ba,"P",{});var fAt=s(A2e);kWo=r(fAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fAt.forEach(t),SWo=i(ba),Ua=n(ba,"P",{});var A7=s(Ua);RWo=r(A7,"The model class to instantiate is selected based on the "),L2e=n(A7,"CODE",{});var mAt=s(L2e);PWo=r(mAt,"model_type"),mAt.forEach(t),BWo=r(A7,` property of the config object (either
passed as an argument or loaded from `),y2e=n(A7,"CODE",{});var gAt=s(y2e);IWo=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),NWo=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(A7,"CODE",{});var hAt=s(x2e);qWo=r(hAt,"pretrained_model_name_or_path"),hAt.forEach(t),jWo=r(A7,":"),A7.forEach(t),DWo=i(ba),q=n(ba,"UL",{});var D=s(q);yb=n(D,"LI",{});var pNe=s(yb);$2e=n(pNe,"STRONG",{});var pAt=s($2e);GWo=r(pAt,"albert"),pAt.forEach(t),OWo=r(pNe," \u2014 "),Gz=n(pNe,"A",{href:!0});var _At=s(Gz);VWo=r(_At,"AlbertForSequenceClassification"),_At.forEach(t),XWo=r(pNe," (ALBERT model)"),pNe.forEach(t),zWo=i(D),xb=n(D,"LI",{});var _Ne=s(xb);k2e=n(_Ne,"STRONG",{});var uAt=s(k2e);WWo=r(uAt,"bart"),uAt.forEach(t),QWo=r(_Ne," \u2014 "),Oz=n(_Ne,"A",{href:!0});var bAt=s(Oz);UWo=r(bAt,"BartForSequenceClassification"),bAt.forEach(t),HWo=r(_Ne," (BART model)"),_Ne.forEach(t),JWo=i(D),$b=n(D,"LI",{});var uNe=s($b);S2e=n(uNe,"STRONG",{});var vAt=s(S2e);YWo=r(vAt,"bert"),vAt.forEach(t),KWo=r(uNe," \u2014 "),Vz=n(uNe,"A",{href:!0});var FAt=s(Vz);ZWo=r(FAt,"BertForSequenceClassification"),FAt.forEach(t),eQo=r(uNe," (BERT model)"),uNe.forEach(t),oQo=i(D),kb=n(D,"LI",{});var bNe=s(kb);R2e=n(bNe,"STRONG",{});var TAt=s(R2e);rQo=r(TAt,"big_bird"),TAt.forEach(t),tQo=r(bNe," \u2014 "),Xz=n(bNe,"A",{href:!0});var MAt=s(Xz);aQo=r(MAt,"BigBirdForSequenceClassification"),MAt.forEach(t),nQo=r(bNe," (BigBird model)"),bNe.forEach(t),sQo=i(D),Sb=n(D,"LI",{});var vNe=s(Sb);P2e=n(vNe,"STRONG",{});var EAt=s(P2e);lQo=r(EAt,"bigbird_pegasus"),EAt.forEach(t),iQo=r(vNe," \u2014 "),zz=n(vNe,"A",{href:!0});var CAt=s(zz);dQo=r(CAt,"BigBirdPegasusForSequenceClassification"),CAt.forEach(t),cQo=r(vNe," (BigBird-Pegasus model)"),vNe.forEach(t),fQo=i(D),Rb=n(D,"LI",{});var FNe=s(Rb);B2e=n(FNe,"STRONG",{});var wAt=s(B2e);mQo=r(wAt,"bloom"),wAt.forEach(t),gQo=r(FNe," \u2014 "),Wz=n(FNe,"A",{href:!0});var AAt=s(Wz);hQo=r(AAt,"BloomForSequenceClassification"),AAt.forEach(t),pQo=r(FNe," (BLOOM model)"),FNe.forEach(t),_Qo=i(D),Pb=n(D,"LI",{});var TNe=s(Pb);I2e=n(TNe,"STRONG",{});var LAt=s(I2e);uQo=r(LAt,"camembert"),LAt.forEach(t),bQo=r(TNe," \u2014 "),Qz=n(TNe,"A",{href:!0});var yAt=s(Qz);vQo=r(yAt,"CamembertForSequenceClassification"),yAt.forEach(t),FQo=r(TNe," (CamemBERT model)"),TNe.forEach(t),TQo=i(D),Bb=n(D,"LI",{});var MNe=s(Bb);N2e=n(MNe,"STRONG",{});var xAt=s(N2e);MQo=r(xAt,"canine"),xAt.forEach(t),EQo=r(MNe," \u2014 "),Uz=n(MNe,"A",{href:!0});var $At=s(Uz);CQo=r($At,"CanineForSequenceClassification"),$At.forEach(t),wQo=r(MNe," (CANINE model)"),MNe.forEach(t),AQo=i(D),Ib=n(D,"LI",{});var ENe=s(Ib);q2e=n(ENe,"STRONG",{});var kAt=s(q2e);LQo=r(kAt,"convbert"),kAt.forEach(t),yQo=r(ENe," \u2014 "),Hz=n(ENe,"A",{href:!0});var SAt=s(Hz);xQo=r(SAt,"ConvBertForSequenceClassification"),SAt.forEach(t),$Qo=r(ENe," (ConvBERT model)"),ENe.forEach(t),kQo=i(D),Nb=n(D,"LI",{});var CNe=s(Nb);j2e=n(CNe,"STRONG",{});var RAt=s(j2e);SQo=r(RAt,"ctrl"),RAt.forEach(t),RQo=r(CNe," \u2014 "),Jz=n(CNe,"A",{href:!0});var PAt=s(Jz);PQo=r(PAt,"CTRLForSequenceClassification"),PAt.forEach(t),BQo=r(CNe," (CTRL model)"),CNe.forEach(t),IQo=i(D),qb=n(D,"LI",{});var wNe=s(qb);D2e=n(wNe,"STRONG",{});var BAt=s(D2e);NQo=r(BAt,"data2vec-text"),BAt.forEach(t),qQo=r(wNe," \u2014 "),Yz=n(wNe,"A",{href:!0});var IAt=s(Yz);jQo=r(IAt,"Data2VecTextForSequenceClassification"),IAt.forEach(t),DQo=r(wNe," (Data2VecText model)"),wNe.forEach(t),GQo=i(D),jb=n(D,"LI",{});var ANe=s(jb);G2e=n(ANe,"STRONG",{});var NAt=s(G2e);OQo=r(NAt,"deberta"),NAt.forEach(t),VQo=r(ANe," \u2014 "),Kz=n(ANe,"A",{href:!0});var qAt=s(Kz);XQo=r(qAt,"DebertaForSequenceClassification"),qAt.forEach(t),zQo=r(ANe," (DeBERTa model)"),ANe.forEach(t),WQo=i(D),Db=n(D,"LI",{});var LNe=s(Db);O2e=n(LNe,"STRONG",{});var jAt=s(O2e);QQo=r(jAt,"deberta-v2"),jAt.forEach(t),UQo=r(LNe," \u2014 "),Zz=n(LNe,"A",{href:!0});var DAt=s(Zz);HQo=r(DAt,"DebertaV2ForSequenceClassification"),DAt.forEach(t),JQo=r(LNe," (DeBERTa-v2 model)"),LNe.forEach(t),YQo=i(D),Gb=n(D,"LI",{});var yNe=s(Gb);V2e=n(yNe,"STRONG",{});var GAt=s(V2e);KQo=r(GAt,"distilbert"),GAt.forEach(t),ZQo=r(yNe," \u2014 "),eW=n(yNe,"A",{href:!0});var OAt=s(eW);eUo=r(OAt,"DistilBertForSequenceClassification"),OAt.forEach(t),oUo=r(yNe," (DistilBERT model)"),yNe.forEach(t),rUo=i(D),Ob=n(D,"LI",{});var xNe=s(Ob);X2e=n(xNe,"STRONG",{});var VAt=s(X2e);tUo=r(VAt,"electra"),VAt.forEach(t),aUo=r(xNe," \u2014 "),oW=n(xNe,"A",{href:!0});var XAt=s(oW);nUo=r(XAt,"ElectraForSequenceClassification"),XAt.forEach(t),sUo=r(xNe," (ELECTRA model)"),xNe.forEach(t),lUo=i(D),Vb=n(D,"LI",{});var $Ne=s(Vb);z2e=n($Ne,"STRONG",{});var zAt=s(z2e);iUo=r(zAt,"flaubert"),zAt.forEach(t),dUo=r($Ne," \u2014 "),rW=n($Ne,"A",{href:!0});var WAt=s(rW);cUo=r(WAt,"FlaubertForSequenceClassification"),WAt.forEach(t),fUo=r($Ne," (FlauBERT model)"),$Ne.forEach(t),mUo=i(D),Xb=n(D,"LI",{});var kNe=s(Xb);W2e=n(kNe,"STRONG",{});var QAt=s(W2e);gUo=r(QAt,"fnet"),QAt.forEach(t),hUo=r(kNe," \u2014 "),tW=n(kNe,"A",{href:!0});var UAt=s(tW);pUo=r(UAt,"FNetForSequenceClassification"),UAt.forEach(t),_Uo=r(kNe," (FNet model)"),kNe.forEach(t),uUo=i(D),zb=n(D,"LI",{});var SNe=s(zb);Q2e=n(SNe,"STRONG",{});var HAt=s(Q2e);bUo=r(HAt,"funnel"),HAt.forEach(t),vUo=r(SNe," \u2014 "),aW=n(SNe,"A",{href:!0});var JAt=s(aW);FUo=r(JAt,"FunnelForSequenceClassification"),JAt.forEach(t),TUo=r(SNe," (Funnel Transformer model)"),SNe.forEach(t),MUo=i(D),Wb=n(D,"LI",{});var RNe=s(Wb);U2e=n(RNe,"STRONG",{});var YAt=s(U2e);EUo=r(YAt,"gpt2"),YAt.forEach(t),CUo=r(RNe," \u2014 "),nW=n(RNe,"A",{href:!0});var KAt=s(nW);wUo=r(KAt,"GPT2ForSequenceClassification"),KAt.forEach(t),AUo=r(RNe," (OpenAI GPT-2 model)"),RNe.forEach(t),LUo=i(D),Qb=n(D,"LI",{});var PNe=s(Qb);H2e=n(PNe,"STRONG",{});var ZAt=s(H2e);yUo=r(ZAt,"gpt_neo"),ZAt.forEach(t),xUo=r(PNe," \u2014 "),sW=n(PNe,"A",{href:!0});var e7t=s(sW);$Uo=r(e7t,"GPTNeoForSequenceClassification"),e7t.forEach(t),kUo=r(PNe," (GPT Neo model)"),PNe.forEach(t),SUo=i(D),Ub=n(D,"LI",{});var BNe=s(Ub);J2e=n(BNe,"STRONG",{});var o7t=s(J2e);RUo=r(o7t,"gptj"),o7t.forEach(t),PUo=r(BNe," \u2014 "),lW=n(BNe,"A",{href:!0});var r7t=s(lW);BUo=r(r7t,"GPTJForSequenceClassification"),r7t.forEach(t),IUo=r(BNe," (GPT-J model)"),BNe.forEach(t),NUo=i(D),Hb=n(D,"LI",{});var INe=s(Hb);Y2e=n(INe,"STRONG",{});var t7t=s(Y2e);qUo=r(t7t,"ibert"),t7t.forEach(t),jUo=r(INe," \u2014 "),iW=n(INe,"A",{href:!0});var a7t=s(iW);DUo=r(a7t,"IBertForSequenceClassification"),a7t.forEach(t),GUo=r(INe," (I-BERT model)"),INe.forEach(t),OUo=i(D),Jb=n(D,"LI",{});var NNe=s(Jb);K2e=n(NNe,"STRONG",{});var n7t=s(K2e);VUo=r(n7t,"layoutlm"),n7t.forEach(t),XUo=r(NNe," \u2014 "),dW=n(NNe,"A",{href:!0});var s7t=s(dW);zUo=r(s7t,"LayoutLMForSequenceClassification"),s7t.forEach(t),WUo=r(NNe," (LayoutLM model)"),NNe.forEach(t),QUo=i(D),Yb=n(D,"LI",{});var qNe=s(Yb);Z2e=n(qNe,"STRONG",{});var l7t=s(Z2e);UUo=r(l7t,"layoutlmv2"),l7t.forEach(t),HUo=r(qNe," \u2014 "),cW=n(qNe,"A",{href:!0});var i7t=s(cW);JUo=r(i7t,"LayoutLMv2ForSequenceClassification"),i7t.forEach(t),YUo=r(qNe," (LayoutLMv2 model)"),qNe.forEach(t),KUo=i(D),Kb=n(D,"LI",{});var jNe=s(Kb);e0e=n(jNe,"STRONG",{});var d7t=s(e0e);ZUo=r(d7t,"layoutlmv3"),d7t.forEach(t),eHo=r(jNe," \u2014 "),fW=n(jNe,"A",{href:!0});var c7t=s(fW);oHo=r(c7t,"LayoutLMv3ForSequenceClassification"),c7t.forEach(t),rHo=r(jNe," (LayoutLMv3 model)"),jNe.forEach(t),tHo=i(D),Zb=n(D,"LI",{});var DNe=s(Zb);o0e=n(DNe,"STRONG",{});var f7t=s(o0e);aHo=r(f7t,"led"),f7t.forEach(t),nHo=r(DNe," \u2014 "),mW=n(DNe,"A",{href:!0});var m7t=s(mW);sHo=r(m7t,"LEDForSequenceClassification"),m7t.forEach(t),lHo=r(DNe," (LED model)"),DNe.forEach(t),iHo=i(D),ev=n(D,"LI",{});var GNe=s(ev);r0e=n(GNe,"STRONG",{});var g7t=s(r0e);dHo=r(g7t,"longformer"),g7t.forEach(t),cHo=r(GNe," \u2014 "),gW=n(GNe,"A",{href:!0});var h7t=s(gW);fHo=r(h7t,"LongformerForSequenceClassification"),h7t.forEach(t),mHo=r(GNe," (Longformer model)"),GNe.forEach(t),gHo=i(D),ov=n(D,"LI",{});var ONe=s(ov);t0e=n(ONe,"STRONG",{});var p7t=s(t0e);hHo=r(p7t,"luke"),p7t.forEach(t),pHo=r(ONe," \u2014 "),hW=n(ONe,"A",{href:!0});var _7t=s(hW);_Ho=r(_7t,"LukeForSequenceClassification"),_7t.forEach(t),uHo=r(ONe," (LUKE model)"),ONe.forEach(t),bHo=i(D),rv=n(D,"LI",{});var VNe=s(rv);a0e=n(VNe,"STRONG",{});var u7t=s(a0e);vHo=r(u7t,"mbart"),u7t.forEach(t),FHo=r(VNe," \u2014 "),pW=n(VNe,"A",{href:!0});var b7t=s(pW);THo=r(b7t,"MBartForSequenceClassification"),b7t.forEach(t),MHo=r(VNe," (mBART model)"),VNe.forEach(t),EHo=i(D),tv=n(D,"LI",{});var XNe=s(tv);n0e=n(XNe,"STRONG",{});var v7t=s(n0e);CHo=r(v7t,"megatron-bert"),v7t.forEach(t),wHo=r(XNe," \u2014 "),_W=n(XNe,"A",{href:!0});var F7t=s(_W);AHo=r(F7t,"MegatronBertForSequenceClassification"),F7t.forEach(t),LHo=r(XNe," (Megatron-BERT model)"),XNe.forEach(t),yHo=i(D),av=n(D,"LI",{});var zNe=s(av);s0e=n(zNe,"STRONG",{});var T7t=s(s0e);xHo=r(T7t,"mobilebert"),T7t.forEach(t),$Ho=r(zNe," \u2014 "),uW=n(zNe,"A",{href:!0});var M7t=s(uW);kHo=r(M7t,"MobileBertForSequenceClassification"),M7t.forEach(t),SHo=r(zNe," (MobileBERT model)"),zNe.forEach(t),RHo=i(D),nv=n(D,"LI",{});var WNe=s(nv);l0e=n(WNe,"STRONG",{});var E7t=s(l0e);PHo=r(E7t,"mpnet"),E7t.forEach(t),BHo=r(WNe," \u2014 "),bW=n(WNe,"A",{href:!0});var C7t=s(bW);IHo=r(C7t,"MPNetForSequenceClassification"),C7t.forEach(t),NHo=r(WNe," (MPNet model)"),WNe.forEach(t),qHo=i(D),sv=n(D,"LI",{});var QNe=s(sv);i0e=n(QNe,"STRONG",{});var w7t=s(i0e);jHo=r(w7t,"mvp"),w7t.forEach(t),DHo=r(QNe," \u2014 "),vW=n(QNe,"A",{href:!0});var A7t=s(vW);GHo=r(A7t,"MvpForSequenceClassification"),A7t.forEach(t),OHo=r(QNe," (MVP model)"),QNe.forEach(t),VHo=i(D),lv=n(D,"LI",{});var UNe=s(lv);d0e=n(UNe,"STRONG",{});var L7t=s(d0e);XHo=r(L7t,"nezha"),L7t.forEach(t),zHo=r(UNe," \u2014 "),FW=n(UNe,"A",{href:!0});var y7t=s(FW);WHo=r(y7t,"NezhaForSequenceClassification"),y7t.forEach(t),QHo=r(UNe," (Nezha model)"),UNe.forEach(t),UHo=i(D),iv=n(D,"LI",{});var HNe=s(iv);c0e=n(HNe,"STRONG",{});var x7t=s(c0e);HHo=r(x7t,"nystromformer"),x7t.forEach(t),JHo=r(HNe," \u2014 "),TW=n(HNe,"A",{href:!0});var $7t=s(TW);YHo=r($7t,"NystromformerForSequenceClassification"),$7t.forEach(t),KHo=r(HNe," (Nystr\xF6mformer model)"),HNe.forEach(t),ZHo=i(D),dv=n(D,"LI",{});var JNe=s(dv);f0e=n(JNe,"STRONG",{});var k7t=s(f0e);eJo=r(k7t,"openai-gpt"),k7t.forEach(t),oJo=r(JNe," \u2014 "),MW=n(JNe,"A",{href:!0});var S7t=s(MW);rJo=r(S7t,"OpenAIGPTForSequenceClassification"),S7t.forEach(t),tJo=r(JNe," (OpenAI GPT model)"),JNe.forEach(t),aJo=i(D),cv=n(D,"LI",{});var YNe=s(cv);m0e=n(YNe,"STRONG",{});var R7t=s(m0e);nJo=r(R7t,"opt"),R7t.forEach(t),sJo=r(YNe," \u2014 "),EW=n(YNe,"A",{href:!0});var P7t=s(EW);lJo=r(P7t,"OPTForSequenceClassification"),P7t.forEach(t),iJo=r(YNe," (OPT model)"),YNe.forEach(t),dJo=i(D),fv=n(D,"LI",{});var KNe=s(fv);g0e=n(KNe,"STRONG",{});var B7t=s(g0e);cJo=r(B7t,"perceiver"),B7t.forEach(t),fJo=r(KNe," \u2014 "),CW=n(KNe,"A",{href:!0});var I7t=s(CW);mJo=r(I7t,"PerceiverForSequenceClassification"),I7t.forEach(t),gJo=r(KNe," (Perceiver model)"),KNe.forEach(t),hJo=i(D),mv=n(D,"LI",{});var ZNe=s(mv);h0e=n(ZNe,"STRONG",{});var N7t=s(h0e);pJo=r(N7t,"plbart"),N7t.forEach(t),_Jo=r(ZNe," \u2014 "),wW=n(ZNe,"A",{href:!0});var q7t=s(wW);uJo=r(q7t,"PLBartForSequenceClassification"),q7t.forEach(t),bJo=r(ZNe," (PLBart model)"),ZNe.forEach(t),vJo=i(D),gv=n(D,"LI",{});var eqe=s(gv);p0e=n(eqe,"STRONG",{});var j7t=s(p0e);FJo=r(j7t,"qdqbert"),j7t.forEach(t),TJo=r(eqe," \u2014 "),AW=n(eqe,"A",{href:!0});var D7t=s(AW);MJo=r(D7t,"QDQBertForSequenceClassification"),D7t.forEach(t),EJo=r(eqe," (QDQBert model)"),eqe.forEach(t),CJo=i(D),hv=n(D,"LI",{});var oqe=s(hv);_0e=n(oqe,"STRONG",{});var G7t=s(_0e);wJo=r(G7t,"reformer"),G7t.forEach(t),AJo=r(oqe," \u2014 "),LW=n(oqe,"A",{href:!0});var O7t=s(LW);LJo=r(O7t,"ReformerForSequenceClassification"),O7t.forEach(t),yJo=r(oqe," (Reformer model)"),oqe.forEach(t),xJo=i(D),pv=n(D,"LI",{});var rqe=s(pv);u0e=n(rqe,"STRONG",{});var V7t=s(u0e);$Jo=r(V7t,"rembert"),V7t.forEach(t),kJo=r(rqe," \u2014 "),yW=n(rqe,"A",{href:!0});var X7t=s(yW);SJo=r(X7t,"RemBertForSequenceClassification"),X7t.forEach(t),RJo=r(rqe," (RemBERT model)"),rqe.forEach(t),PJo=i(D),_v=n(D,"LI",{});var tqe=s(_v);b0e=n(tqe,"STRONG",{});var z7t=s(b0e);BJo=r(z7t,"roberta"),z7t.forEach(t),IJo=r(tqe," \u2014 "),xW=n(tqe,"A",{href:!0});var W7t=s(xW);NJo=r(W7t,"RobertaForSequenceClassification"),W7t.forEach(t),qJo=r(tqe," (RoBERTa model)"),tqe.forEach(t),jJo=i(D),uv=n(D,"LI",{});var aqe=s(uv);v0e=n(aqe,"STRONG",{});var Q7t=s(v0e);DJo=r(Q7t,"roformer"),Q7t.forEach(t),GJo=r(aqe," \u2014 "),$W=n(aqe,"A",{href:!0});var U7t=s($W);OJo=r(U7t,"RoFormerForSequenceClassification"),U7t.forEach(t),VJo=r(aqe," (RoFormer model)"),aqe.forEach(t),XJo=i(D),bv=n(D,"LI",{});var nqe=s(bv);F0e=n(nqe,"STRONG",{});var H7t=s(F0e);zJo=r(H7t,"squeezebert"),H7t.forEach(t),WJo=r(nqe," \u2014 "),kW=n(nqe,"A",{href:!0});var J7t=s(kW);QJo=r(J7t,"SqueezeBertForSequenceClassification"),J7t.forEach(t),UJo=r(nqe," (SqueezeBERT model)"),nqe.forEach(t),HJo=i(D),vv=n(D,"LI",{});var sqe=s(vv);T0e=n(sqe,"STRONG",{});var Y7t=s(T0e);JJo=r(Y7t,"tapas"),Y7t.forEach(t),YJo=r(sqe," \u2014 "),SW=n(sqe,"A",{href:!0});var K7t=s(SW);KJo=r(K7t,"TapasForSequenceClassification"),K7t.forEach(t),ZJo=r(sqe," (TAPAS model)"),sqe.forEach(t),eYo=i(D),Fv=n(D,"LI",{});var lqe=s(Fv);M0e=n(lqe,"STRONG",{});var Z7t=s(M0e);oYo=r(Z7t,"transfo-xl"),Z7t.forEach(t),rYo=r(lqe," \u2014 "),RW=n(lqe,"A",{href:!0});var eLt=s(RW);tYo=r(eLt,"TransfoXLForSequenceClassification"),eLt.forEach(t),aYo=r(lqe," (Transformer-XL model)"),lqe.forEach(t),nYo=i(D),Tv=n(D,"LI",{});var iqe=s(Tv);E0e=n(iqe,"STRONG",{});var oLt=s(E0e);sYo=r(oLt,"xlm"),oLt.forEach(t),lYo=r(iqe," \u2014 "),PW=n(iqe,"A",{href:!0});var rLt=s(PW);iYo=r(rLt,"XLMForSequenceClassification"),rLt.forEach(t),dYo=r(iqe," (XLM model)"),iqe.forEach(t),cYo=i(D),Mv=n(D,"LI",{});var dqe=s(Mv);C0e=n(dqe,"STRONG",{});var tLt=s(C0e);fYo=r(tLt,"xlm-roberta"),tLt.forEach(t),mYo=r(dqe," \u2014 "),BW=n(dqe,"A",{href:!0});var aLt=s(BW);gYo=r(aLt,"XLMRobertaForSequenceClassification"),aLt.forEach(t),hYo=r(dqe," (XLM-RoBERTa model)"),dqe.forEach(t),pYo=i(D),Ev=n(D,"LI",{});var cqe=s(Ev);w0e=n(cqe,"STRONG",{});var nLt=s(w0e);_Yo=r(nLt,"xlm-roberta-xl"),nLt.forEach(t),uYo=r(cqe," \u2014 "),IW=n(cqe,"A",{href:!0});var sLt=s(IW);bYo=r(sLt,"XLMRobertaXLForSequenceClassification"),sLt.forEach(t),vYo=r(cqe," (XLM-RoBERTa-XL model)"),cqe.forEach(t),FYo=i(D),Cv=n(D,"LI",{});var fqe=s(Cv);A0e=n(fqe,"STRONG",{});var lLt=s(A0e);TYo=r(lLt,"xlnet"),lLt.forEach(t),MYo=r(fqe," \u2014 "),NW=n(fqe,"A",{href:!0});var iLt=s(NW);EYo=r(iLt,"XLNetForSequenceClassification"),iLt.forEach(t),CYo=r(fqe," (XLNet model)"),fqe.forEach(t),wYo=i(D),wv=n(D,"LI",{});var mqe=s(wv);L0e=n(mqe,"STRONG",{});var dLt=s(L0e);AYo=r(dLt,"yoso"),dLt.forEach(t),LYo=r(mqe," \u2014 "),qW=n(mqe,"A",{href:!0});var cLt=s(qW);yYo=r(cLt,"YosoForSequenceClassification"),cLt.forEach(t),xYo=r(mqe," (YOSO model)"),mqe.forEach(t),D.forEach(t),$Yo=i(ba),Av=n(ba,"P",{});var gqe=s(Av);kYo=r(gqe,"The model is set in evaluation mode by default using "),y0e=n(gqe,"CODE",{});var fLt=s(y0e);SYo=r(fLt,"model.eval()"),fLt.forEach(t),RYo=r(gqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x0e=n(gqe,"CODE",{});var mLt=s(x0e);PYo=r(mLt,"model.train()"),mLt.forEach(t),gqe.forEach(t),BYo=i(ba),T(Lv.$$.fragment,ba),ba.forEach(t),vl.forEach(t),EUe=i(f),Fd=n(f,"H2",{class:!0});var RJe=s(Fd);yv=n(RJe,"A",{id:!0,class:!0,href:!0});var gLt=s(yv);$0e=n(gLt,"SPAN",{});var hLt=s($0e);T(b9.$$.fragment,hLt),hLt.forEach(t),gLt.forEach(t),IYo=i(RJe),k0e=n(RJe,"SPAN",{});var pLt=s(k0e);NYo=r(pLt,"AutoModelForMultipleChoice"),pLt.forEach(t),RJe.forEach(t),CUe=i(f),qo=n(f,"DIV",{class:!0});var Fl=s(qo);T(v9.$$.fragment,Fl),qYo=i(Fl),Td=n(Fl,"P",{});var ane=s(Td);jYo=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jW=n(ane,"A",{href:!0});var _Lt=s(jW);DYo=r(_Lt,"from_pretrained()"),_Lt.forEach(t),GYo=r(ane," class method or the "),DW=n(ane,"A",{href:!0});var uLt=s(DW);OYo=r(uLt,"from_config()"),uLt.forEach(t),VYo=r(ane,` class
method.`),ane.forEach(t),XYo=i(Fl),F9=n(Fl,"P",{});var PJe=s(F9);zYo=r(PJe,"This class cannot be instantiated directly using "),S0e=n(PJe,"CODE",{});var bLt=s(S0e);WYo=r(bLt,"__init__()"),bLt.forEach(t),QYo=r(PJe," (throws an error)."),PJe.forEach(t),UYo=i(Fl),bt=n(Fl,"DIV",{class:!0});var L7=s(bt);T(T9.$$.fragment,L7),HYo=i(L7),R0e=n(L7,"P",{});var vLt=s(R0e);JYo=r(vLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vLt.forEach(t),YYo=i(L7),Md=n(L7,"P",{});var nne=s(Md);KYo=r(nne,`Note:
Loading a model from its configuration file does `),P0e=n(nne,"STRONG",{});var FLt=s(P0e);ZYo=r(FLt,"not"),FLt.forEach(t),eKo=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(nne,"A",{href:!0});var TLt=s(GW);oKo=r(TLt,"from_pretrained()"),TLt.forEach(t),rKo=r(nne," to load the model weights."),nne.forEach(t),tKo=i(L7),T(xv.$$.fragment,L7),L7.forEach(t),aKo=i(Fl),to=n(Fl,"DIV",{class:!0});var va=s(to);T(M9.$$.fragment,va),nKo=i(va),B0e=n(va,"P",{});var MLt=s(B0e);sKo=r(MLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MLt.forEach(t),lKo=i(va),Ha=n(va,"P",{});var y7=s(Ha);iKo=r(y7,"The model class to instantiate is selected based on the "),I0e=n(y7,"CODE",{});var ELt=s(I0e);dKo=r(ELt,"model_type"),ELt.forEach(t),cKo=r(y7,` property of the config object (either
passed as an argument or loaded from `),N0e=n(y7,"CODE",{});var CLt=s(N0e);fKo=r(CLt,"pretrained_model_name_or_path"),CLt.forEach(t),mKo=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q0e=n(y7,"CODE",{});var wLt=s(q0e);gKo=r(wLt,"pretrained_model_name_or_path"),wLt.forEach(t),hKo=r(y7,":"),y7.forEach(t),pKo=i(va),Z=n(va,"UL",{});var ee=s(Z);$v=n(ee,"LI",{});var hqe=s($v);j0e=n(hqe,"STRONG",{});var ALt=s(j0e);_Ko=r(ALt,"albert"),ALt.forEach(t),uKo=r(hqe," \u2014 "),OW=n(hqe,"A",{href:!0});var LLt=s(OW);bKo=r(LLt,"AlbertForMultipleChoice"),LLt.forEach(t),vKo=r(hqe," (ALBERT model)"),hqe.forEach(t),FKo=i(ee),kv=n(ee,"LI",{});var pqe=s(kv);D0e=n(pqe,"STRONG",{});var yLt=s(D0e);TKo=r(yLt,"bert"),yLt.forEach(t),MKo=r(pqe," \u2014 "),VW=n(pqe,"A",{href:!0});var xLt=s(VW);EKo=r(xLt,"BertForMultipleChoice"),xLt.forEach(t),CKo=r(pqe," (BERT model)"),pqe.forEach(t),wKo=i(ee),Sv=n(ee,"LI",{});var _qe=s(Sv);G0e=n(_qe,"STRONG",{});var $Lt=s(G0e);AKo=r($Lt,"big_bird"),$Lt.forEach(t),LKo=r(_qe," \u2014 "),XW=n(_qe,"A",{href:!0});var kLt=s(XW);yKo=r(kLt,"BigBirdForMultipleChoice"),kLt.forEach(t),xKo=r(_qe," (BigBird model)"),_qe.forEach(t),$Ko=i(ee),Rv=n(ee,"LI",{});var uqe=s(Rv);O0e=n(uqe,"STRONG",{});var SLt=s(O0e);kKo=r(SLt,"camembert"),SLt.forEach(t),SKo=r(uqe," \u2014 "),zW=n(uqe,"A",{href:!0});var RLt=s(zW);RKo=r(RLt,"CamembertForMultipleChoice"),RLt.forEach(t),PKo=r(uqe," (CamemBERT model)"),uqe.forEach(t),BKo=i(ee),Pv=n(ee,"LI",{});var bqe=s(Pv);V0e=n(bqe,"STRONG",{});var PLt=s(V0e);IKo=r(PLt,"canine"),PLt.forEach(t),NKo=r(bqe," \u2014 "),WW=n(bqe,"A",{href:!0});var BLt=s(WW);qKo=r(BLt,"CanineForMultipleChoice"),BLt.forEach(t),jKo=r(bqe," (CANINE model)"),bqe.forEach(t),DKo=i(ee),Bv=n(ee,"LI",{});var vqe=s(Bv);X0e=n(vqe,"STRONG",{});var ILt=s(X0e);GKo=r(ILt,"convbert"),ILt.forEach(t),OKo=r(vqe," \u2014 "),QW=n(vqe,"A",{href:!0});var NLt=s(QW);VKo=r(NLt,"ConvBertForMultipleChoice"),NLt.forEach(t),XKo=r(vqe," (ConvBERT model)"),vqe.forEach(t),zKo=i(ee),Iv=n(ee,"LI",{});var Fqe=s(Iv);z0e=n(Fqe,"STRONG",{});var qLt=s(z0e);WKo=r(qLt,"data2vec-text"),qLt.forEach(t),QKo=r(Fqe," \u2014 "),UW=n(Fqe,"A",{href:!0});var jLt=s(UW);UKo=r(jLt,"Data2VecTextForMultipleChoice"),jLt.forEach(t),HKo=r(Fqe," (Data2VecText model)"),Fqe.forEach(t),JKo=i(ee),Nv=n(ee,"LI",{});var Tqe=s(Nv);W0e=n(Tqe,"STRONG",{});var DLt=s(W0e);YKo=r(DLt,"deberta-v2"),DLt.forEach(t),KKo=r(Tqe," \u2014 "),HW=n(Tqe,"A",{href:!0});var GLt=s(HW);ZKo=r(GLt,"DebertaV2ForMultipleChoice"),GLt.forEach(t),eZo=r(Tqe," (DeBERTa-v2 model)"),Tqe.forEach(t),oZo=i(ee),qv=n(ee,"LI",{});var Mqe=s(qv);Q0e=n(Mqe,"STRONG",{});var OLt=s(Q0e);rZo=r(OLt,"distilbert"),OLt.forEach(t),tZo=r(Mqe," \u2014 "),JW=n(Mqe,"A",{href:!0});var VLt=s(JW);aZo=r(VLt,"DistilBertForMultipleChoice"),VLt.forEach(t),nZo=r(Mqe," (DistilBERT model)"),Mqe.forEach(t),sZo=i(ee),jv=n(ee,"LI",{});var Eqe=s(jv);U0e=n(Eqe,"STRONG",{});var XLt=s(U0e);lZo=r(XLt,"electra"),XLt.forEach(t),iZo=r(Eqe," \u2014 "),YW=n(Eqe,"A",{href:!0});var zLt=s(YW);dZo=r(zLt,"ElectraForMultipleChoice"),zLt.forEach(t),cZo=r(Eqe," (ELECTRA model)"),Eqe.forEach(t),fZo=i(ee),Dv=n(ee,"LI",{});var Cqe=s(Dv);H0e=n(Cqe,"STRONG",{});var WLt=s(H0e);mZo=r(WLt,"flaubert"),WLt.forEach(t),gZo=r(Cqe," \u2014 "),KW=n(Cqe,"A",{href:!0});var QLt=s(KW);hZo=r(QLt,"FlaubertForMultipleChoice"),QLt.forEach(t),pZo=r(Cqe," (FlauBERT model)"),Cqe.forEach(t),_Zo=i(ee),Gv=n(ee,"LI",{});var wqe=s(Gv);J0e=n(wqe,"STRONG",{});var ULt=s(J0e);uZo=r(ULt,"fnet"),ULt.forEach(t),bZo=r(wqe," \u2014 "),ZW=n(wqe,"A",{href:!0});var HLt=s(ZW);vZo=r(HLt,"FNetForMultipleChoice"),HLt.forEach(t),FZo=r(wqe," (FNet model)"),wqe.forEach(t),TZo=i(ee),Ov=n(ee,"LI",{});var Aqe=s(Ov);Y0e=n(Aqe,"STRONG",{});var JLt=s(Y0e);MZo=r(JLt,"funnel"),JLt.forEach(t),EZo=r(Aqe," \u2014 "),eQ=n(Aqe,"A",{href:!0});var YLt=s(eQ);CZo=r(YLt,"FunnelForMultipleChoice"),YLt.forEach(t),wZo=r(Aqe," (Funnel Transformer model)"),Aqe.forEach(t),AZo=i(ee),Vv=n(ee,"LI",{});var Lqe=s(Vv);K0e=n(Lqe,"STRONG",{});var KLt=s(K0e);LZo=r(KLt,"ibert"),KLt.forEach(t),yZo=r(Lqe," \u2014 "),oQ=n(Lqe,"A",{href:!0});var ZLt=s(oQ);xZo=r(ZLt,"IBertForMultipleChoice"),ZLt.forEach(t),$Zo=r(Lqe," (I-BERT model)"),Lqe.forEach(t),kZo=i(ee),Xv=n(ee,"LI",{});var yqe=s(Xv);Z0e=n(yqe,"STRONG",{});var eyt=s(Z0e);SZo=r(eyt,"longformer"),eyt.forEach(t),RZo=r(yqe," \u2014 "),rQ=n(yqe,"A",{href:!0});var oyt=s(rQ);PZo=r(oyt,"LongformerForMultipleChoice"),oyt.forEach(t),BZo=r(yqe," (Longformer model)"),yqe.forEach(t),IZo=i(ee),zv=n(ee,"LI",{});var xqe=s(zv);e1e=n(xqe,"STRONG",{});var ryt=s(e1e);NZo=r(ryt,"luke"),ryt.forEach(t),qZo=r(xqe," \u2014 "),tQ=n(xqe,"A",{href:!0});var tyt=s(tQ);jZo=r(tyt,"LukeForMultipleChoice"),tyt.forEach(t),DZo=r(xqe," (LUKE model)"),xqe.forEach(t),GZo=i(ee),Wv=n(ee,"LI",{});var $qe=s(Wv);o1e=n($qe,"STRONG",{});var ayt=s(o1e);OZo=r(ayt,"megatron-bert"),ayt.forEach(t),VZo=r($qe," \u2014 "),aQ=n($qe,"A",{href:!0});var nyt=s(aQ);XZo=r(nyt,"MegatronBertForMultipleChoice"),nyt.forEach(t),zZo=r($qe," (Megatron-BERT model)"),$qe.forEach(t),WZo=i(ee),Qv=n(ee,"LI",{});var kqe=s(Qv);r1e=n(kqe,"STRONG",{});var syt=s(r1e);QZo=r(syt,"mobilebert"),syt.forEach(t),UZo=r(kqe," \u2014 "),nQ=n(kqe,"A",{href:!0});var lyt=s(nQ);HZo=r(lyt,"MobileBertForMultipleChoice"),lyt.forEach(t),JZo=r(kqe," (MobileBERT model)"),kqe.forEach(t),YZo=i(ee),Uv=n(ee,"LI",{});var Sqe=s(Uv);t1e=n(Sqe,"STRONG",{});var iyt=s(t1e);KZo=r(iyt,"mpnet"),iyt.forEach(t),ZZo=r(Sqe," \u2014 "),sQ=n(Sqe,"A",{href:!0});var dyt=s(sQ);eer=r(dyt,"MPNetForMultipleChoice"),dyt.forEach(t),oer=r(Sqe," (MPNet model)"),Sqe.forEach(t),rer=i(ee),Hv=n(ee,"LI",{});var Rqe=s(Hv);a1e=n(Rqe,"STRONG",{});var cyt=s(a1e);ter=r(cyt,"nezha"),cyt.forEach(t),aer=r(Rqe," \u2014 "),lQ=n(Rqe,"A",{href:!0});var fyt=s(lQ);ner=r(fyt,"NezhaForMultipleChoice"),fyt.forEach(t),ser=r(Rqe," (Nezha model)"),Rqe.forEach(t),ler=i(ee),Jv=n(ee,"LI",{});var Pqe=s(Jv);n1e=n(Pqe,"STRONG",{});var myt=s(n1e);ier=r(myt,"nystromformer"),myt.forEach(t),der=r(Pqe," \u2014 "),iQ=n(Pqe,"A",{href:!0});var gyt=s(iQ);cer=r(gyt,"NystromformerForMultipleChoice"),gyt.forEach(t),fer=r(Pqe," (Nystr\xF6mformer model)"),Pqe.forEach(t),mer=i(ee),Yv=n(ee,"LI",{});var Bqe=s(Yv);s1e=n(Bqe,"STRONG",{});var hyt=s(s1e);ger=r(hyt,"qdqbert"),hyt.forEach(t),her=r(Bqe," \u2014 "),dQ=n(Bqe,"A",{href:!0});var pyt=s(dQ);per=r(pyt,"QDQBertForMultipleChoice"),pyt.forEach(t),_er=r(Bqe," (QDQBert model)"),Bqe.forEach(t),uer=i(ee),Kv=n(ee,"LI",{});var Iqe=s(Kv);l1e=n(Iqe,"STRONG",{});var _yt=s(l1e);ber=r(_yt,"rembert"),_yt.forEach(t),ver=r(Iqe," \u2014 "),cQ=n(Iqe,"A",{href:!0});var uyt=s(cQ);Fer=r(uyt,"RemBertForMultipleChoice"),uyt.forEach(t),Ter=r(Iqe," (RemBERT model)"),Iqe.forEach(t),Mer=i(ee),Zv=n(ee,"LI",{});var Nqe=s(Zv);i1e=n(Nqe,"STRONG",{});var byt=s(i1e);Eer=r(byt,"roberta"),byt.forEach(t),Cer=r(Nqe," \u2014 "),fQ=n(Nqe,"A",{href:!0});var vyt=s(fQ);wer=r(vyt,"RobertaForMultipleChoice"),vyt.forEach(t),Aer=r(Nqe," (RoBERTa model)"),Nqe.forEach(t),Ler=i(ee),eF=n(ee,"LI",{});var qqe=s(eF);d1e=n(qqe,"STRONG",{});var Fyt=s(d1e);yer=r(Fyt,"roformer"),Fyt.forEach(t),xer=r(qqe," \u2014 "),mQ=n(qqe,"A",{href:!0});var Tyt=s(mQ);$er=r(Tyt,"RoFormerForMultipleChoice"),Tyt.forEach(t),ker=r(qqe," (RoFormer model)"),qqe.forEach(t),Ser=i(ee),oF=n(ee,"LI",{});var jqe=s(oF);c1e=n(jqe,"STRONG",{});var Myt=s(c1e);Rer=r(Myt,"squeezebert"),Myt.forEach(t),Per=r(jqe," \u2014 "),gQ=n(jqe,"A",{href:!0});var Eyt=s(gQ);Ber=r(Eyt,"SqueezeBertForMultipleChoice"),Eyt.forEach(t),Ier=r(jqe," (SqueezeBERT model)"),jqe.forEach(t),Ner=i(ee),rF=n(ee,"LI",{});var Dqe=s(rF);f1e=n(Dqe,"STRONG",{});var Cyt=s(f1e);qer=r(Cyt,"xlm"),Cyt.forEach(t),jer=r(Dqe," \u2014 "),hQ=n(Dqe,"A",{href:!0});var wyt=s(hQ);Der=r(wyt,"XLMForMultipleChoice"),wyt.forEach(t),Ger=r(Dqe," (XLM model)"),Dqe.forEach(t),Oer=i(ee),tF=n(ee,"LI",{});var Gqe=s(tF);m1e=n(Gqe,"STRONG",{});var Ayt=s(m1e);Ver=r(Ayt,"xlm-roberta"),Ayt.forEach(t),Xer=r(Gqe," \u2014 "),pQ=n(Gqe,"A",{href:!0});var Lyt=s(pQ);zer=r(Lyt,"XLMRobertaForMultipleChoice"),Lyt.forEach(t),Wer=r(Gqe," (XLM-RoBERTa model)"),Gqe.forEach(t),Qer=i(ee),aF=n(ee,"LI",{});var Oqe=s(aF);g1e=n(Oqe,"STRONG",{});var yyt=s(g1e);Uer=r(yyt,"xlm-roberta-xl"),yyt.forEach(t),Her=r(Oqe," \u2014 "),_Q=n(Oqe,"A",{href:!0});var xyt=s(_Q);Jer=r(xyt,"XLMRobertaXLForMultipleChoice"),xyt.forEach(t),Yer=r(Oqe," (XLM-RoBERTa-XL model)"),Oqe.forEach(t),Ker=i(ee),nF=n(ee,"LI",{});var Vqe=s(nF);h1e=n(Vqe,"STRONG",{});var $yt=s(h1e);Zer=r($yt,"xlnet"),$yt.forEach(t),eor=r(Vqe," \u2014 "),uQ=n(Vqe,"A",{href:!0});var kyt=s(uQ);oor=r(kyt,"XLNetForMultipleChoice"),kyt.forEach(t),ror=r(Vqe," (XLNet model)"),Vqe.forEach(t),tor=i(ee),sF=n(ee,"LI",{});var Xqe=s(sF);p1e=n(Xqe,"STRONG",{});var Syt=s(p1e);aor=r(Syt,"yoso"),Syt.forEach(t),nor=r(Xqe," \u2014 "),bQ=n(Xqe,"A",{href:!0});var Ryt=s(bQ);sor=r(Ryt,"YosoForMultipleChoice"),Ryt.forEach(t),lor=r(Xqe," (YOSO model)"),Xqe.forEach(t),ee.forEach(t),ior=i(va),lF=n(va,"P",{});var zqe=s(lF);dor=r(zqe,"The model is set in evaluation mode by default using "),_1e=n(zqe,"CODE",{});var Pyt=s(_1e);cor=r(Pyt,"model.eval()"),Pyt.forEach(t),mor=r(zqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(zqe,"CODE",{});var Byt=s(u1e);gor=r(Byt,"model.train()"),Byt.forEach(t),zqe.forEach(t),hor=i(va),T(iF.$$.fragment,va),va.forEach(t),Fl.forEach(t),wUe=i(f),Ed=n(f,"H2",{class:!0});var BJe=s(Ed);dF=n(BJe,"A",{id:!0,class:!0,href:!0});var Iyt=s(dF);b1e=n(Iyt,"SPAN",{});var Nyt=s(b1e);T(E9.$$.fragment,Nyt),Nyt.forEach(t),Iyt.forEach(t),por=i(BJe),v1e=n(BJe,"SPAN",{});var qyt=s(v1e);_or=r(qyt,"AutoModelForNextSentencePrediction"),qyt.forEach(t),BJe.forEach(t),AUe=i(f),jo=n(f,"DIV",{class:!0});var Tl=s(jo);T(C9.$$.fragment,Tl),uor=i(Tl),Cd=n(Tl,"P",{});var sne=s(Cd);bor=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vQ=n(sne,"A",{href:!0});var jyt=s(vQ);vor=r(jyt,"from_pretrained()"),jyt.forEach(t),For=r(sne," class method or the "),FQ=n(sne,"A",{href:!0});var Dyt=s(FQ);Tor=r(Dyt,"from_config()"),Dyt.forEach(t),Mor=r(sne,` class
method.`),sne.forEach(t),Eor=i(Tl),w9=n(Tl,"P",{});var IJe=s(w9);Cor=r(IJe,"This class cannot be instantiated directly using "),F1e=n(IJe,"CODE",{});var Gyt=s(F1e);wor=r(Gyt,"__init__()"),Gyt.forEach(t),Aor=r(IJe," (throws an error)."),IJe.forEach(t),Lor=i(Tl),vt=n(Tl,"DIV",{class:!0});var x7=s(vt);T(A9.$$.fragment,x7),yor=i(x7),T1e=n(x7,"P",{});var Oyt=s(T1e);xor=r(Oyt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Oyt.forEach(t),$or=i(x7),wd=n(x7,"P",{});var lne=s(wd);kor=r(lne,`Note:
Loading a model from its configuration file does `),M1e=n(lne,"STRONG",{});var Vyt=s(M1e);Sor=r(Vyt,"not"),Vyt.forEach(t),Ror=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(lne,"A",{href:!0});var Xyt=s(TQ);Por=r(Xyt,"from_pretrained()"),Xyt.forEach(t),Bor=r(lne," to load the model weights."),lne.forEach(t),Ior=i(x7),T(cF.$$.fragment,x7),x7.forEach(t),Nor=i(Tl),ao=n(Tl,"DIV",{class:!0});var Fa=s(ao);T(L9.$$.fragment,Fa),qor=i(Fa),E1e=n(Fa,"P",{});var zyt=s(E1e);jor=r(zyt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zyt.forEach(t),Dor=i(Fa),Ja=n(Fa,"P",{});var $7=s(Ja);Gor=r($7,"The model class to instantiate is selected based on the "),C1e=n($7,"CODE",{});var Wyt=s(C1e);Oor=r(Wyt,"model_type"),Wyt.forEach(t),Vor=r($7,` property of the config object (either
passed as an argument or loaded from `),w1e=n($7,"CODE",{});var Qyt=s(w1e);Xor=r(Qyt,"pretrained_model_name_or_path"),Qyt.forEach(t),zor=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n($7,"CODE",{});var Uyt=s(A1e);Wor=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),Qor=r($7,":"),$7.forEach(t),Uor=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);fF=n(Ta,"LI",{});var Wqe=s(fF);L1e=n(Wqe,"STRONG",{});var Hyt=s(L1e);Hor=r(Hyt,"bert"),Hyt.forEach(t),Jor=r(Wqe," \u2014 "),MQ=n(Wqe,"A",{href:!0});var Jyt=s(MQ);Yor=r(Jyt,"BertForNextSentencePrediction"),Jyt.forEach(t),Kor=r(Wqe," (BERT model)"),Wqe.forEach(t),Zor=i(Ta),mF=n(Ta,"LI",{});var Qqe=s(mF);y1e=n(Qqe,"STRONG",{});var Yyt=s(y1e);err=r(Yyt,"fnet"),Yyt.forEach(t),orr=r(Qqe," \u2014 "),EQ=n(Qqe,"A",{href:!0});var Kyt=s(EQ);rrr=r(Kyt,"FNetForNextSentencePrediction"),Kyt.forEach(t),trr=r(Qqe," (FNet model)"),Qqe.forEach(t),arr=i(Ta),gF=n(Ta,"LI",{});var Uqe=s(gF);x1e=n(Uqe,"STRONG",{});var Zyt=s(x1e);nrr=r(Zyt,"megatron-bert"),Zyt.forEach(t),srr=r(Uqe," \u2014 "),CQ=n(Uqe,"A",{href:!0});var e9t=s(CQ);lrr=r(e9t,"MegatronBertForNextSentencePrediction"),e9t.forEach(t),irr=r(Uqe," (Megatron-BERT model)"),Uqe.forEach(t),drr=i(Ta),hF=n(Ta,"LI",{});var Hqe=s(hF);$1e=n(Hqe,"STRONG",{});var o9t=s($1e);crr=r(o9t,"mobilebert"),o9t.forEach(t),frr=r(Hqe," \u2014 "),wQ=n(Hqe,"A",{href:!0});var r9t=s(wQ);mrr=r(r9t,"MobileBertForNextSentencePrediction"),r9t.forEach(t),grr=r(Hqe," (MobileBERT model)"),Hqe.forEach(t),hrr=i(Ta),pF=n(Ta,"LI",{});var Jqe=s(pF);k1e=n(Jqe,"STRONG",{});var t9t=s(k1e);prr=r(t9t,"nezha"),t9t.forEach(t),_rr=r(Jqe," \u2014 "),AQ=n(Jqe,"A",{href:!0});var a9t=s(AQ);urr=r(a9t,"NezhaForNextSentencePrediction"),a9t.forEach(t),brr=r(Jqe," (Nezha model)"),Jqe.forEach(t),vrr=i(Ta),_F=n(Ta,"LI",{});var Yqe=s(_F);S1e=n(Yqe,"STRONG",{});var n9t=s(S1e);Frr=r(n9t,"qdqbert"),n9t.forEach(t),Trr=r(Yqe," \u2014 "),LQ=n(Yqe,"A",{href:!0});var s9t=s(LQ);Mrr=r(s9t,"QDQBertForNextSentencePrediction"),s9t.forEach(t),Err=r(Yqe," (QDQBert model)"),Yqe.forEach(t),Ta.forEach(t),Crr=i(Fa),uF=n(Fa,"P",{});var Kqe=s(uF);wrr=r(Kqe,"The model is set in evaluation mode by default using "),R1e=n(Kqe,"CODE",{});var l9t=s(R1e);Arr=r(l9t,"model.eval()"),l9t.forEach(t),Lrr=r(Kqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(Kqe,"CODE",{});var i9t=s(P1e);yrr=r(i9t,"model.train()"),i9t.forEach(t),Kqe.forEach(t),xrr=i(Fa),T(bF.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),LUe=i(f),Ad=n(f,"H2",{class:!0});var NJe=s(Ad);vF=n(NJe,"A",{id:!0,class:!0,href:!0});var d9t=s(vF);B1e=n(d9t,"SPAN",{});var c9t=s(B1e);T(y9.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),$rr=i(NJe),I1e=n(NJe,"SPAN",{});var f9t=s(I1e);krr=r(f9t,"AutoModelForTokenClassification"),f9t.forEach(t),NJe.forEach(t),yUe=i(f),Go=n(f,"DIV",{class:!0});var Ml=s(Go);T(x9.$$.fragment,Ml),Srr=i(Ml),Ld=n(Ml,"P",{});var ine=s(Ld);Rrr=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yQ=n(ine,"A",{href:!0});var m9t=s(yQ);Prr=r(m9t,"from_pretrained()"),m9t.forEach(t),Brr=r(ine," class method or the "),xQ=n(ine,"A",{href:!0});var g9t=s(xQ);Irr=r(g9t,"from_config()"),g9t.forEach(t),Nrr=r(ine,` class
method.`),ine.forEach(t),qrr=i(Ml),$9=n(Ml,"P",{});var qJe=s($9);jrr=r(qJe,"This class cannot be instantiated directly using "),N1e=n(qJe,"CODE",{});var h9t=s(N1e);Drr=r(h9t,"__init__()"),h9t.forEach(t),Grr=r(qJe," (throws an error)."),qJe.forEach(t),Orr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var k7=s(Ft);T(k9.$$.fragment,k7),Vrr=i(k7),q1e=n(k7,"P",{});var p9t=s(q1e);Xrr=r(p9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),p9t.forEach(t),zrr=i(k7),yd=n(k7,"P",{});var dne=s(yd);Wrr=r(dne,`Note:
Loading a model from its configuration file does `),j1e=n(dne,"STRONG",{});var _9t=s(j1e);Qrr=r(_9t,"not"),_9t.forEach(t),Urr=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(dne,"A",{href:!0});var u9t=s($Q);Hrr=r(u9t,"from_pretrained()"),u9t.forEach(t),Jrr=r(dne," to load the model weights."),dne.forEach(t),Yrr=i(k7),T(FF.$$.fragment,k7),k7.forEach(t),Krr=i(Ml),no=n(Ml,"DIV",{class:!0});var Ma=s(no);T(S9.$$.fragment,Ma),Zrr=i(Ma),D1e=n(Ma,"P",{});var b9t=s(D1e);etr=r(b9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b9t.forEach(t),otr=i(Ma),Ya=n(Ma,"P",{});var S7=s(Ya);rtr=r(S7,"The model class to instantiate is selected based on the "),G1e=n(S7,"CODE",{});var v9t=s(G1e);ttr=r(v9t,"model_type"),v9t.forEach(t),atr=r(S7,` property of the config object (either
passed as an argument or loaded from `),O1e=n(S7,"CODE",{});var F9t=s(O1e);ntr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),str=r(S7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(S7,"CODE",{});var T9t=s(V1e);ltr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),itr=r(S7,":"),S7.forEach(t),dtr=i(Ma),H=n(Ma,"UL",{});var K=s(H);TF=n(K,"LI",{});var Zqe=s(TF);X1e=n(Zqe,"STRONG",{});var M9t=s(X1e);ctr=r(M9t,"albert"),M9t.forEach(t),ftr=r(Zqe," \u2014 "),kQ=n(Zqe,"A",{href:!0});var E9t=s(kQ);mtr=r(E9t,"AlbertForTokenClassification"),E9t.forEach(t),gtr=r(Zqe," (ALBERT model)"),Zqe.forEach(t),htr=i(K),MF=n(K,"LI",{});var eje=s(MF);z1e=n(eje,"STRONG",{});var C9t=s(z1e);ptr=r(C9t,"bert"),C9t.forEach(t),_tr=r(eje," \u2014 "),SQ=n(eje,"A",{href:!0});var w9t=s(SQ);utr=r(w9t,"BertForTokenClassification"),w9t.forEach(t),btr=r(eje," (BERT model)"),eje.forEach(t),vtr=i(K),EF=n(K,"LI",{});var oje=s(EF);W1e=n(oje,"STRONG",{});var A9t=s(W1e);Ftr=r(A9t,"big_bird"),A9t.forEach(t),Ttr=r(oje," \u2014 "),RQ=n(oje,"A",{href:!0});var L9t=s(RQ);Mtr=r(L9t,"BigBirdForTokenClassification"),L9t.forEach(t),Etr=r(oje," (BigBird model)"),oje.forEach(t),Ctr=i(K),CF=n(K,"LI",{});var rje=s(CF);Q1e=n(rje,"STRONG",{});var y9t=s(Q1e);wtr=r(y9t,"bloom"),y9t.forEach(t),Atr=r(rje," \u2014 "),PQ=n(rje,"A",{href:!0});var x9t=s(PQ);Ltr=r(x9t,"BloomForTokenClassification"),x9t.forEach(t),ytr=r(rje," (BLOOM model)"),rje.forEach(t),xtr=i(K),wF=n(K,"LI",{});var tje=s(wF);U1e=n(tje,"STRONG",{});var $9t=s(U1e);$tr=r($9t,"camembert"),$9t.forEach(t),ktr=r(tje," \u2014 "),BQ=n(tje,"A",{href:!0});var k9t=s(BQ);Str=r(k9t,"CamembertForTokenClassification"),k9t.forEach(t),Rtr=r(tje," (CamemBERT model)"),tje.forEach(t),Ptr=i(K),AF=n(K,"LI",{});var aje=s(AF);H1e=n(aje,"STRONG",{});var S9t=s(H1e);Btr=r(S9t,"canine"),S9t.forEach(t),Itr=r(aje," \u2014 "),IQ=n(aje,"A",{href:!0});var R9t=s(IQ);Ntr=r(R9t,"CanineForTokenClassification"),R9t.forEach(t),qtr=r(aje," (CANINE model)"),aje.forEach(t),jtr=i(K),LF=n(K,"LI",{});var nje=s(LF);J1e=n(nje,"STRONG",{});var P9t=s(J1e);Dtr=r(P9t,"convbert"),P9t.forEach(t),Gtr=r(nje," \u2014 "),NQ=n(nje,"A",{href:!0});var B9t=s(NQ);Otr=r(B9t,"ConvBertForTokenClassification"),B9t.forEach(t),Vtr=r(nje," (ConvBERT model)"),nje.forEach(t),Xtr=i(K),yF=n(K,"LI",{});var sje=s(yF);Y1e=n(sje,"STRONG",{});var I9t=s(Y1e);ztr=r(I9t,"data2vec-text"),I9t.forEach(t),Wtr=r(sje," \u2014 "),qQ=n(sje,"A",{href:!0});var N9t=s(qQ);Qtr=r(N9t,"Data2VecTextForTokenClassification"),N9t.forEach(t),Utr=r(sje," (Data2VecText model)"),sje.forEach(t),Htr=i(K),xF=n(K,"LI",{});var lje=s(xF);K1e=n(lje,"STRONG",{});var q9t=s(K1e);Jtr=r(q9t,"deberta"),q9t.forEach(t),Ytr=r(lje," \u2014 "),jQ=n(lje,"A",{href:!0});var j9t=s(jQ);Ktr=r(j9t,"DebertaForTokenClassification"),j9t.forEach(t),Ztr=r(lje," (DeBERTa model)"),lje.forEach(t),ear=i(K),$F=n(K,"LI",{});var ije=s($F);Z1e=n(ije,"STRONG",{});var D9t=s(Z1e);oar=r(D9t,"deberta-v2"),D9t.forEach(t),rar=r(ije," \u2014 "),DQ=n(ije,"A",{href:!0});var G9t=s(DQ);tar=r(G9t,"DebertaV2ForTokenClassification"),G9t.forEach(t),aar=r(ije," (DeBERTa-v2 model)"),ije.forEach(t),nar=i(K),kF=n(K,"LI",{});var dje=s(kF);ebe=n(dje,"STRONG",{});var O9t=s(ebe);sar=r(O9t,"distilbert"),O9t.forEach(t),lar=r(dje," \u2014 "),GQ=n(dje,"A",{href:!0});var V9t=s(GQ);iar=r(V9t,"DistilBertForTokenClassification"),V9t.forEach(t),dar=r(dje," (DistilBERT model)"),dje.forEach(t),car=i(K),SF=n(K,"LI",{});var cje=s(SF);obe=n(cje,"STRONG",{});var X9t=s(obe);far=r(X9t,"electra"),X9t.forEach(t),mar=r(cje," \u2014 "),OQ=n(cje,"A",{href:!0});var z9t=s(OQ);gar=r(z9t,"ElectraForTokenClassification"),z9t.forEach(t),har=r(cje," (ELECTRA model)"),cje.forEach(t),par=i(K),RF=n(K,"LI",{});var fje=s(RF);rbe=n(fje,"STRONG",{});var W9t=s(rbe);_ar=r(W9t,"flaubert"),W9t.forEach(t),uar=r(fje," \u2014 "),VQ=n(fje,"A",{href:!0});var Q9t=s(VQ);bar=r(Q9t,"FlaubertForTokenClassification"),Q9t.forEach(t),Far=r(fje," (FlauBERT model)"),fje.forEach(t),Tar=i(K),PF=n(K,"LI",{});var mje=s(PF);tbe=n(mje,"STRONG",{});var U9t=s(tbe);Mar=r(U9t,"fnet"),U9t.forEach(t),Ear=r(mje," \u2014 "),XQ=n(mje,"A",{href:!0});var H9t=s(XQ);Car=r(H9t,"FNetForTokenClassification"),H9t.forEach(t),war=r(mje," (FNet model)"),mje.forEach(t),Aar=i(K),BF=n(K,"LI",{});var gje=s(BF);abe=n(gje,"STRONG",{});var J9t=s(abe);Lar=r(J9t,"funnel"),J9t.forEach(t),yar=r(gje," \u2014 "),zQ=n(gje,"A",{href:!0});var Y9t=s(zQ);xar=r(Y9t,"FunnelForTokenClassification"),Y9t.forEach(t),$ar=r(gje," (Funnel Transformer model)"),gje.forEach(t),kar=i(K),IF=n(K,"LI",{});var hje=s(IF);nbe=n(hje,"STRONG",{});var K9t=s(nbe);Sar=r(K9t,"gpt2"),K9t.forEach(t),Rar=r(hje," \u2014 "),WQ=n(hje,"A",{href:!0});var Z9t=s(WQ);Par=r(Z9t,"GPT2ForTokenClassification"),Z9t.forEach(t),Bar=r(hje," (OpenAI GPT-2 model)"),hje.forEach(t),Iar=i(K),NF=n(K,"LI",{});var pje=s(NF);sbe=n(pje,"STRONG",{});var ext=s(sbe);Nar=r(ext,"ibert"),ext.forEach(t),qar=r(pje," \u2014 "),QQ=n(pje,"A",{href:!0});var oxt=s(QQ);jar=r(oxt,"IBertForTokenClassification"),oxt.forEach(t),Dar=r(pje," (I-BERT model)"),pje.forEach(t),Gar=i(K),qF=n(K,"LI",{});var _je=s(qF);lbe=n(_je,"STRONG",{});var rxt=s(lbe);Oar=r(rxt,"layoutlm"),rxt.forEach(t),Var=r(_je," \u2014 "),UQ=n(_je,"A",{href:!0});var txt=s(UQ);Xar=r(txt,"LayoutLMForTokenClassification"),txt.forEach(t),zar=r(_je," (LayoutLM model)"),_je.forEach(t),War=i(K),jF=n(K,"LI",{});var uje=s(jF);ibe=n(uje,"STRONG",{});var axt=s(ibe);Qar=r(axt,"layoutlmv2"),axt.forEach(t),Uar=r(uje," \u2014 "),HQ=n(uje,"A",{href:!0});var nxt=s(HQ);Har=r(nxt,"LayoutLMv2ForTokenClassification"),nxt.forEach(t),Jar=r(uje," (LayoutLMv2 model)"),uje.forEach(t),Yar=i(K),DF=n(K,"LI",{});var bje=s(DF);dbe=n(bje,"STRONG",{});var sxt=s(dbe);Kar=r(sxt,"layoutlmv3"),sxt.forEach(t),Zar=r(bje," \u2014 "),JQ=n(bje,"A",{href:!0});var lxt=s(JQ);enr=r(lxt,"LayoutLMv3ForTokenClassification"),lxt.forEach(t),onr=r(bje," (LayoutLMv3 model)"),bje.forEach(t),rnr=i(K),GF=n(K,"LI",{});var vje=s(GF);cbe=n(vje,"STRONG",{});var ixt=s(cbe);tnr=r(ixt,"longformer"),ixt.forEach(t),anr=r(vje," \u2014 "),YQ=n(vje,"A",{href:!0});var dxt=s(YQ);nnr=r(dxt,"LongformerForTokenClassification"),dxt.forEach(t),snr=r(vje," (Longformer model)"),vje.forEach(t),lnr=i(K),OF=n(K,"LI",{});var Fje=s(OF);fbe=n(Fje,"STRONG",{});var cxt=s(fbe);inr=r(cxt,"luke"),cxt.forEach(t),dnr=r(Fje," \u2014 "),KQ=n(Fje,"A",{href:!0});var fxt=s(KQ);cnr=r(fxt,"LukeForTokenClassification"),fxt.forEach(t),fnr=r(Fje," (LUKE model)"),Fje.forEach(t),mnr=i(K),VF=n(K,"LI",{});var Tje=s(VF);mbe=n(Tje,"STRONG",{});var mxt=s(mbe);gnr=r(mxt,"megatron-bert"),mxt.forEach(t),hnr=r(Tje," \u2014 "),ZQ=n(Tje,"A",{href:!0});var gxt=s(ZQ);pnr=r(gxt,"MegatronBertForTokenClassification"),gxt.forEach(t),_nr=r(Tje," (Megatron-BERT model)"),Tje.forEach(t),unr=i(K),XF=n(K,"LI",{});var Mje=s(XF);gbe=n(Mje,"STRONG",{});var hxt=s(gbe);bnr=r(hxt,"mobilebert"),hxt.forEach(t),vnr=r(Mje," \u2014 "),eU=n(Mje,"A",{href:!0});var pxt=s(eU);Fnr=r(pxt,"MobileBertForTokenClassification"),pxt.forEach(t),Tnr=r(Mje," (MobileBERT model)"),Mje.forEach(t),Mnr=i(K),zF=n(K,"LI",{});var Eje=s(zF);hbe=n(Eje,"STRONG",{});var _xt=s(hbe);Enr=r(_xt,"mpnet"),_xt.forEach(t),Cnr=r(Eje," \u2014 "),oU=n(Eje,"A",{href:!0});var uxt=s(oU);wnr=r(uxt,"MPNetForTokenClassification"),uxt.forEach(t),Anr=r(Eje," (MPNet model)"),Eje.forEach(t),Lnr=i(K),WF=n(K,"LI",{});var Cje=s(WF);pbe=n(Cje,"STRONG",{});var bxt=s(pbe);ynr=r(bxt,"nezha"),bxt.forEach(t),xnr=r(Cje," \u2014 "),rU=n(Cje,"A",{href:!0});var vxt=s(rU);$nr=r(vxt,"NezhaForTokenClassification"),vxt.forEach(t),knr=r(Cje," (Nezha model)"),Cje.forEach(t),Snr=i(K),QF=n(K,"LI",{});var wje=s(QF);_be=n(wje,"STRONG",{});var Fxt=s(_be);Rnr=r(Fxt,"nystromformer"),Fxt.forEach(t),Pnr=r(wje," \u2014 "),tU=n(wje,"A",{href:!0});var Txt=s(tU);Bnr=r(Txt,"NystromformerForTokenClassification"),Txt.forEach(t),Inr=r(wje," (Nystr\xF6mformer model)"),wje.forEach(t),Nnr=i(K),UF=n(K,"LI",{});var Aje=s(UF);ube=n(Aje,"STRONG",{});var Mxt=s(ube);qnr=r(Mxt,"qdqbert"),Mxt.forEach(t),jnr=r(Aje," \u2014 "),aU=n(Aje,"A",{href:!0});var Ext=s(aU);Dnr=r(Ext,"QDQBertForTokenClassification"),Ext.forEach(t),Gnr=r(Aje," (QDQBert model)"),Aje.forEach(t),Onr=i(K),HF=n(K,"LI",{});var Lje=s(HF);bbe=n(Lje,"STRONG",{});var Cxt=s(bbe);Vnr=r(Cxt,"rembert"),Cxt.forEach(t),Xnr=r(Lje," \u2014 "),nU=n(Lje,"A",{href:!0});var wxt=s(nU);znr=r(wxt,"RemBertForTokenClassification"),wxt.forEach(t),Wnr=r(Lje," (RemBERT model)"),Lje.forEach(t),Qnr=i(K),JF=n(K,"LI",{});var yje=s(JF);vbe=n(yje,"STRONG",{});var Axt=s(vbe);Unr=r(Axt,"roberta"),Axt.forEach(t),Hnr=r(yje," \u2014 "),sU=n(yje,"A",{href:!0});var Lxt=s(sU);Jnr=r(Lxt,"RobertaForTokenClassification"),Lxt.forEach(t),Ynr=r(yje," (RoBERTa model)"),yje.forEach(t),Knr=i(K),YF=n(K,"LI",{});var xje=s(YF);Fbe=n(xje,"STRONG",{});var yxt=s(Fbe);Znr=r(yxt,"roformer"),yxt.forEach(t),esr=r(xje," \u2014 "),lU=n(xje,"A",{href:!0});var xxt=s(lU);osr=r(xxt,"RoFormerForTokenClassification"),xxt.forEach(t),rsr=r(xje," (RoFormer model)"),xje.forEach(t),tsr=i(K),KF=n(K,"LI",{});var $je=s(KF);Tbe=n($je,"STRONG",{});var $xt=s(Tbe);asr=r($xt,"squeezebert"),$xt.forEach(t),nsr=r($je," \u2014 "),iU=n($je,"A",{href:!0});var kxt=s(iU);ssr=r(kxt,"SqueezeBertForTokenClassification"),kxt.forEach(t),lsr=r($je," (SqueezeBERT model)"),$je.forEach(t),isr=i(K),ZF=n(K,"LI",{});var kje=s(ZF);Mbe=n(kje,"STRONG",{});var Sxt=s(Mbe);dsr=r(Sxt,"xlm"),Sxt.forEach(t),csr=r(kje," \u2014 "),dU=n(kje,"A",{href:!0});var Rxt=s(dU);fsr=r(Rxt,"XLMForTokenClassification"),Rxt.forEach(t),msr=r(kje," (XLM model)"),kje.forEach(t),gsr=i(K),eT=n(K,"LI",{});var Sje=s(eT);Ebe=n(Sje,"STRONG",{});var Pxt=s(Ebe);hsr=r(Pxt,"xlm-roberta"),Pxt.forEach(t),psr=r(Sje," \u2014 "),cU=n(Sje,"A",{href:!0});var Bxt=s(cU);_sr=r(Bxt,"XLMRobertaForTokenClassification"),Bxt.forEach(t),usr=r(Sje," (XLM-RoBERTa model)"),Sje.forEach(t),bsr=i(K),oT=n(K,"LI",{});var Rje=s(oT);Cbe=n(Rje,"STRONG",{});var Ixt=s(Cbe);vsr=r(Ixt,"xlm-roberta-xl"),Ixt.forEach(t),Fsr=r(Rje," \u2014 "),fU=n(Rje,"A",{href:!0});var Nxt=s(fU);Tsr=r(Nxt,"XLMRobertaXLForTokenClassification"),Nxt.forEach(t),Msr=r(Rje," (XLM-RoBERTa-XL model)"),Rje.forEach(t),Esr=i(K),rT=n(K,"LI",{});var Pje=s(rT);wbe=n(Pje,"STRONG",{});var qxt=s(wbe);Csr=r(qxt,"xlnet"),qxt.forEach(t),wsr=r(Pje," \u2014 "),mU=n(Pje,"A",{href:!0});var jxt=s(mU);Asr=r(jxt,"XLNetForTokenClassification"),jxt.forEach(t),Lsr=r(Pje," (XLNet model)"),Pje.forEach(t),ysr=i(K),tT=n(K,"LI",{});var Bje=s(tT);Abe=n(Bje,"STRONG",{});var Dxt=s(Abe);xsr=r(Dxt,"yoso"),Dxt.forEach(t),$sr=r(Bje," \u2014 "),gU=n(Bje,"A",{href:!0});var Gxt=s(gU);ksr=r(Gxt,"YosoForTokenClassification"),Gxt.forEach(t),Ssr=r(Bje," (YOSO model)"),Bje.forEach(t),K.forEach(t),Rsr=i(Ma),aT=n(Ma,"P",{});var Ije=s(aT);Psr=r(Ije,"The model is set in evaluation mode by default using "),Lbe=n(Ije,"CODE",{});var Oxt=s(Lbe);Bsr=r(Oxt,"model.eval()"),Oxt.forEach(t),Isr=r(Ije,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=n(Ije,"CODE",{});var Vxt=s(ybe);Nsr=r(Vxt,"model.train()"),Vxt.forEach(t),Ije.forEach(t),qsr=i(Ma),T(nT.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),xUe=i(f),xd=n(f,"H2",{class:!0});var jJe=s(xd);sT=n(jJe,"A",{id:!0,class:!0,href:!0});var Xxt=s(sT);xbe=n(Xxt,"SPAN",{});var zxt=s(xbe);T(R9.$$.fragment,zxt),zxt.forEach(t),Xxt.forEach(t),jsr=i(jJe),$be=n(jJe,"SPAN",{});var Wxt=s($be);Dsr=r(Wxt,"AutoModelForQuestionAnswering"),Wxt.forEach(t),jJe.forEach(t),$Ue=i(f),Oo=n(f,"DIV",{class:!0});var El=s(Oo);T(P9.$$.fragment,El),Gsr=i(El),$d=n(El,"P",{});var cne=s($d);Osr=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hU=n(cne,"A",{href:!0});var Qxt=s(hU);Vsr=r(Qxt,"from_pretrained()"),Qxt.forEach(t),Xsr=r(cne," class method or the "),pU=n(cne,"A",{href:!0});var Uxt=s(pU);zsr=r(Uxt,"from_config()"),Uxt.forEach(t),Wsr=r(cne,` class
method.`),cne.forEach(t),Qsr=i(El),B9=n(El,"P",{});var DJe=s(B9);Usr=r(DJe,"This class cannot be instantiated directly using "),kbe=n(DJe,"CODE",{});var Hxt=s(kbe);Hsr=r(Hxt,"__init__()"),Hxt.forEach(t),Jsr=r(DJe," (throws an error)."),DJe.forEach(t),Ysr=i(El),Tt=n(El,"DIV",{class:!0});var R7=s(Tt);T(I9.$$.fragment,R7),Ksr=i(R7),Sbe=n(R7,"P",{});var Jxt=s(Sbe);Zsr=r(Jxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jxt.forEach(t),elr=i(R7),kd=n(R7,"P",{});var fne=s(kd);olr=r(fne,`Note:
Loading a model from its configuration file does `),Rbe=n(fne,"STRONG",{});var Yxt=s(Rbe);rlr=r(Yxt,"not"),Yxt.forEach(t),tlr=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(fne,"A",{href:!0});var Kxt=s(_U);alr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),nlr=r(fne," to load the model weights."),fne.forEach(t),slr=i(R7),T(lT.$$.fragment,R7),R7.forEach(t),llr=i(El),so=n(El,"DIV",{class:!0});var Ea=s(so);T(N9.$$.fragment,Ea),ilr=i(Ea),Pbe=n(Ea,"P",{});var Zxt=s(Pbe);dlr=r(Zxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zxt.forEach(t),clr=i(Ea),Ka=n(Ea,"P",{});var P7=s(Ka);flr=r(P7,"The model class to instantiate is selected based on the "),Bbe=n(P7,"CODE",{});var e$t=s(Bbe);mlr=r(e$t,"model_type"),e$t.forEach(t),glr=r(P7,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(P7,"CODE",{});var o$t=s(Ibe);hlr=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),plr=r(P7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(P7,"CODE",{});var r$t=s(Nbe);_lr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),ulr=r(P7,":"),P7.forEach(t),blr=i(Ea),V=n(Ea,"UL",{});var X=s(V);iT=n(X,"LI",{});var Nje=s(iT);qbe=n(Nje,"STRONG",{});var t$t=s(qbe);vlr=r(t$t,"albert"),t$t.forEach(t),Flr=r(Nje," \u2014 "),uU=n(Nje,"A",{href:!0});var a$t=s(uU);Tlr=r(a$t,"AlbertForQuestionAnswering"),a$t.forEach(t),Mlr=r(Nje," (ALBERT model)"),Nje.forEach(t),Elr=i(X),dT=n(X,"LI",{});var qje=s(dT);jbe=n(qje,"STRONG",{});var n$t=s(jbe);Clr=r(n$t,"bart"),n$t.forEach(t),wlr=r(qje," \u2014 "),bU=n(qje,"A",{href:!0});var s$t=s(bU);Alr=r(s$t,"BartForQuestionAnswering"),s$t.forEach(t),Llr=r(qje," (BART model)"),qje.forEach(t),ylr=i(X),cT=n(X,"LI",{});var jje=s(cT);Dbe=n(jje,"STRONG",{});var l$t=s(Dbe);xlr=r(l$t,"bert"),l$t.forEach(t),$lr=r(jje," \u2014 "),vU=n(jje,"A",{href:!0});var i$t=s(vU);klr=r(i$t,"BertForQuestionAnswering"),i$t.forEach(t),Slr=r(jje," (BERT model)"),jje.forEach(t),Rlr=i(X),fT=n(X,"LI",{});var Dje=s(fT);Gbe=n(Dje,"STRONG",{});var d$t=s(Gbe);Plr=r(d$t,"big_bird"),d$t.forEach(t),Blr=r(Dje," \u2014 "),FU=n(Dje,"A",{href:!0});var c$t=s(FU);Ilr=r(c$t,"BigBirdForQuestionAnswering"),c$t.forEach(t),Nlr=r(Dje," (BigBird model)"),Dje.forEach(t),qlr=i(X),mT=n(X,"LI",{});var Gje=s(mT);Obe=n(Gje,"STRONG",{});var f$t=s(Obe);jlr=r(f$t,"bigbird_pegasus"),f$t.forEach(t),Dlr=r(Gje," \u2014 "),TU=n(Gje,"A",{href:!0});var m$t=s(TU);Glr=r(m$t,"BigBirdPegasusForQuestionAnswering"),m$t.forEach(t),Olr=r(Gje," (BigBird-Pegasus model)"),Gje.forEach(t),Vlr=i(X),gT=n(X,"LI",{});var Oje=s(gT);Vbe=n(Oje,"STRONG",{});var g$t=s(Vbe);Xlr=r(g$t,"camembert"),g$t.forEach(t),zlr=r(Oje," \u2014 "),MU=n(Oje,"A",{href:!0});var h$t=s(MU);Wlr=r(h$t,"CamembertForQuestionAnswering"),h$t.forEach(t),Qlr=r(Oje," (CamemBERT model)"),Oje.forEach(t),Ulr=i(X),hT=n(X,"LI",{});var Vje=s(hT);Xbe=n(Vje,"STRONG",{});var p$t=s(Xbe);Hlr=r(p$t,"canine"),p$t.forEach(t),Jlr=r(Vje," \u2014 "),EU=n(Vje,"A",{href:!0});var _$t=s(EU);Ylr=r(_$t,"CanineForQuestionAnswering"),_$t.forEach(t),Klr=r(Vje," (CANINE model)"),Vje.forEach(t),Zlr=i(X),pT=n(X,"LI",{});var Xje=s(pT);zbe=n(Xje,"STRONG",{});var u$t=s(zbe);eir=r(u$t,"convbert"),u$t.forEach(t),oir=r(Xje," \u2014 "),CU=n(Xje,"A",{href:!0});var b$t=s(CU);rir=r(b$t,"ConvBertForQuestionAnswering"),b$t.forEach(t),tir=r(Xje," (ConvBERT model)"),Xje.forEach(t),air=i(X),_T=n(X,"LI",{});var zje=s(_T);Wbe=n(zje,"STRONG",{});var v$t=s(Wbe);nir=r(v$t,"data2vec-text"),v$t.forEach(t),sir=r(zje," \u2014 "),wU=n(zje,"A",{href:!0});var F$t=s(wU);lir=r(F$t,"Data2VecTextForQuestionAnswering"),F$t.forEach(t),iir=r(zje," (Data2VecText model)"),zje.forEach(t),dir=i(X),uT=n(X,"LI",{});var Wje=s(uT);Qbe=n(Wje,"STRONG",{});var T$t=s(Qbe);cir=r(T$t,"deberta"),T$t.forEach(t),fir=r(Wje," \u2014 "),AU=n(Wje,"A",{href:!0});var M$t=s(AU);mir=r(M$t,"DebertaForQuestionAnswering"),M$t.forEach(t),gir=r(Wje," (DeBERTa model)"),Wje.forEach(t),hir=i(X),bT=n(X,"LI",{});var Qje=s(bT);Ube=n(Qje,"STRONG",{});var E$t=s(Ube);pir=r(E$t,"deberta-v2"),E$t.forEach(t),_ir=r(Qje," \u2014 "),LU=n(Qje,"A",{href:!0});var C$t=s(LU);uir=r(C$t,"DebertaV2ForQuestionAnswering"),C$t.forEach(t),bir=r(Qje," (DeBERTa-v2 model)"),Qje.forEach(t),vir=i(X),vT=n(X,"LI",{});var Uje=s(vT);Hbe=n(Uje,"STRONG",{});var w$t=s(Hbe);Fir=r(w$t,"distilbert"),w$t.forEach(t),Tir=r(Uje," \u2014 "),yU=n(Uje,"A",{href:!0});var A$t=s(yU);Mir=r(A$t,"DistilBertForQuestionAnswering"),A$t.forEach(t),Eir=r(Uje," (DistilBERT model)"),Uje.forEach(t),Cir=i(X),FT=n(X,"LI",{});var Hje=s(FT);Jbe=n(Hje,"STRONG",{});var L$t=s(Jbe);wir=r(L$t,"electra"),L$t.forEach(t),Air=r(Hje," \u2014 "),xU=n(Hje,"A",{href:!0});var y$t=s(xU);Lir=r(y$t,"ElectraForQuestionAnswering"),y$t.forEach(t),yir=r(Hje," (ELECTRA model)"),Hje.forEach(t),xir=i(X),TT=n(X,"LI",{});var Jje=s(TT);Ybe=n(Jje,"STRONG",{});var x$t=s(Ybe);$ir=r(x$t,"flaubert"),x$t.forEach(t),kir=r(Jje," \u2014 "),$U=n(Jje,"A",{href:!0});var $$t=s($U);Sir=r($$t,"FlaubertForQuestionAnsweringSimple"),$$t.forEach(t),Rir=r(Jje," (FlauBERT model)"),Jje.forEach(t),Pir=i(X),MT=n(X,"LI",{});var Yje=s(MT);Kbe=n(Yje,"STRONG",{});var k$t=s(Kbe);Bir=r(k$t,"fnet"),k$t.forEach(t),Iir=r(Yje," \u2014 "),kU=n(Yje,"A",{href:!0});var S$t=s(kU);Nir=r(S$t,"FNetForQuestionAnswering"),S$t.forEach(t),qir=r(Yje," (FNet model)"),Yje.forEach(t),jir=i(X),ET=n(X,"LI",{});var Kje=s(ET);Zbe=n(Kje,"STRONG",{});var R$t=s(Zbe);Dir=r(R$t,"funnel"),R$t.forEach(t),Gir=r(Kje," \u2014 "),SU=n(Kje,"A",{href:!0});var P$t=s(SU);Oir=r(P$t,"FunnelForQuestionAnswering"),P$t.forEach(t),Vir=r(Kje," (Funnel Transformer model)"),Kje.forEach(t),Xir=i(X),CT=n(X,"LI",{});var Zje=s(CT);eve=n(Zje,"STRONG",{});var B$t=s(eve);zir=r(B$t,"gptj"),B$t.forEach(t),Wir=r(Zje," \u2014 "),RU=n(Zje,"A",{href:!0});var I$t=s(RU);Qir=r(I$t,"GPTJForQuestionAnswering"),I$t.forEach(t),Uir=r(Zje," (GPT-J model)"),Zje.forEach(t),Hir=i(X),wT=n(X,"LI",{});var eDe=s(wT);ove=n(eDe,"STRONG",{});var N$t=s(ove);Jir=r(N$t,"ibert"),N$t.forEach(t),Yir=r(eDe," \u2014 "),PU=n(eDe,"A",{href:!0});var q$t=s(PU);Kir=r(q$t,"IBertForQuestionAnswering"),q$t.forEach(t),Zir=r(eDe," (I-BERT model)"),eDe.forEach(t),edr=i(X),AT=n(X,"LI",{});var oDe=s(AT);rve=n(oDe,"STRONG",{});var j$t=s(rve);odr=r(j$t,"layoutlmv2"),j$t.forEach(t),rdr=r(oDe," \u2014 "),BU=n(oDe,"A",{href:!0});var D$t=s(BU);tdr=r(D$t,"LayoutLMv2ForQuestionAnswering"),D$t.forEach(t),adr=r(oDe," (LayoutLMv2 model)"),oDe.forEach(t),ndr=i(X),LT=n(X,"LI",{});var rDe=s(LT);tve=n(rDe,"STRONG",{});var G$t=s(tve);sdr=r(G$t,"layoutlmv3"),G$t.forEach(t),ldr=r(rDe," \u2014 "),IU=n(rDe,"A",{href:!0});var O$t=s(IU);idr=r(O$t,"LayoutLMv3ForQuestionAnswering"),O$t.forEach(t),ddr=r(rDe," (LayoutLMv3 model)"),rDe.forEach(t),cdr=i(X),yT=n(X,"LI",{});var tDe=s(yT);ave=n(tDe,"STRONG",{});var V$t=s(ave);fdr=r(V$t,"led"),V$t.forEach(t),mdr=r(tDe," \u2014 "),NU=n(tDe,"A",{href:!0});var X$t=s(NU);gdr=r(X$t,"LEDForQuestionAnswering"),X$t.forEach(t),hdr=r(tDe," (LED model)"),tDe.forEach(t),pdr=i(X),xT=n(X,"LI",{});var aDe=s(xT);nve=n(aDe,"STRONG",{});var z$t=s(nve);_dr=r(z$t,"longformer"),z$t.forEach(t),udr=r(aDe," \u2014 "),qU=n(aDe,"A",{href:!0});var W$t=s(qU);bdr=r(W$t,"LongformerForQuestionAnswering"),W$t.forEach(t),vdr=r(aDe," (Longformer model)"),aDe.forEach(t),Fdr=i(X),$T=n(X,"LI",{});var nDe=s($T);sve=n(nDe,"STRONG",{});var Q$t=s(sve);Tdr=r(Q$t,"luke"),Q$t.forEach(t),Mdr=r(nDe," \u2014 "),jU=n(nDe,"A",{href:!0});var U$t=s(jU);Edr=r(U$t,"LukeForQuestionAnswering"),U$t.forEach(t),Cdr=r(nDe," (LUKE model)"),nDe.forEach(t),wdr=i(X),kT=n(X,"LI",{});var sDe=s(kT);lve=n(sDe,"STRONG",{});var H$t=s(lve);Adr=r(H$t,"lxmert"),H$t.forEach(t),Ldr=r(sDe," \u2014 "),DU=n(sDe,"A",{href:!0});var J$t=s(DU);ydr=r(J$t,"LxmertForQuestionAnswering"),J$t.forEach(t),xdr=r(sDe," (LXMERT model)"),sDe.forEach(t),$dr=i(X),ST=n(X,"LI",{});var lDe=s(ST);ive=n(lDe,"STRONG",{});var Y$t=s(ive);kdr=r(Y$t,"mbart"),Y$t.forEach(t),Sdr=r(lDe," \u2014 "),GU=n(lDe,"A",{href:!0});var K$t=s(GU);Rdr=r(K$t,"MBartForQuestionAnswering"),K$t.forEach(t),Pdr=r(lDe," (mBART model)"),lDe.forEach(t),Bdr=i(X),RT=n(X,"LI",{});var iDe=s(RT);dve=n(iDe,"STRONG",{});var Z$t=s(dve);Idr=r(Z$t,"megatron-bert"),Z$t.forEach(t),Ndr=r(iDe," \u2014 "),OU=n(iDe,"A",{href:!0});var ekt=s(OU);qdr=r(ekt,"MegatronBertForQuestionAnswering"),ekt.forEach(t),jdr=r(iDe," (Megatron-BERT model)"),iDe.forEach(t),Ddr=i(X),PT=n(X,"LI",{});var dDe=s(PT);cve=n(dDe,"STRONG",{});var okt=s(cve);Gdr=r(okt,"mobilebert"),okt.forEach(t),Odr=r(dDe," \u2014 "),VU=n(dDe,"A",{href:!0});var rkt=s(VU);Vdr=r(rkt,"MobileBertForQuestionAnswering"),rkt.forEach(t),Xdr=r(dDe," (MobileBERT model)"),dDe.forEach(t),zdr=i(X),BT=n(X,"LI",{});var cDe=s(BT);fve=n(cDe,"STRONG",{});var tkt=s(fve);Wdr=r(tkt,"mpnet"),tkt.forEach(t),Qdr=r(cDe," \u2014 "),XU=n(cDe,"A",{href:!0});var akt=s(XU);Udr=r(akt,"MPNetForQuestionAnswering"),akt.forEach(t),Hdr=r(cDe," (MPNet model)"),cDe.forEach(t),Jdr=i(X),IT=n(X,"LI",{});var fDe=s(IT);mve=n(fDe,"STRONG",{});var nkt=s(mve);Ydr=r(nkt,"mvp"),nkt.forEach(t),Kdr=r(fDe," \u2014 "),zU=n(fDe,"A",{href:!0});var skt=s(zU);Zdr=r(skt,"MvpForQuestionAnswering"),skt.forEach(t),ecr=r(fDe," (MVP model)"),fDe.forEach(t),ocr=i(X),NT=n(X,"LI",{});var mDe=s(NT);gve=n(mDe,"STRONG",{});var lkt=s(gve);rcr=r(lkt,"nezha"),lkt.forEach(t),tcr=r(mDe," \u2014 "),WU=n(mDe,"A",{href:!0});var ikt=s(WU);acr=r(ikt,"NezhaForQuestionAnswering"),ikt.forEach(t),ncr=r(mDe," (Nezha model)"),mDe.forEach(t),scr=i(X),qT=n(X,"LI",{});var gDe=s(qT);hve=n(gDe,"STRONG",{});var dkt=s(hve);lcr=r(dkt,"nystromformer"),dkt.forEach(t),icr=r(gDe," \u2014 "),QU=n(gDe,"A",{href:!0});var ckt=s(QU);dcr=r(ckt,"NystromformerForQuestionAnswering"),ckt.forEach(t),ccr=r(gDe," (Nystr\xF6mformer model)"),gDe.forEach(t),fcr=i(X),jT=n(X,"LI",{});var hDe=s(jT);pve=n(hDe,"STRONG",{});var fkt=s(pve);mcr=r(fkt,"qdqbert"),fkt.forEach(t),gcr=r(hDe," \u2014 "),UU=n(hDe,"A",{href:!0});var mkt=s(UU);hcr=r(mkt,"QDQBertForQuestionAnswering"),mkt.forEach(t),pcr=r(hDe," (QDQBert model)"),hDe.forEach(t),_cr=i(X),DT=n(X,"LI",{});var pDe=s(DT);_ve=n(pDe,"STRONG",{});var gkt=s(_ve);ucr=r(gkt,"reformer"),gkt.forEach(t),bcr=r(pDe," \u2014 "),HU=n(pDe,"A",{href:!0});var hkt=s(HU);vcr=r(hkt,"ReformerForQuestionAnswering"),hkt.forEach(t),Fcr=r(pDe," (Reformer model)"),pDe.forEach(t),Tcr=i(X),GT=n(X,"LI",{});var _De=s(GT);uve=n(_De,"STRONG",{});var pkt=s(uve);Mcr=r(pkt,"rembert"),pkt.forEach(t),Ecr=r(_De," \u2014 "),JU=n(_De,"A",{href:!0});var _kt=s(JU);Ccr=r(_kt,"RemBertForQuestionAnswering"),_kt.forEach(t),wcr=r(_De," (RemBERT model)"),_De.forEach(t),Acr=i(X),OT=n(X,"LI",{});var uDe=s(OT);bve=n(uDe,"STRONG",{});var ukt=s(bve);Lcr=r(ukt,"roberta"),ukt.forEach(t),ycr=r(uDe," \u2014 "),YU=n(uDe,"A",{href:!0});var bkt=s(YU);xcr=r(bkt,"RobertaForQuestionAnswering"),bkt.forEach(t),$cr=r(uDe," (RoBERTa model)"),uDe.forEach(t),kcr=i(X),VT=n(X,"LI",{});var bDe=s(VT);vve=n(bDe,"STRONG",{});var vkt=s(vve);Scr=r(vkt,"roformer"),vkt.forEach(t),Rcr=r(bDe," \u2014 "),KU=n(bDe,"A",{href:!0});var Fkt=s(KU);Pcr=r(Fkt,"RoFormerForQuestionAnswering"),Fkt.forEach(t),Bcr=r(bDe," (RoFormer model)"),bDe.forEach(t),Icr=i(X),XT=n(X,"LI",{});var vDe=s(XT);Fve=n(vDe,"STRONG",{});var Tkt=s(Fve);Ncr=r(Tkt,"splinter"),Tkt.forEach(t),qcr=r(vDe," \u2014 "),ZU=n(vDe,"A",{href:!0});var Mkt=s(ZU);jcr=r(Mkt,"SplinterForQuestionAnswering"),Mkt.forEach(t),Dcr=r(vDe," (Splinter model)"),vDe.forEach(t),Gcr=i(X),zT=n(X,"LI",{});var FDe=s(zT);Tve=n(FDe,"STRONG",{});var Ekt=s(Tve);Ocr=r(Ekt,"squeezebert"),Ekt.forEach(t),Vcr=r(FDe," \u2014 "),eH=n(FDe,"A",{href:!0});var Ckt=s(eH);Xcr=r(Ckt,"SqueezeBertForQuestionAnswering"),Ckt.forEach(t),zcr=r(FDe," (SqueezeBERT model)"),FDe.forEach(t),Wcr=i(X),WT=n(X,"LI",{});var TDe=s(WT);Mve=n(TDe,"STRONG",{});var wkt=s(Mve);Qcr=r(wkt,"xlm"),wkt.forEach(t),Ucr=r(TDe," \u2014 "),oH=n(TDe,"A",{href:!0});var Akt=s(oH);Hcr=r(Akt,"XLMForQuestionAnsweringSimple"),Akt.forEach(t),Jcr=r(TDe," (XLM model)"),TDe.forEach(t),Ycr=i(X),QT=n(X,"LI",{});var MDe=s(QT);Eve=n(MDe,"STRONG",{});var Lkt=s(Eve);Kcr=r(Lkt,"xlm-roberta"),Lkt.forEach(t),Zcr=r(MDe," \u2014 "),rH=n(MDe,"A",{href:!0});var ykt=s(rH);efr=r(ykt,"XLMRobertaForQuestionAnswering"),ykt.forEach(t),ofr=r(MDe," (XLM-RoBERTa model)"),MDe.forEach(t),rfr=i(X),UT=n(X,"LI",{});var EDe=s(UT);Cve=n(EDe,"STRONG",{});var xkt=s(Cve);tfr=r(xkt,"xlm-roberta-xl"),xkt.forEach(t),afr=r(EDe," \u2014 "),tH=n(EDe,"A",{href:!0});var $kt=s(tH);nfr=r($kt,"XLMRobertaXLForQuestionAnswering"),$kt.forEach(t),sfr=r(EDe," (XLM-RoBERTa-XL model)"),EDe.forEach(t),lfr=i(X),HT=n(X,"LI",{});var CDe=s(HT);wve=n(CDe,"STRONG",{});var kkt=s(wve);ifr=r(kkt,"xlnet"),kkt.forEach(t),dfr=r(CDe," \u2014 "),aH=n(CDe,"A",{href:!0});var Skt=s(aH);cfr=r(Skt,"XLNetForQuestionAnsweringSimple"),Skt.forEach(t),ffr=r(CDe," (XLNet model)"),CDe.forEach(t),mfr=i(X),JT=n(X,"LI",{});var wDe=s(JT);Ave=n(wDe,"STRONG",{});var Rkt=s(Ave);gfr=r(Rkt,"yoso"),Rkt.forEach(t),hfr=r(wDe," \u2014 "),nH=n(wDe,"A",{href:!0});var Pkt=s(nH);pfr=r(Pkt,"YosoForQuestionAnswering"),Pkt.forEach(t),_fr=r(wDe," (YOSO model)"),wDe.forEach(t),X.forEach(t),ufr=i(Ea),YT=n(Ea,"P",{});var ADe=s(YT);bfr=r(ADe,"The model is set in evaluation mode by default using "),Lve=n(ADe,"CODE",{});var Bkt=s(Lve);vfr=r(Bkt,"model.eval()"),Bkt.forEach(t),Ffr=r(ADe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=n(ADe,"CODE",{});var Ikt=s(yve);Tfr=r(Ikt,"model.train()"),Ikt.forEach(t),ADe.forEach(t),Mfr=i(Ea),T(KT.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),kUe=i(f),Sd=n(f,"H2",{class:!0});var GJe=s(Sd);ZT=n(GJe,"A",{id:!0,class:!0,href:!0});var Nkt=s(ZT);xve=n(Nkt,"SPAN",{});var qkt=s(xve);T(q9.$$.fragment,qkt),qkt.forEach(t),Nkt.forEach(t),Efr=i(GJe),$ve=n(GJe,"SPAN",{});var jkt=s($ve);Cfr=r(jkt,"AutoModelForTableQuestionAnswering"),jkt.forEach(t),GJe.forEach(t),SUe=i(f),Vo=n(f,"DIV",{class:!0});var Cl=s(Vo);T(j9.$$.fragment,Cl),wfr=i(Cl),Rd=n(Cl,"P",{});var mne=s(Rd);Afr=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),sH=n(mne,"A",{href:!0});var Dkt=s(sH);Lfr=r(Dkt,"from_pretrained()"),Dkt.forEach(t),yfr=r(mne," class method or the "),lH=n(mne,"A",{href:!0});var Gkt=s(lH);xfr=r(Gkt,"from_config()"),Gkt.forEach(t),$fr=r(mne,` class
method.`),mne.forEach(t),kfr=i(Cl),D9=n(Cl,"P",{});var OJe=s(D9);Sfr=r(OJe,"This class cannot be instantiated directly using "),kve=n(OJe,"CODE",{});var Okt=s(kve);Rfr=r(Okt,"__init__()"),Okt.forEach(t),Pfr=r(OJe," (throws an error)."),OJe.forEach(t),Bfr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var B7=s(Mt);T(G9.$$.fragment,B7),Ifr=i(B7),Sve=n(B7,"P",{});var Vkt=s(Sve);Nfr=r(Vkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vkt.forEach(t),qfr=i(B7),Pd=n(B7,"P",{});var gne=s(Pd);jfr=r(gne,`Note:
Loading a model from its configuration file does `),Rve=n(gne,"STRONG",{});var Xkt=s(Rve);Dfr=r(Xkt,"not"),Xkt.forEach(t),Gfr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(gne,"A",{href:!0});var zkt=s(iH);Ofr=r(zkt,"from_pretrained()"),zkt.forEach(t),Vfr=r(gne," to load the model weights."),gne.forEach(t),Xfr=i(B7),T(e8.$$.fragment,B7),B7.forEach(t),zfr=i(Cl),lo=n(Cl,"DIV",{class:!0});var Ca=s(lo);T(O9.$$.fragment,Ca),Wfr=i(Ca),Pve=n(Ca,"P",{});var Wkt=s(Pve);Qfr=r(Wkt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wkt.forEach(t),Ufr=i(Ca),Za=n(Ca,"P",{});var I7=s(Za);Hfr=r(I7,"The model class to instantiate is selected based on the "),Bve=n(I7,"CODE",{});var Qkt=s(Bve);Jfr=r(Qkt,"model_type"),Qkt.forEach(t),Yfr=r(I7,` property of the config object (either
passed as an argument or loaded from `),Ive=n(I7,"CODE",{});var Ukt=s(Ive);Kfr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),Zfr=r(I7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(I7,"CODE",{});var Hkt=s(Nve);emr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),omr=r(I7,":"),I7.forEach(t),rmr=i(Ca),qve=n(Ca,"UL",{});var Jkt=s(qve);o8=n(Jkt,"LI",{});var LDe=s(o8);jve=n(LDe,"STRONG",{});var Ykt=s(jve);tmr=r(Ykt,"tapas"),Ykt.forEach(t),amr=r(LDe," \u2014 "),dH=n(LDe,"A",{href:!0});var Kkt=s(dH);nmr=r(Kkt,"TapasForQuestionAnswering"),Kkt.forEach(t),smr=r(LDe," (TAPAS model)"),LDe.forEach(t),Jkt.forEach(t),lmr=i(Ca),r8=n(Ca,"P",{});var yDe=s(r8);imr=r(yDe,"The model is set in evaluation mode by default using "),Dve=n(yDe,"CODE",{});var Zkt=s(Dve);dmr=r(Zkt,"model.eval()"),Zkt.forEach(t),cmr=r(yDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gve=n(yDe,"CODE",{});var eSt=s(Gve);fmr=r(eSt,"model.train()"),eSt.forEach(t),yDe.forEach(t),mmr=i(Ca),T(t8.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),RUe=i(f),Bd=n(f,"H2",{class:!0});var VJe=s(Bd);a8=n(VJe,"A",{id:!0,class:!0,href:!0});var oSt=s(a8);Ove=n(oSt,"SPAN",{});var rSt=s(Ove);T(V9.$$.fragment,rSt),rSt.forEach(t),oSt.forEach(t),gmr=i(VJe),Vve=n(VJe,"SPAN",{});var tSt=s(Vve);hmr=r(tSt,"AutoModelForImageClassification"),tSt.forEach(t),VJe.forEach(t),PUe=i(f),Xo=n(f,"DIV",{class:!0});var wl=s(Xo);T(X9.$$.fragment,wl),pmr=i(wl),Id=n(wl,"P",{});var hne=s(Id);_mr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cH=n(hne,"A",{href:!0});var aSt=s(cH);umr=r(aSt,"from_pretrained()"),aSt.forEach(t),bmr=r(hne," class method or the "),fH=n(hne,"A",{href:!0});var nSt=s(fH);vmr=r(nSt,"from_config()"),nSt.forEach(t),Fmr=r(hne,` class
method.`),hne.forEach(t),Tmr=i(wl),z9=n(wl,"P",{});var XJe=s(z9);Mmr=r(XJe,"This class cannot be instantiated directly using "),Xve=n(XJe,"CODE",{});var sSt=s(Xve);Emr=r(sSt,"__init__()"),sSt.forEach(t),Cmr=r(XJe," (throws an error)."),XJe.forEach(t),wmr=i(wl),Et=n(wl,"DIV",{class:!0});var N7=s(Et);T(W9.$$.fragment,N7),Amr=i(N7),zve=n(N7,"P",{});var lSt=s(zve);Lmr=r(lSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lSt.forEach(t),ymr=i(N7),Nd=n(N7,"P",{});var pne=s(Nd);xmr=r(pne,`Note:
Loading a model from its configuration file does `),Wve=n(pne,"STRONG",{});var iSt=s(Wve);$mr=r(iSt,"not"),iSt.forEach(t),kmr=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(pne,"A",{href:!0});var dSt=s(mH);Smr=r(dSt,"from_pretrained()"),dSt.forEach(t),Rmr=r(pne," to load the model weights."),pne.forEach(t),Pmr=i(N7),T(n8.$$.fragment,N7),N7.forEach(t),Bmr=i(wl),io=n(wl,"DIV",{class:!0});var wa=s(io);T(Q9.$$.fragment,wa),Imr=i(wa),Qve=n(wa,"P",{});var cSt=s(Qve);Nmr=r(cSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cSt.forEach(t),qmr=i(wa),en=n(wa,"P",{});var q7=s(en);jmr=r(q7,"The model class to instantiate is selected based on the "),Uve=n(q7,"CODE",{});var fSt=s(Uve);Dmr=r(fSt,"model_type"),fSt.forEach(t),Gmr=r(q7,` property of the config object (either
passed as an argument or loaded from `),Hve=n(q7,"CODE",{});var mSt=s(Hve);Omr=r(mSt,"pretrained_model_name_or_path"),mSt.forEach(t),Vmr=r(q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(q7,"CODE",{});var gSt=s(Jve);Xmr=r(gSt,"pretrained_model_name_or_path"),gSt.forEach(t),zmr=r(q7,":"),q7.forEach(t),Wmr=i(wa),be=n(wa,"UL",{});var Fe=s(be);s8=n(Fe,"LI",{});var xDe=s(s8);Yve=n(xDe,"STRONG",{});var hSt=s(Yve);Qmr=r(hSt,"beit"),hSt.forEach(t),Umr=r(xDe," \u2014 "),gH=n(xDe,"A",{href:!0});var pSt=s(gH);Hmr=r(pSt,"BeitForImageClassification"),pSt.forEach(t),Jmr=r(xDe," (BEiT model)"),xDe.forEach(t),Ymr=i(Fe),l8=n(Fe,"LI",{});var $De=s(l8);Kve=n($De,"STRONG",{});var _St=s(Kve);Kmr=r(_St,"convnext"),_St.forEach(t),Zmr=r($De," \u2014 "),hH=n($De,"A",{href:!0});var uSt=s(hH);egr=r(uSt,"ConvNextForImageClassification"),uSt.forEach(t),ogr=r($De," (ConvNeXT model)"),$De.forEach(t),rgr=i(Fe),i8=n(Fe,"LI",{});var kDe=s(i8);Zve=n(kDe,"STRONG",{});var bSt=s(Zve);tgr=r(bSt,"cvt"),bSt.forEach(t),agr=r(kDe," \u2014 "),pH=n(kDe,"A",{href:!0});var vSt=s(pH);ngr=r(vSt,"CvtForImageClassification"),vSt.forEach(t),sgr=r(kDe," (CvT model)"),kDe.forEach(t),lgr=i(Fe),d8=n(Fe,"LI",{});var SDe=s(d8);eFe=n(SDe,"STRONG",{});var FSt=s(eFe);igr=r(FSt,"data2vec-vision"),FSt.forEach(t),dgr=r(SDe," \u2014 "),_H=n(SDe,"A",{href:!0});var TSt=s(_H);cgr=r(TSt,"Data2VecVisionForImageClassification"),TSt.forEach(t),fgr=r(SDe," (Data2VecVision model)"),SDe.forEach(t),mgr=i(Fe),sl=n(Fe,"LI",{});var rP=s(sl);oFe=n(rP,"STRONG",{});var MSt=s(oFe);ggr=r(MSt,"deit"),MSt.forEach(t),hgr=r(rP," \u2014 "),uH=n(rP,"A",{href:!0});var ESt=s(uH);pgr=r(ESt,"DeiTForImageClassification"),ESt.forEach(t),_gr=r(rP," or "),bH=n(rP,"A",{href:!0});var CSt=s(bH);ugr=r(CSt,"DeiTForImageClassificationWithTeacher"),CSt.forEach(t),bgr=r(rP," (DeiT model)"),rP.forEach(t),vgr=i(Fe),c8=n(Fe,"LI",{});var RDe=s(c8);rFe=n(RDe,"STRONG",{});var wSt=s(rFe);Fgr=r(wSt,"imagegpt"),wSt.forEach(t),Tgr=r(RDe," \u2014 "),vH=n(RDe,"A",{href:!0});var ASt=s(vH);Mgr=r(ASt,"ImageGPTForImageClassification"),ASt.forEach(t),Egr=r(RDe," (ImageGPT model)"),RDe.forEach(t),Cgr=i(Fe),ll=n(Fe,"LI",{});var tP=s(ll);tFe=n(tP,"STRONG",{});var LSt=s(tFe);wgr=r(LSt,"levit"),LSt.forEach(t),Agr=r(tP," \u2014 "),FH=n(tP,"A",{href:!0});var ySt=s(FH);Lgr=r(ySt,"LevitForImageClassification"),ySt.forEach(t),ygr=r(tP," or "),TH=n(tP,"A",{href:!0});var xSt=s(TH);xgr=r(xSt,"LevitForImageClassificationWithTeacher"),xSt.forEach(t),$gr=r(tP," (LeViT model)"),tP.forEach(t),kgr=i(Fe),f8=n(Fe,"LI",{});var PDe=s(f8);aFe=n(PDe,"STRONG",{});var $St=s(aFe);Sgr=r($St,"mobilevit"),$St.forEach(t),Rgr=r(PDe," \u2014 "),MH=n(PDe,"A",{href:!0});var kSt=s(MH);Pgr=r(kSt,"MobileViTForImageClassification"),kSt.forEach(t),Bgr=r(PDe," (MobileViT model)"),PDe.forEach(t),Igr=i(Fe),Ct=n(Fe,"LI",{});var Zf=s(Ct);nFe=n(Zf,"STRONG",{});var SSt=s(nFe);Ngr=r(SSt,"perceiver"),SSt.forEach(t),qgr=r(Zf," \u2014 "),EH=n(Zf,"A",{href:!0});var RSt=s(EH);jgr=r(RSt,"PerceiverForImageClassificationLearned"),RSt.forEach(t),Dgr=r(Zf," or "),CH=n(Zf,"A",{href:!0});var PSt=s(CH);Ggr=r(PSt,"PerceiverForImageClassificationFourier"),PSt.forEach(t),Ogr=r(Zf," or "),wH=n(Zf,"A",{href:!0});var BSt=s(wH);Vgr=r(BSt,"PerceiverForImageClassificationConvProcessing"),BSt.forEach(t),Xgr=r(Zf," (Perceiver model)"),Zf.forEach(t),zgr=i(Fe),m8=n(Fe,"LI",{});var BDe=s(m8);sFe=n(BDe,"STRONG",{});var ISt=s(sFe);Wgr=r(ISt,"poolformer"),ISt.forEach(t),Qgr=r(BDe," \u2014 "),AH=n(BDe,"A",{href:!0});var NSt=s(AH);Ugr=r(NSt,"PoolFormerForImageClassification"),NSt.forEach(t),Hgr=r(BDe," (PoolFormer model)"),BDe.forEach(t),Jgr=i(Fe),g8=n(Fe,"LI",{});var IDe=s(g8);lFe=n(IDe,"STRONG",{});var qSt=s(lFe);Ygr=r(qSt,"regnet"),qSt.forEach(t),Kgr=r(IDe," \u2014 "),LH=n(IDe,"A",{href:!0});var jSt=s(LH);Zgr=r(jSt,"RegNetForImageClassification"),jSt.forEach(t),ehr=r(IDe," (RegNet model)"),IDe.forEach(t),ohr=i(Fe),h8=n(Fe,"LI",{});var NDe=s(h8);iFe=n(NDe,"STRONG",{});var DSt=s(iFe);rhr=r(DSt,"resnet"),DSt.forEach(t),thr=r(NDe," \u2014 "),yH=n(NDe,"A",{href:!0});var GSt=s(yH);ahr=r(GSt,"ResNetForImageClassification"),GSt.forEach(t),nhr=r(NDe," (ResNet model)"),NDe.forEach(t),shr=i(Fe),p8=n(Fe,"LI",{});var qDe=s(p8);dFe=n(qDe,"STRONG",{});var OSt=s(dFe);lhr=r(OSt,"segformer"),OSt.forEach(t),ihr=r(qDe," \u2014 "),xH=n(qDe,"A",{href:!0});var VSt=s(xH);dhr=r(VSt,"SegformerForImageClassification"),VSt.forEach(t),chr=r(qDe," (SegFormer model)"),qDe.forEach(t),fhr=i(Fe),_8=n(Fe,"LI",{});var jDe=s(_8);cFe=n(jDe,"STRONG",{});var XSt=s(cFe);mhr=r(XSt,"swin"),XSt.forEach(t),ghr=r(jDe," \u2014 "),$H=n(jDe,"A",{href:!0});var zSt=s($H);hhr=r(zSt,"SwinForImageClassification"),zSt.forEach(t),phr=r(jDe," (Swin Transformer model)"),jDe.forEach(t),_hr=i(Fe),u8=n(Fe,"LI",{});var DDe=s(u8);fFe=n(DDe,"STRONG",{});var WSt=s(fFe);uhr=r(WSt,"swinv2"),WSt.forEach(t),bhr=r(DDe," \u2014 "),kH=n(DDe,"A",{href:!0});var QSt=s(kH);vhr=r(QSt,"Swinv2ForImageClassification"),QSt.forEach(t),Fhr=r(DDe," (Swin Transformer V2 model)"),DDe.forEach(t),Thr=i(Fe),b8=n(Fe,"LI",{});var GDe=s(b8);mFe=n(GDe,"STRONG",{});var USt=s(mFe);Mhr=r(USt,"van"),USt.forEach(t),Ehr=r(GDe," \u2014 "),SH=n(GDe,"A",{href:!0});var HSt=s(SH);Chr=r(HSt,"VanForImageClassification"),HSt.forEach(t),whr=r(GDe," (VAN model)"),GDe.forEach(t),Ahr=i(Fe),v8=n(Fe,"LI",{});var ODe=s(v8);gFe=n(ODe,"STRONG",{});var JSt=s(gFe);Lhr=r(JSt,"vit"),JSt.forEach(t),yhr=r(ODe," \u2014 "),RH=n(ODe,"A",{href:!0});var YSt=s(RH);xhr=r(YSt,"ViTForImageClassification"),YSt.forEach(t),$hr=r(ODe," (ViT model)"),ODe.forEach(t),Fe.forEach(t),khr=i(wa),F8=n(wa,"P",{});var VDe=s(F8);Shr=r(VDe,"The model is set in evaluation mode by default using "),hFe=n(VDe,"CODE",{});var KSt=s(hFe);Rhr=r(KSt,"model.eval()"),KSt.forEach(t),Phr=r(VDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pFe=n(VDe,"CODE",{});var ZSt=s(pFe);Bhr=r(ZSt,"model.train()"),ZSt.forEach(t),VDe.forEach(t),Ihr=i(wa),T(T8.$$.fragment,wa),wa.forEach(t),wl.forEach(t),BUe=i(f),qd=n(f,"H2",{class:!0});var zJe=s(qd);M8=n(zJe,"A",{id:!0,class:!0,href:!0});var eRt=s(M8);_Fe=n(eRt,"SPAN",{});var oRt=s(_Fe);T(U9.$$.fragment,oRt),oRt.forEach(t),eRt.forEach(t),Nhr=i(zJe),uFe=n(zJe,"SPAN",{});var rRt=s(uFe);qhr=r(rRt,"AutoModelForVideoClassification"),rRt.forEach(t),zJe.forEach(t),IUe=i(f),zo=n(f,"DIV",{class:!0});var Al=s(zo);T(H9.$$.fragment,Al),jhr=i(Al),jd=n(Al,"P",{});var _ne=s(jd);Dhr=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),PH=n(_ne,"A",{href:!0});var tRt=s(PH);Ghr=r(tRt,"from_pretrained()"),tRt.forEach(t),Ohr=r(_ne," class method or the "),BH=n(_ne,"A",{href:!0});var aRt=s(BH);Vhr=r(aRt,"from_config()"),aRt.forEach(t),Xhr=r(_ne,` class
method.`),_ne.forEach(t),zhr=i(Al),J9=n(Al,"P",{});var WJe=s(J9);Whr=r(WJe,"This class cannot be instantiated directly using "),bFe=n(WJe,"CODE",{});var nRt=s(bFe);Qhr=r(nRt,"__init__()"),nRt.forEach(t),Uhr=r(WJe," (throws an error)."),WJe.forEach(t),Hhr=i(Al),wt=n(Al,"DIV",{class:!0});var j7=s(wt);T(Y9.$$.fragment,j7),Jhr=i(j7),vFe=n(j7,"P",{});var sRt=s(vFe);Yhr=r(sRt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),sRt.forEach(t),Khr=i(j7),Dd=n(j7,"P",{});var une=s(Dd);Zhr=r(une,`Note:
Loading a model from its configuration file does `),FFe=n(une,"STRONG",{});var lRt=s(FFe);epr=r(lRt,"not"),lRt.forEach(t),opr=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(une,"A",{href:!0});var iRt=s(IH);rpr=r(iRt,"from_pretrained()"),iRt.forEach(t),tpr=r(une," to load the model weights."),une.forEach(t),apr=i(j7),T(E8.$$.fragment,j7),j7.forEach(t),npr=i(Al),co=n(Al,"DIV",{class:!0});var Aa=s(co);T(K9.$$.fragment,Aa),spr=i(Aa),TFe=n(Aa,"P",{});var dRt=s(TFe);lpr=r(dRt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),dRt.forEach(t),ipr=i(Aa),on=n(Aa,"P",{});var D7=s(on);dpr=r(D7,"The model class to instantiate is selected based on the "),MFe=n(D7,"CODE",{});var cRt=s(MFe);cpr=r(cRt,"model_type"),cRt.forEach(t),fpr=r(D7,` property of the config object (either
passed as an argument or loaded from `),EFe=n(D7,"CODE",{});var fRt=s(EFe);mpr=r(fRt,"pretrained_model_name_or_path"),fRt.forEach(t),gpr=r(D7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(D7,"CODE",{});var mRt=s(CFe);hpr=r(mRt,"pretrained_model_name_or_path"),mRt.forEach(t),ppr=r(D7,":"),D7.forEach(t),_pr=i(Aa),wFe=n(Aa,"UL",{});var gRt=s(wFe);C8=n(gRt,"LI",{});var XDe=s(C8);AFe=n(XDe,"STRONG",{});var hRt=s(AFe);upr=r(hRt,"videomae"),hRt.forEach(t),bpr=r(XDe," \u2014 "),NH=n(XDe,"A",{href:!0});var pRt=s(NH);vpr=r(pRt,"VideoMAEForVideoClassification"),pRt.forEach(t),Fpr=r(XDe," (VideoMAE model)"),XDe.forEach(t),gRt.forEach(t),Tpr=i(Aa),w8=n(Aa,"P",{});var zDe=s(w8);Mpr=r(zDe,"The model is set in evaluation mode by default using "),LFe=n(zDe,"CODE",{});var _Rt=s(LFe);Epr=r(_Rt,"model.eval()"),_Rt.forEach(t),Cpr=r(zDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=n(zDe,"CODE",{});var uRt=s(yFe);wpr=r(uRt,"model.train()"),uRt.forEach(t),zDe.forEach(t),Apr=i(Aa),T(A8.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),NUe=i(f),Gd=n(f,"H2",{class:!0});var QJe=s(Gd);L8=n(QJe,"A",{id:!0,class:!0,href:!0});var bRt=s(L8);xFe=n(bRt,"SPAN",{});var vRt=s(xFe);T(Z9.$$.fragment,vRt),vRt.forEach(t),bRt.forEach(t),Lpr=i(QJe),$Fe=n(QJe,"SPAN",{});var FRt=s($Fe);ypr=r(FRt,"AutoModelForVision2Seq"),FRt.forEach(t),QJe.forEach(t),qUe=i(f),Wo=n(f,"DIV",{class:!0});var Ll=s(Wo);T(ex.$$.fragment,Ll),xpr=i(Ll),Od=n(Ll,"P",{});var bne=s(Od);$pr=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qH=n(bne,"A",{href:!0});var TRt=s(qH);kpr=r(TRt,"from_pretrained()"),TRt.forEach(t),Spr=r(bne," class method or the "),jH=n(bne,"A",{href:!0});var MRt=s(jH);Rpr=r(MRt,"from_config()"),MRt.forEach(t),Ppr=r(bne,` class
method.`),bne.forEach(t),Bpr=i(Ll),ox=n(Ll,"P",{});var UJe=s(ox);Ipr=r(UJe,"This class cannot be instantiated directly using "),kFe=n(UJe,"CODE",{});var ERt=s(kFe);Npr=r(ERt,"__init__()"),ERt.forEach(t),qpr=r(UJe," (throws an error)."),UJe.forEach(t),jpr=i(Ll),At=n(Ll,"DIV",{class:!0});var G7=s(At);T(rx.$$.fragment,G7),Dpr=i(G7),SFe=n(G7,"P",{});var CRt=s(SFe);Gpr=r(CRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CRt.forEach(t),Opr=i(G7),Vd=n(G7,"P",{});var vne=s(Vd);Vpr=r(vne,`Note:
Loading a model from its configuration file does `),RFe=n(vne,"STRONG",{});var wRt=s(RFe);Xpr=r(wRt,"not"),wRt.forEach(t),zpr=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(vne,"A",{href:!0});var ARt=s(DH);Wpr=r(ARt,"from_pretrained()"),ARt.forEach(t),Qpr=r(vne," to load the model weights."),vne.forEach(t),Upr=i(G7),T(y8.$$.fragment,G7),G7.forEach(t),Hpr=i(Ll),fo=n(Ll,"DIV",{class:!0});var La=s(fo);T(tx.$$.fragment,La),Jpr=i(La),PFe=n(La,"P",{});var LRt=s(PFe);Ypr=r(LRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LRt.forEach(t),Kpr=i(La),rn=n(La,"P",{});var O7=s(rn);Zpr=r(O7,"The model class to instantiate is selected based on the "),BFe=n(O7,"CODE",{});var yRt=s(BFe);e_r=r(yRt,"model_type"),yRt.forEach(t),o_r=r(O7,` property of the config object (either
passed as an argument or loaded from `),IFe=n(O7,"CODE",{});var xRt=s(IFe);r_r=r(xRt,"pretrained_model_name_or_path"),xRt.forEach(t),t_r=r(O7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(O7,"CODE",{});var $Rt=s(NFe);a_r=r($Rt,"pretrained_model_name_or_path"),$Rt.forEach(t),n_r=r(O7,":"),O7.forEach(t),s_r=i(La),qFe=n(La,"UL",{});var kRt=s(qFe);x8=n(kRt,"LI",{});var WDe=s(x8);jFe=n(WDe,"STRONG",{});var SRt=s(jFe);l_r=r(SRt,"vision-encoder-decoder"),SRt.forEach(t),i_r=r(WDe," \u2014 "),GH=n(WDe,"A",{href:!0});var RRt=s(GH);d_r=r(RRt,"VisionEncoderDecoderModel"),RRt.forEach(t),c_r=r(WDe," (Vision Encoder decoder model)"),WDe.forEach(t),kRt.forEach(t),f_r=i(La),$8=n(La,"P",{});var QDe=s($8);m_r=r(QDe,"The model is set in evaluation mode by default using "),DFe=n(QDe,"CODE",{});var PRt=s(DFe);g_r=r(PRt,"model.eval()"),PRt.forEach(t),h_r=r(QDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GFe=n(QDe,"CODE",{});var BRt=s(GFe);p_r=r(BRt,"model.train()"),BRt.forEach(t),QDe.forEach(t),__r=i(La),T(k8.$$.fragment,La),La.forEach(t),Ll.forEach(t),jUe=i(f),Xd=n(f,"H2",{class:!0});var HJe=s(Xd);S8=n(HJe,"A",{id:!0,class:!0,href:!0});var IRt=s(S8);OFe=n(IRt,"SPAN",{});var NRt=s(OFe);T(ax.$$.fragment,NRt),NRt.forEach(t),IRt.forEach(t),u_r=i(HJe),VFe=n(HJe,"SPAN",{});var qRt=s(VFe);b_r=r(qRt,"AutoModelForVisualQuestionAnswering"),qRt.forEach(t),HJe.forEach(t),DUe=i(f),Qo=n(f,"DIV",{class:!0});var yl=s(Qo);T(nx.$$.fragment,yl),v_r=i(yl),zd=n(yl,"P",{});var Fne=s(zd);F_r=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),OH=n(Fne,"A",{href:!0});var jRt=s(OH);T_r=r(jRt,"from_pretrained()"),jRt.forEach(t),M_r=r(Fne," class method or the "),VH=n(Fne,"A",{href:!0});var DRt=s(VH);E_r=r(DRt,"from_config()"),DRt.forEach(t),C_r=r(Fne,` class
method.`),Fne.forEach(t),w_r=i(yl),sx=n(yl,"P",{});var JJe=s(sx);A_r=r(JJe,"This class cannot be instantiated directly using "),XFe=n(JJe,"CODE",{});var GRt=s(XFe);L_r=r(GRt,"__init__()"),GRt.forEach(t),y_r=r(JJe," (throws an error)."),JJe.forEach(t),x_r=i(yl),Lt=n(yl,"DIV",{class:!0});var V7=s(Lt);T(lx.$$.fragment,V7),$_r=i(V7),zFe=n(V7,"P",{});var ORt=s(zFe);k_r=r(ORt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),ORt.forEach(t),S_r=i(V7),Wd=n(V7,"P",{});var Tne=s(Wd);R_r=r(Tne,`Note:
Loading a model from its configuration file does `),WFe=n(Tne,"STRONG",{});var VRt=s(WFe);P_r=r(VRt,"not"),VRt.forEach(t),B_r=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(Tne,"A",{href:!0});var XRt=s(XH);I_r=r(XRt,"from_pretrained()"),XRt.forEach(t),N_r=r(Tne," to load the model weights."),Tne.forEach(t),q_r=i(V7),T(R8.$$.fragment,V7),V7.forEach(t),j_r=i(yl),mo=n(yl,"DIV",{class:!0});var ya=s(mo);T(ix.$$.fragment,ya),D_r=i(ya),QFe=n(ya,"P",{});var zRt=s(QFe);G_r=r(zRt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),zRt.forEach(t),O_r=i(ya),tn=n(ya,"P",{});var X7=s(tn);V_r=r(X7,"The model class to instantiate is selected based on the "),UFe=n(X7,"CODE",{});var WRt=s(UFe);X_r=r(WRt,"model_type"),WRt.forEach(t),z_r=r(X7,` property of the config object (either
passed as an argument or loaded from `),HFe=n(X7,"CODE",{});var QRt=s(HFe);W_r=r(QRt,"pretrained_model_name_or_path"),QRt.forEach(t),Q_r=r(X7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(X7,"CODE",{});var URt=s(JFe);U_r=r(URt,"pretrained_model_name_or_path"),URt.forEach(t),H_r=r(X7,":"),X7.forEach(t),J_r=i(ya),YFe=n(ya,"UL",{});var HRt=s(YFe);P8=n(HRt,"LI",{});var UDe=s(P8);KFe=n(UDe,"STRONG",{});var JRt=s(KFe);Y_r=r(JRt,"vilt"),JRt.forEach(t),K_r=r(UDe," \u2014 "),zH=n(UDe,"A",{href:!0});var YRt=s(zH);Z_r=r(YRt,"ViltForQuestionAnswering"),YRt.forEach(t),eur=r(UDe," (ViLT model)"),UDe.forEach(t),HRt.forEach(t),our=i(ya),B8=n(ya,"P",{});var HDe=s(B8);rur=r(HDe,"The model is set in evaluation mode by default using "),ZFe=n(HDe,"CODE",{});var KRt=s(ZFe);tur=r(KRt,"model.eval()"),KRt.forEach(t),aur=r(HDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eTe=n(HDe,"CODE",{});var ZRt=s(eTe);nur=r(ZRt,"model.train()"),ZRt.forEach(t),HDe.forEach(t),sur=i(ya),T(I8.$$.fragment,ya),ya.forEach(t),yl.forEach(t),GUe=i(f),Qd=n(f,"H2",{class:!0});var YJe=s(Qd);N8=n(YJe,"A",{id:!0,class:!0,href:!0});var ePt=s(N8);oTe=n(ePt,"SPAN",{});var oPt=s(oTe);T(dx.$$.fragment,oPt),oPt.forEach(t),ePt.forEach(t),lur=i(YJe),rTe=n(YJe,"SPAN",{});var rPt=s(rTe);iur=r(rPt,"AutoModelForAudioClassification"),rPt.forEach(t),YJe.forEach(t),OUe=i(f),Uo=n(f,"DIV",{class:!0});var xl=s(Uo);T(cx.$$.fragment,xl),dur=i(xl),Ud=n(xl,"P",{});var Mne=s(Ud);cur=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WH=n(Mne,"A",{href:!0});var tPt=s(WH);fur=r(tPt,"from_pretrained()"),tPt.forEach(t),mur=r(Mne," class method or the "),QH=n(Mne,"A",{href:!0});var aPt=s(QH);gur=r(aPt,"from_config()"),aPt.forEach(t),hur=r(Mne,` class
method.`),Mne.forEach(t),pur=i(xl),fx=n(xl,"P",{});var KJe=s(fx);_ur=r(KJe,"This class cannot be instantiated directly using "),tTe=n(KJe,"CODE",{});var nPt=s(tTe);uur=r(nPt,"__init__()"),nPt.forEach(t),bur=r(KJe," (throws an error)."),KJe.forEach(t),vur=i(xl),yt=n(xl,"DIV",{class:!0});var z7=s(yt);T(mx.$$.fragment,z7),Fur=i(z7),aTe=n(z7,"P",{});var sPt=s(aTe);Tur=r(sPt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sPt.forEach(t),Mur=i(z7),Hd=n(z7,"P",{});var Ene=s(Hd);Eur=r(Ene,`Note:
Loading a model from its configuration file does `),nTe=n(Ene,"STRONG",{});var lPt=s(nTe);Cur=r(lPt,"not"),lPt.forEach(t),wur=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(Ene,"A",{href:!0});var iPt=s(UH);Aur=r(iPt,"from_pretrained()"),iPt.forEach(t),Lur=r(Ene," to load the model weights."),Ene.forEach(t),yur=i(z7),T(q8.$$.fragment,z7),z7.forEach(t),xur=i(xl),go=n(xl,"DIV",{class:!0});var xa=s(go);T(gx.$$.fragment,xa),$ur=i(xa),sTe=n(xa,"P",{});var dPt=s(sTe);kur=r(dPt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dPt.forEach(t),Sur=i(xa),an=n(xa,"P",{});var W7=s(an);Rur=r(W7,"The model class to instantiate is selected based on the "),lTe=n(W7,"CODE",{});var cPt=s(lTe);Pur=r(cPt,"model_type"),cPt.forEach(t),Bur=r(W7,` property of the config object (either
passed as an argument or loaded from `),iTe=n(W7,"CODE",{});var fPt=s(iTe);Iur=r(fPt,"pretrained_model_name_or_path"),fPt.forEach(t),Nur=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=n(W7,"CODE",{});var mPt=s(dTe);qur=r(mPt,"pretrained_model_name_or_path"),mPt.forEach(t),jur=r(W7,":"),W7.forEach(t),Dur=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);j8=n(We,"LI",{});var JDe=s(j8);cTe=n(JDe,"STRONG",{});var gPt=s(cTe);Gur=r(gPt,"data2vec-audio"),gPt.forEach(t),Our=r(JDe," \u2014 "),HH=n(JDe,"A",{href:!0});var hPt=s(HH);Vur=r(hPt,"Data2VecAudioForSequenceClassification"),hPt.forEach(t),Xur=r(JDe," (Data2VecAudio model)"),JDe.forEach(t),zur=i(We),D8=n(We,"LI",{});var YDe=s(D8);fTe=n(YDe,"STRONG",{});var pPt=s(fTe);Wur=r(pPt,"hubert"),pPt.forEach(t),Qur=r(YDe," \u2014 "),JH=n(YDe,"A",{href:!0});var _Pt=s(JH);Uur=r(_Pt,"HubertForSequenceClassification"),_Pt.forEach(t),Hur=r(YDe," (Hubert model)"),YDe.forEach(t),Jur=i(We),G8=n(We,"LI",{});var KDe=s(G8);mTe=n(KDe,"STRONG",{});var uPt=s(mTe);Yur=r(uPt,"sew"),uPt.forEach(t),Kur=r(KDe," \u2014 "),YH=n(KDe,"A",{href:!0});var bPt=s(YH);Zur=r(bPt,"SEWForSequenceClassification"),bPt.forEach(t),e2r=r(KDe," (SEW model)"),KDe.forEach(t),o2r=i(We),O8=n(We,"LI",{});var ZDe=s(O8);gTe=n(ZDe,"STRONG",{});var vPt=s(gTe);r2r=r(vPt,"sew-d"),vPt.forEach(t),t2r=r(ZDe," \u2014 "),KH=n(ZDe,"A",{href:!0});var FPt=s(KH);a2r=r(FPt,"SEWDForSequenceClassification"),FPt.forEach(t),n2r=r(ZDe," (SEW-D model)"),ZDe.forEach(t),s2r=i(We),V8=n(We,"LI",{});var eGe=s(V8);hTe=n(eGe,"STRONG",{});var TPt=s(hTe);l2r=r(TPt,"unispeech"),TPt.forEach(t),i2r=r(eGe," \u2014 "),ZH=n(eGe,"A",{href:!0});var MPt=s(ZH);d2r=r(MPt,"UniSpeechForSequenceClassification"),MPt.forEach(t),c2r=r(eGe," (UniSpeech model)"),eGe.forEach(t),f2r=i(We),X8=n(We,"LI",{});var oGe=s(X8);pTe=n(oGe,"STRONG",{});var EPt=s(pTe);m2r=r(EPt,"unispeech-sat"),EPt.forEach(t),g2r=r(oGe," \u2014 "),eJ=n(oGe,"A",{href:!0});var CPt=s(eJ);h2r=r(CPt,"UniSpeechSatForSequenceClassification"),CPt.forEach(t),p2r=r(oGe," (UniSpeechSat model)"),oGe.forEach(t),_2r=i(We),z8=n(We,"LI",{});var rGe=s(z8);_Te=n(rGe,"STRONG",{});var wPt=s(_Te);u2r=r(wPt,"wav2vec2"),wPt.forEach(t),b2r=r(rGe," \u2014 "),oJ=n(rGe,"A",{href:!0});var APt=s(oJ);v2r=r(APt,"Wav2Vec2ForSequenceClassification"),APt.forEach(t),F2r=r(rGe," (Wav2Vec2 model)"),rGe.forEach(t),T2r=i(We),W8=n(We,"LI",{});var tGe=s(W8);uTe=n(tGe,"STRONG",{});var LPt=s(uTe);M2r=r(LPt,"wav2vec2-conformer"),LPt.forEach(t),E2r=r(tGe," \u2014 "),rJ=n(tGe,"A",{href:!0});var yPt=s(rJ);C2r=r(yPt,"Wav2Vec2ConformerForSequenceClassification"),yPt.forEach(t),w2r=r(tGe," (Wav2Vec2-Conformer model)"),tGe.forEach(t),A2r=i(We),Q8=n(We,"LI",{});var aGe=s(Q8);bTe=n(aGe,"STRONG",{});var xPt=s(bTe);L2r=r(xPt,"wavlm"),xPt.forEach(t),y2r=r(aGe," \u2014 "),tJ=n(aGe,"A",{href:!0});var $Pt=s(tJ);x2r=r($Pt,"WavLMForSequenceClassification"),$Pt.forEach(t),$2r=r(aGe," (WavLM model)"),aGe.forEach(t),We.forEach(t),k2r=i(xa),U8=n(xa,"P",{});var nGe=s(U8);S2r=r(nGe,"The model is set in evaluation mode by default using "),vTe=n(nGe,"CODE",{});var kPt=s(vTe);R2r=r(kPt,"model.eval()"),kPt.forEach(t),P2r=r(nGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FTe=n(nGe,"CODE",{});var SPt=s(FTe);B2r=r(SPt,"model.train()"),SPt.forEach(t),nGe.forEach(t),I2r=i(xa),T(H8.$$.fragment,xa),xa.forEach(t),xl.forEach(t),VUe=i(f),Jd=n(f,"H2",{class:!0});var ZJe=s(Jd);J8=n(ZJe,"A",{id:!0,class:!0,href:!0});var RPt=s(J8);TTe=n(RPt,"SPAN",{});var PPt=s(TTe);T(hx.$$.fragment,PPt),PPt.forEach(t),RPt.forEach(t),N2r=i(ZJe),MTe=n(ZJe,"SPAN",{});var BPt=s(MTe);q2r=r(BPt,"AutoModelForAudioFrameClassification"),BPt.forEach(t),ZJe.forEach(t),XUe=i(f),Ho=n(f,"DIV",{class:!0});var $l=s(Ho);T(px.$$.fragment,$l),j2r=i($l),Yd=n($l,"P",{});var Cne=s(Yd);D2r=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aJ=n(Cne,"A",{href:!0});var IPt=s(aJ);G2r=r(IPt,"from_pretrained()"),IPt.forEach(t),O2r=r(Cne," class method or the "),nJ=n(Cne,"A",{href:!0});var NPt=s(nJ);V2r=r(NPt,"from_config()"),NPt.forEach(t),X2r=r(Cne,` class
method.`),Cne.forEach(t),z2r=i($l),_x=n($l,"P",{});var eYe=s(_x);W2r=r(eYe,"This class cannot be instantiated directly using "),ETe=n(eYe,"CODE",{});var qPt=s(ETe);Q2r=r(qPt,"__init__()"),qPt.forEach(t),U2r=r(eYe," (throws an error)."),eYe.forEach(t),H2r=i($l),xt=n($l,"DIV",{class:!0});var Q7=s(xt);T(ux.$$.fragment,Q7),J2r=i(Q7),CTe=n(Q7,"P",{});var jPt=s(CTe);Y2r=r(jPt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jPt.forEach(t),K2r=i(Q7),Kd=n(Q7,"P",{});var wne=s(Kd);Z2r=r(wne,`Note:
Loading a model from its configuration file does `),wTe=n(wne,"STRONG",{});var DPt=s(wTe);e0r=r(DPt,"not"),DPt.forEach(t),o0r=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(wne,"A",{href:!0});var GPt=s(sJ);r0r=r(GPt,"from_pretrained()"),GPt.forEach(t),t0r=r(wne," to load the model weights."),wne.forEach(t),a0r=i(Q7),T(Y8.$$.fragment,Q7),Q7.forEach(t),n0r=i($l),ho=n($l,"DIV",{class:!0});var $a=s(ho);T(bx.$$.fragment,$a),s0r=i($a),ATe=n($a,"P",{});var OPt=s(ATe);l0r=r(OPt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),OPt.forEach(t),i0r=i($a),nn=n($a,"P",{});var U7=s(nn);d0r=r(U7,"The model class to instantiate is selected based on the "),LTe=n(U7,"CODE",{});var VPt=s(LTe);c0r=r(VPt,"model_type"),VPt.forEach(t),f0r=r(U7,` property of the config object (either
passed as an argument or loaded from `),yTe=n(U7,"CODE",{});var XPt=s(yTe);m0r=r(XPt,"pretrained_model_name_or_path"),XPt.forEach(t),g0r=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(U7,"CODE",{});var zPt=s(xTe);h0r=r(zPt,"pretrained_model_name_or_path"),zPt.forEach(t),p0r=r(U7,":"),U7.forEach(t),_0r=i($a),st=n($a,"UL",{});var kl=s(st);K8=n(kl,"LI",{});var sGe=s(K8);$Te=n(sGe,"STRONG",{});var WPt=s($Te);u0r=r(WPt,"data2vec-audio"),WPt.forEach(t),b0r=r(sGe," \u2014 "),lJ=n(sGe,"A",{href:!0});var QPt=s(lJ);v0r=r(QPt,"Data2VecAudioForAudioFrameClassification"),QPt.forEach(t),F0r=r(sGe," (Data2VecAudio model)"),sGe.forEach(t),T0r=i(kl),Z8=n(kl,"LI",{});var lGe=s(Z8);kTe=n(lGe,"STRONG",{});var UPt=s(kTe);M0r=r(UPt,"unispeech-sat"),UPt.forEach(t),E0r=r(lGe," \u2014 "),iJ=n(lGe,"A",{href:!0});var HPt=s(iJ);C0r=r(HPt,"UniSpeechSatForAudioFrameClassification"),HPt.forEach(t),w0r=r(lGe," (UniSpeechSat model)"),lGe.forEach(t),A0r=i(kl),eM=n(kl,"LI",{});var iGe=s(eM);STe=n(iGe,"STRONG",{});var JPt=s(STe);L0r=r(JPt,"wav2vec2"),JPt.forEach(t),y0r=r(iGe," \u2014 "),dJ=n(iGe,"A",{href:!0});var YPt=s(dJ);x0r=r(YPt,"Wav2Vec2ForAudioFrameClassification"),YPt.forEach(t),$0r=r(iGe," (Wav2Vec2 model)"),iGe.forEach(t),k0r=i(kl),oM=n(kl,"LI",{});var dGe=s(oM);RTe=n(dGe,"STRONG",{});var KPt=s(RTe);S0r=r(KPt,"wav2vec2-conformer"),KPt.forEach(t),R0r=r(dGe," \u2014 "),cJ=n(dGe,"A",{href:!0});var ZPt=s(cJ);P0r=r(ZPt,"Wav2Vec2ConformerForAudioFrameClassification"),ZPt.forEach(t),B0r=r(dGe," (Wav2Vec2-Conformer model)"),dGe.forEach(t),I0r=i(kl),rM=n(kl,"LI",{});var cGe=s(rM);PTe=n(cGe,"STRONG",{});var eBt=s(PTe);N0r=r(eBt,"wavlm"),eBt.forEach(t),q0r=r(cGe," \u2014 "),fJ=n(cGe,"A",{href:!0});var oBt=s(fJ);j0r=r(oBt,"WavLMForAudioFrameClassification"),oBt.forEach(t),D0r=r(cGe," (WavLM model)"),cGe.forEach(t),kl.forEach(t),G0r=i($a),tM=n($a,"P",{});var fGe=s(tM);O0r=r(fGe,"The model is set in evaluation mode by default using "),BTe=n(fGe,"CODE",{});var rBt=s(BTe);V0r=r(rBt,"model.eval()"),rBt.forEach(t),X0r=r(fGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ITe=n(fGe,"CODE",{});var tBt=s(ITe);z0r=r(tBt,"model.train()"),tBt.forEach(t),fGe.forEach(t),W0r=i($a),T(aM.$$.fragment,$a),$a.forEach(t),$l.forEach(t),zUe=i(f),Zd=n(f,"H2",{class:!0});var oYe=s(Zd);nM=n(oYe,"A",{id:!0,class:!0,href:!0});var aBt=s(nM);NTe=n(aBt,"SPAN",{});var nBt=s(NTe);T(vx.$$.fragment,nBt),nBt.forEach(t),aBt.forEach(t),Q0r=i(oYe),qTe=n(oYe,"SPAN",{});var sBt=s(qTe);U0r=r(sBt,"AutoModelForCTC"),sBt.forEach(t),oYe.forEach(t),WUe=i(f),Jo=n(f,"DIV",{class:!0});var Sl=s(Jo);T(Fx.$$.fragment,Sl),H0r=i(Sl),ec=n(Sl,"P",{});var Ane=s(ec);J0r=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mJ=n(Ane,"A",{href:!0});var lBt=s(mJ);Y0r=r(lBt,"from_pretrained()"),lBt.forEach(t),K0r=r(Ane," class method or the "),gJ=n(Ane,"A",{href:!0});var iBt=s(gJ);Z0r=r(iBt,"from_config()"),iBt.forEach(t),e1r=r(Ane,` class
method.`),Ane.forEach(t),o1r=i(Sl),Tx=n(Sl,"P",{});var rYe=s(Tx);r1r=r(rYe,"This class cannot be instantiated directly using "),jTe=n(rYe,"CODE",{});var dBt=s(jTe);t1r=r(dBt,"__init__()"),dBt.forEach(t),a1r=r(rYe," (throws an error)."),rYe.forEach(t),n1r=i(Sl),$t=n(Sl,"DIV",{class:!0});var H7=s($t);T(Mx.$$.fragment,H7),s1r=i(H7),DTe=n(H7,"P",{});var cBt=s(DTe);l1r=r(cBt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cBt.forEach(t),i1r=i(H7),oc=n(H7,"P",{});var Lne=s(oc);d1r=r(Lne,`Note:
Loading a model from its configuration file does `),GTe=n(Lne,"STRONG",{});var fBt=s(GTe);c1r=r(fBt,"not"),fBt.forEach(t),f1r=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(Lne,"A",{href:!0});var mBt=s(hJ);m1r=r(mBt,"from_pretrained()"),mBt.forEach(t),g1r=r(Lne," to load the model weights."),Lne.forEach(t),h1r=i(H7),T(sM.$$.fragment,H7),H7.forEach(t),p1r=i(Sl),po=n(Sl,"DIV",{class:!0});var ka=s(po);T(Ex.$$.fragment,ka),_1r=i(ka),OTe=n(ka,"P",{});var gBt=s(OTe);u1r=r(gBt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gBt.forEach(t),b1r=i(ka),sn=n(ka,"P",{});var J7=s(sn);v1r=r(J7,"The model class to instantiate is selected based on the "),VTe=n(J7,"CODE",{});var hBt=s(VTe);F1r=r(hBt,"model_type"),hBt.forEach(t),T1r=r(J7,` property of the config object (either
passed as an argument or loaded from `),XTe=n(J7,"CODE",{});var pBt=s(XTe);M1r=r(pBt,"pretrained_model_name_or_path"),pBt.forEach(t),E1r=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zTe=n(J7,"CODE",{});var _Bt=s(zTe);C1r=r(_Bt,"pretrained_model_name_or_path"),_Bt.forEach(t),w1r=r(J7,":"),J7.forEach(t),A1r=i(ka),Le=n(ka,"UL",{});var Be=s(Le);lM=n(Be,"LI",{});var mGe=s(lM);WTe=n(mGe,"STRONG",{});var uBt=s(WTe);L1r=r(uBt,"data2vec-audio"),uBt.forEach(t),y1r=r(mGe," \u2014 "),pJ=n(mGe,"A",{href:!0});var bBt=s(pJ);x1r=r(bBt,"Data2VecAudioForCTC"),bBt.forEach(t),$1r=r(mGe," (Data2VecAudio model)"),mGe.forEach(t),k1r=i(Be),iM=n(Be,"LI",{});var gGe=s(iM);QTe=n(gGe,"STRONG",{});var vBt=s(QTe);S1r=r(vBt,"hubert"),vBt.forEach(t),R1r=r(gGe," \u2014 "),_J=n(gGe,"A",{href:!0});var FBt=s(_J);P1r=r(FBt,"HubertForCTC"),FBt.forEach(t),B1r=r(gGe," (Hubert model)"),gGe.forEach(t),I1r=i(Be),dM=n(Be,"LI",{});var hGe=s(dM);UTe=n(hGe,"STRONG",{});var TBt=s(UTe);N1r=r(TBt,"mctct"),TBt.forEach(t),q1r=r(hGe," \u2014 "),uJ=n(hGe,"A",{href:!0});var MBt=s(uJ);j1r=r(MBt,"MCTCTForCTC"),MBt.forEach(t),D1r=r(hGe," (M-CTC-T model)"),hGe.forEach(t),G1r=i(Be),cM=n(Be,"LI",{});var pGe=s(cM);HTe=n(pGe,"STRONG",{});var EBt=s(HTe);O1r=r(EBt,"sew"),EBt.forEach(t),V1r=r(pGe," \u2014 "),bJ=n(pGe,"A",{href:!0});var CBt=s(bJ);X1r=r(CBt,"SEWForCTC"),CBt.forEach(t),z1r=r(pGe," (SEW model)"),pGe.forEach(t),W1r=i(Be),fM=n(Be,"LI",{});var _Ge=s(fM);JTe=n(_Ge,"STRONG",{});var wBt=s(JTe);Q1r=r(wBt,"sew-d"),wBt.forEach(t),U1r=r(_Ge," \u2014 "),vJ=n(_Ge,"A",{href:!0});var ABt=s(vJ);H1r=r(ABt,"SEWDForCTC"),ABt.forEach(t),J1r=r(_Ge," (SEW-D model)"),_Ge.forEach(t),Y1r=i(Be),mM=n(Be,"LI",{});var uGe=s(mM);YTe=n(uGe,"STRONG",{});var LBt=s(YTe);K1r=r(LBt,"unispeech"),LBt.forEach(t),Z1r=r(uGe," \u2014 "),FJ=n(uGe,"A",{href:!0});var yBt=s(FJ);ebr=r(yBt,"UniSpeechForCTC"),yBt.forEach(t),obr=r(uGe," (UniSpeech model)"),uGe.forEach(t),rbr=i(Be),gM=n(Be,"LI",{});var bGe=s(gM);KTe=n(bGe,"STRONG",{});var xBt=s(KTe);tbr=r(xBt,"unispeech-sat"),xBt.forEach(t),abr=r(bGe," \u2014 "),TJ=n(bGe,"A",{href:!0});var $Bt=s(TJ);nbr=r($Bt,"UniSpeechSatForCTC"),$Bt.forEach(t),sbr=r(bGe," (UniSpeechSat model)"),bGe.forEach(t),lbr=i(Be),hM=n(Be,"LI",{});var vGe=s(hM);ZTe=n(vGe,"STRONG",{});var kBt=s(ZTe);ibr=r(kBt,"wav2vec2"),kBt.forEach(t),dbr=r(vGe," \u2014 "),MJ=n(vGe,"A",{href:!0});var SBt=s(MJ);cbr=r(SBt,"Wav2Vec2ForCTC"),SBt.forEach(t),fbr=r(vGe," (Wav2Vec2 model)"),vGe.forEach(t),mbr=i(Be),pM=n(Be,"LI",{});var FGe=s(pM);e8e=n(FGe,"STRONG",{});var RBt=s(e8e);gbr=r(RBt,"wav2vec2-conformer"),RBt.forEach(t),hbr=r(FGe," \u2014 "),EJ=n(FGe,"A",{href:!0});var PBt=s(EJ);pbr=r(PBt,"Wav2Vec2ConformerForCTC"),PBt.forEach(t),_br=r(FGe," (Wav2Vec2-Conformer model)"),FGe.forEach(t),ubr=i(Be),_M=n(Be,"LI",{});var TGe=s(_M);o8e=n(TGe,"STRONG",{});var BBt=s(o8e);bbr=r(BBt,"wavlm"),BBt.forEach(t),vbr=r(TGe," \u2014 "),CJ=n(TGe,"A",{href:!0});var IBt=s(CJ);Fbr=r(IBt,"WavLMForCTC"),IBt.forEach(t),Tbr=r(TGe," (WavLM model)"),TGe.forEach(t),Be.forEach(t),Mbr=i(ka),uM=n(ka,"P",{});var MGe=s(uM);Ebr=r(MGe,"The model is set in evaluation mode by default using "),r8e=n(MGe,"CODE",{});var NBt=s(r8e);Cbr=r(NBt,"model.eval()"),NBt.forEach(t),wbr=r(MGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t8e=n(MGe,"CODE",{});var qBt=s(t8e);Abr=r(qBt,"model.train()"),qBt.forEach(t),MGe.forEach(t),Lbr=i(ka),T(bM.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),QUe=i(f),rc=n(f,"H2",{class:!0});var tYe=s(rc);vM=n(tYe,"A",{id:!0,class:!0,href:!0});var jBt=s(vM);a8e=n(jBt,"SPAN",{});var DBt=s(a8e);T(Cx.$$.fragment,DBt),DBt.forEach(t),jBt.forEach(t),ybr=i(tYe),n8e=n(tYe,"SPAN",{});var GBt=s(n8e);xbr=r(GBt,"AutoModelForSpeechSeq2Seq"),GBt.forEach(t),tYe.forEach(t),UUe=i(f),Yo=n(f,"DIV",{class:!0});var Rl=s(Yo);T(wx.$$.fragment,Rl),$br=i(Rl),tc=n(Rl,"P",{});var yne=s(tc);kbr=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),wJ=n(yne,"A",{href:!0});var OBt=s(wJ);Sbr=r(OBt,"from_pretrained()"),OBt.forEach(t),Rbr=r(yne," class method or the "),AJ=n(yne,"A",{href:!0});var VBt=s(AJ);Pbr=r(VBt,"from_config()"),VBt.forEach(t),Bbr=r(yne,` class
method.`),yne.forEach(t),Ibr=i(Rl),Ax=n(Rl,"P",{});var aYe=s(Ax);Nbr=r(aYe,"This class cannot be instantiated directly using "),s8e=n(aYe,"CODE",{});var XBt=s(s8e);qbr=r(XBt,"__init__()"),XBt.forEach(t),jbr=r(aYe," (throws an error)."),aYe.forEach(t),Dbr=i(Rl),kt=n(Rl,"DIV",{class:!0});var Y7=s(kt);T(Lx.$$.fragment,Y7),Gbr=i(Y7),l8e=n(Y7,"P",{});var zBt=s(l8e);Obr=r(zBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zBt.forEach(t),Vbr=i(Y7),ac=n(Y7,"P",{});var xne=s(ac);Xbr=r(xne,`Note:
Loading a model from its configuration file does `),i8e=n(xne,"STRONG",{});var WBt=s(i8e);zbr=r(WBt,"not"),WBt.forEach(t),Wbr=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=n(xne,"A",{href:!0});var QBt=s(LJ);Qbr=r(QBt,"from_pretrained()"),QBt.forEach(t),Ubr=r(xne," to load the model weights."),xne.forEach(t),Hbr=i(Y7),T(FM.$$.fragment,Y7),Y7.forEach(t),Jbr=i(Rl),_o=n(Rl,"DIV",{class:!0});var Sa=s(_o);T(yx.$$.fragment,Sa),Ybr=i(Sa),d8e=n(Sa,"P",{});var UBt=s(d8e);Kbr=r(UBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UBt.forEach(t),Zbr=i(Sa),ln=n(Sa,"P",{});var K7=s(ln);evr=r(K7,"The model class to instantiate is selected based on the "),c8e=n(K7,"CODE",{});var HBt=s(c8e);ovr=r(HBt,"model_type"),HBt.forEach(t),rvr=r(K7,` property of the config object (either
passed as an argument or loaded from `),f8e=n(K7,"CODE",{});var JBt=s(f8e);tvr=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),avr=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m8e=n(K7,"CODE",{});var YBt=s(m8e);nvr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),svr=r(K7,":"),K7.forEach(t),lvr=i(Sa),xx=n(Sa,"UL",{});var nYe=s(xx);TM=n(nYe,"LI",{});var EGe=s(TM);g8e=n(EGe,"STRONG",{});var KBt=s(g8e);ivr=r(KBt,"speech-encoder-decoder"),KBt.forEach(t),dvr=r(EGe," \u2014 "),yJ=n(EGe,"A",{href:!0});var ZBt=s(yJ);cvr=r(ZBt,"SpeechEncoderDecoderModel"),ZBt.forEach(t),fvr=r(EGe," (Speech Encoder decoder model)"),EGe.forEach(t),mvr=i(nYe),MM=n(nYe,"LI",{});var CGe=s(MM);h8e=n(CGe,"STRONG",{});var eIt=s(h8e);gvr=r(eIt,"speech_to_text"),eIt.forEach(t),hvr=r(CGe," \u2014 "),xJ=n(CGe,"A",{href:!0});var oIt=s(xJ);pvr=r(oIt,"Speech2TextForConditionalGeneration"),oIt.forEach(t),_vr=r(CGe," (Speech2Text model)"),CGe.forEach(t),nYe.forEach(t),uvr=i(Sa),EM=n(Sa,"P",{});var wGe=s(EM);bvr=r(wGe,"The model is set in evaluation mode by default using "),p8e=n(wGe,"CODE",{});var rIt=s(p8e);vvr=r(rIt,"model.eval()"),rIt.forEach(t),Fvr=r(wGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_8e=n(wGe,"CODE",{});var tIt=s(_8e);Tvr=r(tIt,"model.train()"),tIt.forEach(t),wGe.forEach(t),Mvr=i(Sa),T(CM.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),HUe=i(f),nc=n(f,"H2",{class:!0});var sYe=s(nc);wM=n(sYe,"A",{id:!0,class:!0,href:!0});var aIt=s(wM);u8e=n(aIt,"SPAN",{});var nIt=s(u8e);T($x.$$.fragment,nIt),nIt.forEach(t),aIt.forEach(t),Evr=i(sYe),b8e=n(sYe,"SPAN",{});var sIt=s(b8e);Cvr=r(sIt,"AutoModelForAudioXVector"),sIt.forEach(t),sYe.forEach(t),JUe=i(f),Ko=n(f,"DIV",{class:!0});var Pl=s(Ko);T(kx.$$.fragment,Pl),wvr=i(Pl),sc=n(Pl,"P",{});var $ne=s(sc);Avr=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),$J=n($ne,"A",{href:!0});var lIt=s($J);Lvr=r(lIt,"from_pretrained()"),lIt.forEach(t),yvr=r($ne," class method or the "),kJ=n($ne,"A",{href:!0});var iIt=s(kJ);xvr=r(iIt,"from_config()"),iIt.forEach(t),$vr=r($ne,` class
method.`),$ne.forEach(t),kvr=i(Pl),Sx=n(Pl,"P",{});var lYe=s(Sx);Svr=r(lYe,"This class cannot be instantiated directly using "),v8e=n(lYe,"CODE",{});var dIt=s(v8e);Rvr=r(dIt,"__init__()"),dIt.forEach(t),Pvr=r(lYe," (throws an error)."),lYe.forEach(t),Bvr=i(Pl),St=n(Pl,"DIV",{class:!0});var Z7=s(St);T(Rx.$$.fragment,Z7),Ivr=i(Z7),F8e=n(Z7,"P",{});var cIt=s(F8e);Nvr=r(cIt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cIt.forEach(t),qvr=i(Z7),lc=n(Z7,"P",{});var kne=s(lc);jvr=r(kne,`Note:
Loading a model from its configuration file does `),T8e=n(kne,"STRONG",{});var fIt=s(T8e);Dvr=r(fIt,"not"),fIt.forEach(t),Gvr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(kne,"A",{href:!0});var mIt=s(SJ);Ovr=r(mIt,"from_pretrained()"),mIt.forEach(t),Vvr=r(kne," to load the model weights."),kne.forEach(t),Xvr=i(Z7),T(AM.$$.fragment,Z7),Z7.forEach(t),zvr=i(Pl),uo=n(Pl,"DIV",{class:!0});var Ra=s(uo);T(Px.$$.fragment,Ra),Wvr=i(Ra),M8e=n(Ra,"P",{});var gIt=s(M8e);Qvr=r(gIt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gIt.forEach(t),Uvr=i(Ra),dn=n(Ra,"P",{});var eL=s(dn);Hvr=r(eL,"The model class to instantiate is selected based on the "),E8e=n(eL,"CODE",{});var hIt=s(E8e);Jvr=r(hIt,"model_type"),hIt.forEach(t),Yvr=r(eL,` property of the config object (either
passed as an argument or loaded from `),C8e=n(eL,"CODE",{});var pIt=s(C8e);Kvr=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),Zvr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w8e=n(eL,"CODE",{});var _It=s(w8e);eFr=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),oFr=r(eL,":"),eL.forEach(t),rFr=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);LM=n(Bl,"LI",{});var AGe=s(LM);A8e=n(AGe,"STRONG",{});var uIt=s(A8e);tFr=r(uIt,"data2vec-audio"),uIt.forEach(t),aFr=r(AGe," \u2014 "),RJ=n(AGe,"A",{href:!0});var bIt=s(RJ);nFr=r(bIt,"Data2VecAudioForXVector"),bIt.forEach(t),sFr=r(AGe," (Data2VecAudio model)"),AGe.forEach(t),lFr=i(Bl),yM=n(Bl,"LI",{});var LGe=s(yM);L8e=n(LGe,"STRONG",{});var vIt=s(L8e);iFr=r(vIt,"unispeech-sat"),vIt.forEach(t),dFr=r(LGe," \u2014 "),PJ=n(LGe,"A",{href:!0});var FIt=s(PJ);cFr=r(FIt,"UniSpeechSatForXVector"),FIt.forEach(t),fFr=r(LGe," (UniSpeechSat model)"),LGe.forEach(t),mFr=i(Bl),xM=n(Bl,"LI",{});var yGe=s(xM);y8e=n(yGe,"STRONG",{});var TIt=s(y8e);gFr=r(TIt,"wav2vec2"),TIt.forEach(t),hFr=r(yGe," \u2014 "),BJ=n(yGe,"A",{href:!0});var MIt=s(BJ);pFr=r(MIt,"Wav2Vec2ForXVector"),MIt.forEach(t),_Fr=r(yGe," (Wav2Vec2 model)"),yGe.forEach(t),uFr=i(Bl),$M=n(Bl,"LI",{});var xGe=s($M);x8e=n(xGe,"STRONG",{});var EIt=s(x8e);bFr=r(EIt,"wav2vec2-conformer"),EIt.forEach(t),vFr=r(xGe," \u2014 "),IJ=n(xGe,"A",{href:!0});var CIt=s(IJ);FFr=r(CIt,"Wav2Vec2ConformerForXVector"),CIt.forEach(t),TFr=r(xGe," (Wav2Vec2-Conformer model)"),xGe.forEach(t),MFr=i(Bl),kM=n(Bl,"LI",{});var $Ge=s(kM);$8e=n($Ge,"STRONG",{});var wIt=s($8e);EFr=r(wIt,"wavlm"),wIt.forEach(t),CFr=r($Ge," \u2014 "),NJ=n($Ge,"A",{href:!0});var AIt=s(NJ);wFr=r(AIt,"WavLMForXVector"),AIt.forEach(t),AFr=r($Ge," (WavLM model)"),$Ge.forEach(t),Bl.forEach(t),LFr=i(Ra),SM=n(Ra,"P",{});var kGe=s(SM);yFr=r(kGe,"The model is set in evaluation mode by default using "),k8e=n(kGe,"CODE",{});var LIt=s(k8e);xFr=r(LIt,"model.eval()"),LIt.forEach(t),$Fr=r(kGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S8e=n(kGe,"CODE",{});var yIt=s(S8e);kFr=r(yIt,"model.train()"),yIt.forEach(t),kGe.forEach(t),SFr=i(Ra),T(RM.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),YUe=i(f),ic=n(f,"H2",{class:!0});var iYe=s(ic);PM=n(iYe,"A",{id:!0,class:!0,href:!0});var xIt=s(PM);R8e=n(xIt,"SPAN",{});var $It=s(R8e);T(Bx.$$.fragment,$It),$It.forEach(t),xIt.forEach(t),RFr=i(iYe),P8e=n(iYe,"SPAN",{});var kIt=s(P8e);PFr=r(kIt,"AutoModelForMaskedImageModeling"),kIt.forEach(t),iYe.forEach(t),KUe=i(f),Zo=n(f,"DIV",{class:!0});var Il=s(Zo);T(Ix.$$.fragment,Il),BFr=i(Il),dc=n(Il,"P",{});var Sne=s(dc);IFr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),qJ=n(Sne,"A",{href:!0});var SIt=s(qJ);NFr=r(SIt,"from_pretrained()"),SIt.forEach(t),qFr=r(Sne," class method or the "),jJ=n(Sne,"A",{href:!0});var RIt=s(jJ);jFr=r(RIt,"from_config()"),RIt.forEach(t),DFr=r(Sne,` class
method.`),Sne.forEach(t),GFr=i(Il),Nx=n(Il,"P",{});var dYe=s(Nx);OFr=r(dYe,"This class cannot be instantiated directly using "),B8e=n(dYe,"CODE",{});var PIt=s(B8e);VFr=r(PIt,"__init__()"),PIt.forEach(t),XFr=r(dYe," (throws an error)."),dYe.forEach(t),zFr=i(Il),Rt=n(Il,"DIV",{class:!0});var oL=s(Rt);T(qx.$$.fragment,oL),WFr=i(oL),I8e=n(oL,"P",{});var BIt=s(I8e);QFr=r(BIt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),BIt.forEach(t),UFr=i(oL),cc=n(oL,"P",{});var Rne=s(cc);HFr=r(Rne,`Note:
Loading a model from its configuration file does `),N8e=n(Rne,"STRONG",{});var IIt=s(N8e);JFr=r(IIt,"not"),IIt.forEach(t),YFr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=n(Rne,"A",{href:!0});var NIt=s(DJ);KFr=r(NIt,"from_pretrained()"),NIt.forEach(t),ZFr=r(Rne," to load the model weights."),Rne.forEach(t),eTr=i(oL),T(BM.$$.fragment,oL),oL.forEach(t),oTr=i(Il),bo=n(Il,"DIV",{class:!0});var Pa=s(bo);T(jx.$$.fragment,Pa),rTr=i(Pa),q8e=n(Pa,"P",{});var qIt=s(q8e);tTr=r(qIt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),qIt.forEach(t),aTr=i(Pa),cn=n(Pa,"P",{});var rL=s(cn);nTr=r(rL,"The model class to instantiate is selected based on the "),j8e=n(rL,"CODE",{});var jIt=s(j8e);sTr=r(jIt,"model_type"),jIt.forEach(t),lTr=r(rL,` property of the config object (either
passed as an argument or loaded from `),D8e=n(rL,"CODE",{});var DIt=s(D8e);iTr=r(DIt,"pretrained_model_name_or_path"),DIt.forEach(t),dTr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G8e=n(rL,"CODE",{});var GIt=s(G8e);cTr=r(GIt,"pretrained_model_name_or_path"),GIt.forEach(t),fTr=r(rL,":"),rL.forEach(t),mTr=i(Pa),fn=n(Pa,"UL",{});var tL=s(fn);IM=n(tL,"LI",{});var SGe=s(IM);O8e=n(SGe,"STRONG",{});var OIt=s(O8e);gTr=r(OIt,"deit"),OIt.forEach(t),hTr=r(SGe," \u2014 "),GJ=n(SGe,"A",{href:!0});var VIt=s(GJ);pTr=r(VIt,"DeiTForMaskedImageModeling"),VIt.forEach(t),_Tr=r(SGe," (DeiT model)"),SGe.forEach(t),uTr=i(tL),NM=n(tL,"LI",{});var RGe=s(NM);V8e=n(RGe,"STRONG",{});var XIt=s(V8e);bTr=r(XIt,"swin"),XIt.forEach(t),vTr=r(RGe," \u2014 "),OJ=n(RGe,"A",{href:!0});var zIt=s(OJ);FTr=r(zIt,"SwinForMaskedImageModeling"),zIt.forEach(t),TTr=r(RGe," (Swin Transformer model)"),RGe.forEach(t),MTr=i(tL),qM=n(tL,"LI",{});var PGe=s(qM);X8e=n(PGe,"STRONG",{});var WIt=s(X8e);ETr=r(WIt,"swinv2"),WIt.forEach(t),CTr=r(PGe," \u2014 "),VJ=n(PGe,"A",{href:!0});var QIt=s(VJ);wTr=r(QIt,"Swinv2ForMaskedImageModeling"),QIt.forEach(t),ATr=r(PGe," (Swin Transformer V2 model)"),PGe.forEach(t),LTr=i(tL),jM=n(tL,"LI",{});var BGe=s(jM);z8e=n(BGe,"STRONG",{});var UIt=s(z8e);yTr=r(UIt,"vit"),UIt.forEach(t),xTr=r(BGe," \u2014 "),XJ=n(BGe,"A",{href:!0});var HIt=s(XJ);$Tr=r(HIt,"ViTForMaskedImageModeling"),HIt.forEach(t),kTr=r(BGe," (ViT model)"),BGe.forEach(t),tL.forEach(t),STr=i(Pa),DM=n(Pa,"P",{});var IGe=s(DM);RTr=r(IGe,"The model is set in evaluation mode by default using "),W8e=n(IGe,"CODE",{});var JIt=s(W8e);PTr=r(JIt,"model.eval()"),JIt.forEach(t),BTr=r(IGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q8e=n(IGe,"CODE",{});var YIt=s(Q8e);ITr=r(YIt,"model.train()"),YIt.forEach(t),IGe.forEach(t),NTr=i(Pa),T(GM.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),ZUe=i(f),fc=n(f,"H2",{class:!0});var cYe=s(fc);OM=n(cYe,"A",{id:!0,class:!0,href:!0});var KIt=s(OM);U8e=n(KIt,"SPAN",{});var ZIt=s(U8e);T(Dx.$$.fragment,ZIt),ZIt.forEach(t),KIt.forEach(t),qTr=i(cYe),H8e=n(cYe,"SPAN",{});var eNt=s(H8e);jTr=r(eNt,"AutoModelForObjectDetection"),eNt.forEach(t),cYe.forEach(t),eHe=i(f),er=n(f,"DIV",{class:!0});var Nl=s(er);T(Gx.$$.fragment,Nl),DTr=i(Nl),mc=n(Nl,"P",{});var Pne=s(mc);GTr=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zJ=n(Pne,"A",{href:!0});var oNt=s(zJ);OTr=r(oNt,"from_pretrained()"),oNt.forEach(t),VTr=r(Pne," class method or the "),WJ=n(Pne,"A",{href:!0});var rNt=s(WJ);XTr=r(rNt,"from_config()"),rNt.forEach(t),zTr=r(Pne,` class
method.`),Pne.forEach(t),WTr=i(Nl),Ox=n(Nl,"P",{});var fYe=s(Ox);QTr=r(fYe,"This class cannot be instantiated directly using "),J8e=n(fYe,"CODE",{});var tNt=s(J8e);UTr=r(tNt,"__init__()"),tNt.forEach(t),HTr=r(fYe," (throws an error)."),fYe.forEach(t),JTr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var aL=s(Pt);T(Vx.$$.fragment,aL),YTr=i(aL),Y8e=n(aL,"P",{});var aNt=s(Y8e);KTr=r(aNt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aNt.forEach(t),ZTr=i(aL),gc=n(aL,"P",{});var Bne=s(gc);e8r=r(Bne,`Note:
Loading a model from its configuration file does `),K8e=n(Bne,"STRONG",{});var nNt=s(K8e);o8r=r(nNt,"not"),nNt.forEach(t),r8r=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Bne,"A",{href:!0});var sNt=s(QJ);t8r=r(sNt,"from_pretrained()"),sNt.forEach(t),a8r=r(Bne," to load the model weights."),Bne.forEach(t),n8r=i(aL),T(VM.$$.fragment,aL),aL.forEach(t),s8r=i(Nl),vo=n(Nl,"DIV",{class:!0});var Ba=s(vo);T(Xx.$$.fragment,Ba),l8r=i(Ba),Z8e=n(Ba,"P",{});var lNt=s(Z8e);i8r=r(lNt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lNt.forEach(t),d8r=i(Ba),mn=n(Ba,"P",{});var nL=s(mn);c8r=r(nL,"The model class to instantiate is selected based on the "),eMe=n(nL,"CODE",{});var iNt=s(eMe);f8r=r(iNt,"model_type"),iNt.forEach(t),m8r=r(nL,` property of the config object (either
passed as an argument or loaded from `),oMe=n(nL,"CODE",{});var dNt=s(oMe);g8r=r(dNt,"pretrained_model_name_or_path"),dNt.forEach(t),h8r=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(nL,"CODE",{});var cNt=s(rMe);p8r=r(cNt,"pretrained_model_name_or_path"),cNt.forEach(t),_8r=r(nL,":"),nL.forEach(t),u8r=i(Ba),zx=n(Ba,"UL",{});var mYe=s(zx);XM=n(mYe,"LI",{});var NGe=s(XM);tMe=n(NGe,"STRONG",{});var fNt=s(tMe);b8r=r(fNt,"detr"),fNt.forEach(t),v8r=r(NGe," \u2014 "),UJ=n(NGe,"A",{href:!0});var mNt=s(UJ);F8r=r(mNt,"DetrForObjectDetection"),mNt.forEach(t),T8r=r(NGe," (DETR model)"),NGe.forEach(t),M8r=i(mYe),zM=n(mYe,"LI",{});var qGe=s(zM);aMe=n(qGe,"STRONG",{});var gNt=s(aMe);E8r=r(gNt,"yolos"),gNt.forEach(t),C8r=r(qGe," \u2014 "),HJ=n(qGe,"A",{href:!0});var hNt=s(HJ);w8r=r(hNt,"YolosForObjectDetection"),hNt.forEach(t),A8r=r(qGe," (YOLOS model)"),qGe.forEach(t),mYe.forEach(t),L8r=i(Ba),WM=n(Ba,"P",{});var jGe=s(WM);y8r=r(jGe,"The model is set in evaluation mode by default using "),nMe=n(jGe,"CODE",{});var pNt=s(nMe);x8r=r(pNt,"model.eval()"),pNt.forEach(t),$8r=r(jGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sMe=n(jGe,"CODE",{});var _Nt=s(sMe);k8r=r(_Nt,"model.train()"),_Nt.forEach(t),jGe.forEach(t),S8r=i(Ba),T(QM.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),oHe=i(f),hc=n(f,"H2",{class:!0});var gYe=s(hc);UM=n(gYe,"A",{id:!0,class:!0,href:!0});var uNt=s(UM);lMe=n(uNt,"SPAN",{});var bNt=s(lMe);T(Wx.$$.fragment,bNt),bNt.forEach(t),uNt.forEach(t),R8r=i(gYe),iMe=n(gYe,"SPAN",{});var vNt=s(iMe);P8r=r(vNt,"AutoModelForImageSegmentation"),vNt.forEach(t),gYe.forEach(t),rHe=i(f),or=n(f,"DIV",{class:!0});var ql=s(or);T(Qx.$$.fragment,ql),B8r=i(ql),pc=n(ql,"P",{});var Ine=s(pc);I8r=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),JJ=n(Ine,"A",{href:!0});var FNt=s(JJ);N8r=r(FNt,"from_pretrained()"),FNt.forEach(t),q8r=r(Ine," class method or the "),YJ=n(Ine,"A",{href:!0});var TNt=s(YJ);j8r=r(TNt,"from_config()"),TNt.forEach(t),D8r=r(Ine,` class
method.`),Ine.forEach(t),G8r=i(ql),Ux=n(ql,"P",{});var hYe=s(Ux);O8r=r(hYe,"This class cannot be instantiated directly using "),dMe=n(hYe,"CODE",{});var MNt=s(dMe);V8r=r(MNt,"__init__()"),MNt.forEach(t),X8r=r(hYe," (throws an error)."),hYe.forEach(t),z8r=i(ql),Bt=n(ql,"DIV",{class:!0});var sL=s(Bt);T(Hx.$$.fragment,sL),W8r=i(sL),cMe=n(sL,"P",{});var ENt=s(cMe);Q8r=r(ENt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ENt.forEach(t),U8r=i(sL),_c=n(sL,"P",{});var Nne=s(_c);H8r=r(Nne,`Note:
Loading a model from its configuration file does `),fMe=n(Nne,"STRONG",{});var CNt=s(fMe);J8r=r(CNt,"not"),CNt.forEach(t),Y8r=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(Nne,"A",{href:!0});var wNt=s(KJ);K8r=r(wNt,"from_pretrained()"),wNt.forEach(t),Z8r=r(Nne," to load the model weights."),Nne.forEach(t),eMr=i(sL),T(HM.$$.fragment,sL),sL.forEach(t),oMr=i(ql),Fo=n(ql,"DIV",{class:!0});var Ia=s(Fo);T(Jx.$$.fragment,Ia),rMr=i(Ia),mMe=n(Ia,"P",{});var ANt=s(mMe);tMr=r(ANt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ANt.forEach(t),aMr=i(Ia),gn=n(Ia,"P",{});var lL=s(gn);nMr=r(lL,"The model class to instantiate is selected based on the "),gMe=n(lL,"CODE",{});var LNt=s(gMe);sMr=r(LNt,"model_type"),LNt.forEach(t),lMr=r(lL,` property of the config object (either
passed as an argument or loaded from `),hMe=n(lL,"CODE",{});var yNt=s(hMe);iMr=r(yNt,"pretrained_model_name_or_path"),yNt.forEach(t),dMr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(lL,"CODE",{});var xNt=s(pMe);cMr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),fMr=r(lL,":"),lL.forEach(t),mMr=i(Ia),_Me=n(Ia,"UL",{});var $Nt=s(_Me);JM=n($Nt,"LI",{});var DGe=s(JM);uMe=n(DGe,"STRONG",{});var kNt=s(uMe);gMr=r(kNt,"detr"),kNt.forEach(t),hMr=r(DGe," \u2014 "),ZJ=n(DGe,"A",{href:!0});var SNt=s(ZJ);pMr=r(SNt,"DetrForSegmentation"),SNt.forEach(t),_Mr=r(DGe," (DETR model)"),DGe.forEach(t),$Nt.forEach(t),uMr=i(Ia),YM=n(Ia,"P",{});var GGe=s(YM);bMr=r(GGe,"The model is set in evaluation mode by default using "),bMe=n(GGe,"CODE",{});var RNt=s(bMe);vMr=r(RNt,"model.eval()"),RNt.forEach(t),FMr=r(GGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vMe=n(GGe,"CODE",{});var PNt=s(vMe);TMr=r(PNt,"model.train()"),PNt.forEach(t),GGe.forEach(t),MMr=i(Ia),T(KM.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),tHe=i(f),uc=n(f,"H2",{class:!0});var pYe=s(uc);ZM=n(pYe,"A",{id:!0,class:!0,href:!0});var BNt=s(ZM);FMe=n(BNt,"SPAN",{});var INt=s(FMe);T(Yx.$$.fragment,INt),INt.forEach(t),BNt.forEach(t),EMr=i(pYe),TMe=n(pYe,"SPAN",{});var NNt=s(TMe);CMr=r(NNt,"AutoModelForSemanticSegmentation"),NNt.forEach(t),pYe.forEach(t),aHe=i(f),rr=n(f,"DIV",{class:!0});var jl=s(rr);T(Kx.$$.fragment,jl),wMr=i(jl),bc=n(jl,"P",{});var qne=s(bc);AMr=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),eY=n(qne,"A",{href:!0});var qNt=s(eY);LMr=r(qNt,"from_pretrained()"),qNt.forEach(t),yMr=r(qne," class method or the "),oY=n(qne,"A",{href:!0});var jNt=s(oY);xMr=r(jNt,"from_config()"),jNt.forEach(t),$Mr=r(qne,` class
method.`),qne.forEach(t),kMr=i(jl),Zx=n(jl,"P",{});var _Ye=s(Zx);SMr=r(_Ye,"This class cannot be instantiated directly using "),MMe=n(_Ye,"CODE",{});var DNt=s(MMe);RMr=r(DNt,"__init__()"),DNt.forEach(t),PMr=r(_Ye," (throws an error)."),_Ye.forEach(t),BMr=i(jl),It=n(jl,"DIV",{class:!0});var iL=s(It);T(e$.$$.fragment,iL),IMr=i(iL),EMe=n(iL,"P",{});var GNt=s(EMe);NMr=r(GNt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GNt.forEach(t),qMr=i(iL),vc=n(iL,"P",{});var jne=s(vc);jMr=r(jne,`Note:
Loading a model from its configuration file does `),CMe=n(jne,"STRONG",{});var ONt=s(CMe);DMr=r(ONt,"not"),ONt.forEach(t),GMr=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(jne,"A",{href:!0});var VNt=s(rY);OMr=r(VNt,"from_pretrained()"),VNt.forEach(t),VMr=r(jne," to load the model weights."),jne.forEach(t),XMr=i(iL),T(eE.$$.fragment,iL),iL.forEach(t),zMr=i(jl),To=n(jl,"DIV",{class:!0});var Na=s(To);T(o$.$$.fragment,Na),WMr=i(Na),wMe=n(Na,"P",{});var XNt=s(wMe);QMr=r(XNt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XNt.forEach(t),UMr=i(Na),hn=n(Na,"P",{});var dL=s(hn);HMr=r(dL,"The model class to instantiate is selected based on the "),AMe=n(dL,"CODE",{});var zNt=s(AMe);JMr=r(zNt,"model_type"),zNt.forEach(t),YMr=r(dL,` property of the config object (either
passed as an argument or loaded from `),LMe=n(dL,"CODE",{});var WNt=s(LMe);KMr=r(WNt,"pretrained_model_name_or_path"),WNt.forEach(t),ZMr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=n(dL,"CODE",{});var QNt=s(yMe);eEr=r(QNt,"pretrained_model_name_or_path"),QNt.forEach(t),oEr=r(dL,":"),dL.forEach(t),rEr=i(Na),it=n(Na,"UL",{});var Dl=s(it);oE=n(Dl,"LI",{});var OGe=s(oE);xMe=n(OGe,"STRONG",{});var UNt=s(xMe);tEr=r(UNt,"beit"),UNt.forEach(t),aEr=r(OGe," \u2014 "),tY=n(OGe,"A",{href:!0});var HNt=s(tY);nEr=r(HNt,"BeitForSemanticSegmentation"),HNt.forEach(t),sEr=r(OGe," (BEiT model)"),OGe.forEach(t),lEr=i(Dl),rE=n(Dl,"LI",{});var VGe=s(rE);$Me=n(VGe,"STRONG",{});var JNt=s($Me);iEr=r(JNt,"data2vec-vision"),JNt.forEach(t),dEr=r(VGe," \u2014 "),aY=n(VGe,"A",{href:!0});var YNt=s(aY);cEr=r(YNt,"Data2VecVisionForSemanticSegmentation"),YNt.forEach(t),fEr=r(VGe," (Data2VecVision model)"),VGe.forEach(t),mEr=i(Dl),tE=n(Dl,"LI",{});var XGe=s(tE);kMe=n(XGe,"STRONG",{});var KNt=s(kMe);gEr=r(KNt,"dpt"),KNt.forEach(t),hEr=r(XGe," \u2014 "),nY=n(XGe,"A",{href:!0});var ZNt=s(nY);pEr=r(ZNt,"DPTForSemanticSegmentation"),ZNt.forEach(t),_Er=r(XGe," (DPT model)"),XGe.forEach(t),uEr=i(Dl),aE=n(Dl,"LI",{});var zGe=s(aE);SMe=n(zGe,"STRONG",{});var eqt=s(SMe);bEr=r(eqt,"mobilevit"),eqt.forEach(t),vEr=r(zGe," \u2014 "),sY=n(zGe,"A",{href:!0});var oqt=s(sY);FEr=r(oqt,"MobileViTForSemanticSegmentation"),oqt.forEach(t),TEr=r(zGe," (MobileViT model)"),zGe.forEach(t),MEr=i(Dl),nE=n(Dl,"LI",{});var WGe=s(nE);RMe=n(WGe,"STRONG",{});var rqt=s(RMe);EEr=r(rqt,"segformer"),rqt.forEach(t),CEr=r(WGe," \u2014 "),lY=n(WGe,"A",{href:!0});var tqt=s(lY);wEr=r(tqt,"SegformerForSemanticSegmentation"),tqt.forEach(t),AEr=r(WGe," (SegFormer model)"),WGe.forEach(t),Dl.forEach(t),LEr=i(Na),sE=n(Na,"P",{});var QGe=s(sE);yEr=r(QGe,"The model is set in evaluation mode by default using "),PMe=n(QGe,"CODE",{});var aqt=s(PMe);xEr=r(aqt,"model.eval()"),aqt.forEach(t),$Er=r(QGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BMe=n(QGe,"CODE",{});var nqt=s(BMe);kEr=r(nqt,"model.train()"),nqt.forEach(t),QGe.forEach(t),SEr=i(Na),T(lE.$$.fragment,Na),Na.forEach(t),jl.forEach(t),nHe=i(f),Fc=n(f,"H2",{class:!0});var uYe=s(Fc);iE=n(uYe,"A",{id:!0,class:!0,href:!0});var sqt=s(iE);IMe=n(sqt,"SPAN",{});var lqt=s(IMe);T(r$.$$.fragment,lqt),lqt.forEach(t),sqt.forEach(t),REr=i(uYe),NMe=n(uYe,"SPAN",{});var iqt=s(NMe);PEr=r(iqt,"AutoModelForInstanceSegmentation"),iqt.forEach(t),uYe.forEach(t),sHe=i(f),tr=n(f,"DIV",{class:!0});var Gl=s(tr);T(t$.$$.fragment,Gl),BEr=i(Gl),Tc=n(Gl,"P",{});var Dne=s(Tc);IEr=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iY=n(Dne,"A",{href:!0});var dqt=s(iY);NEr=r(dqt,"from_pretrained()"),dqt.forEach(t),qEr=r(Dne," class method or the "),dY=n(Dne,"A",{href:!0});var cqt=s(dY);jEr=r(cqt,"from_config()"),cqt.forEach(t),DEr=r(Dne,` class
method.`),Dne.forEach(t),GEr=i(Gl),a$=n(Gl,"P",{});var bYe=s(a$);OEr=r(bYe,"This class cannot be instantiated directly using "),qMe=n(bYe,"CODE",{});var fqt=s(qMe);VEr=r(fqt,"__init__()"),fqt.forEach(t),XEr=r(bYe," (throws an error)."),bYe.forEach(t),zEr=i(Gl),Nt=n(Gl,"DIV",{class:!0});var cL=s(Nt);T(n$.$$.fragment,cL),WEr=i(cL),jMe=n(cL,"P",{});var mqt=s(jMe);QEr=r(mqt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mqt.forEach(t),UEr=i(cL),Mc=n(cL,"P",{});var Gne=s(Mc);HEr=r(Gne,`Note:
Loading a model from its configuration file does `),DMe=n(Gne,"STRONG",{});var gqt=s(DMe);JEr=r(gqt,"not"),gqt.forEach(t),YEr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(Gne,"A",{href:!0});var hqt=s(cY);KEr=r(hqt,"from_pretrained()"),hqt.forEach(t),ZEr=r(Gne," to load the model weights."),Gne.forEach(t),e4r=i(cL),T(dE.$$.fragment,cL),cL.forEach(t),o4r=i(Gl),Mo=n(Gl,"DIV",{class:!0});var qa=s(Mo);T(s$.$$.fragment,qa),r4r=i(qa),GMe=n(qa,"P",{});var pqt=s(GMe);t4r=r(pqt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),pqt.forEach(t),a4r=i(qa),pn=n(qa,"P",{});var fL=s(pn);n4r=r(fL,"The model class to instantiate is selected based on the "),OMe=n(fL,"CODE",{});var _qt=s(OMe);s4r=r(_qt,"model_type"),_qt.forEach(t),l4r=r(fL,` property of the config object (either
passed as an argument or loaded from `),VMe=n(fL,"CODE",{});var uqt=s(VMe);i4r=r(uqt,"pretrained_model_name_or_path"),uqt.forEach(t),d4r=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=n(fL,"CODE",{});var bqt=s(XMe);c4r=r(bqt,"pretrained_model_name_or_path"),bqt.forEach(t),f4r=r(fL,":"),fL.forEach(t),m4r=i(qa),zMe=n(qa,"UL",{});var vqt=s(zMe);cE=n(vqt,"LI",{});var UGe=s(cE);WMe=n(UGe,"STRONG",{});var Fqt=s(WMe);g4r=r(Fqt,"maskformer"),Fqt.forEach(t),h4r=r(UGe," \u2014 "),fY=n(UGe,"A",{href:!0});var Tqt=s(fY);p4r=r(Tqt,"MaskFormerForInstanceSegmentation"),Tqt.forEach(t),_4r=r(UGe," (MaskFormer model)"),UGe.forEach(t),vqt.forEach(t),u4r=i(qa),fE=n(qa,"P",{});var HGe=s(fE);b4r=r(HGe,"The model is set in evaluation mode by default using "),QMe=n(HGe,"CODE",{});var Mqt=s(QMe);v4r=r(Mqt,"model.eval()"),Mqt.forEach(t),F4r=r(HGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UMe=n(HGe,"CODE",{});var Eqt=s(UMe);T4r=r(Eqt,"model.train()"),Eqt.forEach(t),HGe.forEach(t),M4r=i(qa),T(mE.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),lHe=i(f),Ec=n(f,"H2",{class:!0});var vYe=s(Ec);gE=n(vYe,"A",{id:!0,class:!0,href:!0});var Cqt=s(gE);HMe=n(Cqt,"SPAN",{});var wqt=s(HMe);T(l$.$$.fragment,wqt),wqt.forEach(t),Cqt.forEach(t),E4r=i(vYe),JMe=n(vYe,"SPAN",{});var Aqt=s(JMe);C4r=r(Aqt,"TFAutoModel"),Aqt.forEach(t),vYe.forEach(t),iHe=i(f),ar=n(f,"DIV",{class:!0});var Ol=s(ar);T(i$.$$.fragment,Ol),w4r=i(Ol),Cc=n(Ol,"P",{});var One=s(Cc);A4r=r(One,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mY=n(One,"A",{href:!0});var Lqt=s(mY);L4r=r(Lqt,"from_pretrained()"),Lqt.forEach(t),y4r=r(One," class method or the "),gY=n(One,"A",{href:!0});var yqt=s(gY);x4r=r(yqt,"from_config()"),yqt.forEach(t),$4r=r(One,` class
method.`),One.forEach(t),k4r=i(Ol),d$=n(Ol,"P",{});var FYe=s(d$);S4r=r(FYe,"This class cannot be instantiated directly using "),YMe=n(FYe,"CODE",{});var xqt=s(YMe);R4r=r(xqt,"__init__()"),xqt.forEach(t),P4r=r(FYe," (throws an error)."),FYe.forEach(t),B4r=i(Ol),qt=n(Ol,"DIV",{class:!0});var mL=s(qt);T(c$.$$.fragment,mL),I4r=i(mL),KMe=n(mL,"P",{});var $qt=s(KMe);N4r=r($qt,"Instantiates one of the base model classes of the library from a configuration."),$qt.forEach(t),q4r=i(mL),wc=n(mL,"P",{});var Vne=s(wc);j4r=r(Vne,`Note:
Loading a model from its configuration file does `),ZMe=n(Vne,"STRONG",{});var kqt=s(ZMe);D4r=r(kqt,"not"),kqt.forEach(t),G4r=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(Vne,"A",{href:!0});var Sqt=s(hY);O4r=r(Sqt,"from_pretrained()"),Sqt.forEach(t),V4r=r(Vne," to load the model weights."),Vne.forEach(t),X4r=i(mL),T(hE.$$.fragment,mL),mL.forEach(t),z4r=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(f$.$$.fragment,Vl),W4r=i(Vl),eEe=n(Vl,"P",{});var Rqt=s(eEe);Q4r=r(Rqt,"Instantiate one of the base model classes of the library from a pretrained model."),Rqt.forEach(t),U4r=i(Vl),_n=n(Vl,"P",{});var gL=s(_n);H4r=r(gL,"The model class to instantiate is selected based on the "),oEe=n(gL,"CODE",{});var Pqt=s(oEe);J4r=r(Pqt,"model_type"),Pqt.forEach(t),Y4r=r(gL,` property of the config object (either
passed as an argument or loaded from `),rEe=n(gL,"CODE",{});var Bqt=s(rEe);K4r=r(Bqt,"pretrained_model_name_or_path"),Bqt.forEach(t),Z4r=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(gL,"CODE",{});var Iqt=s(tEe);eCr=r(Iqt,"pretrained_model_name_or_path"),Iqt.forEach(t),oCr=r(gL,":"),gL.forEach(t),rCr=i(Vl),B=n(Vl,"UL",{});var j=s(B);pE=n(j,"LI",{});var JGe=s(pE);aEe=n(JGe,"STRONG",{});var Nqt=s(aEe);tCr=r(Nqt,"albert"),Nqt.forEach(t),aCr=r(JGe," \u2014 "),pY=n(JGe,"A",{href:!0});var qqt=s(pY);nCr=r(qqt,"TFAlbertModel"),qqt.forEach(t),sCr=r(JGe," (ALBERT model)"),JGe.forEach(t),lCr=i(j),_E=n(j,"LI",{});var YGe=s(_E);nEe=n(YGe,"STRONG",{});var jqt=s(nEe);iCr=r(jqt,"bart"),jqt.forEach(t),dCr=r(YGe," \u2014 "),_Y=n(YGe,"A",{href:!0});var Dqt=s(_Y);cCr=r(Dqt,"TFBartModel"),Dqt.forEach(t),fCr=r(YGe," (BART model)"),YGe.forEach(t),mCr=i(j),uE=n(j,"LI",{});var KGe=s(uE);sEe=n(KGe,"STRONG",{});var Gqt=s(sEe);gCr=r(Gqt,"bert"),Gqt.forEach(t),hCr=r(KGe," \u2014 "),uY=n(KGe,"A",{href:!0});var Oqt=s(uY);pCr=r(Oqt,"TFBertModel"),Oqt.forEach(t),_Cr=r(KGe," (BERT model)"),KGe.forEach(t),uCr=i(j),bE=n(j,"LI",{});var ZGe=s(bE);lEe=n(ZGe,"STRONG",{});var Vqt=s(lEe);bCr=r(Vqt,"blenderbot"),Vqt.forEach(t),vCr=r(ZGe," \u2014 "),bY=n(ZGe,"A",{href:!0});var Xqt=s(bY);FCr=r(Xqt,"TFBlenderbotModel"),Xqt.forEach(t),TCr=r(ZGe," (Blenderbot model)"),ZGe.forEach(t),MCr=i(j),vE=n(j,"LI",{});var eOe=s(vE);iEe=n(eOe,"STRONG",{});var zqt=s(iEe);ECr=r(zqt,"blenderbot-small"),zqt.forEach(t),CCr=r(eOe," \u2014 "),vY=n(eOe,"A",{href:!0});var Wqt=s(vY);wCr=r(Wqt,"TFBlenderbotSmallModel"),Wqt.forEach(t),ACr=r(eOe," (BlenderbotSmall model)"),eOe.forEach(t),LCr=i(j),FE=n(j,"LI",{});var oOe=s(FE);dEe=n(oOe,"STRONG",{});var Qqt=s(dEe);yCr=r(Qqt,"camembert"),Qqt.forEach(t),xCr=r(oOe," \u2014 "),FY=n(oOe,"A",{href:!0});var Uqt=s(FY);$Cr=r(Uqt,"TFCamembertModel"),Uqt.forEach(t),kCr=r(oOe," (CamemBERT model)"),oOe.forEach(t),SCr=i(j),TE=n(j,"LI",{});var rOe=s(TE);cEe=n(rOe,"STRONG",{});var Hqt=s(cEe);RCr=r(Hqt,"clip"),Hqt.forEach(t),PCr=r(rOe," \u2014 "),TY=n(rOe,"A",{href:!0});var Jqt=s(TY);BCr=r(Jqt,"TFCLIPModel"),Jqt.forEach(t),ICr=r(rOe," (CLIP model)"),rOe.forEach(t),NCr=i(j),ME=n(j,"LI",{});var tOe=s(ME);fEe=n(tOe,"STRONG",{});var Yqt=s(fEe);qCr=r(Yqt,"convbert"),Yqt.forEach(t),jCr=r(tOe," \u2014 "),MY=n(tOe,"A",{href:!0});var Kqt=s(MY);DCr=r(Kqt,"TFConvBertModel"),Kqt.forEach(t),GCr=r(tOe," (ConvBERT model)"),tOe.forEach(t),OCr=i(j),EE=n(j,"LI",{});var aOe=s(EE);mEe=n(aOe,"STRONG",{});var Zqt=s(mEe);VCr=r(Zqt,"convnext"),Zqt.forEach(t),XCr=r(aOe," \u2014 "),EY=n(aOe,"A",{href:!0});var ejt=s(EY);zCr=r(ejt,"TFConvNextModel"),ejt.forEach(t),WCr=r(aOe," (ConvNeXT model)"),aOe.forEach(t),QCr=i(j),CE=n(j,"LI",{});var nOe=s(CE);gEe=n(nOe,"STRONG",{});var ojt=s(gEe);UCr=r(ojt,"ctrl"),ojt.forEach(t),HCr=r(nOe," \u2014 "),CY=n(nOe,"A",{href:!0});var rjt=s(CY);JCr=r(rjt,"TFCTRLModel"),rjt.forEach(t),YCr=r(nOe," (CTRL model)"),nOe.forEach(t),KCr=i(j),wE=n(j,"LI",{});var sOe=s(wE);hEe=n(sOe,"STRONG",{});var tjt=s(hEe);ZCr=r(tjt,"data2vec-vision"),tjt.forEach(t),e3r=r(sOe," \u2014 "),wY=n(sOe,"A",{href:!0});var ajt=s(wY);o3r=r(ajt,"TFData2VecVisionModel"),ajt.forEach(t),r3r=r(sOe," (Data2VecVision model)"),sOe.forEach(t),t3r=i(j),AE=n(j,"LI",{});var lOe=s(AE);pEe=n(lOe,"STRONG",{});var njt=s(pEe);a3r=r(njt,"deberta"),njt.forEach(t),n3r=r(lOe," \u2014 "),AY=n(lOe,"A",{href:!0});var sjt=s(AY);s3r=r(sjt,"TFDebertaModel"),sjt.forEach(t),l3r=r(lOe," (DeBERTa model)"),lOe.forEach(t),i3r=i(j),LE=n(j,"LI",{});var iOe=s(LE);_Ee=n(iOe,"STRONG",{});var ljt=s(_Ee);d3r=r(ljt,"deberta-v2"),ljt.forEach(t),c3r=r(iOe," \u2014 "),LY=n(iOe,"A",{href:!0});var ijt=s(LY);f3r=r(ijt,"TFDebertaV2Model"),ijt.forEach(t),m3r=r(iOe," (DeBERTa-v2 model)"),iOe.forEach(t),g3r=i(j),yE=n(j,"LI",{});var dOe=s(yE);uEe=n(dOe,"STRONG",{});var djt=s(uEe);h3r=r(djt,"deit"),djt.forEach(t),p3r=r(dOe," \u2014 "),yY=n(dOe,"A",{href:!0});var cjt=s(yY);_3r=r(cjt,"TFDeiTModel"),cjt.forEach(t),u3r=r(dOe," (DeiT model)"),dOe.forEach(t),b3r=i(j),xE=n(j,"LI",{});var cOe=s(xE);bEe=n(cOe,"STRONG",{});var fjt=s(bEe);v3r=r(fjt,"distilbert"),fjt.forEach(t),F3r=r(cOe," \u2014 "),xY=n(cOe,"A",{href:!0});var mjt=s(xY);T3r=r(mjt,"TFDistilBertModel"),mjt.forEach(t),M3r=r(cOe," (DistilBERT model)"),cOe.forEach(t),E3r=i(j),$E=n(j,"LI",{});var fOe=s($E);vEe=n(fOe,"STRONG",{});var gjt=s(vEe);C3r=r(gjt,"dpr"),gjt.forEach(t),w3r=r(fOe," \u2014 "),$Y=n(fOe,"A",{href:!0});var hjt=s($Y);A3r=r(hjt,"TFDPRQuestionEncoder"),hjt.forEach(t),L3r=r(fOe," (DPR model)"),fOe.forEach(t),y3r=i(j),kE=n(j,"LI",{});var mOe=s(kE);FEe=n(mOe,"STRONG",{});var pjt=s(FEe);x3r=r(pjt,"electra"),pjt.forEach(t),$3r=r(mOe," \u2014 "),kY=n(mOe,"A",{href:!0});var _jt=s(kY);k3r=r(_jt,"TFElectraModel"),_jt.forEach(t),S3r=r(mOe," (ELECTRA model)"),mOe.forEach(t),R3r=i(j),SE=n(j,"LI",{});var gOe=s(SE);TEe=n(gOe,"STRONG",{});var ujt=s(TEe);P3r=r(ujt,"flaubert"),ujt.forEach(t),B3r=r(gOe," \u2014 "),SY=n(gOe,"A",{href:!0});var bjt=s(SY);I3r=r(bjt,"TFFlaubertModel"),bjt.forEach(t),N3r=r(gOe," (FlauBERT model)"),gOe.forEach(t),q3r=i(j),il=n(j,"LI",{});var aP=s(il);MEe=n(aP,"STRONG",{});var vjt=s(MEe);j3r=r(vjt,"funnel"),vjt.forEach(t),D3r=r(aP," \u2014 "),RY=n(aP,"A",{href:!0});var Fjt=s(RY);G3r=r(Fjt,"TFFunnelModel"),Fjt.forEach(t),O3r=r(aP," or "),PY=n(aP,"A",{href:!0});var Tjt=s(PY);V3r=r(Tjt,"TFFunnelBaseModel"),Tjt.forEach(t),X3r=r(aP," (Funnel Transformer model)"),aP.forEach(t),z3r=i(j),RE=n(j,"LI",{});var hOe=s(RE);EEe=n(hOe,"STRONG",{});var Mjt=s(EEe);W3r=r(Mjt,"gpt2"),Mjt.forEach(t),Q3r=r(hOe," \u2014 "),BY=n(hOe,"A",{href:!0});var Ejt=s(BY);U3r=r(Ejt,"TFGPT2Model"),Ejt.forEach(t),H3r=r(hOe," (OpenAI GPT-2 model)"),hOe.forEach(t),J3r=i(j),PE=n(j,"LI",{});var pOe=s(PE);CEe=n(pOe,"STRONG",{});var Cjt=s(CEe);Y3r=r(Cjt,"gptj"),Cjt.forEach(t),K3r=r(pOe," \u2014 "),IY=n(pOe,"A",{href:!0});var wjt=s(IY);Z3r=r(wjt,"TFGPTJModel"),wjt.forEach(t),e5r=r(pOe," (GPT-J model)"),pOe.forEach(t),o5r=i(j),BE=n(j,"LI",{});var _Oe=s(BE);wEe=n(_Oe,"STRONG",{});var Ajt=s(wEe);r5r=r(Ajt,"groupvit"),Ajt.forEach(t),t5r=r(_Oe," \u2014 "),NY=n(_Oe,"A",{href:!0});var Ljt=s(NY);a5r=r(Ljt,"TFGroupViTModel"),Ljt.forEach(t),n5r=r(_Oe," (GroupViT model)"),_Oe.forEach(t),s5r=i(j),IE=n(j,"LI",{});var uOe=s(IE);AEe=n(uOe,"STRONG",{});var yjt=s(AEe);l5r=r(yjt,"hubert"),yjt.forEach(t),i5r=r(uOe," \u2014 "),qY=n(uOe,"A",{href:!0});var xjt=s(qY);d5r=r(xjt,"TFHubertModel"),xjt.forEach(t),c5r=r(uOe," (Hubert model)"),uOe.forEach(t),f5r=i(j),NE=n(j,"LI",{});var bOe=s(NE);LEe=n(bOe,"STRONG",{});var $jt=s(LEe);m5r=r($jt,"layoutlm"),$jt.forEach(t),g5r=r(bOe," \u2014 "),jY=n(bOe,"A",{href:!0});var kjt=s(jY);h5r=r(kjt,"TFLayoutLMModel"),kjt.forEach(t),p5r=r(bOe," (LayoutLM model)"),bOe.forEach(t),_5r=i(j),qE=n(j,"LI",{});var vOe=s(qE);yEe=n(vOe,"STRONG",{});var Sjt=s(yEe);u5r=r(Sjt,"led"),Sjt.forEach(t),b5r=r(vOe," \u2014 "),DY=n(vOe,"A",{href:!0});var Rjt=s(DY);v5r=r(Rjt,"TFLEDModel"),Rjt.forEach(t),F5r=r(vOe," (LED model)"),vOe.forEach(t),T5r=i(j),jE=n(j,"LI",{});var FOe=s(jE);xEe=n(FOe,"STRONG",{});var Pjt=s(xEe);M5r=r(Pjt,"longformer"),Pjt.forEach(t),E5r=r(FOe," \u2014 "),GY=n(FOe,"A",{href:!0});var Bjt=s(GY);C5r=r(Bjt,"TFLongformerModel"),Bjt.forEach(t),w5r=r(FOe," (Longformer model)"),FOe.forEach(t),A5r=i(j),DE=n(j,"LI",{});var TOe=s(DE);$Ee=n(TOe,"STRONG",{});var Ijt=s($Ee);L5r=r(Ijt,"lxmert"),Ijt.forEach(t),y5r=r(TOe," \u2014 "),OY=n(TOe,"A",{href:!0});var Njt=s(OY);x5r=r(Njt,"TFLxmertModel"),Njt.forEach(t),$5r=r(TOe," (LXMERT model)"),TOe.forEach(t),k5r=i(j),GE=n(j,"LI",{});var MOe=s(GE);kEe=n(MOe,"STRONG",{});var qjt=s(kEe);S5r=r(qjt,"marian"),qjt.forEach(t),R5r=r(MOe," \u2014 "),VY=n(MOe,"A",{href:!0});var jjt=s(VY);P5r=r(jjt,"TFMarianModel"),jjt.forEach(t),B5r=r(MOe," (Marian model)"),MOe.forEach(t),I5r=i(j),OE=n(j,"LI",{});var EOe=s(OE);SEe=n(EOe,"STRONG",{});var Djt=s(SEe);N5r=r(Djt,"mbart"),Djt.forEach(t),q5r=r(EOe," \u2014 "),XY=n(EOe,"A",{href:!0});var Gjt=s(XY);j5r=r(Gjt,"TFMBartModel"),Gjt.forEach(t),D5r=r(EOe," (mBART model)"),EOe.forEach(t),G5r=i(j),VE=n(j,"LI",{});var COe=s(VE);REe=n(COe,"STRONG",{});var Ojt=s(REe);O5r=r(Ojt,"mobilebert"),Ojt.forEach(t),V5r=r(COe," \u2014 "),zY=n(COe,"A",{href:!0});var Vjt=s(zY);X5r=r(Vjt,"TFMobileBertModel"),Vjt.forEach(t),z5r=r(COe," (MobileBERT model)"),COe.forEach(t),W5r=i(j),XE=n(j,"LI",{});var wOe=s(XE);PEe=n(wOe,"STRONG",{});var Xjt=s(PEe);Q5r=r(Xjt,"mpnet"),Xjt.forEach(t),U5r=r(wOe," \u2014 "),WY=n(wOe,"A",{href:!0});var zjt=s(WY);H5r=r(zjt,"TFMPNetModel"),zjt.forEach(t),J5r=r(wOe," (MPNet model)"),wOe.forEach(t),Y5r=i(j),zE=n(j,"LI",{});var AOe=s(zE);BEe=n(AOe,"STRONG",{});var Wjt=s(BEe);K5r=r(Wjt,"mt5"),Wjt.forEach(t),Z5r=r(AOe," \u2014 "),QY=n(AOe,"A",{href:!0});var Qjt=s(QY);ewr=r(Qjt,"TFMT5Model"),Qjt.forEach(t),owr=r(AOe," (MT5 model)"),AOe.forEach(t),rwr=i(j),WE=n(j,"LI",{});var LOe=s(WE);IEe=n(LOe,"STRONG",{});var Ujt=s(IEe);twr=r(Ujt,"openai-gpt"),Ujt.forEach(t),awr=r(LOe," \u2014 "),UY=n(LOe,"A",{href:!0});var Hjt=s(UY);nwr=r(Hjt,"TFOpenAIGPTModel"),Hjt.forEach(t),swr=r(LOe," (OpenAI GPT model)"),LOe.forEach(t),lwr=i(j),QE=n(j,"LI",{});var yOe=s(QE);NEe=n(yOe,"STRONG",{});var Jjt=s(NEe);iwr=r(Jjt,"opt"),Jjt.forEach(t),dwr=r(yOe," \u2014 "),HY=n(yOe,"A",{href:!0});var Yjt=s(HY);cwr=r(Yjt,"TFOPTModel"),Yjt.forEach(t),fwr=r(yOe," (OPT model)"),yOe.forEach(t),mwr=i(j),UE=n(j,"LI",{});var xOe=s(UE);qEe=n(xOe,"STRONG",{});var Kjt=s(qEe);gwr=r(Kjt,"pegasus"),Kjt.forEach(t),hwr=r(xOe," \u2014 "),JY=n(xOe,"A",{href:!0});var Zjt=s(JY);pwr=r(Zjt,"TFPegasusModel"),Zjt.forEach(t),_wr=r(xOe," (Pegasus model)"),xOe.forEach(t),uwr=i(j),HE=n(j,"LI",{});var $Oe=s(HE);jEe=n($Oe,"STRONG",{});var eDt=s(jEe);bwr=r(eDt,"regnet"),eDt.forEach(t),vwr=r($Oe," \u2014 "),YY=n($Oe,"A",{href:!0});var oDt=s(YY);Fwr=r(oDt,"TFRegNetModel"),oDt.forEach(t),Twr=r($Oe," (RegNet model)"),$Oe.forEach(t),Mwr=i(j),JE=n(j,"LI",{});var kOe=s(JE);DEe=n(kOe,"STRONG",{});var rDt=s(DEe);Ewr=r(rDt,"rembert"),rDt.forEach(t),Cwr=r(kOe," \u2014 "),KY=n(kOe,"A",{href:!0});var tDt=s(KY);wwr=r(tDt,"TFRemBertModel"),tDt.forEach(t),Awr=r(kOe," (RemBERT model)"),kOe.forEach(t),Lwr=i(j),YE=n(j,"LI",{});var SOe=s(YE);GEe=n(SOe,"STRONG",{});var aDt=s(GEe);ywr=r(aDt,"resnet"),aDt.forEach(t),xwr=r(SOe," \u2014 "),ZY=n(SOe,"A",{href:!0});var nDt=s(ZY);$wr=r(nDt,"TFResNetModel"),nDt.forEach(t),kwr=r(SOe," (ResNet model)"),SOe.forEach(t),Swr=i(j),KE=n(j,"LI",{});var ROe=s(KE);OEe=n(ROe,"STRONG",{});var sDt=s(OEe);Rwr=r(sDt,"roberta"),sDt.forEach(t),Pwr=r(ROe," \u2014 "),eK=n(ROe,"A",{href:!0});var lDt=s(eK);Bwr=r(lDt,"TFRobertaModel"),lDt.forEach(t),Iwr=r(ROe," (RoBERTa model)"),ROe.forEach(t),Nwr=i(j),ZE=n(j,"LI",{});var POe=s(ZE);VEe=n(POe,"STRONG",{});var iDt=s(VEe);qwr=r(iDt,"roformer"),iDt.forEach(t),jwr=r(POe," \u2014 "),oK=n(POe,"A",{href:!0});var dDt=s(oK);Dwr=r(dDt,"TFRoFormerModel"),dDt.forEach(t),Gwr=r(POe," (RoFormer model)"),POe.forEach(t),Owr=i(j),e4=n(j,"LI",{});var BOe=s(e4);XEe=n(BOe,"STRONG",{});var cDt=s(XEe);Vwr=r(cDt,"segformer"),cDt.forEach(t),Xwr=r(BOe," \u2014 "),rK=n(BOe,"A",{href:!0});var fDt=s(rK);zwr=r(fDt,"TFSegformerModel"),fDt.forEach(t),Wwr=r(BOe," (SegFormer model)"),BOe.forEach(t),Qwr=i(j),o4=n(j,"LI",{});var IOe=s(o4);zEe=n(IOe,"STRONG",{});var mDt=s(zEe);Uwr=r(mDt,"speech_to_text"),mDt.forEach(t),Hwr=r(IOe," \u2014 "),tK=n(IOe,"A",{href:!0});var gDt=s(tK);Jwr=r(gDt,"TFSpeech2TextModel"),gDt.forEach(t),Ywr=r(IOe," (Speech2Text model)"),IOe.forEach(t),Kwr=i(j),r4=n(j,"LI",{});var NOe=s(r4);WEe=n(NOe,"STRONG",{});var hDt=s(WEe);Zwr=r(hDt,"swin"),hDt.forEach(t),e6r=r(NOe," \u2014 "),aK=n(NOe,"A",{href:!0});var pDt=s(aK);o6r=r(pDt,"TFSwinModel"),pDt.forEach(t),r6r=r(NOe," (Swin Transformer model)"),NOe.forEach(t),t6r=i(j),t4=n(j,"LI",{});var qOe=s(t4);QEe=n(qOe,"STRONG",{});var _Dt=s(QEe);a6r=r(_Dt,"t5"),_Dt.forEach(t),n6r=r(qOe," \u2014 "),nK=n(qOe,"A",{href:!0});var uDt=s(nK);s6r=r(uDt,"TFT5Model"),uDt.forEach(t),l6r=r(qOe," (T5 model)"),qOe.forEach(t),i6r=i(j),a4=n(j,"LI",{});var jOe=s(a4);UEe=n(jOe,"STRONG",{});var bDt=s(UEe);d6r=r(bDt,"tapas"),bDt.forEach(t),c6r=r(jOe," \u2014 "),sK=n(jOe,"A",{href:!0});var vDt=s(sK);f6r=r(vDt,"TFTapasModel"),vDt.forEach(t),m6r=r(jOe," (TAPAS model)"),jOe.forEach(t),g6r=i(j),n4=n(j,"LI",{});var DOe=s(n4);HEe=n(DOe,"STRONG",{});var FDt=s(HEe);h6r=r(FDt,"transfo-xl"),FDt.forEach(t),p6r=r(DOe," \u2014 "),lK=n(DOe,"A",{href:!0});var TDt=s(lK);_6r=r(TDt,"TFTransfoXLModel"),TDt.forEach(t),u6r=r(DOe," (Transformer-XL model)"),DOe.forEach(t),b6r=i(j),s4=n(j,"LI",{});var GOe=s(s4);JEe=n(GOe,"STRONG",{});var MDt=s(JEe);v6r=r(MDt,"vit"),MDt.forEach(t),F6r=r(GOe," \u2014 "),iK=n(GOe,"A",{href:!0});var EDt=s(iK);T6r=r(EDt,"TFViTModel"),EDt.forEach(t),M6r=r(GOe," (ViT model)"),GOe.forEach(t),E6r=i(j),l4=n(j,"LI",{});var OOe=s(l4);YEe=n(OOe,"STRONG",{});var CDt=s(YEe);C6r=r(CDt,"vit_mae"),CDt.forEach(t),w6r=r(OOe," \u2014 "),dK=n(OOe,"A",{href:!0});var wDt=s(dK);A6r=r(wDt,"TFViTMAEModel"),wDt.forEach(t),L6r=r(OOe," (ViTMAE model)"),OOe.forEach(t),y6r=i(j),i4=n(j,"LI",{});var VOe=s(i4);KEe=n(VOe,"STRONG",{});var ADt=s(KEe);x6r=r(ADt,"wav2vec2"),ADt.forEach(t),$6r=r(VOe," \u2014 "),cK=n(VOe,"A",{href:!0});var LDt=s(cK);k6r=r(LDt,"TFWav2Vec2Model"),LDt.forEach(t),S6r=r(VOe," (Wav2Vec2 model)"),VOe.forEach(t),R6r=i(j),d4=n(j,"LI",{});var XOe=s(d4);ZEe=n(XOe,"STRONG",{});var yDt=s(ZEe);P6r=r(yDt,"xglm"),yDt.forEach(t),B6r=r(XOe," \u2014 "),fK=n(XOe,"A",{href:!0});var xDt=s(fK);I6r=r(xDt,"TFXGLMModel"),xDt.forEach(t),N6r=r(XOe," (XGLM model)"),XOe.forEach(t),q6r=i(j),c4=n(j,"LI",{});var zOe=s(c4);e4e=n(zOe,"STRONG",{});var $Dt=s(e4e);j6r=r($Dt,"xlm"),$Dt.forEach(t),D6r=r(zOe," \u2014 "),mK=n(zOe,"A",{href:!0});var kDt=s(mK);G6r=r(kDt,"TFXLMModel"),kDt.forEach(t),O6r=r(zOe," (XLM model)"),zOe.forEach(t),V6r=i(j),f4=n(j,"LI",{});var WOe=s(f4);o4e=n(WOe,"STRONG",{});var SDt=s(o4e);X6r=r(SDt,"xlm-roberta"),SDt.forEach(t),z6r=r(WOe," \u2014 "),gK=n(WOe,"A",{href:!0});var RDt=s(gK);W6r=r(RDt,"TFXLMRobertaModel"),RDt.forEach(t),Q6r=r(WOe," (XLM-RoBERTa model)"),WOe.forEach(t),U6r=i(j),m4=n(j,"LI",{});var QOe=s(m4);r4e=n(QOe,"STRONG",{});var PDt=s(r4e);H6r=r(PDt,"xlnet"),PDt.forEach(t),J6r=r(QOe," \u2014 "),hK=n(QOe,"A",{href:!0});var BDt=s(hK);Y6r=r(BDt,"TFXLNetModel"),BDt.forEach(t),K6r=r(QOe," (XLNet model)"),QOe.forEach(t),j.forEach(t),Z6r=i(Vl),T(g4.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),dHe=i(f),Ac=n(f,"H2",{class:!0});var TYe=s(Ac);h4=n(TYe,"A",{id:!0,class:!0,href:!0});var IDt=s(h4);t4e=n(IDt,"SPAN",{});var NDt=s(t4e);T(m$.$$.fragment,NDt),NDt.forEach(t),IDt.forEach(t),eAr=i(TYe),a4e=n(TYe,"SPAN",{});var qDt=s(a4e);oAr=r(qDt,"TFAutoModelForPreTraining"),qDt.forEach(t),TYe.forEach(t),cHe=i(f),nr=n(f,"DIV",{class:!0});var Xl=s(nr);T(g$.$$.fragment,Xl),rAr=i(Xl),Lc=n(Xl,"P",{});var Xne=s(Lc);tAr=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pK=n(Xne,"A",{href:!0});var jDt=s(pK);aAr=r(jDt,"from_pretrained()"),jDt.forEach(t),nAr=r(Xne," class method or the "),_K=n(Xne,"A",{href:!0});var DDt=s(_K);sAr=r(DDt,"from_config()"),DDt.forEach(t),lAr=r(Xne,` class
method.`),Xne.forEach(t),iAr=i(Xl),h$=n(Xl,"P",{});var MYe=s(h$);dAr=r(MYe,"This class cannot be instantiated directly using "),n4e=n(MYe,"CODE",{});var GDt=s(n4e);cAr=r(GDt,"__init__()"),GDt.forEach(t),fAr=r(MYe," (throws an error)."),MYe.forEach(t),mAr=i(Xl),jt=n(Xl,"DIV",{class:!0});var hL=s(jt);T(p$.$$.fragment,hL),gAr=i(hL),s4e=n(hL,"P",{});var ODt=s(s4e);hAr=r(ODt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ODt.forEach(t),pAr=i(hL),yc=n(hL,"P",{});var zne=s(yc);_Ar=r(zne,`Note:
Loading a model from its configuration file does `),l4e=n(zne,"STRONG",{});var VDt=s(l4e);uAr=r(VDt,"not"),VDt.forEach(t),bAr=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(zne,"A",{href:!0});var XDt=s(uK);vAr=r(XDt,"from_pretrained()"),XDt.forEach(t),FAr=r(zne," to load the model weights."),zne.forEach(t),TAr=i(hL),T(p4.$$.fragment,hL),hL.forEach(t),MAr=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(_$.$$.fragment,zl),EAr=i(zl),i4e=n(zl,"P",{});var zDt=s(i4e);CAr=r(zDt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zDt.forEach(t),wAr=i(zl),un=n(zl,"P",{});var pL=s(un);AAr=r(pL,"The model class to instantiate is selected based on the "),d4e=n(pL,"CODE",{});var WDt=s(d4e);LAr=r(WDt,"model_type"),WDt.forEach(t),yAr=r(pL,` property of the config object (either
passed as an argument or loaded from `),c4e=n(pL,"CODE",{});var QDt=s(c4e);xAr=r(QDt,"pretrained_model_name_or_path"),QDt.forEach(t),$Ar=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(pL,"CODE",{});var UDt=s(f4e);kAr=r(UDt,"pretrained_model_name_or_path"),UDt.forEach(t),SAr=r(pL,":"),pL.forEach(t),RAr=i(zl),se=n(zl,"UL",{});var le=s(se);_4=n(le,"LI",{});var UOe=s(_4);m4e=n(UOe,"STRONG",{});var HDt=s(m4e);PAr=r(HDt,"albert"),HDt.forEach(t),BAr=r(UOe," \u2014 "),bK=n(UOe,"A",{href:!0});var JDt=s(bK);IAr=r(JDt,"TFAlbertForPreTraining"),JDt.forEach(t),NAr=r(UOe," (ALBERT model)"),UOe.forEach(t),qAr=i(le),u4=n(le,"LI",{});var HOe=s(u4);g4e=n(HOe,"STRONG",{});var YDt=s(g4e);jAr=r(YDt,"bart"),YDt.forEach(t),DAr=r(HOe," \u2014 "),vK=n(HOe,"A",{href:!0});var KDt=s(vK);GAr=r(KDt,"TFBartForConditionalGeneration"),KDt.forEach(t),OAr=r(HOe," (BART model)"),HOe.forEach(t),VAr=i(le),b4=n(le,"LI",{});var JOe=s(b4);h4e=n(JOe,"STRONG",{});var ZDt=s(h4e);XAr=r(ZDt,"bert"),ZDt.forEach(t),zAr=r(JOe," \u2014 "),FK=n(JOe,"A",{href:!0});var eGt=s(FK);WAr=r(eGt,"TFBertForPreTraining"),eGt.forEach(t),QAr=r(JOe," (BERT model)"),JOe.forEach(t),UAr=i(le),v4=n(le,"LI",{});var YOe=s(v4);p4e=n(YOe,"STRONG",{});var oGt=s(p4e);HAr=r(oGt,"camembert"),oGt.forEach(t),JAr=r(YOe," \u2014 "),TK=n(YOe,"A",{href:!0});var rGt=s(TK);YAr=r(rGt,"TFCamembertForMaskedLM"),rGt.forEach(t),KAr=r(YOe," (CamemBERT model)"),YOe.forEach(t),ZAr=i(le),F4=n(le,"LI",{});var KOe=s(F4);_4e=n(KOe,"STRONG",{});var tGt=s(_4e);e7r=r(tGt,"ctrl"),tGt.forEach(t),o7r=r(KOe," \u2014 "),MK=n(KOe,"A",{href:!0});var aGt=s(MK);r7r=r(aGt,"TFCTRLLMHeadModel"),aGt.forEach(t),t7r=r(KOe," (CTRL model)"),KOe.forEach(t),a7r=i(le),T4=n(le,"LI",{});var ZOe=s(T4);u4e=n(ZOe,"STRONG",{});var nGt=s(u4e);n7r=r(nGt,"distilbert"),nGt.forEach(t),s7r=r(ZOe," \u2014 "),EK=n(ZOe,"A",{href:!0});var sGt=s(EK);l7r=r(sGt,"TFDistilBertForMaskedLM"),sGt.forEach(t),i7r=r(ZOe," (DistilBERT model)"),ZOe.forEach(t),d7r=i(le),M4=n(le,"LI",{});var eVe=s(M4);b4e=n(eVe,"STRONG",{});var lGt=s(b4e);c7r=r(lGt,"electra"),lGt.forEach(t),f7r=r(eVe," \u2014 "),CK=n(eVe,"A",{href:!0});var iGt=s(CK);m7r=r(iGt,"TFElectraForPreTraining"),iGt.forEach(t),g7r=r(eVe," (ELECTRA model)"),eVe.forEach(t),h7r=i(le),E4=n(le,"LI",{});var oVe=s(E4);v4e=n(oVe,"STRONG",{});var dGt=s(v4e);p7r=r(dGt,"flaubert"),dGt.forEach(t),_7r=r(oVe," \u2014 "),wK=n(oVe,"A",{href:!0});var cGt=s(wK);u7r=r(cGt,"TFFlaubertWithLMHeadModel"),cGt.forEach(t),b7r=r(oVe," (FlauBERT model)"),oVe.forEach(t),v7r=i(le),C4=n(le,"LI",{});var rVe=s(C4);F4e=n(rVe,"STRONG",{});var fGt=s(F4e);F7r=r(fGt,"funnel"),fGt.forEach(t),T7r=r(rVe," \u2014 "),AK=n(rVe,"A",{href:!0});var mGt=s(AK);M7r=r(mGt,"TFFunnelForPreTraining"),mGt.forEach(t),E7r=r(rVe," (Funnel Transformer model)"),rVe.forEach(t),C7r=i(le),w4=n(le,"LI",{});var tVe=s(w4);T4e=n(tVe,"STRONG",{});var gGt=s(T4e);w7r=r(gGt,"gpt2"),gGt.forEach(t),A7r=r(tVe," \u2014 "),LK=n(tVe,"A",{href:!0});var hGt=s(LK);L7r=r(hGt,"TFGPT2LMHeadModel"),hGt.forEach(t),y7r=r(tVe," (OpenAI GPT-2 model)"),tVe.forEach(t),x7r=i(le),A4=n(le,"LI",{});var aVe=s(A4);M4e=n(aVe,"STRONG",{});var pGt=s(M4e);$7r=r(pGt,"layoutlm"),pGt.forEach(t),k7r=r(aVe," \u2014 "),yK=n(aVe,"A",{href:!0});var _Gt=s(yK);S7r=r(_Gt,"TFLayoutLMForMaskedLM"),_Gt.forEach(t),R7r=r(aVe," (LayoutLM model)"),aVe.forEach(t),P7r=i(le),L4=n(le,"LI",{});var nVe=s(L4);E4e=n(nVe,"STRONG",{});var uGt=s(E4e);B7r=r(uGt,"lxmert"),uGt.forEach(t),I7r=r(nVe," \u2014 "),xK=n(nVe,"A",{href:!0});var bGt=s(xK);N7r=r(bGt,"TFLxmertForPreTraining"),bGt.forEach(t),q7r=r(nVe," (LXMERT model)"),nVe.forEach(t),j7r=i(le),y4=n(le,"LI",{});var sVe=s(y4);C4e=n(sVe,"STRONG",{});var vGt=s(C4e);D7r=r(vGt,"mobilebert"),vGt.forEach(t),G7r=r(sVe," \u2014 "),$K=n(sVe,"A",{href:!0});var FGt=s($K);O7r=r(FGt,"TFMobileBertForPreTraining"),FGt.forEach(t),V7r=r(sVe," (MobileBERT model)"),sVe.forEach(t),X7r=i(le),x4=n(le,"LI",{});var lVe=s(x4);w4e=n(lVe,"STRONG",{});var TGt=s(w4e);z7r=r(TGt,"mpnet"),TGt.forEach(t),W7r=r(lVe," \u2014 "),kK=n(lVe,"A",{href:!0});var MGt=s(kK);Q7r=r(MGt,"TFMPNetForMaskedLM"),MGt.forEach(t),U7r=r(lVe," (MPNet model)"),lVe.forEach(t),H7r=i(le),$4=n(le,"LI",{});var iVe=s($4);A4e=n(iVe,"STRONG",{});var EGt=s(A4e);J7r=r(EGt,"openai-gpt"),EGt.forEach(t),Y7r=r(iVe," \u2014 "),SK=n(iVe,"A",{href:!0});var CGt=s(SK);K7r=r(CGt,"TFOpenAIGPTLMHeadModel"),CGt.forEach(t),Z7r=r(iVe," (OpenAI GPT model)"),iVe.forEach(t),eLr=i(le),k4=n(le,"LI",{});var dVe=s(k4);L4e=n(dVe,"STRONG",{});var wGt=s(L4e);oLr=r(wGt,"roberta"),wGt.forEach(t),rLr=r(dVe," \u2014 "),RK=n(dVe,"A",{href:!0});var AGt=s(RK);tLr=r(AGt,"TFRobertaForMaskedLM"),AGt.forEach(t),aLr=r(dVe," (RoBERTa model)"),dVe.forEach(t),nLr=i(le),S4=n(le,"LI",{});var cVe=s(S4);y4e=n(cVe,"STRONG",{});var LGt=s(y4e);sLr=r(LGt,"t5"),LGt.forEach(t),lLr=r(cVe," \u2014 "),PK=n(cVe,"A",{href:!0});var yGt=s(PK);iLr=r(yGt,"TFT5ForConditionalGeneration"),yGt.forEach(t),dLr=r(cVe," (T5 model)"),cVe.forEach(t),cLr=i(le),R4=n(le,"LI",{});var fVe=s(R4);x4e=n(fVe,"STRONG",{});var xGt=s(x4e);fLr=r(xGt,"tapas"),xGt.forEach(t),mLr=r(fVe," \u2014 "),BK=n(fVe,"A",{href:!0});var $Gt=s(BK);gLr=r($Gt,"TFTapasForMaskedLM"),$Gt.forEach(t),hLr=r(fVe," (TAPAS model)"),fVe.forEach(t),pLr=i(le),P4=n(le,"LI",{});var mVe=s(P4);$4e=n(mVe,"STRONG",{});var kGt=s($4e);_Lr=r(kGt,"transfo-xl"),kGt.forEach(t),uLr=r(mVe," \u2014 "),IK=n(mVe,"A",{href:!0});var SGt=s(IK);bLr=r(SGt,"TFTransfoXLLMHeadModel"),SGt.forEach(t),vLr=r(mVe," (Transformer-XL model)"),mVe.forEach(t),FLr=i(le),B4=n(le,"LI",{});var gVe=s(B4);k4e=n(gVe,"STRONG",{});var RGt=s(k4e);TLr=r(RGt,"vit_mae"),RGt.forEach(t),MLr=r(gVe," \u2014 "),NK=n(gVe,"A",{href:!0});var PGt=s(NK);ELr=r(PGt,"TFViTMAEForPreTraining"),PGt.forEach(t),CLr=r(gVe," (ViTMAE model)"),gVe.forEach(t),wLr=i(le),I4=n(le,"LI",{});var hVe=s(I4);S4e=n(hVe,"STRONG",{});var BGt=s(S4e);ALr=r(BGt,"xlm"),BGt.forEach(t),LLr=r(hVe," \u2014 "),qK=n(hVe,"A",{href:!0});var IGt=s(qK);yLr=r(IGt,"TFXLMWithLMHeadModel"),IGt.forEach(t),xLr=r(hVe," (XLM model)"),hVe.forEach(t),$Lr=i(le),N4=n(le,"LI",{});var pVe=s(N4);R4e=n(pVe,"STRONG",{});var NGt=s(R4e);kLr=r(NGt,"xlm-roberta"),NGt.forEach(t),SLr=r(pVe," \u2014 "),jK=n(pVe,"A",{href:!0});var qGt=s(jK);RLr=r(qGt,"TFXLMRobertaForMaskedLM"),qGt.forEach(t),PLr=r(pVe," (XLM-RoBERTa model)"),pVe.forEach(t),BLr=i(le),q4=n(le,"LI",{});var _Ve=s(q4);P4e=n(_Ve,"STRONG",{});var jGt=s(P4e);ILr=r(jGt,"xlnet"),jGt.forEach(t),NLr=r(_Ve," \u2014 "),DK=n(_Ve,"A",{href:!0});var DGt=s(DK);qLr=r(DGt,"TFXLNetLMHeadModel"),DGt.forEach(t),jLr=r(_Ve," (XLNet model)"),_Ve.forEach(t),le.forEach(t),DLr=i(zl),T(j4.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),fHe=i(f),xc=n(f,"H2",{class:!0});var EYe=s(xc);D4=n(EYe,"A",{id:!0,class:!0,href:!0});var GGt=s(D4);B4e=n(GGt,"SPAN",{});var OGt=s(B4e);T(u$.$$.fragment,OGt),OGt.forEach(t),GGt.forEach(t),GLr=i(EYe),I4e=n(EYe,"SPAN",{});var VGt=s(I4e);OLr=r(VGt,"TFAutoModelForCausalLM"),VGt.forEach(t),EYe.forEach(t),mHe=i(f),sr=n(f,"DIV",{class:!0});var Wl=s(sr);T(b$.$$.fragment,Wl),VLr=i(Wl),$c=n(Wl,"P",{});var Wne=s($c);XLr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GK=n(Wne,"A",{href:!0});var XGt=s(GK);zLr=r(XGt,"from_pretrained()"),XGt.forEach(t),WLr=r(Wne," class method or the "),OK=n(Wne,"A",{href:!0});var zGt=s(OK);QLr=r(zGt,"from_config()"),zGt.forEach(t),ULr=r(Wne,` class
method.`),Wne.forEach(t),HLr=i(Wl),v$=n(Wl,"P",{});var CYe=s(v$);JLr=r(CYe,"This class cannot be instantiated directly using "),N4e=n(CYe,"CODE",{});var WGt=s(N4e);YLr=r(WGt,"__init__()"),WGt.forEach(t),KLr=r(CYe," (throws an error)."),CYe.forEach(t),ZLr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var _L=s(Dt);T(F$.$$.fragment,_L),eyr=i(_L),q4e=n(_L,"P",{});var QGt=s(q4e);oyr=r(QGt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QGt.forEach(t),ryr=i(_L),kc=n(_L,"P",{});var Qne=s(kc);tyr=r(Qne,`Note:
Loading a model from its configuration file does `),j4e=n(Qne,"STRONG",{});var UGt=s(j4e);ayr=r(UGt,"not"),UGt.forEach(t),nyr=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(Qne,"A",{href:!0});var HGt=s(VK);syr=r(HGt,"from_pretrained()"),HGt.forEach(t),lyr=r(Qne," to load the model weights."),Qne.forEach(t),iyr=i(_L),T(G4.$$.fragment,_L),_L.forEach(t),dyr=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(T$.$$.fragment,Ql),cyr=i(Ql),D4e=n(Ql,"P",{});var JGt=s(D4e);fyr=r(JGt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JGt.forEach(t),myr=i(Ql),bn=n(Ql,"P",{});var uL=s(bn);gyr=r(uL,"The model class to instantiate is selected based on the "),G4e=n(uL,"CODE",{});var YGt=s(G4e);hyr=r(YGt,"model_type"),YGt.forEach(t),pyr=r(uL,` property of the config object (either
passed as an argument or loaded from `),O4e=n(uL,"CODE",{});var KGt=s(O4e);_yr=r(KGt,"pretrained_model_name_or_path"),KGt.forEach(t),uyr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(uL,"CODE",{});var ZGt=s(V4e);byr=r(ZGt,"pretrained_model_name_or_path"),ZGt.forEach(t),vyr=r(uL,":"),uL.forEach(t),Fyr=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);O4=n(Ce,"LI",{});var uVe=s(O4);X4e=n(uVe,"STRONG",{});var eOt=s(X4e);Tyr=r(eOt,"bert"),eOt.forEach(t),Myr=r(uVe," \u2014 "),XK=n(uVe,"A",{href:!0});var oOt=s(XK);Eyr=r(oOt,"TFBertLMHeadModel"),oOt.forEach(t),Cyr=r(uVe," (BERT model)"),uVe.forEach(t),wyr=i(Ce),V4=n(Ce,"LI",{});var bVe=s(V4);z4e=n(bVe,"STRONG",{});var rOt=s(z4e);Ayr=r(rOt,"camembert"),rOt.forEach(t),Lyr=r(bVe," \u2014 "),zK=n(bVe,"A",{href:!0});var tOt=s(zK);yyr=r(tOt,"TFCamembertForCausalLM"),tOt.forEach(t),xyr=r(bVe," (CamemBERT model)"),bVe.forEach(t),$yr=i(Ce),X4=n(Ce,"LI",{});var vVe=s(X4);W4e=n(vVe,"STRONG",{});var aOt=s(W4e);kyr=r(aOt,"ctrl"),aOt.forEach(t),Syr=r(vVe," \u2014 "),WK=n(vVe,"A",{href:!0});var nOt=s(WK);Ryr=r(nOt,"TFCTRLLMHeadModel"),nOt.forEach(t),Pyr=r(vVe," (CTRL model)"),vVe.forEach(t),Byr=i(Ce),z4=n(Ce,"LI",{});var FVe=s(z4);Q4e=n(FVe,"STRONG",{});var sOt=s(Q4e);Iyr=r(sOt,"gpt2"),sOt.forEach(t),Nyr=r(FVe," \u2014 "),QK=n(FVe,"A",{href:!0});var lOt=s(QK);qyr=r(lOt,"TFGPT2LMHeadModel"),lOt.forEach(t),jyr=r(FVe," (OpenAI GPT-2 model)"),FVe.forEach(t),Dyr=i(Ce),W4=n(Ce,"LI",{});var TVe=s(W4);U4e=n(TVe,"STRONG",{});var iOt=s(U4e);Gyr=r(iOt,"gptj"),iOt.forEach(t),Oyr=r(TVe," \u2014 "),UK=n(TVe,"A",{href:!0});var dOt=s(UK);Vyr=r(dOt,"TFGPTJForCausalLM"),dOt.forEach(t),Xyr=r(TVe," (GPT-J model)"),TVe.forEach(t),zyr=i(Ce),Q4=n(Ce,"LI",{});var MVe=s(Q4);H4e=n(MVe,"STRONG",{});var cOt=s(H4e);Wyr=r(cOt,"openai-gpt"),cOt.forEach(t),Qyr=r(MVe," \u2014 "),HK=n(MVe,"A",{href:!0});var fOt=s(HK);Uyr=r(fOt,"TFOpenAIGPTLMHeadModel"),fOt.forEach(t),Hyr=r(MVe," (OpenAI GPT model)"),MVe.forEach(t),Jyr=i(Ce),U4=n(Ce,"LI",{});var EVe=s(U4);J4e=n(EVe,"STRONG",{});var mOt=s(J4e);Yyr=r(mOt,"opt"),mOt.forEach(t),Kyr=r(EVe," \u2014 "),JK=n(EVe,"A",{href:!0});var gOt=s(JK);Zyr=r(gOt,"TFOPTForCausalLM"),gOt.forEach(t),e9r=r(EVe," (OPT model)"),EVe.forEach(t),o9r=i(Ce),H4=n(Ce,"LI",{});var CVe=s(H4);Y4e=n(CVe,"STRONG",{});var hOt=s(Y4e);r9r=r(hOt,"rembert"),hOt.forEach(t),t9r=r(CVe," \u2014 "),YK=n(CVe,"A",{href:!0});var pOt=s(YK);a9r=r(pOt,"TFRemBertForCausalLM"),pOt.forEach(t),n9r=r(CVe," (RemBERT model)"),CVe.forEach(t),s9r=i(Ce),J4=n(Ce,"LI",{});var wVe=s(J4);K4e=n(wVe,"STRONG",{});var _Ot=s(K4e);l9r=r(_Ot,"roberta"),_Ot.forEach(t),i9r=r(wVe," \u2014 "),KK=n(wVe,"A",{href:!0});var uOt=s(KK);d9r=r(uOt,"TFRobertaForCausalLM"),uOt.forEach(t),c9r=r(wVe," (RoBERTa model)"),wVe.forEach(t),f9r=i(Ce),Y4=n(Ce,"LI",{});var AVe=s(Y4);Z4e=n(AVe,"STRONG",{});var bOt=s(Z4e);m9r=r(bOt,"roformer"),bOt.forEach(t),g9r=r(AVe," \u2014 "),ZK=n(AVe,"A",{href:!0});var vOt=s(ZK);h9r=r(vOt,"TFRoFormerForCausalLM"),vOt.forEach(t),p9r=r(AVe," (RoFormer model)"),AVe.forEach(t),_9r=i(Ce),K4=n(Ce,"LI",{});var LVe=s(K4);eCe=n(LVe,"STRONG",{});var FOt=s(eCe);u9r=r(FOt,"transfo-xl"),FOt.forEach(t),b9r=r(LVe," \u2014 "),eZ=n(LVe,"A",{href:!0});var TOt=s(eZ);v9r=r(TOt,"TFTransfoXLLMHeadModel"),TOt.forEach(t),F9r=r(LVe," (Transformer-XL model)"),LVe.forEach(t),T9r=i(Ce),Z4=n(Ce,"LI",{});var yVe=s(Z4);oCe=n(yVe,"STRONG",{});var MOt=s(oCe);M9r=r(MOt,"xglm"),MOt.forEach(t),E9r=r(yVe," \u2014 "),oZ=n(yVe,"A",{href:!0});var EOt=s(oZ);C9r=r(EOt,"TFXGLMForCausalLM"),EOt.forEach(t),w9r=r(yVe," (XGLM model)"),yVe.forEach(t),A9r=i(Ce),eC=n(Ce,"LI",{});var xVe=s(eC);rCe=n(xVe,"STRONG",{});var COt=s(rCe);L9r=r(COt,"xlm"),COt.forEach(t),y9r=r(xVe," \u2014 "),rZ=n(xVe,"A",{href:!0});var wOt=s(rZ);x9r=r(wOt,"TFXLMWithLMHeadModel"),wOt.forEach(t),$9r=r(xVe," (XLM model)"),xVe.forEach(t),k9r=i(Ce),oC=n(Ce,"LI",{});var $Ve=s(oC);tCe=n($Ve,"STRONG",{});var AOt=s(tCe);S9r=r(AOt,"xlnet"),AOt.forEach(t),R9r=r($Ve," \u2014 "),tZ=n($Ve,"A",{href:!0});var LOt=s(tZ);P9r=r(LOt,"TFXLNetLMHeadModel"),LOt.forEach(t),B9r=r($Ve," (XLNet model)"),$Ve.forEach(t),Ce.forEach(t),I9r=i(Ql),T(rC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),gHe=i(f),Sc=n(f,"H2",{class:!0});var wYe=s(Sc);tC=n(wYe,"A",{id:!0,class:!0,href:!0});var yOt=s(tC);aCe=n(yOt,"SPAN",{});var xOt=s(aCe);T(M$.$$.fragment,xOt),xOt.forEach(t),yOt.forEach(t),N9r=i(wYe),nCe=n(wYe,"SPAN",{});var $Ot=s(nCe);q9r=r($Ot,"TFAutoModelForImageClassification"),$Ot.forEach(t),wYe.forEach(t),hHe=i(f),lr=n(f,"DIV",{class:!0});var Ul=s(lr);T(E$.$$.fragment,Ul),j9r=i(Ul),Rc=n(Ul,"P",{});var Une=s(Rc);D9r=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aZ=n(Une,"A",{href:!0});var kOt=s(aZ);G9r=r(kOt,"from_pretrained()"),kOt.forEach(t),O9r=r(Une," class method or the "),nZ=n(Une,"A",{href:!0});var SOt=s(nZ);V9r=r(SOt,"from_config()"),SOt.forEach(t),X9r=r(Une,` class
method.`),Une.forEach(t),z9r=i(Ul),C$=n(Ul,"P",{});var AYe=s(C$);W9r=r(AYe,"This class cannot be instantiated directly using "),sCe=n(AYe,"CODE",{});var ROt=s(sCe);Q9r=r(ROt,"__init__()"),ROt.forEach(t),U9r=r(AYe," (throws an error)."),AYe.forEach(t),H9r=i(Ul),Gt=n(Ul,"DIV",{class:!0});var bL=s(Gt);T(w$.$$.fragment,bL),J9r=i(bL),lCe=n(bL,"P",{});var POt=s(lCe);Y9r=r(POt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),POt.forEach(t),K9r=i(bL),Pc=n(bL,"P",{});var Hne=s(Pc);Z9r=r(Hne,`Note:
Loading a model from its configuration file does `),iCe=n(Hne,"STRONG",{});var BOt=s(iCe);exr=r(BOt,"not"),BOt.forEach(t),oxr=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=n(Hne,"A",{href:!0});var IOt=s(sZ);rxr=r(IOt,"from_pretrained()"),IOt.forEach(t),txr=r(Hne," to load the model weights."),Hne.forEach(t),axr=i(bL),T(aC.$$.fragment,bL),bL.forEach(t),nxr=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(A$.$$.fragment,Hl),sxr=i(Hl),dCe=n(Hl,"P",{});var NOt=s(dCe);lxr=r(NOt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NOt.forEach(t),ixr=i(Hl),vn=n(Hl,"P",{});var vL=s(vn);dxr=r(vL,"The model class to instantiate is selected based on the "),cCe=n(vL,"CODE",{});var qOt=s(cCe);cxr=r(qOt,"model_type"),qOt.forEach(t),fxr=r(vL,` property of the config object (either
passed as an argument or loaded from `),fCe=n(vL,"CODE",{});var jOt=s(fCe);mxr=r(jOt,"pretrained_model_name_or_path"),jOt.forEach(t),gxr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(vL,"CODE",{});var DOt=s(mCe);hxr=r(DOt,"pretrained_model_name_or_path"),DOt.forEach(t),pxr=r(vL,":"),vL.forEach(t),_xr=i(Hl),Ve=n(Hl,"UL",{});var Eo=s(Ve);nC=n(Eo,"LI",{});var kVe=s(nC);gCe=n(kVe,"STRONG",{});var GOt=s(gCe);uxr=r(GOt,"convnext"),GOt.forEach(t),bxr=r(kVe," \u2014 "),lZ=n(kVe,"A",{href:!0});var OOt=s(lZ);vxr=r(OOt,"TFConvNextForImageClassification"),OOt.forEach(t),Fxr=r(kVe," (ConvNeXT model)"),kVe.forEach(t),Txr=i(Eo),sC=n(Eo,"LI",{});var SVe=s(sC);hCe=n(SVe,"STRONG",{});var VOt=s(hCe);Mxr=r(VOt,"data2vec-vision"),VOt.forEach(t),Exr=r(SVe," \u2014 "),iZ=n(SVe,"A",{href:!0});var XOt=s(iZ);Cxr=r(XOt,"TFData2VecVisionForImageClassification"),XOt.forEach(t),wxr=r(SVe," (Data2VecVision model)"),SVe.forEach(t),Axr=i(Eo),dl=n(Eo,"LI",{});var nP=s(dl);pCe=n(nP,"STRONG",{});var zOt=s(pCe);Lxr=r(zOt,"deit"),zOt.forEach(t),yxr=r(nP," \u2014 "),dZ=n(nP,"A",{href:!0});var WOt=s(dZ);xxr=r(WOt,"TFDeiTForImageClassification"),WOt.forEach(t),$xr=r(nP," or "),cZ=n(nP,"A",{href:!0});var QOt=s(cZ);kxr=r(QOt,"TFDeiTForImageClassificationWithTeacher"),QOt.forEach(t),Sxr=r(nP," (DeiT model)"),nP.forEach(t),Rxr=i(Eo),lC=n(Eo,"LI",{});var RVe=s(lC);_Ce=n(RVe,"STRONG",{});var UOt=s(_Ce);Pxr=r(UOt,"regnet"),UOt.forEach(t),Bxr=r(RVe," \u2014 "),fZ=n(RVe,"A",{href:!0});var HOt=s(fZ);Ixr=r(HOt,"TFRegNetForImageClassification"),HOt.forEach(t),Nxr=r(RVe," (RegNet model)"),RVe.forEach(t),qxr=i(Eo),iC=n(Eo,"LI",{});var PVe=s(iC);uCe=n(PVe,"STRONG",{});var JOt=s(uCe);jxr=r(JOt,"resnet"),JOt.forEach(t),Dxr=r(PVe," \u2014 "),mZ=n(PVe,"A",{href:!0});var YOt=s(mZ);Gxr=r(YOt,"TFResNetForImageClassification"),YOt.forEach(t),Oxr=r(PVe," (ResNet model)"),PVe.forEach(t),Vxr=i(Eo),dC=n(Eo,"LI",{});var BVe=s(dC);bCe=n(BVe,"STRONG",{});var KOt=s(bCe);Xxr=r(KOt,"segformer"),KOt.forEach(t),zxr=r(BVe," \u2014 "),gZ=n(BVe,"A",{href:!0});var ZOt=s(gZ);Wxr=r(ZOt,"TFSegformerForImageClassification"),ZOt.forEach(t),Qxr=r(BVe," (SegFormer model)"),BVe.forEach(t),Uxr=i(Eo),cC=n(Eo,"LI",{});var IVe=s(cC);vCe=n(IVe,"STRONG",{});var eVt=s(vCe);Hxr=r(eVt,"swin"),eVt.forEach(t),Jxr=r(IVe," \u2014 "),hZ=n(IVe,"A",{href:!0});var oVt=s(hZ);Yxr=r(oVt,"TFSwinForImageClassification"),oVt.forEach(t),Kxr=r(IVe," (Swin Transformer model)"),IVe.forEach(t),Zxr=i(Eo),fC=n(Eo,"LI",{});var NVe=s(fC);FCe=n(NVe,"STRONG",{});var rVt=s(FCe);e$r=r(rVt,"vit"),rVt.forEach(t),o$r=r(NVe," \u2014 "),pZ=n(NVe,"A",{href:!0});var tVt=s(pZ);r$r=r(tVt,"TFViTForImageClassification"),tVt.forEach(t),t$r=r(NVe," (ViT model)"),NVe.forEach(t),Eo.forEach(t),a$r=i(Hl),T(mC.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),pHe=i(f),Bc=n(f,"H2",{class:!0});var LYe=s(Bc);gC=n(LYe,"A",{id:!0,class:!0,href:!0});var aVt=s(gC);TCe=n(aVt,"SPAN",{});var nVt=s(TCe);T(L$.$$.fragment,nVt),nVt.forEach(t),aVt.forEach(t),n$r=i(LYe),MCe=n(LYe,"SPAN",{});var sVt=s(MCe);s$r=r(sVt,"TFAutoModelForSemanticSegmentation"),sVt.forEach(t),LYe.forEach(t),_He=i(f),ir=n(f,"DIV",{class:!0});var Jl=s(ir);T(y$.$$.fragment,Jl),l$r=i(Jl),Ic=n(Jl,"P",{});var Jne=s(Ic);i$r=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_Z=n(Jne,"A",{href:!0});var lVt=s(_Z);d$r=r(lVt,"from_pretrained()"),lVt.forEach(t),c$r=r(Jne," class method or the "),uZ=n(Jne,"A",{href:!0});var iVt=s(uZ);f$r=r(iVt,"from_config()"),iVt.forEach(t),m$r=r(Jne,` class
method.`),Jne.forEach(t),g$r=i(Jl),x$=n(Jl,"P",{});var yYe=s(x$);h$r=r(yYe,"This class cannot be instantiated directly using "),ECe=n(yYe,"CODE",{});var dVt=s(ECe);p$r=r(dVt,"__init__()"),dVt.forEach(t),_$r=r(yYe," (throws an error)."),yYe.forEach(t),u$r=i(Jl),Ot=n(Jl,"DIV",{class:!0});var FL=s(Ot);T($$.$$.fragment,FL),b$r=i(FL),CCe=n(FL,"P",{});var cVt=s(CCe);v$r=r(cVt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cVt.forEach(t),F$r=i(FL),Nc=n(FL,"P",{});var Yne=s(Nc);T$r=r(Yne,`Note:
Loading a model from its configuration file does `),wCe=n(Yne,"STRONG",{});var fVt=s(wCe);M$r=r(fVt,"not"),fVt.forEach(t),E$r=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),bZ=n(Yne,"A",{href:!0});var mVt=s(bZ);C$r=r(mVt,"from_pretrained()"),mVt.forEach(t),w$r=r(Yne," to load the model weights."),Yne.forEach(t),A$r=i(FL),T(hC.$$.fragment,FL),FL.forEach(t),L$r=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(k$.$$.fragment,Yl),y$r=i(Yl),ACe=n(Yl,"P",{});var gVt=s(ACe);x$r=r(gVt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),gVt.forEach(t),$$r=i(Yl),Fn=n(Yl,"P",{});var TL=s(Fn);k$r=r(TL,"The model class to instantiate is selected based on the "),LCe=n(TL,"CODE",{});var hVt=s(LCe);S$r=r(hVt,"model_type"),hVt.forEach(t),R$r=r(TL,` property of the config object (either
passed as an argument or loaded from `),yCe=n(TL,"CODE",{});var pVt=s(yCe);P$r=r(pVt,"pretrained_model_name_or_path"),pVt.forEach(t),B$r=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(TL,"CODE",{});var _Vt=s(xCe);I$r=r(_Vt,"pretrained_model_name_or_path"),_Vt.forEach(t),N$r=r(TL,":"),TL.forEach(t),q$r=i(Yl),S$=n(Yl,"UL",{});var xYe=s(S$);pC=n(xYe,"LI",{});var qVe=s(pC);$Ce=n(qVe,"STRONG",{});var uVt=s($Ce);j$r=r(uVt,"data2vec-vision"),uVt.forEach(t),D$r=r(qVe," \u2014 "),vZ=n(qVe,"A",{href:!0});var bVt=s(vZ);G$r=r(bVt,"TFData2VecVisionForSemanticSegmentation"),bVt.forEach(t),O$r=r(qVe," (Data2VecVision model)"),qVe.forEach(t),V$r=i(xYe),_C=n(xYe,"LI",{});var jVe=s(_C);kCe=n(jVe,"STRONG",{});var vVt=s(kCe);X$r=r(vVt,"segformer"),vVt.forEach(t),z$r=r(jVe," \u2014 "),FZ=n(jVe,"A",{href:!0});var FVt=s(FZ);W$r=r(FVt,"TFSegformerForSemanticSegmentation"),FVt.forEach(t),Q$r=r(jVe," (SegFormer model)"),jVe.forEach(t),xYe.forEach(t),U$r=i(Yl),T(uC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),uHe=i(f),qc=n(f,"H2",{class:!0});var $Ye=s(qc);bC=n($Ye,"A",{id:!0,class:!0,href:!0});var TVt=s(bC);SCe=n(TVt,"SPAN",{});var MVt=s(SCe);T(R$.$$.fragment,MVt),MVt.forEach(t),TVt.forEach(t),H$r=i($Ye),RCe=n($Ye,"SPAN",{});var EVt=s(RCe);J$r=r(EVt,"TFAutoModelForMaskedLM"),EVt.forEach(t),$Ye.forEach(t),bHe=i(f),dr=n(f,"DIV",{class:!0});var Kl=s(dr);T(P$.$$.fragment,Kl),Y$r=i(Kl),jc=n(Kl,"P",{});var Kne=s(jc);K$r=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TZ=n(Kne,"A",{href:!0});var CVt=s(TZ);Z$r=r(CVt,"from_pretrained()"),CVt.forEach(t),ekr=r(Kne," class method or the "),MZ=n(Kne,"A",{href:!0});var wVt=s(MZ);okr=r(wVt,"from_config()"),wVt.forEach(t),rkr=r(Kne,` class
method.`),Kne.forEach(t),tkr=i(Kl),B$=n(Kl,"P",{});var kYe=s(B$);akr=r(kYe,"This class cannot be instantiated directly using "),PCe=n(kYe,"CODE",{});var AVt=s(PCe);nkr=r(AVt,"__init__()"),AVt.forEach(t),skr=r(kYe," (throws an error)."),kYe.forEach(t),lkr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var ML=s(Vt);T(I$.$$.fragment,ML),ikr=i(ML),BCe=n(ML,"P",{});var LVt=s(BCe);dkr=r(LVt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LVt.forEach(t),ckr=i(ML),Dc=n(ML,"P",{});var Zne=s(Dc);fkr=r(Zne,`Note:
Loading a model from its configuration file does `),ICe=n(Zne,"STRONG",{});var yVt=s(ICe);mkr=r(yVt,"not"),yVt.forEach(t),gkr=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(Zne,"A",{href:!0});var xVt=s(EZ);hkr=r(xVt,"from_pretrained()"),xVt.forEach(t),pkr=r(Zne," to load the model weights."),Zne.forEach(t),_kr=i(ML),T(vC.$$.fragment,ML),ML.forEach(t),ukr=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(N$.$$.fragment,Zl),bkr=i(Zl),NCe=n(Zl,"P",{});var $Vt=s(NCe);vkr=r($Vt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Vt.forEach(t),Fkr=i(Zl),Tn=n(Zl,"P",{});var EL=s(Tn);Tkr=r(EL,"The model class to instantiate is selected based on the "),qCe=n(EL,"CODE",{});var kVt=s(qCe);Mkr=r(kVt,"model_type"),kVt.forEach(t),Ekr=r(EL,` property of the config object (either
passed as an argument or loaded from `),jCe=n(EL,"CODE",{});var SVt=s(jCe);Ckr=r(SVt,"pretrained_model_name_or_path"),SVt.forEach(t),wkr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DCe=n(EL,"CODE",{});var RVt=s(DCe);Akr=r(RVt,"pretrained_model_name_or_path"),RVt.forEach(t),Lkr=r(EL,":"),EL.forEach(t),ykr=i(Zl),de=n(Zl,"UL",{});var he=s(de);FC=n(he,"LI",{});var DVe=s(FC);GCe=n(DVe,"STRONG",{});var PVt=s(GCe);xkr=r(PVt,"albert"),PVt.forEach(t),$kr=r(DVe," \u2014 "),CZ=n(DVe,"A",{href:!0});var BVt=s(CZ);kkr=r(BVt,"TFAlbertForMaskedLM"),BVt.forEach(t),Skr=r(DVe," (ALBERT model)"),DVe.forEach(t),Rkr=i(he),TC=n(he,"LI",{});var GVe=s(TC);OCe=n(GVe,"STRONG",{});var IVt=s(OCe);Pkr=r(IVt,"bert"),IVt.forEach(t),Bkr=r(GVe," \u2014 "),wZ=n(GVe,"A",{href:!0});var NVt=s(wZ);Ikr=r(NVt,"TFBertForMaskedLM"),NVt.forEach(t),Nkr=r(GVe," (BERT model)"),GVe.forEach(t),qkr=i(he),MC=n(he,"LI",{});var OVe=s(MC);VCe=n(OVe,"STRONG",{});var qVt=s(VCe);jkr=r(qVt,"camembert"),qVt.forEach(t),Dkr=r(OVe," \u2014 "),AZ=n(OVe,"A",{href:!0});var jVt=s(AZ);Gkr=r(jVt,"TFCamembertForMaskedLM"),jVt.forEach(t),Okr=r(OVe," (CamemBERT model)"),OVe.forEach(t),Vkr=i(he),EC=n(he,"LI",{});var VVe=s(EC);XCe=n(VVe,"STRONG",{});var DVt=s(XCe);Xkr=r(DVt,"convbert"),DVt.forEach(t),zkr=r(VVe," \u2014 "),LZ=n(VVe,"A",{href:!0});var GVt=s(LZ);Wkr=r(GVt,"TFConvBertForMaskedLM"),GVt.forEach(t),Qkr=r(VVe," (ConvBERT model)"),VVe.forEach(t),Ukr=i(he),CC=n(he,"LI",{});var XVe=s(CC);zCe=n(XVe,"STRONG",{});var OVt=s(zCe);Hkr=r(OVt,"deberta"),OVt.forEach(t),Jkr=r(XVe," \u2014 "),yZ=n(XVe,"A",{href:!0});var VVt=s(yZ);Ykr=r(VVt,"TFDebertaForMaskedLM"),VVt.forEach(t),Kkr=r(XVe," (DeBERTa model)"),XVe.forEach(t),Zkr=i(he),wC=n(he,"LI",{});var zVe=s(wC);WCe=n(zVe,"STRONG",{});var XVt=s(WCe);eSr=r(XVt,"deberta-v2"),XVt.forEach(t),oSr=r(zVe," \u2014 "),xZ=n(zVe,"A",{href:!0});var zVt=s(xZ);rSr=r(zVt,"TFDebertaV2ForMaskedLM"),zVt.forEach(t),tSr=r(zVe," (DeBERTa-v2 model)"),zVe.forEach(t),aSr=i(he),AC=n(he,"LI",{});var WVe=s(AC);QCe=n(WVe,"STRONG",{});var WVt=s(QCe);nSr=r(WVt,"distilbert"),WVt.forEach(t),sSr=r(WVe," \u2014 "),$Z=n(WVe,"A",{href:!0});var QVt=s($Z);lSr=r(QVt,"TFDistilBertForMaskedLM"),QVt.forEach(t),iSr=r(WVe," (DistilBERT model)"),WVe.forEach(t),dSr=i(he),LC=n(he,"LI",{});var QVe=s(LC);UCe=n(QVe,"STRONG",{});var UVt=s(UCe);cSr=r(UVt,"electra"),UVt.forEach(t),fSr=r(QVe," \u2014 "),kZ=n(QVe,"A",{href:!0});var HVt=s(kZ);mSr=r(HVt,"TFElectraForMaskedLM"),HVt.forEach(t),gSr=r(QVe," (ELECTRA model)"),QVe.forEach(t),hSr=i(he),yC=n(he,"LI",{});var UVe=s(yC);HCe=n(UVe,"STRONG",{});var JVt=s(HCe);pSr=r(JVt,"flaubert"),JVt.forEach(t),_Sr=r(UVe," \u2014 "),SZ=n(UVe,"A",{href:!0});var YVt=s(SZ);uSr=r(YVt,"TFFlaubertWithLMHeadModel"),YVt.forEach(t),bSr=r(UVe," (FlauBERT model)"),UVe.forEach(t),vSr=i(he),xC=n(he,"LI",{});var HVe=s(xC);JCe=n(HVe,"STRONG",{});var KVt=s(JCe);FSr=r(KVt,"funnel"),KVt.forEach(t),TSr=r(HVe," \u2014 "),RZ=n(HVe,"A",{href:!0});var ZVt=s(RZ);MSr=r(ZVt,"TFFunnelForMaskedLM"),ZVt.forEach(t),ESr=r(HVe," (Funnel Transformer model)"),HVe.forEach(t),CSr=i(he),$C=n(he,"LI",{});var JVe=s($C);YCe=n(JVe,"STRONG",{});var eXt=s(YCe);wSr=r(eXt,"layoutlm"),eXt.forEach(t),ASr=r(JVe," \u2014 "),PZ=n(JVe,"A",{href:!0});var oXt=s(PZ);LSr=r(oXt,"TFLayoutLMForMaskedLM"),oXt.forEach(t),ySr=r(JVe," (LayoutLM model)"),JVe.forEach(t),xSr=i(he),kC=n(he,"LI",{});var YVe=s(kC);KCe=n(YVe,"STRONG",{});var rXt=s(KCe);$Sr=r(rXt,"longformer"),rXt.forEach(t),kSr=r(YVe," \u2014 "),BZ=n(YVe,"A",{href:!0});var tXt=s(BZ);SSr=r(tXt,"TFLongformerForMaskedLM"),tXt.forEach(t),RSr=r(YVe," (Longformer model)"),YVe.forEach(t),PSr=i(he),SC=n(he,"LI",{});var KVe=s(SC);ZCe=n(KVe,"STRONG",{});var aXt=s(ZCe);BSr=r(aXt,"mobilebert"),aXt.forEach(t),ISr=r(KVe," \u2014 "),IZ=n(KVe,"A",{href:!0});var nXt=s(IZ);NSr=r(nXt,"TFMobileBertForMaskedLM"),nXt.forEach(t),qSr=r(KVe," (MobileBERT model)"),KVe.forEach(t),jSr=i(he),RC=n(he,"LI",{});var ZVe=s(RC);e3e=n(ZVe,"STRONG",{});var sXt=s(e3e);DSr=r(sXt,"mpnet"),sXt.forEach(t),GSr=r(ZVe," \u2014 "),NZ=n(ZVe,"A",{href:!0});var lXt=s(NZ);OSr=r(lXt,"TFMPNetForMaskedLM"),lXt.forEach(t),VSr=r(ZVe," (MPNet model)"),ZVe.forEach(t),XSr=i(he),PC=n(he,"LI",{});var eXe=s(PC);o3e=n(eXe,"STRONG",{});var iXt=s(o3e);zSr=r(iXt,"rembert"),iXt.forEach(t),WSr=r(eXe," \u2014 "),qZ=n(eXe,"A",{href:!0});var dXt=s(qZ);QSr=r(dXt,"TFRemBertForMaskedLM"),dXt.forEach(t),USr=r(eXe," (RemBERT model)"),eXe.forEach(t),HSr=i(he),BC=n(he,"LI",{});var oXe=s(BC);r3e=n(oXe,"STRONG",{});var cXt=s(r3e);JSr=r(cXt,"roberta"),cXt.forEach(t),YSr=r(oXe," \u2014 "),jZ=n(oXe,"A",{href:!0});var fXt=s(jZ);KSr=r(fXt,"TFRobertaForMaskedLM"),fXt.forEach(t),ZSr=r(oXe," (RoBERTa model)"),oXe.forEach(t),eRr=i(he),IC=n(he,"LI",{});var rXe=s(IC);t3e=n(rXe,"STRONG",{});var mXt=s(t3e);oRr=r(mXt,"roformer"),mXt.forEach(t),rRr=r(rXe," \u2014 "),DZ=n(rXe,"A",{href:!0});var gXt=s(DZ);tRr=r(gXt,"TFRoFormerForMaskedLM"),gXt.forEach(t),aRr=r(rXe," (RoFormer model)"),rXe.forEach(t),nRr=i(he),NC=n(he,"LI",{});var tXe=s(NC);a3e=n(tXe,"STRONG",{});var hXt=s(a3e);sRr=r(hXt,"tapas"),hXt.forEach(t),lRr=r(tXe," \u2014 "),GZ=n(tXe,"A",{href:!0});var pXt=s(GZ);iRr=r(pXt,"TFTapasForMaskedLM"),pXt.forEach(t),dRr=r(tXe," (TAPAS model)"),tXe.forEach(t),cRr=i(he),qC=n(he,"LI",{});var aXe=s(qC);n3e=n(aXe,"STRONG",{});var _Xt=s(n3e);fRr=r(_Xt,"xlm"),_Xt.forEach(t),mRr=r(aXe," \u2014 "),OZ=n(aXe,"A",{href:!0});var uXt=s(OZ);gRr=r(uXt,"TFXLMWithLMHeadModel"),uXt.forEach(t),hRr=r(aXe," (XLM model)"),aXe.forEach(t),pRr=i(he),jC=n(he,"LI",{});var nXe=s(jC);s3e=n(nXe,"STRONG",{});var bXt=s(s3e);_Rr=r(bXt,"xlm-roberta"),bXt.forEach(t),uRr=r(nXe," \u2014 "),VZ=n(nXe,"A",{href:!0});var vXt=s(VZ);bRr=r(vXt,"TFXLMRobertaForMaskedLM"),vXt.forEach(t),vRr=r(nXe," (XLM-RoBERTa model)"),nXe.forEach(t),he.forEach(t),FRr=i(Zl),T(DC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),vHe=i(f),Gc=n(f,"H2",{class:!0});var SYe=s(Gc);GC=n(SYe,"A",{id:!0,class:!0,href:!0});var FXt=s(GC);l3e=n(FXt,"SPAN",{});var TXt=s(l3e);T(q$.$$.fragment,TXt),TXt.forEach(t),FXt.forEach(t),TRr=i(SYe),i3e=n(SYe,"SPAN",{});var MXt=s(i3e);MRr=r(MXt,"TFAutoModelForSeq2SeqLM"),MXt.forEach(t),SYe.forEach(t),FHe=i(f),cr=n(f,"DIV",{class:!0});var ei=s(cr);T(j$.$$.fragment,ei),ERr=i(ei),Oc=n(ei,"P",{});var ese=s(Oc);CRr=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XZ=n(ese,"A",{href:!0});var EXt=s(XZ);wRr=r(EXt,"from_pretrained()"),EXt.forEach(t),ARr=r(ese," class method or the "),zZ=n(ese,"A",{href:!0});var CXt=s(zZ);LRr=r(CXt,"from_config()"),CXt.forEach(t),yRr=r(ese,` class
method.`),ese.forEach(t),xRr=i(ei),D$=n(ei,"P",{});var RYe=s(D$);$Rr=r(RYe,"This class cannot be instantiated directly using "),d3e=n(RYe,"CODE",{});var wXt=s(d3e);kRr=r(wXt,"__init__()"),wXt.forEach(t),SRr=r(RYe," (throws an error)."),RYe.forEach(t),RRr=i(ei),Xt=n(ei,"DIV",{class:!0});var CL=s(Xt);T(G$.$$.fragment,CL),PRr=i(CL),c3e=n(CL,"P",{});var AXt=s(c3e);BRr=r(AXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),AXt.forEach(t),IRr=i(CL),Vc=n(CL,"P",{});var ose=s(Vc);NRr=r(ose,`Note:
Loading a model from its configuration file does `),f3e=n(ose,"STRONG",{});var LXt=s(f3e);qRr=r(LXt,"not"),LXt.forEach(t),jRr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(ose,"A",{href:!0});var yXt=s(WZ);DRr=r(yXt,"from_pretrained()"),yXt.forEach(t),GRr=r(ose," to load the model weights."),ose.forEach(t),ORr=i(CL),T(OC.$$.fragment,CL),CL.forEach(t),VRr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(O$.$$.fragment,oi),XRr=i(oi),m3e=n(oi,"P",{});var xXt=s(m3e);zRr=r(xXt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xXt.forEach(t),WRr=i(oi),Mn=n(oi,"P",{});var wL=s(Mn);QRr=r(wL,"The model class to instantiate is selected based on the "),g3e=n(wL,"CODE",{});var $Xt=s(g3e);URr=r($Xt,"model_type"),$Xt.forEach(t),HRr=r(wL,` property of the config object (either
passed as an argument or loaded from `),h3e=n(wL,"CODE",{});var kXt=s(h3e);JRr=r(kXt,"pretrained_model_name_or_path"),kXt.forEach(t),YRr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(wL,"CODE",{});var SXt=s(p3e);KRr=r(SXt,"pretrained_model_name_or_path"),SXt.forEach(t),ZRr=r(wL,":"),wL.forEach(t),ePr=i(oi),ye=n(oi,"UL",{});var Ie=s(ye);VC=n(Ie,"LI",{});var sXe=s(VC);_3e=n(sXe,"STRONG",{});var RXt=s(_3e);oPr=r(RXt,"bart"),RXt.forEach(t),rPr=r(sXe," \u2014 "),QZ=n(sXe,"A",{href:!0});var PXt=s(QZ);tPr=r(PXt,"TFBartForConditionalGeneration"),PXt.forEach(t),aPr=r(sXe," (BART model)"),sXe.forEach(t),nPr=i(Ie),XC=n(Ie,"LI",{});var lXe=s(XC);u3e=n(lXe,"STRONG",{});var BXt=s(u3e);sPr=r(BXt,"blenderbot"),BXt.forEach(t),lPr=r(lXe," \u2014 "),UZ=n(lXe,"A",{href:!0});var IXt=s(UZ);iPr=r(IXt,"TFBlenderbotForConditionalGeneration"),IXt.forEach(t),dPr=r(lXe," (Blenderbot model)"),lXe.forEach(t),cPr=i(Ie),zC=n(Ie,"LI",{});var iXe=s(zC);b3e=n(iXe,"STRONG",{});var NXt=s(b3e);fPr=r(NXt,"blenderbot-small"),NXt.forEach(t),mPr=r(iXe," \u2014 "),HZ=n(iXe,"A",{href:!0});var qXt=s(HZ);gPr=r(qXt,"TFBlenderbotSmallForConditionalGeneration"),qXt.forEach(t),hPr=r(iXe," (BlenderbotSmall model)"),iXe.forEach(t),pPr=i(Ie),WC=n(Ie,"LI",{});var dXe=s(WC);v3e=n(dXe,"STRONG",{});var jXt=s(v3e);_Pr=r(jXt,"encoder-decoder"),jXt.forEach(t),uPr=r(dXe," \u2014 "),JZ=n(dXe,"A",{href:!0});var DXt=s(JZ);bPr=r(DXt,"TFEncoderDecoderModel"),DXt.forEach(t),vPr=r(dXe," (Encoder decoder model)"),dXe.forEach(t),FPr=i(Ie),QC=n(Ie,"LI",{});var cXe=s(QC);F3e=n(cXe,"STRONG",{});var GXt=s(F3e);TPr=r(GXt,"led"),GXt.forEach(t),MPr=r(cXe," \u2014 "),YZ=n(cXe,"A",{href:!0});var OXt=s(YZ);EPr=r(OXt,"TFLEDForConditionalGeneration"),OXt.forEach(t),CPr=r(cXe," (LED model)"),cXe.forEach(t),wPr=i(Ie),UC=n(Ie,"LI",{});var fXe=s(UC);T3e=n(fXe,"STRONG",{});var VXt=s(T3e);APr=r(VXt,"marian"),VXt.forEach(t),LPr=r(fXe," \u2014 "),KZ=n(fXe,"A",{href:!0});var XXt=s(KZ);yPr=r(XXt,"TFMarianMTModel"),XXt.forEach(t),xPr=r(fXe," (Marian model)"),fXe.forEach(t),$Pr=i(Ie),HC=n(Ie,"LI",{});var mXe=s(HC);M3e=n(mXe,"STRONG",{});var zXt=s(M3e);kPr=r(zXt,"mbart"),zXt.forEach(t),SPr=r(mXe," \u2014 "),ZZ=n(mXe,"A",{href:!0});var WXt=s(ZZ);RPr=r(WXt,"TFMBartForConditionalGeneration"),WXt.forEach(t),PPr=r(mXe," (mBART model)"),mXe.forEach(t),BPr=i(Ie),JC=n(Ie,"LI",{});var gXe=s(JC);E3e=n(gXe,"STRONG",{});var QXt=s(E3e);IPr=r(QXt,"mt5"),QXt.forEach(t),NPr=r(gXe," \u2014 "),eee=n(gXe,"A",{href:!0});var UXt=s(eee);qPr=r(UXt,"TFMT5ForConditionalGeneration"),UXt.forEach(t),jPr=r(gXe," (MT5 model)"),gXe.forEach(t),DPr=i(Ie),YC=n(Ie,"LI",{});var hXe=s(YC);C3e=n(hXe,"STRONG",{});var HXt=s(C3e);GPr=r(HXt,"pegasus"),HXt.forEach(t),OPr=r(hXe," \u2014 "),oee=n(hXe,"A",{href:!0});var JXt=s(oee);VPr=r(JXt,"TFPegasusForConditionalGeneration"),JXt.forEach(t),XPr=r(hXe," (Pegasus model)"),hXe.forEach(t),zPr=i(Ie),KC=n(Ie,"LI",{});var pXe=s(KC);w3e=n(pXe,"STRONG",{});var YXt=s(w3e);WPr=r(YXt,"t5"),YXt.forEach(t),QPr=r(pXe," \u2014 "),ree=n(pXe,"A",{href:!0});var KXt=s(ree);UPr=r(KXt,"TFT5ForConditionalGeneration"),KXt.forEach(t),HPr=r(pXe," (T5 model)"),pXe.forEach(t),Ie.forEach(t),JPr=i(oi),T(ZC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),THe=i(f),Xc=n(f,"H2",{class:!0});var PYe=s(Xc);e3=n(PYe,"A",{id:!0,class:!0,href:!0});var ZXt=s(e3);A3e=n(ZXt,"SPAN",{});var ezt=s(A3e);T(V$.$$.fragment,ezt),ezt.forEach(t),ZXt.forEach(t),YPr=i(PYe),L3e=n(PYe,"SPAN",{});var ozt=s(L3e);KPr=r(ozt,"TFAutoModelForSequenceClassification"),ozt.forEach(t),PYe.forEach(t),MHe=i(f),fr=n(f,"DIV",{class:!0});var ri=s(fr);T(X$.$$.fragment,ri),ZPr=i(ri),zc=n(ri,"P",{});var rse=s(zc);eBr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tee=n(rse,"A",{href:!0});var rzt=s(tee);oBr=r(rzt,"from_pretrained()"),rzt.forEach(t),rBr=r(rse," class method or the "),aee=n(rse,"A",{href:!0});var tzt=s(aee);tBr=r(tzt,"from_config()"),tzt.forEach(t),aBr=r(rse,` class
method.`),rse.forEach(t),nBr=i(ri),z$=n(ri,"P",{});var BYe=s(z$);sBr=r(BYe,"This class cannot be instantiated directly using "),y3e=n(BYe,"CODE",{});var azt=s(y3e);lBr=r(azt,"__init__()"),azt.forEach(t),iBr=r(BYe," (throws an error)."),BYe.forEach(t),dBr=i(ri),zt=n(ri,"DIV",{class:!0});var AL=s(zt);T(W$.$$.fragment,AL),cBr=i(AL),x3e=n(AL,"P",{});var nzt=s(x3e);fBr=r(nzt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nzt.forEach(t),mBr=i(AL),Wc=n(AL,"P",{});var tse=s(Wc);gBr=r(tse,`Note:
Loading a model from its configuration file does `),$3e=n(tse,"STRONG",{});var szt=s($3e);hBr=r(szt,"not"),szt.forEach(t),pBr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=n(tse,"A",{href:!0});var lzt=s(nee);_Br=r(lzt,"from_pretrained()"),lzt.forEach(t),uBr=r(tse," to load the model weights."),tse.forEach(t),bBr=i(AL),T(o3.$$.fragment,AL),AL.forEach(t),vBr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(Q$.$$.fragment,ti),FBr=i(ti),k3e=n(ti,"P",{});var izt=s(k3e);TBr=r(izt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),izt.forEach(t),MBr=i(ti),En=n(ti,"P",{});var LL=s(En);EBr=r(LL,"The model class to instantiate is selected based on the "),S3e=n(LL,"CODE",{});var dzt=s(S3e);CBr=r(dzt,"model_type"),dzt.forEach(t),wBr=r(LL,` property of the config object (either
passed as an argument or loaded from `),R3e=n(LL,"CODE",{});var czt=s(R3e);ABr=r(czt,"pretrained_model_name_or_path"),czt.forEach(t),LBr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(LL,"CODE",{});var fzt=s(P3e);yBr=r(fzt,"pretrained_model_name_or_path"),fzt.forEach(t),xBr=r(LL,":"),LL.forEach(t),$Br=i(ti),te=n(ti,"UL",{});var ne=s(te);r3=n(ne,"LI",{});var _Xe=s(r3);B3e=n(_Xe,"STRONG",{});var mzt=s(B3e);kBr=r(mzt,"albert"),mzt.forEach(t),SBr=r(_Xe," \u2014 "),see=n(_Xe,"A",{href:!0});var gzt=s(see);RBr=r(gzt,"TFAlbertForSequenceClassification"),gzt.forEach(t),PBr=r(_Xe," (ALBERT model)"),_Xe.forEach(t),BBr=i(ne),t3=n(ne,"LI",{});var uXe=s(t3);I3e=n(uXe,"STRONG",{});var hzt=s(I3e);IBr=r(hzt,"bert"),hzt.forEach(t),NBr=r(uXe," \u2014 "),lee=n(uXe,"A",{href:!0});var pzt=s(lee);qBr=r(pzt,"TFBertForSequenceClassification"),pzt.forEach(t),jBr=r(uXe," (BERT model)"),uXe.forEach(t),DBr=i(ne),a3=n(ne,"LI",{});var bXe=s(a3);N3e=n(bXe,"STRONG",{});var _zt=s(N3e);GBr=r(_zt,"camembert"),_zt.forEach(t),OBr=r(bXe," \u2014 "),iee=n(bXe,"A",{href:!0});var uzt=s(iee);VBr=r(uzt,"TFCamembertForSequenceClassification"),uzt.forEach(t),XBr=r(bXe," (CamemBERT model)"),bXe.forEach(t),zBr=i(ne),n3=n(ne,"LI",{});var vXe=s(n3);q3e=n(vXe,"STRONG",{});var bzt=s(q3e);WBr=r(bzt,"convbert"),bzt.forEach(t),QBr=r(vXe," \u2014 "),dee=n(vXe,"A",{href:!0});var vzt=s(dee);UBr=r(vzt,"TFConvBertForSequenceClassification"),vzt.forEach(t),HBr=r(vXe," (ConvBERT model)"),vXe.forEach(t),JBr=i(ne),s3=n(ne,"LI",{});var FXe=s(s3);j3e=n(FXe,"STRONG",{});var Fzt=s(j3e);YBr=r(Fzt,"ctrl"),Fzt.forEach(t),KBr=r(FXe," \u2014 "),cee=n(FXe,"A",{href:!0});var Tzt=s(cee);ZBr=r(Tzt,"TFCTRLForSequenceClassification"),Tzt.forEach(t),eIr=r(FXe," (CTRL model)"),FXe.forEach(t),oIr=i(ne),l3=n(ne,"LI",{});var TXe=s(l3);D3e=n(TXe,"STRONG",{});var Mzt=s(D3e);rIr=r(Mzt,"deberta"),Mzt.forEach(t),tIr=r(TXe," \u2014 "),fee=n(TXe,"A",{href:!0});var Ezt=s(fee);aIr=r(Ezt,"TFDebertaForSequenceClassification"),Ezt.forEach(t),nIr=r(TXe," (DeBERTa model)"),TXe.forEach(t),sIr=i(ne),i3=n(ne,"LI",{});var MXe=s(i3);G3e=n(MXe,"STRONG",{});var Czt=s(G3e);lIr=r(Czt,"deberta-v2"),Czt.forEach(t),iIr=r(MXe," \u2014 "),mee=n(MXe,"A",{href:!0});var wzt=s(mee);dIr=r(wzt,"TFDebertaV2ForSequenceClassification"),wzt.forEach(t),cIr=r(MXe," (DeBERTa-v2 model)"),MXe.forEach(t),fIr=i(ne),d3=n(ne,"LI",{});var EXe=s(d3);O3e=n(EXe,"STRONG",{});var Azt=s(O3e);mIr=r(Azt,"distilbert"),Azt.forEach(t),gIr=r(EXe," \u2014 "),gee=n(EXe,"A",{href:!0});var Lzt=s(gee);hIr=r(Lzt,"TFDistilBertForSequenceClassification"),Lzt.forEach(t),pIr=r(EXe," (DistilBERT model)"),EXe.forEach(t),_Ir=i(ne),c3=n(ne,"LI",{});var CXe=s(c3);V3e=n(CXe,"STRONG",{});var yzt=s(V3e);uIr=r(yzt,"electra"),yzt.forEach(t),bIr=r(CXe," \u2014 "),hee=n(CXe,"A",{href:!0});var xzt=s(hee);vIr=r(xzt,"TFElectraForSequenceClassification"),xzt.forEach(t),FIr=r(CXe," (ELECTRA model)"),CXe.forEach(t),TIr=i(ne),f3=n(ne,"LI",{});var wXe=s(f3);X3e=n(wXe,"STRONG",{});var $zt=s(X3e);MIr=r($zt,"flaubert"),$zt.forEach(t),EIr=r(wXe," \u2014 "),pee=n(wXe,"A",{href:!0});var kzt=s(pee);CIr=r(kzt,"TFFlaubertForSequenceClassification"),kzt.forEach(t),wIr=r(wXe," (FlauBERT model)"),wXe.forEach(t),AIr=i(ne),m3=n(ne,"LI",{});var AXe=s(m3);z3e=n(AXe,"STRONG",{});var Szt=s(z3e);LIr=r(Szt,"funnel"),Szt.forEach(t),yIr=r(AXe," \u2014 "),_ee=n(AXe,"A",{href:!0});var Rzt=s(_ee);xIr=r(Rzt,"TFFunnelForSequenceClassification"),Rzt.forEach(t),$Ir=r(AXe," (Funnel Transformer model)"),AXe.forEach(t),kIr=i(ne),g3=n(ne,"LI",{});var LXe=s(g3);W3e=n(LXe,"STRONG",{});var Pzt=s(W3e);SIr=r(Pzt,"gpt2"),Pzt.forEach(t),RIr=r(LXe," \u2014 "),uee=n(LXe,"A",{href:!0});var Bzt=s(uee);PIr=r(Bzt,"TFGPT2ForSequenceClassification"),Bzt.forEach(t),BIr=r(LXe," (OpenAI GPT-2 model)"),LXe.forEach(t),IIr=i(ne),h3=n(ne,"LI",{});var yXe=s(h3);Q3e=n(yXe,"STRONG",{});var Izt=s(Q3e);NIr=r(Izt,"gptj"),Izt.forEach(t),qIr=r(yXe," \u2014 "),bee=n(yXe,"A",{href:!0});var Nzt=s(bee);jIr=r(Nzt,"TFGPTJForSequenceClassification"),Nzt.forEach(t),DIr=r(yXe," (GPT-J model)"),yXe.forEach(t),GIr=i(ne),p3=n(ne,"LI",{});var xXe=s(p3);U3e=n(xXe,"STRONG",{});var qzt=s(U3e);OIr=r(qzt,"layoutlm"),qzt.forEach(t),VIr=r(xXe," \u2014 "),vee=n(xXe,"A",{href:!0});var jzt=s(vee);XIr=r(jzt,"TFLayoutLMForSequenceClassification"),jzt.forEach(t),zIr=r(xXe," (LayoutLM model)"),xXe.forEach(t),WIr=i(ne),_3=n(ne,"LI",{});var $Xe=s(_3);H3e=n($Xe,"STRONG",{});var Dzt=s(H3e);QIr=r(Dzt,"longformer"),Dzt.forEach(t),UIr=r($Xe," \u2014 "),Fee=n($Xe,"A",{href:!0});var Gzt=s(Fee);HIr=r(Gzt,"TFLongformerForSequenceClassification"),Gzt.forEach(t),JIr=r($Xe," (Longformer model)"),$Xe.forEach(t),YIr=i(ne),u3=n(ne,"LI",{});var kXe=s(u3);J3e=n(kXe,"STRONG",{});var Ozt=s(J3e);KIr=r(Ozt,"mobilebert"),Ozt.forEach(t),ZIr=r(kXe," \u2014 "),Tee=n(kXe,"A",{href:!0});var Vzt=s(Tee);eNr=r(Vzt,"TFMobileBertForSequenceClassification"),Vzt.forEach(t),oNr=r(kXe," (MobileBERT model)"),kXe.forEach(t),rNr=i(ne),b3=n(ne,"LI",{});var SXe=s(b3);Y3e=n(SXe,"STRONG",{});var Xzt=s(Y3e);tNr=r(Xzt,"mpnet"),Xzt.forEach(t),aNr=r(SXe," \u2014 "),Mee=n(SXe,"A",{href:!0});var zzt=s(Mee);nNr=r(zzt,"TFMPNetForSequenceClassification"),zzt.forEach(t),sNr=r(SXe," (MPNet model)"),SXe.forEach(t),lNr=i(ne),v3=n(ne,"LI",{});var RXe=s(v3);K3e=n(RXe,"STRONG",{});var Wzt=s(K3e);iNr=r(Wzt,"openai-gpt"),Wzt.forEach(t),dNr=r(RXe," \u2014 "),Eee=n(RXe,"A",{href:!0});var Qzt=s(Eee);cNr=r(Qzt,"TFOpenAIGPTForSequenceClassification"),Qzt.forEach(t),fNr=r(RXe," (OpenAI GPT model)"),RXe.forEach(t),mNr=i(ne),F3=n(ne,"LI",{});var PXe=s(F3);Z3e=n(PXe,"STRONG",{});var Uzt=s(Z3e);gNr=r(Uzt,"rembert"),Uzt.forEach(t),hNr=r(PXe," \u2014 "),Cee=n(PXe,"A",{href:!0});var Hzt=s(Cee);pNr=r(Hzt,"TFRemBertForSequenceClassification"),Hzt.forEach(t),_Nr=r(PXe," (RemBERT model)"),PXe.forEach(t),uNr=i(ne),T3=n(ne,"LI",{});var BXe=s(T3);e5e=n(BXe,"STRONG",{});var Jzt=s(e5e);bNr=r(Jzt,"roberta"),Jzt.forEach(t),vNr=r(BXe," \u2014 "),wee=n(BXe,"A",{href:!0});var Yzt=s(wee);FNr=r(Yzt,"TFRobertaForSequenceClassification"),Yzt.forEach(t),TNr=r(BXe," (RoBERTa model)"),BXe.forEach(t),MNr=i(ne),M3=n(ne,"LI",{});var IXe=s(M3);o5e=n(IXe,"STRONG",{});var Kzt=s(o5e);ENr=r(Kzt,"roformer"),Kzt.forEach(t),CNr=r(IXe," \u2014 "),Aee=n(IXe,"A",{href:!0});var Zzt=s(Aee);wNr=r(Zzt,"TFRoFormerForSequenceClassification"),Zzt.forEach(t),ANr=r(IXe," (RoFormer model)"),IXe.forEach(t),LNr=i(ne),E3=n(ne,"LI",{});var NXe=s(E3);r5e=n(NXe,"STRONG",{});var eWt=s(r5e);yNr=r(eWt,"tapas"),eWt.forEach(t),xNr=r(NXe," \u2014 "),Lee=n(NXe,"A",{href:!0});var oWt=s(Lee);$Nr=r(oWt,"TFTapasForSequenceClassification"),oWt.forEach(t),kNr=r(NXe," (TAPAS model)"),NXe.forEach(t),SNr=i(ne),C3=n(ne,"LI",{});var qXe=s(C3);t5e=n(qXe,"STRONG",{});var rWt=s(t5e);RNr=r(rWt,"transfo-xl"),rWt.forEach(t),PNr=r(qXe," \u2014 "),yee=n(qXe,"A",{href:!0});var tWt=s(yee);BNr=r(tWt,"TFTransfoXLForSequenceClassification"),tWt.forEach(t),INr=r(qXe," (Transformer-XL model)"),qXe.forEach(t),NNr=i(ne),w3=n(ne,"LI",{});var jXe=s(w3);a5e=n(jXe,"STRONG",{});var aWt=s(a5e);qNr=r(aWt,"xlm"),aWt.forEach(t),jNr=r(jXe," \u2014 "),xee=n(jXe,"A",{href:!0});var nWt=s(xee);DNr=r(nWt,"TFXLMForSequenceClassification"),nWt.forEach(t),GNr=r(jXe," (XLM model)"),jXe.forEach(t),ONr=i(ne),A3=n(ne,"LI",{});var DXe=s(A3);n5e=n(DXe,"STRONG",{});var sWt=s(n5e);VNr=r(sWt,"xlm-roberta"),sWt.forEach(t),XNr=r(DXe," \u2014 "),$ee=n(DXe,"A",{href:!0});var lWt=s($ee);zNr=r(lWt,"TFXLMRobertaForSequenceClassification"),lWt.forEach(t),WNr=r(DXe," (XLM-RoBERTa model)"),DXe.forEach(t),QNr=i(ne),L3=n(ne,"LI",{});var GXe=s(L3);s5e=n(GXe,"STRONG",{});var iWt=s(s5e);UNr=r(iWt,"xlnet"),iWt.forEach(t),HNr=r(GXe," \u2014 "),kee=n(GXe,"A",{href:!0});var dWt=s(kee);JNr=r(dWt,"TFXLNetForSequenceClassification"),dWt.forEach(t),YNr=r(GXe," (XLNet model)"),GXe.forEach(t),ne.forEach(t),KNr=i(ti),T(y3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),EHe=i(f),Qc=n(f,"H2",{class:!0});var IYe=s(Qc);x3=n(IYe,"A",{id:!0,class:!0,href:!0});var cWt=s(x3);l5e=n(cWt,"SPAN",{});var fWt=s(l5e);T(U$.$$.fragment,fWt),fWt.forEach(t),cWt.forEach(t),ZNr=i(IYe),i5e=n(IYe,"SPAN",{});var mWt=s(i5e);eqr=r(mWt,"TFAutoModelForMultipleChoice"),mWt.forEach(t),IYe.forEach(t),CHe=i(f),mr=n(f,"DIV",{class:!0});var ai=s(mr);T(H$.$$.fragment,ai),oqr=i(ai),Uc=n(ai,"P",{});var ase=s(Uc);rqr=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),See=n(ase,"A",{href:!0});var gWt=s(See);tqr=r(gWt,"from_pretrained()"),gWt.forEach(t),aqr=r(ase," class method or the "),Ree=n(ase,"A",{href:!0});var hWt=s(Ree);nqr=r(hWt,"from_config()"),hWt.forEach(t),sqr=r(ase,` class
method.`),ase.forEach(t),lqr=i(ai),J$=n(ai,"P",{});var NYe=s(J$);iqr=r(NYe,"This class cannot be instantiated directly using "),d5e=n(NYe,"CODE",{});var pWt=s(d5e);dqr=r(pWt,"__init__()"),pWt.forEach(t),cqr=r(NYe," (throws an error)."),NYe.forEach(t),fqr=i(ai),Wt=n(ai,"DIV",{class:!0});var yL=s(Wt);T(Y$.$$.fragment,yL),mqr=i(yL),c5e=n(yL,"P",{});var _Wt=s(c5e);gqr=r(_Wt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Wt.forEach(t),hqr=i(yL),Hc=n(yL,"P",{});var nse=s(Hc);pqr=r(nse,`Note:
Loading a model from its configuration file does `),f5e=n(nse,"STRONG",{});var uWt=s(f5e);_qr=r(uWt,"not"),uWt.forEach(t),uqr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(nse,"A",{href:!0});var bWt=s(Pee);bqr=r(bWt,"from_pretrained()"),bWt.forEach(t),vqr=r(nse," to load the model weights."),nse.forEach(t),Fqr=i(yL),T($3.$$.fragment,yL),yL.forEach(t),Tqr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(K$.$$.fragment,ni),Mqr=i(ni),m5e=n(ni,"P",{});var vWt=s(m5e);Eqr=r(vWt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vWt.forEach(t),Cqr=i(ni),Cn=n(ni,"P",{});var xL=s(Cn);wqr=r(xL,"The model class to instantiate is selected based on the "),g5e=n(xL,"CODE",{});var FWt=s(g5e);Aqr=r(FWt,"model_type"),FWt.forEach(t),Lqr=r(xL,` property of the config object (either
passed as an argument or loaded from `),h5e=n(xL,"CODE",{});var TWt=s(h5e);yqr=r(TWt,"pretrained_model_name_or_path"),TWt.forEach(t),xqr=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(xL,"CODE",{});var MWt=s(p5e);$qr=r(MWt,"pretrained_model_name_or_path"),MWt.forEach(t),kqr=r(xL,":"),xL.forEach(t),Sqr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);k3=n(Te,"LI",{});var OXe=s(k3);_5e=n(OXe,"STRONG",{});var EWt=s(_5e);Rqr=r(EWt,"albert"),EWt.forEach(t),Pqr=r(OXe," \u2014 "),Bee=n(OXe,"A",{href:!0});var CWt=s(Bee);Bqr=r(CWt,"TFAlbertForMultipleChoice"),CWt.forEach(t),Iqr=r(OXe," (ALBERT model)"),OXe.forEach(t),Nqr=i(Te),S3=n(Te,"LI",{});var VXe=s(S3);u5e=n(VXe,"STRONG",{});var wWt=s(u5e);qqr=r(wWt,"bert"),wWt.forEach(t),jqr=r(VXe," \u2014 "),Iee=n(VXe,"A",{href:!0});var AWt=s(Iee);Dqr=r(AWt,"TFBertForMultipleChoice"),AWt.forEach(t),Gqr=r(VXe," (BERT model)"),VXe.forEach(t),Oqr=i(Te),R3=n(Te,"LI",{});var XXe=s(R3);b5e=n(XXe,"STRONG",{});var LWt=s(b5e);Vqr=r(LWt,"camembert"),LWt.forEach(t),Xqr=r(XXe," \u2014 "),Nee=n(XXe,"A",{href:!0});var yWt=s(Nee);zqr=r(yWt,"TFCamembertForMultipleChoice"),yWt.forEach(t),Wqr=r(XXe," (CamemBERT model)"),XXe.forEach(t),Qqr=i(Te),P3=n(Te,"LI",{});var zXe=s(P3);v5e=n(zXe,"STRONG",{});var xWt=s(v5e);Uqr=r(xWt,"convbert"),xWt.forEach(t),Hqr=r(zXe," \u2014 "),qee=n(zXe,"A",{href:!0});var $Wt=s(qee);Jqr=r($Wt,"TFConvBertForMultipleChoice"),$Wt.forEach(t),Yqr=r(zXe," (ConvBERT model)"),zXe.forEach(t),Kqr=i(Te),B3=n(Te,"LI",{});var WXe=s(B3);F5e=n(WXe,"STRONG",{});var kWt=s(F5e);Zqr=r(kWt,"distilbert"),kWt.forEach(t),ejr=r(WXe," \u2014 "),jee=n(WXe,"A",{href:!0});var SWt=s(jee);ojr=r(SWt,"TFDistilBertForMultipleChoice"),SWt.forEach(t),rjr=r(WXe," (DistilBERT model)"),WXe.forEach(t),tjr=i(Te),I3=n(Te,"LI",{});var QXe=s(I3);T5e=n(QXe,"STRONG",{});var RWt=s(T5e);ajr=r(RWt,"electra"),RWt.forEach(t),njr=r(QXe," \u2014 "),Dee=n(QXe,"A",{href:!0});var PWt=s(Dee);sjr=r(PWt,"TFElectraForMultipleChoice"),PWt.forEach(t),ljr=r(QXe," (ELECTRA model)"),QXe.forEach(t),ijr=i(Te),N3=n(Te,"LI",{});var UXe=s(N3);M5e=n(UXe,"STRONG",{});var BWt=s(M5e);djr=r(BWt,"flaubert"),BWt.forEach(t),cjr=r(UXe," \u2014 "),Gee=n(UXe,"A",{href:!0});var IWt=s(Gee);fjr=r(IWt,"TFFlaubertForMultipleChoice"),IWt.forEach(t),mjr=r(UXe," (FlauBERT model)"),UXe.forEach(t),gjr=i(Te),q3=n(Te,"LI",{});var HXe=s(q3);E5e=n(HXe,"STRONG",{});var NWt=s(E5e);hjr=r(NWt,"funnel"),NWt.forEach(t),pjr=r(HXe," \u2014 "),Oee=n(HXe,"A",{href:!0});var qWt=s(Oee);_jr=r(qWt,"TFFunnelForMultipleChoice"),qWt.forEach(t),ujr=r(HXe," (Funnel Transformer model)"),HXe.forEach(t),bjr=i(Te),j3=n(Te,"LI",{});var JXe=s(j3);C5e=n(JXe,"STRONG",{});var jWt=s(C5e);vjr=r(jWt,"longformer"),jWt.forEach(t),Fjr=r(JXe," \u2014 "),Vee=n(JXe,"A",{href:!0});var DWt=s(Vee);Tjr=r(DWt,"TFLongformerForMultipleChoice"),DWt.forEach(t),Mjr=r(JXe," (Longformer model)"),JXe.forEach(t),Ejr=i(Te),D3=n(Te,"LI",{});var YXe=s(D3);w5e=n(YXe,"STRONG",{});var GWt=s(w5e);Cjr=r(GWt,"mobilebert"),GWt.forEach(t),wjr=r(YXe," \u2014 "),Xee=n(YXe,"A",{href:!0});var OWt=s(Xee);Ajr=r(OWt,"TFMobileBertForMultipleChoice"),OWt.forEach(t),Ljr=r(YXe," (MobileBERT model)"),YXe.forEach(t),yjr=i(Te),G3=n(Te,"LI",{});var KXe=s(G3);A5e=n(KXe,"STRONG",{});var VWt=s(A5e);xjr=r(VWt,"mpnet"),VWt.forEach(t),$jr=r(KXe," \u2014 "),zee=n(KXe,"A",{href:!0});var XWt=s(zee);kjr=r(XWt,"TFMPNetForMultipleChoice"),XWt.forEach(t),Sjr=r(KXe," (MPNet model)"),KXe.forEach(t),Rjr=i(Te),O3=n(Te,"LI",{});var ZXe=s(O3);L5e=n(ZXe,"STRONG",{});var zWt=s(L5e);Pjr=r(zWt,"rembert"),zWt.forEach(t),Bjr=r(ZXe," \u2014 "),Wee=n(ZXe,"A",{href:!0});var WWt=s(Wee);Ijr=r(WWt,"TFRemBertForMultipleChoice"),WWt.forEach(t),Njr=r(ZXe," (RemBERT model)"),ZXe.forEach(t),qjr=i(Te),V3=n(Te,"LI",{});var eze=s(V3);y5e=n(eze,"STRONG",{});var QWt=s(y5e);jjr=r(QWt,"roberta"),QWt.forEach(t),Djr=r(eze," \u2014 "),Qee=n(eze,"A",{href:!0});var UWt=s(Qee);Gjr=r(UWt,"TFRobertaForMultipleChoice"),UWt.forEach(t),Ojr=r(eze," (RoBERTa model)"),eze.forEach(t),Vjr=i(Te),X3=n(Te,"LI",{});var oze=s(X3);x5e=n(oze,"STRONG",{});var HWt=s(x5e);Xjr=r(HWt,"roformer"),HWt.forEach(t),zjr=r(oze," \u2014 "),Uee=n(oze,"A",{href:!0});var JWt=s(Uee);Wjr=r(JWt,"TFRoFormerForMultipleChoice"),JWt.forEach(t),Qjr=r(oze," (RoFormer model)"),oze.forEach(t),Ujr=i(Te),z3=n(Te,"LI",{});var rze=s(z3);$5e=n(rze,"STRONG",{});var YWt=s($5e);Hjr=r(YWt,"xlm"),YWt.forEach(t),Jjr=r(rze," \u2014 "),Hee=n(rze,"A",{href:!0});var KWt=s(Hee);Yjr=r(KWt,"TFXLMForMultipleChoice"),KWt.forEach(t),Kjr=r(rze," (XLM model)"),rze.forEach(t),Zjr=i(Te),W3=n(Te,"LI",{});var tze=s(W3);k5e=n(tze,"STRONG",{});var ZWt=s(k5e);eDr=r(ZWt,"xlm-roberta"),ZWt.forEach(t),oDr=r(tze," \u2014 "),Jee=n(tze,"A",{href:!0});var eQt=s(Jee);rDr=r(eQt,"TFXLMRobertaForMultipleChoice"),eQt.forEach(t),tDr=r(tze," (XLM-RoBERTa model)"),tze.forEach(t),aDr=i(Te),Q3=n(Te,"LI",{});var aze=s(Q3);S5e=n(aze,"STRONG",{});var oQt=s(S5e);nDr=r(oQt,"xlnet"),oQt.forEach(t),sDr=r(aze," \u2014 "),Yee=n(aze,"A",{href:!0});var rQt=s(Yee);lDr=r(rQt,"TFXLNetForMultipleChoice"),rQt.forEach(t),iDr=r(aze," (XLNet model)"),aze.forEach(t),Te.forEach(t),dDr=i(ni),T(U3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),wHe=i(f),Jc=n(f,"H2",{class:!0});var qYe=s(Jc);H3=n(qYe,"A",{id:!0,class:!0,href:!0});var tQt=s(H3);R5e=n(tQt,"SPAN",{});var aQt=s(R5e);T(Z$.$$.fragment,aQt),aQt.forEach(t),tQt.forEach(t),cDr=i(qYe),P5e=n(qYe,"SPAN",{});var nQt=s(P5e);fDr=r(nQt,"TFAutoModelForNextSentencePrediction"),nQt.forEach(t),qYe.forEach(t),AHe=i(f),gr=n(f,"DIV",{class:!0});var si=s(gr);T(ek.$$.fragment,si),mDr=i(si),Yc=n(si,"P",{});var sse=s(Yc);gDr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kee=n(sse,"A",{href:!0});var sQt=s(Kee);hDr=r(sQt,"from_pretrained()"),sQt.forEach(t),pDr=r(sse," class method or the "),Zee=n(sse,"A",{href:!0});var lQt=s(Zee);_Dr=r(lQt,"from_config()"),lQt.forEach(t),uDr=r(sse,` class
method.`),sse.forEach(t),bDr=i(si),ok=n(si,"P",{});var jYe=s(ok);vDr=r(jYe,"This class cannot be instantiated directly using "),B5e=n(jYe,"CODE",{});var iQt=s(B5e);FDr=r(iQt,"__init__()"),iQt.forEach(t),TDr=r(jYe," (throws an error)."),jYe.forEach(t),MDr=i(si),Qt=n(si,"DIV",{class:!0});var $L=s(Qt);T(rk.$$.fragment,$L),EDr=i($L),I5e=n($L,"P",{});var dQt=s(I5e);CDr=r(dQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dQt.forEach(t),wDr=i($L),Kc=n($L,"P",{});var lse=s(Kc);ADr=r(lse,`Note:
Loading a model from its configuration file does `),N5e=n(lse,"STRONG",{});var cQt=s(N5e);LDr=r(cQt,"not"),cQt.forEach(t),yDr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),eoe=n(lse,"A",{href:!0});var fQt=s(eoe);xDr=r(fQt,"from_pretrained()"),fQt.forEach(t),$Dr=r(lse," to load the model weights."),lse.forEach(t),kDr=i($L),T(J3.$$.fragment,$L),$L.forEach(t),SDr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(tk.$$.fragment,li),RDr=i(li),q5e=n(li,"P",{});var mQt=s(q5e);PDr=r(mQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mQt.forEach(t),BDr=i(li),wn=n(li,"P",{});var kL=s(wn);IDr=r(kL,"The model class to instantiate is selected based on the "),j5e=n(kL,"CODE",{});var gQt=s(j5e);NDr=r(gQt,"model_type"),gQt.forEach(t),qDr=r(kL,` property of the config object (either
passed as an argument or loaded from `),D5e=n(kL,"CODE",{});var hQt=s(D5e);jDr=r(hQt,"pretrained_model_name_or_path"),hQt.forEach(t),DDr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=n(kL,"CODE",{});var pQt=s(G5e);GDr=r(pQt,"pretrained_model_name_or_path"),pQt.forEach(t),ODr=r(kL,":"),kL.forEach(t),VDr=i(li),ak=n(li,"UL",{});var DYe=s(ak);Y3=n(DYe,"LI",{});var nze=s(Y3);O5e=n(nze,"STRONG",{});var _Qt=s(O5e);XDr=r(_Qt,"bert"),_Qt.forEach(t),zDr=r(nze," \u2014 "),ooe=n(nze,"A",{href:!0});var uQt=s(ooe);WDr=r(uQt,"TFBertForNextSentencePrediction"),uQt.forEach(t),QDr=r(nze," (BERT model)"),nze.forEach(t),UDr=i(DYe),K3=n(DYe,"LI",{});var sze=s(K3);V5e=n(sze,"STRONG",{});var bQt=s(V5e);HDr=r(bQt,"mobilebert"),bQt.forEach(t),JDr=r(sze," \u2014 "),roe=n(sze,"A",{href:!0});var vQt=s(roe);YDr=r(vQt,"TFMobileBertForNextSentencePrediction"),vQt.forEach(t),KDr=r(sze," (MobileBERT model)"),sze.forEach(t),DYe.forEach(t),ZDr=i(li),T(Z3.$$.fragment,li),li.forEach(t),si.forEach(t),LHe=i(f),Zc=n(f,"H2",{class:!0});var GYe=s(Zc);e5=n(GYe,"A",{id:!0,class:!0,href:!0});var FQt=s(e5);X5e=n(FQt,"SPAN",{});var TQt=s(X5e);T(nk.$$.fragment,TQt),TQt.forEach(t),FQt.forEach(t),eGr=i(GYe),z5e=n(GYe,"SPAN",{});var MQt=s(z5e);oGr=r(MQt,"TFAutoModelForTableQuestionAnswering"),MQt.forEach(t),GYe.forEach(t),yHe=i(f),hr=n(f,"DIV",{class:!0});var ii=s(hr);T(sk.$$.fragment,ii),rGr=i(ii),ef=n(ii,"P",{});var ise=s(ef);tGr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),toe=n(ise,"A",{href:!0});var EQt=s(toe);aGr=r(EQt,"from_pretrained()"),EQt.forEach(t),nGr=r(ise," class method or the "),aoe=n(ise,"A",{href:!0});var CQt=s(aoe);sGr=r(CQt,"from_config()"),CQt.forEach(t),lGr=r(ise,` class
method.`),ise.forEach(t),iGr=i(ii),lk=n(ii,"P",{});var OYe=s(lk);dGr=r(OYe,"This class cannot be instantiated directly using "),W5e=n(OYe,"CODE",{});var wQt=s(W5e);cGr=r(wQt,"__init__()"),wQt.forEach(t),fGr=r(OYe," (throws an error)."),OYe.forEach(t),mGr=i(ii),Ut=n(ii,"DIV",{class:!0});var SL=s(Ut);T(ik.$$.fragment,SL),gGr=i(SL),Q5e=n(SL,"P",{});var AQt=s(Q5e);hGr=r(AQt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),AQt.forEach(t),pGr=i(SL),of=n(SL,"P",{});var dse=s(of);_Gr=r(dse,`Note:
Loading a model from its configuration file does `),U5e=n(dse,"STRONG",{});var LQt=s(U5e);uGr=r(LQt,"not"),LQt.forEach(t),bGr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(dse,"A",{href:!0});var yQt=s(noe);vGr=r(yQt,"from_pretrained()"),yQt.forEach(t),FGr=r(dse," to load the model weights."),dse.forEach(t),TGr=i(SL),T(o5.$$.fragment,SL),SL.forEach(t),MGr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(dk.$$.fragment,di),EGr=i(di),H5e=n(di,"P",{});var xQt=s(H5e);CGr=r(xQt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xQt.forEach(t),wGr=i(di),An=n(di,"P",{});var RL=s(An);AGr=r(RL,"The model class to instantiate is selected based on the "),J5e=n(RL,"CODE",{});var $Qt=s(J5e);LGr=r($Qt,"model_type"),$Qt.forEach(t),yGr=r(RL,` property of the config object (either
passed as an argument or loaded from `),Y5e=n(RL,"CODE",{});var kQt=s(Y5e);xGr=r(kQt,"pretrained_model_name_or_path"),kQt.forEach(t),$Gr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=n(RL,"CODE",{});var SQt=s(K5e);kGr=r(SQt,"pretrained_model_name_or_path"),SQt.forEach(t),SGr=r(RL,":"),RL.forEach(t),RGr=i(di),Z5e=n(di,"UL",{});var RQt=s(Z5e);r5=n(RQt,"LI",{});var lze=s(r5);ewe=n(lze,"STRONG",{});var PQt=s(ewe);PGr=r(PQt,"tapas"),PQt.forEach(t),BGr=r(lze," \u2014 "),soe=n(lze,"A",{href:!0});var BQt=s(soe);IGr=r(BQt,"TFTapasForQuestionAnswering"),BQt.forEach(t),NGr=r(lze," (TAPAS model)"),lze.forEach(t),RQt.forEach(t),qGr=i(di),T(t5.$$.fragment,di),di.forEach(t),ii.forEach(t),xHe=i(f),rf=n(f,"H2",{class:!0});var VYe=s(rf);a5=n(VYe,"A",{id:!0,class:!0,href:!0});var IQt=s(a5);owe=n(IQt,"SPAN",{});var NQt=s(owe);T(ck.$$.fragment,NQt),NQt.forEach(t),IQt.forEach(t),jGr=i(VYe),rwe=n(VYe,"SPAN",{});var qQt=s(rwe);DGr=r(qQt,"TFAutoModelForTokenClassification"),qQt.forEach(t),VYe.forEach(t),$He=i(f),pr=n(f,"DIV",{class:!0});var ci=s(pr);T(fk.$$.fragment,ci),GGr=i(ci),tf=n(ci,"P",{});var cse=s(tf);OGr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),loe=n(cse,"A",{href:!0});var jQt=s(loe);VGr=r(jQt,"from_pretrained()"),jQt.forEach(t),XGr=r(cse," class method or the "),ioe=n(cse,"A",{href:!0});var DQt=s(ioe);zGr=r(DQt,"from_config()"),DQt.forEach(t),WGr=r(cse,` class
method.`),cse.forEach(t),QGr=i(ci),mk=n(ci,"P",{});var XYe=s(mk);UGr=r(XYe,"This class cannot be instantiated directly using "),twe=n(XYe,"CODE",{});var GQt=s(twe);HGr=r(GQt,"__init__()"),GQt.forEach(t),JGr=r(XYe," (throws an error)."),XYe.forEach(t),YGr=i(ci),Ht=n(ci,"DIV",{class:!0});var PL=s(Ht);T(gk.$$.fragment,PL),KGr=i(PL),awe=n(PL,"P",{});var OQt=s(awe);ZGr=r(OQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OQt.forEach(t),eOr=i(PL),af=n(PL,"P",{});var fse=s(af);oOr=r(fse,`Note:
Loading a model from its configuration file does `),nwe=n(fse,"STRONG",{});var VQt=s(nwe);rOr=r(VQt,"not"),VQt.forEach(t),tOr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=n(fse,"A",{href:!0});var XQt=s(doe);aOr=r(XQt,"from_pretrained()"),XQt.forEach(t),nOr=r(fse," to load the model weights."),fse.forEach(t),sOr=i(PL),T(n5.$$.fragment,PL),PL.forEach(t),lOr=i(ci),Xr=n(ci,"DIV",{class:!0});var fi=s(Xr);T(hk.$$.fragment,fi),iOr=i(fi),swe=n(fi,"P",{});var zQt=s(swe);dOr=r(zQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zQt.forEach(t),cOr=i(fi),Ln=n(fi,"P",{});var BL=s(Ln);fOr=r(BL,"The model class to instantiate is selected based on the "),lwe=n(BL,"CODE",{});var WQt=s(lwe);mOr=r(WQt,"model_type"),WQt.forEach(t),gOr=r(BL,` property of the config object (either
passed as an argument or loaded from `),iwe=n(BL,"CODE",{});var QQt=s(iwe);hOr=r(QQt,"pretrained_model_name_or_path"),QQt.forEach(t),pOr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=n(BL,"CODE",{});var UQt=s(dwe);_Or=r(UQt,"pretrained_model_name_or_path"),UQt.forEach(t),uOr=r(BL,":"),BL.forEach(t),bOr=i(fi),ce=n(fi,"UL",{});var pe=s(ce);s5=n(pe,"LI",{});var ize=s(s5);cwe=n(ize,"STRONG",{});var HQt=s(cwe);vOr=r(HQt,"albert"),HQt.forEach(t),FOr=r(ize," \u2014 "),coe=n(ize,"A",{href:!0});var JQt=s(coe);TOr=r(JQt,"TFAlbertForTokenClassification"),JQt.forEach(t),MOr=r(ize," (ALBERT model)"),ize.forEach(t),EOr=i(pe),l5=n(pe,"LI",{});var dze=s(l5);fwe=n(dze,"STRONG",{});var YQt=s(fwe);COr=r(YQt,"bert"),YQt.forEach(t),wOr=r(dze," \u2014 "),foe=n(dze,"A",{href:!0});var KQt=s(foe);AOr=r(KQt,"TFBertForTokenClassification"),KQt.forEach(t),LOr=r(dze," (BERT model)"),dze.forEach(t),yOr=i(pe),i5=n(pe,"LI",{});var cze=s(i5);mwe=n(cze,"STRONG",{});var ZQt=s(mwe);xOr=r(ZQt,"camembert"),ZQt.forEach(t),$Or=r(cze," \u2014 "),moe=n(cze,"A",{href:!0});var eUt=s(moe);kOr=r(eUt,"TFCamembertForTokenClassification"),eUt.forEach(t),SOr=r(cze," (CamemBERT model)"),cze.forEach(t),ROr=i(pe),d5=n(pe,"LI",{});var fze=s(d5);gwe=n(fze,"STRONG",{});var oUt=s(gwe);POr=r(oUt,"convbert"),oUt.forEach(t),BOr=r(fze," \u2014 "),goe=n(fze,"A",{href:!0});var rUt=s(goe);IOr=r(rUt,"TFConvBertForTokenClassification"),rUt.forEach(t),NOr=r(fze," (ConvBERT model)"),fze.forEach(t),qOr=i(pe),c5=n(pe,"LI",{});var mze=s(c5);hwe=n(mze,"STRONG",{});var tUt=s(hwe);jOr=r(tUt,"deberta"),tUt.forEach(t),DOr=r(mze," \u2014 "),hoe=n(mze,"A",{href:!0});var aUt=s(hoe);GOr=r(aUt,"TFDebertaForTokenClassification"),aUt.forEach(t),OOr=r(mze," (DeBERTa model)"),mze.forEach(t),VOr=i(pe),f5=n(pe,"LI",{});var gze=s(f5);pwe=n(gze,"STRONG",{});var nUt=s(pwe);XOr=r(nUt,"deberta-v2"),nUt.forEach(t),zOr=r(gze," \u2014 "),poe=n(gze,"A",{href:!0});var sUt=s(poe);WOr=r(sUt,"TFDebertaV2ForTokenClassification"),sUt.forEach(t),QOr=r(gze," (DeBERTa-v2 model)"),gze.forEach(t),UOr=i(pe),m5=n(pe,"LI",{});var hze=s(m5);_we=n(hze,"STRONG",{});var lUt=s(_we);HOr=r(lUt,"distilbert"),lUt.forEach(t),JOr=r(hze," \u2014 "),_oe=n(hze,"A",{href:!0});var iUt=s(_oe);YOr=r(iUt,"TFDistilBertForTokenClassification"),iUt.forEach(t),KOr=r(hze," (DistilBERT model)"),hze.forEach(t),ZOr=i(pe),g5=n(pe,"LI",{});var pze=s(g5);uwe=n(pze,"STRONG",{});var dUt=s(uwe);eVr=r(dUt,"electra"),dUt.forEach(t),oVr=r(pze," \u2014 "),uoe=n(pze,"A",{href:!0});var cUt=s(uoe);rVr=r(cUt,"TFElectraForTokenClassification"),cUt.forEach(t),tVr=r(pze," (ELECTRA model)"),pze.forEach(t),aVr=i(pe),h5=n(pe,"LI",{});var _ze=s(h5);bwe=n(_ze,"STRONG",{});var fUt=s(bwe);nVr=r(fUt,"flaubert"),fUt.forEach(t),sVr=r(_ze," \u2014 "),boe=n(_ze,"A",{href:!0});var mUt=s(boe);lVr=r(mUt,"TFFlaubertForTokenClassification"),mUt.forEach(t),iVr=r(_ze," (FlauBERT model)"),_ze.forEach(t),dVr=i(pe),p5=n(pe,"LI",{});var uze=s(p5);vwe=n(uze,"STRONG",{});var gUt=s(vwe);cVr=r(gUt,"funnel"),gUt.forEach(t),fVr=r(uze," \u2014 "),voe=n(uze,"A",{href:!0});var hUt=s(voe);mVr=r(hUt,"TFFunnelForTokenClassification"),hUt.forEach(t),gVr=r(uze," (Funnel Transformer model)"),uze.forEach(t),hVr=i(pe),_5=n(pe,"LI",{});var bze=s(_5);Fwe=n(bze,"STRONG",{});var pUt=s(Fwe);pVr=r(pUt,"layoutlm"),pUt.forEach(t),_Vr=r(bze," \u2014 "),Foe=n(bze,"A",{href:!0});var _Ut=s(Foe);uVr=r(_Ut,"TFLayoutLMForTokenClassification"),_Ut.forEach(t),bVr=r(bze," (LayoutLM model)"),bze.forEach(t),vVr=i(pe),u5=n(pe,"LI",{});var vze=s(u5);Twe=n(vze,"STRONG",{});var uUt=s(Twe);FVr=r(uUt,"longformer"),uUt.forEach(t),TVr=r(vze," \u2014 "),Toe=n(vze,"A",{href:!0});var bUt=s(Toe);MVr=r(bUt,"TFLongformerForTokenClassification"),bUt.forEach(t),EVr=r(vze," (Longformer model)"),vze.forEach(t),CVr=i(pe),b5=n(pe,"LI",{});var Fze=s(b5);Mwe=n(Fze,"STRONG",{});var vUt=s(Mwe);wVr=r(vUt,"mobilebert"),vUt.forEach(t),AVr=r(Fze," \u2014 "),Moe=n(Fze,"A",{href:!0});var FUt=s(Moe);LVr=r(FUt,"TFMobileBertForTokenClassification"),FUt.forEach(t),yVr=r(Fze," (MobileBERT model)"),Fze.forEach(t),xVr=i(pe),v5=n(pe,"LI",{});var Tze=s(v5);Ewe=n(Tze,"STRONG",{});var TUt=s(Ewe);$Vr=r(TUt,"mpnet"),TUt.forEach(t),kVr=r(Tze," \u2014 "),Eoe=n(Tze,"A",{href:!0});var MUt=s(Eoe);SVr=r(MUt,"TFMPNetForTokenClassification"),MUt.forEach(t),RVr=r(Tze," (MPNet model)"),Tze.forEach(t),PVr=i(pe),F5=n(pe,"LI",{});var Mze=s(F5);Cwe=n(Mze,"STRONG",{});var EUt=s(Cwe);BVr=r(EUt,"rembert"),EUt.forEach(t),IVr=r(Mze," \u2014 "),Coe=n(Mze,"A",{href:!0});var CUt=s(Coe);NVr=r(CUt,"TFRemBertForTokenClassification"),CUt.forEach(t),qVr=r(Mze," (RemBERT model)"),Mze.forEach(t),jVr=i(pe),T5=n(pe,"LI",{});var Eze=s(T5);wwe=n(Eze,"STRONG",{});var wUt=s(wwe);DVr=r(wUt,"roberta"),wUt.forEach(t),GVr=r(Eze," \u2014 "),woe=n(Eze,"A",{href:!0});var AUt=s(woe);OVr=r(AUt,"TFRobertaForTokenClassification"),AUt.forEach(t),VVr=r(Eze," (RoBERTa model)"),Eze.forEach(t),XVr=i(pe),M5=n(pe,"LI",{});var Cze=s(M5);Awe=n(Cze,"STRONG",{});var LUt=s(Awe);zVr=r(LUt,"roformer"),LUt.forEach(t),WVr=r(Cze," \u2014 "),Aoe=n(Cze,"A",{href:!0});var yUt=s(Aoe);QVr=r(yUt,"TFRoFormerForTokenClassification"),yUt.forEach(t),UVr=r(Cze," (RoFormer model)"),Cze.forEach(t),HVr=i(pe),E5=n(pe,"LI",{});var wze=s(E5);Lwe=n(wze,"STRONG",{});var xUt=s(Lwe);JVr=r(xUt,"xlm"),xUt.forEach(t),YVr=r(wze," \u2014 "),Loe=n(wze,"A",{href:!0});var $Ut=s(Loe);KVr=r($Ut,"TFXLMForTokenClassification"),$Ut.forEach(t),ZVr=r(wze," (XLM model)"),wze.forEach(t),eXr=i(pe),C5=n(pe,"LI",{});var Aze=s(C5);ywe=n(Aze,"STRONG",{});var kUt=s(ywe);oXr=r(kUt,"xlm-roberta"),kUt.forEach(t),rXr=r(Aze," \u2014 "),yoe=n(Aze,"A",{href:!0});var SUt=s(yoe);tXr=r(SUt,"TFXLMRobertaForTokenClassification"),SUt.forEach(t),aXr=r(Aze," (XLM-RoBERTa model)"),Aze.forEach(t),nXr=i(pe),w5=n(pe,"LI",{});var Lze=s(w5);xwe=n(Lze,"STRONG",{});var RUt=s(xwe);sXr=r(RUt,"xlnet"),RUt.forEach(t),lXr=r(Lze," \u2014 "),xoe=n(Lze,"A",{href:!0});var PUt=s(xoe);iXr=r(PUt,"TFXLNetForTokenClassification"),PUt.forEach(t),dXr=r(Lze," (XLNet model)"),Lze.forEach(t),pe.forEach(t),cXr=i(fi),T(A5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),kHe=i(f),nf=n(f,"H2",{class:!0});var zYe=s(nf);L5=n(zYe,"A",{id:!0,class:!0,href:!0});var BUt=s(L5);$we=n(BUt,"SPAN",{});var IUt=s($we);T(pk.$$.fragment,IUt),IUt.forEach(t),BUt.forEach(t),fXr=i(zYe),kwe=n(zYe,"SPAN",{});var NUt=s(kwe);mXr=r(NUt,"TFAutoModelForQuestionAnswering"),NUt.forEach(t),zYe.forEach(t),SHe=i(f),_r=n(f,"DIV",{class:!0});var mi=s(_r);T(_k.$$.fragment,mi),gXr=i(mi),sf=n(mi,"P",{});var mse=s(sf);hXr=r(mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=n(mse,"A",{href:!0});var qUt=s($oe);pXr=r(qUt,"from_pretrained()"),qUt.forEach(t),_Xr=r(mse," class method or the "),koe=n(mse,"A",{href:!0});var jUt=s(koe);uXr=r(jUt,"from_config()"),jUt.forEach(t),bXr=r(mse,` class
method.`),mse.forEach(t),vXr=i(mi),uk=n(mi,"P",{});var WYe=s(uk);FXr=r(WYe,"This class cannot be instantiated directly using "),Swe=n(WYe,"CODE",{});var DUt=s(Swe);TXr=r(DUt,"__init__()"),DUt.forEach(t),MXr=r(WYe," (throws an error)."),WYe.forEach(t),EXr=i(mi),Jt=n(mi,"DIV",{class:!0});var IL=s(Jt);T(bk.$$.fragment,IL),CXr=i(IL),Rwe=n(IL,"P",{});var GUt=s(Rwe);wXr=r(GUt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GUt.forEach(t),AXr=i(IL),lf=n(IL,"P",{});var gse=s(lf);LXr=r(gse,`Note:
Loading a model from its configuration file does `),Pwe=n(gse,"STRONG",{});var OUt=s(Pwe);yXr=r(OUt,"not"),OUt.forEach(t),xXr=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(gse,"A",{href:!0});var VUt=s(Soe);$Xr=r(VUt,"from_pretrained()"),VUt.forEach(t),kXr=r(gse," to load the model weights."),gse.forEach(t),SXr=i(IL),T(y5.$$.fragment,IL),IL.forEach(t),RXr=i(mi),zr=n(mi,"DIV",{class:!0});var gi=s(zr);T(vk.$$.fragment,gi),PXr=i(gi),Bwe=n(gi,"P",{});var XUt=s(Bwe);BXr=r(XUt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XUt.forEach(t),IXr=i(gi),yn=n(gi,"P",{});var NL=s(yn);NXr=r(NL,"The model class to instantiate is selected based on the "),Iwe=n(NL,"CODE",{});var zUt=s(Iwe);qXr=r(zUt,"model_type"),zUt.forEach(t),jXr=r(NL,` property of the config object (either
passed as an argument or loaded from `),Nwe=n(NL,"CODE",{});var WUt=s(Nwe);DXr=r(WUt,"pretrained_model_name_or_path"),WUt.forEach(t),GXr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=n(NL,"CODE",{});var QUt=s(qwe);OXr=r(QUt,"pretrained_model_name_or_path"),QUt.forEach(t),VXr=r(NL,":"),NL.forEach(t),XXr=i(gi),fe=n(gi,"UL",{});var _e=s(fe);x5=n(_e,"LI",{});var yze=s(x5);jwe=n(yze,"STRONG",{});var UUt=s(jwe);zXr=r(UUt,"albert"),UUt.forEach(t),WXr=r(yze," \u2014 "),Roe=n(yze,"A",{href:!0});var HUt=s(Roe);QXr=r(HUt,"TFAlbertForQuestionAnswering"),HUt.forEach(t),UXr=r(yze," (ALBERT model)"),yze.forEach(t),HXr=i(_e),$5=n(_e,"LI",{});var xze=s($5);Dwe=n(xze,"STRONG",{});var JUt=s(Dwe);JXr=r(JUt,"bert"),JUt.forEach(t),YXr=r(xze," \u2014 "),Poe=n(xze,"A",{href:!0});var YUt=s(Poe);KXr=r(YUt,"TFBertForQuestionAnswering"),YUt.forEach(t),ZXr=r(xze," (BERT model)"),xze.forEach(t),ezr=i(_e),k5=n(_e,"LI",{});var $ze=s(k5);Gwe=n($ze,"STRONG",{});var KUt=s(Gwe);ozr=r(KUt,"camembert"),KUt.forEach(t),rzr=r($ze," \u2014 "),Boe=n($ze,"A",{href:!0});var ZUt=s(Boe);tzr=r(ZUt,"TFCamembertForQuestionAnswering"),ZUt.forEach(t),azr=r($ze," (CamemBERT model)"),$ze.forEach(t),nzr=i(_e),S5=n(_e,"LI",{});var kze=s(S5);Owe=n(kze,"STRONG",{});var eHt=s(Owe);szr=r(eHt,"convbert"),eHt.forEach(t),lzr=r(kze," \u2014 "),Ioe=n(kze,"A",{href:!0});var oHt=s(Ioe);izr=r(oHt,"TFConvBertForQuestionAnswering"),oHt.forEach(t),dzr=r(kze," (ConvBERT model)"),kze.forEach(t),czr=i(_e),R5=n(_e,"LI",{});var Sze=s(R5);Vwe=n(Sze,"STRONG",{});var rHt=s(Vwe);fzr=r(rHt,"deberta"),rHt.forEach(t),mzr=r(Sze," \u2014 "),Noe=n(Sze,"A",{href:!0});var tHt=s(Noe);gzr=r(tHt,"TFDebertaForQuestionAnswering"),tHt.forEach(t),hzr=r(Sze," (DeBERTa model)"),Sze.forEach(t),pzr=i(_e),P5=n(_e,"LI",{});var Rze=s(P5);Xwe=n(Rze,"STRONG",{});var aHt=s(Xwe);_zr=r(aHt,"deberta-v2"),aHt.forEach(t),uzr=r(Rze," \u2014 "),qoe=n(Rze,"A",{href:!0});var nHt=s(qoe);bzr=r(nHt,"TFDebertaV2ForQuestionAnswering"),nHt.forEach(t),vzr=r(Rze," (DeBERTa-v2 model)"),Rze.forEach(t),Fzr=i(_e),B5=n(_e,"LI",{});var Pze=s(B5);zwe=n(Pze,"STRONG",{});var sHt=s(zwe);Tzr=r(sHt,"distilbert"),sHt.forEach(t),Mzr=r(Pze," \u2014 "),joe=n(Pze,"A",{href:!0});var lHt=s(joe);Ezr=r(lHt,"TFDistilBertForQuestionAnswering"),lHt.forEach(t),Czr=r(Pze," (DistilBERT model)"),Pze.forEach(t),wzr=i(_e),I5=n(_e,"LI",{});var Bze=s(I5);Wwe=n(Bze,"STRONG",{});var iHt=s(Wwe);Azr=r(iHt,"electra"),iHt.forEach(t),Lzr=r(Bze," \u2014 "),Doe=n(Bze,"A",{href:!0});var dHt=s(Doe);yzr=r(dHt,"TFElectraForQuestionAnswering"),dHt.forEach(t),xzr=r(Bze," (ELECTRA model)"),Bze.forEach(t),$zr=i(_e),N5=n(_e,"LI",{});var Ize=s(N5);Qwe=n(Ize,"STRONG",{});var cHt=s(Qwe);kzr=r(cHt,"flaubert"),cHt.forEach(t),Szr=r(Ize," \u2014 "),Goe=n(Ize,"A",{href:!0});var fHt=s(Goe);Rzr=r(fHt,"TFFlaubertForQuestionAnsweringSimple"),fHt.forEach(t),Pzr=r(Ize," (FlauBERT model)"),Ize.forEach(t),Bzr=i(_e),q5=n(_e,"LI",{});var Nze=s(q5);Uwe=n(Nze,"STRONG",{});var mHt=s(Uwe);Izr=r(mHt,"funnel"),mHt.forEach(t),Nzr=r(Nze," \u2014 "),Ooe=n(Nze,"A",{href:!0});var gHt=s(Ooe);qzr=r(gHt,"TFFunnelForQuestionAnswering"),gHt.forEach(t),jzr=r(Nze," (Funnel Transformer model)"),Nze.forEach(t),Dzr=i(_e),j5=n(_e,"LI",{});var qze=s(j5);Hwe=n(qze,"STRONG",{});var hHt=s(Hwe);Gzr=r(hHt,"gptj"),hHt.forEach(t),Ozr=r(qze," \u2014 "),Voe=n(qze,"A",{href:!0});var pHt=s(Voe);Vzr=r(pHt,"TFGPTJForQuestionAnswering"),pHt.forEach(t),Xzr=r(qze," (GPT-J model)"),qze.forEach(t),zzr=i(_e),D5=n(_e,"LI",{});var jze=s(D5);Jwe=n(jze,"STRONG",{});var _Ht=s(Jwe);Wzr=r(_Ht,"longformer"),_Ht.forEach(t),Qzr=r(jze," \u2014 "),Xoe=n(jze,"A",{href:!0});var uHt=s(Xoe);Uzr=r(uHt,"TFLongformerForQuestionAnswering"),uHt.forEach(t),Hzr=r(jze," (Longformer model)"),jze.forEach(t),Jzr=i(_e),G5=n(_e,"LI",{});var Dze=s(G5);Ywe=n(Dze,"STRONG",{});var bHt=s(Ywe);Yzr=r(bHt,"mobilebert"),bHt.forEach(t),Kzr=r(Dze," \u2014 "),zoe=n(Dze,"A",{href:!0});var vHt=s(zoe);Zzr=r(vHt,"TFMobileBertForQuestionAnswering"),vHt.forEach(t),eWr=r(Dze," (MobileBERT model)"),Dze.forEach(t),oWr=i(_e),O5=n(_e,"LI",{});var Gze=s(O5);Kwe=n(Gze,"STRONG",{});var FHt=s(Kwe);rWr=r(FHt,"mpnet"),FHt.forEach(t),tWr=r(Gze," \u2014 "),Woe=n(Gze,"A",{href:!0});var THt=s(Woe);aWr=r(THt,"TFMPNetForQuestionAnswering"),THt.forEach(t),nWr=r(Gze," (MPNet model)"),Gze.forEach(t),sWr=i(_e),V5=n(_e,"LI",{});var Oze=s(V5);Zwe=n(Oze,"STRONG",{});var MHt=s(Zwe);lWr=r(MHt,"rembert"),MHt.forEach(t),iWr=r(Oze," \u2014 "),Qoe=n(Oze,"A",{href:!0});var EHt=s(Qoe);dWr=r(EHt,"TFRemBertForQuestionAnswering"),EHt.forEach(t),cWr=r(Oze," (RemBERT model)"),Oze.forEach(t),fWr=i(_e),X5=n(_e,"LI",{});var Vze=s(X5);e6e=n(Vze,"STRONG",{});var CHt=s(e6e);mWr=r(CHt,"roberta"),CHt.forEach(t),gWr=r(Vze," \u2014 "),Uoe=n(Vze,"A",{href:!0});var wHt=s(Uoe);hWr=r(wHt,"TFRobertaForQuestionAnswering"),wHt.forEach(t),pWr=r(Vze," (RoBERTa model)"),Vze.forEach(t),_Wr=i(_e),z5=n(_e,"LI",{});var Xze=s(z5);o6e=n(Xze,"STRONG",{});var AHt=s(o6e);uWr=r(AHt,"roformer"),AHt.forEach(t),bWr=r(Xze," \u2014 "),Hoe=n(Xze,"A",{href:!0});var LHt=s(Hoe);vWr=r(LHt,"TFRoFormerForQuestionAnswering"),LHt.forEach(t),FWr=r(Xze," (RoFormer model)"),Xze.forEach(t),TWr=i(_e),W5=n(_e,"LI",{});var zze=s(W5);r6e=n(zze,"STRONG",{});var yHt=s(r6e);MWr=r(yHt,"xlm"),yHt.forEach(t),EWr=r(zze," \u2014 "),Joe=n(zze,"A",{href:!0});var xHt=s(Joe);CWr=r(xHt,"TFXLMForQuestionAnsweringSimple"),xHt.forEach(t),wWr=r(zze," (XLM model)"),zze.forEach(t),AWr=i(_e),Q5=n(_e,"LI",{});var Wze=s(Q5);t6e=n(Wze,"STRONG",{});var $Ht=s(t6e);LWr=r($Ht,"xlm-roberta"),$Ht.forEach(t),yWr=r(Wze," \u2014 "),Yoe=n(Wze,"A",{href:!0});var kHt=s(Yoe);xWr=r(kHt,"TFXLMRobertaForQuestionAnswering"),kHt.forEach(t),$Wr=r(Wze," (XLM-RoBERTa model)"),Wze.forEach(t),kWr=i(_e),U5=n(_e,"LI",{});var Qze=s(U5);a6e=n(Qze,"STRONG",{});var SHt=s(a6e);SWr=r(SHt,"xlnet"),SHt.forEach(t),RWr=r(Qze," \u2014 "),Koe=n(Qze,"A",{href:!0});var RHt=s(Koe);PWr=r(RHt,"TFXLNetForQuestionAnsweringSimple"),RHt.forEach(t),BWr=r(Qze," (XLNet model)"),Qze.forEach(t),_e.forEach(t),IWr=i(gi),T(H5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),RHe=i(f),df=n(f,"H2",{class:!0});var QYe=s(df);J5=n(QYe,"A",{id:!0,class:!0,href:!0});var PHt=s(J5);n6e=n(PHt,"SPAN",{});var BHt=s(n6e);T(Fk.$$.fragment,BHt),BHt.forEach(t),PHt.forEach(t),NWr=i(QYe),s6e=n(QYe,"SPAN",{});var IHt=s(s6e);qWr=r(IHt,"TFAutoModelForVision2Seq"),IHt.forEach(t),QYe.forEach(t),PHe=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(Tk.$$.fragment,hi),jWr=i(hi),cf=n(hi,"P",{});var hse=s(cf);DWr=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zoe=n(hse,"A",{href:!0});var NHt=s(Zoe);GWr=r(NHt,"from_pretrained()"),NHt.forEach(t),OWr=r(hse," class method or the "),ere=n(hse,"A",{href:!0});var qHt=s(ere);VWr=r(qHt,"from_config()"),qHt.forEach(t),XWr=r(hse,` class
method.`),hse.forEach(t),zWr=i(hi),Mk=n(hi,"P",{});var UYe=s(Mk);WWr=r(UYe,"This class cannot be instantiated directly using "),l6e=n(UYe,"CODE",{});var jHt=s(l6e);QWr=r(jHt,"__init__()"),jHt.forEach(t),UWr=r(UYe," (throws an error)."),UYe.forEach(t),HWr=i(hi),Yt=n(hi,"DIV",{class:!0});var qL=s(Yt);T(Ek.$$.fragment,qL),JWr=i(qL),i6e=n(qL,"P",{});var DHt=s(i6e);YWr=r(DHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DHt.forEach(t),KWr=i(qL),ff=n(qL,"P",{});var pse=s(ff);ZWr=r(pse,`Note:
Loading a model from its configuration file does `),d6e=n(pse,"STRONG",{});var GHt=s(d6e);eQr=r(GHt,"not"),GHt.forEach(t),oQr=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ore=n(pse,"A",{href:!0});var OHt=s(ore);rQr=r(OHt,"from_pretrained()"),OHt.forEach(t),tQr=r(pse," to load the model weights."),pse.forEach(t),aQr=i(qL),T(Y5.$$.fragment,qL),qL.forEach(t),nQr=i(hi),Wr=n(hi,"DIV",{class:!0});var pi=s(Wr);T(Ck.$$.fragment,pi),sQr=i(pi),c6e=n(pi,"P",{});var VHt=s(c6e);lQr=r(VHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VHt.forEach(t),iQr=i(pi),xn=n(pi,"P",{});var jL=s(xn);dQr=r(jL,"The model class to instantiate is selected based on the "),f6e=n(jL,"CODE",{});var XHt=s(f6e);cQr=r(XHt,"model_type"),XHt.forEach(t),fQr=r(jL,` property of the config object (either
passed as an argument or loaded from `),m6e=n(jL,"CODE",{});var zHt=s(m6e);mQr=r(zHt,"pretrained_model_name_or_path"),zHt.forEach(t),gQr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=n(jL,"CODE",{});var WHt=s(g6e);hQr=r(WHt,"pretrained_model_name_or_path"),WHt.forEach(t),pQr=r(jL,":"),jL.forEach(t),_Qr=i(pi),h6e=n(pi,"UL",{});var QHt=s(h6e);K5=n(QHt,"LI",{});var Uze=s(K5);p6e=n(Uze,"STRONG",{});var UHt=s(p6e);uQr=r(UHt,"vision-encoder-decoder"),UHt.forEach(t),bQr=r(Uze," \u2014 "),rre=n(Uze,"A",{href:!0});var HHt=s(rre);vQr=r(HHt,"TFVisionEncoderDecoderModel"),HHt.forEach(t),FQr=r(Uze," (Vision Encoder decoder model)"),Uze.forEach(t),QHt.forEach(t),TQr=i(pi),T(Z5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),BHe=i(f),mf=n(f,"H2",{class:!0});var HYe=s(mf);ew=n(HYe,"A",{id:!0,class:!0,href:!0});var JHt=s(ew);_6e=n(JHt,"SPAN",{});var YHt=s(_6e);T(wk.$$.fragment,YHt),YHt.forEach(t),JHt.forEach(t),MQr=i(HYe),u6e=n(HYe,"SPAN",{});var KHt=s(u6e);EQr=r(KHt,"TFAutoModelForSpeechSeq2Seq"),KHt.forEach(t),HYe.forEach(t),IHe=i(f),br=n(f,"DIV",{class:!0});var _i=s(br);T(Ak.$$.fragment,_i),CQr=i(_i),gf=n(_i,"P",{});var _se=s(gf);wQr=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tre=n(_se,"A",{href:!0});var ZHt=s(tre);AQr=r(ZHt,"from_pretrained()"),ZHt.forEach(t),LQr=r(_se," class method or the "),are=n(_se,"A",{href:!0});var eJt=s(are);yQr=r(eJt,"from_config()"),eJt.forEach(t),xQr=r(_se,` class
method.`),_se.forEach(t),$Qr=i(_i),Lk=n(_i,"P",{});var JYe=s(Lk);kQr=r(JYe,"This class cannot be instantiated directly using "),b6e=n(JYe,"CODE",{});var oJt=s(b6e);SQr=r(oJt,"__init__()"),oJt.forEach(t),RQr=r(JYe," (throws an error)."),JYe.forEach(t),PQr=i(_i),Kt=n(_i,"DIV",{class:!0});var DL=s(Kt);T(yk.$$.fragment,DL),BQr=i(DL),v6e=n(DL,"P",{});var rJt=s(v6e);IQr=r(rJt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rJt.forEach(t),NQr=i(DL),hf=n(DL,"P",{});var use=s(hf);qQr=r(use,`Note:
Loading a model from its configuration file does `),F6e=n(use,"STRONG",{});var tJt=s(F6e);jQr=r(tJt,"not"),tJt.forEach(t),DQr=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(use,"A",{href:!0});var aJt=s(nre);GQr=r(aJt,"from_pretrained()"),aJt.forEach(t),OQr=r(use," to load the model weights."),use.forEach(t),VQr=i(DL),T(ow.$$.fragment,DL),DL.forEach(t),XQr=i(_i),Qr=n(_i,"DIV",{class:!0});var ui=s(Qr);T(xk.$$.fragment,ui),zQr=i(ui),T6e=n(ui,"P",{});var nJt=s(T6e);WQr=r(nJt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nJt.forEach(t),QQr=i(ui),$n=n(ui,"P",{});var GL=s($n);UQr=r(GL,"The model class to instantiate is selected based on the "),M6e=n(GL,"CODE",{});var sJt=s(M6e);HQr=r(sJt,"model_type"),sJt.forEach(t),JQr=r(GL,` property of the config object (either
passed as an argument or loaded from `),E6e=n(GL,"CODE",{});var lJt=s(E6e);YQr=r(lJt,"pretrained_model_name_or_path"),lJt.forEach(t),KQr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(GL,"CODE",{});var iJt=s(C6e);ZQr=r(iJt,"pretrained_model_name_or_path"),iJt.forEach(t),eUr=r(GL,":"),GL.forEach(t),oUr=i(ui),w6e=n(ui,"UL",{});var dJt=s(w6e);rw=n(dJt,"LI",{});var Hze=s(rw);A6e=n(Hze,"STRONG",{});var cJt=s(A6e);rUr=r(cJt,"speech_to_text"),cJt.forEach(t),tUr=r(Hze," \u2014 "),sre=n(Hze,"A",{href:!0});var fJt=s(sre);aUr=r(fJt,"TFSpeech2TextForConditionalGeneration"),fJt.forEach(t),nUr=r(Hze," (Speech2Text model)"),Hze.forEach(t),dJt.forEach(t),sUr=i(ui),T(tw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),NHe=i(f),pf=n(f,"H2",{class:!0});var YYe=s(pf);aw=n(YYe,"A",{id:!0,class:!0,href:!0});var mJt=s(aw);L6e=n(mJt,"SPAN",{});var gJt=s(L6e);T($k.$$.fragment,gJt),gJt.forEach(t),mJt.forEach(t),lUr=i(YYe),y6e=n(YYe,"SPAN",{});var hJt=s(y6e);iUr=r(hJt,"FlaxAutoModel"),hJt.forEach(t),YYe.forEach(t),qHe=i(f),vr=n(f,"DIV",{class:!0});var bi=s(vr);T(kk.$$.fragment,bi),dUr=i(bi),_f=n(bi,"P",{});var bse=s(_f);cUr=r(bse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lre=n(bse,"A",{href:!0});var pJt=s(lre);fUr=r(pJt,"from_pretrained()"),pJt.forEach(t),mUr=r(bse," class method or the "),ire=n(bse,"A",{href:!0});var _Jt=s(ire);gUr=r(_Jt,"from_config()"),_Jt.forEach(t),hUr=r(bse,` class
method.`),bse.forEach(t),pUr=i(bi),Sk=n(bi,"P",{});var KYe=s(Sk);_Ur=r(KYe,"This class cannot be instantiated directly using "),x6e=n(KYe,"CODE",{});var uJt=s(x6e);uUr=r(uJt,"__init__()"),uJt.forEach(t),bUr=r(KYe," (throws an error)."),KYe.forEach(t),vUr=i(bi),Zt=n(bi,"DIV",{class:!0});var OL=s(Zt);T(Rk.$$.fragment,OL),FUr=i(OL),$6e=n(OL,"P",{});var bJt=s($6e);TUr=r(bJt,"Instantiates one of the base model classes of the library from a configuration."),bJt.forEach(t),MUr=i(OL),uf=n(OL,"P",{});var vse=s(uf);EUr=r(vse,`Note:
Loading a model from its configuration file does `),k6e=n(vse,"STRONG",{});var vJt=s(k6e);CUr=r(vJt,"not"),vJt.forEach(t),wUr=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=n(vse,"A",{href:!0});var FJt=s(dre);AUr=r(FJt,"from_pretrained()"),FJt.forEach(t),LUr=r(vse," to load the model weights."),vse.forEach(t),yUr=i(OL),T(nw.$$.fragment,OL),OL.forEach(t),xUr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Pk.$$.fragment,vi),$Ur=i(vi),S6e=n(vi,"P",{});var TJt=s(S6e);kUr=r(TJt,"Instantiate one of the base model classes of the library from a pretrained model."),TJt.forEach(t),SUr=i(vi),kn=n(vi,"P",{});var VL=s(kn);RUr=r(VL,"The model class to instantiate is selected based on the "),R6e=n(VL,"CODE",{});var MJt=s(R6e);PUr=r(MJt,"model_type"),MJt.forEach(t),BUr=r(VL,` property of the config object (either
passed as an argument or loaded from `),P6e=n(VL,"CODE",{});var EJt=s(P6e);IUr=r(EJt,"pretrained_model_name_or_path"),EJt.forEach(t),NUr=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B6e=n(VL,"CODE",{});var CJt=s(B6e);qUr=r(CJt,"pretrained_model_name_or_path"),CJt.forEach(t),jUr=r(VL,":"),VL.forEach(t),DUr=i(vi),re=n(vi,"UL",{});var ae=s(re);sw=n(ae,"LI",{});var Jze=s(sw);I6e=n(Jze,"STRONG",{});var wJt=s(I6e);GUr=r(wJt,"albert"),wJt.forEach(t),OUr=r(Jze," \u2014 "),cre=n(Jze,"A",{href:!0});var AJt=s(cre);VUr=r(AJt,"FlaxAlbertModel"),AJt.forEach(t),XUr=r(Jze," (ALBERT model)"),Jze.forEach(t),zUr=i(ae),lw=n(ae,"LI",{});var Yze=s(lw);N6e=n(Yze,"STRONG",{});var LJt=s(N6e);WUr=r(LJt,"bart"),LJt.forEach(t),QUr=r(Yze," \u2014 "),fre=n(Yze,"A",{href:!0});var yJt=s(fre);UUr=r(yJt,"FlaxBartModel"),yJt.forEach(t),HUr=r(Yze," (BART model)"),Yze.forEach(t),JUr=i(ae),iw=n(ae,"LI",{});var Kze=s(iw);q6e=n(Kze,"STRONG",{});var xJt=s(q6e);YUr=r(xJt,"beit"),xJt.forEach(t),KUr=r(Kze," \u2014 "),mre=n(Kze,"A",{href:!0});var $Jt=s(mre);ZUr=r($Jt,"FlaxBeitModel"),$Jt.forEach(t),eHr=r(Kze," (BEiT model)"),Kze.forEach(t),oHr=i(ae),dw=n(ae,"LI",{});var Zze=s(dw);j6e=n(Zze,"STRONG",{});var kJt=s(j6e);rHr=r(kJt,"bert"),kJt.forEach(t),tHr=r(Zze," \u2014 "),gre=n(Zze,"A",{href:!0});var SJt=s(gre);aHr=r(SJt,"FlaxBertModel"),SJt.forEach(t),nHr=r(Zze," (BERT model)"),Zze.forEach(t),sHr=i(ae),cw=n(ae,"LI",{});var eWe=s(cw);D6e=n(eWe,"STRONG",{});var RJt=s(D6e);lHr=r(RJt,"big_bird"),RJt.forEach(t),iHr=r(eWe," \u2014 "),hre=n(eWe,"A",{href:!0});var PJt=s(hre);dHr=r(PJt,"FlaxBigBirdModel"),PJt.forEach(t),cHr=r(eWe," (BigBird model)"),eWe.forEach(t),fHr=i(ae),fw=n(ae,"LI",{});var oWe=s(fw);G6e=n(oWe,"STRONG",{});var BJt=s(G6e);mHr=r(BJt,"blenderbot"),BJt.forEach(t),gHr=r(oWe," \u2014 "),pre=n(oWe,"A",{href:!0});var IJt=s(pre);hHr=r(IJt,"FlaxBlenderbotModel"),IJt.forEach(t),pHr=r(oWe," (Blenderbot model)"),oWe.forEach(t),_Hr=i(ae),mw=n(ae,"LI",{});var rWe=s(mw);O6e=n(rWe,"STRONG",{});var NJt=s(O6e);uHr=r(NJt,"blenderbot-small"),NJt.forEach(t),bHr=r(rWe," \u2014 "),_re=n(rWe,"A",{href:!0});var qJt=s(_re);vHr=r(qJt,"FlaxBlenderbotSmallModel"),qJt.forEach(t),FHr=r(rWe," (BlenderbotSmall model)"),rWe.forEach(t),THr=i(ae),gw=n(ae,"LI",{});var tWe=s(gw);V6e=n(tWe,"STRONG",{});var jJt=s(V6e);MHr=r(jJt,"clip"),jJt.forEach(t),EHr=r(tWe," \u2014 "),ure=n(tWe,"A",{href:!0});var DJt=s(ure);CHr=r(DJt,"FlaxCLIPModel"),DJt.forEach(t),wHr=r(tWe," (CLIP model)"),tWe.forEach(t),AHr=i(ae),hw=n(ae,"LI",{});var aWe=s(hw);X6e=n(aWe,"STRONG",{});var GJt=s(X6e);LHr=r(GJt,"distilbert"),GJt.forEach(t),yHr=r(aWe," \u2014 "),bre=n(aWe,"A",{href:!0});var OJt=s(bre);xHr=r(OJt,"FlaxDistilBertModel"),OJt.forEach(t),$Hr=r(aWe," (DistilBERT model)"),aWe.forEach(t),kHr=i(ae),pw=n(ae,"LI",{});var nWe=s(pw);z6e=n(nWe,"STRONG",{});var VJt=s(z6e);SHr=r(VJt,"electra"),VJt.forEach(t),RHr=r(nWe," \u2014 "),vre=n(nWe,"A",{href:!0});var XJt=s(vre);PHr=r(XJt,"FlaxElectraModel"),XJt.forEach(t),BHr=r(nWe," (ELECTRA model)"),nWe.forEach(t),IHr=i(ae),_w=n(ae,"LI",{});var sWe=s(_w);W6e=n(sWe,"STRONG",{});var zJt=s(W6e);NHr=r(zJt,"gpt2"),zJt.forEach(t),qHr=r(sWe," \u2014 "),Fre=n(sWe,"A",{href:!0});var WJt=s(Fre);jHr=r(WJt,"FlaxGPT2Model"),WJt.forEach(t),DHr=r(sWe," (OpenAI GPT-2 model)"),sWe.forEach(t),GHr=i(ae),uw=n(ae,"LI",{});var lWe=s(uw);Q6e=n(lWe,"STRONG",{});var QJt=s(Q6e);OHr=r(QJt,"gpt_neo"),QJt.forEach(t),VHr=r(lWe," \u2014 "),Tre=n(lWe,"A",{href:!0});var UJt=s(Tre);XHr=r(UJt,"FlaxGPTNeoModel"),UJt.forEach(t),zHr=r(lWe," (GPT Neo model)"),lWe.forEach(t),WHr=i(ae),bw=n(ae,"LI",{});var iWe=s(bw);U6e=n(iWe,"STRONG",{});var HJt=s(U6e);QHr=r(HJt,"gptj"),HJt.forEach(t),UHr=r(iWe," \u2014 "),Mre=n(iWe,"A",{href:!0});var JJt=s(Mre);HHr=r(JJt,"FlaxGPTJModel"),JJt.forEach(t),JHr=r(iWe," (GPT-J model)"),iWe.forEach(t),YHr=i(ae),vw=n(ae,"LI",{});var dWe=s(vw);H6e=n(dWe,"STRONG",{});var YJt=s(H6e);KHr=r(YJt,"longt5"),YJt.forEach(t),ZHr=r(dWe," \u2014 "),Ere=n(dWe,"A",{href:!0});var KJt=s(Ere);eJr=r(KJt,"FlaxLongT5Model"),KJt.forEach(t),oJr=r(dWe," (LongT5 model)"),dWe.forEach(t),rJr=i(ae),Fw=n(ae,"LI",{});var cWe=s(Fw);J6e=n(cWe,"STRONG",{});var ZJt=s(J6e);tJr=r(ZJt,"marian"),ZJt.forEach(t),aJr=r(cWe," \u2014 "),Cre=n(cWe,"A",{href:!0});var eYt=s(Cre);nJr=r(eYt,"FlaxMarianModel"),eYt.forEach(t),sJr=r(cWe," (Marian model)"),cWe.forEach(t),lJr=i(ae),Tw=n(ae,"LI",{});var fWe=s(Tw);Y6e=n(fWe,"STRONG",{});var oYt=s(Y6e);iJr=r(oYt,"mbart"),oYt.forEach(t),dJr=r(fWe," \u2014 "),wre=n(fWe,"A",{href:!0});var rYt=s(wre);cJr=r(rYt,"FlaxMBartModel"),rYt.forEach(t),fJr=r(fWe," (mBART model)"),fWe.forEach(t),mJr=i(ae),Mw=n(ae,"LI",{});var mWe=s(Mw);K6e=n(mWe,"STRONG",{});var tYt=s(K6e);gJr=r(tYt,"mt5"),tYt.forEach(t),hJr=r(mWe," \u2014 "),Are=n(mWe,"A",{href:!0});var aYt=s(Are);pJr=r(aYt,"FlaxMT5Model"),aYt.forEach(t),_Jr=r(mWe," (MT5 model)"),mWe.forEach(t),uJr=i(ae),Ew=n(ae,"LI",{});var gWe=s(Ew);Z6e=n(gWe,"STRONG",{});var nYt=s(Z6e);bJr=r(nYt,"opt"),nYt.forEach(t),vJr=r(gWe," \u2014 "),Lre=n(gWe,"A",{href:!0});var sYt=s(Lre);FJr=r(sYt,"FlaxOPTModel"),sYt.forEach(t),TJr=r(gWe," (OPT model)"),gWe.forEach(t),MJr=i(ae),Cw=n(ae,"LI",{});var hWe=s(Cw);eAe=n(hWe,"STRONG",{});var lYt=s(eAe);EJr=r(lYt,"pegasus"),lYt.forEach(t),CJr=r(hWe," \u2014 "),yre=n(hWe,"A",{href:!0});var iYt=s(yre);wJr=r(iYt,"FlaxPegasusModel"),iYt.forEach(t),AJr=r(hWe," (Pegasus model)"),hWe.forEach(t),LJr=i(ae),ww=n(ae,"LI",{});var pWe=s(ww);oAe=n(pWe,"STRONG",{});var dYt=s(oAe);yJr=r(dYt,"roberta"),dYt.forEach(t),xJr=r(pWe," \u2014 "),xre=n(pWe,"A",{href:!0});var cYt=s(xre);$Jr=r(cYt,"FlaxRobertaModel"),cYt.forEach(t),kJr=r(pWe," (RoBERTa model)"),pWe.forEach(t),SJr=i(ae),Aw=n(ae,"LI",{});var _We=s(Aw);rAe=n(_We,"STRONG",{});var fYt=s(rAe);RJr=r(fYt,"roformer"),fYt.forEach(t),PJr=r(_We," \u2014 "),$re=n(_We,"A",{href:!0});var mYt=s($re);BJr=r(mYt,"FlaxRoFormerModel"),mYt.forEach(t),IJr=r(_We," (RoFormer model)"),_We.forEach(t),NJr=i(ae),Lw=n(ae,"LI",{});var uWe=s(Lw);tAe=n(uWe,"STRONG",{});var gYt=s(tAe);qJr=r(gYt,"t5"),gYt.forEach(t),jJr=r(uWe," \u2014 "),kre=n(uWe,"A",{href:!0});var hYt=s(kre);DJr=r(hYt,"FlaxT5Model"),hYt.forEach(t),GJr=r(uWe," (T5 model)"),uWe.forEach(t),OJr=i(ae),yw=n(ae,"LI",{});var bWe=s(yw);aAe=n(bWe,"STRONG",{});var pYt=s(aAe);VJr=r(pYt,"vision-text-dual-encoder"),pYt.forEach(t),XJr=r(bWe," \u2014 "),Sre=n(bWe,"A",{href:!0});var _Yt=s(Sre);zJr=r(_Yt,"FlaxVisionTextDualEncoderModel"),_Yt.forEach(t),WJr=r(bWe," (VisionTextDualEncoder model)"),bWe.forEach(t),QJr=i(ae),xw=n(ae,"LI",{});var vWe=s(xw);nAe=n(vWe,"STRONG",{});var uYt=s(nAe);UJr=r(uYt,"vit"),uYt.forEach(t),HJr=r(vWe," \u2014 "),Rre=n(vWe,"A",{href:!0});var bYt=s(Rre);JJr=r(bYt,"FlaxViTModel"),bYt.forEach(t),YJr=r(vWe," (ViT model)"),vWe.forEach(t),KJr=i(ae),$w=n(ae,"LI",{});var FWe=s($w);sAe=n(FWe,"STRONG",{});var vYt=s(sAe);ZJr=r(vYt,"wav2vec2"),vYt.forEach(t),eYr=r(FWe," \u2014 "),Pre=n(FWe,"A",{href:!0});var FYt=s(Pre);oYr=r(FYt,"FlaxWav2Vec2Model"),FYt.forEach(t),rYr=r(FWe," (Wav2Vec2 model)"),FWe.forEach(t),tYr=i(ae),kw=n(ae,"LI",{});var TWe=s(kw);lAe=n(TWe,"STRONG",{});var TYt=s(lAe);aYr=r(TYt,"xglm"),TYt.forEach(t),nYr=r(TWe," \u2014 "),Bre=n(TWe,"A",{href:!0});var MYt=s(Bre);sYr=r(MYt,"FlaxXGLMModel"),MYt.forEach(t),lYr=r(TWe," (XGLM model)"),TWe.forEach(t),iYr=i(ae),Sw=n(ae,"LI",{});var MWe=s(Sw);iAe=n(MWe,"STRONG",{});var EYt=s(iAe);dYr=r(EYt,"xlm-roberta"),EYt.forEach(t),cYr=r(MWe," \u2014 "),Ire=n(MWe,"A",{href:!0});var CYt=s(Ire);fYr=r(CYt,"FlaxXLMRobertaModel"),CYt.forEach(t),mYr=r(MWe," (XLM-RoBERTa model)"),MWe.forEach(t),ae.forEach(t),gYr=i(vi),T(Rw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),jHe=i(f),bf=n(f,"H2",{class:!0});var ZYe=s(bf);Pw=n(ZYe,"A",{id:!0,class:!0,href:!0});var wYt=s(Pw);dAe=n(wYt,"SPAN",{});var AYt=s(dAe);T(Bk.$$.fragment,AYt),AYt.forEach(t),wYt.forEach(t),hYr=i(ZYe),cAe=n(ZYe,"SPAN",{});var LYt=s(cAe);pYr=r(LYt,"FlaxAutoModelForCausalLM"),LYt.forEach(t),ZYe.forEach(t),DHe=i(f),Fr=n(f,"DIV",{class:!0});var Fi=s(Fr);T(Ik.$$.fragment,Fi),_Yr=i(Fi),vf=n(Fi,"P",{});var Fse=s(vf);uYr=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Nre=n(Fse,"A",{href:!0});var yYt=s(Nre);bYr=r(yYt,"from_pretrained()"),yYt.forEach(t),vYr=r(Fse," class method or the "),qre=n(Fse,"A",{href:!0});var xYt=s(qre);FYr=r(xYt,"from_config()"),xYt.forEach(t),TYr=r(Fse,` class
method.`),Fse.forEach(t),MYr=i(Fi),Nk=n(Fi,"P",{});var eKe=s(Nk);EYr=r(eKe,"This class cannot be instantiated directly using "),fAe=n(eKe,"CODE",{});var $Yt=s(fAe);CYr=r($Yt,"__init__()"),$Yt.forEach(t),wYr=r(eKe," (throws an error)."),eKe.forEach(t),AYr=i(Fi),ea=n(Fi,"DIV",{class:!0});var XL=s(ea);T(qk.$$.fragment,XL),LYr=i(XL),mAe=n(XL,"P",{});var kYt=s(mAe);yYr=r(kYt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kYt.forEach(t),xYr=i(XL),Ff=n(XL,"P",{});var Tse=s(Ff);$Yr=r(Tse,`Note:
Loading a model from its configuration file does `),gAe=n(Tse,"STRONG",{});var SYt=s(gAe);kYr=r(SYt,"not"),SYt.forEach(t),SYr=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=n(Tse,"A",{href:!0});var RYt=s(jre);RYr=r(RYt,"from_pretrained()"),RYt.forEach(t),PYr=r(Tse," to load the model weights."),Tse.forEach(t),BYr=i(XL),T(Bw.$$.fragment,XL),XL.forEach(t),IYr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(jk.$$.fragment,Ti),NYr=i(Ti),hAe=n(Ti,"P",{});var PYt=s(hAe);qYr=r(PYt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PYt.forEach(t),jYr=i(Ti),Sn=n(Ti,"P",{});var zL=s(Sn);DYr=r(zL,"The model class to instantiate is selected based on the "),pAe=n(zL,"CODE",{});var BYt=s(pAe);GYr=r(BYt,"model_type"),BYt.forEach(t),OYr=r(zL,` property of the config object (either
passed as an argument or loaded from `),_Ae=n(zL,"CODE",{});var IYt=s(_Ae);VYr=r(IYt,"pretrained_model_name_or_path"),IYt.forEach(t),XYr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uAe=n(zL,"CODE",{});var NYt=s(uAe);zYr=r(NYt,"pretrained_model_name_or_path"),NYt.forEach(t),WYr=r(zL,":"),zL.forEach(t),QYr=i(Ti),xe=n(Ti,"UL",{});var Ne=s(xe);Iw=n(Ne,"LI",{});var EWe=s(Iw);bAe=n(EWe,"STRONG",{});var qYt=s(bAe);UYr=r(qYt,"bart"),qYt.forEach(t),HYr=r(EWe," \u2014 "),Dre=n(EWe,"A",{href:!0});var jYt=s(Dre);JYr=r(jYt,"FlaxBartForCausalLM"),jYt.forEach(t),YYr=r(EWe," (BART model)"),EWe.forEach(t),KYr=i(Ne),Nw=n(Ne,"LI",{});var CWe=s(Nw);vAe=n(CWe,"STRONG",{});var DYt=s(vAe);ZYr=r(DYt,"bert"),DYt.forEach(t),eKr=r(CWe," \u2014 "),Gre=n(CWe,"A",{href:!0});var GYt=s(Gre);oKr=r(GYt,"FlaxBertForCausalLM"),GYt.forEach(t),rKr=r(CWe," (BERT model)"),CWe.forEach(t),tKr=i(Ne),qw=n(Ne,"LI",{});var wWe=s(qw);FAe=n(wWe,"STRONG",{});var OYt=s(FAe);aKr=r(OYt,"big_bird"),OYt.forEach(t),nKr=r(wWe," \u2014 "),Ore=n(wWe,"A",{href:!0});var VYt=s(Ore);sKr=r(VYt,"FlaxBigBirdForCausalLM"),VYt.forEach(t),lKr=r(wWe," (BigBird model)"),wWe.forEach(t),iKr=i(Ne),jw=n(Ne,"LI",{});var AWe=s(jw);TAe=n(AWe,"STRONG",{});var XYt=s(TAe);dKr=r(XYt,"electra"),XYt.forEach(t),cKr=r(AWe," \u2014 "),Vre=n(AWe,"A",{href:!0});var zYt=s(Vre);fKr=r(zYt,"FlaxElectraForCausalLM"),zYt.forEach(t),mKr=r(AWe," (ELECTRA model)"),AWe.forEach(t),gKr=i(Ne),Dw=n(Ne,"LI",{});var LWe=s(Dw);MAe=n(LWe,"STRONG",{});var WYt=s(MAe);hKr=r(WYt,"gpt2"),WYt.forEach(t),pKr=r(LWe," \u2014 "),Xre=n(LWe,"A",{href:!0});var QYt=s(Xre);_Kr=r(QYt,"FlaxGPT2LMHeadModel"),QYt.forEach(t),uKr=r(LWe," (OpenAI GPT-2 model)"),LWe.forEach(t),bKr=i(Ne),Gw=n(Ne,"LI",{});var yWe=s(Gw);EAe=n(yWe,"STRONG",{});var UYt=s(EAe);vKr=r(UYt,"gpt_neo"),UYt.forEach(t),FKr=r(yWe," \u2014 "),zre=n(yWe,"A",{href:!0});var HYt=s(zre);TKr=r(HYt,"FlaxGPTNeoForCausalLM"),HYt.forEach(t),MKr=r(yWe," (GPT Neo model)"),yWe.forEach(t),EKr=i(Ne),Ow=n(Ne,"LI",{});var xWe=s(Ow);CAe=n(xWe,"STRONG",{});var JYt=s(CAe);CKr=r(JYt,"gptj"),JYt.forEach(t),wKr=r(xWe," \u2014 "),Wre=n(xWe,"A",{href:!0});var YYt=s(Wre);AKr=r(YYt,"FlaxGPTJForCausalLM"),YYt.forEach(t),LKr=r(xWe," (GPT-J model)"),xWe.forEach(t),yKr=i(Ne),Vw=n(Ne,"LI",{});var $We=s(Vw);wAe=n($We,"STRONG",{});var KYt=s(wAe);xKr=r(KYt,"opt"),KYt.forEach(t),$Kr=r($We," \u2014 "),Qre=n($We,"A",{href:!0});var ZYt=s(Qre);kKr=r(ZYt,"FlaxOPTForCausalLM"),ZYt.forEach(t),SKr=r($We," (OPT model)"),$We.forEach(t),RKr=i(Ne),Xw=n(Ne,"LI",{});var kWe=s(Xw);AAe=n(kWe,"STRONG",{});var eKt=s(AAe);PKr=r(eKt,"roberta"),eKt.forEach(t),BKr=r(kWe," \u2014 "),Ure=n(kWe,"A",{href:!0});var oKt=s(Ure);IKr=r(oKt,"FlaxRobertaForCausalLM"),oKt.forEach(t),NKr=r(kWe," (RoBERTa model)"),kWe.forEach(t),qKr=i(Ne),zw=n(Ne,"LI",{});var SWe=s(zw);LAe=n(SWe,"STRONG",{});var rKt=s(LAe);jKr=r(rKt,"xglm"),rKt.forEach(t),DKr=r(SWe," \u2014 "),Hre=n(SWe,"A",{href:!0});var tKt=s(Hre);GKr=r(tKt,"FlaxXGLMForCausalLM"),tKt.forEach(t),OKr=r(SWe," (XGLM model)"),SWe.forEach(t),Ne.forEach(t),VKr=i(Ti),T(Ww.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),GHe=i(f),Tf=n(f,"H2",{class:!0});var oKe=s(Tf);Qw=n(oKe,"A",{id:!0,class:!0,href:!0});var aKt=s(Qw);yAe=n(aKt,"SPAN",{});var nKt=s(yAe);T(Dk.$$.fragment,nKt),nKt.forEach(t),aKt.forEach(t),XKr=i(oKe),xAe=n(oKe,"SPAN",{});var sKt=s(xAe);zKr=r(sKt,"FlaxAutoModelForPreTraining"),sKt.forEach(t),oKe.forEach(t),OHe=i(f),Tr=n(f,"DIV",{class:!0});var Mi=s(Tr);T(Gk.$$.fragment,Mi),WKr=i(Mi),Mf=n(Mi,"P",{});var Mse=s(Mf);QKr=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Jre=n(Mse,"A",{href:!0});var lKt=s(Jre);UKr=r(lKt,"from_pretrained()"),lKt.forEach(t),HKr=r(Mse," class method or the "),Yre=n(Mse,"A",{href:!0});var iKt=s(Yre);JKr=r(iKt,"from_config()"),iKt.forEach(t),YKr=r(Mse,` class
method.`),Mse.forEach(t),KKr=i(Mi),Ok=n(Mi,"P",{});var rKe=s(Ok);ZKr=r(rKe,"This class cannot be instantiated directly using "),$Ae=n(rKe,"CODE",{});var dKt=s($Ae);eZr=r(dKt,"__init__()"),dKt.forEach(t),oZr=r(rKe," (throws an error)."),rKe.forEach(t),rZr=i(Mi),oa=n(Mi,"DIV",{class:!0});var WL=s(oa);T(Vk.$$.fragment,WL),tZr=i(WL),kAe=n(WL,"P",{});var cKt=s(kAe);aZr=r(cKt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cKt.forEach(t),nZr=i(WL),Ef=n(WL,"P",{});var Ese=s(Ef);sZr=r(Ese,`Note:
Loading a model from its configuration file does `),SAe=n(Ese,"STRONG",{});var fKt=s(SAe);lZr=r(fKt,"not"),fKt.forEach(t),iZr=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kre=n(Ese,"A",{href:!0});var mKt=s(Kre);dZr=r(mKt,"from_pretrained()"),mKt.forEach(t),cZr=r(Ese," to load the model weights."),Ese.forEach(t),fZr=i(WL),T(Uw.$$.fragment,WL),WL.forEach(t),mZr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Xk.$$.fragment,Ei),gZr=i(Ei),RAe=n(Ei,"P",{});var gKt=s(RAe);hZr=r(gKt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gKt.forEach(t),pZr=i(Ei),Rn=n(Ei,"P",{});var QL=s(Rn);_Zr=r(QL,"The model class to instantiate is selected based on the "),PAe=n(QL,"CODE",{});var hKt=s(PAe);uZr=r(hKt,"model_type"),hKt.forEach(t),bZr=r(QL,` property of the config object (either
passed as an argument or loaded from `),BAe=n(QL,"CODE",{});var pKt=s(BAe);vZr=r(pKt,"pretrained_model_name_or_path"),pKt.forEach(t),FZr=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IAe=n(QL,"CODE",{});var _Kt=s(IAe);TZr=r(_Kt,"pretrained_model_name_or_path"),_Kt.forEach(t),MZr=r(QL,":"),QL.forEach(t),EZr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);Hw=n(we,"LI",{});var RWe=s(Hw);NAe=n(RWe,"STRONG",{});var uKt=s(NAe);CZr=r(uKt,"albert"),uKt.forEach(t),wZr=r(RWe," \u2014 "),Zre=n(RWe,"A",{href:!0});var bKt=s(Zre);AZr=r(bKt,"FlaxAlbertForPreTraining"),bKt.forEach(t),LZr=r(RWe," (ALBERT model)"),RWe.forEach(t),yZr=i(we),Jw=n(we,"LI",{});var PWe=s(Jw);qAe=n(PWe,"STRONG",{});var vKt=s(qAe);xZr=r(vKt,"bart"),vKt.forEach(t),$Zr=r(PWe," \u2014 "),ete=n(PWe,"A",{href:!0});var FKt=s(ete);kZr=r(FKt,"FlaxBartForConditionalGeneration"),FKt.forEach(t),SZr=r(PWe," (BART model)"),PWe.forEach(t),RZr=i(we),Yw=n(we,"LI",{});var BWe=s(Yw);jAe=n(BWe,"STRONG",{});var TKt=s(jAe);PZr=r(TKt,"bert"),TKt.forEach(t),BZr=r(BWe," \u2014 "),ote=n(BWe,"A",{href:!0});var MKt=s(ote);IZr=r(MKt,"FlaxBertForPreTraining"),MKt.forEach(t),NZr=r(BWe," (BERT model)"),BWe.forEach(t),qZr=i(we),Kw=n(we,"LI",{});var IWe=s(Kw);DAe=n(IWe,"STRONG",{});var EKt=s(DAe);jZr=r(EKt,"big_bird"),EKt.forEach(t),DZr=r(IWe," \u2014 "),rte=n(IWe,"A",{href:!0});var CKt=s(rte);GZr=r(CKt,"FlaxBigBirdForPreTraining"),CKt.forEach(t),OZr=r(IWe," (BigBird model)"),IWe.forEach(t),VZr=i(we),Zw=n(we,"LI",{});var NWe=s(Zw);GAe=n(NWe,"STRONG",{});var wKt=s(GAe);XZr=r(wKt,"electra"),wKt.forEach(t),zZr=r(NWe," \u2014 "),tte=n(NWe,"A",{href:!0});var AKt=s(tte);WZr=r(AKt,"FlaxElectraForPreTraining"),AKt.forEach(t),QZr=r(NWe," (ELECTRA model)"),NWe.forEach(t),UZr=i(we),e6=n(we,"LI",{});var qWe=s(e6);OAe=n(qWe,"STRONG",{});var LKt=s(OAe);HZr=r(LKt,"longt5"),LKt.forEach(t),JZr=r(qWe," \u2014 "),ate=n(qWe,"A",{href:!0});var yKt=s(ate);YZr=r(yKt,"FlaxLongT5ForConditionalGeneration"),yKt.forEach(t),KZr=r(qWe," (LongT5 model)"),qWe.forEach(t),ZZr=i(we),o6=n(we,"LI",{});var jWe=s(o6);VAe=n(jWe,"STRONG",{});var xKt=s(VAe);eet=r(xKt,"mbart"),xKt.forEach(t),oet=r(jWe," \u2014 "),nte=n(jWe,"A",{href:!0});var $Kt=s(nte);ret=r($Kt,"FlaxMBartForConditionalGeneration"),$Kt.forEach(t),tet=r(jWe," (mBART model)"),jWe.forEach(t),aet=i(we),r6=n(we,"LI",{});var DWe=s(r6);XAe=n(DWe,"STRONG",{});var kKt=s(XAe);net=r(kKt,"mt5"),kKt.forEach(t),set=r(DWe," \u2014 "),ste=n(DWe,"A",{href:!0});var SKt=s(ste);iet=r(SKt,"FlaxMT5ForConditionalGeneration"),SKt.forEach(t),det=r(DWe," (MT5 model)"),DWe.forEach(t),cet=i(we),t6=n(we,"LI",{});var GWe=s(t6);zAe=n(GWe,"STRONG",{});var RKt=s(zAe);fet=r(RKt,"roberta"),RKt.forEach(t),met=r(GWe," \u2014 "),lte=n(GWe,"A",{href:!0});var PKt=s(lte);get=r(PKt,"FlaxRobertaForMaskedLM"),PKt.forEach(t),het=r(GWe," (RoBERTa model)"),GWe.forEach(t),pet=i(we),a6=n(we,"LI",{});var OWe=s(a6);WAe=n(OWe,"STRONG",{});var BKt=s(WAe);_et=r(BKt,"roformer"),BKt.forEach(t),uet=r(OWe," \u2014 "),ite=n(OWe,"A",{href:!0});var IKt=s(ite);bet=r(IKt,"FlaxRoFormerForMaskedLM"),IKt.forEach(t),vet=r(OWe," (RoFormer model)"),OWe.forEach(t),Fet=i(we),n6=n(we,"LI",{});var VWe=s(n6);QAe=n(VWe,"STRONG",{});var NKt=s(QAe);Tet=r(NKt,"t5"),NKt.forEach(t),Met=r(VWe," \u2014 "),dte=n(VWe,"A",{href:!0});var qKt=s(dte);Eet=r(qKt,"FlaxT5ForConditionalGeneration"),qKt.forEach(t),Cet=r(VWe," (T5 model)"),VWe.forEach(t),wet=i(we),s6=n(we,"LI",{});var XWe=s(s6);UAe=n(XWe,"STRONG",{});var jKt=s(UAe);Aet=r(jKt,"wav2vec2"),jKt.forEach(t),Let=r(XWe," \u2014 "),cte=n(XWe,"A",{href:!0});var DKt=s(cte);yet=r(DKt,"FlaxWav2Vec2ForPreTraining"),DKt.forEach(t),xet=r(XWe," (Wav2Vec2 model)"),XWe.forEach(t),$et=i(we),l6=n(we,"LI",{});var zWe=s(l6);HAe=n(zWe,"STRONG",{});var GKt=s(HAe);ket=r(GKt,"xlm-roberta"),GKt.forEach(t),Set=r(zWe," \u2014 "),fte=n(zWe,"A",{href:!0});var OKt=s(fte);Ret=r(OKt,"FlaxXLMRobertaForMaskedLM"),OKt.forEach(t),Pet=r(zWe," (XLM-RoBERTa model)"),zWe.forEach(t),we.forEach(t),Bet=i(Ei),T(i6.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),VHe=i(f),Cf=n(f,"H2",{class:!0});var tKe=s(Cf);d6=n(tKe,"A",{id:!0,class:!0,href:!0});var VKt=s(d6);JAe=n(VKt,"SPAN",{});var XKt=s(JAe);T(zk.$$.fragment,XKt),XKt.forEach(t),VKt.forEach(t),Iet=i(tKe),YAe=n(tKe,"SPAN",{});var zKt=s(YAe);Net=r(zKt,"FlaxAutoModelForMaskedLM"),zKt.forEach(t),tKe.forEach(t),XHe=i(f),Mr=n(f,"DIV",{class:!0});var Ci=s(Mr);T(Wk.$$.fragment,Ci),qet=i(Ci),wf=n(Ci,"P",{});var Cse=s(wf);jet=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mte=n(Cse,"A",{href:!0});var WKt=s(mte);Det=r(WKt,"from_pretrained()"),WKt.forEach(t),Get=r(Cse," class method or the "),gte=n(Cse,"A",{href:!0});var QKt=s(gte);Oet=r(QKt,"from_config()"),QKt.forEach(t),Vet=r(Cse,` class
method.`),Cse.forEach(t),Xet=i(Ci),Qk=n(Ci,"P",{});var aKe=s(Qk);zet=r(aKe,"This class cannot be instantiated directly using "),KAe=n(aKe,"CODE",{});var UKt=s(KAe);Wet=r(UKt,"__init__()"),UKt.forEach(t),Qet=r(aKe," (throws an error)."),aKe.forEach(t),Uet=i(Ci),ra=n(Ci,"DIV",{class:!0});var UL=s(ra);T(Uk.$$.fragment,UL),Het=i(UL),ZAe=n(UL,"P",{});var HKt=s(ZAe);Jet=r(HKt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HKt.forEach(t),Yet=i(UL),Af=n(UL,"P",{});var wse=s(Af);Ket=r(wse,`Note:
Loading a model from its configuration file does `),e7e=n(wse,"STRONG",{});var JKt=s(e7e);Zet=r(JKt,"not"),JKt.forEach(t),eot=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),hte=n(wse,"A",{href:!0});var YKt=s(hte);oot=r(YKt,"from_pretrained()"),YKt.forEach(t),rot=r(wse," to load the model weights."),wse.forEach(t),tot=i(UL),T(c6.$$.fragment,UL),UL.forEach(t),aot=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Hk.$$.fragment,wi),not=i(wi),o7e=n(wi,"P",{});var KKt=s(o7e);sot=r(KKt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KKt.forEach(t),lot=i(wi),Pn=n(wi,"P",{});var HL=s(Pn);iot=r(HL,"The model class to instantiate is selected based on the "),r7e=n(HL,"CODE",{});var ZKt=s(r7e);dot=r(ZKt,"model_type"),ZKt.forEach(t),cot=r(HL,` property of the config object (either
passed as an argument or loaded from `),t7e=n(HL,"CODE",{});var eZt=s(t7e);fot=r(eZt,"pretrained_model_name_or_path"),eZt.forEach(t),mot=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=n(HL,"CODE",{});var oZt=s(a7e);got=r(oZt,"pretrained_model_name_or_path"),oZt.forEach(t),hot=r(HL,":"),HL.forEach(t),pot=i(wi),$e=n(wi,"UL",{});var qe=s($e);f6=n(qe,"LI",{});var WWe=s(f6);n7e=n(WWe,"STRONG",{});var rZt=s(n7e);_ot=r(rZt,"albert"),rZt.forEach(t),uot=r(WWe," \u2014 "),pte=n(WWe,"A",{href:!0});var tZt=s(pte);bot=r(tZt,"FlaxAlbertForMaskedLM"),tZt.forEach(t),vot=r(WWe," (ALBERT model)"),WWe.forEach(t),Fot=i(qe),m6=n(qe,"LI",{});var QWe=s(m6);s7e=n(QWe,"STRONG",{});var aZt=s(s7e);Tot=r(aZt,"bart"),aZt.forEach(t),Mot=r(QWe," \u2014 "),_te=n(QWe,"A",{href:!0});var nZt=s(_te);Eot=r(nZt,"FlaxBartForConditionalGeneration"),nZt.forEach(t),Cot=r(QWe," (BART model)"),QWe.forEach(t),wot=i(qe),g6=n(qe,"LI",{});var UWe=s(g6);l7e=n(UWe,"STRONG",{});var sZt=s(l7e);Aot=r(sZt,"bert"),sZt.forEach(t),Lot=r(UWe," \u2014 "),ute=n(UWe,"A",{href:!0});var lZt=s(ute);yot=r(lZt,"FlaxBertForMaskedLM"),lZt.forEach(t),xot=r(UWe," (BERT model)"),UWe.forEach(t),$ot=i(qe),h6=n(qe,"LI",{});var HWe=s(h6);i7e=n(HWe,"STRONG",{});var iZt=s(i7e);kot=r(iZt,"big_bird"),iZt.forEach(t),Sot=r(HWe," \u2014 "),bte=n(HWe,"A",{href:!0});var dZt=s(bte);Rot=r(dZt,"FlaxBigBirdForMaskedLM"),dZt.forEach(t),Pot=r(HWe," (BigBird model)"),HWe.forEach(t),Bot=i(qe),p6=n(qe,"LI",{});var JWe=s(p6);d7e=n(JWe,"STRONG",{});var cZt=s(d7e);Iot=r(cZt,"distilbert"),cZt.forEach(t),Not=r(JWe," \u2014 "),vte=n(JWe,"A",{href:!0});var fZt=s(vte);qot=r(fZt,"FlaxDistilBertForMaskedLM"),fZt.forEach(t),jot=r(JWe," (DistilBERT model)"),JWe.forEach(t),Dot=i(qe),_6=n(qe,"LI",{});var YWe=s(_6);c7e=n(YWe,"STRONG",{});var mZt=s(c7e);Got=r(mZt,"electra"),mZt.forEach(t),Oot=r(YWe," \u2014 "),Fte=n(YWe,"A",{href:!0});var gZt=s(Fte);Vot=r(gZt,"FlaxElectraForMaskedLM"),gZt.forEach(t),Xot=r(YWe," (ELECTRA model)"),YWe.forEach(t),zot=i(qe),u6=n(qe,"LI",{});var KWe=s(u6);f7e=n(KWe,"STRONG",{});var hZt=s(f7e);Wot=r(hZt,"mbart"),hZt.forEach(t),Qot=r(KWe," \u2014 "),Tte=n(KWe,"A",{href:!0});var pZt=s(Tte);Uot=r(pZt,"FlaxMBartForConditionalGeneration"),pZt.forEach(t),Hot=r(KWe," (mBART model)"),KWe.forEach(t),Jot=i(qe),b6=n(qe,"LI",{});var ZWe=s(b6);m7e=n(ZWe,"STRONG",{});var _Zt=s(m7e);Yot=r(_Zt,"roberta"),_Zt.forEach(t),Kot=r(ZWe," \u2014 "),Mte=n(ZWe,"A",{href:!0});var uZt=s(Mte);Zot=r(uZt,"FlaxRobertaForMaskedLM"),uZt.forEach(t),ert=r(ZWe," (RoBERTa model)"),ZWe.forEach(t),ort=i(qe),v6=n(qe,"LI",{});var eQe=s(v6);g7e=n(eQe,"STRONG",{});var bZt=s(g7e);rrt=r(bZt,"roformer"),bZt.forEach(t),trt=r(eQe," \u2014 "),Ete=n(eQe,"A",{href:!0});var vZt=s(Ete);art=r(vZt,"FlaxRoFormerForMaskedLM"),vZt.forEach(t),nrt=r(eQe," (RoFormer model)"),eQe.forEach(t),srt=i(qe),F6=n(qe,"LI",{});var oQe=s(F6);h7e=n(oQe,"STRONG",{});var FZt=s(h7e);lrt=r(FZt,"xlm-roberta"),FZt.forEach(t),irt=r(oQe," \u2014 "),Cte=n(oQe,"A",{href:!0});var TZt=s(Cte);drt=r(TZt,"FlaxXLMRobertaForMaskedLM"),TZt.forEach(t),crt=r(oQe," (XLM-RoBERTa model)"),oQe.forEach(t),qe.forEach(t),frt=i(wi),T(T6.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),zHe=i(f),Lf=n(f,"H2",{class:!0});var nKe=s(Lf);M6=n(nKe,"A",{id:!0,class:!0,href:!0});var MZt=s(M6);p7e=n(MZt,"SPAN",{});var EZt=s(p7e);T(Jk.$$.fragment,EZt),EZt.forEach(t),MZt.forEach(t),mrt=i(nKe),_7e=n(nKe,"SPAN",{});var CZt=s(_7e);grt=r(CZt,"FlaxAutoModelForSeq2SeqLM"),CZt.forEach(t),nKe.forEach(t),WHe=i(f),Er=n(f,"DIV",{class:!0});var Ai=s(Er);T(Yk.$$.fragment,Ai),hrt=i(Ai),yf=n(Ai,"P",{});var Ase=s(yf);prt=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wte=n(Ase,"A",{href:!0});var wZt=s(wte);_rt=r(wZt,"from_pretrained()"),wZt.forEach(t),urt=r(Ase," class method or the "),Ate=n(Ase,"A",{href:!0});var AZt=s(Ate);brt=r(AZt,"from_config()"),AZt.forEach(t),vrt=r(Ase,` class
method.`),Ase.forEach(t),Frt=i(Ai),Kk=n(Ai,"P",{});var sKe=s(Kk);Trt=r(sKe,"This class cannot be instantiated directly using "),u7e=n(sKe,"CODE",{});var LZt=s(u7e);Mrt=r(LZt,"__init__()"),LZt.forEach(t),Ert=r(sKe," (throws an error)."),sKe.forEach(t),Crt=i(Ai),ta=n(Ai,"DIV",{class:!0});var JL=s(ta);T(Zk.$$.fragment,JL),wrt=i(JL),b7e=n(JL,"P",{});var yZt=s(b7e);Art=r(yZt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yZt.forEach(t),Lrt=i(JL),xf=n(JL,"P",{});var Lse=s(xf);yrt=r(Lse,`Note:
Loading a model from its configuration file does `),v7e=n(Lse,"STRONG",{});var xZt=s(v7e);xrt=r(xZt,"not"),xZt.forEach(t),$rt=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lte=n(Lse,"A",{href:!0});var $Zt=s(Lte);krt=r($Zt,"from_pretrained()"),$Zt.forEach(t),Srt=r(Lse," to load the model weights."),Lse.forEach(t),Rrt=i(JL),T(E6.$$.fragment,JL),JL.forEach(t),Prt=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(eS.$$.fragment,Li),Brt=i(Li),F7e=n(Li,"P",{});var kZt=s(F7e);Irt=r(kZt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kZt.forEach(t),Nrt=i(Li),Bn=n(Li,"P",{});var YL=s(Bn);qrt=r(YL,"The model class to instantiate is selected based on the "),T7e=n(YL,"CODE",{});var SZt=s(T7e);jrt=r(SZt,"model_type"),SZt.forEach(t),Drt=r(YL,` property of the config object (either
passed as an argument or loaded from `),M7e=n(YL,"CODE",{});var RZt=s(M7e);Grt=r(RZt,"pretrained_model_name_or_path"),RZt.forEach(t),Ort=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=n(YL,"CODE",{});var PZt=s(E7e);Vrt=r(PZt,"pretrained_model_name_or_path"),PZt.forEach(t),Xrt=r(YL,":"),YL.forEach(t),zrt=i(Li),ke=n(Li,"UL",{});var je=s(ke);C6=n(je,"LI",{});var rQe=s(C6);C7e=n(rQe,"STRONG",{});var BZt=s(C7e);Wrt=r(BZt,"bart"),BZt.forEach(t),Qrt=r(rQe," \u2014 "),yte=n(rQe,"A",{href:!0});var IZt=s(yte);Urt=r(IZt,"FlaxBartForConditionalGeneration"),IZt.forEach(t),Hrt=r(rQe," (BART model)"),rQe.forEach(t),Jrt=i(je),w6=n(je,"LI",{});var tQe=s(w6);w7e=n(tQe,"STRONG",{});var NZt=s(w7e);Yrt=r(NZt,"blenderbot"),NZt.forEach(t),Krt=r(tQe," \u2014 "),xte=n(tQe,"A",{href:!0});var qZt=s(xte);Zrt=r(qZt,"FlaxBlenderbotForConditionalGeneration"),qZt.forEach(t),ett=r(tQe," (Blenderbot model)"),tQe.forEach(t),ott=i(je),A6=n(je,"LI",{});var aQe=s(A6);A7e=n(aQe,"STRONG",{});var jZt=s(A7e);rtt=r(jZt,"blenderbot-small"),jZt.forEach(t),ttt=r(aQe," \u2014 "),$te=n(aQe,"A",{href:!0});var DZt=s($te);att=r(DZt,"FlaxBlenderbotSmallForConditionalGeneration"),DZt.forEach(t),ntt=r(aQe," (BlenderbotSmall model)"),aQe.forEach(t),stt=i(je),L6=n(je,"LI",{});var nQe=s(L6);L7e=n(nQe,"STRONG",{});var GZt=s(L7e);ltt=r(GZt,"encoder-decoder"),GZt.forEach(t),itt=r(nQe," \u2014 "),kte=n(nQe,"A",{href:!0});var OZt=s(kte);dtt=r(OZt,"FlaxEncoderDecoderModel"),OZt.forEach(t),ctt=r(nQe," (Encoder decoder model)"),nQe.forEach(t),ftt=i(je),y6=n(je,"LI",{});var sQe=s(y6);y7e=n(sQe,"STRONG",{});var VZt=s(y7e);mtt=r(VZt,"longt5"),VZt.forEach(t),gtt=r(sQe," \u2014 "),Ste=n(sQe,"A",{href:!0});var XZt=s(Ste);htt=r(XZt,"FlaxLongT5ForConditionalGeneration"),XZt.forEach(t),ptt=r(sQe," (LongT5 model)"),sQe.forEach(t),_tt=i(je),x6=n(je,"LI",{});var lQe=s(x6);x7e=n(lQe,"STRONG",{});var zZt=s(x7e);utt=r(zZt,"marian"),zZt.forEach(t),btt=r(lQe," \u2014 "),Rte=n(lQe,"A",{href:!0});var WZt=s(Rte);vtt=r(WZt,"FlaxMarianMTModel"),WZt.forEach(t),Ftt=r(lQe," (Marian model)"),lQe.forEach(t),Ttt=i(je),$6=n(je,"LI",{});var iQe=s($6);$7e=n(iQe,"STRONG",{});var QZt=s($7e);Mtt=r(QZt,"mbart"),QZt.forEach(t),Ett=r(iQe," \u2014 "),Pte=n(iQe,"A",{href:!0});var UZt=s(Pte);Ctt=r(UZt,"FlaxMBartForConditionalGeneration"),UZt.forEach(t),wtt=r(iQe," (mBART model)"),iQe.forEach(t),Att=i(je),k6=n(je,"LI",{});var dQe=s(k6);k7e=n(dQe,"STRONG",{});var HZt=s(k7e);Ltt=r(HZt,"mt5"),HZt.forEach(t),ytt=r(dQe," \u2014 "),Bte=n(dQe,"A",{href:!0});var JZt=s(Bte);xtt=r(JZt,"FlaxMT5ForConditionalGeneration"),JZt.forEach(t),$tt=r(dQe," (MT5 model)"),dQe.forEach(t),ktt=i(je),S6=n(je,"LI",{});var cQe=s(S6);S7e=n(cQe,"STRONG",{});var YZt=s(S7e);Stt=r(YZt,"pegasus"),YZt.forEach(t),Rtt=r(cQe," \u2014 "),Ite=n(cQe,"A",{href:!0});var KZt=s(Ite);Ptt=r(KZt,"FlaxPegasusForConditionalGeneration"),KZt.forEach(t),Btt=r(cQe," (Pegasus model)"),cQe.forEach(t),Itt=i(je),R6=n(je,"LI",{});var fQe=s(R6);R7e=n(fQe,"STRONG",{});var ZZt=s(R7e);Ntt=r(ZZt,"t5"),ZZt.forEach(t),qtt=r(fQe," \u2014 "),Nte=n(fQe,"A",{href:!0});var eea=s(Nte);jtt=r(eea,"FlaxT5ForConditionalGeneration"),eea.forEach(t),Dtt=r(fQe," (T5 model)"),fQe.forEach(t),je.forEach(t),Gtt=i(Li),T(P6.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),QHe=i(f),$f=n(f,"H2",{class:!0});var lKe=s($f);B6=n(lKe,"A",{id:!0,class:!0,href:!0});var oea=s(B6);P7e=n(oea,"SPAN",{});var rea=s(P7e);T(oS.$$.fragment,rea),rea.forEach(t),oea.forEach(t),Ott=i(lKe),B7e=n(lKe,"SPAN",{});var tea=s(B7e);Vtt=r(tea,"FlaxAutoModelForSequenceClassification"),tea.forEach(t),lKe.forEach(t),UHe=i(f),Cr=n(f,"DIV",{class:!0});var yi=s(Cr);T(rS.$$.fragment,yi),Xtt=i(yi),kf=n(yi,"P",{});var yse=s(kf);ztt=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qte=n(yse,"A",{href:!0});var aea=s(qte);Wtt=r(aea,"from_pretrained()"),aea.forEach(t),Qtt=r(yse," class method or the "),jte=n(yse,"A",{href:!0});var nea=s(jte);Utt=r(nea,"from_config()"),nea.forEach(t),Htt=r(yse,` class
method.`),yse.forEach(t),Jtt=i(yi),tS=n(yi,"P",{});var iKe=s(tS);Ytt=r(iKe,"This class cannot be instantiated directly using "),I7e=n(iKe,"CODE",{});var sea=s(I7e);Ktt=r(sea,"__init__()"),sea.forEach(t),Ztt=r(iKe," (throws an error)."),iKe.forEach(t),eat=i(yi),aa=n(yi,"DIV",{class:!0});var KL=s(aa);T(aS.$$.fragment,KL),oat=i(KL),N7e=n(KL,"P",{});var lea=s(N7e);rat=r(lea,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lea.forEach(t),tat=i(KL),Sf=n(KL,"P",{});var xse=s(Sf);aat=r(xse,`Note:
Loading a model from its configuration file does `),q7e=n(xse,"STRONG",{});var iea=s(q7e);nat=r(iea,"not"),iea.forEach(t),sat=r(xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=n(xse,"A",{href:!0});var dea=s(Dte);lat=r(dea,"from_pretrained()"),dea.forEach(t),iat=r(xse," to load the model weights."),xse.forEach(t),dat=i(KL),T(I6.$$.fragment,KL),KL.forEach(t),cat=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(nS.$$.fragment,xi),fat=i(xi),j7e=n(xi,"P",{});var cea=s(j7e);mat=r(cea,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cea.forEach(t),gat=i(xi),In=n(xi,"P",{});var ZL=s(In);hat=r(ZL,"The model class to instantiate is selected based on the "),D7e=n(ZL,"CODE",{});var fea=s(D7e);pat=r(fea,"model_type"),fea.forEach(t),_at=r(ZL,` property of the config object (either
passed as an argument or loaded from `),G7e=n(ZL,"CODE",{});var mea=s(G7e);uat=r(mea,"pretrained_model_name_or_path"),mea.forEach(t),bat=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(ZL,"CODE",{});var gea=s(O7e);vat=r(gea,"pretrained_model_name_or_path"),gea.forEach(t),Fat=r(ZL,":"),ZL.forEach(t),Tat=i(xi),Se=n(xi,"UL",{});var De=s(Se);N6=n(De,"LI",{});var mQe=s(N6);V7e=n(mQe,"STRONG",{});var hea=s(V7e);Mat=r(hea,"albert"),hea.forEach(t),Eat=r(mQe," \u2014 "),Gte=n(mQe,"A",{href:!0});var pea=s(Gte);Cat=r(pea,"FlaxAlbertForSequenceClassification"),pea.forEach(t),wat=r(mQe," (ALBERT model)"),mQe.forEach(t),Aat=i(De),q6=n(De,"LI",{});var gQe=s(q6);X7e=n(gQe,"STRONG",{});var _ea=s(X7e);Lat=r(_ea,"bart"),_ea.forEach(t),yat=r(gQe," \u2014 "),Ote=n(gQe,"A",{href:!0});var uea=s(Ote);xat=r(uea,"FlaxBartForSequenceClassification"),uea.forEach(t),$at=r(gQe," (BART model)"),gQe.forEach(t),kat=i(De),j6=n(De,"LI",{});var hQe=s(j6);z7e=n(hQe,"STRONG",{});var bea=s(z7e);Sat=r(bea,"bert"),bea.forEach(t),Rat=r(hQe," \u2014 "),Vte=n(hQe,"A",{href:!0});var vea=s(Vte);Pat=r(vea,"FlaxBertForSequenceClassification"),vea.forEach(t),Bat=r(hQe," (BERT model)"),hQe.forEach(t),Iat=i(De),D6=n(De,"LI",{});var pQe=s(D6);W7e=n(pQe,"STRONG",{});var Fea=s(W7e);Nat=r(Fea,"big_bird"),Fea.forEach(t),qat=r(pQe," \u2014 "),Xte=n(pQe,"A",{href:!0});var Tea=s(Xte);jat=r(Tea,"FlaxBigBirdForSequenceClassification"),Tea.forEach(t),Dat=r(pQe," (BigBird model)"),pQe.forEach(t),Gat=i(De),G6=n(De,"LI",{});var _Qe=s(G6);Q7e=n(_Qe,"STRONG",{});var Mea=s(Q7e);Oat=r(Mea,"distilbert"),Mea.forEach(t),Vat=r(_Qe," \u2014 "),zte=n(_Qe,"A",{href:!0});var Eea=s(zte);Xat=r(Eea,"FlaxDistilBertForSequenceClassification"),Eea.forEach(t),zat=r(_Qe," (DistilBERT model)"),_Qe.forEach(t),Wat=i(De),O6=n(De,"LI",{});var uQe=s(O6);U7e=n(uQe,"STRONG",{});var Cea=s(U7e);Qat=r(Cea,"electra"),Cea.forEach(t),Uat=r(uQe," \u2014 "),Wte=n(uQe,"A",{href:!0});var wea=s(Wte);Hat=r(wea,"FlaxElectraForSequenceClassification"),wea.forEach(t),Jat=r(uQe," (ELECTRA model)"),uQe.forEach(t),Yat=i(De),V6=n(De,"LI",{});var bQe=s(V6);H7e=n(bQe,"STRONG",{});var Aea=s(H7e);Kat=r(Aea,"mbart"),Aea.forEach(t),Zat=r(bQe," \u2014 "),Qte=n(bQe,"A",{href:!0});var Lea=s(Qte);ent=r(Lea,"FlaxMBartForSequenceClassification"),Lea.forEach(t),ont=r(bQe," (mBART model)"),bQe.forEach(t),rnt=i(De),X6=n(De,"LI",{});var vQe=s(X6);J7e=n(vQe,"STRONG",{});var yea=s(J7e);tnt=r(yea,"roberta"),yea.forEach(t),ant=r(vQe," \u2014 "),Ute=n(vQe,"A",{href:!0});var xea=s(Ute);nnt=r(xea,"FlaxRobertaForSequenceClassification"),xea.forEach(t),snt=r(vQe," (RoBERTa model)"),vQe.forEach(t),lnt=i(De),z6=n(De,"LI",{});var FQe=s(z6);Y7e=n(FQe,"STRONG",{});var $ea=s(Y7e);int=r($ea,"roformer"),$ea.forEach(t),dnt=r(FQe," \u2014 "),Hte=n(FQe,"A",{href:!0});var kea=s(Hte);cnt=r(kea,"FlaxRoFormerForSequenceClassification"),kea.forEach(t),fnt=r(FQe," (RoFormer model)"),FQe.forEach(t),mnt=i(De),W6=n(De,"LI",{});var TQe=s(W6);K7e=n(TQe,"STRONG",{});var Sea=s(K7e);gnt=r(Sea,"xlm-roberta"),Sea.forEach(t),hnt=r(TQe," \u2014 "),Jte=n(TQe,"A",{href:!0});var Rea=s(Jte);pnt=r(Rea,"FlaxXLMRobertaForSequenceClassification"),Rea.forEach(t),_nt=r(TQe," (XLM-RoBERTa model)"),TQe.forEach(t),De.forEach(t),unt=i(xi),T(Q6.$$.fragment,xi),xi.forEach(t),yi.forEach(t),HHe=i(f),Rf=n(f,"H2",{class:!0});var dKe=s(Rf);U6=n(dKe,"A",{id:!0,class:!0,href:!0});var Pea=s(U6);Z7e=n(Pea,"SPAN",{});var Bea=s(Z7e);T(sS.$$.fragment,Bea),Bea.forEach(t),Pea.forEach(t),bnt=i(dKe),eLe=n(dKe,"SPAN",{});var Iea=s(eLe);vnt=r(Iea,"FlaxAutoModelForQuestionAnswering"),Iea.forEach(t),dKe.forEach(t),JHe=i(f),wr=n(f,"DIV",{class:!0});var $i=s(wr);T(lS.$$.fragment,$i),Fnt=i($i),Pf=n($i,"P",{});var $se=s(Pf);Tnt=r($se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yte=n($se,"A",{href:!0});var Nea=s(Yte);Mnt=r(Nea,"from_pretrained()"),Nea.forEach(t),Ent=r($se," class method or the "),Kte=n($se,"A",{href:!0});var qea=s(Kte);Cnt=r(qea,"from_config()"),qea.forEach(t),wnt=r($se,` class
method.`),$se.forEach(t),Ant=i($i),iS=n($i,"P",{});var cKe=s(iS);Lnt=r(cKe,"This class cannot be instantiated directly using "),oLe=n(cKe,"CODE",{});var jea=s(oLe);ynt=r(jea,"__init__()"),jea.forEach(t),xnt=r(cKe," (throws an error)."),cKe.forEach(t),$nt=i($i),na=n($i,"DIV",{class:!0});var ey=s(na);T(dS.$$.fragment,ey),knt=i(ey),rLe=n(ey,"P",{});var Dea=s(rLe);Snt=r(Dea,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dea.forEach(t),Rnt=i(ey),Bf=n(ey,"P",{});var kse=s(Bf);Pnt=r(kse,`Note:
Loading a model from its configuration file does `),tLe=n(kse,"STRONG",{});var Gea=s(tLe);Bnt=r(Gea,"not"),Gea.forEach(t),Int=r(kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zte=n(kse,"A",{href:!0});var Oea=s(Zte);Nnt=r(Oea,"from_pretrained()"),Oea.forEach(t),qnt=r(kse," to load the model weights."),kse.forEach(t),jnt=i(ey),T(H6.$$.fragment,ey),ey.forEach(t),Dnt=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(cS.$$.fragment,ki),Gnt=i(ki),aLe=n(ki,"P",{});var Vea=s(aLe);Ont=r(Vea,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vea.forEach(t),Vnt=i(ki),Nn=n(ki,"P",{});var oy=s(Nn);Xnt=r(oy,"The model class to instantiate is selected based on the "),nLe=n(oy,"CODE",{});var Xea=s(nLe);znt=r(Xea,"model_type"),Xea.forEach(t),Wnt=r(oy,` property of the config object (either
passed as an argument or loaded from `),sLe=n(oy,"CODE",{});var zea=s(sLe);Qnt=r(zea,"pretrained_model_name_or_path"),zea.forEach(t),Unt=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lLe=n(oy,"CODE",{});var Wea=s(lLe);Hnt=r(Wea,"pretrained_model_name_or_path"),Wea.forEach(t),Jnt=r(oy,":"),oy.forEach(t),Ynt=i(ki),Re=n(ki,"UL",{});var Ge=s(Re);J6=n(Ge,"LI",{});var MQe=s(J6);iLe=n(MQe,"STRONG",{});var Qea=s(iLe);Knt=r(Qea,"albert"),Qea.forEach(t),Znt=r(MQe," \u2014 "),eae=n(MQe,"A",{href:!0});var Uea=s(eae);est=r(Uea,"FlaxAlbertForQuestionAnswering"),Uea.forEach(t),ost=r(MQe," (ALBERT model)"),MQe.forEach(t),rst=i(Ge),Y6=n(Ge,"LI",{});var EQe=s(Y6);dLe=n(EQe,"STRONG",{});var Hea=s(dLe);tst=r(Hea,"bart"),Hea.forEach(t),ast=r(EQe," \u2014 "),oae=n(EQe,"A",{href:!0});var Jea=s(oae);nst=r(Jea,"FlaxBartForQuestionAnswering"),Jea.forEach(t),sst=r(EQe," (BART model)"),EQe.forEach(t),lst=i(Ge),K6=n(Ge,"LI",{});var CQe=s(K6);cLe=n(CQe,"STRONG",{});var Yea=s(cLe);ist=r(Yea,"bert"),Yea.forEach(t),dst=r(CQe," \u2014 "),rae=n(CQe,"A",{href:!0});var Kea=s(rae);cst=r(Kea,"FlaxBertForQuestionAnswering"),Kea.forEach(t),fst=r(CQe," (BERT model)"),CQe.forEach(t),mst=i(Ge),Z6=n(Ge,"LI",{});var wQe=s(Z6);fLe=n(wQe,"STRONG",{});var Zea=s(fLe);gst=r(Zea,"big_bird"),Zea.forEach(t),hst=r(wQe," \u2014 "),tae=n(wQe,"A",{href:!0});var eoa=s(tae);pst=r(eoa,"FlaxBigBirdForQuestionAnswering"),eoa.forEach(t),_st=r(wQe," (BigBird model)"),wQe.forEach(t),ust=i(Ge),eA=n(Ge,"LI",{});var AQe=s(eA);mLe=n(AQe,"STRONG",{});var ooa=s(mLe);bst=r(ooa,"distilbert"),ooa.forEach(t),vst=r(AQe," \u2014 "),aae=n(AQe,"A",{href:!0});var roa=s(aae);Fst=r(roa,"FlaxDistilBertForQuestionAnswering"),roa.forEach(t),Tst=r(AQe," (DistilBERT model)"),AQe.forEach(t),Mst=i(Ge),oA=n(Ge,"LI",{});var LQe=s(oA);gLe=n(LQe,"STRONG",{});var toa=s(gLe);Est=r(toa,"electra"),toa.forEach(t),Cst=r(LQe," \u2014 "),nae=n(LQe,"A",{href:!0});var aoa=s(nae);wst=r(aoa,"FlaxElectraForQuestionAnswering"),aoa.forEach(t),Ast=r(LQe," (ELECTRA model)"),LQe.forEach(t),Lst=i(Ge),rA=n(Ge,"LI",{});var yQe=s(rA);hLe=n(yQe,"STRONG",{});var noa=s(hLe);yst=r(noa,"mbart"),noa.forEach(t),xst=r(yQe," \u2014 "),sae=n(yQe,"A",{href:!0});var soa=s(sae);$st=r(soa,"FlaxMBartForQuestionAnswering"),soa.forEach(t),kst=r(yQe," (mBART model)"),yQe.forEach(t),Sst=i(Ge),tA=n(Ge,"LI",{});var xQe=s(tA);pLe=n(xQe,"STRONG",{});var loa=s(pLe);Rst=r(loa,"roberta"),loa.forEach(t),Pst=r(xQe," \u2014 "),lae=n(xQe,"A",{href:!0});var ioa=s(lae);Bst=r(ioa,"FlaxRobertaForQuestionAnswering"),ioa.forEach(t),Ist=r(xQe," (RoBERTa model)"),xQe.forEach(t),Nst=i(Ge),aA=n(Ge,"LI",{});var $Qe=s(aA);_Le=n($Qe,"STRONG",{});var doa=s(_Le);qst=r(doa,"roformer"),doa.forEach(t),jst=r($Qe," \u2014 "),iae=n($Qe,"A",{href:!0});var coa=s(iae);Dst=r(coa,"FlaxRoFormerForQuestionAnswering"),coa.forEach(t),Gst=r($Qe," (RoFormer model)"),$Qe.forEach(t),Ost=i(Ge),nA=n(Ge,"LI",{});var kQe=s(nA);uLe=n(kQe,"STRONG",{});var foa=s(uLe);Vst=r(foa,"xlm-roberta"),foa.forEach(t),Xst=r(kQe," \u2014 "),dae=n(kQe,"A",{href:!0});var moa=s(dae);zst=r(moa,"FlaxXLMRobertaForQuestionAnswering"),moa.forEach(t),Wst=r(kQe," (XLM-RoBERTa model)"),kQe.forEach(t),Ge.forEach(t),Qst=i(ki),T(sA.$$.fragment,ki),ki.forEach(t),$i.forEach(t),YHe=i(f),If=n(f,"H2",{class:!0});var fKe=s(If);lA=n(fKe,"A",{id:!0,class:!0,href:!0});var goa=s(lA);bLe=n(goa,"SPAN",{});var hoa=s(bLe);T(fS.$$.fragment,hoa),hoa.forEach(t),goa.forEach(t),Ust=i(fKe),vLe=n(fKe,"SPAN",{});var poa=s(vLe);Hst=r(poa,"FlaxAutoModelForTokenClassification"),poa.forEach(t),fKe.forEach(t),KHe=i(f),Ar=n(f,"DIV",{class:!0});var Si=s(Ar);T(mS.$$.fragment,Si),Jst=i(Si),Nf=n(Si,"P",{});var Sse=s(Nf);Yst=r(Sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cae=n(Sse,"A",{href:!0});var _oa=s(cae);Kst=r(_oa,"from_pretrained()"),_oa.forEach(t),Zst=r(Sse," class method or the "),fae=n(Sse,"A",{href:!0});var uoa=s(fae);elt=r(uoa,"from_config()"),uoa.forEach(t),olt=r(Sse,` class
method.`),Sse.forEach(t),rlt=i(Si),gS=n(Si,"P",{});var mKe=s(gS);tlt=r(mKe,"This class cannot be instantiated directly using "),FLe=n(mKe,"CODE",{});var boa=s(FLe);alt=r(boa,"__init__()"),boa.forEach(t),nlt=r(mKe," (throws an error)."),mKe.forEach(t),slt=i(Si),sa=n(Si,"DIV",{class:!0});var ry=s(sa);T(hS.$$.fragment,ry),llt=i(ry),TLe=n(ry,"P",{});var voa=s(TLe);ilt=r(voa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),voa.forEach(t),dlt=i(ry),qf=n(ry,"P",{});var Rse=s(qf);clt=r(Rse,`Note:
Loading a model from its configuration file does `),MLe=n(Rse,"STRONG",{});var Foa=s(MLe);flt=r(Foa,"not"),Foa.forEach(t),mlt=r(Rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),mae=n(Rse,"A",{href:!0});var Toa=s(mae);glt=r(Toa,"from_pretrained()"),Toa.forEach(t),hlt=r(Rse," to load the model weights."),Rse.forEach(t),plt=i(ry),T(iA.$$.fragment,ry),ry.forEach(t),_lt=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(pS.$$.fragment,Ri),ult=i(Ri),ELe=n(Ri,"P",{});var Moa=s(ELe);blt=r(Moa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Moa.forEach(t),vlt=i(Ri),qn=n(Ri,"P",{});var ty=s(qn);Flt=r(ty,"The model class to instantiate is selected based on the "),CLe=n(ty,"CODE",{});var Eoa=s(CLe);Tlt=r(Eoa,"model_type"),Eoa.forEach(t),Mlt=r(ty,` property of the config object (either
passed as an argument or loaded from `),wLe=n(ty,"CODE",{});var Coa=s(wLe);Elt=r(Coa,"pretrained_model_name_or_path"),Coa.forEach(t),Clt=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ALe=n(ty,"CODE",{});var woa=s(ALe);wlt=r(woa,"pretrained_model_name_or_path"),woa.forEach(t),Alt=r(ty,":"),ty.forEach(t),Llt=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);dA=n(Co,"LI",{});var SQe=s(dA);LLe=n(SQe,"STRONG",{});var Aoa=s(LLe);ylt=r(Aoa,"albert"),Aoa.forEach(t),xlt=r(SQe," \u2014 "),gae=n(SQe,"A",{href:!0});var Loa=s(gae);$lt=r(Loa,"FlaxAlbertForTokenClassification"),Loa.forEach(t),klt=r(SQe," (ALBERT model)"),SQe.forEach(t),Slt=i(Co),cA=n(Co,"LI",{});var RQe=s(cA);yLe=n(RQe,"STRONG",{});var yoa=s(yLe);Rlt=r(yoa,"bert"),yoa.forEach(t),Plt=r(RQe," \u2014 "),hae=n(RQe,"A",{href:!0});var xoa=s(hae);Blt=r(xoa,"FlaxBertForTokenClassification"),xoa.forEach(t),Ilt=r(RQe," (BERT model)"),RQe.forEach(t),Nlt=i(Co),fA=n(Co,"LI",{});var PQe=s(fA);xLe=n(PQe,"STRONG",{});var $oa=s(xLe);qlt=r($oa,"big_bird"),$oa.forEach(t),jlt=r(PQe," \u2014 "),pae=n(PQe,"A",{href:!0});var koa=s(pae);Dlt=r(koa,"FlaxBigBirdForTokenClassification"),koa.forEach(t),Glt=r(PQe," (BigBird model)"),PQe.forEach(t),Olt=i(Co),mA=n(Co,"LI",{});var BQe=s(mA);$Le=n(BQe,"STRONG",{});var Soa=s($Le);Vlt=r(Soa,"distilbert"),Soa.forEach(t),Xlt=r(BQe," \u2014 "),_ae=n(BQe,"A",{href:!0});var Roa=s(_ae);zlt=r(Roa,"FlaxDistilBertForTokenClassification"),Roa.forEach(t),Wlt=r(BQe," (DistilBERT model)"),BQe.forEach(t),Qlt=i(Co),gA=n(Co,"LI",{});var IQe=s(gA);kLe=n(IQe,"STRONG",{});var Poa=s(kLe);Ult=r(Poa,"electra"),Poa.forEach(t),Hlt=r(IQe," \u2014 "),uae=n(IQe,"A",{href:!0});var Boa=s(uae);Jlt=r(Boa,"FlaxElectraForTokenClassification"),Boa.forEach(t),Ylt=r(IQe," (ELECTRA model)"),IQe.forEach(t),Klt=i(Co),hA=n(Co,"LI",{});var NQe=s(hA);SLe=n(NQe,"STRONG",{});var Ioa=s(SLe);Zlt=r(Ioa,"roberta"),Ioa.forEach(t),eit=r(NQe," \u2014 "),bae=n(NQe,"A",{href:!0});var Noa=s(bae);oit=r(Noa,"FlaxRobertaForTokenClassification"),Noa.forEach(t),rit=r(NQe," (RoBERTa model)"),NQe.forEach(t),tit=i(Co),pA=n(Co,"LI",{});var qQe=s(pA);RLe=n(qQe,"STRONG",{});var qoa=s(RLe);ait=r(qoa,"roformer"),qoa.forEach(t),nit=r(qQe," \u2014 "),vae=n(qQe,"A",{href:!0});var joa=s(vae);sit=r(joa,"FlaxRoFormerForTokenClassification"),joa.forEach(t),lit=r(qQe," (RoFormer model)"),qQe.forEach(t),iit=i(Co),_A=n(Co,"LI",{});var jQe=s(_A);PLe=n(jQe,"STRONG",{});var Doa=s(PLe);dit=r(Doa,"xlm-roberta"),Doa.forEach(t),cit=r(jQe," \u2014 "),Fae=n(jQe,"A",{href:!0});var Goa=s(Fae);fit=r(Goa,"FlaxXLMRobertaForTokenClassification"),Goa.forEach(t),mit=r(jQe," (XLM-RoBERTa model)"),jQe.forEach(t),Co.forEach(t),git=i(Ri),T(uA.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),ZHe=i(f),jf=n(f,"H2",{class:!0});var gKe=s(jf);bA=n(gKe,"A",{id:!0,class:!0,href:!0});var Ooa=s(bA);BLe=n(Ooa,"SPAN",{});var Voa=s(BLe);T(_S.$$.fragment,Voa),Voa.forEach(t),Ooa.forEach(t),hit=i(gKe),ILe=n(gKe,"SPAN",{});var Xoa=s(ILe);pit=r(Xoa,"FlaxAutoModelForMultipleChoice"),Xoa.forEach(t),gKe.forEach(t),eJe=i(f),Lr=n(f,"DIV",{class:!0});var Pi=s(Lr);T(uS.$$.fragment,Pi),_it=i(Pi),Df=n(Pi,"P",{});var Pse=s(Df);uit=r(Pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Tae=n(Pse,"A",{href:!0});var zoa=s(Tae);bit=r(zoa,"from_pretrained()"),zoa.forEach(t),vit=r(Pse," class method or the "),Mae=n(Pse,"A",{href:!0});var Woa=s(Mae);Fit=r(Woa,"from_config()"),Woa.forEach(t),Tit=r(Pse,` class
method.`),Pse.forEach(t),Mit=i(Pi),bS=n(Pi,"P",{});var hKe=s(bS);Eit=r(hKe,"This class cannot be instantiated directly using "),NLe=n(hKe,"CODE",{});var Qoa=s(NLe);Cit=r(Qoa,"__init__()"),Qoa.forEach(t),wit=r(hKe," (throws an error)."),hKe.forEach(t),Ait=i(Pi),la=n(Pi,"DIV",{class:!0});var ay=s(la);T(vS.$$.fragment,ay),Lit=i(ay),qLe=n(ay,"P",{});var Uoa=s(qLe);yit=r(Uoa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Uoa.forEach(t),xit=i(ay),Gf=n(ay,"P",{});var Bse=s(Gf);$it=r(Bse,`Note:
Loading a model from its configuration file does `),jLe=n(Bse,"STRONG",{});var Hoa=s(jLe);kit=r(Hoa,"not"),Hoa.forEach(t),Sit=r(Bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eae=n(Bse,"A",{href:!0});var Joa=s(Eae);Rit=r(Joa,"from_pretrained()"),Joa.forEach(t),Pit=r(Bse," to load the model weights."),Bse.forEach(t),Bit=i(ay),T(vA.$$.fragment,ay),ay.forEach(t),Iit=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(FS.$$.fragment,Bi),Nit=i(Bi),DLe=n(Bi,"P",{});var Yoa=s(DLe);qit=r(Yoa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Yoa.forEach(t),jit=i(Bi),jn=n(Bi,"P",{});var ny=s(jn);Dit=r(ny,"The model class to instantiate is selected based on the "),GLe=n(ny,"CODE",{});var Koa=s(GLe);Git=r(Koa,"model_type"),Koa.forEach(t),Oit=r(ny,` property of the config object (either
passed as an argument or loaded from `),OLe=n(ny,"CODE",{});var Zoa=s(OLe);Vit=r(Zoa,"pretrained_model_name_or_path"),Zoa.forEach(t),Xit=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VLe=n(ny,"CODE",{});var era=s(VLe);zit=r(era,"pretrained_model_name_or_path"),era.forEach(t),Wit=r(ny,":"),ny.forEach(t),Qit=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);FA=n(wo,"LI",{});var DQe=s(FA);XLe=n(DQe,"STRONG",{});var ora=s(XLe);Uit=r(ora,"albert"),ora.forEach(t),Hit=r(DQe," \u2014 "),Cae=n(DQe,"A",{href:!0});var rra=s(Cae);Jit=r(rra,"FlaxAlbertForMultipleChoice"),rra.forEach(t),Yit=r(DQe," (ALBERT model)"),DQe.forEach(t),Kit=i(wo),TA=n(wo,"LI",{});var GQe=s(TA);zLe=n(GQe,"STRONG",{});var tra=s(zLe);Zit=r(tra,"bert"),tra.forEach(t),edt=r(GQe," \u2014 "),wae=n(GQe,"A",{href:!0});var ara=s(wae);odt=r(ara,"FlaxBertForMultipleChoice"),ara.forEach(t),rdt=r(GQe," (BERT model)"),GQe.forEach(t),tdt=i(wo),MA=n(wo,"LI",{});var OQe=s(MA);WLe=n(OQe,"STRONG",{});var nra=s(WLe);adt=r(nra,"big_bird"),nra.forEach(t),ndt=r(OQe," \u2014 "),Aae=n(OQe,"A",{href:!0});var sra=s(Aae);sdt=r(sra,"FlaxBigBirdForMultipleChoice"),sra.forEach(t),ldt=r(OQe," (BigBird model)"),OQe.forEach(t),idt=i(wo),EA=n(wo,"LI",{});var VQe=s(EA);QLe=n(VQe,"STRONG",{});var lra=s(QLe);ddt=r(lra,"distilbert"),lra.forEach(t),cdt=r(VQe," \u2014 "),Lae=n(VQe,"A",{href:!0});var ira=s(Lae);fdt=r(ira,"FlaxDistilBertForMultipleChoice"),ira.forEach(t),mdt=r(VQe," (DistilBERT model)"),VQe.forEach(t),gdt=i(wo),CA=n(wo,"LI",{});var XQe=s(CA);ULe=n(XQe,"STRONG",{});var dra=s(ULe);hdt=r(dra,"electra"),dra.forEach(t),pdt=r(XQe," \u2014 "),yae=n(XQe,"A",{href:!0});var cra=s(yae);_dt=r(cra,"FlaxElectraForMultipleChoice"),cra.forEach(t),udt=r(XQe," (ELECTRA model)"),XQe.forEach(t),bdt=i(wo),wA=n(wo,"LI",{});var zQe=s(wA);HLe=n(zQe,"STRONG",{});var fra=s(HLe);vdt=r(fra,"roberta"),fra.forEach(t),Fdt=r(zQe," \u2014 "),xae=n(zQe,"A",{href:!0});var mra=s(xae);Tdt=r(mra,"FlaxRobertaForMultipleChoice"),mra.forEach(t),Mdt=r(zQe," (RoBERTa model)"),zQe.forEach(t),Edt=i(wo),AA=n(wo,"LI",{});var WQe=s(AA);JLe=n(WQe,"STRONG",{});var gra=s(JLe);Cdt=r(gra,"roformer"),gra.forEach(t),wdt=r(WQe," \u2014 "),$ae=n(WQe,"A",{href:!0});var hra=s($ae);Adt=r(hra,"FlaxRoFormerForMultipleChoice"),hra.forEach(t),Ldt=r(WQe," (RoFormer model)"),WQe.forEach(t),ydt=i(wo),LA=n(wo,"LI",{});var QQe=s(LA);YLe=n(QQe,"STRONG",{});var pra=s(YLe);xdt=r(pra,"xlm-roberta"),pra.forEach(t),$dt=r(QQe," \u2014 "),kae=n(QQe,"A",{href:!0});var _ra=s(kae);kdt=r(_ra,"FlaxXLMRobertaForMultipleChoice"),_ra.forEach(t),Sdt=r(QQe," (XLM-RoBERTa model)"),QQe.forEach(t),wo.forEach(t),Rdt=i(Bi),T(yA.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),oJe=i(f),Of=n(f,"H2",{class:!0});var pKe=s(Of);xA=n(pKe,"A",{id:!0,class:!0,href:!0});var ura=s(xA);KLe=n(ura,"SPAN",{});var bra=s(KLe);T(TS.$$.fragment,bra),bra.forEach(t),ura.forEach(t),Pdt=i(pKe),ZLe=n(pKe,"SPAN",{});var vra=s(ZLe);Bdt=r(vra,"FlaxAutoModelForNextSentencePrediction"),vra.forEach(t),pKe.forEach(t),rJe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(MS.$$.fragment,Ii),Idt=i(Ii),Vf=n(Ii,"P",{});var Ise=s(Vf);Ndt=r(Ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Sae=n(Ise,"A",{href:!0});var Fra=s(Sae);qdt=r(Fra,"from_pretrained()"),Fra.forEach(t),jdt=r(Ise," class method or the "),Rae=n(Ise,"A",{href:!0});var Tra=s(Rae);Ddt=r(Tra,"from_config()"),Tra.forEach(t),Gdt=r(Ise,` class
method.`),Ise.forEach(t),Odt=i(Ii),ES=n(Ii,"P",{});var _Ke=s(ES);Vdt=r(_Ke,"This class cannot be instantiated directly using "),eye=n(_Ke,"CODE",{});var Mra=s(eye);Xdt=r(Mra,"__init__()"),Mra.forEach(t),zdt=r(_Ke," (throws an error)."),_Ke.forEach(t),Wdt=i(Ii),ia=n(Ii,"DIV",{class:!0});var sy=s(ia);T(CS.$$.fragment,sy),Qdt=i(sy),oye=n(sy,"P",{});var Era=s(oye);Udt=r(Era,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Era.forEach(t),Hdt=i(sy),Xf=n(sy,"P",{});var Nse=s(Xf);Jdt=r(Nse,`Note:
Loading a model from its configuration file does `),rye=n(Nse,"STRONG",{});var Cra=s(rye);Ydt=r(Cra,"not"),Cra.forEach(t),Kdt=r(Nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pae=n(Nse,"A",{href:!0});var wra=s(Pae);Zdt=r(wra,"from_pretrained()"),wra.forEach(t),ect=r(Nse," to load the model weights."),Nse.forEach(t),oct=i(sy),T($A.$$.fragment,sy),sy.forEach(t),rct=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(wS.$$.fragment,Ni),tct=i(Ni),tye=n(Ni,"P",{});var Ara=s(tye);act=r(Ara,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ara.forEach(t),nct=i(Ni),Dn=n(Ni,"P",{});var ly=s(Dn);sct=r(ly,"The model class to instantiate is selected based on the "),aye=n(ly,"CODE",{});var Lra=s(aye);lct=r(Lra,"model_type"),Lra.forEach(t),ict=r(ly,` property of the config object (either
passed as an argument or loaded from `),nye=n(ly,"CODE",{});var yra=s(nye);dct=r(yra,"pretrained_model_name_or_path"),yra.forEach(t),cct=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sye=n(ly,"CODE",{});var xra=s(sye);fct=r(xra,"pretrained_model_name_or_path"),xra.forEach(t),mct=r(ly,":"),ly.forEach(t),gct=i(Ni),lye=n(Ni,"UL",{});var $ra=s(lye);kA=n($ra,"LI",{});var UQe=s(kA);iye=n(UQe,"STRONG",{});var kra=s(iye);hct=r(kra,"bert"),kra.forEach(t),pct=r(UQe," \u2014 "),Bae=n(UQe,"A",{href:!0});var Sra=s(Bae);_ct=r(Sra,"FlaxBertForNextSentencePrediction"),Sra.forEach(t),uct=r(UQe," (BERT model)"),UQe.forEach(t),$ra.forEach(t),bct=i(Ni),T(SA.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),tJe=i(f),zf=n(f,"H2",{class:!0});var uKe=s(zf);RA=n(uKe,"A",{id:!0,class:!0,href:!0});var Rra=s(RA);dye=n(Rra,"SPAN",{});var Pra=s(dye);T(AS.$$.fragment,Pra),Pra.forEach(t),Rra.forEach(t),vct=i(uKe),cye=n(uKe,"SPAN",{});var Bra=s(cye);Fct=r(Bra,"FlaxAutoModelForImageClassification"),Bra.forEach(t),uKe.forEach(t),aJe=i(f),xr=n(f,"DIV",{class:!0});var qi=s(xr);T(LS.$$.fragment,qi),Tct=i(qi),Wf=n(qi,"P",{});var qse=s(Wf);Mct=r(qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Iae=n(qse,"A",{href:!0});var Ira=s(Iae);Ect=r(Ira,"from_pretrained()"),Ira.forEach(t),Cct=r(qse," class method or the "),Nae=n(qse,"A",{href:!0});var Nra=s(Nae);wct=r(Nra,"from_config()"),Nra.forEach(t),Act=r(qse,` class
method.`),qse.forEach(t),Lct=i(qi),yS=n(qi,"P",{});var bKe=s(yS);yct=r(bKe,"This class cannot be instantiated directly using "),fye=n(bKe,"CODE",{});var qra=s(fye);xct=r(qra,"__init__()"),qra.forEach(t),$ct=r(bKe," (throws an error)."),bKe.forEach(t),kct=i(qi),da=n(qi,"DIV",{class:!0});var iy=s(da);T(xS.$$.fragment,iy),Sct=i(iy),mye=n(iy,"P",{});var jra=s(mye);Rct=r(jra,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jra.forEach(t),Pct=i(iy),Qf=n(iy,"P",{});var jse=s(Qf);Bct=r(jse,`Note:
Loading a model from its configuration file does `),gye=n(jse,"STRONG",{});var Dra=s(gye);Ict=r(Dra,"not"),Dra.forEach(t),Nct=r(jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qae=n(jse,"A",{href:!0});var Gra=s(qae);qct=r(Gra,"from_pretrained()"),Gra.forEach(t),jct=r(jse," to load the model weights."),jse.forEach(t),Dct=i(iy),T(PA.$$.fragment,iy),iy.forEach(t),Gct=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T($S.$$.fragment,ji),Oct=i(ji),hye=n(ji,"P",{});var Ora=s(hye);Vct=r(Ora,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ora.forEach(t),Xct=i(ji),Gn=n(ji,"P",{});var dy=s(Gn);zct=r(dy,"The model class to instantiate is selected based on the "),pye=n(dy,"CODE",{});var Vra=s(pye);Wct=r(Vra,"model_type"),Vra.forEach(t),Qct=r(dy,` property of the config object (either
passed as an argument or loaded from `),_ye=n(dy,"CODE",{});var Xra=s(_ye);Uct=r(Xra,"pretrained_model_name_or_path"),Xra.forEach(t),Hct=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uye=n(dy,"CODE",{});var zra=s(uye);Jct=r(zra,"pretrained_model_name_or_path"),zra.forEach(t),Yct=r(dy,":"),dy.forEach(t),Kct=i(ji),kS=n(ji,"UL",{});var vKe=s(kS);BA=n(vKe,"LI",{});var HQe=s(BA);bye=n(HQe,"STRONG",{});var Wra=s(bye);Zct=r(Wra,"beit"),Wra.forEach(t),eft=r(HQe," \u2014 "),jae=n(HQe,"A",{href:!0});var Qra=s(jae);oft=r(Qra,"FlaxBeitForImageClassification"),Qra.forEach(t),rft=r(HQe," (BEiT model)"),HQe.forEach(t),tft=i(vKe),IA=n(vKe,"LI",{});var JQe=s(IA);vye=n(JQe,"STRONG",{});var Ura=s(vye);aft=r(Ura,"vit"),Ura.forEach(t),nft=r(JQe," \u2014 "),Dae=n(JQe,"A",{href:!0});var Hra=s(Dae);sft=r(Hra,"FlaxViTForImageClassification"),Hra.forEach(t),lft=r(JQe," (ViT model)"),JQe.forEach(t),vKe.forEach(t),ift=i(ji),T(NA.$$.fragment,ji),ji.forEach(t),qi.forEach(t),nJe=i(f),Uf=n(f,"H2",{class:!0});var FKe=s(Uf);qA=n(FKe,"A",{id:!0,class:!0,href:!0});var Jra=s(qA);Fye=n(Jra,"SPAN",{});var Yra=s(Fye);T(SS.$$.fragment,Yra),Yra.forEach(t),Jra.forEach(t),dft=i(FKe),Tye=n(FKe,"SPAN",{});var Kra=s(Tye);cft=r(Kra,"FlaxAutoModelForVision2Seq"),Kra.forEach(t),FKe.forEach(t),sJe=i(f),$r=n(f,"DIV",{class:!0});var Di=s($r);T(RS.$$.fragment,Di),fft=i(Di),Hf=n(Di,"P",{});var Dse=s(Hf);mft=r(Dse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Gae=n(Dse,"A",{href:!0});var Zra=s(Gae);gft=r(Zra,"from_pretrained()"),Zra.forEach(t),hft=r(Dse," class method or the "),Oae=n(Dse,"A",{href:!0});var eta=s(Oae);pft=r(eta,"from_config()"),eta.forEach(t),_ft=r(Dse,` class
method.`),Dse.forEach(t),uft=i(Di),PS=n(Di,"P",{});var TKe=s(PS);bft=r(TKe,"This class cannot be instantiated directly using "),Mye=n(TKe,"CODE",{});var ota=s(Mye);vft=r(ota,"__init__()"),ota.forEach(t),Fft=r(TKe," (throws an error)."),TKe.forEach(t),Tft=i(Di),ca=n(Di,"DIV",{class:!0});var cy=s(ca);T(BS.$$.fragment,cy),Mft=i(cy),Eye=n(cy,"P",{});var rta=s(Eye);Eft=r(rta,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rta.forEach(t),Cft=i(cy),Jf=n(cy,"P",{});var Gse=s(Jf);wft=r(Gse,`Note:
Loading a model from its configuration file does `),Cye=n(Gse,"STRONG",{});var tta=s(Cye);Aft=r(tta,"not"),tta.forEach(t),Lft=r(Gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vae=n(Gse,"A",{href:!0});var ata=s(Vae);yft=r(ata,"from_pretrained()"),ata.forEach(t),xft=r(Gse," to load the model weights."),Gse.forEach(t),$ft=i(cy),T(jA.$$.fragment,cy),cy.forEach(t),kft=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(IS.$$.fragment,Gi),Sft=i(Gi),wye=n(Gi,"P",{});var nta=s(wye);Rft=r(nta,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),nta.forEach(t),Pft=i(Gi),On=n(Gi,"P",{});var fy=s(On);Bft=r(fy,"The model class to instantiate is selected based on the "),Aye=n(fy,"CODE",{});var sta=s(Aye);Ift=r(sta,"model_type"),sta.forEach(t),Nft=r(fy,` property of the config object (either
passed as an argument or loaded from `),Lye=n(fy,"CODE",{});var lta=s(Lye);qft=r(lta,"pretrained_model_name_or_path"),lta.forEach(t),jft=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yye=n(fy,"CODE",{});var ita=s(yye);Dft=r(ita,"pretrained_model_name_or_path"),ita.forEach(t),Gft=r(fy,":"),fy.forEach(t),Oft=i(Gi),xye=n(Gi,"UL",{});var dta=s(xye);DA=n(dta,"LI",{});var YQe=s(DA);$ye=n(YQe,"STRONG",{});var cta=s($ye);Vft=r(cta,"vision-encoder-decoder"),cta.forEach(t),Xft=r(YQe," \u2014 "),Xae=n(YQe,"A",{href:!0});var fta=s(Xae);zft=r(fta,"FlaxVisionEncoderDecoderModel"),fta.forEach(t),Wft=r(YQe," (Vision Encoder decoder model)"),YQe.forEach(t),dta.forEach(t),Qft=i(Gi),T(GA.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Tna)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Xn,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertModel"),c(am,"id","extending-the-auto-classes"),c(am,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(am,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(sm,"id","transformers.AutoConfig"),c(sm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sm,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(mP,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(gP,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertConfig"),c(hP,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartConfig"),c(pP,"href","/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitConfig"),c(_P,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertConfig"),c(uP,"href","/docs/transformers/pr_18020/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(bP,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdConfig"),c(vP,"href","/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(FP,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(TP,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(MP,"href","/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomConfig"),c(EP,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertConfig"),c(CP,"href","/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineConfig"),c(wP,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPConfig"),c(AP,"href","/docs/transformers/pr_18020/en/model_doc/codegen#transformers.CodeGenConfig"),c(LP,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertConfig"),c(yP,"href","/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextConfig"),c(xP,"href","/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLConfig"),c($P,"href","/docs/transformers/pr_18020/en/model_doc/cvt#transformers.CvtConfig"),c(kP,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(SP,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(RP,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(PP,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaConfig"),c(BP,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(IP,"href","/docs/transformers/pr_18020/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(NP,"href","/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTConfig"),c(qP,"href","/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrConfig"),c(jP,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertConfig"),c(DP,"href","/docs/transformers/pr_18020/en/model_doc/donut#transformers.DonutSwinConfig"),c(GP,"href","/docs/transformers/pr_18020/en/model_doc/dpr#transformers.DPRConfig"),c(OP,"href","/docs/transformers/pr_18020/en/model_doc/dpt#transformers.DPTConfig"),c(VP,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraConfig"),c(XP,"href","/docs/transformers/pr_18020/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(zP,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertConfig"),c(WP,"href","/docs/transformers/pr_18020/en/model_doc/flava#transformers.FlavaConfig"),c(QP,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetConfig"),c(UP,"href","/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTConfig"),c(HP,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelConfig"),c(JP,"href","/docs/transformers/pr_18020/en/model_doc/glpn#transformers.GLPNConfig"),c(YP,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Config"),c(KP,"href","/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ZP,"href","/docs/transformers/pr_18020/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(eB,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJConfig"),c(oB,"href","/docs/transformers/pr_18020/en/model_doc/groupvit#transformers.GroupViTConfig"),c(rB,"href","/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertConfig"),c(tB,"href","/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertConfig"),c(aB,"href","/docs/transformers/pr_18020/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(nB,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(sB,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(lB,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(iB,"href","/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDConfig"),c(dB,"href","/docs/transformers/pr_18020/en/model_doc/levit#transformers.LevitConfig"),c(cB,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerConfig"),c(fB,"href","/docs/transformers/pr_18020/en/model_doc/longt5#transformers.LongT5Config"),c(mB,"href","/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeConfig"),c(gB,"href","/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertConfig"),c(hB,"href","/docs/transformers/pr_18020/en/model_doc/m2m_100#transformers.M2M100Config"),c(pB,"href","/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianConfig"),c(_B,"href","/docs/transformers/pr_18020/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uB,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartConfig"),c(bB,"href","/docs/transformers/pr_18020/en/model_doc/mctct#transformers.MCTCTConfig"),c(vB,"href","/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(FB,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(TB,"href","/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(MB,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetConfig"),c(EB,"href","/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5Config"),c(CB,"href","/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpConfig"),c(wB,"href","/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaConfig"),c(AB,"href","/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(LB,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(yB,"href","/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTConfig"),c(xB,"href","/docs/transformers/pr_18020/en/model_doc/owlvit#transformers.OwlViTConfig"),c($B,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusConfig"),c(kB,"href","/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverConfig"),c(SB,"href","/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartConfig"),c(RB,"href","/docs/transformers/pr_18020/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(PB,"href","/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(BB,"href","/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(IB,"href","/docs/transformers/pr_18020/en/model_doc/rag#transformers.RagConfig"),c(NB,"href","/docs/transformers/pr_18020/en/model_doc/realm#transformers.RealmConfig"),c(qB,"href","/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerConfig"),c(jB,"href","/docs/transformers/pr_18020/en/model_doc/regnet#transformers.RegNetConfig"),c(DB,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertConfig"),c(GB,"href","/docs/transformers/pr_18020/en/model_doc/resnet#transformers.ResNetConfig"),c(OB,"href","/docs/transformers/pr_18020/en/model_doc/retribert#transformers.RetriBertConfig"),c(VB,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaConfig"),c(XB,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerConfig"),c(zB,"href","/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerConfig"),c(WB,"href","/docs/transformers/pr_18020/en/model_doc/sew#transformers.SEWConfig"),c(QB,"href","/docs/transformers/pr_18020/en/model_doc/sew-d#transformers.SEWDConfig"),c(UB,"href","/docs/transformers/pr_18020/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(HB,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(JB,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(YB,"href","/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterConfig"),c(KB,"href","/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(ZB,"href","/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinConfig"),c(eI,"href","/docs/transformers/pr_18020/en/model_doc/swinv2#transformers.Swinv2Config"),c(oI,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Config"),c(rI,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasConfig"),c(tI,"href","/docs/transformers/pr_18020/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(aI,"href","/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(nI,"href","/docs/transformers/pr_18020/en/model_doc/trocr#transformers.TrOCRConfig"),c(sI,"href","/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(lI,"href","/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(iI,"href","/docs/transformers/pr_18020/en/model_doc/van#transformers.VanConfig"),c(dI,"href","/docs/transformers/pr_18020/en/model_doc/videomae#transformers.VideoMAEConfig"),c(cI,"href","/docs/transformers/pr_18020/en/model_doc/vilt#transformers.ViltConfig"),c(fI,"href","/docs/transformers/pr_18020/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(mI,"href","/docs/transformers/pr_18020/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(gI,"href","/docs/transformers/pr_18020/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(hI,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTConfig"),c(pI,"href","/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_I,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(uI,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(bI,"href","/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMConfig"),c(vI,"href","/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMConfig"),c(FI,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMConfig"),c(TI,"href","/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(MI,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(EI,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(CI,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetConfig"),c(wI,"href","/docs/transformers/pr_18020/en/model_doc/yolos#transformers.YolosConfig"),c(AI,"href","/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoTokenizer"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c(LI,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(yI,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertTokenizer"),c(xI,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($I,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartTokenizer"),c(kI,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartTokenizerFast"),c(SI,"href","/docs/transformers/pr_18020/en/model_doc/barthez#transformers.BarthezTokenizer"),c(RI,"href","/docs/transformers/pr_18020/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(PI,"href","/docs/transformers/pr_18020/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(BI,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizer"),c(II,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizerFast"),c(NI,"href","/docs/transformers/pr_18020/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(qI,"href","/docs/transformers/pr_18020/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(jI,"href","/docs/transformers/pr_18020/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(DI,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(GI,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(OI,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(VI,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(XI,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(zI,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(WI,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(QI,"href","/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(UI,"href","/docs/transformers/pr_18020/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(HI,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertTokenizer"),c(JI,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(YI,"href","/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineTokenizer"),c(KI,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPTokenizer"),c(ZI,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(eN,"href","/docs/transformers/pr_18020/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(oN,"href","/docs/transformers/pr_18020/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(rN,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(tN,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(aN,"href","/docs/transformers/pr_18020/en/model_doc/cpm#transformers.CpmTokenizer"),c(nN,"href","/docs/transformers/pr_18020/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(sN,"href","/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(lN,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iN,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dN,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaTokenizer"),c(cN,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fN,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mN,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(gN,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(hN,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pN,"href","/docs/transformers/pr_18020/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(_N,"href","/docs/transformers/pr_18020/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(uN,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraTokenizer"),c(bN,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(vN,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(FN,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetTokenizer"),c(TN,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(MN,"href","/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(EN,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelTokenizer"),c(CN,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(wN,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(AN,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LN,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yN,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(xN,"href","/docs/transformers/pr_18020/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c($N,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kN,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SN,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPTokenizer"),c(RN,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(PN,"href","/docs/transformers/pr_18020/en/model_doc/herbert#transformers.HerbertTokenizer"),c(BN,"href","/docs/transformers/pr_18020/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(IN,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(NN,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qN,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jN,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(DN,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(GN,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(ON,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(VN,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(XN,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(zN,"href","/docs/transformers/pr_18020/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(WN,"href","/docs/transformers/pr_18020/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(QN,"href","/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDTokenizer"),c(UN,"href","/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDTokenizerFast"),c(HN,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerTokenizer"),c(JN,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(YN,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Tokenizer"),c(KN,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5TokenizerFast"),c(ZN,"href","/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeTokenizer"),c(eq,"href","/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(oq,"href","/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(rq,"href","/docs/transformers/pr_18020/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(tq,"href","/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianTokenizer"),c(aq,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartTokenizer"),c(nq,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(sq,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(lq,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(iq,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizer"),c(dq,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizerFast"),c(cq,"href","/docs/transformers/pr_18020/en/model_doc/mluke#transformers.MLukeTokenizer"),c(fq,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(mq,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(gq,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(hq,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(pq,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Tokenizer"),c(_q,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5TokenizerFast"),c(uq,"href","/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpTokenizer"),c(bq,"href","/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(vq,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizer"),c(Fq,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizerFast"),c(Tq,"href","/docs/transformers/pr_18020/en/model_doc/nllb#transformers.NllbTokenizer"),c(Mq,"href","/docs/transformers/pr_18020/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Eq,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertTokenizer"),c(Cq,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(wq,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Aq,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Lq,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yq,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPTokenizer"),c(xq,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($q,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(kq,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Sq,"href","/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Rq,"href","/docs/transformers/pr_18020/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Pq,"href","/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Bq,"href","/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Iq,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizer"),c(Nq,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizerFast"),c(qq,"href","/docs/transformers/pr_18020/en/model_doc/rag#transformers.RagTokenizer"),c(jq,"href","/docs/transformers/pr_18020/en/model_doc/realm#transformers.RealmTokenizer"),c(Dq,"href","/docs/transformers/pr_18020/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Gq,"href","/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Oq,"href","/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Vq,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Xq,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(zq,"href","/docs/transformers/pr_18020/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Wq,"href","/docs/transformers/pr_18020/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Qq,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Uq,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Hq,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Jq,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Yq,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Kq,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Zq,"href","/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterTokenizer"),c(ej,"href","/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(oj,"href","/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(rj,"href","/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(tj,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Tokenizer"),c(aj,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5TokenizerFast"),c(nj,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasTokenizer"),c(sj,"href","/docs/transformers/pr_18020/en/model_doc/tapex#transformers.TapexTokenizer"),c(lj,"href","/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(ij,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizer"),c(dj,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizerFast"),c(cj,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizer"),c(fj,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertTokenizerFast"),c(mj,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gj,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hj,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(pj,"href","/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMTokenizer"),c(_j,"href","/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(uj,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMTokenizer"),c(bj,"href","/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(vj,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Fj,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Tj,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Mj,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Ej,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Cj,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(wj,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertTokenizer"),c(Aj,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"id","transformers.AutoFeatureExtractor"),c(np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(np,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c(Lj,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(yj,"href","/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(xj,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c($j,"href","/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kj,"href","/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Sj,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Rj,"href","/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Pj,"href","/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Bj,"href","/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Ij,"href","/docs/transformers/pr_18020/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Nj,"href","/docs/transformers/pr_18020/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(qj,"href","/docs/transformers/pr_18020/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(jj,"href","/docs/transformers/pr_18020/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Dj,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Gj,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Oj,"href","/docs/transformers/pr_18020/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Vj,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Xj,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(zj,"href","/docs/transformers/pr_18020/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Wj,"href","/docs/transformers/pr_18020/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Qj,"href","/docs/transformers/pr_18020/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Uj,"href","/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Hj,"href","/docs/transformers/pr_18020/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Jj,"href","/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18020/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eD,"href","/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(oD,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(rD,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tD,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aD,"href","/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nD,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sD,"href","/docs/transformers/pr_18020/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(lD,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iD,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dD,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cD,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fD,"href","/docs/transformers/pr_18020/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qp,"id","transformers.AutoProcessor"),c(Qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qp,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(mD,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(gD,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPProcessor"),c(hD,"href","/docs/transformers/pr_18020/en/model_doc/donut#transformers.DonutProcessor"),c(pD,"href","/docs/transformers/pr_18020/en/model_doc/flava#transformers.FlavaProcessor"),c(_D,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPProcessor"),c(uD,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(bD,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(vD,"href","/docs/transformers/pr_18020/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(FD,"href","/docs/transformers/pr_18020/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(TD,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MD,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ED,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(CD,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(wD,"href","/docs/transformers/pr_18020/en/model_doc/trocr#transformers.TrOCRProcessor"),c(AD,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LD,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yD,"href","/docs/transformers/pr_18020/en/model_doc/vilt#transformers.ViltProcessor"),c(xD,"href","/docs/transformers/pr_18020/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c($D,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kD,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SD,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(__,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u_,"id","transformers.AutoModel"),c(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u_,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(RD,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PD,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BD,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ID,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertModel"),c(ND,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartModel"),c(qD,"href","/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitModel"),c(jD,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertModel"),c(DD,"href","/docs/transformers/pr_18020/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(GD,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdModel"),c(OD,"href","/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(VD,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(XD,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(zD,"href","/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomModel"),c(WD,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertModel"),c(QD,"href","/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineModel"),c(UD,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.CLIPModel"),c(HD,"href","/docs/transformers/pr_18020/en/model_doc/codegen#transformers.CodeGenModel"),c(JD,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertModel"),c(YD,"href","/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextModel"),c(KD,"href","/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLModel"),c(ZD,"href","/docs/transformers/pr_18020/en/model_doc/cvt#transformers.CvtModel"),c(eG,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(oG,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(rG,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(tG,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaModel"),c(aG,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(nG,"href","/docs/transformers/pr_18020/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(sG,"href","/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTModel"),c(lG,"href","/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrModel"),c(iG,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertModel"),c(dG,"href","/docs/transformers/pr_18020/en/model_doc/donut#transformers.DonutSwinModel"),c(cG,"href","/docs/transformers/pr_18020/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(fG,"href","/docs/transformers/pr_18020/en/model_doc/dpt#transformers.DPTModel"),c(mG,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraModel"),c(gG,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertModel"),c(hG,"href","/docs/transformers/pr_18020/en/model_doc/flava#transformers.FlavaModel"),c(pG,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetModel"),c(_G,"href","/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTModel"),c(uG,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelModel"),c(bG,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelBaseModel"),c(vG,"href","/docs/transformers/pr_18020/en/model_doc/glpn#transformers.GLPNModel"),c(FG,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2Model"),c(TG,"href","/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(MG,"href","/docs/transformers/pr_18020/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(EG,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJModel"),c(CG,"href","/docs/transformers/pr_18020/en/model_doc/groupvit#transformers.GroupViTModel"),c(wG,"href","/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertModel"),c(AG,"href","/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertModel"),c(LG,"href","/docs/transformers/pr_18020/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(yG,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(xG,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c($G,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(kG,"href","/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDModel"),c(SG,"href","/docs/transformers/pr_18020/en/model_doc/levit#transformers.LevitModel"),c(RG,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerModel"),c(PG,"href","/docs/transformers/pr_18020/en/model_doc/longt5#transformers.LongT5Model"),c(BG,"href","/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeModel"),c(IG,"href","/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertModel"),c(NG,"href","/docs/transformers/pr_18020/en/model_doc/m2m_100#transformers.M2M100Model"),c(qG,"href","/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianModel"),c(jG,"href","/docs/transformers/pr_18020/en/model_doc/maskformer#transformers.MaskFormerModel"),c(DG,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartModel"),c(GG,"href","/docs/transformers/pr_18020/en/model_doc/mctct#transformers.MCTCTModel"),c(OG,"href","/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(VG,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertModel"),c(XG,"href","/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTModel"),c(zG,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetModel"),c(WG,"href","/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5Model"),c(QG,"href","/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpModel"),c(UG,"href","/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaModel"),c(HG,"href","/docs/transformers/pr_18020/en/model_doc/m2m_100#transformers.M2M100Model"),c(JG,"href","/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerModel"),c(YG,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(KG,"href","/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTModel"),c(ZG,"href","/docs/transformers/pr_18020/en/model_doc/owlvit#transformers.OwlViTModel"),c(eO,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusModel"),c(oO,"href","/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverModel"),c(rO,"href","/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartModel"),c(tO,"href","/docs/transformers/pr_18020/en/model_doc/poolformer#transformers.PoolFormerModel"),c(aO,"href","/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(nO,"href","/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertModel"),c(sO,"href","/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerModel"),c(lO,"href","/docs/transformers/pr_18020/en/model_doc/regnet#transformers.RegNetModel"),c(iO,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertModel"),c(dO,"href","/docs/transformers/pr_18020/en/model_doc/resnet#transformers.ResNetModel"),c(cO,"href","/docs/transformers/pr_18020/en/model_doc/retribert#transformers.RetriBertModel"),c(fO,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaModel"),c(mO,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerModel"),c(gO,"href","/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerModel"),c(hO,"href","/docs/transformers/pr_18020/en/model_doc/sew#transformers.SEWModel"),c(pO,"href","/docs/transformers/pr_18020/en/model_doc/sew-d#transformers.SEWDModel"),c(_O,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(uO,"href","/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterModel"),c(bO,"href","/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(vO,"href","/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinModel"),c(FO,"href","/docs/transformers/pr_18020/en/model_doc/swinv2#transformers.Swinv2Model"),c(TO,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5Model"),c(MO,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasModel"),c(EO,"href","/docs/transformers/pr_18020/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(CO,"href","/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(wO,"href","/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechModel"),c(AO,"href","/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(LO,"href","/docs/transformers/pr_18020/en/model_doc/van#transformers.VanModel"),c(yO,"href","/docs/transformers/pr_18020/en/model_doc/videomae#transformers.VideoMAEModel"),c(xO,"href","/docs/transformers/pr_18020/en/model_doc/vilt#transformers.ViltModel"),c($O,"href","/docs/transformers/pr_18020/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(kO,"href","/docs/transformers/pr_18020/en/model_doc/visual_bert#transformers.VisualBertModel"),c(SO,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTModel"),c(RO,"href","/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(PO,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(BO,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(IO,"href","/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMModel"),c(NO,"href","/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMModel"),c(qO,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMModel"),c(jO,"href","/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(DO,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(GO,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(OO,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetModel"),c(VO,"href","/docs/transformers/pr_18020/en/model_doc/yolos#transformers.YolosModel"),c(XO,"href","/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y2,"id","transformers.AutoModelForPreTraining"),c(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y2,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(zO,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WO,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QO,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForPreTraining"),c(HO,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForPreTraining"),c(YO,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(KO,"href","/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomForCausalLM"),c(ZO,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eV,"href","/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oV,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(rV,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(tV,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(aV,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(nV,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForPreTraining"),c(sV,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(lV,"href","/docs/transformers/pr_18020/en/model_doc/flava#transformers.FlavaForPreTraining"),c(iV,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForPreTraining"),c(dV,"href","/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(fV,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mV,"href","/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(gV,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(hV,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(pV,"href","/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForMaskedLM"),c(_V,"href","/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(uV,"href","/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(bV,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(vV,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(FV,"href","/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(TV,"href","/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(MV,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(EV,"href","/docs/transformers/pr_18020/en/model_doc/retribert#transformers.RetriBertModel"),c(CV,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(wV,"href","/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(AV,"href","/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(LV,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(yV,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xV,"href","/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c($V,"href","/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(kV,"href","/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(SV,"href","/docs/transformers/pr_18020/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(RV,"href","/docs/transformers/pr_18020/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(PV,"href","/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(BV,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(IV,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(NV,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qV,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jV,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DV,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.AutoModelForCausalLM"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(GV,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForCausalLM"),c(zV,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertLMHeadModel"),c(WV,"href","/docs/transformers/pr_18020/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(QV,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(UV,"href","/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(HV,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(JV,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(YV,"href","/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomForCausalLM"),c(KV,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(ZV,"href","/docs/transformers/pr_18020/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(eX,"href","/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oX,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(rX,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForCausalLM"),c(tX,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(aX,"href","/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(nX,"href","/docs/transformers/pr_18020/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(sX,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(lX,"href","/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianForCausalLM"),c(iX,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartForCausalLM"),c(dX,"href","/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(cX,"href","/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForCausalLM"),c(fX,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(mX,"href","/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTForCausalLM"),c(gX,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(hX,"href","/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(pX,"href","/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(_X,"href","/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(uX,"href","/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(bX,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(vX,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(FX,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(TX,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(MX,"href","/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(EX,"href","/docs/transformers/pr_18020/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(CX,"href","/docs/transformers/pr_18020/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(wX,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AX,"href","/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(LX,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(yX,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(xX,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p1,"id","transformers.AutoModelForMaskedLM"),c(p1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p1,"href","#transformers.AutoModelForMaskedLM"),c(fd,"class","relative group"),c($X,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(PX,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BX,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForMaskedLM"),c(IX,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(NX,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(qX,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(jX,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(DX,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(GX,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(OX,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(VX,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(XX,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zX,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(WX,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(QX,"href","/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(UX,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(HX,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(JX,"href","/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForMaskedLM"),c(YX,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(KX,"href","/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(ZX,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ez,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oz,"href","/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(rz,"href","/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(tz,"href","/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(az,"href","/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(nz,"href","/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(sz,"href","/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(lz,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(iz,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(dz,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(cz,"href","/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(fz,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(mz,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gz,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(hz,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(pz,"href","/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForSeq2SeqLM"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(_z,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bz,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vz,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Tz,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Mz,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Ez,"href","/docs/transformers/pr_18020/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Cz,"href","/docs/transformers/pr_18020/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(wz,"href","/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Az,"href","/docs/transformers/pr_18020/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Lz,"href","/docs/transformers/pr_18020/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_18020/en/model_doc/marian#transformers.MarianMTModel"),c(xz,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c($z,"href","/docs/transformers/pr_18020/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(kz,"href","/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Sz,"href","/docs/transformers/pr_18020/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Rz,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Bz,"href","/docs/transformers/pr_18020/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Iz,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Nz,"href","/docs/transformers/pr_18020/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForSequenceClassification"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForSequenceClassification"),c(ud,"class","relative group"),c(qz,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(zz,"href","/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(nW,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(sW,"href","/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(lW,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(iW,"href","/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(dW,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(cW,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(fW,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(mW,"href","/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDForSequenceClassification"),c(gW,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(hW,"href","/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(pW,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(_W,"href","/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(uW,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(vW,"href","/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(FW,"href","/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(TW,"href","/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(MW,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(EW,"href","/docs/transformers/pr_18020/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(CW,"href","/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(wW,"href","/docs/transformers/pr_18020/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(AW,"href","/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(yW,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c($W,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(kW,"href","/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(RW,"href","/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(PW,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(BW,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(IW,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(NW,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(qW,"href","/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForMultipleChoice"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(jW,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(VW,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForMultipleChoice"),c(XW,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(zW,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(WW,"href","/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(QW,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(HW,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(JW,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(KW,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(eQ,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(oQ,"href","/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(rQ,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(tQ,"href","/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(aQ,"href","/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(nQ,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(sQ,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(lQ,"href","/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(iQ,"href","/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(dQ,"href","/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(cQ,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(fQ,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(mQ,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(gQ,"href","/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(hQ,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(pQ,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(_Q,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(uQ,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(bQ,"href","/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForNextSentencePrediction"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(vQ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(EQ,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(CQ,"href","/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(wQ,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(AQ,"href","/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(LQ,"href","/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForTokenClassification"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(yQ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(SQ,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForTokenClassification"),c(RQ,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(PQ,"href","/docs/transformers/pr_18020/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(BQ,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(IQ,"href","/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineForTokenClassification"),c(NQ,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(qQ,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(jQ,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(DQ,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(GQ,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(OQ,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(VQ,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(XQ,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(zQ,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(WQ,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(QQ,"href","/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(UQ,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(HQ,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(JQ,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(YQ,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(KQ,"href","/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForTokenClassification"),c(ZQ,"href","/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(oU,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(rU,"href","/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(tU,"href","/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(aU,"href","/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(nU,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(lU,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(iU,"href","/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(dU,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(cU,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(fU,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(mU,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(gU,"href","/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForQuestionAnswering"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(hU,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_18020/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_18020/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(LU,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c($U,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(kU,"href","/docs/transformers/pr_18020/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_18020/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_18020/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_18020/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_18020/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18020/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_18020/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18020/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18020/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_18020/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_18020/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_18020/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_18020/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(rH,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(nH,"href","/docs/transformers/pr_18020/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForTableQuestionAnswering"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(sH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a8,"id","transformers.AutoModelForImageClassification"),c(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a8,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(cH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitForImageClassification"),c(hH,"href","/docs/transformers/pr_18020/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(pH,"href","/docs/transformers/pr_18020/en/model_doc/cvt#transformers.CvtForImageClassification"),c(_H,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(uH,"href","/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTForImageClassification"),c(bH,"href","/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(vH,"href","/docs/transformers/pr_18020/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(FH,"href","/docs/transformers/pr_18020/en/model_doc/levit#transformers.LevitForImageClassification"),c(TH,"href","/docs/transformers/pr_18020/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(MH,"href","/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(EH,"href","/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(CH,"href","/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(wH,"href","/docs/transformers/pr_18020/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(AH,"href","/docs/transformers/pr_18020/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(LH,"href","/docs/transformers/pr_18020/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(yH,"href","/docs/transformers/pr_18020/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(xH,"href","/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerForImageClassification"),c($H,"href","/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinForImageClassification"),c(kH,"href","/docs/transformers/pr_18020/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(SH,"href","/docs/transformers/pr_18020/en/model_doc/van#transformers.VanForImageClassification"),c(RH,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M8,"id","transformers.AutoModelForVideoClassification"),c(M8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M8,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(PH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_18020/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L8,"id","transformers.AutoModelForVision2Seq"),c(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L8,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(qH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_18020/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S8,"id","transformers.AutoModelForVisualQuestionAnswering"),c(S8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S8,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(OH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_18020/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N8,"id","transformers.AutoModelForAudioClassification"),c(N8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N8,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(WH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UH,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JH,"href","/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YH,"href","/docs/transformers/pr_18020/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KH,"href","/docs/transformers/pr_18020/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J8,"id","transformers.AutoModelForAudioFrameClassification"),c(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J8,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(aJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iJ,"href","/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dJ,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cJ,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(fJ,"href","/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.AutoModelForCTC"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(mJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(_J,"href","/docs/transformers/pr_18020/en/model_doc/hubert#transformers.HubertForCTC"),c(uJ,"href","/docs/transformers/pr_18020/en/model_doc/mctct#transformers.MCTCTForCTC"),c(bJ,"href","/docs/transformers/pr_18020/en/model_doc/sew#transformers.SEWForCTC"),c(vJ,"href","/docs/transformers/pr_18020/en/model_doc/sew-d#transformers.SEWDForCTC"),c(FJ,"href","/docs/transformers/pr_18020/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(TJ,"href","/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(MJ,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(EJ,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(CJ,"href","/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yJ,"href","/docs/transformers/pr_18020/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(xJ,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.AutoModelForAudioXVector"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c($J,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(PJ,"href","/docs/transformers/pr_18020/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(BJ,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(IJ,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(NJ,"href","/docs/transformers/pr_18020/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.AutoModelForMaskedImageModeling"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(qJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GJ,"href","/docs/transformers/pr_18020/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(OJ,"href","/docs/transformers/pr_18020/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(VJ,"href","/docs/transformers/pr_18020/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(XJ,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.AutoModelForObjectDetection"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.AutoModelForObjectDetection"),c(fc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UJ,"href","/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrForObjectDetection"),c(HJ,"href","/docs/transformers/pr_18020/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.AutoModelForImageSegmentation"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_18020/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.AutoModelForSemanticSegmentation"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.AutoModelForSemanticSegmentation"),c(uc,"class","relative group"),c(eY,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_18020/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(aY,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(nY,"href","/docs/transformers/pr_18020/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(sY,"href","/docs/transformers/pr_18020/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(lY,"href","/docs/transformers/pr_18020/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.AutoModelForInstanceSegmentation"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(iY,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_18020/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModel"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(mY,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertModel"),c(_Y,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.TFBartModel"),c(uY,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertModel"),c(bY,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(vY,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(FY,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertModel"),c(TY,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.TFCLIPModel"),c(MY,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertModel"),c(EY,"href","/docs/transformers/pr_18020/en/model_doc/convnext#transformers.TFConvNextModel"),c(CY,"href","/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.TFCTRLModel"),c(wY,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(AY,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.TFDebertaModel"),c(LY,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(yY,"href","/docs/transformers/pr_18020/en/model_doc/deit#transformers.TFDeiTModel"),c(xY,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertModel"),c($Y,"href","/docs/transformers/pr_18020/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(kY,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraModel"),c(SY,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(RY,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelModel"),c(PY,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(BY,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.TFGPT2Model"),c(IY,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.TFGPTJModel"),c(NY,"href","/docs/transformers/pr_18020/en/model_doc/groupvit#transformers.TFGroupViTModel"),c(qY,"href","/docs/transformers/pr_18020/en/model_doc/hubert#transformers.TFHubertModel"),c(jY,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(DY,"href","/docs/transformers/pr_18020/en/model_doc/led#transformers.TFLEDModel"),c(GY,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerModel"),c(OY,"href","/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.TFLxmertModel"),c(VY,"href","/docs/transformers/pr_18020/en/model_doc/marian#transformers.TFMarianModel"),c(XY,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.TFMBartModel"),c(zY,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(WY,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetModel"),c(QY,"href","/docs/transformers/pr_18020/en/model_doc/mt5#transformers.TFMT5Model"),c(UY,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(HY,"href","/docs/transformers/pr_18020/en/model_doc/opt#transformers.TFOPTModel"),c(JY,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.TFPegasusModel"),c(YY,"href","/docs/transformers/pr_18020/en/model_doc/regnet#transformers.TFRegNetModel"),c(KY,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertModel"),c(ZY,"href","/docs/transformers/pr_18020/en/model_doc/resnet#transformers.TFResNetModel"),c(eK,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaModel"),c(oK,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerModel"),c(rK,"href","/docs/transformers/pr_18020/en/model_doc/segformer#transformers.TFSegformerModel"),c(tK,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(aK,"href","/docs/transformers/pr_18020/en/model_doc/swin#transformers.TFSwinModel"),c(nK,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.TFT5Model"),c(sK,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TFTapasModel"),c(lK,"href","/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(iK,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.TFViTModel"),c(dK,"href","/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(cK,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(fK,"href","/docs/transformers/pr_18020/en/model_doc/xglm#transformers.TFXGLMModel"),c(mK,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMModel"),c(gK,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hK,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForPreTraining"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(pK,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vK,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FK,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForPreTraining"),c(TK,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MK,"href","/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EK,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CK,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wK,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AK,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(LK,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yK,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xK,"href","/docs/transformers/pr_18020/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($K,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kK,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SK,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(RK,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PK,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(BK,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IK,"href","/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(NK,"href","/docs/transformers/pr_18020/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(qK,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jK,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(DK,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.TFAutoModelForCausalLM"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(GK,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zK,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(WK,"href","/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QK,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UK,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(HK,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JK,"href","/docs/transformers/pr_18020/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(YK,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(KK,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(ZK,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(eZ,"href","/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oZ,"href","/docs/transformers/pr_18020/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(rZ,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tZ,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForImageClassification"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(aZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lZ,"href","/docs/transformers/pr_18020/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(iZ,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(dZ,"href","/docs/transformers/pr_18020/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(cZ,"href","/docs/transformers/pr_18020/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(fZ,"href","/docs/transformers/pr_18020/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(mZ,"href","/docs/transformers/pr_18020/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(gZ,"href","/docs/transformers/pr_18020/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(hZ,"href","/docs/transformers/pr_18020/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(pZ,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.TFAutoModelForSemanticSegmentation"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(_Z,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vZ,"href","/docs/transformers/pr_18020/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(FZ,"href","/docs/transformers/pr_18020/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.TFAutoModelForMaskedLM"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.TFAutoModelForMaskedLM"),c(qc,"class","relative group"),c(TZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CZ,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(AZ,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LZ,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(yZ,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(xZ,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c($Z,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kZ,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(SZ,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RZ,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(PZ,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BZ,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(IZ,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(NZ,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qZ,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(jZ,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DZ,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(GZ,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OZ,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VZ,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WZ,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QZ,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(UZ,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(HZ,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(JZ,"href","/docs/transformers/pr_18020/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(YZ,"href","/docs/transformers/pr_18020/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(KZ,"href","/docs/transformers/pr_18020/en/model_doc/marian#transformers.TFMarianMTModel"),c(ZZ,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_18020/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(oee,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(ree,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.TFAutoModelForSequenceClassification"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.TFAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(tee,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aee,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nee,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(see,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(lee,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(iee,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(dee,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(cee,"href","/docs/transformers/pr_18020/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(fee,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(mee,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(gee,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(hee,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(pee,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(uee,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(bee,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(vee,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Fee,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Tee,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Mee,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Eee,"href","/docs/transformers/pr_18020/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Cee,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(wee,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Aee,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(yee,"href","/docs/transformers/pr_18020/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(xee,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c($ee,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(kee,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.TFAutoModelForMultipleChoice"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.TFAutoModelForMultipleChoice"),c(Qc,"class","relative group"),c(See,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ree,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pee,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bee,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Nee,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(qee,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(jee,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Dee,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Gee,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Oee,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Vee,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Xee,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(zee,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Wee,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Qee,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Uee,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Hee,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Jee,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Yee,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.TFAutoModelForNextSentencePrediction"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Jc,"class","relative group"),c(Kee,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zee,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eoe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ooe,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(roe,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Zc,"class","relative group"),c(toe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_18020/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.TFAutoModelForTokenClassification"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.TFAutoModelForTokenClassification"),c(rf,"class","relative group"),c(loe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ioe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(doe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(coe,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(foe,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(moe,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(goe,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(hoe,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(poe,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(_oe,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(uoe,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(boe,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(voe,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Foe,"href","/docs/transformers/pr_18020/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Toe,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Moe,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Eoe,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Coe,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(woe,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Aoe,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Loe,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(yoe,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(xoe,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.TFAutoModelForQuestionAnswering"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c($oe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(koe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Soe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Roe,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_18020/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_18020/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_18020/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_18020/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_18020/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Ooe,"href","/docs/transformers/pr_18020/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Voe,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Xoe,"href","/docs/transformers/pr_18020/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(zoe,"href","/docs/transformers/pr_18020/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Woe,"href","/docs/transformers/pr_18020/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Qoe,"href","/docs/transformers/pr_18020/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Uoe,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Hoe,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Joe,"href","/docs/transformers/pr_18020/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Yoe,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Koe,"href","/docs/transformers/pr_18020/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.TFAutoModelForVision2Seq"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.TFAutoModelForVision2Seq"),c(df,"class","relative group"),c(Zoe,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ere,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ore,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rre,"href","/docs/transformers/pr_18020/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(mf,"class","relative group"),c(tre,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(are,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nre,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sre,"href","/docs/transformers/pr_18020/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModel"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModel"),c(pf,"class","relative group"),c(lre,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ire,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dre,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cre,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertModel"),c(fre,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartModel"),c(mre,"href","/docs/transformers/pr_18020/en/model_doc/beit#transformers.FlaxBeitModel"),c(gre,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertModel"),c(hre,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(pre,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(_re,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ure,"href","/docs/transformers/pr_18020/en/model_doc/clip#transformers.FlaxCLIPModel"),c(bre,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(vre,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraModel"),c(Fre,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Tre,"href","/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Mre,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Ere,"href","/docs/transformers/pr_18020/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Cre,"href","/docs/transformers/pr_18020/en/model_doc/marian#transformers.FlaxMarianModel"),c(wre,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Are,"href","/docs/transformers/pr_18020/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Lre,"href","/docs/transformers/pr_18020/en/model_doc/opt#transformers.FlaxOPTModel"),c(yre,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xre,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($re,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kre,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.FlaxT5Model"),c(Sre,"href","/docs/transformers/pr_18020/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Rre,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.FlaxViTModel"),c(Pre,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Bre,"href","/docs/transformers/pr_18020/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Ire,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForCausalLM"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForCausalLM"),c(bf,"class","relative group"),c(Nre,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qre,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jre,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dre,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Gre,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Ore,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Vre,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Xre,"href","/docs/transformers/pr_18020/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zre,"href","/docs/transformers/pr_18020/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Wre,"href","/docs/transformers/pr_18020/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Qre,"href","/docs/transformers/pr_18020/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Ure,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Hre,"href","/docs/transformers/pr_18020/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.FlaxAutoModelForPreTraining"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Tf,"class","relative group"),c(Jre,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yre,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kre,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zre,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ete,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ote,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(rte,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(tte,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ate,"href","/docs/transformers/pr_18020/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(nte,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ste,"href","/docs/transformers/pr_18020/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lte,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ite,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dte,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(cte,"href","/docs/transformers/pr_18020/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fte,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.FlaxAutoModelForMaskedLM"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Cf,"class","relative group"),c(mte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pte,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_te,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ute,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bte,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vte,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Fte,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Tte,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Mte,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Ete,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Cte,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M6,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M6,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lf,"class","relative group"),c(wte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ate,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yte,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xte,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($te,"href","/docs/transformers/pr_18020/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_18020/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Ste,"href","/docs/transformers/pr_18020/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Rte,"href","/docs/transformers/pr_18020/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Pte,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Bte,"href","/docs/transformers/pr_18020/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ite,"href","/docs/transformers/pr_18020/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Nte,"href","/docs/transformers/pr_18020/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.FlaxAutoModelForSequenceClassification"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($f,"class","relative group"),c(qte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gte,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ote,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Vte,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Xte,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(zte,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Wte,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Qte,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Ute,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Hte,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Jte,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U6,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(U6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U6,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Rf,"class","relative group"),c(Yte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zte,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eae,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(oae,"href","/docs/transformers/pr_18020/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(rae,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(tae,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(aae,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(nae,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(sae,"href","/docs/transformers/pr_18020/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(lae,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(iae,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(dae,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lA,"id","transformers.FlaxAutoModelForTokenClassification"),c(lA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(If,"class","relative group"),c(cae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gae,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(hae,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(pae,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(_ae,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(uae,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(bae,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(vae,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Fae,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(bA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(jf,"class","relative group"),c(Tae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cae,"href","/docs/transformers/pr_18020/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(wae,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Aae,"href","/docs/transformers/pr_18020/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Lae,"href","/docs/transformers/pr_18020/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(yae,"href","/docs/transformers/pr_18020/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(xae,"href","/docs/transformers/pr_18020/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c($ae,"href","/docs/transformers/pr_18020/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(kae,"href","/docs/transformers/pr_18020/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(xA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Of,"class","relative group"),c(Sae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bae,"href","/docs/transformers/pr_18020/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RA,"id","transformers.FlaxAutoModelForImageClassification"),c(RA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RA,"href","#transformers.FlaxAutoModelForImageClassification"),c(zf,"class","relative group"),c(Iae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jae,"href","/docs/transformers/pr_18020/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Dae,"href","/docs/transformers/pr_18020/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qA,"id","transformers.FlaxAutoModelForVision2Seq"),c(qA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uf,"class","relative group"),c(Gae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vae,"href","/docs/transformers/pr_18020/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xae,"href","/docs/transformers/pr_18020/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,Oi),b(f,em,u),b(f,ft,u),e(ft,Vi),e(ft,Xi),e(Xi,my),e(ft,om),b(f,Oe,u),b(f,Qe,u),e(Qe,zi),e(Qe,Xn),e(Xn,gy),e(Qe,zn),e(Qe,Wn),e(Wn,hy),e(Qe,Wi),e(Qe,Qn),e(Qn,py),e(Qe,Qi),b(f,rm,u),M(ja,f,u),b(f,Ue,u),b(f,Ae,u),e(Ae,sP),e(Ae,Ui),e(Ui,lP),e(Ae,iP),b(f,Lo,u),b(f,Da,u),e(Da,dP),e(Da,tm),e(tm,cP),e(Da,MKe),b(f,KQe,u),b(f,Hi,u),e(Hi,am),e(am,Ose),M(_y,Ose,null),e(Hi,EKe),e(Hi,Vse),e(Vse,CKe),b(f,ZQe,u),b(f,Un,u),e(Un,wKe),e(Un,Xse),e(Xse,AKe),e(Un,LKe),e(Un,zse),e(zse,yKe),e(Un,xKe),b(f,eUe,u),M(uy,f,u),b(f,oUe,u),b(f,fP,u),e(fP,$Ke),b(f,rUe,u),M(nm,f,u),b(f,tUe,u),b(f,Ji,u),e(Ji,sm),e(sm,Wse),M(by,Wse,null),e(Ji,kKe),e(Ji,Qse),e(Qse,SKe),b(f,aUe,u),b(f,yo,u),M(vy,yo,null),e(yo,RKe),e(yo,Fy),e(Fy,PKe),e(Fy,mP),e(mP,BKe),e(Fy,IKe),e(yo,NKe),e(yo,Ty),e(Ty,qKe),e(Ty,Use),e(Use,jKe),e(Ty,DKe),e(yo,GKe),e(yo,kr),M(My,kr,null),e(kr,OKe),e(kr,Hse),e(Hse,VKe),e(kr,XKe),e(kr,Yi),e(Yi,zKe),e(Yi,Jse),e(Jse,WKe),e(Yi,QKe),e(Yi,Yse),e(Yse,UKe),e(Yi,HKe),e(kr,JKe),e(kr,A),e(A,lm),e(lm,Kse),e(Kse,YKe),e(lm,KKe),e(lm,gP),e(gP,ZKe),e(lm,eZe),e(A,oZe),e(A,im),e(im,Zse),e(Zse,rZe),e(im,tZe),e(im,hP),e(hP,aZe),e(im,nZe),e(A,sZe),e(A,dm),e(dm,ele),e(ele,lZe),e(dm,iZe),e(dm,pP),e(pP,dZe),e(dm,cZe),e(A,fZe),e(A,cm),e(cm,ole),e(ole,mZe),e(cm,gZe),e(cm,_P),e(_P,hZe),e(cm,pZe),e(A,_Ze),e(A,fm),e(fm,rle),e(rle,uZe),e(fm,bZe),e(fm,uP),e(uP,vZe),e(fm,FZe),e(A,TZe),e(A,mm),e(mm,tle),e(tle,MZe),e(mm,EZe),e(mm,bP),e(bP,CZe),e(mm,wZe),e(A,AZe),e(A,gm),e(gm,ale),e(ale,LZe),e(gm,yZe),e(gm,vP),e(vP,xZe),e(gm,$Ze),e(A,kZe),e(A,hm),e(hm,nle),e(nle,SZe),e(hm,RZe),e(hm,FP),e(FP,PZe),e(hm,BZe),e(A,IZe),e(A,pm),e(pm,sle),e(sle,NZe),e(pm,qZe),e(pm,TP),e(TP,jZe),e(pm,DZe),e(A,GZe),e(A,_m),e(_m,lle),e(lle,OZe),e(_m,VZe),e(_m,MP),e(MP,XZe),e(_m,zZe),e(A,WZe),e(A,um),e(um,ile),e(ile,QZe),e(um,UZe),e(um,EP),e(EP,HZe),e(um,JZe),e(A,YZe),e(A,bm),e(bm,dle),e(dle,KZe),e(bm,ZZe),e(bm,CP),e(CP,eeo),e(bm,oeo),e(A,reo),e(A,vm),e(vm,cle),e(cle,teo),e(vm,aeo),e(vm,wP),e(wP,neo),e(vm,seo),e(A,leo),e(A,Fm),e(Fm,fle),e(fle,ieo),e(Fm,deo),e(Fm,AP),e(AP,ceo),e(Fm,feo),e(A,meo),e(A,Tm),e(Tm,mle),e(mle,geo),e(Tm,heo),e(Tm,LP),e(LP,peo),e(Tm,_eo),e(A,ueo),e(A,Mm),e(Mm,gle),e(gle,beo),e(Mm,veo),e(Mm,yP),e(yP,Feo),e(Mm,Teo),e(A,Meo),e(A,Em),e(Em,hle),e(hle,Eeo),e(Em,Ceo),e(Em,xP),e(xP,weo),e(Em,Aeo),e(A,Leo),e(A,Cm),e(Cm,ple),e(ple,yeo),e(Cm,xeo),e(Cm,$P),e($P,$eo),e(Cm,keo),e(A,Seo),e(A,wm),e(wm,_le),e(_le,Reo),e(wm,Peo),e(wm,kP),e(kP,Beo),e(wm,Ieo),e(A,Neo),e(A,Am),e(Am,ule),e(ule,qeo),e(Am,jeo),e(Am,SP),e(SP,Deo),e(Am,Geo),e(A,Oeo),e(A,Lm),e(Lm,ble),e(ble,Veo),e(Lm,Xeo),e(Lm,RP),e(RP,zeo),e(Lm,Weo),e(A,Qeo),e(A,ym),e(ym,vle),e(vle,Ueo),e(ym,Heo),e(ym,PP),e(PP,Jeo),e(ym,Yeo),e(A,Keo),e(A,xm),e(xm,Fle),e(Fle,Zeo),e(xm,eoo),e(xm,BP),e(BP,ooo),e(xm,roo),e(A,too),e(A,$m),e($m,Tle),e(Tle,aoo),e($m,noo),e($m,IP),e(IP,soo),e($m,loo),e(A,ioo),e(A,km),e(km,Mle),e(Mle,doo),e(km,coo),e(km,NP),e(NP,foo),e(km,moo),e(A,goo),e(A,Sm),e(Sm,Ele),e(Ele,hoo),e(Sm,poo),e(Sm,qP),e(qP,_oo),e(Sm,uoo),e(A,boo),e(A,Rm),e(Rm,Cle),e(Cle,voo),e(Rm,Foo),e(Rm,jP),e(jP,Too),e(Rm,Moo),e(A,Eoo),e(A,Pm),e(Pm,wle),e(wle,Coo),e(Pm,woo),e(Pm,DP),e(DP,Aoo),e(Pm,Loo),e(A,yoo),e(A,Bm),e(Bm,Ale),e(Ale,xoo),e(Bm,$oo),e(Bm,GP),e(GP,koo),e(Bm,Soo),e(A,Roo),e(A,Im),e(Im,Lle),e(Lle,Poo),e(Im,Boo),e(Im,OP),e(OP,Ioo),e(Im,Noo),e(A,qoo),e(A,Nm),e(Nm,yle),e(yle,joo),e(Nm,Doo),e(Nm,VP),e(VP,Goo),e(Nm,Ooo),e(A,Voo),e(A,qm),e(qm,xle),e(xle,Xoo),e(qm,zoo),e(qm,XP),e(XP,Woo),e(qm,Qoo),e(A,Uoo),e(A,jm),e(jm,$le),e($le,Hoo),e(jm,Joo),e(jm,zP),e(zP,Yoo),e(jm,Koo),e(A,Zoo),e(A,Dm),e(Dm,kle),e(kle,ero),e(Dm,oro),e(Dm,WP),e(WP,rro),e(Dm,tro),e(A,aro),e(A,Gm),e(Gm,Sle),e(Sle,nro),e(Gm,sro),e(Gm,QP),e(QP,lro),e(Gm,iro),e(A,dro),e(A,Om),e(Om,Rle),e(Rle,cro),e(Om,fro),e(Om,UP),e(UP,mro),e(Om,gro),e(A,hro),e(A,Vm),e(Vm,Ple),e(Ple,pro),e(Vm,_ro),e(Vm,HP),e(HP,uro),e(Vm,bro),e(A,vro),e(A,Xm),e(Xm,Ble),e(Ble,Fro),e(Xm,Tro),e(Xm,JP),e(JP,Mro),e(Xm,Ero),e(A,Cro),e(A,zm),e(zm,Ile),e(Ile,wro),e(zm,Aro),e(zm,YP),e(YP,Lro),e(zm,yro),e(A,xro),e(A,Wm),e(Wm,Nle),e(Nle,$ro),e(Wm,kro),e(Wm,KP),e(KP,Sro),e(Wm,Rro),e(A,Pro),e(A,Qm),e(Qm,qle),e(qle,Bro),e(Qm,Iro),e(Qm,ZP),e(ZP,Nro),e(Qm,qro),e(A,jro),e(A,Um),e(Um,jle),e(jle,Dro),e(Um,Gro),e(Um,eB),e(eB,Oro),e(Um,Vro),e(A,Xro),e(A,Hm),e(Hm,Dle),e(Dle,zro),e(Hm,Wro),e(Hm,oB),e(oB,Qro),e(Hm,Uro),e(A,Hro),e(A,Jm),e(Jm,Gle),e(Gle,Jro),e(Jm,Yro),e(Jm,rB),e(rB,Kro),e(Jm,Zro),e(A,eto),e(A,Ym),e(Ym,Ole),e(Ole,oto),e(Ym,rto),e(Ym,tB),e(tB,tto),e(Ym,ato),e(A,nto),e(A,Km),e(Km,Vle),e(Vle,sto),e(Km,lto),e(Km,aB),e(aB,ito),e(Km,dto),e(A,cto),e(A,Zm),e(Zm,Xle),e(Xle,fto),e(Zm,mto),e(Zm,nB),e(nB,gto),e(Zm,hto),e(A,pto),e(A,eg),e(eg,zle),e(zle,_to),e(eg,uto),e(eg,sB),e(sB,bto),e(eg,vto),e(A,Fto),e(A,og),e(og,Wle),e(Wle,Tto),e(og,Mto),e(og,lB),e(lB,Eto),e(og,Cto),e(A,wto),e(A,rg),e(rg,Qle),e(Qle,Ato),e(rg,Lto),e(rg,iB),e(iB,yto),e(rg,xto),e(A,$to),e(A,tg),e(tg,Ule),e(Ule,kto),e(tg,Sto),e(tg,dB),e(dB,Rto),e(tg,Pto),e(A,Bto),e(A,ag),e(ag,Hle),e(Hle,Ito),e(ag,Nto),e(ag,cB),e(cB,qto),e(ag,jto),e(A,Dto),e(A,ng),e(ng,Jle),e(Jle,Gto),e(ng,Oto),e(ng,fB),e(fB,Vto),e(ng,Xto),e(A,zto),e(A,sg),e(sg,Yle),e(Yle,Wto),e(sg,Qto),e(sg,mB),e(mB,Uto),e(sg,Hto),e(A,Jto),e(A,lg),e(lg,Kle),e(Kle,Yto),e(lg,Kto),e(lg,gB),e(gB,Zto),e(lg,eao),e(A,oao),e(A,ig),e(ig,Zle),e(Zle,rao),e(ig,tao),e(ig,hB),e(hB,aao),e(ig,nao),e(A,sao),e(A,dg),e(dg,eie),e(eie,lao),e(dg,iao),e(dg,pB),e(pB,dao),e(dg,cao),e(A,fao),e(A,cg),e(cg,oie),e(oie,mao),e(cg,gao),e(cg,_B),e(_B,hao),e(cg,pao),e(A,_ao),e(A,fg),e(fg,rie),e(rie,uao),e(fg,bao),e(fg,uB),e(uB,vao),e(fg,Fao),e(A,Tao),e(A,mg),e(mg,tie),e(tie,Mao),e(mg,Eao),e(mg,bB),e(bB,Cao),e(mg,wao),e(A,Aao),e(A,gg),e(gg,aie),e(aie,Lao),e(gg,yao),e(gg,vB),e(vB,xao),e(gg,$ao),e(A,kao),e(A,hg),e(hg,nie),e(nie,Sao),e(hg,Rao),e(hg,FB),e(FB,Pao),e(hg,Bao),e(A,Iao),e(A,pg),e(pg,sie),e(sie,Nao),e(pg,qao),e(pg,TB),e(TB,jao),e(pg,Dao),e(A,Gao),e(A,_g),e(_g,lie),e(lie,Oao),e(_g,Vao),e(_g,MB),e(MB,Xao),e(_g,zao),e(A,Wao),e(A,ug),e(ug,iie),e(iie,Qao),e(ug,Uao),e(ug,EB),e(EB,Hao),e(ug,Jao),e(A,Yao),e(A,bg),e(bg,die),e(die,Kao),e(bg,Zao),e(bg,CB),e(CB,eno),e(bg,ono),e(A,rno),e(A,vg),e(vg,cie),e(cie,tno),e(vg,ano),e(vg,wB),e(wB,nno),e(vg,sno),e(A,lno),e(A,Fg),e(Fg,fie),e(fie,ino),e(Fg,dno),e(Fg,AB),e(AB,cno),e(Fg,fno),e(A,mno),e(A,Tg),e(Tg,mie),e(mie,gno),e(Tg,hno),e(Tg,LB),e(LB,pno),e(Tg,_no),e(A,uno),e(A,Mg),e(Mg,gie),e(gie,bno),e(Mg,vno),e(Mg,yB),e(yB,Fno),e(Mg,Tno),e(A,Mno),e(A,Eg),e(Eg,hie),e(hie,Eno),e(Eg,Cno),e(Eg,xB),e(xB,wno),e(Eg,Ano),e(A,Lno),e(A,Cg),e(Cg,pie),e(pie,yno),e(Cg,xno),e(Cg,$B),e($B,$no),e(Cg,kno),e(A,Sno),e(A,wg),e(wg,_ie),e(_ie,Rno),e(wg,Pno),e(wg,kB),e(kB,Bno),e(wg,Ino),e(A,Nno),e(A,Ag),e(Ag,uie),e(uie,qno),e(Ag,jno),e(Ag,SB),e(SB,Dno),e(Ag,Gno),e(A,Ono),e(A,Lg),e(Lg,bie),e(bie,Vno),e(Lg,Xno),e(Lg,RB),e(RB,zno),e(Lg,Wno),e(A,Qno),e(A,yg),e(yg,vie),e(vie,Uno),e(yg,Hno),e(yg,PB),e(PB,Jno),e(yg,Yno),e(A,Kno),e(A,xg),e(xg,Fie),e(Fie,Zno),e(xg,eso),e(xg,BB),e(BB,oso),e(xg,rso),e(A,tso),e(A,$g),e($g,Tie),e(Tie,aso),e($g,nso),e($g,IB),e(IB,sso),e($g,lso),e(A,iso),e(A,kg),e(kg,Mie),e(Mie,dso),e(kg,cso),e(kg,NB),e(NB,fso),e(kg,mso),e(A,gso),e(A,Sg),e(Sg,Eie),e(Eie,hso),e(Sg,pso),e(Sg,qB),e(qB,_so),e(Sg,uso),e(A,bso),e(A,Rg),e(Rg,Cie),e(Cie,vso),e(Rg,Fso),e(Rg,jB),e(jB,Tso),e(Rg,Mso),e(A,Eso),e(A,Pg),e(Pg,wie),e(wie,Cso),e(Pg,wso),e(Pg,DB),e(DB,Aso),e(Pg,Lso),e(A,yso),e(A,Bg),e(Bg,Aie),e(Aie,xso),e(Bg,$so),e(Bg,GB),e(GB,kso),e(Bg,Sso),e(A,Rso),e(A,Ig),e(Ig,Lie),e(Lie,Pso),e(Ig,Bso),e(Ig,OB),e(OB,Iso),e(Ig,Nso),e(A,qso),e(A,Ng),e(Ng,yie),e(yie,jso),e(Ng,Dso),e(Ng,VB),e(VB,Gso),e(Ng,Oso),e(A,Vso),e(A,qg),e(qg,xie),e(xie,Xso),e(qg,zso),e(qg,XB),e(XB,Wso),e(qg,Qso),e(A,Uso),e(A,jg),e(jg,$ie),e($ie,Hso),e(jg,Jso),e(jg,zB),e(zB,Yso),e(jg,Kso),e(A,Zso),e(A,Dg),e(Dg,kie),e(kie,elo),e(Dg,olo),e(Dg,WB),e(WB,rlo),e(Dg,tlo),e(A,alo),e(A,Gg),e(Gg,Sie),e(Sie,nlo),e(Gg,slo),e(Gg,QB),e(QB,llo),e(Gg,ilo),e(A,dlo),e(A,Og),e(Og,Rie),e(Rie,clo),e(Og,flo),e(Og,UB),e(UB,mlo),e(Og,glo),e(A,hlo),e(A,Vg),e(Vg,Pie),e(Pie,plo),e(Vg,_lo),e(Vg,HB),e(HB,ulo),e(Vg,blo),e(A,vlo),e(A,Xg),e(Xg,Bie),e(Bie,Flo),e(Xg,Tlo),e(Xg,JB),e(JB,Mlo),e(Xg,Elo),e(A,Clo),e(A,zg),e(zg,Iie),e(Iie,wlo),e(zg,Alo),e(zg,YB),e(YB,Llo),e(zg,ylo),e(A,xlo),e(A,Wg),e(Wg,Nie),e(Nie,$lo),e(Wg,klo),e(Wg,KB),e(KB,Slo),e(Wg,Rlo),e(A,Plo),e(A,Qg),e(Qg,qie),e(qie,Blo),e(Qg,Ilo),e(Qg,ZB),e(ZB,Nlo),e(Qg,qlo),e(A,jlo),e(A,Ug),e(Ug,jie),e(jie,Dlo),e(Ug,Glo),e(Ug,eI),e(eI,Olo),e(Ug,Vlo),e(A,Xlo),e(A,Hg),e(Hg,Die),e(Die,zlo),e(Hg,Wlo),e(Hg,oI),e(oI,Qlo),e(Hg,Ulo),e(A,Hlo),e(A,Jg),e(Jg,Gie),e(Gie,Jlo),e(Jg,Ylo),e(Jg,rI),e(rI,Klo),e(Jg,Zlo),e(A,eio),e(A,Yg),e(Yg,Oie),e(Oie,oio),e(Yg,rio),e(Yg,tI),e(tI,tio),e(Yg,aio),e(A,nio),e(A,Kg),e(Kg,Vie),e(Vie,sio),e(Kg,lio),e(Kg,aI),e(aI,iio),e(Kg,dio),e(A,cio),e(A,Zg),e(Zg,Xie),e(Xie,fio),e(Zg,mio),e(Zg,nI),e(nI,gio),e(Zg,hio),e(A,pio),e(A,eh),e(eh,zie),e(zie,_io),e(eh,uio),e(eh,sI),e(sI,bio),e(eh,vio),e(A,Fio),e(A,oh),e(oh,Wie),e(Wie,Tio),e(oh,Mio),e(oh,lI),e(lI,Eio),e(oh,Cio),e(A,wio),e(A,rh),e(rh,Qie),e(Qie,Aio),e(rh,Lio),e(rh,iI),e(iI,yio),e(rh,xio),e(A,$io),e(A,th),e(th,Uie),e(Uie,kio),e(th,Sio),e(th,dI),e(dI,Rio),e(th,Pio),e(A,Bio),e(A,ah),e(ah,Hie),e(Hie,Iio),e(ah,Nio),e(ah,cI),e(cI,qio),e(ah,jio),e(A,Dio),e(A,nh),e(nh,Jie),e(Jie,Gio),e(nh,Oio),e(nh,fI),e(fI,Vio),e(nh,Xio),e(A,zio),e(A,sh),e(sh,Yie),e(Yie,Wio),e(sh,Qio),e(sh,mI),e(mI,Uio),e(sh,Hio),e(A,Jio),e(A,lh),e(lh,Kie),e(Kie,Yio),e(lh,Kio),e(lh,gI),e(gI,Zio),e(lh,edo),e(A,odo),e(A,ih),e(ih,Zie),e(Zie,rdo),e(ih,tdo),e(ih,hI),e(hI,ado),e(ih,ndo),e(A,sdo),e(A,dh),e(dh,ede),e(ede,ldo),e(dh,ido),e(dh,pI),e(pI,ddo),e(dh,cdo),e(A,fdo),e(A,ch),e(ch,ode),e(ode,mdo),e(ch,gdo),e(ch,_I),e(_I,hdo),e(ch,pdo),e(A,_do),e(A,fh),e(fh,rde),e(rde,udo),e(fh,bdo),e(fh,uI),e(uI,vdo),e(fh,Fdo),e(A,Tdo),e(A,mh),e(mh,tde),e(tde,Mdo),e(mh,Edo),e(mh,bI),e(bI,Cdo),e(mh,wdo),e(A,Ado),e(A,gh),e(gh,ade),e(ade,Ldo),e(gh,ydo),e(gh,vI),e(vI,xdo),e(gh,$do),e(A,kdo),e(A,hh),e(hh,nde),e(nde,Sdo),e(hh,Rdo),e(hh,FI),e(FI,Pdo),e(hh,Bdo),e(A,Ido),e(A,ph),e(ph,sde),e(sde,Ndo),e(ph,qdo),e(ph,TI),e(TI,jdo),e(ph,Ddo),e(A,Gdo),e(A,_h),e(_h,lde),e(lde,Odo),e(_h,Vdo),e(_h,MI),e(MI,Xdo),e(_h,zdo),e(A,Wdo),e(A,uh),e(uh,ide),e(ide,Qdo),e(uh,Udo),e(uh,EI),e(EI,Hdo),e(uh,Jdo),e(A,Ydo),e(A,bh),e(bh,dde),e(dde,Kdo),e(bh,Zdo),e(bh,CI),e(CI,eco),e(bh,oco),e(A,rco),e(A,vh),e(vh,cde),e(cde,tco),e(vh,aco),e(vh,wI),e(wI,nco),e(vh,sco),e(A,lco),e(A,Fh),e(Fh,fde),e(fde,ico),e(Fh,dco),e(Fh,AI),e(AI,cco),e(Fh,fco),e(kr,mco),M(Th,kr,null),e(yo,gco),e(yo,Mh),M(Ey,Mh,null),e(Mh,hco),e(Mh,mde),e(mde,pco),b(f,nUe,u),b(f,Ki,u),e(Ki,Eh),e(Eh,gde),M(Cy,gde,null),e(Ki,_co),e(Ki,hde),e(hde,uco),b(f,sUe,u),b(f,xo,u),M(wy,xo,null),e(xo,bco),e(xo,Ay),e(Ay,vco),e(Ay,LI),e(LI,Fco),e(Ay,Tco),e(xo,Mco),e(xo,Ly),e(Ly,Eco),e(Ly,pde),e(pde,Cco),e(Ly,wco),e(xo,Aco),e(xo,Sr),M(yy,Sr,null),e(Sr,Lco),e(Sr,_de),e(_de,yco),e(Sr,xco),e(Sr,Ga),e(Ga,$co),e(Ga,ude),e(ude,kco),e(Ga,Sco),e(Ga,bde),e(bde,Rco),e(Ga,Pco),e(Ga,vde),e(vde,Bco),e(Ga,Ico),e(Sr,Nco),e(Sr,k),e(k,Hn),e(Hn,Fde),e(Fde,qco),e(Hn,jco),e(Hn,yI),e(yI,Dco),e(Hn,Gco),e(Hn,xI),e(xI,Oco),e(Hn,Vco),e(k,Xco),e(k,Jn),e(Jn,Tde),e(Tde,zco),e(Jn,Wco),e(Jn,$I),e($I,Qco),e(Jn,Uco),e(Jn,kI),e(kI,Hco),e(Jn,Jco),e(k,Yco),e(k,Yn),e(Yn,Mde),e(Mde,Kco),e(Yn,Zco),e(Yn,SI),e(SI,efo),e(Yn,ofo),e(Yn,RI),e(RI,rfo),e(Yn,tfo),e(k,afo),e(k,Ch),e(Ch,Ede),e(Ede,nfo),e(Ch,sfo),e(Ch,PI),e(PI,lfo),e(Ch,ifo),e(k,dfo),e(k,Kn),e(Kn,Cde),e(Cde,cfo),e(Kn,ffo),e(Kn,BI),e(BI,mfo),e(Kn,gfo),e(Kn,II),e(II,hfo),e(Kn,pfo),e(k,_fo),e(k,wh),e(wh,wde),e(wde,ufo),e(wh,bfo),e(wh,NI),e(NI,vfo),e(wh,Ffo),e(k,Tfo),e(k,Ah),e(Ah,Ade),e(Ade,Mfo),e(Ah,Efo),e(Ah,qI),e(qI,Cfo),e(Ah,wfo),e(k,Afo),e(k,Lh),e(Lh,Lde),e(Lde,Lfo),e(Lh,yfo),e(Lh,jI),e(jI,xfo),e(Lh,$fo),e(k,kfo),e(k,Zn),e(Zn,yde),e(yde,Sfo),e(Zn,Rfo),e(Zn,DI),e(DI,Pfo),e(Zn,Bfo),e(Zn,GI),e(GI,Ifo),e(Zn,Nfo),e(k,qfo),e(k,es),e(es,xde),e(xde,jfo),e(es,Dfo),e(es,OI),e(OI,Gfo),e(es,Ofo),e(es,VI),e(VI,Vfo),e(es,Xfo),e(k,zfo),e(k,os),e(os,$de),e($de,Wfo),e(os,Qfo),e(os,XI),e(XI,Ufo),e(os,Hfo),e(os,zI),e(zI,Jfo),e(os,Yfo),e(k,Kfo),e(k,yh),e(yh,kde),e(kde,Zfo),e(yh,emo),e(yh,WI),e(WI,omo),e(yh,rmo),e(k,tmo),e(k,xh),e(xh,Sde),e(Sde,amo),e(xh,nmo),e(xh,QI),e(QI,smo),e(xh,lmo),e(k,imo),e(k,$h),e($h,Rde),e(Rde,dmo),e($h,cmo),e($h,UI),e(UI,fmo),e($h,mmo),e(k,gmo),e(k,rs),e(rs,Pde),e(Pde,hmo),e(rs,pmo),e(rs,HI),e(HI,_mo),e(rs,umo),e(rs,JI),e(JI,bmo),e(rs,vmo),e(k,Fmo),e(k,kh),e(kh,Bde),e(Bde,Tmo),e(kh,Mmo),e(kh,YI),e(YI,Emo),e(kh,Cmo),e(k,wmo),e(k,ts),e(ts,Ide),e(Ide,Amo),e(ts,Lmo),e(ts,KI),e(KI,ymo),e(ts,xmo),e(ts,ZI),e(ZI,$mo),e(ts,kmo),e(k,Smo),e(k,as),e(as,Nde),e(Nde,Rmo),e(as,Pmo),e(as,eN),e(eN,Bmo),e(as,Imo),e(as,oN),e(oN,Nmo),e(as,qmo),e(k,jmo),e(k,ns),e(ns,qde),e(qde,Dmo),e(ns,Gmo),e(ns,rN),e(rN,Omo),e(ns,Vmo),e(ns,tN),e(tN,Xmo),e(ns,zmo),e(k,Wmo),e(k,ss),e(ss,jde),e(jde,Qmo),e(ss,Umo),e(ss,aN),e(aN,Hmo),e(ss,Jmo),e(ss,nN),e(nN,Ymo),e(ss,Kmo),e(k,Zmo),e(k,Sh),e(Sh,Dde),e(Dde,ego),e(Sh,ogo),e(Sh,sN),e(sN,rgo),e(Sh,tgo),e(k,ago),e(k,ls),e(ls,Gde),e(Gde,ngo),e(ls,sgo),e(ls,lN),e(lN,lgo),e(ls,igo),e(ls,iN),e(iN,dgo),e(ls,cgo),e(k,fgo),e(k,is),e(is,Ode),e(Ode,mgo),e(is,ggo),e(is,dN),e(dN,hgo),e(is,pgo),e(is,cN),e(cN,_go),e(is,ugo),e(k,bgo),e(k,ds),e(ds,Vde),e(Vde,vgo),e(ds,Fgo),e(ds,fN),e(fN,Tgo),e(ds,Mgo),e(ds,mN),e(mN,Ego),e(ds,Cgo),e(k,wgo),e(k,cs),e(cs,Xde),e(Xde,Ago),e(cs,Lgo),e(cs,gN),e(gN,ygo),e(cs,xgo),e(cs,hN),e(hN,$go),e(cs,kgo),e(k,Sgo),e(k,fs),e(fs,zde),e(zde,Rgo),e(fs,Pgo),e(fs,pN),e(pN,Bgo),e(fs,Igo),e(fs,_N),e(_N,Ngo),e(fs,qgo),e(k,jgo),e(k,ms),e(ms,Wde),e(Wde,Dgo),e(ms,Ggo),e(ms,uN),e(uN,Ogo),e(ms,Vgo),e(ms,bN),e(bN,Xgo),e(ms,zgo),e(k,Wgo),e(k,Rh),e(Rh,Qde),e(Qde,Qgo),e(Rh,Ugo),e(Rh,vN),e(vN,Hgo),e(Rh,Jgo),e(k,Ygo),e(k,gs),e(gs,Ude),e(Ude,Kgo),e(gs,Zgo),e(gs,FN),e(FN,eho),e(gs,oho),e(gs,TN),e(TN,rho),e(gs,tho),e(k,aho),e(k,Ph),e(Ph,Hde),e(Hde,nho),e(Ph,sho),e(Ph,MN),e(MN,lho),e(Ph,iho),e(k,dho),e(k,hs),e(hs,Jde),e(Jde,cho),e(hs,fho),e(hs,EN),e(EN,mho),e(hs,gho),e(hs,CN),e(CN,hho),e(hs,pho),e(k,_ho),e(k,ps),e(ps,Yde),e(Yde,uho),e(ps,bho),e(ps,wN),e(wN,vho),e(ps,Fho),e(ps,AN),e(AN,Tho),e(ps,Mho),e(k,Eho),e(k,_s),e(_s,Kde),e(Kde,Cho),e(_s,who),e(_s,LN),e(LN,Aho),e(_s,Lho),e(_s,yN),e(yN,yho),e(_s,xho),e(k,$ho),e(k,Bh),e(Bh,Zde),e(Zde,kho),e(Bh,Sho),e(Bh,xN),e(xN,Rho),e(Bh,Pho),e(k,Bho),e(k,us),e(us,ece),e(ece,Iho),e(us,Nho),e(us,$N),e($N,qho),e(us,jho),e(us,kN),e(kN,Dho),e(us,Gho),e(k,Oho),e(k,bs),e(bs,oce),e(oce,Vho),e(bs,Xho),e(bs,SN),e(SN,zho),e(bs,Who),e(bs,RN),e(RN,Qho),e(bs,Uho),e(k,Hho),e(k,vs),e(vs,rce),e(rce,Jho),e(vs,Yho),e(vs,PN),e(PN,Kho),e(vs,Zho),e(vs,BN),e(BN,epo),e(vs,opo),e(k,rpo),e(k,Ih),e(Ih,tce),e(tce,tpo),e(Ih,apo),e(Ih,IN),e(IN,npo),e(Ih,spo),e(k,lpo),e(k,Fs),e(Fs,ace),e(ace,ipo),e(Fs,dpo),e(Fs,NN),e(NN,cpo),e(Fs,fpo),e(Fs,qN),e(qN,mpo),e(Fs,gpo),e(k,hpo),e(k,Ts),e(Ts,nce),e(nce,ppo),e(Ts,_po),e(Ts,jN),e(jN,upo),e(Ts,bpo),e(Ts,DN),e(DN,vpo),e(Ts,Fpo),e(k,Tpo),e(k,Ms),e(Ms,sce),e(sce,Mpo),e(Ms,Epo),e(Ms,GN),e(GN,Cpo),e(Ms,wpo),e(Ms,ON),e(ON,Apo),e(Ms,Lpo),e(k,ypo),e(k,Es),e(Es,lce),e(lce,xpo),e(Es,$po),e(Es,VN),e(VN,kpo),e(Es,Spo),e(Es,XN),e(XN,Rpo),e(Es,Ppo),e(k,Bpo),e(k,Cs),e(Cs,ice),e(ice,Ipo),e(Cs,Npo),e(Cs,zN),e(zN,qpo),e(Cs,jpo),e(Cs,WN),e(WN,Dpo),e(Cs,Gpo),e(k,Opo),e(k,ws),e(ws,dce),e(dce,Vpo),e(ws,Xpo),e(ws,QN),e(QN,zpo),e(ws,Wpo),e(ws,UN),e(UN,Qpo),e(ws,Upo),e(k,Hpo),e(k,As),e(As,cce),e(cce,Jpo),e(As,Ypo),e(As,HN),e(HN,Kpo),e(As,Zpo),e(As,JN),e(JN,e_o),e(As,o_o),e(k,r_o),e(k,Ls),e(Ls,fce),e(fce,t_o),e(Ls,a_o),e(Ls,YN),e(YN,n_o),e(Ls,s_o),e(Ls,KN),e(KN,l_o),e(Ls,i_o),e(k,d_o),e(k,Nh),e(Nh,mce),e(mce,c_o),e(Nh,f_o),e(Nh,ZN),e(ZN,m_o),e(Nh,g_o),e(k,h_o),e(k,ys),e(ys,gce),e(gce,p_o),e(ys,__o),e(ys,eq),e(eq,u_o),e(ys,b_o),e(ys,oq),e(oq,v_o),e(ys,F_o),e(k,T_o),e(k,qh),e(qh,hce),e(hce,M_o),e(qh,E_o),e(qh,rq),e(rq,C_o),e(qh,w_o),e(k,A_o),e(k,jh),e(jh,pce),e(pce,L_o),e(jh,y_o),e(jh,tq),e(tq,x_o),e(jh,$_o),e(k,k_o),e(k,xs),e(xs,_ce),e(_ce,S_o),e(xs,R_o),e(xs,aq),e(aq,P_o),e(xs,B_o),e(xs,nq),e(nq,I_o),e(xs,N_o),e(k,q_o),e(k,$s),e($s,uce),e(uce,j_o),e($s,D_o),e($s,sq),e(sq,G_o),e($s,O_o),e($s,lq),e(lq,V_o),e($s,X_o),e(k,z_o),e(k,ks),e(ks,bce),e(bce,W_o),e(ks,Q_o),e(ks,iq),e(iq,U_o),e(ks,H_o),e(ks,dq),e(dq,J_o),e(ks,Y_o),e(k,K_o),e(k,Dh),e(Dh,vce),e(vce,Z_o),e(Dh,euo),e(Dh,cq),e(cq,ouo),e(Dh,ruo),e(k,tuo),e(k,Ss),e(Ss,Fce),e(Fce,auo),e(Ss,nuo),e(Ss,fq),e(fq,suo),e(Ss,luo),e(Ss,mq),e(mq,iuo),e(Ss,duo),e(k,cuo),e(k,Rs),e(Rs,Tce),e(Tce,fuo),e(Rs,muo),e(Rs,gq),e(gq,guo),e(Rs,huo),e(Rs,hq),e(hq,puo),e(Rs,_uo),e(k,uuo),e(k,Ps),e(Ps,Mce),e(Mce,buo),e(Ps,vuo),e(Ps,pq),e(pq,Fuo),e(Ps,Tuo),e(Ps,_q),e(_q,Muo),e(Ps,Euo),e(k,Cuo),e(k,Bs),e(Bs,Ece),e(Ece,wuo),e(Bs,Auo),e(Bs,uq),e(uq,Luo),e(Bs,yuo),e(Bs,bq),e(bq,xuo),e(Bs,$uo),e(k,kuo),e(k,Is),e(Is,Cce),e(Cce,Suo),e(Is,Ruo),e(Is,vq),e(vq,Puo),e(Is,Buo),e(Is,Fq),e(Fq,Iuo),e(Is,Nuo),e(k,quo),e(k,Ns),e(Ns,wce),e(wce,juo),e(Ns,Duo),e(Ns,Tq),e(Tq,Guo),e(Ns,Ouo),e(Ns,Mq),e(Mq,Vuo),e(Ns,Xuo),e(k,zuo),e(k,qs),e(qs,Ace),e(Ace,Wuo),e(qs,Quo),e(qs,Eq),e(Eq,Uuo),e(qs,Huo),e(qs,Cq),e(Cq,Juo),e(qs,Yuo),e(k,Kuo),e(k,js),e(js,Lce),e(Lce,Zuo),e(js,e2o),e(js,wq),e(wq,o2o),e(js,r2o),e(js,Aq),e(Aq,t2o),e(js,a2o),e(k,n2o),e(k,Gh),e(Gh,yce),e(yce,s2o),e(Gh,l2o),e(Gh,Lq),e(Lq,i2o),e(Gh,d2o),e(k,c2o),e(k,Ds),e(Ds,xce),e(xce,f2o),e(Ds,m2o),e(Ds,yq),e(yq,g2o),e(Ds,h2o),e(Ds,xq),e(xq,p2o),e(Ds,_2o),e(k,u2o),e(k,Gs),e(Gs,$ce),e($ce,b2o),e(Gs,v2o),e(Gs,$q),e($q,F2o),e(Gs,T2o),e(Gs,kq),e(kq,M2o),e(Gs,E2o),e(k,C2o),e(k,Oh),e(Oh,kce),e(kce,w2o),e(Oh,A2o),e(Oh,Sq),e(Sq,L2o),e(Oh,y2o),e(k,x2o),e(k,Vh),e(Vh,Sce),e(Sce,$2o),e(Vh,k2o),e(Vh,Rq),e(Rq,S2o),e(Vh,R2o),e(k,P2o),e(k,Xh),e(Xh,Rce),e(Rce,B2o),e(Xh,I2o),e(Xh,Pq),e(Pq,N2o),e(Xh,q2o),e(k,j2o),e(k,zh),e(zh,Pce),e(Pce,D2o),e(zh,G2o),e(zh,Bq),e(Bq,O2o),e(zh,V2o),e(k,X2o),e(k,Os),e(Os,Bce),e(Bce,z2o),e(Os,W2o),e(Os,Iq),e(Iq,Q2o),e(Os,U2o),e(Os,Nq),e(Nq,H2o),e(Os,J2o),e(k,Y2o),e(k,Wh),e(Wh,Ice),e(Ice,K2o),e(Wh,Z2o),e(Wh,qq),e(qq,e0o),e(Wh,o0o),e(k,r0o),e(k,Vs),e(Vs,Nce),e(Nce,t0o),e(Vs,a0o),e(Vs,jq),e(jq,n0o),e(Vs,s0o),e(Vs,Dq),e(Dq,l0o),e(Vs,i0o),e(k,d0o),e(k,Xs),e(Xs,qce),e(qce,c0o),e(Xs,f0o),e(Xs,Gq),e(Gq,m0o),e(Xs,g0o),e(Xs,Oq),e(Oq,h0o),e(Xs,p0o),e(k,_0o),e(k,zs),e(zs,jce),e(jce,u0o),e(zs,b0o),e(zs,Vq),e(Vq,v0o),e(zs,F0o),e(zs,Xq),e(Xq,T0o),e(zs,M0o),e(k,E0o),e(k,Ws),e(Ws,Dce),e(Dce,C0o),e(Ws,w0o),e(Ws,zq),e(zq,A0o),e(Ws,L0o),e(Ws,Wq),e(Wq,y0o),e(Ws,x0o),e(k,$0o),e(k,Qs),e(Qs,Gce),e(Gce,k0o),e(Qs,S0o),e(Qs,Qq),e(Qq,R0o),e(Qs,P0o),e(Qs,Uq),e(Uq,B0o),e(Qs,I0o),e(k,N0o),e(k,Us),e(Us,Oce),e(Oce,q0o),e(Us,j0o),e(Us,Hq),e(Hq,D0o),e(Us,G0o),e(Us,Jq),e(Jq,O0o),e(Us,V0o),e(k,X0o),e(k,Qh),e(Qh,Vce),e(Vce,z0o),e(Qh,W0o),e(Qh,Yq),e(Yq,Q0o),e(Qh,U0o),e(k,H0o),e(k,Uh),e(Uh,Xce),e(Xce,J0o),e(Uh,Y0o),e(Uh,Kq),e(Kq,K0o),e(Uh,Z0o),e(k,e1o),e(k,Hs),e(Hs,zce),e(zce,o1o),e(Hs,r1o),e(Hs,Zq),e(Zq,t1o),e(Hs,a1o),e(Hs,ej),e(ej,n1o),e(Hs,s1o),e(k,l1o),e(k,Js),e(Js,Wce),e(Wce,i1o),e(Js,d1o),e(Js,oj),e(oj,c1o),e(Js,f1o),e(Js,rj),e(rj,m1o),e(Js,g1o),e(k,h1o),e(k,Ys),e(Ys,Qce),e(Qce,p1o),e(Ys,_1o),e(Ys,tj),e(tj,u1o),e(Ys,b1o),e(Ys,aj),e(aj,v1o),e(Ys,F1o),e(k,T1o),e(k,Hh),e(Hh,Uce),e(Uce,M1o),e(Hh,E1o),e(Hh,nj),e(nj,C1o),e(Hh,w1o),e(k,A1o),e(k,Jh),e(Jh,Hce),e(Hce,L1o),e(Jh,y1o),e(Jh,sj),e(sj,x1o),e(Jh,$1o),e(k,k1o),e(k,Yh),e(Yh,Jce),e(Jce,S1o),e(Yh,R1o),e(Yh,lj),e(lj,P1o),e(Yh,B1o),e(k,I1o),e(k,Ks),e(Ks,Yce),e(Yce,N1o),e(Ks,q1o),e(Ks,ij),e(ij,j1o),e(Ks,D1o),e(Ks,dj),e(dj,G1o),e(Ks,O1o),e(k,V1o),e(k,Zs),e(Zs,Kce),e(Kce,X1o),e(Zs,z1o),e(Zs,cj),e(cj,W1o),e(Zs,Q1o),e(Zs,fj),e(fj,U1o),e(Zs,H1o),e(k,J1o),e(k,Kh),e(Kh,Zce),e(Zce,Y1o),e(Kh,K1o),e(Kh,mj),e(mj,Z1o),e(Kh,ebo),e(k,obo),e(k,Zh),e(Zh,efe),e(efe,rbo),e(Zh,tbo),e(Zh,gj),e(gj,abo),e(Zh,nbo),e(k,sbo),e(k,ep),e(ep,ofe),e(ofe,lbo),e(ep,ibo),e(ep,hj),e(hj,dbo),e(ep,cbo),e(k,fbo),e(k,el),e(el,rfe),e(rfe,mbo),e(el,gbo),e(el,pj),e(pj,hbo),e(el,pbo),e(el,_j),e(_j,_bo),e(el,ubo),e(k,bbo),e(k,op),e(op,tfe),e(tfe,vbo),e(op,Fbo),e(op,uj),e(uj,Tbo),e(op,Mbo),e(k,Ebo),e(k,rp),e(rp,afe),e(afe,Cbo),e(rp,wbo),e(rp,bj),e(bj,Abo),e(rp,Lbo),e(k,ybo),e(k,ol),e(ol,nfe),e(nfe,xbo),e(ol,$bo),e(ol,vj),e(vj,kbo),e(ol,Sbo),e(ol,Fj),e(Fj,Rbo),e(ol,Pbo),e(k,Bbo),e(k,rl),e(rl,sfe),e(sfe,Ibo),e(rl,Nbo),e(rl,Tj),e(Tj,qbo),e(rl,jbo),e(rl,Mj),e(Mj,Dbo),e(rl,Gbo),e(k,Obo),e(k,tl),e(tl,lfe),e(lfe,Vbo),e(tl,Xbo),e(tl,Ej),e(Ej,zbo),e(tl,Wbo),e(tl,Cj),e(Cj,Qbo),e(tl,Ubo),e(k,Hbo),e(k,al),e(al,ife),e(ife,Jbo),e(al,Ybo),e(al,wj),e(wj,Kbo),e(al,Zbo),e(al,Aj),e(Aj,evo),e(al,ovo),e(Sr,rvo),M(tp,Sr,null),e(xo,tvo),e(xo,ap),M(xy,ap,null),e(ap,avo),e(ap,dfe),e(dfe,nvo),b(f,lUe,u),b(f,Zi,u),e(Zi,np),e(np,cfe),M($y,cfe,null),e(Zi,svo),e(Zi,ffe),e(ffe,lvo),b(f,iUe,u),b(f,$o,u),M(ky,$o,null),e($o,ivo),e($o,Sy),e(Sy,dvo),e(Sy,Lj),e(Lj,cvo),e(Sy,fvo),e($o,mvo),e($o,Ry),e(Ry,gvo),e(Ry,mfe),e(mfe,hvo),e(Ry,pvo),e($o,_vo),e($o,He),M(Py,He,null),e(He,uvo),e(He,gfe),e(gfe,bvo),e(He,vvo),e(He,Oa),e(Oa,Fvo),e(Oa,hfe),e(hfe,Tvo),e(Oa,Mvo),e(Oa,pfe),e(pfe,Evo),e(Oa,Cvo),e(Oa,_fe),e(_fe,wvo),e(Oa,Avo),e(He,Lvo),e(He,Q),e(Q,sp),e(sp,ufe),e(ufe,yvo),e(sp,xvo),e(sp,yj),e(yj,$vo),e(sp,kvo),e(Q,Svo),e(Q,lp),e(lp,bfe),e(bfe,Rvo),e(lp,Pvo),e(lp,xj),e(xj,Bvo),e(lp,Ivo),e(Q,Nvo),e(Q,ip),e(ip,vfe),e(vfe,qvo),e(ip,jvo),e(ip,$j),e($j,Dvo),e(ip,Gvo),e(Q,Ovo),e(Q,dp),e(dp,Ffe),e(Ffe,Vvo),e(dp,Xvo),e(dp,kj),e(kj,zvo),e(dp,Wvo),e(Q,Qvo),e(Q,cp),e(cp,Tfe),e(Tfe,Uvo),e(cp,Hvo),e(cp,Sj),e(Sj,Jvo),e(cp,Yvo),e(Q,Kvo),e(Q,fp),e(fp,Mfe),e(Mfe,Zvo),e(fp,eFo),e(fp,Rj),e(Rj,oFo),e(fp,rFo),e(Q,tFo),e(Q,mp),e(mp,Efe),e(Efe,aFo),e(mp,nFo),e(mp,Pj),e(Pj,sFo),e(mp,lFo),e(Q,iFo),e(Q,gp),e(gp,Cfe),e(Cfe,dFo),e(gp,cFo),e(gp,Bj),e(Bj,fFo),e(gp,mFo),e(Q,gFo),e(Q,hp),e(hp,wfe),e(wfe,hFo),e(hp,pFo),e(hp,Ij),e(Ij,_Fo),e(hp,uFo),e(Q,bFo),e(Q,pp),e(pp,Afe),e(Afe,vFo),e(pp,FFo),e(pp,Nj),e(Nj,TFo),e(pp,MFo),e(Q,EFo),e(Q,_p),e(_p,Lfe),e(Lfe,CFo),e(_p,wFo),e(_p,qj),e(qj,AFo),e(_p,LFo),e(Q,yFo),e(Q,up),e(up,yfe),e(yfe,xFo),e(up,$Fo),e(up,jj),e(jj,kFo),e(up,SFo),e(Q,RFo),e(Q,bp),e(bp,xfe),e(xfe,PFo),e(bp,BFo),e(bp,Dj),e(Dj,IFo),e(bp,NFo),e(Q,qFo),e(Q,vp),e(vp,$fe),e($fe,jFo),e(vp,DFo),e(vp,Gj),e(Gj,GFo),e(vp,OFo),e(Q,VFo),e(Q,Fp),e(Fp,kfe),e(kfe,XFo),e(Fp,zFo),e(Fp,Oj),e(Oj,WFo),e(Fp,QFo),e(Q,UFo),e(Q,Tp),e(Tp,Sfe),e(Sfe,HFo),e(Tp,JFo),e(Tp,Vj),e(Vj,YFo),e(Tp,KFo),e(Q,ZFo),e(Q,Mp),e(Mp,Rfe),e(Rfe,eTo),e(Mp,oTo),e(Mp,Xj),e(Xj,rTo),e(Mp,tTo),e(Q,aTo),e(Q,Ep),e(Ep,Pfe),e(Pfe,nTo),e(Ep,sTo),e(Ep,zj),e(zj,lTo),e(Ep,iTo),e(Q,dTo),e(Q,Cp),e(Cp,Bfe),e(Bfe,cTo),e(Cp,fTo),e(Cp,Wj),e(Wj,mTo),e(Cp,gTo),e(Q,hTo),e(Q,wp),e(wp,Ife),e(Ife,pTo),e(wp,_To),e(wp,Qj),e(Qj,uTo),e(wp,bTo),e(Q,vTo),e(Q,Ap),e(Ap,Nfe),e(Nfe,FTo),e(Ap,TTo),e(Ap,Uj),e(Uj,MTo),e(Ap,ETo),e(Q,CTo),e(Q,Lp),e(Lp,qfe),e(qfe,wTo),e(Lp,ATo),e(Lp,Hj),e(Hj,LTo),e(Lp,yTo),e(Q,xTo),e(Q,yp),e(yp,jfe),e(jfe,$To),e(yp,kTo),e(yp,Jj),e(Jj,STo),e(yp,RTo),e(Q,PTo),e(Q,xp),e(xp,Dfe),e(Dfe,BTo),e(xp,ITo),e(xp,Yj),e(Yj,NTo),e(xp,qTo),e(Q,jTo),e(Q,$p),e($p,Gfe),e(Gfe,DTo),e($p,GTo),e($p,Kj),e(Kj,OTo),e($p,VTo),e(Q,XTo),e(Q,kp),e(kp,Ofe),e(Ofe,zTo),e(kp,WTo),e(kp,Zj),e(Zj,QTo),e(kp,UTo),e(Q,HTo),e(Q,Sp),e(Sp,Vfe),e(Vfe,JTo),e(Sp,YTo),e(Sp,eD),e(eD,KTo),e(Sp,ZTo),e(Q,e8o),e(Q,Rp),e(Rp,Xfe),e(Xfe,o8o),e(Rp,r8o),e(Rp,oD),e(oD,t8o),e(Rp,a8o),e(Q,n8o),e(Q,Pp),e(Pp,zfe),e(zfe,s8o),e(Pp,l8o),e(Pp,rD),e(rD,i8o),e(Pp,d8o),e(Q,c8o),e(Q,Bp),e(Bp,Wfe),e(Wfe,f8o),e(Bp,m8o),e(Bp,tD),e(tD,g8o),e(Bp,h8o),e(Q,p8o),e(Q,Ip),e(Ip,Qfe),e(Qfe,_8o),e(Ip,u8o),e(Ip,aD),e(aD,b8o),e(Ip,v8o),e(Q,F8o),e(Q,Np),e(Np,Ufe),e(Ufe,T8o),e(Np,M8o),e(Np,nD),e(nD,E8o),e(Np,C8o),e(Q,w8o),e(Q,qp),e(qp,Hfe),e(Hfe,A8o),e(qp,L8o),e(qp,sD),e(sD,y8o),e(qp,x8o),e(Q,$8o),e(Q,jp),e(jp,Jfe),e(Jfe,k8o),e(jp,S8o),e(jp,lD),e(lD,R8o),e(jp,P8o),e(Q,B8o),e(Q,Dp),e(Dp,Yfe),e(Yfe,I8o),e(Dp,N8o),e(Dp,iD),e(iD,q8o),e(Dp,j8o),e(Q,D8o),e(Q,Gp),e(Gp,Kfe),e(Kfe,G8o),e(Gp,O8o),e(Gp,dD),e(dD,V8o),e(Gp,X8o),e(Q,z8o),e(Q,Op),e(Op,Zfe),e(Zfe,W8o),e(Op,Q8o),e(Op,cD),e(cD,U8o),e(Op,H8o),e(Q,J8o),e(Q,Vp),e(Vp,eme),e(eme,Y8o),e(Vp,K8o),e(Vp,fD),e(fD,Z8o),e(Vp,eMo),e(He,oMo),M(Xp,He,null),e(He,rMo),M(zp,He,null),e($o,tMo),e($o,Wp),M(By,Wp,null),e(Wp,aMo),e(Wp,ome),e(ome,nMo),b(f,dUe,u),b(f,ed,u),e(ed,Qp),e(Qp,rme),M(Iy,rme,null),e(ed,sMo),e(ed,tme),e(tme,lMo),b(f,cUe,u),b(f,ko,u),M(Ny,ko,null),e(ko,iMo),e(ko,qy),e(qy,dMo),e(qy,mD),e(mD,cMo),e(qy,fMo),e(ko,mMo),e(ko,jy),e(jy,gMo),e(jy,ame),e(ame,hMo),e(jy,pMo),e(ko,_Mo),e(ko,Je),M(Dy,Je,null),e(Je,uMo),e(Je,nme),e(nme,bMo),e(Je,vMo),e(Je,od),e(od,FMo),e(od,sme),e(sme,TMo),e(od,MMo),e(od,lme),e(lme,EMo),e(od,CMo),e(Je,wMo),e(Je,ie),e(ie,Up),e(Up,ime),e(ime,AMo),e(Up,LMo),e(Up,gD),e(gD,yMo),e(Up,xMo),e(ie,$Mo),e(ie,Hp),e(Hp,dme),e(dme,kMo),e(Hp,SMo),e(Hp,hD),e(hD,RMo),e(Hp,PMo),e(ie,BMo),e(ie,Jp),e(Jp,cme),e(cme,IMo),e(Jp,NMo),e(Jp,pD),e(pD,qMo),e(Jp,jMo),e(ie,DMo),e(ie,Yp),e(Yp,fme),e(fme,GMo),e(Yp,OMo),e(Yp,_D),e(_D,VMo),e(Yp,XMo),e(ie,zMo),e(ie,Kp),e(Kp,mme),e(mme,WMo),e(Kp,QMo),e(Kp,uD),e(uD,UMo),e(Kp,HMo),e(ie,JMo),e(ie,Zp),e(Zp,gme),e(gme,YMo),e(Zp,KMo),e(Zp,bD),e(bD,ZMo),e(Zp,eEo),e(ie,oEo),e(ie,e_),e(e_,hme),e(hme,rEo),e(e_,tEo),e(e_,vD),e(vD,aEo),e(e_,nEo),e(ie,sEo),e(ie,o_),e(o_,pme),e(pme,lEo),e(o_,iEo),e(o_,FD),e(FD,dEo),e(o_,cEo),e(ie,fEo),e(ie,r_),e(r_,_me),e(_me,mEo),e(r_,gEo),e(r_,TD),e(TD,hEo),e(r_,pEo),e(ie,_Eo),e(ie,t_),e(t_,ume),e(ume,uEo),e(t_,bEo),e(t_,MD),e(MD,vEo),e(t_,FEo),e(ie,TEo),e(ie,a_),e(a_,bme),e(bme,MEo),e(a_,EEo),e(a_,ED),e(ED,CEo),e(a_,wEo),e(ie,AEo),e(ie,n_),e(n_,vme),e(vme,LEo),e(n_,yEo),e(n_,CD),e(CD,xEo),e(n_,$Eo),e(ie,kEo),e(ie,s_),e(s_,Fme),e(Fme,SEo),e(s_,REo),e(s_,wD),e(wD,PEo),e(s_,BEo),e(ie,IEo),e(ie,l_),e(l_,Tme),e(Tme,NEo),e(l_,qEo),e(l_,AD),e(AD,jEo),e(l_,DEo),e(ie,GEo),e(ie,i_),e(i_,Mme),e(Mme,OEo),e(i_,VEo),e(i_,LD),e(LD,XEo),e(i_,zEo),e(ie,WEo),e(ie,d_),e(d_,Eme),e(Eme,QEo),e(d_,UEo),e(d_,yD),e(yD,HEo),e(d_,JEo),e(ie,YEo),e(ie,c_),e(c_,Cme),e(Cme,KEo),e(c_,ZEo),e(c_,xD),e(xD,e4o),e(c_,o4o),e(ie,r4o),e(ie,f_),e(f_,wme),e(wme,t4o),e(f_,a4o),e(f_,$D),e($D,n4o),e(f_,s4o),e(ie,l4o),e(ie,m_),e(m_,Ame),e(Ame,i4o),e(m_,d4o),e(m_,kD),e(kD,c4o),e(m_,f4o),e(ie,m4o),e(ie,g_),e(g_,Lme),e(Lme,g4o),e(g_,h4o),e(g_,SD),e(SD,p4o),e(g_,_4o),e(Je,u4o),M(h_,Je,null),e(Je,b4o),M(p_,Je,null),e(ko,v4o),e(ko,__),M(Gy,__,null),e(__,F4o),e(__,yme),e(yme,T4o),b(f,fUe,u),b(f,rd,u),e(rd,u_),e(u_,xme),M(Oy,xme,null),e(rd,M4o),e(rd,$me),e($me,E4o),b(f,mUe,u),b(f,So,u),M(Vy,So,null),e(So,C4o),e(So,td),e(td,w4o),e(td,RD),e(RD,A4o),e(td,L4o),e(td,PD),e(PD,y4o),e(td,x4o),e(So,$4o),e(So,Xy),e(Xy,k4o),e(Xy,kme),e(kme,S4o),e(Xy,R4o),e(So,P4o),e(So,mt),M(zy,mt,null),e(mt,B4o),e(mt,Sme),e(Sme,I4o),e(mt,N4o),e(mt,ad),e(ad,q4o),e(ad,Rme),e(Rme,j4o),e(ad,D4o),e(ad,BD),e(BD,G4o),e(ad,O4o),e(mt,V4o),M(b_,mt,null),e(So,X4o),e(So,Ye),M(Wy,Ye,null),e(Ye,z4o),e(Ye,Pme),e(Pme,W4o),e(Ye,Q4o),e(Ye,Va),e(Va,U4o),e(Va,Bme),e(Bme,H4o),e(Va,J4o),e(Va,Ime),e(Ime,Y4o),e(Va,K4o),e(Va,Nme),e(Nme,Z4o),e(Va,eCo),e(Ye,oCo),e(Ye,y),e(y,v_),e(v_,qme),e(qme,rCo),e(v_,tCo),e(v_,ID),e(ID,aCo),e(v_,nCo),e(y,sCo),e(y,F_),e(F_,jme),e(jme,lCo),e(F_,iCo),e(F_,ND),e(ND,dCo),e(F_,cCo),e(y,fCo),e(y,T_),e(T_,Dme),e(Dme,mCo),e(T_,gCo),e(T_,qD),e(qD,hCo),e(T_,pCo),e(y,_Co),e(y,M_),e(M_,Gme),e(Gme,uCo),e(M_,bCo),e(M_,jD),e(jD,vCo),e(M_,FCo),e(y,TCo),e(y,E_),e(E_,Ome),e(Ome,MCo),e(E_,ECo),e(E_,DD),e(DD,CCo),e(E_,wCo),e(y,ACo),e(y,C_),e(C_,Vme),e(Vme,LCo),e(C_,yCo),e(C_,GD),e(GD,xCo),e(C_,$Co),e(y,kCo),e(y,w_),e(w_,Xme),e(Xme,SCo),e(w_,RCo),e(w_,OD),e(OD,PCo),e(w_,BCo),e(y,ICo),e(y,A_),e(A_,zme),e(zme,NCo),e(A_,qCo),e(A_,VD),e(VD,jCo),e(A_,DCo),e(y,GCo),e(y,L_),e(L_,Wme),e(Wme,OCo),e(L_,VCo),e(L_,XD),e(XD,XCo),e(L_,zCo),e(y,WCo),e(y,y_),e(y_,Qme),e(Qme,QCo),e(y_,UCo),e(y_,zD),e(zD,HCo),e(y_,JCo),e(y,YCo),e(y,x_),e(x_,Ume),e(Ume,KCo),e(x_,ZCo),e(x_,WD),e(WD,e3o),e(x_,o3o),e(y,r3o),e(y,$_),e($_,Hme),e(Hme,t3o),e($_,a3o),e($_,QD),e(QD,n3o),e($_,s3o),e(y,l3o),e(y,k_),e(k_,Jme),e(Jme,i3o),e(k_,d3o),e(k_,UD),e(UD,c3o),e(k_,f3o),e(y,m3o),e(y,S_),e(S_,Yme),e(Yme,g3o),e(S_,h3o),e(S_,HD),e(HD,p3o),e(S_,_3o),e(y,u3o),e(y,R_),e(R_,Kme),e(Kme,b3o),e(R_,v3o),e(R_,JD),e(JD,F3o),e(R_,T3o),e(y,M3o),e(y,P_),e(P_,Zme),e(Zme,E3o),e(P_,C3o),e(P_,YD),e(YD,w3o),e(P_,A3o),e(y,L3o),e(y,B_),e(B_,ege),e(ege,y3o),e(B_,x3o),e(B_,KD),e(KD,$3o),e(B_,k3o),e(y,S3o),e(y,I_),e(I_,oge),e(oge,R3o),e(I_,P3o),e(I_,ZD),e(ZD,B3o),e(I_,I3o),e(y,N3o),e(y,N_),e(N_,rge),e(rge,q3o),e(N_,j3o),e(N_,eG),e(eG,D3o),e(N_,G3o),e(y,O3o),e(y,q_),e(q_,tge),e(tge,V3o),e(q_,X3o),e(q_,oG),e(oG,z3o),e(q_,W3o),e(y,Q3o),e(y,j_),e(j_,age),e(age,U3o),e(j_,H3o),e(j_,rG),e(rG,J3o),e(j_,Y3o),e(y,K3o),e(y,D_),e(D_,nge),e(nge,Z3o),e(D_,e5o),e(D_,tG),e(tG,o5o),e(D_,r5o),e(y,t5o),e(y,G_),e(G_,sge),e(sge,a5o),e(G_,n5o),e(G_,aG),e(aG,s5o),e(G_,l5o),e(y,i5o),e(y,O_),e(O_,lge),e(lge,d5o),e(O_,c5o),e(O_,nG),e(nG,f5o),e(O_,m5o),e(y,g5o),e(y,V_),e(V_,ige),e(ige,h5o),e(V_,p5o),e(V_,sG),e(sG,_5o),e(V_,u5o),e(y,b5o),e(y,X_),e(X_,dge),e(dge,v5o),e(X_,F5o),e(X_,lG),e(lG,T5o),e(X_,M5o),e(y,E5o),e(y,z_),e(z_,cge),e(cge,C5o),e(z_,w5o),e(z_,iG),e(iG,A5o),e(z_,L5o),e(y,y5o),e(y,W_),e(W_,fge),e(fge,x5o),e(W_,$5o),e(W_,dG),e(dG,k5o),e(W_,S5o),e(y,R5o),e(y,Q_),e(Q_,mge),e(mge,P5o),e(Q_,B5o),e(Q_,cG),e(cG,I5o),e(Q_,N5o),e(y,q5o),e(y,U_),e(U_,gge),e(gge,j5o),e(U_,D5o),e(U_,fG),e(fG,G5o),e(U_,O5o),e(y,V5o),e(y,H_),e(H_,hge),e(hge,X5o),e(H_,z5o),e(H_,mG),e(mG,W5o),e(H_,Q5o),e(y,U5o),e(y,J_),e(J_,pge),e(pge,H5o),e(J_,J5o),e(J_,gG),e(gG,Y5o),e(J_,K5o),e(y,Z5o),e(y,Y_),e(Y_,_ge),e(_ge,ewo),e(Y_,owo),e(Y_,hG),e(hG,rwo),e(Y_,two),e(y,awo),e(y,K_),e(K_,uge),e(uge,nwo),e(K_,swo),e(K_,pG),e(pG,lwo),e(K_,iwo),e(y,dwo),e(y,Z_),e(Z_,bge),e(bge,cwo),e(Z_,fwo),e(Z_,_G),e(_G,mwo),e(Z_,gwo),e(y,hwo),e(y,nl),e(nl,vge),e(vge,pwo),e(nl,_wo),e(nl,uG),e(uG,uwo),e(nl,bwo),e(nl,bG),e(bG,vwo),e(nl,Fwo),e(y,Two),e(y,eu),e(eu,Fge),e(Fge,Mwo),e(eu,Ewo),e(eu,vG),e(vG,Cwo),e(eu,wwo),e(y,Awo),e(y,ou),e(ou,Tge),e(Tge,Lwo),e(ou,ywo),e(ou,FG),e(FG,xwo),e(ou,$wo),e(y,kwo),e(y,ru),e(ru,Mge),e(Mge,Swo),e(ru,Rwo),e(ru,TG),e(TG,Pwo),e(ru,Bwo),e(y,Iwo),e(y,tu),e(tu,Ege),e(Ege,Nwo),e(tu,qwo),e(tu,MG),e(MG,jwo),e(tu,Dwo),e(y,Gwo),e(y,au),e(au,Cge),e(Cge,Owo),e(au,Vwo),e(au,EG),e(EG,Xwo),e(au,zwo),e(y,Wwo),e(y,nu),e(nu,wge),e(wge,Qwo),e(nu,Uwo),e(nu,CG),e(CG,Hwo),e(nu,Jwo),e(y,Ywo),e(y,su),e(su,Age),e(Age,Kwo),e(su,Zwo),e(su,wG),e(wG,e6o),e(su,o6o),e(y,r6o),e(y,lu),e(lu,Lge),e(Lge,t6o),e(lu,a6o),e(lu,AG),e(AG,n6o),e(lu,s6o),e(y,l6o),e(y,iu),e(iu,yge),e(yge,i6o),e(iu,d6o),e(iu,LG),e(LG,c6o),e(iu,f6o),e(y,m6o),e(y,du),e(du,xge),e(xge,g6o),e(du,h6o),e(du,yG),e(yG,p6o),e(du,_6o),e(y,u6o),e(y,cu),e(cu,$ge),e($ge,b6o),e(cu,v6o),e(cu,xG),e(xG,F6o),e(cu,T6o),e(y,M6o),e(y,fu),e(fu,kge),e(kge,E6o),e(fu,C6o),e(fu,$G),e($G,w6o),e(fu,A6o),e(y,L6o),e(y,mu),e(mu,Sge),e(Sge,y6o),e(mu,x6o),e(mu,kG),e(kG,$6o),e(mu,k6o),e(y,S6o),e(y,gu),e(gu,Rge),e(Rge,R6o),e(gu,P6o),e(gu,SG),e(SG,B6o),e(gu,I6o),e(y,N6o),e(y,hu),e(hu,Pge),e(Pge,q6o),e(hu,j6o),e(hu,RG),e(RG,D6o),e(hu,G6o),e(y,O6o),e(y,pu),e(pu,Bge),e(Bge,V6o),e(pu,X6o),e(pu,PG),e(PG,z6o),e(pu,W6o),e(y,Q6o),e(y,_u),e(_u,Ige),e(Ige,U6o),e(_u,H6o),e(_u,BG),e(BG,J6o),e(_u,Y6o),e(y,K6o),e(y,uu),e(uu,Nge),e(Nge,Z6o),e(uu,eAo),e(uu,IG),e(IG,oAo),e(uu,rAo),e(y,tAo),e(y,bu),e(bu,qge),e(qge,aAo),e(bu,nAo),e(bu,NG),e(NG,sAo),e(bu,lAo),e(y,iAo),e(y,vu),e(vu,jge),e(jge,dAo),e(vu,cAo),e(vu,qG),e(qG,fAo),e(vu,mAo),e(y,gAo),e(y,Fu),e(Fu,Dge),e(Dge,hAo),e(Fu,pAo),e(Fu,jG),e(jG,_Ao),e(Fu,uAo),e(y,bAo),e(y,Tu),e(Tu,Gge),e(Gge,vAo),e(Tu,FAo),e(Tu,DG),e(DG,TAo),e(Tu,MAo),e(y,EAo),e(y,Mu),e(Mu,Oge),e(Oge,CAo),e(Mu,wAo),e(Mu,GG),e(GG,AAo),e(Mu,LAo),e(y,yAo),e(y,Eu),e(Eu,Vge),e(Vge,xAo),e(Eu,$Ao),e(Eu,OG),e(OG,kAo),e(Eu,SAo),e(y,RAo),e(y,Cu),e(Cu,Xge),e(Xge,PAo),e(Cu,BAo),e(Cu,VG),e(VG,IAo),e(Cu,NAo),e(y,qAo),e(y,wu),e(wu,zge),e(zge,jAo),e(wu,DAo),e(wu,XG),e(XG,GAo),e(wu,OAo),e(y,VAo),e(y,Au),e(Au,Wge),e(Wge,XAo),e(Au,zAo),e(Au,zG),e(zG,WAo),e(Au,QAo),e(y,UAo),e(y,Lu),e(Lu,Qge),e(Qge,HAo),e(Lu,JAo),e(Lu,WG),e(WG,YAo),e(Lu,KAo),e(y,ZAo),e(y,yu),e(yu,Uge),e(Uge,e7o),e(yu,o7o),e(yu,QG),e(QG,r7o),e(yu,t7o),e(y,a7o),e(y,xu),e(xu,Hge),e(Hge,n7o),e(xu,s7o),e(xu,UG),e(UG,l7o),e(xu,i7o),e(y,d7o),e(y,$u),e($u,Jge),e(Jge,c7o),e($u,f7o),e($u,HG),e(HG,m7o),e($u,g7o),e(y,h7o),e(y,ku),e(ku,Yge),e(Yge,p7o),e(ku,_7o),e(ku,JG),e(JG,u7o),e(ku,b7o),e(y,v7o),e(y,Su),e(Su,Kge),e(Kge,F7o),e(Su,T7o),e(Su,YG),e(YG,M7o),e(Su,E7o),e(y,C7o),e(y,Ru),e(Ru,Zge),e(Zge,w7o),e(Ru,A7o),e(Ru,KG),e(KG,L7o),e(Ru,y7o),e(y,x7o),e(y,Pu),e(Pu,ehe),e(ehe,$7o),e(Pu,k7o),e(Pu,ZG),e(ZG,S7o),e(Pu,R7o),e(y,P7o),e(y,Bu),e(Bu,ohe),e(ohe,B7o),e(Bu,I7o),e(Bu,eO),e(eO,N7o),e(Bu,q7o),e(y,j7o),e(y,Iu),e(Iu,rhe),e(rhe,D7o),e(Iu,G7o),e(Iu,oO),e(oO,O7o),e(Iu,V7o),e(y,X7o),e(y,Nu),e(Nu,the),e(the,z7o),e(Nu,W7o),e(Nu,rO),e(rO,Q7o),e(Nu,U7o),e(y,H7o),e(y,qu),e(qu,ahe),e(ahe,J7o),e(qu,Y7o),e(qu,tO),e(tO,K7o),e(qu,Z7o),e(y,eLo),e(y,ju),e(ju,nhe),e(nhe,oLo),e(ju,rLo),e(ju,aO),e(aO,tLo),e(ju,aLo),e(y,nLo),e(y,Du),e(Du,she),e(she,sLo),e(Du,lLo),e(Du,nO),e(nO,iLo),e(Du,dLo),e(y,cLo),e(y,Gu),e(Gu,lhe),e(lhe,fLo),e(Gu,mLo),e(Gu,sO),e(sO,gLo),e(Gu,hLo),e(y,pLo),e(y,Ou),e(Ou,ihe),e(ihe,_Lo),e(Ou,uLo),e(Ou,lO),e(lO,bLo),e(Ou,vLo),e(y,FLo),e(y,Vu),e(Vu,dhe),e(dhe,TLo),e(Vu,MLo),e(Vu,iO),e(iO,ELo),e(Vu,CLo),e(y,wLo),e(y,Xu),e(Xu,che),e(che,ALo),e(Xu,LLo),e(Xu,dO),e(dO,yLo),e(Xu,xLo),e(y,$Lo),e(y,zu),e(zu,fhe),e(fhe,kLo),e(zu,SLo),e(zu,cO),e(cO,RLo),e(zu,PLo),e(y,BLo),e(y,Wu),e(Wu,mhe),e(mhe,ILo),e(Wu,NLo),e(Wu,fO),e(fO,qLo),e(Wu,jLo),e(y,DLo),e(y,Qu),e(Qu,ghe),e(ghe,GLo),e(Qu,OLo),e(Qu,mO),e(mO,VLo),e(Qu,XLo),e(y,zLo),e(y,Uu),e(Uu,hhe),e(hhe,WLo),e(Uu,QLo),e(Uu,gO),e(gO,ULo),e(Uu,HLo),e(y,JLo),e(y,Hu),e(Hu,phe),e(phe,YLo),e(Hu,KLo),e(Hu,hO),e(hO,ZLo),e(Hu,eyo),e(y,oyo),e(y,Ju),e(Ju,_he),e(_he,ryo),e(Ju,tyo),e(Ju,pO),e(pO,ayo),e(Ju,nyo),e(y,syo),e(y,Yu),e(Yu,uhe),e(uhe,lyo),e(Yu,iyo),e(Yu,_O),e(_O,dyo),e(Yu,cyo),e(y,fyo),e(y,Ku),e(Ku,bhe),e(bhe,myo),e(Ku,gyo),e(Ku,uO),e(uO,hyo),e(Ku,pyo),e(y,_yo),e(y,Zu),e(Zu,vhe),e(vhe,uyo),e(Zu,byo),e(Zu,bO),e(bO,vyo),e(Zu,Fyo),e(y,Tyo),e(y,e2),e(e2,Fhe),e(Fhe,Myo),e(e2,Eyo),e(e2,vO),e(vO,Cyo),e(e2,wyo),e(y,Ayo),e(y,o2),e(o2,The),e(The,Lyo),e(o2,yyo),e(o2,FO),e(FO,xyo),e(o2,$yo),e(y,kyo),e(y,r2),e(r2,Mhe),e(Mhe,Syo),e(r2,Ryo),e(r2,TO),e(TO,Pyo),e(r2,Byo),e(y,Iyo),e(y,t2),e(t2,Ehe),e(Ehe,Nyo),e(t2,qyo),e(t2,MO),e(MO,jyo),e(t2,Dyo),e(y,Gyo),e(y,a2),e(a2,Che),e(Che,Oyo),e(a2,Vyo),e(a2,EO),e(EO,Xyo),e(a2,zyo),e(y,Wyo),e(y,n2),e(n2,whe),e(whe,Qyo),e(n2,Uyo),e(n2,CO),e(CO,Hyo),e(n2,Jyo),e(y,Yyo),e(y,s2),e(s2,Ahe),e(Ahe,Kyo),e(s2,Zyo),e(s2,wO),e(wO,e9o),e(s2,o9o),e(y,r9o),e(y,l2),e(l2,Lhe),e(Lhe,t9o),e(l2,a9o),e(l2,AO),e(AO,n9o),e(l2,s9o),e(y,l9o),e(y,i2),e(i2,yhe),e(yhe,i9o),e(i2,d9o),e(i2,LO),e(LO,c9o),e(i2,f9o),e(y,m9o),e(y,d2),e(d2,xhe),e(xhe,g9o),e(d2,h9o),e(d2,yO),e(yO,p9o),e(d2,_9o),e(y,u9o),e(y,c2),e(c2,$he),e($he,b9o),e(c2,v9o),e(c2,xO),e(xO,F9o),e(c2,T9o),e(y,M9o),e(y,f2),e(f2,khe),e(khe,E9o),e(f2,C9o),e(f2,$O),e($O,w9o),e(f2,A9o),e(y,L9o),e(y,m2),e(m2,She),e(She,y9o),e(m2,x9o),e(m2,kO),e(kO,$9o),e(m2,k9o),e(y,S9o),e(y,g2),e(g2,Rhe),e(Rhe,R9o),e(g2,P9o),e(g2,SO),e(SO,B9o),e(g2,I9o),e(y,N9o),e(y,h2),e(h2,Phe),e(Phe,q9o),e(h2,j9o),e(h2,RO),e(RO,D9o),e(h2,G9o),e(y,O9o),e(y,p2),e(p2,Bhe),e(Bhe,V9o),e(p2,X9o),e(p2,PO),e(PO,z9o),e(p2,W9o),e(y,Q9o),e(y,_2),e(_2,Ihe),e(Ihe,U9o),e(_2,H9o),e(_2,BO),e(BO,J9o),e(_2,Y9o),e(y,K9o),e(y,u2),e(u2,Nhe),e(Nhe,Z9o),e(u2,exo),e(u2,IO),e(IO,oxo),e(u2,rxo),e(y,txo),e(y,b2),e(b2,qhe),e(qhe,axo),e(b2,nxo),e(b2,NO),e(NO,sxo),e(b2,lxo),e(y,ixo),e(y,v2),e(v2,jhe),e(jhe,dxo),e(v2,cxo),e(v2,qO),e(qO,fxo),e(v2,mxo),e(y,gxo),e(y,F2),e(F2,Dhe),e(Dhe,hxo),e(F2,pxo),e(F2,jO),e(jO,_xo),e(F2,uxo),e(y,bxo),e(y,T2),e(T2,Ghe),e(Ghe,vxo),e(T2,Fxo),e(T2,DO),e(DO,Txo),e(T2,Mxo),e(y,Exo),e(y,M2),e(M2,Ohe),e(Ohe,Cxo),e(M2,wxo),e(M2,GO),e(GO,Axo),e(M2,Lxo),e(y,yxo),e(y,E2),e(E2,Vhe),e(Vhe,xxo),e(E2,$xo),e(E2,OO),e(OO,kxo),e(E2,Sxo),e(y,Rxo),e(y,C2),e(C2,Xhe),e(Xhe,Pxo),e(C2,Bxo),e(C2,VO),e(VO,Ixo),e(C2,Nxo),e(y,qxo),e(y,w2),e(w2,zhe),e(zhe,jxo),e(w2,Dxo),e(w2,XO),e(XO,Gxo),e(w2,Oxo),e(Ye,Vxo),e(Ye,A2),e(A2,Xxo),e(A2,Whe),e(Whe,zxo),e(A2,Wxo),e(A2,Qhe),e(Qhe,Qxo),e(Ye,Uxo),M(L2,Ye,null),b(f,gUe,u),b(f,nd,u),e(nd,y2),e(y2,Uhe),M(Qy,Uhe,null),e(nd,Hxo),e(nd,Hhe),e(Hhe,Jxo),b(f,hUe,u),b(f,Ro,u),M(Uy,Ro,null),e(Ro,Yxo),e(Ro,sd),e(sd,Kxo),e(sd,zO),e(zO,Zxo),e(sd,e$o),e(sd,WO),e(WO,o$o),e(sd,r$o),e(Ro,t$o),e(Ro,Hy),e(Hy,a$o),e(Hy,Jhe),e(Jhe,n$o),e(Hy,s$o),e(Ro,l$o),e(Ro,gt),M(Jy,gt,null),e(gt,i$o),e(gt,Yhe),e(Yhe,d$o),e(gt,c$o),e(gt,ld),e(ld,f$o),e(ld,Khe),e(Khe,m$o),e(ld,g$o),e(ld,QO),e(QO,h$o),e(ld,p$o),e(gt,_$o),M(x2,gt,null),e(Ro,u$o),e(Ro,Ke),M(Yy,Ke,null),e(Ke,b$o),e(Ke,Zhe),e(Zhe,v$o),e(Ke,F$o),e(Ke,Xa),e(Xa,T$o),e(Xa,epe),e(epe,M$o),e(Xa,E$o),e(Xa,ope),e(ope,C$o),e(Xa,w$o),e(Xa,rpe),e(rpe,A$o),e(Xa,L$o),e(Ke,y$o),e(Ke,G),e(G,$2),e($2,tpe),e(tpe,x$o),e($2,$$o),e($2,UO),e(UO,k$o),e($2,S$o),e(G,R$o),e(G,k2),e(k2,ape),e(ape,P$o),e(k2,B$o),e(k2,HO),e(HO,I$o),e(k2,N$o),e(G,q$o),e(G,S2),e(S2,npe),e(npe,j$o),e(S2,D$o),e(S2,JO),e(JO,G$o),e(S2,O$o),e(G,V$o),e(G,R2),e(R2,spe),e(spe,X$o),e(R2,z$o),e(R2,YO),e(YO,W$o),e(R2,Q$o),e(G,U$o),e(G,P2),e(P2,lpe),e(lpe,H$o),e(P2,J$o),e(P2,KO),e(KO,Y$o),e(P2,K$o),e(G,Z$o),e(G,B2),e(B2,ipe),e(ipe,eko),e(B2,oko),e(B2,ZO),e(ZO,rko),e(B2,tko),e(G,ako),e(G,I2),e(I2,dpe),e(dpe,nko),e(I2,sko),e(I2,eV),e(eV,lko),e(I2,iko),e(G,dko),e(G,N2),e(N2,cpe),e(cpe,cko),e(N2,fko),e(N2,oV),e(oV,mko),e(N2,gko),e(G,hko),e(G,q2),e(q2,fpe),e(fpe,pko),e(q2,_ko),e(q2,rV),e(rV,uko),e(q2,bko),e(G,vko),e(G,j2),e(j2,mpe),e(mpe,Fko),e(j2,Tko),e(j2,tV),e(tV,Mko),e(j2,Eko),e(G,Cko),e(G,D2),e(D2,gpe),e(gpe,wko),e(D2,Ako),e(D2,aV),e(aV,Lko),e(D2,yko),e(G,xko),e(G,G2),e(G2,hpe),e(hpe,$ko),e(G2,kko),e(G2,nV),e(nV,Sko),e(G2,Rko),e(G,Pko),e(G,O2),e(O2,ppe),e(ppe,Bko),e(O2,Iko),e(O2,sV),e(sV,Nko),e(O2,qko),e(G,jko),e(G,V2),e(V2,_pe),e(_pe,Dko),e(V2,Gko),e(V2,lV),e(lV,Oko),e(V2,Vko),e(G,Xko),e(G,X2),e(X2,upe),e(upe,zko),e(X2,Wko),e(X2,iV),e(iV,Qko),e(X2,Uko),e(G,Hko),e(G,z2),e(z2,bpe),e(bpe,Jko),e(z2,Yko),e(z2,dV),e(dV,Kko),e(z2,Zko),e(G,eSo),e(G,W2),e(W2,vpe),e(vpe,oSo),e(W2,rSo),e(W2,cV),e(cV,tSo),e(W2,aSo),e(G,nSo),e(G,Q2),e(Q2,Fpe),e(Fpe,sSo),e(Q2,lSo),e(Q2,fV),e(fV,iSo),e(Q2,dSo),e(G,cSo),e(G,U2),e(U2,Tpe),e(Tpe,fSo),e(U2,mSo),e(U2,mV),e(mV,gSo),e(U2,hSo),e(G,pSo),e(G,H2),e(H2,Mpe),e(Mpe,_So),e(H2,uSo),e(H2,gV),e(gV,bSo),e(H2,vSo),e(G,FSo),e(G,J2),e(J2,Epe),e(Epe,TSo),e(J2,MSo),e(J2,hV),e(hV,ESo),e(J2,CSo),e(G,wSo),e(G,Y2),e(Y2,Cpe),e(Cpe,ASo),e(Y2,LSo),e(Y2,pV),e(pV,ySo),e(Y2,xSo),e(G,$So),e(G,K2),e(K2,wpe),e(wpe,kSo),e(K2,SSo),e(K2,_V),e(_V,RSo),e(K2,PSo),e(G,BSo),e(G,Z2),e(Z2,Ape),e(Ape,ISo),e(Z2,NSo),e(Z2,uV),e(uV,qSo),e(Z2,jSo),e(G,DSo),e(G,e0),e(e0,Lpe),e(Lpe,GSo),e(e0,OSo),e(e0,bV),e(bV,VSo),e(e0,XSo),e(G,zSo),e(G,o0),e(o0,ype),e(ype,WSo),e(o0,QSo),e(o0,vV),e(vV,USo),e(o0,HSo),e(G,JSo),e(G,r0),e(r0,xpe),e(xpe,YSo),e(r0,KSo),e(r0,FV),e(FV,ZSo),e(r0,eRo),e(G,oRo),e(G,t0),e(t0,$pe),e($pe,rRo),e(t0,tRo),e(t0,TV),e(TV,aRo),e(t0,nRo),e(G,sRo),e(G,a0),e(a0,kpe),e(kpe,lRo),e(a0,iRo),e(a0,MV),e(MV,dRo),e(a0,cRo),e(G,fRo),e(G,n0),e(n0,Spe),e(Spe,mRo),e(n0,gRo),e(n0,EV),e(EV,hRo),e(n0,pRo),e(G,_Ro),e(G,s0),e(s0,Rpe),e(Rpe,uRo),e(s0,bRo),e(s0,CV),e(CV,vRo),e(s0,FRo),e(G,TRo),e(G,l0),e(l0,Ppe),e(Ppe,MRo),e(l0,ERo),e(l0,wV),e(wV,CRo),e(l0,wRo),e(G,ARo),e(G,i0),e(i0,Bpe),e(Bpe,LRo),e(i0,yRo),e(i0,AV),e(AV,xRo),e(i0,$Ro),e(G,kRo),e(G,d0),e(d0,Ipe),e(Ipe,SRo),e(d0,RRo),e(d0,LV),e(LV,PRo),e(d0,BRo),e(G,IRo),e(G,c0),e(c0,Npe),e(Npe,NRo),e(c0,qRo),e(c0,yV),e(yV,jRo),e(c0,DRo),e(G,GRo),e(G,f0),e(f0,qpe),e(qpe,ORo),e(f0,VRo),e(f0,xV),e(xV,XRo),e(f0,zRo),e(G,WRo),e(G,m0),e(m0,jpe),e(jpe,QRo),e(m0,URo),e(m0,$V),e($V,HRo),e(m0,JRo),e(G,YRo),e(G,g0),e(g0,Dpe),e(Dpe,KRo),e(g0,ZRo),e(g0,kV),e(kV,ePo),e(g0,oPo),e(G,rPo),e(G,h0),e(h0,Gpe),e(Gpe,tPo),e(h0,aPo),e(h0,SV),e(SV,nPo),e(h0,sPo),e(G,lPo),e(G,p0),e(p0,Ope),e(Ope,iPo),e(p0,dPo),e(p0,RV),e(RV,cPo),e(p0,fPo),e(G,mPo),e(G,_0),e(_0,Vpe),e(Vpe,gPo),e(_0,hPo),e(_0,PV),e(PV,pPo),e(_0,_Po),e(G,uPo),e(G,u0),e(u0,Xpe),e(Xpe,bPo),e(u0,vPo),e(u0,BV),e(BV,FPo),e(u0,TPo),e(G,MPo),e(G,b0),e(b0,zpe),e(zpe,EPo),e(b0,CPo),e(b0,IV),e(IV,wPo),e(b0,APo),e(G,LPo),e(G,v0),e(v0,Wpe),e(Wpe,yPo),e(v0,xPo),e(v0,NV),e(NV,$Po),e(v0,kPo),e(G,SPo),e(G,F0),e(F0,Qpe),e(Qpe,RPo),e(F0,PPo),e(F0,qV),e(qV,BPo),e(F0,IPo),e(G,NPo),e(G,T0),e(T0,Upe),e(Upe,qPo),e(T0,jPo),e(T0,jV),e(jV,DPo),e(T0,GPo),e(G,OPo),e(G,M0),e(M0,Hpe),e(Hpe,VPo),e(M0,XPo),e(M0,DV),e(DV,zPo),e(M0,WPo),e(Ke,QPo),e(Ke,E0),e(E0,UPo),e(E0,Jpe),e(Jpe,HPo),e(E0,JPo),e(E0,Ype),e(Ype,YPo),e(Ke,KPo),M(C0,Ke,null),b(f,pUe,u),b(f,id,u),e(id,w0),e(w0,Kpe),M(Ky,Kpe,null),e(id,ZPo),e(id,Zpe),e(Zpe,eBo),b(f,_Ue,u),b(f,Po,u),M(Zy,Po,null),e(Po,oBo),e(Po,dd),e(dd,rBo),e(dd,GV),e(GV,tBo),e(dd,aBo),e(dd,OV),e(OV,nBo),e(dd,sBo),e(Po,lBo),e(Po,e9),e(e9,iBo),e(e9,e_e),e(e_e,dBo),e(e9,cBo),e(Po,fBo),e(Po,ht),M(o9,ht,null),e(ht,mBo),e(ht,o_e),e(o_e,gBo),e(ht,hBo),e(ht,cd),e(cd,pBo),e(cd,r_e),e(r_e,_Bo),e(cd,uBo),e(cd,VV),e(VV,bBo),e(cd,vBo),e(ht,FBo),M(A0,ht,null),e(Po,TBo),e(Po,Ze),M(r9,Ze,null),e(Ze,MBo),e(Ze,t_e),e(t_e,EBo),e(Ze,CBo),e(Ze,za),e(za,wBo),e(za,a_e),e(a_e,ABo),e(za,LBo),e(za,n_e),e(n_e,yBo),e(za,xBo),e(za,s_e),e(s_e,$Bo),e(za,kBo),e(Ze,SBo),e(Ze,z),e(z,L0),e(L0,l_e),e(l_e,RBo),e(L0,PBo),e(L0,XV),e(XV,BBo),e(L0,IBo),e(z,NBo),e(z,y0),e(y0,i_e),e(i_e,qBo),e(y0,jBo),e(y0,zV),e(zV,DBo),e(y0,GBo),e(z,OBo),e(z,x0),e(x0,d_e),e(d_e,VBo),e(x0,XBo),e(x0,WV),e(WV,zBo),e(x0,WBo),e(z,QBo),e(z,$0),e($0,c_e),e(c_e,UBo),e($0,HBo),e($0,QV),e(QV,JBo),e($0,YBo),e(z,KBo),e(z,k0),e(k0,f_e),e(f_e,ZBo),e(k0,eIo),e(k0,UV),e(UV,oIo),e(k0,rIo),e(z,tIo),e(z,S0),e(S0,m_e),e(m_e,aIo),e(S0,nIo),e(S0,HV),e(HV,sIo),e(S0,lIo),e(z,iIo),e(z,R0),e(R0,g_e),e(g_e,dIo),e(R0,cIo),e(R0,JV),e(JV,fIo),e(R0,mIo),e(z,gIo),e(z,P0),e(P0,h_e),e(h_e,hIo),e(P0,pIo),e(P0,YV),e(YV,_Io),e(P0,uIo),e(z,bIo),e(z,B0),e(B0,p_e),e(p_e,vIo),e(B0,FIo),e(B0,KV),e(KV,TIo),e(B0,MIo),e(z,EIo),e(z,I0),e(I0,__e),e(__e,CIo),e(I0,wIo),e(I0,ZV),e(ZV,AIo),e(I0,LIo),e(z,yIo),e(z,N0),e(N0,u_e),e(u_e,xIo),e(N0,$Io),e(N0,eX),e(eX,kIo),e(N0,SIo),e(z,RIo),e(z,q0),e(q0,b_e),e(b_e,PIo),e(q0,BIo),e(q0,oX),e(oX,IIo),e(q0,NIo),e(z,qIo),e(z,j0),e(j0,v_e),e(v_e,jIo),e(j0,DIo),e(j0,rX),e(rX,GIo),e(j0,OIo),e(z,VIo),e(z,D0),e(D0,F_e),e(F_e,XIo),e(D0,zIo),e(D0,tX),e(tX,WIo),e(D0,QIo),e(z,UIo),e(z,G0),e(G0,T_e),e(T_e,HIo),e(G0,JIo),e(G0,aX),e(aX,YIo),e(G0,KIo),e(z,ZIo),e(z,O0),e(O0,M_e),e(M_e,eNo),e(O0,oNo),e(O0,nX),e(nX,rNo),e(O0,tNo),e(z,aNo),e(z,V0),e(V0,E_e),e(E_e,nNo),e(V0,sNo),e(V0,sX),e(sX,lNo),e(V0,iNo),e(z,dNo),e(z,X0),e(X0,C_e),e(C_e,cNo),e(X0,fNo),e(X0,lX),e(lX,mNo),e(X0,gNo),e(z,hNo),e(z,z0),e(z0,w_e),e(w_e,pNo),e(z0,_No),e(z0,iX),e(iX,uNo),e(z0,bNo),e(z,vNo),e(z,W0),e(W0,A_e),e(A_e,FNo),e(W0,TNo),e(W0,dX),e(dX,MNo),e(W0,ENo),e(z,CNo),e(z,Q0),e(Q0,L_e),e(L_e,wNo),e(Q0,ANo),e(Q0,cX),e(cX,LNo),e(Q0,yNo),e(z,xNo),e(z,U0),e(U0,y_e),e(y_e,$No),e(U0,kNo),e(U0,fX),e(fX,SNo),e(U0,RNo),e(z,PNo),e(z,H0),e(H0,x_e),e(x_e,BNo),e(H0,INo),e(H0,mX),e(mX,NNo),e(H0,qNo),e(z,jNo),e(z,J0),e(J0,$_e),e($_e,DNo),e(J0,GNo),e(J0,gX),e(gX,ONo),e(J0,VNo),e(z,XNo),e(z,Y0),e(Y0,k_e),e(k_e,zNo),e(Y0,WNo),e(Y0,hX),e(hX,QNo),e(Y0,UNo),e(z,HNo),e(z,K0),e(K0,S_e),e(S_e,JNo),e(K0,YNo),e(K0,pX),e(pX,KNo),e(K0,ZNo),e(z,eqo),e(z,Z0),e(Z0,R_e),e(R_e,oqo),e(Z0,rqo),e(Z0,_X),e(_X,tqo),e(Z0,aqo),e(z,nqo),e(z,e1),e(e1,P_e),e(P_e,sqo),e(e1,lqo),e(e1,uX),e(uX,iqo),e(e1,dqo),e(z,cqo),e(z,o1),e(o1,B_e),e(B_e,fqo),e(o1,mqo),e(o1,bX),e(bX,gqo),e(o1,hqo),e(z,pqo),e(z,r1),e(r1,I_e),e(I_e,_qo),e(r1,uqo),e(r1,vX),e(vX,bqo),e(r1,vqo),e(z,Fqo),e(z,t1),e(t1,N_e),e(N_e,Tqo),e(t1,Mqo),e(t1,FX),e(FX,Eqo),e(t1,Cqo),e(z,wqo),e(z,a1),e(a1,q_e),e(q_e,Aqo),e(a1,Lqo),e(a1,TX),e(TX,yqo),e(a1,xqo),e(z,$qo),e(z,n1),e(n1,j_e),e(j_e,kqo),e(n1,Sqo),e(n1,MX),e(MX,Rqo),e(n1,Pqo),e(z,Bqo),e(z,s1),e(s1,D_e),e(D_e,Iqo),e(s1,Nqo),e(s1,EX),e(EX,qqo),e(s1,jqo),e(z,Dqo),e(z,l1),e(l1,G_e),e(G_e,Gqo),e(l1,Oqo),e(l1,CX),e(CX,Vqo),e(l1,Xqo),e(z,zqo),e(z,i1),e(i1,O_e),e(O_e,Wqo),e(i1,Qqo),e(i1,wX),e(wX,Uqo),e(i1,Hqo),e(z,Jqo),e(z,d1),e(d1,V_e),e(V_e,Yqo),e(d1,Kqo),e(d1,AX),e(AX,Zqo),e(d1,ejo),e(z,ojo),e(z,c1),e(c1,X_e),e(X_e,rjo),e(c1,tjo),e(c1,LX),e(LX,ajo),e(c1,njo),e(z,sjo),e(z,f1),e(f1,z_e),e(z_e,ljo),e(f1,ijo),e(f1,yX),e(yX,djo),e(f1,cjo),e(z,fjo),e(z,m1),e(m1,W_e),e(W_e,mjo),e(m1,gjo),e(m1,xX),e(xX,hjo),e(m1,pjo),e(Ze,_jo),e(Ze,g1),e(g1,ujo),e(g1,Q_e),e(Q_e,bjo),e(g1,vjo),e(g1,U_e),e(U_e,Fjo),e(Ze,Tjo),M(h1,Ze,null),b(f,uUe,u),b(f,fd,u),e(fd,p1),e(p1,H_e),M(t9,H_e,null),e(fd,Mjo),e(fd,J_e),e(J_e,Ejo),b(f,bUe,u),b(f,Bo,u),M(a9,Bo,null),e(Bo,Cjo),e(Bo,md),e(md,wjo),e(md,$X),e($X,Ajo),e(md,Ljo),e(md,kX),e(kX,yjo),e(md,xjo),e(Bo,$jo),e(Bo,n9),e(n9,kjo),e(n9,Y_e),e(Y_e,Sjo),e(n9,Rjo),e(Bo,Pjo),e(Bo,pt),M(s9,pt,null),e(pt,Bjo),e(pt,K_e),e(K_e,Ijo),e(pt,Njo),e(pt,gd),e(gd,qjo),e(gd,Z_e),e(Z_e,jjo),e(gd,Djo),e(gd,SX),e(SX,Gjo),e(gd,Ojo),e(pt,Vjo),M(_1,pt,null),e(Bo,Xjo),e(Bo,eo),M(l9,eo,null),e(eo,zjo),e(eo,eue),e(eue,Wjo),e(eo,Qjo),e(eo,Wa),e(Wa,Ujo),e(Wa,oue),e(oue,Hjo),e(Wa,Jjo),e(Wa,rue),e(rue,Yjo),e(Wa,Kjo),e(Wa,tue),e(tue,Zjo),e(Wa,eDo),e(eo,oDo),e(eo,U),e(U,u1),e(u1,aue),e(aue,rDo),e(u1,tDo),e(u1,RX),e(RX,aDo),e(u1,nDo),e(U,sDo),e(U,b1),e(b1,nue),e(nue,lDo),e(b1,iDo),e(b1,PX),e(PX,dDo),e(b1,cDo),e(U,fDo),e(U,v1),e(v1,sue),e(sue,mDo),e(v1,gDo),e(v1,BX),e(BX,hDo),e(v1,pDo),e(U,_Do),e(U,F1),e(F1,lue),e(lue,uDo),e(F1,bDo),e(F1,IX),e(IX,vDo),e(F1,FDo),e(U,TDo),e(U,T1),e(T1,iue),e(iue,MDo),e(T1,EDo),e(T1,NX),e(NX,CDo),e(T1,wDo),e(U,ADo),e(U,M1),e(M1,due),e(due,LDo),e(M1,yDo),e(M1,qX),e(qX,xDo),e(M1,$Do),e(U,kDo),e(U,E1),e(E1,cue),e(cue,SDo),e(E1,RDo),e(E1,jX),e(jX,PDo),e(E1,BDo),e(U,IDo),e(U,C1),e(C1,fue),e(fue,NDo),e(C1,qDo),e(C1,DX),e(DX,jDo),e(C1,DDo),e(U,GDo),e(U,w1),e(w1,mue),e(mue,ODo),e(w1,VDo),e(w1,GX),e(GX,XDo),e(w1,zDo),e(U,WDo),e(U,A1),e(A1,gue),e(gue,QDo),e(A1,UDo),e(A1,OX),e(OX,HDo),e(A1,JDo),e(U,YDo),e(U,L1),e(L1,hue),e(hue,KDo),e(L1,ZDo),e(L1,VX),e(VX,eGo),e(L1,oGo),e(U,rGo),e(U,y1),e(y1,pue),e(pue,tGo),e(y1,aGo),e(y1,XX),e(XX,nGo),e(y1,sGo),e(U,lGo),e(U,x1),e(x1,_ue),e(_ue,iGo),e(x1,dGo),e(x1,zX),e(zX,cGo),e(x1,fGo),e(U,mGo),e(U,$1),e($1,uue),e(uue,gGo),e($1,hGo),e($1,WX),e(WX,pGo),e($1,_Go),e(U,uGo),e(U,k1),e(k1,bue),e(bue,bGo),e(k1,vGo),e(k1,QX),e(QX,FGo),e(k1,TGo),e(U,MGo),e(U,S1),e(S1,vue),e(vue,EGo),e(S1,CGo),e(S1,UX),e(UX,wGo),e(S1,AGo),e(U,LGo),e(U,R1),e(R1,Fue),e(Fue,yGo),e(R1,xGo),e(R1,HX),e(HX,$Go),e(R1,kGo),e(U,SGo),e(U,P1),e(P1,Tue),e(Tue,RGo),e(P1,PGo),e(P1,JX),e(JX,BGo),e(P1,IGo),e(U,NGo),e(U,B1),e(B1,Mue),e(Mue,qGo),e(B1,jGo),e(B1,YX),e(YX,DGo),e(B1,GGo),e(U,OGo),e(U,I1),e(I1,Eue),e(Eue,VGo),e(I1,XGo),e(I1,KX),e(KX,zGo),e(I1,WGo),e(U,QGo),e(U,N1),e(N1,Cue),e(Cue,UGo),e(N1,HGo),e(N1,ZX),e(ZX,JGo),e(N1,YGo),e(U,KGo),e(U,q1),e(q1,wue),e(wue,ZGo),e(q1,eOo),e(q1,ez),e(ez,oOo),e(q1,rOo),e(U,tOo),e(U,j1),e(j1,Aue),e(Aue,aOo),e(j1,nOo),e(j1,oz),e(oz,sOo),e(j1,lOo),e(U,iOo),e(U,D1),e(D1,Lue),e(Lue,dOo),e(D1,cOo),e(D1,rz),e(rz,fOo),e(D1,mOo),e(U,gOo),e(U,G1),e(G1,yue),e(yue,hOo),e(G1,pOo),e(G1,tz),e(tz,_Oo),e(G1,uOo),e(U,bOo),e(U,O1),e(O1,xue),e(xue,vOo),e(O1,FOo),e(O1,az),e(az,TOo),e(O1,MOo),e(U,EOo),e(U,V1),e(V1,$ue),e($ue,COo),e(V1,wOo),e(V1,nz),e(nz,AOo),e(V1,LOo),e(U,yOo),e(U,X1),e(X1,kue),e(kue,xOo),e(X1,$Oo),e(X1,sz),e(sz,kOo),e(X1,SOo),e(U,ROo),e(U,z1),e(z1,Sue),e(Sue,POo),e(z1,BOo),e(z1,lz),e(lz,IOo),e(z1,NOo),e(U,qOo),e(U,W1),e(W1,Rue),e(Rue,jOo),e(W1,DOo),e(W1,iz),e(iz,GOo),e(W1,OOo),e(U,VOo),e(U,Q1),e(Q1,Pue),e(Pue,XOo),e(Q1,zOo),e(Q1,dz),e(dz,WOo),e(Q1,QOo),e(U,UOo),e(U,U1),e(U1,Bue),e(Bue,HOo),e(U1,JOo),e(U1,cz),e(cz,YOo),e(U1,KOo),e(U,ZOo),e(U,H1),e(H1,Iue),e(Iue,eVo),e(H1,oVo),e(H1,fz),e(fz,rVo),e(H1,tVo),e(U,aVo),e(U,J1),e(J1,Nue),e(Nue,nVo),e(J1,sVo),e(J1,que),e(que,lVo),e(J1,iVo),e(U,dVo),e(U,Y1),e(Y1,jue),e(jue,cVo),e(Y1,fVo),e(Y1,mz),e(mz,mVo),e(Y1,gVo),e(U,hVo),e(U,K1),e(K1,Due),e(Due,pVo),e(K1,_Vo),e(K1,gz),e(gz,uVo),e(K1,bVo),e(U,vVo),e(U,Z1),e(Z1,Gue),e(Gue,FVo),e(Z1,TVo),e(Z1,hz),e(hz,MVo),e(Z1,EVo),e(U,CVo),e(U,eb),e(eb,Oue),e(Oue,wVo),e(eb,AVo),e(eb,pz),e(pz,LVo),e(eb,yVo),e(eo,xVo),e(eo,ob),e(ob,$Vo),e(ob,Vue),e(Vue,kVo),e(ob,SVo),e(ob,Xue),e(Xue,RVo),e(eo,PVo),M(rb,eo,null),b(f,vUe,u),b(f,hd,u),e(hd,tb),e(tb,zue),M(i9,zue,null),e(hd,BVo),e(hd,Wue),e(Wue,IVo),b(f,FUe,u),b(f,Io,u),M(d9,Io,null),e(Io,NVo),e(Io,pd),e(pd,qVo),e(pd,_z),e(_z,jVo),e(pd,DVo),e(pd,uz),e(uz,GVo),e(pd,OVo),e(Io,VVo),e(Io,c9),e(c9,XVo),e(c9,Que),e(Que,zVo),e(c9,WVo),e(Io,QVo),e(Io,_t),M(f9,_t,null),e(_t,UVo),e(_t,Uue),e(Uue,HVo),e(_t,JVo),e(_t,_d),e(_d,YVo),e(_d,Hue),e(Hue,KVo),e(_d,ZVo),e(_d,bz),e(bz,eXo),e(_d,oXo),e(_t,rXo),M(ab,_t,null),e(Io,tXo),e(Io,oo),M(m9,oo,null),e(oo,aXo),e(oo,Jue),e(Jue,nXo),e(oo,sXo),e(oo,Qa),e(Qa,lXo),e(Qa,Yue),e(Yue,iXo),e(Qa,dXo),e(Qa,Kue),e(Kue,cXo),e(Qa,fXo),e(Qa,Zue),e(Zue,mXo),e(Qa,gXo),e(oo,hXo),e(oo,me),e(me,nb),e(nb,e2e),e(e2e,pXo),e(nb,_Xo),e(nb,vz),e(vz,uXo),e(nb,bXo),e(me,vXo),e(me,sb),e(sb,o2e),e(o2e,FXo),e(sb,TXo),e(sb,Fz),e(Fz,MXo),e(sb,EXo),e(me,CXo),e(me,lb),e(lb,r2e),e(r2e,wXo),e(lb,AXo),e(lb,Tz),e(Tz,LXo),e(lb,yXo),e(me,xXo),e(me,ib),e(ib,t2e),e(t2e,$Xo),e(ib,kXo),e(ib,Mz),e(Mz,SXo),e(ib,RXo),e(me,PXo),e(me,db),e(db,a2e),e(a2e,BXo),e(db,IXo),e(db,Ez),e(Ez,NXo),e(db,qXo),e(me,jXo),e(me,cb),e(cb,n2e),e(n2e,DXo),e(cb,GXo),e(cb,Cz),e(Cz,OXo),e(cb,VXo),e(me,XXo),e(me,fb),e(fb,s2e),e(s2e,zXo),e(fb,WXo),e(fb,wz),e(wz,QXo),e(fb,UXo),e(me,HXo),e(me,mb),e(mb,l2e),e(l2e,JXo),e(mb,YXo),e(mb,Az),e(Az,KXo),e(mb,ZXo),e(me,ezo),e(me,gb),e(gb,i2e),e(i2e,ozo),e(gb,rzo),e(gb,Lz),e(Lz,tzo),e(gb,azo),e(me,nzo),e(me,hb),e(hb,d2e),e(d2e,szo),e(hb,lzo),e(hb,yz),e(yz,izo),e(hb,dzo),e(me,czo),e(me,pb),e(pb,c2e),e(c2e,fzo),e(pb,mzo),e(pb,xz),e(xz,gzo),e(pb,hzo),e(me,pzo),e(me,_b),e(_b,f2e),e(f2e,_zo),e(_b,uzo),e(_b,$z),e($z,bzo),e(_b,vzo),e(me,Fzo),e(me,ub),e(ub,m2e),e(m2e,Tzo),e(ub,Mzo),e(ub,kz),e(kz,Ezo),e(ub,Czo),e(me,wzo),e(me,bb),e(bb,g2e),e(g2e,Azo),e(bb,Lzo),e(bb,Sz),e(Sz,yzo),e(bb,xzo),e(me,$zo),e(me,vb),e(vb,h2e),e(h2e,kzo),e(vb,Szo),e(vb,Rz),e(Rz,Rzo),e(vb,Pzo),e(me,Bzo),e(me,Fb),e(Fb,p2e),e(p2e,Izo),e(Fb,Nzo),e(Fb,Pz),e(Pz,qzo),e(Fb,jzo),e(me,Dzo),e(me,Tb),e(Tb,_2e),e(_2e,Gzo),e(Tb,Ozo),e(Tb,Bz),e(Bz,Vzo),e(Tb,Xzo),e(me,zzo),e(me,Mb),e(Mb,u2e),e(u2e,Wzo),e(Mb,Qzo),e(Mb,Iz),e(Iz,Uzo),e(Mb,Hzo),e(me,Jzo),e(me,Eb),e(Eb,b2e),e(b2e,Yzo),e(Eb,Kzo),e(Eb,Nz),e(Nz,Zzo),e(Eb,eWo),e(oo,oWo),e(oo,Cb),e(Cb,rWo),e(Cb,v2e),e(v2e,tWo),e(Cb,aWo),e(Cb,F2e),e(F2e,nWo),e(oo,sWo),M(wb,oo,null),b(f,TUe,u),b(f,ud,u),e(ud,Ab),e(Ab,T2e),M(g9,T2e,null),e(ud,lWo),e(ud,M2e),e(M2e,iWo),b(f,MUe,u),b(f,No,u),M(h9,No,null),e(No,dWo),e(No,bd),e(bd,cWo),e(bd,qz),e(qz,fWo),e(bd,mWo),e(bd,jz),e(jz,gWo),e(bd,hWo),e(No,pWo),e(No,p9),e(p9,_Wo),e(p9,E2e),e(E2e,uWo),e(p9,bWo),e(No,vWo),e(No,ut),M(_9,ut,null),e(ut,FWo),e(ut,C2e),e(C2e,TWo),e(ut,MWo),e(ut,vd),e(vd,EWo),e(vd,w2e),e(w2e,CWo),e(vd,wWo),e(vd,Dz),e(Dz,AWo),e(vd,LWo),e(ut,yWo),M(Lb,ut,null),e(No,xWo),e(No,ro),M(u9,ro,null),e(ro,$Wo),e(ro,A2e),e(A2e,kWo),e(ro,SWo),e(ro,Ua),e(Ua,RWo),e(Ua,L2e),e(L2e,PWo),e(Ua,BWo),e(Ua,y2e),e(y2e,IWo),e(Ua,NWo),e(Ua,x2e),e(x2e,qWo),e(Ua,jWo),e(ro,DWo),e(ro,q),e(q,yb),e(yb,$2e),e($2e,GWo),e(yb,OWo),e(yb,Gz),e(Gz,VWo),e(yb,XWo),e(q,zWo),e(q,xb),e(xb,k2e),e(k2e,WWo),e(xb,QWo),e(xb,Oz),e(Oz,UWo),e(xb,HWo),e(q,JWo),e(q,$b),e($b,S2e),e(S2e,YWo),e($b,KWo),e($b,Vz),e(Vz,ZWo),e($b,eQo),e(q,oQo),e(q,kb),e(kb,R2e),e(R2e,rQo),e(kb,tQo),e(kb,Xz),e(Xz,aQo),e(kb,nQo),e(q,sQo),e(q,Sb),e(Sb,P2e),e(P2e,lQo),e(Sb,iQo),e(Sb,zz),e(zz,dQo),e(Sb,cQo),e(q,fQo),e(q,Rb),e(Rb,B2e),e(B2e,mQo),e(Rb,gQo),e(Rb,Wz),e(Wz,hQo),e(Rb,pQo),e(q,_Qo),e(q,Pb),e(Pb,I2e),e(I2e,uQo),e(Pb,bQo),e(Pb,Qz),e(Qz,vQo),e(Pb,FQo),e(q,TQo),e(q,Bb),e(Bb,N2e),e(N2e,MQo),e(Bb,EQo),e(Bb,Uz),e(Uz,CQo),e(Bb,wQo),e(q,AQo),e(q,Ib),e(Ib,q2e),e(q2e,LQo),e(Ib,yQo),e(Ib,Hz),e(Hz,xQo),e(Ib,$Qo),e(q,kQo),e(q,Nb),e(Nb,j2e),e(j2e,SQo),e(Nb,RQo),e(Nb,Jz),e(Jz,PQo),e(Nb,BQo),e(q,IQo),e(q,qb),e(qb,D2e),e(D2e,NQo),e(qb,qQo),e(qb,Yz),e(Yz,jQo),e(qb,DQo),e(q,GQo),e(q,jb),e(jb,G2e),e(G2e,OQo),e(jb,VQo),e(jb,Kz),e(Kz,XQo),e(jb,zQo),e(q,WQo),e(q,Db),e(Db,O2e),e(O2e,QQo),e(Db,UQo),e(Db,Zz),e(Zz,HQo),e(Db,JQo),e(q,YQo),e(q,Gb),e(Gb,V2e),e(V2e,KQo),e(Gb,ZQo),e(Gb,eW),e(eW,eUo),e(Gb,oUo),e(q,rUo),e(q,Ob),e(Ob,X2e),e(X2e,tUo),e(Ob,aUo),e(Ob,oW),e(oW,nUo),e(Ob,sUo),e(q,lUo),e(q,Vb),e(Vb,z2e),e(z2e,iUo),e(Vb,dUo),e(Vb,rW),e(rW,cUo),e(Vb,fUo),e(q,mUo),e(q,Xb),e(Xb,W2e),e(W2e,gUo),e(Xb,hUo),e(Xb,tW),e(tW,pUo),e(Xb,_Uo),e(q,uUo),e(q,zb),e(zb,Q2e),e(Q2e,bUo),e(zb,vUo),e(zb,aW),e(aW,FUo),e(zb,TUo),e(q,MUo),e(q,Wb),e(Wb,U2e),e(U2e,EUo),e(Wb,CUo),e(Wb,nW),e(nW,wUo),e(Wb,AUo),e(q,LUo),e(q,Qb),e(Qb,H2e),e(H2e,yUo),e(Qb,xUo),e(Qb,sW),e(sW,$Uo),e(Qb,kUo),e(q,SUo),e(q,Ub),e(Ub,J2e),e(J2e,RUo),e(Ub,PUo),e(Ub,lW),e(lW,BUo),e(Ub,IUo),e(q,NUo),e(q,Hb),e(Hb,Y2e),e(Y2e,qUo),e(Hb,jUo),e(Hb,iW),e(iW,DUo),e(Hb,GUo),e(q,OUo),e(q,Jb),e(Jb,K2e),e(K2e,VUo),e(Jb,XUo),e(Jb,dW),e(dW,zUo),e(Jb,WUo),e(q,QUo),e(q,Yb),e(Yb,Z2e),e(Z2e,UUo),e(Yb,HUo),e(Yb,cW),e(cW,JUo),e(Yb,YUo),e(q,KUo),e(q,Kb),e(Kb,e0e),e(e0e,ZUo),e(Kb,eHo),e(Kb,fW),e(fW,oHo),e(Kb,rHo),e(q,tHo),e(q,Zb),e(Zb,o0e),e(o0e,aHo),e(Zb,nHo),e(Zb,mW),e(mW,sHo),e(Zb,lHo),e(q,iHo),e(q,ev),e(ev,r0e),e(r0e,dHo),e(ev,cHo),e(ev,gW),e(gW,fHo),e(ev,mHo),e(q,gHo),e(q,ov),e(ov,t0e),e(t0e,hHo),e(ov,pHo),e(ov,hW),e(hW,_Ho),e(ov,uHo),e(q,bHo),e(q,rv),e(rv,a0e),e(a0e,vHo),e(rv,FHo),e(rv,pW),e(pW,THo),e(rv,MHo),e(q,EHo),e(q,tv),e(tv,n0e),e(n0e,CHo),e(tv,wHo),e(tv,_W),e(_W,AHo),e(tv,LHo),e(q,yHo),e(q,av),e(av,s0e),e(s0e,xHo),e(av,$Ho),e(av,uW),e(uW,kHo),e(av,SHo),e(q,RHo),e(q,nv),e(nv,l0e),e(l0e,PHo),e(nv,BHo),e(nv,bW),e(bW,IHo),e(nv,NHo),e(q,qHo),e(q,sv),e(sv,i0e),e(i0e,jHo),e(sv,DHo),e(sv,vW),e(vW,GHo),e(sv,OHo),e(q,VHo),e(q,lv),e(lv,d0e),e(d0e,XHo),e(lv,zHo),e(lv,FW),e(FW,WHo),e(lv,QHo),e(q,UHo),e(q,iv),e(iv,c0e),e(c0e,HHo),e(iv,JHo),e(iv,TW),e(TW,YHo),e(iv,KHo),e(q,ZHo),e(q,dv),e(dv,f0e),e(f0e,eJo),e(dv,oJo),e(dv,MW),e(MW,rJo),e(dv,tJo),e(q,aJo),e(q,cv),e(cv,m0e),e(m0e,nJo),e(cv,sJo),e(cv,EW),e(EW,lJo),e(cv,iJo),e(q,dJo),e(q,fv),e(fv,g0e),e(g0e,cJo),e(fv,fJo),e(fv,CW),e(CW,mJo),e(fv,gJo),e(q,hJo),e(q,mv),e(mv,h0e),e(h0e,pJo),e(mv,_Jo),e(mv,wW),e(wW,uJo),e(mv,bJo),e(q,vJo),e(q,gv),e(gv,p0e),e(p0e,FJo),e(gv,TJo),e(gv,AW),e(AW,MJo),e(gv,EJo),e(q,CJo),e(q,hv),e(hv,_0e),e(_0e,wJo),e(hv,AJo),e(hv,LW),e(LW,LJo),e(hv,yJo),e(q,xJo),e(q,pv),e(pv,u0e),e(u0e,$Jo),e(pv,kJo),e(pv,yW),e(yW,SJo),e(pv,RJo),e(q,PJo),e(q,_v),e(_v,b0e),e(b0e,BJo),e(_v,IJo),e(_v,xW),e(xW,NJo),e(_v,qJo),e(q,jJo),e(q,uv),e(uv,v0e),e(v0e,DJo),e(uv,GJo),e(uv,$W),e($W,OJo),e(uv,VJo),e(q,XJo),e(q,bv),e(bv,F0e),e(F0e,zJo),e(bv,WJo),e(bv,kW),e(kW,QJo),e(bv,UJo),e(q,HJo),e(q,vv),e(vv,T0e),e(T0e,JJo),e(vv,YJo),e(vv,SW),e(SW,KJo),e(vv,ZJo),e(q,eYo),e(q,Fv),e(Fv,M0e),e(M0e,oYo),e(Fv,rYo),e(Fv,RW),e(RW,tYo),e(Fv,aYo),e(q,nYo),e(q,Tv),e(Tv,E0e),e(E0e,sYo),e(Tv,lYo),e(Tv,PW),e(PW,iYo),e(Tv,dYo),e(q,cYo),e(q,Mv),e(Mv,C0e),e(C0e,fYo),e(Mv,mYo),e(Mv,BW),e(BW,gYo),e(Mv,hYo),e(q,pYo),e(q,Ev),e(Ev,w0e),e(w0e,_Yo),e(Ev,uYo),e(Ev,IW),e(IW,bYo),e(Ev,vYo),e(q,FYo),e(q,Cv),e(Cv,A0e),e(A0e,TYo),e(Cv,MYo),e(Cv,NW),e(NW,EYo),e(Cv,CYo),e(q,wYo),e(q,wv),e(wv,L0e),e(L0e,AYo),e(wv,LYo),e(wv,qW),e(qW,yYo),e(wv,xYo),e(ro,$Yo),e(ro,Av),e(Av,kYo),e(Av,y0e),e(y0e,SYo),e(Av,RYo),e(Av,x0e),e(x0e,PYo),e(ro,BYo),M(Lv,ro,null),b(f,EUe,u),b(f,Fd,u),e(Fd,yv),e(yv,$0e),M(b9,$0e,null),e(Fd,IYo),e(Fd,k0e),e(k0e,NYo),b(f,CUe,u),b(f,qo,u),M(v9,qo,null),e(qo,qYo),e(qo,Td),e(Td,jYo),e(Td,jW),e(jW,DYo),e(Td,GYo),e(Td,DW),e(DW,OYo),e(Td,VYo),e(qo,XYo),e(qo,F9),e(F9,zYo),e(F9,S0e),e(S0e,WYo),e(F9,QYo),e(qo,UYo),e(qo,bt),M(T9,bt,null),e(bt,HYo),e(bt,R0e),e(R0e,JYo),e(bt,YYo),e(bt,Md),e(Md,KYo),e(Md,P0e),e(P0e,ZYo),e(Md,eKo),e(Md,GW),e(GW,oKo),e(Md,rKo),e(bt,tKo),M(xv,bt,null),e(qo,aKo),e(qo,to),M(M9,to,null),e(to,nKo),e(to,B0e),e(B0e,sKo),e(to,lKo),e(to,Ha),e(Ha,iKo),e(Ha,I0e),e(I0e,dKo),e(Ha,cKo),e(Ha,N0e),e(N0e,fKo),e(Ha,mKo),e(Ha,q0e),e(q0e,gKo),e(Ha,hKo),e(to,pKo),e(to,Z),e(Z,$v),e($v,j0e),e(j0e,_Ko),e($v,uKo),e($v,OW),e(OW,bKo),e($v,vKo),e(Z,FKo),e(Z,kv),e(kv,D0e),e(D0e,TKo),e(kv,MKo),e(kv,VW),e(VW,EKo),e(kv,CKo),e(Z,wKo),e(Z,Sv),e(Sv,G0e),e(G0e,AKo),e(Sv,LKo),e(Sv,XW),e(XW,yKo),e(Sv,xKo),e(Z,$Ko),e(Z,Rv),e(Rv,O0e),e(O0e,kKo),e(Rv,SKo),e(Rv,zW),e(zW,RKo),e(Rv,PKo),e(Z,BKo),e(Z,Pv),e(Pv,V0e),e(V0e,IKo),e(Pv,NKo),e(Pv,WW),e(WW,qKo),e(Pv,jKo),e(Z,DKo),e(Z,Bv),e(Bv,X0e),e(X0e,GKo),e(Bv,OKo),e(Bv,QW),e(QW,VKo),e(Bv,XKo),e(Z,zKo),e(Z,Iv),e(Iv,z0e),e(z0e,WKo),e(Iv,QKo),e(Iv,UW),e(UW,UKo),e(Iv,HKo),e(Z,JKo),e(Z,Nv),e(Nv,W0e),e(W0e,YKo),e(Nv,KKo),e(Nv,HW),e(HW,ZKo),e(Nv,eZo),e(Z,oZo),e(Z,qv),e(qv,Q0e),e(Q0e,rZo),e(qv,tZo),e(qv,JW),e(JW,aZo),e(qv,nZo),e(Z,sZo),e(Z,jv),e(jv,U0e),e(U0e,lZo),e(jv,iZo),e(jv,YW),e(YW,dZo),e(jv,cZo),e(Z,fZo),e(Z,Dv),e(Dv,H0e),e(H0e,mZo),e(Dv,gZo),e(Dv,KW),e(KW,hZo),e(Dv,pZo),e(Z,_Zo),e(Z,Gv),e(Gv,J0e),e(J0e,uZo),e(Gv,bZo),e(Gv,ZW),e(ZW,vZo),e(Gv,FZo),e(Z,TZo),e(Z,Ov),e(Ov,Y0e),e(Y0e,MZo),e(Ov,EZo),e(Ov,eQ),e(eQ,CZo),e(Ov,wZo),e(Z,AZo),e(Z,Vv),e(Vv,K0e),e(K0e,LZo),e(Vv,yZo),e(Vv,oQ),e(oQ,xZo),e(Vv,$Zo),e(Z,kZo),e(Z,Xv),e(Xv,Z0e),e(Z0e,SZo),e(Xv,RZo),e(Xv,rQ),e(rQ,PZo),e(Xv,BZo),e(Z,IZo),e(Z,zv),e(zv,e1e),e(e1e,NZo),e(zv,qZo),e(zv,tQ),e(tQ,jZo),e(zv,DZo),e(Z,GZo),e(Z,Wv),e(Wv,o1e),e(o1e,OZo),e(Wv,VZo),e(Wv,aQ),e(aQ,XZo),e(Wv,zZo),e(Z,WZo),e(Z,Qv),e(Qv,r1e),e(r1e,QZo),e(Qv,UZo),e(Qv,nQ),e(nQ,HZo),e(Qv,JZo),e(Z,YZo),e(Z,Uv),e(Uv,t1e),e(t1e,KZo),e(Uv,ZZo),e(Uv,sQ),e(sQ,eer),e(Uv,oer),e(Z,rer),e(Z,Hv),e(Hv,a1e),e(a1e,ter),e(Hv,aer),e(Hv,lQ),e(lQ,ner),e(Hv,ser),e(Z,ler),e(Z,Jv),e(Jv,n1e),e(n1e,ier),e(Jv,der),e(Jv,iQ),e(iQ,cer),e(Jv,fer),e(Z,mer),e(Z,Yv),e(Yv,s1e),e(s1e,ger),e(Yv,her),e(Yv,dQ),e(dQ,per),e(Yv,_er),e(Z,uer),e(Z,Kv),e(Kv,l1e),e(l1e,ber),e(Kv,ver),e(Kv,cQ),e(cQ,Fer),e(Kv,Ter),e(Z,Mer),e(Z,Zv),e(Zv,i1e),e(i1e,Eer),e(Zv,Cer),e(Zv,fQ),e(fQ,wer),e(Zv,Aer),e(Z,Ler),e(Z,eF),e(eF,d1e),e(d1e,yer),e(eF,xer),e(eF,mQ),e(mQ,$er),e(eF,ker),e(Z,Ser),e(Z,oF),e(oF,c1e),e(c1e,Rer),e(oF,Per),e(oF,gQ),e(gQ,Ber),e(oF,Ier),e(Z,Ner),e(Z,rF),e(rF,f1e),e(f1e,qer),e(rF,jer),e(rF,hQ),e(hQ,Der),e(rF,Ger),e(Z,Oer),e(Z,tF),e(tF,m1e),e(m1e,Ver),e(tF,Xer),e(tF,pQ),e(pQ,zer),e(tF,Wer),e(Z,Qer),e(Z,aF),e(aF,g1e),e(g1e,Uer),e(aF,Her),e(aF,_Q),e(_Q,Jer),e(aF,Yer),e(Z,Ker),e(Z,nF),e(nF,h1e),e(h1e,Zer),e(nF,eor),e(nF,uQ),e(uQ,oor),e(nF,ror),e(Z,tor),e(Z,sF),e(sF,p1e),e(p1e,aor),e(sF,nor),e(sF,bQ),e(bQ,sor),e(sF,lor),e(to,ior),e(to,lF),e(lF,dor),e(lF,_1e),e(_1e,cor),e(lF,mor),e(lF,u1e),e(u1e,gor),e(to,hor),M(iF,to,null),b(f,wUe,u),b(f,Ed,u),e(Ed,dF),e(dF,b1e),M(E9,b1e,null),e(Ed,por),e(Ed,v1e),e(v1e,_or),b(f,AUe,u),b(f,jo,u),M(C9,jo,null),e(jo,uor),e(jo,Cd),e(Cd,bor),e(Cd,vQ),e(vQ,vor),e(Cd,For),e(Cd,FQ),e(FQ,Tor),e(Cd,Mor),e(jo,Eor),e(jo,w9),e(w9,Cor),e(w9,F1e),e(F1e,wor),e(w9,Aor),e(jo,Lor),e(jo,vt),M(A9,vt,null),e(vt,yor),e(vt,T1e),e(T1e,xor),e(vt,$or),e(vt,wd),e(wd,kor),e(wd,M1e),e(M1e,Sor),e(wd,Ror),e(wd,TQ),e(TQ,Por),e(wd,Bor),e(vt,Ior),M(cF,vt,null),e(jo,Nor),e(jo,ao),M(L9,ao,null),e(ao,qor),e(ao,E1e),e(E1e,jor),e(ao,Dor),e(ao,Ja),e(Ja,Gor),e(Ja,C1e),e(C1e,Oor),e(Ja,Vor),e(Ja,w1e),e(w1e,Xor),e(Ja,zor),e(Ja,A1e),e(A1e,Wor),e(Ja,Qor),e(ao,Uor),e(ao,Do),e(Do,fF),e(fF,L1e),e(L1e,Hor),e(fF,Jor),e(fF,MQ),e(MQ,Yor),e(fF,Kor),e(Do,Zor),e(Do,mF),e(mF,y1e),e(y1e,err),e(mF,orr),e(mF,EQ),e(EQ,rrr),e(mF,trr),e(Do,arr),e(Do,gF),e(gF,x1e),e(x1e,nrr),e(gF,srr),e(gF,CQ),e(CQ,lrr),e(gF,irr),e(Do,drr),e(Do,hF),e(hF,$1e),e($1e,crr),e(hF,frr),e(hF,wQ),e(wQ,mrr),e(hF,grr),e(Do,hrr),e(Do,pF),e(pF,k1e),e(k1e,prr),e(pF,_rr),e(pF,AQ),e(AQ,urr),e(pF,brr),e(Do,vrr),e(Do,_F),e(_F,S1e),e(S1e,Frr),e(_F,Trr),e(_F,LQ),e(LQ,Mrr),e(_F,Err),e(ao,Crr),e(ao,uF),e(uF,wrr),e(uF,R1e),e(R1e,Arr),e(uF,Lrr),e(uF,P1e),e(P1e,yrr),e(ao,xrr),M(bF,ao,null),b(f,LUe,u),b(f,Ad,u),e(Ad,vF),e(vF,B1e),M(y9,B1e,null),e(Ad,$rr),e(Ad,I1e),e(I1e,krr),b(f,yUe,u),b(f,Go,u),M(x9,Go,null),e(Go,Srr),e(Go,Ld),e(Ld,Rrr),e(Ld,yQ),e(yQ,Prr),e(Ld,Brr),e(Ld,xQ),e(xQ,Irr),e(Ld,Nrr),e(Go,qrr),e(Go,$9),e($9,jrr),e($9,N1e),e(N1e,Drr),e($9,Grr),e(Go,Orr),e(Go,Ft),M(k9,Ft,null),e(Ft,Vrr),e(Ft,q1e),e(q1e,Xrr),e(Ft,zrr),e(Ft,yd),e(yd,Wrr),e(yd,j1e),e(j1e,Qrr),e(yd,Urr),e(yd,$Q),e($Q,Hrr),e(yd,Jrr),e(Ft,Yrr),M(FF,Ft,null),e(Go,Krr),e(Go,no),M(S9,no,null),e(no,Zrr),e(no,D1e),e(D1e,etr),e(no,otr),e(no,Ya),e(Ya,rtr),e(Ya,G1e),e(G1e,ttr),e(Ya,atr),e(Ya,O1e),e(O1e,ntr),e(Ya,str),e(Ya,V1e),e(V1e,ltr),e(Ya,itr),e(no,dtr),e(no,H),e(H,TF),e(TF,X1e),e(X1e,ctr),e(TF,ftr),e(TF,kQ),e(kQ,mtr),e(TF,gtr),e(H,htr),e(H,MF),e(MF,z1e),e(z1e,ptr),e(MF,_tr),e(MF,SQ),e(SQ,utr),e(MF,btr),e(H,vtr),e(H,EF),e(EF,W1e),e(W1e,Ftr),e(EF,Ttr),e(EF,RQ),e(RQ,Mtr),e(EF,Etr),e(H,Ctr),e(H,CF),e(CF,Q1e),e(Q1e,wtr),e(CF,Atr),e(CF,PQ),e(PQ,Ltr),e(CF,ytr),e(H,xtr),e(H,wF),e(wF,U1e),e(U1e,$tr),e(wF,ktr),e(wF,BQ),e(BQ,Str),e(wF,Rtr),e(H,Ptr),e(H,AF),e(AF,H1e),e(H1e,Btr),e(AF,Itr),e(AF,IQ),e(IQ,Ntr),e(AF,qtr),e(H,jtr),e(H,LF),e(LF,J1e),e(J1e,Dtr),e(LF,Gtr),e(LF,NQ),e(NQ,Otr),e(LF,Vtr),e(H,Xtr),e(H,yF),e(yF,Y1e),e(Y1e,ztr),e(yF,Wtr),e(yF,qQ),e(qQ,Qtr),e(yF,Utr),e(H,Htr),e(H,xF),e(xF,K1e),e(K1e,Jtr),e(xF,Ytr),e(xF,jQ),e(jQ,Ktr),e(xF,Ztr),e(H,ear),e(H,$F),e($F,Z1e),e(Z1e,oar),e($F,rar),e($F,DQ),e(DQ,tar),e($F,aar),e(H,nar),e(H,kF),e(kF,ebe),e(ebe,sar),e(kF,lar),e(kF,GQ),e(GQ,iar),e(kF,dar),e(H,car),e(H,SF),e(SF,obe),e(obe,far),e(SF,mar),e(SF,OQ),e(OQ,gar),e(SF,har),e(H,par),e(H,RF),e(RF,rbe),e(rbe,_ar),e(RF,uar),e(RF,VQ),e(VQ,bar),e(RF,Far),e(H,Tar),e(H,PF),e(PF,tbe),e(tbe,Mar),e(PF,Ear),e(PF,XQ),e(XQ,Car),e(PF,war),e(H,Aar),e(H,BF),e(BF,abe),e(abe,Lar),e(BF,yar),e(BF,zQ),e(zQ,xar),e(BF,$ar),e(H,kar),e(H,IF),e(IF,nbe),e(nbe,Sar),e(IF,Rar),e(IF,WQ),e(WQ,Par),e(IF,Bar),e(H,Iar),e(H,NF),e(NF,sbe),e(sbe,Nar),e(NF,qar),e(NF,QQ),e(QQ,jar),e(NF,Dar),e(H,Gar),e(H,qF),e(qF,lbe),e(lbe,Oar),e(qF,Var),e(qF,UQ),e(UQ,Xar),e(qF,zar),e(H,War),e(H,jF),e(jF,ibe),e(ibe,Qar),e(jF,Uar),e(jF,HQ),e(HQ,Har),e(jF,Jar),e(H,Yar),e(H,DF),e(DF,dbe),e(dbe,Kar),e(DF,Zar),e(DF,JQ),e(JQ,enr),e(DF,onr),e(H,rnr),e(H,GF),e(GF,cbe),e(cbe,tnr),e(GF,anr),e(GF,YQ),e(YQ,nnr),e(GF,snr),e(H,lnr),e(H,OF),e(OF,fbe),e(fbe,inr),e(OF,dnr),e(OF,KQ),e(KQ,cnr),e(OF,fnr),e(H,mnr),e(H,VF),e(VF,mbe),e(mbe,gnr),e(VF,hnr),e(VF,ZQ),e(ZQ,pnr),e(VF,_nr),e(H,unr),e(H,XF),e(XF,gbe),e(gbe,bnr),e(XF,vnr),e(XF,eU),e(eU,Fnr),e(XF,Tnr),e(H,Mnr),e(H,zF),e(zF,hbe),e(hbe,Enr),e(zF,Cnr),e(zF,oU),e(oU,wnr),e(zF,Anr),e(H,Lnr),e(H,WF),e(WF,pbe),e(pbe,ynr),e(WF,xnr),e(WF,rU),e(rU,$nr),e(WF,knr),e(H,Snr),e(H,QF),e(QF,_be),e(_be,Rnr),e(QF,Pnr),e(QF,tU),e(tU,Bnr),e(QF,Inr),e(H,Nnr),e(H,UF),e(UF,ube),e(ube,qnr),e(UF,jnr),e(UF,aU),e(aU,Dnr),e(UF,Gnr),e(H,Onr),e(H,HF),e(HF,bbe),e(bbe,Vnr),e(HF,Xnr),e(HF,nU),e(nU,znr),e(HF,Wnr),e(H,Qnr),e(H,JF),e(JF,vbe),e(vbe,Unr),e(JF,Hnr),e(JF,sU),e(sU,Jnr),e(JF,Ynr),e(H,Knr),e(H,YF),e(YF,Fbe),e(Fbe,Znr),e(YF,esr),e(YF,lU),e(lU,osr),e(YF,rsr),e(H,tsr),e(H,KF),e(KF,Tbe),e(Tbe,asr),e(KF,nsr),e(KF,iU),e(iU,ssr),e(KF,lsr),e(H,isr),e(H,ZF),e(ZF,Mbe),e(Mbe,dsr),e(ZF,csr),e(ZF,dU),e(dU,fsr),e(ZF,msr),e(H,gsr),e(H,eT),e(eT,Ebe),e(Ebe,hsr),e(eT,psr),e(eT,cU),e(cU,_sr),e(eT,usr),e(H,bsr),e(H,oT),e(oT,Cbe),e(Cbe,vsr),e(oT,Fsr),e(oT,fU),e(fU,Tsr),e(oT,Msr),e(H,Esr),e(H,rT),e(rT,wbe),e(wbe,Csr),e(rT,wsr),e(rT,mU),e(mU,Asr),e(rT,Lsr),e(H,ysr),e(H,tT),e(tT,Abe),e(Abe,xsr),e(tT,$sr),e(tT,gU),e(gU,ksr),e(tT,Ssr),e(no,Rsr),e(no,aT),e(aT,Psr),e(aT,Lbe),e(Lbe,Bsr),e(aT,Isr),e(aT,ybe),e(ybe,Nsr),e(no,qsr),M(nT,no,null),b(f,xUe,u),b(f,xd,u),e(xd,sT),e(sT,xbe),M(R9,xbe,null),e(xd,jsr),e(xd,$be),e($be,Dsr),b(f,$Ue,u),b(f,Oo,u),M(P9,Oo,null),e(Oo,Gsr),e(Oo,$d),e($d,Osr),e($d,hU),e(hU,Vsr),e($d,Xsr),e($d,pU),e(pU,zsr),e($d,Wsr),e(Oo,Qsr),e(Oo,B9),e(B9,Usr),e(B9,kbe),e(kbe,Hsr),e(B9,Jsr),e(Oo,Ysr),e(Oo,Tt),M(I9,Tt,null),e(Tt,Ksr),e(Tt,Sbe),e(Sbe,Zsr),e(Tt,elr),e(Tt,kd),e(kd,olr),e(kd,Rbe),e(Rbe,rlr),e(kd,tlr),e(kd,_U),e(_U,alr),e(kd,nlr),e(Tt,slr),M(lT,Tt,null),e(Oo,llr),e(Oo,so),M(N9,so,null),e(so,ilr),e(so,Pbe),e(Pbe,dlr),e(so,clr),e(so,Ka),e(Ka,flr),e(Ka,Bbe),e(Bbe,mlr),e(Ka,glr),e(Ka,Ibe),e(Ibe,hlr),e(Ka,plr),e(Ka,Nbe),e(Nbe,_lr),e(Ka,ulr),e(so,blr),e(so,V),e(V,iT),e(iT,qbe),e(qbe,vlr),e(iT,Flr),e(iT,uU),e(uU,Tlr),e(iT,Mlr),e(V,Elr),e(V,dT),e(dT,jbe),e(jbe,Clr),e(dT,wlr),e(dT,bU),e(bU,Alr),e(dT,Llr),e(V,ylr),e(V,cT),e(cT,Dbe),e(Dbe,xlr),e(cT,$lr),e(cT,vU),e(vU,klr),e(cT,Slr),e(V,Rlr),e(V,fT),e(fT,Gbe),e(Gbe,Plr),e(fT,Blr),e(fT,FU),e(FU,Ilr),e(fT,Nlr),e(V,qlr),e(V,mT),e(mT,Obe),e(Obe,jlr),e(mT,Dlr),e(mT,TU),e(TU,Glr),e(mT,Olr),e(V,Vlr),e(V,gT),e(gT,Vbe),e(Vbe,Xlr),e(gT,zlr),e(gT,MU),e(MU,Wlr),e(gT,Qlr),e(V,Ulr),e(V,hT),e(hT,Xbe),e(Xbe,Hlr),e(hT,Jlr),e(hT,EU),e(EU,Ylr),e(hT,Klr),e(V,Zlr),e(V,pT),e(pT,zbe),e(zbe,eir),e(pT,oir),e(pT,CU),e(CU,rir),e(pT,tir),e(V,air),e(V,_T),e(_T,Wbe),e(Wbe,nir),e(_T,sir),e(_T,wU),e(wU,lir),e(_T,iir),e(V,dir),e(V,uT),e(uT,Qbe),e(Qbe,cir),e(uT,fir),e(uT,AU),e(AU,mir),e(uT,gir),e(V,hir),e(V,bT),e(bT,Ube),e(Ube,pir),e(bT,_ir),e(bT,LU),e(LU,uir),e(bT,bir),e(V,vir),e(V,vT),e(vT,Hbe),e(Hbe,Fir),e(vT,Tir),e(vT,yU),e(yU,Mir),e(vT,Eir),e(V,Cir),e(V,FT),e(FT,Jbe),e(Jbe,wir),e(FT,Air),e(FT,xU),e(xU,Lir),e(FT,yir),e(V,xir),e(V,TT),e(TT,Ybe),e(Ybe,$ir),e(TT,kir),e(TT,$U),e($U,Sir),e(TT,Rir),e(V,Pir),e(V,MT),e(MT,Kbe),e(Kbe,Bir),e(MT,Iir),e(MT,kU),e(kU,Nir),e(MT,qir),e(V,jir),e(V,ET),e(ET,Zbe),e(Zbe,Dir),e(ET,Gir),e(ET,SU),e(SU,Oir),e(ET,Vir),e(V,Xir),e(V,CT),e(CT,eve),e(eve,zir),e(CT,Wir),e(CT,RU),e(RU,Qir),e(CT,Uir),e(V,Hir),e(V,wT),e(wT,ove),e(ove,Jir),e(wT,Yir),e(wT,PU),e(PU,Kir),e(wT,Zir),e(V,edr),e(V,AT),e(AT,rve),e(rve,odr),e(AT,rdr),e(AT,BU),e(BU,tdr),e(AT,adr),e(V,ndr),e(V,LT),e(LT,tve),e(tve,sdr),e(LT,ldr),e(LT,IU),e(IU,idr),e(LT,ddr),e(V,cdr),e(V,yT),e(yT,ave),e(ave,fdr),e(yT,mdr),e(yT,NU),e(NU,gdr),e(yT,hdr),e(V,pdr),e(V,xT),e(xT,nve),e(nve,_dr),e(xT,udr),e(xT,qU),e(qU,bdr),e(xT,vdr),e(V,Fdr),e(V,$T),e($T,sve),e(sve,Tdr),e($T,Mdr),e($T,jU),e(jU,Edr),e($T,Cdr),e(V,wdr),e(V,kT),e(kT,lve),e(lve,Adr),e(kT,Ldr),e(kT,DU),e(DU,ydr),e(kT,xdr),e(V,$dr),e(V,ST),e(ST,ive),e(ive,kdr),e(ST,Sdr),e(ST,GU),e(GU,Rdr),e(ST,Pdr),e(V,Bdr),e(V,RT),e(RT,dve),e(dve,Idr),e(RT,Ndr),e(RT,OU),e(OU,qdr),e(RT,jdr),e(V,Ddr),e(V,PT),e(PT,cve),e(cve,Gdr),e(PT,Odr),e(PT,VU),e(VU,Vdr),e(PT,Xdr),e(V,zdr),e(V,BT),e(BT,fve),e(fve,Wdr),e(BT,Qdr),e(BT,XU),e(XU,Udr),e(BT,Hdr),e(V,Jdr),e(V,IT),e(IT,mve),e(mve,Ydr),e(IT,Kdr),e(IT,zU),e(zU,Zdr),e(IT,ecr),e(V,ocr),e(V,NT),e(NT,gve),e(gve,rcr),e(NT,tcr),e(NT,WU),e(WU,acr),e(NT,ncr),e(V,scr),e(V,qT),e(qT,hve),e(hve,lcr),e(qT,icr),e(qT,QU),e(QU,dcr),e(qT,ccr),e(V,fcr),e(V,jT),e(jT,pve),e(pve,mcr),e(jT,gcr),e(jT,UU),e(UU,hcr),e(jT,pcr),e(V,_cr),e(V,DT),e(DT,_ve),e(_ve,ucr),e(DT,bcr),e(DT,HU),e(HU,vcr),e(DT,Fcr),e(V,Tcr),e(V,GT),e(GT,uve),e(uve,Mcr),e(GT,Ecr),e(GT,JU),e(JU,Ccr),e(GT,wcr),e(V,Acr),e(V,OT),e(OT,bve),e(bve,Lcr),e(OT,ycr),e(OT,YU),e(YU,xcr),e(OT,$cr),e(V,kcr),e(V,VT),e(VT,vve),e(vve,Scr),e(VT,Rcr),e(VT,KU),e(KU,Pcr),e(VT,Bcr),e(V,Icr),e(V,XT),e(XT,Fve),e(Fve,Ncr),e(XT,qcr),e(XT,ZU),e(ZU,jcr),e(XT,Dcr),e(V,Gcr),e(V,zT),e(zT,Tve),e(Tve,Ocr),e(zT,Vcr),e(zT,eH),e(eH,Xcr),e(zT,zcr),e(V,Wcr),e(V,WT),e(WT,Mve),e(Mve,Qcr),e(WT,Ucr),e(WT,oH),e(oH,Hcr),e(WT,Jcr),e(V,Ycr),e(V,QT),e(QT,Eve),e(Eve,Kcr),e(QT,Zcr),e(QT,rH),e(rH,efr),e(QT,ofr),e(V,rfr),e(V,UT),e(UT,Cve),e(Cve,tfr),e(UT,afr),e(UT,tH),e(tH,nfr),e(UT,sfr),e(V,lfr),e(V,HT),e(HT,wve),e(wve,ifr),e(HT,dfr),e(HT,aH),e(aH,cfr),e(HT,ffr),e(V,mfr),e(V,JT),e(JT,Ave),e(Ave,gfr),e(JT,hfr),e(JT,nH),e(nH,pfr),e(JT,_fr),e(so,ufr),e(so,YT),e(YT,bfr),e(YT,Lve),e(Lve,vfr),e(YT,Ffr),e(YT,yve),e(yve,Tfr),e(so,Mfr),M(KT,so,null),b(f,kUe,u),b(f,Sd,u),e(Sd,ZT),e(ZT,xve),M(q9,xve,null),e(Sd,Efr),e(Sd,$ve),e($ve,Cfr),b(f,SUe,u),b(f,Vo,u),M(j9,Vo,null),e(Vo,wfr),e(Vo,Rd),e(Rd,Afr),e(Rd,sH),e(sH,Lfr),e(Rd,yfr),e(Rd,lH),e(lH,xfr),e(Rd,$fr),e(Vo,kfr),e(Vo,D9),e(D9,Sfr),e(D9,kve),e(kve,Rfr),e(D9,Pfr),e(Vo,Bfr),e(Vo,Mt),M(G9,Mt,null),e(Mt,Ifr),e(Mt,Sve),e(Sve,Nfr),e(Mt,qfr),e(Mt,Pd),e(Pd,jfr),e(Pd,Rve),e(Rve,Dfr),e(Pd,Gfr),e(Pd,iH),e(iH,Ofr),e(Pd,Vfr),e(Mt,Xfr),M(e8,Mt,null),e(Vo,zfr),e(Vo,lo),M(O9,lo,null),e(lo,Wfr),e(lo,Pve),e(Pve,Qfr),e(lo,Ufr),e(lo,Za),e(Za,Hfr),e(Za,Bve),e(Bve,Jfr),e(Za,Yfr),e(Za,Ive),e(Ive,Kfr),e(Za,Zfr),e(Za,Nve),e(Nve,emr),e(Za,omr),e(lo,rmr),e(lo,qve),e(qve,o8),e(o8,jve),e(jve,tmr),e(o8,amr),e(o8,dH),e(dH,nmr),e(o8,smr),e(lo,lmr),e(lo,r8),e(r8,imr),e(r8,Dve),e(Dve,dmr),e(r8,cmr),e(r8,Gve),e(Gve,fmr),e(lo,mmr),M(t8,lo,null),b(f,RUe,u),b(f,Bd,u),e(Bd,a8),e(a8,Ove),M(V9,Ove,null),e(Bd,gmr),e(Bd,Vve),e(Vve,hmr),b(f,PUe,u),b(f,Xo,u),M(X9,Xo,null),e(Xo,pmr),e(Xo,Id),e(Id,_mr),e(Id,cH),e(cH,umr),e(Id,bmr),e(Id,fH),e(fH,vmr),e(Id,Fmr),e(Xo,Tmr),e(Xo,z9),e(z9,Mmr),e(z9,Xve),e(Xve,Emr),e(z9,Cmr),e(Xo,wmr),e(Xo,Et),M(W9,Et,null),e(Et,Amr),e(Et,zve),e(zve,Lmr),e(Et,ymr),e(Et,Nd),e(Nd,xmr),e(Nd,Wve),e(Wve,$mr),e(Nd,kmr),e(Nd,mH),e(mH,Smr),e(Nd,Rmr),e(Et,Pmr),M(n8,Et,null),e(Xo,Bmr),e(Xo,io),M(Q9,io,null),e(io,Imr),e(io,Qve),e(Qve,Nmr),e(io,qmr),e(io,en),e(en,jmr),e(en,Uve),e(Uve,Dmr),e(en,Gmr),e(en,Hve),e(Hve,Omr),e(en,Vmr),e(en,Jve),e(Jve,Xmr),e(en,zmr),e(io,Wmr),e(io,be),e(be,s8),e(s8,Yve),e(Yve,Qmr),e(s8,Umr),e(s8,gH),e(gH,Hmr),e(s8,Jmr),e(be,Ymr),e(be,l8),e(l8,Kve),e(Kve,Kmr),e(l8,Zmr),e(l8,hH),e(hH,egr),e(l8,ogr),e(be,rgr),e(be,i8),e(i8,Zve),e(Zve,tgr),e(i8,agr),e(i8,pH),e(pH,ngr),e(i8,sgr),e(be,lgr),e(be,d8),e(d8,eFe),e(eFe,igr),e(d8,dgr),e(d8,_H),e(_H,cgr),e(d8,fgr),e(be,mgr),e(be,sl),e(sl,oFe),e(oFe,ggr),e(sl,hgr),e(sl,uH),e(uH,pgr),e(sl,_gr),e(sl,bH),e(bH,ugr),e(sl,bgr),e(be,vgr),e(be,c8),e(c8,rFe),e(rFe,Fgr),e(c8,Tgr),e(c8,vH),e(vH,Mgr),e(c8,Egr),e(be,Cgr),e(be,ll),e(ll,tFe),e(tFe,wgr),e(ll,Agr),e(ll,FH),e(FH,Lgr),e(ll,ygr),e(ll,TH),e(TH,xgr),e(ll,$gr),e(be,kgr),e(be,f8),e(f8,aFe),e(aFe,Sgr),e(f8,Rgr),e(f8,MH),e(MH,Pgr),e(f8,Bgr),e(be,Igr),e(be,Ct),e(Ct,nFe),e(nFe,Ngr),e(Ct,qgr),e(Ct,EH),e(EH,jgr),e(Ct,Dgr),e(Ct,CH),e(CH,Ggr),e(Ct,Ogr),e(Ct,wH),e(wH,Vgr),e(Ct,Xgr),e(be,zgr),e(be,m8),e(m8,sFe),e(sFe,Wgr),e(m8,Qgr),e(m8,AH),e(AH,Ugr),e(m8,Hgr),e(be,Jgr),e(be,g8),e(g8,lFe),e(lFe,Ygr),e(g8,Kgr),e(g8,LH),e(LH,Zgr),e(g8,ehr),e(be,ohr),e(be,h8),e(h8,iFe),e(iFe,rhr),e(h8,thr),e(h8,yH),e(yH,ahr),e(h8,nhr),e(be,shr),e(be,p8),e(p8,dFe),e(dFe,lhr),e(p8,ihr),e(p8,xH),e(xH,dhr),e(p8,chr),e(be,fhr),e(be,_8),e(_8,cFe),e(cFe,mhr),e(_8,ghr),e(_8,$H),e($H,hhr),e(_8,phr),e(be,_hr),e(be,u8),e(u8,fFe),e(fFe,uhr),e(u8,bhr),e(u8,kH),e(kH,vhr),e(u8,Fhr),e(be,Thr),e(be,b8),e(b8,mFe),e(mFe,Mhr),e(b8,Ehr),e(b8,SH),e(SH,Chr),e(b8,whr),e(be,Ahr),e(be,v8),e(v8,gFe),e(gFe,Lhr),e(v8,yhr),e(v8,RH),e(RH,xhr),e(v8,$hr),e(io,khr),e(io,F8),e(F8,Shr),e(F8,hFe),e(hFe,Rhr),e(F8,Phr),e(F8,pFe),e(pFe,Bhr),e(io,Ihr),M(T8,io,null),b(f,BUe,u),b(f,qd,u),e(qd,M8),e(M8,_Fe),M(U9,_Fe,null),e(qd,Nhr),e(qd,uFe),e(uFe,qhr),b(f,IUe,u),b(f,zo,u),M(H9,zo,null),e(zo,jhr),e(zo,jd),e(jd,Dhr),e(jd,PH),e(PH,Ghr),e(jd,Ohr),e(jd,BH),e(BH,Vhr),e(jd,Xhr),e(zo,zhr),e(zo,J9),e(J9,Whr),e(J9,bFe),e(bFe,Qhr),e(J9,Uhr),e(zo,Hhr),e(zo,wt),M(Y9,wt,null),e(wt,Jhr),e(wt,vFe),e(vFe,Yhr),e(wt,Khr),e(wt,Dd),e(Dd,Zhr),e(Dd,FFe),e(FFe,epr),e(Dd,opr),e(Dd,IH),e(IH,rpr),e(Dd,tpr),e(wt,apr),M(E8,wt,null),e(zo,npr),e(zo,co),M(K9,co,null),e(co,spr),e(co,TFe),e(TFe,lpr),e(co,ipr),e(co,on),e(on,dpr),e(on,MFe),e(MFe,cpr),e(on,fpr),e(on,EFe),e(EFe,mpr),e(on,gpr),e(on,CFe),e(CFe,hpr),e(on,ppr),e(co,_pr),e(co,wFe),e(wFe,C8),e(C8,AFe),e(AFe,upr),e(C8,bpr),e(C8,NH),e(NH,vpr),e(C8,Fpr),e(co,Tpr),e(co,w8),e(w8,Mpr),e(w8,LFe),e(LFe,Epr),e(w8,Cpr),e(w8,yFe),e(yFe,wpr),e(co,Apr),M(A8,co,null),b(f,NUe,u),b(f,Gd,u),e(Gd,L8),e(L8,xFe),M(Z9,xFe,null),e(Gd,Lpr),e(Gd,$Fe),e($Fe,ypr),b(f,qUe,u),b(f,Wo,u),M(ex,Wo,null),e(Wo,xpr),e(Wo,Od),e(Od,$pr),e(Od,qH),e(qH,kpr),e(Od,Spr),e(Od,jH),e(jH,Rpr),e(Od,Ppr),e(Wo,Bpr),e(Wo,ox),e(ox,Ipr),e(ox,kFe),e(kFe,Npr),e(ox,qpr),e(Wo,jpr),e(Wo,At),M(rx,At,null),e(At,Dpr),e(At,SFe),e(SFe,Gpr),e(At,Opr),e(At,Vd),e(Vd,Vpr),e(Vd,RFe),e(RFe,Xpr),e(Vd,zpr),e(Vd,DH),e(DH,Wpr),e(Vd,Qpr),e(At,Upr),M(y8,At,null),e(Wo,Hpr),e(Wo,fo),M(tx,fo,null),e(fo,Jpr),e(fo,PFe),e(PFe,Ypr),e(fo,Kpr),e(fo,rn),e(rn,Zpr),e(rn,BFe),e(BFe,e_r),e(rn,o_r),e(rn,IFe),e(IFe,r_r),e(rn,t_r),e(rn,NFe),e(NFe,a_r),e(rn,n_r),e(fo,s_r),e(fo,qFe),e(qFe,x8),e(x8,jFe),e(jFe,l_r),e(x8,i_r),e(x8,GH),e(GH,d_r),e(x8,c_r),e(fo,f_r),e(fo,$8),e($8,m_r),e($8,DFe),e(DFe,g_r),e($8,h_r),e($8,GFe),e(GFe,p_r),e(fo,__r),M(k8,fo,null),b(f,jUe,u),b(f,Xd,u),e(Xd,S8),e(S8,OFe),M(ax,OFe,null),e(Xd,u_r),e(Xd,VFe),e(VFe,b_r),b(f,DUe,u),b(f,Qo,u),M(nx,Qo,null),e(Qo,v_r),e(Qo,zd),e(zd,F_r),e(zd,OH),e(OH,T_r),e(zd,M_r),e(zd,VH),e(VH,E_r),e(zd,C_r),e(Qo,w_r),e(Qo,sx),e(sx,A_r),e(sx,XFe),e(XFe,L_r),e(sx,y_r),e(Qo,x_r),e(Qo,Lt),M(lx,Lt,null),e(Lt,$_r),e(Lt,zFe),e(zFe,k_r),e(Lt,S_r),e(Lt,Wd),e(Wd,R_r),e(Wd,WFe),e(WFe,P_r),e(Wd,B_r),e(Wd,XH),e(XH,I_r),e(Wd,N_r),e(Lt,q_r),M(R8,Lt,null),e(Qo,j_r),e(Qo,mo),M(ix,mo,null),e(mo,D_r),e(mo,QFe),e(QFe,G_r),e(mo,O_r),e(mo,tn),e(tn,V_r),e(tn,UFe),e(UFe,X_r),e(tn,z_r),e(tn,HFe),e(HFe,W_r),e(tn,Q_r),e(tn,JFe),e(JFe,U_r),e(tn,H_r),e(mo,J_r),e(mo,YFe),e(YFe,P8),e(P8,KFe),e(KFe,Y_r),e(P8,K_r),e(P8,zH),e(zH,Z_r),e(P8,eur),e(mo,our),e(mo,B8),e(B8,rur),e(B8,ZFe),e(ZFe,tur),e(B8,aur),e(B8,eTe),e(eTe,nur),e(mo,sur),M(I8,mo,null),b(f,GUe,u),b(f,Qd,u),e(Qd,N8),e(N8,oTe),M(dx,oTe,null),e(Qd,lur),e(Qd,rTe),e(rTe,iur),b(f,OUe,u),b(f,Uo,u),M(cx,Uo,null),e(Uo,dur),e(Uo,Ud),e(Ud,cur),e(Ud,WH),e(WH,fur),e(Ud,mur),e(Ud,QH),e(QH,gur),e(Ud,hur),e(Uo,pur),e(Uo,fx),e(fx,_ur),e(fx,tTe),e(tTe,uur),e(fx,bur),e(Uo,vur),e(Uo,yt),M(mx,yt,null),e(yt,Fur),e(yt,aTe),e(aTe,Tur),e(yt,Mur),e(yt,Hd),e(Hd,Eur),e(Hd,nTe),e(nTe,Cur),e(Hd,wur),e(Hd,UH),e(UH,Aur),e(Hd,Lur),e(yt,yur),M(q8,yt,null),e(Uo,xur),e(Uo,go),M(gx,go,null),e(go,$ur),e(go,sTe),e(sTe,kur),e(go,Sur),e(go,an),e(an,Rur),e(an,lTe),e(lTe,Pur),e(an,Bur),e(an,iTe),e(iTe,Iur),e(an,Nur),e(an,dTe),e(dTe,qur),e(an,jur),e(go,Dur),e(go,Pe),e(Pe,j8),e(j8,cTe),e(cTe,Gur),e(j8,Our),e(j8,HH),e(HH,Vur),e(j8,Xur),e(Pe,zur),e(Pe,D8),e(D8,fTe),e(fTe,Wur),e(D8,Qur),e(D8,JH),e(JH,Uur),e(D8,Hur),e(Pe,Jur),e(Pe,G8),e(G8,mTe),e(mTe,Yur),e(G8,Kur),e(G8,YH),e(YH,Zur),e(G8,e2r),e(Pe,o2r),e(Pe,O8),e(O8,gTe),e(gTe,r2r),e(O8,t2r),e(O8,KH),e(KH,a2r),e(O8,n2r),e(Pe,s2r),e(Pe,V8),e(V8,hTe),e(hTe,l2r),e(V8,i2r),e(V8,ZH),e(ZH,d2r),e(V8,c2r),e(Pe,f2r),e(Pe,X8),e(X8,pTe),e(pTe,m2r),e(X8,g2r),e(X8,eJ),e(eJ,h2r),e(X8,p2r),e(Pe,_2r),e(Pe,z8),e(z8,_Te),e(_Te,u2r),e(z8,b2r),e(z8,oJ),e(oJ,v2r),e(z8,F2r),e(Pe,T2r),e(Pe,W8),e(W8,uTe),e(uTe,M2r),e(W8,E2r),e(W8,rJ),e(rJ,C2r),e(W8,w2r),e(Pe,A2r),e(Pe,Q8),e(Q8,bTe),e(bTe,L2r),e(Q8,y2r),e(Q8,tJ),e(tJ,x2r),e(Q8,$2r),e(go,k2r),e(go,U8),e(U8,S2r),e(U8,vTe),e(vTe,R2r),e(U8,P2r),e(U8,FTe),e(FTe,B2r),e(go,I2r),M(H8,go,null),b(f,VUe,u),b(f,Jd,u),e(Jd,J8),e(J8,TTe),M(hx,TTe,null),e(Jd,N2r),e(Jd,MTe),e(MTe,q2r),b(f,XUe,u),b(f,Ho,u),M(px,Ho,null),e(Ho,j2r),e(Ho,Yd),e(Yd,D2r),e(Yd,aJ),e(aJ,G2r),e(Yd,O2r),e(Yd,nJ),e(nJ,V2r),e(Yd,X2r),e(Ho,z2r),e(Ho,_x),e(_x,W2r),e(_x,ETe),e(ETe,Q2r),e(_x,U2r),e(Ho,H2r),e(Ho,xt),M(ux,xt,null),e(xt,J2r),e(xt,CTe),e(CTe,Y2r),e(xt,K2r),e(xt,Kd),e(Kd,Z2r),e(Kd,wTe),e(wTe,e0r),e(Kd,o0r),e(Kd,sJ),e(sJ,r0r),e(Kd,t0r),e(xt,a0r),M(Y8,xt,null),e(Ho,n0r),e(Ho,ho),M(bx,ho,null),e(ho,s0r),e(ho,ATe),e(ATe,l0r),e(ho,i0r),e(ho,nn),e(nn,d0r),e(nn,LTe),e(LTe,c0r),e(nn,f0r),e(nn,yTe),e(yTe,m0r),e(nn,g0r),e(nn,xTe),e(xTe,h0r),e(nn,p0r),e(ho,_0r),e(ho,st),e(st,K8),e(K8,$Te),e($Te,u0r),e(K8,b0r),e(K8,lJ),e(lJ,v0r),e(K8,F0r),e(st,T0r),e(st,Z8),e(Z8,kTe),e(kTe,M0r),e(Z8,E0r),e(Z8,iJ),e(iJ,C0r),e(Z8,w0r),e(st,A0r),e(st,eM),e(eM,STe),e(STe,L0r),e(eM,y0r),e(eM,dJ),e(dJ,x0r),e(eM,$0r),e(st,k0r),e(st,oM),e(oM,RTe),e(RTe,S0r),e(oM,R0r),e(oM,cJ),e(cJ,P0r),e(oM,B0r),e(st,I0r),e(st,rM),e(rM,PTe),e(PTe,N0r),e(rM,q0r),e(rM,fJ),e(fJ,j0r),e(rM,D0r),e(ho,G0r),e(ho,tM),e(tM,O0r),e(tM,BTe),e(BTe,V0r),e(tM,X0r),e(tM,ITe),e(ITe,z0r),e(ho,W0r),M(aM,ho,null),b(f,zUe,u),b(f,Zd,u),e(Zd,nM),e(nM,NTe),M(vx,NTe,null),e(Zd,Q0r),e(Zd,qTe),e(qTe,U0r),b(f,WUe,u),b(f,Jo,u),M(Fx,Jo,null),e(Jo,H0r),e(Jo,ec),e(ec,J0r),e(ec,mJ),e(mJ,Y0r),e(ec,K0r),e(ec,gJ),e(gJ,Z0r),e(ec,e1r),e(Jo,o1r),e(Jo,Tx),e(Tx,r1r),e(Tx,jTe),e(jTe,t1r),e(Tx,a1r),e(Jo,n1r),e(Jo,$t),M(Mx,$t,null),e($t,s1r),e($t,DTe),e(DTe,l1r),e($t,i1r),e($t,oc),e(oc,d1r),e(oc,GTe),e(GTe,c1r),e(oc,f1r),e(oc,hJ),e(hJ,m1r),e(oc,g1r),e($t,h1r),M(sM,$t,null),e(Jo,p1r),e(Jo,po),M(Ex,po,null),e(po,_1r),e(po,OTe),e(OTe,u1r),e(po,b1r),e(po,sn),e(sn,v1r),e(sn,VTe),e(VTe,F1r),e(sn,T1r),e(sn,XTe),e(XTe,M1r),e(sn,E1r),e(sn,zTe),e(zTe,C1r),e(sn,w1r),e(po,A1r),e(po,Le),e(Le,lM),e(lM,WTe),e(WTe,L1r),e(lM,y1r),e(lM,pJ),e(pJ,x1r),e(lM,$1r),e(Le,k1r),e(Le,iM),e(iM,QTe),e(QTe,S1r),e(iM,R1r),e(iM,_J),e(_J,P1r),e(iM,B1r),e(Le,I1r),e(Le,dM),e(dM,UTe),e(UTe,N1r),e(dM,q1r),e(dM,uJ),e(uJ,j1r),e(dM,D1r),e(Le,G1r),e(Le,cM),e(cM,HTe),e(HTe,O1r),e(cM,V1r),e(cM,bJ),e(bJ,X1r),e(cM,z1r),e(Le,W1r),e(Le,fM),e(fM,JTe),e(JTe,Q1r),e(fM,U1r),e(fM,vJ),e(vJ,H1r),e(fM,J1r),e(Le,Y1r),e(Le,mM),e(mM,YTe),e(YTe,K1r),e(mM,Z1r),e(mM,FJ),e(FJ,ebr),e(mM,obr),e(Le,rbr),e(Le,gM),e(gM,KTe),e(KTe,tbr),e(gM,abr),e(gM,TJ),e(TJ,nbr),e(gM,sbr),e(Le,lbr),e(Le,hM),e(hM,ZTe),e(ZTe,ibr),e(hM,dbr),e(hM,MJ),e(MJ,cbr),e(hM,fbr),e(Le,mbr),e(Le,pM),e(pM,e8e),e(e8e,gbr),e(pM,hbr),e(pM,EJ),e(EJ,pbr),e(pM,_br),e(Le,ubr),e(Le,_M),e(_M,o8e),e(o8e,bbr),e(_M,vbr),e(_M,CJ),e(CJ,Fbr),e(_M,Tbr),e(po,Mbr),e(po,uM),e(uM,Ebr),e(uM,r8e),e(r8e,Cbr),e(uM,wbr),e(uM,t8e),e(t8e,Abr),e(po,Lbr),M(bM,po,null),b(f,QUe,u),b(f,rc,u),e(rc,vM),e(vM,a8e),M(Cx,a8e,null),e(rc,ybr),e(rc,n8e),e(n8e,xbr),b(f,UUe,u),b(f,Yo,u),M(wx,Yo,null),e(Yo,$br),e(Yo,tc),e(tc,kbr),e(tc,wJ),e(wJ,Sbr),e(tc,Rbr),e(tc,AJ),e(AJ,Pbr),e(tc,Bbr),e(Yo,Ibr),e(Yo,Ax),e(Ax,Nbr),e(Ax,s8e),e(s8e,qbr),e(Ax,jbr),e(Yo,Dbr),e(Yo,kt),M(Lx,kt,null),e(kt,Gbr),e(kt,l8e),e(l8e,Obr),e(kt,Vbr),e(kt,ac),e(ac,Xbr),e(ac,i8e),e(i8e,zbr),e(ac,Wbr),e(ac,LJ),e(LJ,Qbr),e(ac,Ubr),e(kt,Hbr),M(FM,kt,null),e(Yo,Jbr),e(Yo,_o),M(yx,_o,null),e(_o,Ybr),e(_o,d8e),e(d8e,Kbr),e(_o,Zbr),e(_o,ln),e(ln,evr),e(ln,c8e),e(c8e,ovr),e(ln,rvr),e(ln,f8e),e(f8e,tvr),e(ln,avr),e(ln,m8e),e(m8e,nvr),e(ln,svr),e(_o,lvr),e(_o,xx),e(xx,TM),e(TM,g8e),e(g8e,ivr),e(TM,dvr),e(TM,yJ),e(yJ,cvr),e(TM,fvr),e(xx,mvr),e(xx,MM),e(MM,h8e),e(h8e,gvr),e(MM,hvr),e(MM,xJ),e(xJ,pvr),e(MM,_vr),e(_o,uvr),e(_o,EM),e(EM,bvr),e(EM,p8e),e(p8e,vvr),e(EM,Fvr),e(EM,_8e),e(_8e,Tvr),e(_o,Mvr),M(CM,_o,null),b(f,HUe,u),b(f,nc,u),e(nc,wM),e(wM,u8e),M($x,u8e,null),e(nc,Evr),e(nc,b8e),e(b8e,Cvr),b(f,JUe,u),b(f,Ko,u),M(kx,Ko,null),e(Ko,wvr),e(Ko,sc),e(sc,Avr),e(sc,$J),e($J,Lvr),e(sc,yvr),e(sc,kJ),e(kJ,xvr),e(sc,$vr),e(Ko,kvr),e(Ko,Sx),e(Sx,Svr),e(Sx,v8e),e(v8e,Rvr),e(Sx,Pvr),e(Ko,Bvr),e(Ko,St),M(Rx,St,null),e(St,Ivr),e(St,F8e),e(F8e,Nvr),e(St,qvr),e(St,lc),e(lc,jvr),e(lc,T8e),e(T8e,Dvr),e(lc,Gvr),e(lc,SJ),e(SJ,Ovr),e(lc,Vvr),e(St,Xvr),M(AM,St,null),e(Ko,zvr),e(Ko,uo),M(Px,uo,null),e(uo,Wvr),e(uo,M8e),e(M8e,Qvr),e(uo,Uvr),e(uo,dn),e(dn,Hvr),e(dn,E8e),e(E8e,Jvr),e(dn,Yvr),e(dn,C8e),e(C8e,Kvr),e(dn,Zvr),e(dn,w8e),e(w8e,eFr),e(dn,oFr),e(uo,rFr),e(uo,lt),e(lt,LM),e(LM,A8e),e(A8e,tFr),e(LM,aFr),e(LM,RJ),e(RJ,nFr),e(LM,sFr),e(lt,lFr),e(lt,yM),e(yM,L8e),e(L8e,iFr),e(yM,dFr),e(yM,PJ),e(PJ,cFr),e(yM,fFr),e(lt,mFr),e(lt,xM),e(xM,y8e),e(y8e,gFr),e(xM,hFr),e(xM,BJ),e(BJ,pFr),e(xM,_Fr),e(lt,uFr),e(lt,$M),e($M,x8e),e(x8e,bFr),e($M,vFr),e($M,IJ),e(IJ,FFr),e($M,TFr),e(lt,MFr),e(lt,kM),e(kM,$8e),e($8e,EFr),e(kM,CFr),e(kM,NJ),e(NJ,wFr),e(kM,AFr),e(uo,LFr),e(uo,SM),e(SM,yFr),e(SM,k8e),e(k8e,xFr),e(SM,$Fr),e(SM,S8e),e(S8e,kFr),e(uo,SFr),M(RM,uo,null),b(f,YUe,u),b(f,ic,u),e(ic,PM),e(PM,R8e),M(Bx,R8e,null),e(ic,RFr),e(ic,P8e),e(P8e,PFr),b(f,KUe,u),b(f,Zo,u),M(Ix,Zo,null),e(Zo,BFr),e(Zo,dc),e(dc,IFr),e(dc,qJ),e(qJ,NFr),e(dc,qFr),e(dc,jJ),e(jJ,jFr),e(dc,DFr),e(Zo,GFr),e(Zo,Nx),e(Nx,OFr),e(Nx,B8e),e(B8e,VFr),e(Nx,XFr),e(Zo,zFr),e(Zo,Rt),M(qx,Rt,null),e(Rt,WFr),e(Rt,I8e),e(I8e,QFr),e(Rt,UFr),e(Rt,cc),e(cc,HFr),e(cc,N8e),e(N8e,JFr),e(cc,YFr),e(cc,DJ),e(DJ,KFr),e(cc,ZFr),e(Rt,eTr),M(BM,Rt,null),e(Zo,oTr),e(Zo,bo),M(jx,bo,null),e(bo,rTr),e(bo,q8e),e(q8e,tTr),e(bo,aTr),e(bo,cn),e(cn,nTr),e(cn,j8e),e(j8e,sTr),e(cn,lTr),e(cn,D8e),e(D8e,iTr),e(cn,dTr),e(cn,G8e),e(G8e,cTr),e(cn,fTr),e(bo,mTr),e(bo,fn),e(fn,IM),e(IM,O8e),e(O8e,gTr),e(IM,hTr),e(IM,GJ),e(GJ,pTr),e(IM,_Tr),e(fn,uTr),e(fn,NM),e(NM,V8e),e(V8e,bTr),e(NM,vTr),e(NM,OJ),e(OJ,FTr),e(NM,TTr),e(fn,MTr),e(fn,qM),e(qM,X8e),e(X8e,ETr),e(qM,CTr),e(qM,VJ),e(VJ,wTr),e(qM,ATr),e(fn,LTr),e(fn,jM),e(jM,z8e),e(z8e,yTr),e(jM,xTr),e(jM,XJ),e(XJ,$Tr),e(jM,kTr),e(bo,STr),e(bo,DM),e(DM,RTr),e(DM,W8e),e(W8e,PTr),e(DM,BTr),e(DM,Q8e),e(Q8e,ITr),e(bo,NTr),M(GM,bo,null),b(f,ZUe,u),b(f,fc,u),e(fc,OM),e(OM,U8e),M(Dx,U8e,null),e(fc,qTr),e(fc,H8e),e(H8e,jTr),b(f,eHe,u),b(f,er,u),M(Gx,er,null),e(er,DTr),e(er,mc),e(mc,GTr),e(mc,zJ),e(zJ,OTr),e(mc,VTr),e(mc,WJ),e(WJ,XTr),e(mc,zTr),e(er,WTr),e(er,Ox),e(Ox,QTr),e(Ox,J8e),e(J8e,UTr),e(Ox,HTr),e(er,JTr),e(er,Pt),M(Vx,Pt,null),e(Pt,YTr),e(Pt,Y8e),e(Y8e,KTr),e(Pt,ZTr),e(Pt,gc),e(gc,e8r),e(gc,K8e),e(K8e,o8r),e(gc,r8r),e(gc,QJ),e(QJ,t8r),e(gc,a8r),e(Pt,n8r),M(VM,Pt,null),e(er,s8r),e(er,vo),M(Xx,vo,null),e(vo,l8r),e(vo,Z8e),e(Z8e,i8r),e(vo,d8r),e(vo,mn),e(mn,c8r),e(mn,eMe),e(eMe,f8r),e(mn,m8r),e(mn,oMe),e(oMe,g8r),e(mn,h8r),e(mn,rMe),e(rMe,p8r),e(mn,_8r),e(vo,u8r),e(vo,zx),e(zx,XM),e(XM,tMe),e(tMe,b8r),e(XM,v8r),e(XM,UJ),e(UJ,F8r),e(XM,T8r),e(zx,M8r),e(zx,zM),e(zM,aMe),e(aMe,E8r),e(zM,C8r),e(zM,HJ),e(HJ,w8r),e(zM,A8r),e(vo,L8r),e(vo,WM),e(WM,y8r),e(WM,nMe),e(nMe,x8r),e(WM,$8r),e(WM,sMe),e(sMe,k8r),e(vo,S8r),M(QM,vo,null),b(f,oHe,u),b(f,hc,u),e(hc,UM),e(UM,lMe),M(Wx,lMe,null),e(hc,R8r),e(hc,iMe),e(iMe,P8r),b(f,rHe,u),b(f,or,u),M(Qx,or,null),e(or,B8r),e(or,pc),e(pc,I8r),e(pc,JJ),e(JJ,N8r),e(pc,q8r),e(pc,YJ),e(YJ,j8r),e(pc,D8r),e(or,G8r),e(or,Ux),e(Ux,O8r),e(Ux,dMe),e(dMe,V8r),e(Ux,X8r),e(or,z8r),e(or,Bt),M(Hx,Bt,null),e(Bt,W8r),e(Bt,cMe),e(cMe,Q8r),e(Bt,U8r),e(Bt,_c),e(_c,H8r),e(_c,fMe),e(fMe,J8r),e(_c,Y8r),e(_c,KJ),e(KJ,K8r),e(_c,Z8r),e(Bt,eMr),M(HM,Bt,null),e(or,oMr),e(or,Fo),M(Jx,Fo,null),e(Fo,rMr),e(Fo,mMe),e(mMe,tMr),e(Fo,aMr),e(Fo,gn),e(gn,nMr),e(gn,gMe),e(gMe,sMr),e(gn,lMr),e(gn,hMe),e(hMe,iMr),e(gn,dMr),e(gn,pMe),e(pMe,cMr),e(gn,fMr),e(Fo,mMr),e(Fo,_Me),e(_Me,JM),e(JM,uMe),e(uMe,gMr),e(JM,hMr),e(JM,ZJ),e(ZJ,pMr),e(JM,_Mr),e(Fo,uMr),e(Fo,YM),e(YM,bMr),e(YM,bMe),e(bMe,vMr),e(YM,FMr),e(YM,vMe),e(vMe,TMr),e(Fo,MMr),M(KM,Fo,null),b(f,tHe,u),b(f,uc,u),e(uc,ZM),e(ZM,FMe),M(Yx,FMe,null),e(uc,EMr),e(uc,TMe),e(TMe,CMr),b(f,aHe,u),b(f,rr,u),M(Kx,rr,null),e(rr,wMr),e(rr,bc),e(bc,AMr),e(bc,eY),e(eY,LMr),e(bc,yMr),e(bc,oY),e(oY,xMr),e(bc,$Mr),e(rr,kMr),e(rr,Zx),e(Zx,SMr),e(Zx,MMe),e(MMe,RMr),e(Zx,PMr),e(rr,BMr),e(rr,It),M(e$,It,null),e(It,IMr),e(It,EMe),e(EMe,NMr),e(It,qMr),e(It,vc),e(vc,jMr),e(vc,CMe),e(CMe,DMr),e(vc,GMr),e(vc,rY),e(rY,OMr),e(vc,VMr),e(It,XMr),M(eE,It,null),e(rr,zMr),e(rr,To),M(o$,To,null),e(To,WMr),e(To,wMe),e(wMe,QMr),e(To,UMr),e(To,hn),e(hn,HMr),e(hn,AMe),e(AMe,JMr),e(hn,YMr),e(hn,LMe),e(LMe,KMr),e(hn,ZMr),e(hn,yMe),e(yMe,eEr),e(hn,oEr),e(To,rEr),e(To,it),e(it,oE),e(oE,xMe),e(xMe,tEr),e(oE,aEr),e(oE,tY),e(tY,nEr),e(oE,sEr),e(it,lEr),e(it,rE),e(rE,$Me),e($Me,iEr),e(rE,dEr),e(rE,aY),e(aY,cEr),e(rE,fEr),e(it,mEr),e(it,tE),e(tE,kMe),e(kMe,gEr),e(tE,hEr),e(tE,nY),e(nY,pEr),e(tE,_Er),e(it,uEr),e(it,aE),e(aE,SMe),e(SMe,bEr),e(aE,vEr),e(aE,sY),e(sY,FEr),e(aE,TEr),e(it,MEr),e(it,nE),e(nE,RMe),e(RMe,EEr),e(nE,CEr),e(nE,lY),e(lY,wEr),e(nE,AEr),e(To,LEr),e(To,sE),e(sE,yEr),e(sE,PMe),e(PMe,xEr),e(sE,$Er),e(sE,BMe),e(BMe,kEr),e(To,SEr),M(lE,To,null),b(f,nHe,u),b(f,Fc,u),e(Fc,iE),e(iE,IMe),M(r$,IMe,null),e(Fc,REr),e(Fc,NMe),e(NMe,PEr),b(f,sHe,u),b(f,tr,u),M(t$,tr,null),e(tr,BEr),e(tr,Tc),e(Tc,IEr),e(Tc,iY),e(iY,NEr),e(Tc,qEr),e(Tc,dY),e(dY,jEr),e(Tc,DEr),e(tr,GEr),e(tr,a$),e(a$,OEr),e(a$,qMe),e(qMe,VEr),e(a$,XEr),e(tr,zEr),e(tr,Nt),M(n$,Nt,null),e(Nt,WEr),e(Nt,jMe),e(jMe,QEr),e(Nt,UEr),e(Nt,Mc),e(Mc,HEr),e(Mc,DMe),e(DMe,JEr),e(Mc,YEr),e(Mc,cY),e(cY,KEr),e(Mc,ZEr),e(Nt,e4r),M(dE,Nt,null),e(tr,o4r),e(tr,Mo),M(s$,Mo,null),e(Mo,r4r),e(Mo,GMe),e(GMe,t4r),e(Mo,a4r),e(Mo,pn),e(pn,n4r),e(pn,OMe),e(OMe,s4r),e(pn,l4r),e(pn,VMe),e(VMe,i4r),e(pn,d4r),e(pn,XMe),e(XMe,c4r),e(pn,f4r),e(Mo,m4r),e(Mo,zMe),e(zMe,cE),e(cE,WMe),e(WMe,g4r),e(cE,h4r),e(cE,fY),e(fY,p4r),e(cE,_4r),e(Mo,u4r),e(Mo,fE),e(fE,b4r),e(fE,QMe),e(QMe,v4r),e(fE,F4r),e(fE,UMe),e(UMe,T4r),e(Mo,M4r),M(mE,Mo,null),b(f,lHe,u),b(f,Ec,u),e(Ec,gE),e(gE,HMe),M(l$,HMe,null),e(Ec,E4r),e(Ec,JMe),e(JMe,C4r),b(f,iHe,u),b(f,ar,u),M(i$,ar,null),e(ar,w4r),e(ar,Cc),e(Cc,A4r),e(Cc,mY),e(mY,L4r),e(Cc,y4r),e(Cc,gY),e(gY,x4r),e(Cc,$4r),e(ar,k4r),e(ar,d$),e(d$,S4r),e(d$,YMe),e(YMe,R4r),e(d$,P4r),e(ar,B4r),e(ar,qt),M(c$,qt,null),e(qt,I4r),e(qt,KMe),e(KMe,N4r),e(qt,q4r),e(qt,wc),e(wc,j4r),e(wc,ZMe),e(ZMe,D4r),e(wc,G4r),e(wc,hY),e(hY,O4r),e(wc,V4r),e(qt,X4r),M(hE,qt,null),e(ar,z4r),e(ar,Rr),M(f$,Rr,null),e(Rr,W4r),e(Rr,eEe),e(eEe,Q4r),e(Rr,U4r),e(Rr,_n),e(_n,H4r),e(_n,oEe),e(oEe,J4r),e(_n,Y4r),e(_n,rEe),e(rEe,K4r),e(_n,Z4r),e(_n,tEe),e(tEe,eCr),e(_n,oCr),e(Rr,rCr),e(Rr,B),e(B,pE),e(pE,aEe),e(aEe,tCr),e(pE,aCr),e(pE,pY),e(pY,nCr),e(pE,sCr),e(B,lCr),e(B,_E),e(_E,nEe),e(nEe,iCr),e(_E,dCr),e(_E,_Y),e(_Y,cCr),e(_E,fCr),e(B,mCr),e(B,uE),e(uE,sEe),e(sEe,gCr),e(uE,hCr),e(uE,uY),e(uY,pCr),e(uE,_Cr),e(B,uCr),e(B,bE),e(bE,lEe),e(lEe,bCr),e(bE,vCr),e(bE,bY),e(bY,FCr),e(bE,TCr),e(B,MCr),e(B,vE),e(vE,iEe),e(iEe,ECr),e(vE,CCr),e(vE,vY),e(vY,wCr),e(vE,ACr),e(B,LCr),e(B,FE),e(FE,dEe),e(dEe,yCr),e(FE,xCr),e(FE,FY),e(FY,$Cr),e(FE,kCr),e(B,SCr),e(B,TE),e(TE,cEe),e(cEe,RCr),e(TE,PCr),e(TE,TY),e(TY,BCr),e(TE,ICr),e(B,NCr),e(B,ME),e(ME,fEe),e(fEe,qCr),e(ME,jCr),e(ME,MY),e(MY,DCr),e(ME,GCr),e(B,OCr),e(B,EE),e(EE,mEe),e(mEe,VCr),e(EE,XCr),e(EE,EY),e(EY,zCr),e(EE,WCr),e(B,QCr),e(B,CE),e(CE,gEe),e(gEe,UCr),e(CE,HCr),e(CE,CY),e(CY,JCr),e(CE,YCr),e(B,KCr),e(B,wE),e(wE,hEe),e(hEe,ZCr),e(wE,e3r),e(wE,wY),e(wY,o3r),e(wE,r3r),e(B,t3r),e(B,AE),e(AE,pEe),e(pEe,a3r),e(AE,n3r),e(AE,AY),e(AY,s3r),e(AE,l3r),e(B,i3r),e(B,LE),e(LE,_Ee),e(_Ee,d3r),e(LE,c3r),e(LE,LY),e(LY,f3r),e(LE,m3r),e(B,g3r),e(B,yE),e(yE,uEe),e(uEe,h3r),e(yE,p3r),e(yE,yY),e(yY,_3r),e(yE,u3r),e(B,b3r),e(B,xE),e(xE,bEe),e(bEe,v3r),e(xE,F3r),e(xE,xY),e(xY,T3r),e(xE,M3r),e(B,E3r),e(B,$E),e($E,vEe),e(vEe,C3r),e($E,w3r),e($E,$Y),e($Y,A3r),e($E,L3r),e(B,y3r),e(B,kE),e(kE,FEe),e(FEe,x3r),e(kE,$3r),e(kE,kY),e(kY,k3r),e(kE,S3r),e(B,R3r),e(B,SE),e(SE,TEe),e(TEe,P3r),e(SE,B3r),e(SE,SY),e(SY,I3r),e(SE,N3r),e(B,q3r),e(B,il),e(il,MEe),e(MEe,j3r),e(il,D3r),e(il,RY),e(RY,G3r),e(il,O3r),e(il,PY),e(PY,V3r),e(il,X3r),e(B,z3r),e(B,RE),e(RE,EEe),e(EEe,W3r),e(RE,Q3r),e(RE,BY),e(BY,U3r),e(RE,H3r),e(B,J3r),e(B,PE),e(PE,CEe),e(CEe,Y3r),e(PE,K3r),e(PE,IY),e(IY,Z3r),e(PE,e5r),e(B,o5r),e(B,BE),e(BE,wEe),e(wEe,r5r),e(BE,t5r),e(BE,NY),e(NY,a5r),e(BE,n5r),e(B,s5r),e(B,IE),e(IE,AEe),e(AEe,l5r),e(IE,i5r),e(IE,qY),e(qY,d5r),e(IE,c5r),e(B,f5r),e(B,NE),e(NE,LEe),e(LEe,m5r),e(NE,g5r),e(NE,jY),e(jY,h5r),e(NE,p5r),e(B,_5r),e(B,qE),e(qE,yEe),e(yEe,u5r),e(qE,b5r),e(qE,DY),e(DY,v5r),e(qE,F5r),e(B,T5r),e(B,jE),e(jE,xEe),e(xEe,M5r),e(jE,E5r),e(jE,GY),e(GY,C5r),e(jE,w5r),e(B,A5r),e(B,DE),e(DE,$Ee),e($Ee,L5r),e(DE,y5r),e(DE,OY),e(OY,x5r),e(DE,$5r),e(B,k5r),e(B,GE),e(GE,kEe),e(kEe,S5r),e(GE,R5r),e(GE,VY),e(VY,P5r),e(GE,B5r),e(B,I5r),e(B,OE),e(OE,SEe),e(SEe,N5r),e(OE,q5r),e(OE,XY),e(XY,j5r),e(OE,D5r),e(B,G5r),e(B,VE),e(VE,REe),e(REe,O5r),e(VE,V5r),e(VE,zY),e(zY,X5r),e(VE,z5r),e(B,W5r),e(B,XE),e(XE,PEe),e(PEe,Q5r),e(XE,U5r),e(XE,WY),e(WY,H5r),e(XE,J5r),e(B,Y5r),e(B,zE),e(zE,BEe),e(BEe,K5r),e(zE,Z5r),e(zE,QY),e(QY,ewr),e(zE,owr),e(B,rwr),e(B,WE),e(WE,IEe),e(IEe,twr),e(WE,awr),e(WE,UY),e(UY,nwr),e(WE,swr),e(B,lwr),e(B,QE),e(QE,NEe),e(NEe,iwr),e(QE,dwr),e(QE,HY),e(HY,cwr),e(QE,fwr),e(B,mwr),e(B,UE),e(UE,qEe),e(qEe,gwr),e(UE,hwr),e(UE,JY),e(JY,pwr),e(UE,_wr),e(B,uwr),e(B,HE),e(HE,jEe),e(jEe,bwr),e(HE,vwr),e(HE,YY),e(YY,Fwr),e(HE,Twr),e(B,Mwr),e(B,JE),e(JE,DEe),e(DEe,Ewr),e(JE,Cwr),e(JE,KY),e(KY,wwr),e(JE,Awr),e(B,Lwr),e(B,YE),e(YE,GEe),e(GEe,ywr),e(YE,xwr),e(YE,ZY),e(ZY,$wr),e(YE,kwr),e(B,Swr),e(B,KE),e(KE,OEe),e(OEe,Rwr),e(KE,Pwr),e(KE,eK),e(eK,Bwr),e(KE,Iwr),e(B,Nwr),e(B,ZE),e(ZE,VEe),e(VEe,qwr),e(ZE,jwr),e(ZE,oK),e(oK,Dwr),e(ZE,Gwr),e(B,Owr),e(B,e4),e(e4,XEe),e(XEe,Vwr),e(e4,Xwr),e(e4,rK),e(rK,zwr),e(e4,Wwr),e(B,Qwr),e(B,o4),e(o4,zEe),e(zEe,Uwr),e(o4,Hwr),e(o4,tK),e(tK,Jwr),e(o4,Ywr),e(B,Kwr),e(B,r4),e(r4,WEe),e(WEe,Zwr),e(r4,e6r),e(r4,aK),e(aK,o6r),e(r4,r6r),e(B,t6r),e(B,t4),e(t4,QEe),e(QEe,a6r),e(t4,n6r),e(t4,nK),e(nK,s6r),e(t4,l6r),e(B,i6r),e(B,a4),e(a4,UEe),e(UEe,d6r),e(a4,c6r),e(a4,sK),e(sK,f6r),e(a4,m6r),e(B,g6r),e(B,n4),e(n4,HEe),e(HEe,h6r),e(n4,p6r),e(n4,lK),e(lK,_6r),e(n4,u6r),e(B,b6r),e(B,s4),e(s4,JEe),e(JEe,v6r),e(s4,F6r),e(s4,iK),e(iK,T6r),e(s4,M6r),e(B,E6r),e(B,l4),e(l4,YEe),e(YEe,C6r),e(l4,w6r),e(l4,dK),e(dK,A6r),e(l4,L6r),e(B,y6r),e(B,i4),e(i4,KEe),e(KEe,x6r),e(i4,$6r),e(i4,cK),e(cK,k6r),e(i4,S6r),e(B,R6r),e(B,d4),e(d4,ZEe),e(ZEe,P6r),e(d4,B6r),e(d4,fK),e(fK,I6r),e(d4,N6r),e(B,q6r),e(B,c4),e(c4,e4e),e(e4e,j6r),e(c4,D6r),e(c4,mK),e(mK,G6r),e(c4,O6r),e(B,V6r),e(B,f4),e(f4,o4e),e(o4e,X6r),e(f4,z6r),e(f4,gK),e(gK,W6r),e(f4,Q6r),e(B,U6r),e(B,m4),e(m4,r4e),e(r4e,H6r),e(m4,J6r),e(m4,hK),e(hK,Y6r),e(m4,K6r),e(Rr,Z6r),M(g4,Rr,null),b(f,dHe,u),b(f,Ac,u),e(Ac,h4),e(h4,t4e),M(m$,t4e,null),e(Ac,eAr),e(Ac,a4e),e(a4e,oAr),b(f,cHe,u),b(f,nr,u),M(g$,nr,null),e(nr,rAr),e(nr,Lc),e(Lc,tAr),e(Lc,pK),e(pK,aAr),e(Lc,nAr),e(Lc,_K),e(_K,sAr),e(Lc,lAr),e(nr,iAr),e(nr,h$),e(h$,dAr),e(h$,n4e),e(n4e,cAr),e(h$,fAr),e(nr,mAr),e(nr,jt),M(p$,jt,null),e(jt,gAr),e(jt,s4e),e(s4e,hAr),e(jt,pAr),e(jt,yc),e(yc,_Ar),e(yc,l4e),e(l4e,uAr),e(yc,bAr),e(yc,uK),e(uK,vAr),e(yc,FAr),e(jt,TAr),M(p4,jt,null),e(nr,MAr),e(nr,Pr),M(_$,Pr,null),e(Pr,EAr),e(Pr,i4e),e(i4e,CAr),e(Pr,wAr),e(Pr,un),e(un,AAr),e(un,d4e),e(d4e,LAr),e(un,yAr),e(un,c4e),e(c4e,xAr),e(un,$Ar),e(un,f4e),e(f4e,kAr),e(un,SAr),e(Pr,RAr),e(Pr,se),e(se,_4),e(_4,m4e),e(m4e,PAr),e(_4,BAr),e(_4,bK),e(bK,IAr),e(_4,NAr),e(se,qAr),e(se,u4),e(u4,g4e),e(g4e,jAr),e(u4,DAr),e(u4,vK),e(vK,GAr),e(u4,OAr),e(se,VAr),e(se,b4),e(b4,h4e),e(h4e,XAr),e(b4,zAr),e(b4,FK),e(FK,WAr),e(b4,QAr),e(se,UAr),e(se,v4),e(v4,p4e),e(p4e,HAr),e(v4,JAr),e(v4,TK),e(TK,YAr),e(v4,KAr),e(se,ZAr),e(se,F4),e(F4,_4e),e(_4e,e7r),e(F4,o7r),e(F4,MK),e(MK,r7r),e(F4,t7r),e(se,a7r),e(se,T4),e(T4,u4e),e(u4e,n7r),e(T4,s7r),e(T4,EK),e(EK,l7r),e(T4,i7r),e(se,d7r),e(se,M4),e(M4,b4e),e(b4e,c7r),e(M4,f7r),e(M4,CK),e(CK,m7r),e(M4,g7r),e(se,h7r),e(se,E4),e(E4,v4e),e(v4e,p7r),e(E4,_7r),e(E4,wK),e(wK,u7r),e(E4,b7r),e(se,v7r),e(se,C4),e(C4,F4e),e(F4e,F7r),e(C4,T7r),e(C4,AK),e(AK,M7r),e(C4,E7r),e(se,C7r),e(se,w4),e(w4,T4e),e(T4e,w7r),e(w4,A7r),e(w4,LK),e(LK,L7r),e(w4,y7r),e(se,x7r),e(se,A4),e(A4,M4e),e(M4e,$7r),e(A4,k7r),e(A4,yK),e(yK,S7r),e(A4,R7r),e(se,P7r),e(se,L4),e(L4,E4e),e(E4e,B7r),e(L4,I7r),e(L4,xK),e(xK,N7r),e(L4,q7r),e(se,j7r),e(se,y4),e(y4,C4e),e(C4e,D7r),e(y4,G7r),e(y4,$K),e($K,O7r),e(y4,V7r),e(se,X7r),e(se,x4),e(x4,w4e),e(w4e,z7r),e(x4,W7r),e(x4,kK),e(kK,Q7r),e(x4,U7r),e(se,H7r),e(se,$4),e($4,A4e),e(A4e,J7r),e($4,Y7r),e($4,SK),e(SK,K7r),e($4,Z7r),e(se,eLr),e(se,k4),e(k4,L4e),e(L4e,oLr),e(k4,rLr),e(k4,RK),e(RK,tLr),e(k4,aLr),e(se,nLr),e(se,S4),e(S4,y4e),e(y4e,sLr),e(S4,lLr),e(S4,PK),e(PK,iLr),e(S4,dLr),e(se,cLr),e(se,R4),e(R4,x4e),e(x4e,fLr),e(R4,mLr),e(R4,BK),e(BK,gLr),e(R4,hLr),e(se,pLr),e(se,P4),e(P4,$4e),e($4e,_Lr),e(P4,uLr),e(P4,IK),e(IK,bLr),e(P4,vLr),e(se,FLr),e(se,B4),e(B4,k4e),e(k4e,TLr),e(B4,MLr),e(B4,NK),e(NK,ELr),e(B4,CLr),e(se,wLr),e(se,I4),e(I4,S4e),e(S4e,ALr),e(I4,LLr),e(I4,qK),e(qK,yLr),e(I4,xLr),e(se,$Lr),e(se,N4),e(N4,R4e),e(R4e,kLr),e(N4,SLr),e(N4,jK),e(jK,RLr),e(N4,PLr),e(se,BLr),e(se,q4),e(q4,P4e),e(P4e,ILr),e(q4,NLr),e(q4,DK),e(DK,qLr),e(q4,jLr),e(Pr,DLr),M(j4,Pr,null),b(f,fHe,u),b(f,xc,u),e(xc,D4),e(D4,B4e),M(u$,B4e,null),e(xc,GLr),e(xc,I4e),e(I4e,OLr),b(f,mHe,u),b(f,sr,u),M(b$,sr,null),e(sr,VLr),e(sr,$c),e($c,XLr),e($c,GK),e(GK,zLr),e($c,WLr),e($c,OK),e(OK,QLr),e($c,ULr),e(sr,HLr),e(sr,v$),e(v$,JLr),e(v$,N4e),e(N4e,YLr),e(v$,KLr),e(sr,ZLr),e(sr,Dt),M(F$,Dt,null),e(Dt,eyr),e(Dt,q4e),e(q4e,oyr),e(Dt,ryr),e(Dt,kc),e(kc,tyr),e(kc,j4e),e(j4e,ayr),e(kc,nyr),e(kc,VK),e(VK,syr),e(kc,lyr),e(Dt,iyr),M(G4,Dt,null),e(sr,dyr),e(sr,Br),M(T$,Br,null),e(Br,cyr),e(Br,D4e),e(D4e,fyr),e(Br,myr),e(Br,bn),e(bn,gyr),e(bn,G4e),e(G4e,hyr),e(bn,pyr),e(bn,O4e),e(O4e,_yr),e(bn,uyr),e(bn,V4e),e(V4e,byr),e(bn,vyr),e(Br,Fyr),e(Br,Me),e(Me,O4),e(O4,X4e),e(X4e,Tyr),e(O4,Myr),e(O4,XK),e(XK,Eyr),e(O4,Cyr),e(Me,wyr),e(Me,V4),e(V4,z4e),e(z4e,Ayr),e(V4,Lyr),e(V4,zK),e(zK,yyr),e(V4,xyr),e(Me,$yr),e(Me,X4),e(X4,W4e),e(W4e,kyr),e(X4,Syr),e(X4,WK),e(WK,Ryr),e(X4,Pyr),e(Me,Byr),e(Me,z4),e(z4,Q4e),e(Q4e,Iyr),e(z4,Nyr),e(z4,QK),e(QK,qyr),e(z4,jyr),e(Me,Dyr),e(Me,W4),e(W4,U4e),e(U4e,Gyr),e(W4,Oyr),e(W4,UK),e(UK,Vyr),e(W4,Xyr),e(Me,zyr),e(Me,Q4),e(Q4,H4e),e(H4e,Wyr),e(Q4,Qyr),e(Q4,HK),e(HK,Uyr),e(Q4,Hyr),e(Me,Jyr),e(Me,U4),e(U4,J4e),e(J4e,Yyr),e(U4,Kyr),e(U4,JK),e(JK,Zyr),e(U4,e9r),e(Me,o9r),e(Me,H4),e(H4,Y4e),e(Y4e,r9r),e(H4,t9r),e(H4,YK),e(YK,a9r),e(H4,n9r),e(Me,s9r),e(Me,J4),e(J4,K4e),e(K4e,l9r),e(J4,i9r),e(J4,KK),e(KK,d9r),e(J4,c9r),e(Me,f9r),e(Me,Y4),e(Y4,Z4e),e(Z4e,m9r),e(Y4,g9r),e(Y4,ZK),e(ZK,h9r),e(Y4,p9r),e(Me,_9r),e(Me,K4),e(K4,eCe),e(eCe,u9r),e(K4,b9r),e(K4,eZ),e(eZ,v9r),e(K4,F9r),e(Me,T9r),e(Me,Z4),e(Z4,oCe),e(oCe,M9r),e(Z4,E9r),e(Z4,oZ),e(oZ,C9r),e(Z4,w9r),e(Me,A9r),e(Me,eC),e(eC,rCe),e(rCe,L9r),e(eC,y9r),e(eC,rZ),e(rZ,x9r),e(eC,$9r),e(Me,k9r),e(Me,oC),e(oC,tCe),e(tCe,S9r),e(oC,R9r),e(oC,tZ),e(tZ,P9r),e(oC,B9r),e(Br,I9r),M(rC,Br,null),b(f,gHe,u),b(f,Sc,u),e(Sc,tC),e(tC,aCe),M(M$,aCe,null),e(Sc,N9r),e(Sc,nCe),e(nCe,q9r),b(f,hHe,u),b(f,lr,u),M(E$,lr,null),e(lr,j9r),e(lr,Rc),e(Rc,D9r),e(Rc,aZ),e(aZ,G9r),e(Rc,O9r),e(Rc,nZ),e(nZ,V9r),e(Rc,X9r),e(lr,z9r),e(lr,C$),e(C$,W9r),e(C$,sCe),e(sCe,Q9r),e(C$,U9r),e(lr,H9r),e(lr,Gt),M(w$,Gt,null),e(Gt,J9r),e(Gt,lCe),e(lCe,Y9r),e(Gt,K9r),e(Gt,Pc),e(Pc,Z9r),e(Pc,iCe),e(iCe,exr),e(Pc,oxr),e(Pc,sZ),e(sZ,rxr),e(Pc,txr),e(Gt,axr),M(aC,Gt,null),e(lr,nxr),e(lr,Ir),M(A$,Ir,null),e(Ir,sxr),e(Ir,dCe),e(dCe,lxr),e(Ir,ixr),e(Ir,vn),e(vn,dxr),e(vn,cCe),e(cCe,cxr),e(vn,fxr),e(vn,fCe),e(fCe,mxr),e(vn,gxr),e(vn,mCe),e(mCe,hxr),e(vn,pxr),e(Ir,_xr),e(Ir,Ve),e(Ve,nC),e(nC,gCe),e(gCe,uxr),e(nC,bxr),e(nC,lZ),e(lZ,vxr),e(nC,Fxr),e(Ve,Txr),e(Ve,sC),e(sC,hCe),e(hCe,Mxr),e(sC,Exr),e(sC,iZ),e(iZ,Cxr),e(sC,wxr),e(Ve,Axr),e(Ve,dl),e(dl,pCe),e(pCe,Lxr),e(dl,yxr),e(dl,dZ),e(dZ,xxr),e(dl,$xr),e(dl,cZ),e(cZ,kxr),e(dl,Sxr),e(Ve,Rxr),e(Ve,lC),e(lC,_Ce),e(_Ce,Pxr),e(lC,Bxr),e(lC,fZ),e(fZ,Ixr),e(lC,Nxr),e(Ve,qxr),e(Ve,iC),e(iC,uCe),e(uCe,jxr),e(iC,Dxr),e(iC,mZ),e(mZ,Gxr),e(iC,Oxr),e(Ve,Vxr),e(Ve,dC),e(dC,bCe),e(bCe,Xxr),e(dC,zxr),e(dC,gZ),e(gZ,Wxr),e(dC,Qxr),e(Ve,Uxr),e(Ve,cC),e(cC,vCe),e(vCe,Hxr),e(cC,Jxr),e(cC,hZ),e(hZ,Yxr),e(cC,Kxr),e(Ve,Zxr),e(Ve,fC),e(fC,FCe),e(FCe,e$r),e(fC,o$r),e(fC,pZ),e(pZ,r$r),e(fC,t$r),e(Ir,a$r),M(mC,Ir,null),b(f,pHe,u),b(f,Bc,u),e(Bc,gC),e(gC,TCe),M(L$,TCe,null),e(Bc,n$r),e(Bc,MCe),e(MCe,s$r),b(f,_He,u),b(f,ir,u),M(y$,ir,null),e(ir,l$r),e(ir,Ic),e(Ic,i$r),e(Ic,_Z),e(_Z,d$r),e(Ic,c$r),e(Ic,uZ),e(uZ,f$r),e(Ic,m$r),e(ir,g$r),e(ir,x$),e(x$,h$r),e(x$,ECe),e(ECe,p$r),e(x$,_$r),e(ir,u$r),e(ir,Ot),M($$,Ot,null),e(Ot,b$r),e(Ot,CCe),e(CCe,v$r),e(Ot,F$r),e(Ot,Nc),e(Nc,T$r),e(Nc,wCe),e(wCe,M$r),e(Nc,E$r),e(Nc,bZ),e(bZ,C$r),e(Nc,w$r),e(Ot,A$r),M(hC,Ot,null),e(ir,L$r),e(ir,Nr),M(k$,Nr,null),e(Nr,y$r),e(Nr,ACe),e(ACe,x$r),e(Nr,$$r),e(Nr,Fn),e(Fn,k$r),e(Fn,LCe),e(LCe,S$r),e(Fn,R$r),e(Fn,yCe),e(yCe,P$r),e(Fn,B$r),e(Fn,xCe),e(xCe,I$r),e(Fn,N$r),e(Nr,q$r),e(Nr,S$),e(S$,pC),e(pC,$Ce),e($Ce,j$r),e(pC,D$r),e(pC,vZ),e(vZ,G$r),e(pC,O$r),e(S$,V$r),e(S$,_C),e(_C,kCe),e(kCe,X$r),e(_C,z$r),e(_C,FZ),e(FZ,W$r),e(_C,Q$r),e(Nr,U$r),M(uC,Nr,null),b(f,uHe,u),b(f,qc,u),e(qc,bC),e(bC,SCe),M(R$,SCe,null),e(qc,H$r),e(qc,RCe),e(RCe,J$r),b(f,bHe,u),b(f,dr,u),M(P$,dr,null),e(dr,Y$r),e(dr,jc),e(jc,K$r),e(jc,TZ),e(TZ,Z$r),e(jc,ekr),e(jc,MZ),e(MZ,okr),e(jc,rkr),e(dr,tkr),e(dr,B$),e(B$,akr),e(B$,PCe),e(PCe,nkr),e(B$,skr),e(dr,lkr),e(dr,Vt),M(I$,Vt,null),e(Vt,ikr),e(Vt,BCe),e(BCe,dkr),e(Vt,ckr),e(Vt,Dc),e(Dc,fkr),e(Dc,ICe),e(ICe,mkr),e(Dc,gkr),e(Dc,EZ),e(EZ,hkr),e(Dc,pkr),e(Vt,_kr),M(vC,Vt,null),e(dr,ukr),e(dr,qr),M(N$,qr,null),e(qr,bkr),e(qr,NCe),e(NCe,vkr),e(qr,Fkr),e(qr,Tn),e(Tn,Tkr),e(Tn,qCe),e(qCe,Mkr),e(Tn,Ekr),e(Tn,jCe),e(jCe,Ckr),e(Tn,wkr),e(Tn,DCe),e(DCe,Akr),e(Tn,Lkr),e(qr,ykr),e(qr,de),e(de,FC),e(FC,GCe),e(GCe,xkr),e(FC,$kr),e(FC,CZ),e(CZ,kkr),e(FC,Skr),e(de,Rkr),e(de,TC),e(TC,OCe),e(OCe,Pkr),e(TC,Bkr),e(TC,wZ),e(wZ,Ikr),e(TC,Nkr),e(de,qkr),e(de,MC),e(MC,VCe),e(VCe,jkr),e(MC,Dkr),e(MC,AZ),e(AZ,Gkr),e(MC,Okr),e(de,Vkr),e(de,EC),e(EC,XCe),e(XCe,Xkr),e(EC,zkr),e(EC,LZ),e(LZ,Wkr),e(EC,Qkr),e(de,Ukr),e(de,CC),e(CC,zCe),e(zCe,Hkr),e(CC,Jkr),e(CC,yZ),e(yZ,Ykr),e(CC,Kkr),e(de,Zkr),e(de,wC),e(wC,WCe),e(WCe,eSr),e(wC,oSr),e(wC,xZ),e(xZ,rSr),e(wC,tSr),e(de,aSr),e(de,AC),e(AC,QCe),e(QCe,nSr),e(AC,sSr),e(AC,$Z),e($Z,lSr),e(AC,iSr),e(de,dSr),e(de,LC),e(LC,UCe),e(UCe,cSr),e(LC,fSr),e(LC,kZ),e(kZ,mSr),e(LC,gSr),e(de,hSr),e(de,yC),e(yC,HCe),e(HCe,pSr),e(yC,_Sr),e(yC,SZ),e(SZ,uSr),e(yC,bSr),e(de,vSr),e(de,xC),e(xC,JCe),e(JCe,FSr),e(xC,TSr),e(xC,RZ),e(RZ,MSr),e(xC,ESr),e(de,CSr),e(de,$C),e($C,YCe),e(YCe,wSr),e($C,ASr),e($C,PZ),e(PZ,LSr),e($C,ySr),e(de,xSr),e(de,kC),e(kC,KCe),e(KCe,$Sr),e(kC,kSr),e(kC,BZ),e(BZ,SSr),e(kC,RSr),e(de,PSr),e(de,SC),e(SC,ZCe),e(ZCe,BSr),e(SC,ISr),e(SC,IZ),e(IZ,NSr),e(SC,qSr),e(de,jSr),e(de,RC),e(RC,e3e),e(e3e,DSr),e(RC,GSr),e(RC,NZ),e(NZ,OSr),e(RC,VSr),e(de,XSr),e(de,PC),e(PC,o3e),e(o3e,zSr),e(PC,WSr),e(PC,qZ),e(qZ,QSr),e(PC,USr),e(de,HSr),e(de,BC),e(BC,r3e),e(r3e,JSr),e(BC,YSr),e(BC,jZ),e(jZ,KSr),e(BC,ZSr),e(de,eRr),e(de,IC),e(IC,t3e),e(t3e,oRr),e(IC,rRr),e(IC,DZ),e(DZ,tRr),e(IC,aRr),e(de,nRr),e(de,NC),e(NC,a3e),e(a3e,sRr),e(NC,lRr),e(NC,GZ),e(GZ,iRr),e(NC,dRr),e(de,cRr),e(de,qC),e(qC,n3e),e(n3e,fRr),e(qC,mRr),e(qC,OZ),e(OZ,gRr),e(qC,hRr),e(de,pRr),e(de,jC),e(jC,s3e),e(s3e,_Rr),e(jC,uRr),e(jC,VZ),e(VZ,bRr),e(jC,vRr),e(qr,FRr),M(DC,qr,null),b(f,vHe,u),b(f,Gc,u),e(Gc,GC),e(GC,l3e),M(q$,l3e,null),e(Gc,TRr),e(Gc,i3e),e(i3e,MRr),b(f,FHe,u),b(f,cr,u),M(j$,cr,null),e(cr,ERr),e(cr,Oc),e(Oc,CRr),e(Oc,XZ),e(XZ,wRr),e(Oc,ARr),e(Oc,zZ),e(zZ,LRr),e(Oc,yRr),e(cr,xRr),e(cr,D$),e(D$,$Rr),e(D$,d3e),e(d3e,kRr),e(D$,SRr),e(cr,RRr),e(cr,Xt),M(G$,Xt,null),e(Xt,PRr),e(Xt,c3e),e(c3e,BRr),e(Xt,IRr),e(Xt,Vc),e(Vc,NRr),e(Vc,f3e),e(f3e,qRr),e(Vc,jRr),e(Vc,WZ),e(WZ,DRr),e(Vc,GRr),e(Xt,ORr),M(OC,Xt,null),e(cr,VRr),e(cr,jr),M(O$,jr,null),e(jr,XRr),e(jr,m3e),e(m3e,zRr),e(jr,WRr),e(jr,Mn),e(Mn,QRr),e(Mn,g3e),e(g3e,URr),e(Mn,HRr),e(Mn,h3e),e(h3e,JRr),e(Mn,YRr),e(Mn,p3e),e(p3e,KRr),e(Mn,ZRr),e(jr,ePr),e(jr,ye),e(ye,VC),e(VC,_3e),e(_3e,oPr),e(VC,rPr),e(VC,QZ),e(QZ,tPr),e(VC,aPr),e(ye,nPr),e(ye,XC),e(XC,u3e),e(u3e,sPr),e(XC,lPr),e(XC,UZ),e(UZ,iPr),e(XC,dPr),e(ye,cPr),e(ye,zC),e(zC,b3e),e(b3e,fPr),e(zC,mPr),e(zC,HZ),e(HZ,gPr),e(zC,hPr),e(ye,pPr),e(ye,WC),e(WC,v3e),e(v3e,_Pr),e(WC,uPr),e(WC,JZ),e(JZ,bPr),e(WC,vPr),e(ye,FPr),e(ye,QC),e(QC,F3e),e(F3e,TPr),e(QC,MPr),e(QC,YZ),e(YZ,EPr),e(QC,CPr),e(ye,wPr),e(ye,UC),e(UC,T3e),e(T3e,APr),e(UC,LPr),e(UC,KZ),e(KZ,yPr),e(UC,xPr),e(ye,$Pr),e(ye,HC),e(HC,M3e),e(M3e,kPr),e(HC,SPr),e(HC,ZZ),e(ZZ,RPr),e(HC,PPr),e(ye,BPr),e(ye,JC),e(JC,E3e),e(E3e,IPr),e(JC,NPr),e(JC,eee),e(eee,qPr),e(JC,jPr),e(ye,DPr),e(ye,YC),e(YC,C3e),e(C3e,GPr),e(YC,OPr),e(YC,oee),e(oee,VPr),e(YC,XPr),e(ye,zPr),e(ye,KC),e(KC,w3e),e(w3e,WPr),e(KC,QPr),e(KC,ree),e(ree,UPr),e(KC,HPr),e(jr,JPr),M(ZC,jr,null),b(f,THe,u),b(f,Xc,u),e(Xc,e3),e(e3,A3e),M(V$,A3e,null),e(Xc,YPr),e(Xc,L3e),e(L3e,KPr),b(f,MHe,u),b(f,fr,u),M(X$,fr,null),e(fr,ZPr),e(fr,zc),e(zc,eBr),e(zc,tee),e(tee,oBr),e(zc,rBr),e(zc,aee),e(aee,tBr),e(zc,aBr),e(fr,nBr),e(fr,z$),e(z$,sBr),e(z$,y3e),e(y3e,lBr),e(z$,iBr),e(fr,dBr),e(fr,zt),M(W$,zt,null),e(zt,cBr),e(zt,x3e),e(x3e,fBr),e(zt,mBr),e(zt,Wc),e(Wc,gBr),e(Wc,$3e),e($3e,hBr),e(Wc,pBr),e(Wc,nee),e(nee,_Br),e(Wc,uBr),e(zt,bBr),M(o3,zt,null),e(fr,vBr),e(fr,Dr),M(Q$,Dr,null),e(Dr,FBr),e(Dr,k3e),e(k3e,TBr),e(Dr,MBr),e(Dr,En),e(En,EBr),e(En,S3e),e(S3e,CBr),e(En,wBr),e(En,R3e),e(R3e,ABr),e(En,LBr),e(En,P3e),e(P3e,yBr),e(En,xBr),e(Dr,$Br),e(Dr,te),e(te,r3),e(r3,B3e),e(B3e,kBr),e(r3,SBr),e(r3,see),e(see,RBr),e(r3,PBr),e(te,BBr),e(te,t3),e(t3,I3e),e(I3e,IBr),e(t3,NBr),e(t3,lee),e(lee,qBr),e(t3,jBr),e(te,DBr),e(te,a3),e(a3,N3e),e(N3e,GBr),e(a3,OBr),e(a3,iee),e(iee,VBr),e(a3,XBr),e(te,zBr),e(te,n3),e(n3,q3e),e(q3e,WBr),e(n3,QBr),e(n3,dee),e(dee,UBr),e(n3,HBr),e(te,JBr),e(te,s3),e(s3,j3e),e(j3e,YBr),e(s3,KBr),e(s3,cee),e(cee,ZBr),e(s3,eIr),e(te,oIr),e(te,l3),e(l3,D3e),e(D3e,rIr),e(l3,tIr),e(l3,fee),e(fee,aIr),e(l3,nIr),e(te,sIr),e(te,i3),e(i3,G3e),e(G3e,lIr),e(i3,iIr),e(i3,mee),e(mee,dIr),e(i3,cIr),e(te,fIr),e(te,d3),e(d3,O3e),e(O3e,mIr),e(d3,gIr),e(d3,gee),e(gee,hIr),e(d3,pIr),e(te,_Ir),e(te,c3),e(c3,V3e),e(V3e,uIr),e(c3,bIr),e(c3,hee),e(hee,vIr),e(c3,FIr),e(te,TIr),e(te,f3),e(f3,X3e),e(X3e,MIr),e(f3,EIr),e(f3,pee),e(pee,CIr),e(f3,wIr),e(te,AIr),e(te,m3),e(m3,z3e),e(z3e,LIr),e(m3,yIr),e(m3,_ee),e(_ee,xIr),e(m3,$Ir),e(te,kIr),e(te,g3),e(g3,W3e),e(W3e,SIr),e(g3,RIr),e(g3,uee),e(uee,PIr),e(g3,BIr),e(te,IIr),e(te,h3),e(h3,Q3e),e(Q3e,NIr),e(h3,qIr),e(h3,bee),e(bee,jIr),e(h3,DIr),e(te,GIr),e(te,p3),e(p3,U3e),e(U3e,OIr),e(p3,VIr),e(p3,vee),e(vee,XIr),e(p3,zIr),e(te,WIr),e(te,_3),e(_3,H3e),e(H3e,QIr),e(_3,UIr),e(_3,Fee),e(Fee,HIr),e(_3,JIr),e(te,YIr),e(te,u3),e(u3,J3e),e(J3e,KIr),e(u3,ZIr),e(u3,Tee),e(Tee,eNr),e(u3,oNr),e(te,rNr),e(te,b3),e(b3,Y3e),e(Y3e,tNr),e(b3,aNr),e(b3,Mee),e(Mee,nNr),e(b3,sNr),e(te,lNr),e(te,v3),e(v3,K3e),e(K3e,iNr),e(v3,dNr),e(v3,Eee),e(Eee,cNr),e(v3,fNr),e(te,mNr),e(te,F3),e(F3,Z3e),e(Z3e,gNr),e(F3,hNr),e(F3,Cee),e(Cee,pNr),e(F3,_Nr),e(te,uNr),e(te,T3),e(T3,e5e),e(e5e,bNr),e(T3,vNr),e(T3,wee),e(wee,FNr),e(T3,TNr),e(te,MNr),e(te,M3),e(M3,o5e),e(o5e,ENr),e(M3,CNr),e(M3,Aee),e(Aee,wNr),e(M3,ANr),e(te,LNr),e(te,E3),e(E3,r5e),e(r5e,yNr),e(E3,xNr),e(E3,Lee),e(Lee,$Nr),e(E3,kNr),e(te,SNr),e(te,C3),e(C3,t5e),e(t5e,RNr),e(C3,PNr),e(C3,yee),e(yee,BNr),e(C3,INr),e(te,NNr),e(te,w3),e(w3,a5e),e(a5e,qNr),e(w3,jNr),e(w3,xee),e(xee,DNr),e(w3,GNr),e(te,ONr),e(te,A3),e(A3,n5e),e(n5e,VNr),e(A3,XNr),e(A3,$ee),e($ee,zNr),e(A3,WNr),e(te,QNr),e(te,L3),e(L3,s5e),e(s5e,UNr),e(L3,HNr),e(L3,kee),e(kee,JNr),e(L3,YNr),e(Dr,KNr),M(y3,Dr,null),b(f,EHe,u),b(f,Qc,u),e(Qc,x3),e(x3,l5e),M(U$,l5e,null),e(Qc,ZNr),e(Qc,i5e),e(i5e,eqr),b(f,CHe,u),b(f,mr,u),M(H$,mr,null),e(mr,oqr),e(mr,Uc),e(Uc,rqr),e(Uc,See),e(See,tqr),e(Uc,aqr),e(Uc,Ree),e(Ree,nqr),e(Uc,sqr),e(mr,lqr),e(mr,J$),e(J$,iqr),e(J$,d5e),e(d5e,dqr),e(J$,cqr),e(mr,fqr),e(mr,Wt),M(Y$,Wt,null),e(Wt,mqr),e(Wt,c5e),e(c5e,gqr),e(Wt,hqr),e(Wt,Hc),e(Hc,pqr),e(Hc,f5e),e(f5e,_qr),e(Hc,uqr),e(Hc,Pee),e(Pee,bqr),e(Hc,vqr),e(Wt,Fqr),M($3,Wt,null),e(mr,Tqr),e(mr,Gr),M(K$,Gr,null),e(Gr,Mqr),e(Gr,m5e),e(m5e,Eqr),e(Gr,Cqr),e(Gr,Cn),e(Cn,wqr),e(Cn,g5e),e(g5e,Aqr),e(Cn,Lqr),e(Cn,h5e),e(h5e,yqr),e(Cn,xqr),e(Cn,p5e),e(p5e,$qr),e(Cn,kqr),e(Gr,Sqr),e(Gr,ve),e(ve,k3),e(k3,_5e),e(_5e,Rqr),e(k3,Pqr),e(k3,Bee),e(Bee,Bqr),e(k3,Iqr),e(ve,Nqr),e(ve,S3),e(S3,u5e),e(u5e,qqr),e(S3,jqr),e(S3,Iee),e(Iee,Dqr),e(S3,Gqr),e(ve,Oqr),e(ve,R3),e(R3,b5e),e(b5e,Vqr),e(R3,Xqr),e(R3,Nee),e(Nee,zqr),e(R3,Wqr),e(ve,Qqr),e(ve,P3),e(P3,v5e),e(v5e,Uqr),e(P3,Hqr),e(P3,qee),e(qee,Jqr),e(P3,Yqr),e(ve,Kqr),e(ve,B3),e(B3,F5e),e(F5e,Zqr),e(B3,ejr),e(B3,jee),e(jee,ojr),e(B3,rjr),e(ve,tjr),e(ve,I3),e(I3,T5e),e(T5e,ajr),e(I3,njr),e(I3,Dee),e(Dee,sjr),e(I3,ljr),e(ve,ijr),e(ve,N3),e(N3,M5e),e(M5e,djr),e(N3,cjr),e(N3,Gee),e(Gee,fjr),e(N3,mjr),e(ve,gjr),e(ve,q3),e(q3,E5e),e(E5e,hjr),e(q3,pjr),e(q3,Oee),e(Oee,_jr),e(q3,ujr),e(ve,bjr),e(ve,j3),e(j3,C5e),e(C5e,vjr),e(j3,Fjr),e(j3,Vee),e(Vee,Tjr),e(j3,Mjr),e(ve,Ejr),e(ve,D3),e(D3,w5e),e(w5e,Cjr),e(D3,wjr),e(D3,Xee),e(Xee,Ajr),e(D3,Ljr),e(ve,yjr),e(ve,G3),e(G3,A5e),e(A5e,xjr),e(G3,$jr),e(G3,zee),e(zee,kjr),e(G3,Sjr),e(ve,Rjr),e(ve,O3),e(O3,L5e),e(L5e,Pjr),e(O3,Bjr),e(O3,Wee),e(Wee,Ijr),e(O3,Njr),e(ve,qjr),e(ve,V3),e(V3,y5e),e(y5e,jjr),e(V3,Djr),e(V3,Qee),e(Qee,Gjr),e(V3,Ojr),e(ve,Vjr),e(ve,X3),e(X3,x5e),e(x5e,Xjr),e(X3,zjr),e(X3,Uee),e(Uee,Wjr),e(X3,Qjr),e(ve,Ujr),e(ve,z3),e(z3,$5e),e($5e,Hjr),e(z3,Jjr),e(z3,Hee),e(Hee,Yjr),e(z3,Kjr),e(ve,Zjr),e(ve,W3),e(W3,k5e),e(k5e,eDr),e(W3,oDr),e(W3,Jee),e(Jee,rDr),e(W3,tDr),e(ve,aDr),e(ve,Q3),e(Q3,S5e),e(S5e,nDr),e(Q3,sDr),e(Q3,Yee),e(Yee,lDr),e(Q3,iDr),e(Gr,dDr),M(U3,Gr,null),b(f,wHe,u),b(f,Jc,u),e(Jc,H3),e(H3,R5e),M(Z$,R5e,null),e(Jc,cDr),e(Jc,P5e),e(P5e,fDr),b(f,AHe,u),b(f,gr,u),M(ek,gr,null),e(gr,mDr),e(gr,Yc),e(Yc,gDr),e(Yc,Kee),e(Kee,hDr),e(Yc,pDr),e(Yc,Zee),e(Zee,_Dr),e(Yc,uDr),e(gr,bDr),e(gr,ok),e(ok,vDr),e(ok,B5e),e(B5e,FDr),e(ok,TDr),e(gr,MDr),e(gr,Qt),M(rk,Qt,null),e(Qt,EDr),e(Qt,I5e),e(I5e,CDr),e(Qt,wDr),e(Qt,Kc),e(Kc,ADr),e(Kc,N5e),e(N5e,LDr),e(Kc,yDr),e(Kc,eoe),e(eoe,xDr),e(Kc,$Dr),e(Qt,kDr),M(J3,Qt,null),e(gr,SDr),e(gr,Or),M(tk,Or,null),e(Or,RDr),e(Or,q5e),e(q5e,PDr),e(Or,BDr),e(Or,wn),e(wn,IDr),e(wn,j5e),e(j5e,NDr),e(wn,qDr),e(wn,D5e),e(D5e,jDr),e(wn,DDr),e(wn,G5e),e(G5e,GDr),e(wn,ODr),e(Or,VDr),e(Or,ak),e(ak,Y3),e(Y3,O5e),e(O5e,XDr),e(Y3,zDr),e(Y3,ooe),e(ooe,WDr),e(Y3,QDr),e(ak,UDr),e(ak,K3),e(K3,V5e),e(V5e,HDr),e(K3,JDr),e(K3,roe),e(roe,YDr),e(K3,KDr),e(Or,ZDr),M(Z3,Or,null),b(f,LHe,u),b(f,Zc,u),e(Zc,e5),e(e5,X5e),M(nk,X5e,null),e(Zc,eGr),e(Zc,z5e),e(z5e,oGr),b(f,yHe,u),b(f,hr,u),M(sk,hr,null),e(hr,rGr),e(hr,ef),e(ef,tGr),e(ef,toe),e(toe,aGr),e(ef,nGr),e(ef,aoe),e(aoe,sGr),e(ef,lGr),e(hr,iGr),e(hr,lk),e(lk,dGr),e(lk,W5e),e(W5e,cGr),e(lk,fGr),e(hr,mGr),e(hr,Ut),M(ik,Ut,null),e(Ut,gGr),e(Ut,Q5e),e(Q5e,hGr),e(Ut,pGr),e(Ut,of),e(of,_Gr),e(of,U5e),e(U5e,uGr),e(of,bGr),e(of,noe),e(noe,vGr),e(of,FGr),e(Ut,TGr),M(o5,Ut,null),e(hr,MGr),e(hr,Vr),M(dk,Vr,null),e(Vr,EGr),e(Vr,H5e),e(H5e,CGr),e(Vr,wGr),e(Vr,An),e(An,AGr),e(An,J5e),e(J5e,LGr),e(An,yGr),e(An,Y5e),e(Y5e,xGr),e(An,$Gr),e(An,K5e),e(K5e,kGr),e(An,SGr),e(Vr,RGr),e(Vr,Z5e),e(Z5e,r5),e(r5,ewe),e(ewe,PGr),e(r5,BGr),e(r5,soe),e(soe,IGr),e(r5,NGr),e(Vr,qGr),M(t5,Vr,null),b(f,xHe,u),b(f,rf,u),e(rf,a5),e(a5,owe),M(ck,owe,null),e(rf,jGr),e(rf,rwe),e(rwe,DGr),b(f,$He,u),b(f,pr,u),M(fk,pr,null),e(pr,GGr),e(pr,tf),e(tf,OGr),e(tf,loe),e(loe,VGr),e(tf,XGr),e(tf,ioe),e(ioe,zGr),e(tf,WGr),e(pr,QGr),e(pr,mk),e(mk,UGr),e(mk,twe),e(twe,HGr),e(mk,JGr),e(pr,YGr),e(pr,Ht),M(gk,Ht,null),e(Ht,KGr),e(Ht,awe),e(awe,ZGr),e(Ht,eOr),e(Ht,af),e(af,oOr),e(af,nwe),e(nwe,rOr),e(af,tOr),e(af,doe),e(doe,aOr),e(af,nOr),e(Ht,sOr),M(n5,Ht,null),e(pr,lOr),e(pr,Xr),M(hk,Xr,null),e(Xr,iOr),e(Xr,swe),e(swe,dOr),e(Xr,cOr),e(Xr,Ln),e(Ln,fOr),e(Ln,lwe),e(lwe,mOr),e(Ln,gOr),e(Ln,iwe),e(iwe,hOr),e(Ln,pOr),e(Ln,dwe),e(dwe,_Or),e(Ln,uOr),e(Xr,bOr),e(Xr,ce),e(ce,s5),e(s5,cwe),e(cwe,vOr),e(s5,FOr),e(s5,coe),e(coe,TOr),e(s5,MOr),e(ce,EOr),e(ce,l5),e(l5,fwe),e(fwe,COr),e(l5,wOr),e(l5,foe),e(foe,AOr),e(l5,LOr),e(ce,yOr),e(ce,i5),e(i5,mwe),e(mwe,xOr),e(i5,$Or),e(i5,moe),e(moe,kOr),e(i5,SOr),e(ce,ROr),e(ce,d5),e(d5,gwe),e(gwe,POr),e(d5,BOr),e(d5,goe),e(goe,IOr),e(d5,NOr),e(ce,qOr),e(ce,c5),e(c5,hwe),e(hwe,jOr),e(c5,DOr),e(c5,hoe),e(hoe,GOr),e(c5,OOr),e(ce,VOr),e(ce,f5),e(f5,pwe),e(pwe,XOr),e(f5,zOr),e(f5,poe),e(poe,WOr),e(f5,QOr),e(ce,UOr),e(ce,m5),e(m5,_we),e(_we,HOr),e(m5,JOr),e(m5,_oe),e(_oe,YOr),e(m5,KOr),e(ce,ZOr),e(ce,g5),e(g5,uwe),e(uwe,eVr),e(g5,oVr),e(g5,uoe),e(uoe,rVr),e(g5,tVr),e(ce,aVr),e(ce,h5),e(h5,bwe),e(bwe,nVr),e(h5,sVr),e(h5,boe),e(boe,lVr),e(h5,iVr),e(ce,dVr),e(ce,p5),e(p5,vwe),e(vwe,cVr),e(p5,fVr),e(p5,voe),e(voe,mVr),e(p5,gVr),e(ce,hVr),e(ce,_5),e(_5,Fwe),e(Fwe,pVr),e(_5,_Vr),e(_5,Foe),e(Foe,uVr),e(_5,bVr),e(ce,vVr),e(ce,u5),e(u5,Twe),e(Twe,FVr),e(u5,TVr),e(u5,Toe),e(Toe,MVr),e(u5,EVr),e(ce,CVr),e(ce,b5),e(b5,Mwe),e(Mwe,wVr),e(b5,AVr),e(b5,Moe),e(Moe,LVr),e(b5,yVr),e(ce,xVr),e(ce,v5),e(v5,Ewe),e(Ewe,$Vr),e(v5,kVr),e(v5,Eoe),e(Eoe,SVr),e(v5,RVr),e(ce,PVr),e(ce,F5),e(F5,Cwe),e(Cwe,BVr),e(F5,IVr),e(F5,Coe),e(Coe,NVr),e(F5,qVr),e(ce,jVr),e(ce,T5),e(T5,wwe),e(wwe,DVr),e(T5,GVr),e(T5,woe),e(woe,OVr),e(T5,VVr),e(ce,XVr),e(ce,M5),e(M5,Awe),e(Awe,zVr),e(M5,WVr),e(M5,Aoe),e(Aoe,QVr),e(M5,UVr),e(ce,HVr),e(ce,E5),e(E5,Lwe),e(Lwe,JVr),e(E5,YVr),e(E5,Loe),e(Loe,KVr),e(E5,ZVr),e(ce,eXr),e(ce,C5),e(C5,ywe),e(ywe,oXr),e(C5,rXr),e(C5,yoe),e(yoe,tXr),e(C5,aXr),e(ce,nXr),e(ce,w5),e(w5,xwe),e(xwe,sXr),e(w5,lXr),e(w5,xoe),e(xoe,iXr),e(w5,dXr),e(Xr,cXr),M(A5,Xr,null),b(f,kHe,u),b(f,nf,u),e(nf,L5),e(L5,$we),M(pk,$we,null),e(nf,fXr),e(nf,kwe),e(kwe,mXr),b(f,SHe,u),b(f,_r,u),M(_k,_r,null),e(_r,gXr),e(_r,sf),e(sf,hXr),e(sf,$oe),e($oe,pXr),e(sf,_Xr),e(sf,koe),e(koe,uXr),e(sf,bXr),e(_r,vXr),e(_r,uk),e(uk,FXr),e(uk,Swe),e(Swe,TXr),e(uk,MXr),e(_r,EXr),e(_r,Jt),M(bk,Jt,null),e(Jt,CXr),e(Jt,Rwe),e(Rwe,wXr),e(Jt,AXr),e(Jt,lf),e(lf,LXr),e(lf,Pwe),e(Pwe,yXr),e(lf,xXr),e(lf,Soe),e(Soe,$Xr),e(lf,kXr),e(Jt,SXr),M(y5,Jt,null),e(_r,RXr),e(_r,zr),M(vk,zr,null),e(zr,PXr),e(zr,Bwe),e(Bwe,BXr),e(zr,IXr),e(zr,yn),e(yn,NXr),e(yn,Iwe),e(Iwe,qXr),e(yn,jXr),e(yn,Nwe),e(Nwe,DXr),e(yn,GXr),e(yn,qwe),e(qwe,OXr),e(yn,VXr),e(zr,XXr),e(zr,fe),e(fe,x5),e(x5,jwe),e(jwe,zXr),e(x5,WXr),e(x5,Roe),e(Roe,QXr),e(x5,UXr),e(fe,HXr),e(fe,$5),e($5,Dwe),e(Dwe,JXr),e($5,YXr),e($5,Poe),e(Poe,KXr),e($5,ZXr),e(fe,ezr),e(fe,k5),e(k5,Gwe),e(Gwe,ozr),e(k5,rzr),e(k5,Boe),e(Boe,tzr),e(k5,azr),e(fe,nzr),e(fe,S5),e(S5,Owe),e(Owe,szr),e(S5,lzr),e(S5,Ioe),e(Ioe,izr),e(S5,dzr),e(fe,czr),e(fe,R5),e(R5,Vwe),e(Vwe,fzr),e(R5,mzr),e(R5,Noe),e(Noe,gzr),e(R5,hzr),e(fe,pzr),e(fe,P5),e(P5,Xwe),e(Xwe,_zr),e(P5,uzr),e(P5,qoe),e(qoe,bzr),e(P5,vzr),e(fe,Fzr),e(fe,B5),e(B5,zwe),e(zwe,Tzr),e(B5,Mzr),e(B5,joe),e(joe,Ezr),e(B5,Czr),e(fe,wzr),e(fe,I5),e(I5,Wwe),e(Wwe,Azr),e(I5,Lzr),e(I5,Doe),e(Doe,yzr),e(I5,xzr),e(fe,$zr),e(fe,N5),e(N5,Qwe),e(Qwe,kzr),e(N5,Szr),e(N5,Goe),e(Goe,Rzr),e(N5,Pzr),e(fe,Bzr),e(fe,q5),e(q5,Uwe),e(Uwe,Izr),e(q5,Nzr),e(q5,Ooe),e(Ooe,qzr),e(q5,jzr),e(fe,Dzr),e(fe,j5),e(j5,Hwe),e(Hwe,Gzr),e(j5,Ozr),e(j5,Voe),e(Voe,Vzr),e(j5,Xzr),e(fe,zzr),e(fe,D5),e(D5,Jwe),e(Jwe,Wzr),e(D5,Qzr),e(D5,Xoe),e(Xoe,Uzr),e(D5,Hzr),e(fe,Jzr),e(fe,G5),e(G5,Ywe),e(Ywe,Yzr),e(G5,Kzr),e(G5,zoe),e(zoe,Zzr),e(G5,eWr),e(fe,oWr),e(fe,O5),e(O5,Kwe),e(Kwe,rWr),e(O5,tWr),e(O5,Woe),e(Woe,aWr),e(O5,nWr),e(fe,sWr),e(fe,V5),e(V5,Zwe),e(Zwe,lWr),e(V5,iWr),e(V5,Qoe),e(Qoe,dWr),e(V5,cWr),e(fe,fWr),e(fe,X5),e(X5,e6e),e(e6e,mWr),e(X5,gWr),e(X5,Uoe),e(Uoe,hWr),e(X5,pWr),e(fe,_Wr),e(fe,z5),e(z5,o6e),e(o6e,uWr),e(z5,bWr),e(z5,Hoe),e(Hoe,vWr),e(z5,FWr),e(fe,TWr),e(fe,W5),e(W5,r6e),e(r6e,MWr),e(W5,EWr),e(W5,Joe),e(Joe,CWr),e(W5,wWr),e(fe,AWr),e(fe,Q5),e(Q5,t6e),e(t6e,LWr),e(Q5,yWr),e(Q5,Yoe),e(Yoe,xWr),e(Q5,$Wr),e(fe,kWr),e(fe,U5),e(U5,a6e),e(a6e,SWr),e(U5,RWr),e(U5,Koe),e(Koe,PWr),e(U5,BWr),e(zr,IWr),M(H5,zr,null),b(f,RHe,u),b(f,df,u),e(df,J5),e(J5,n6e),M(Fk,n6e,null),e(df,NWr),e(df,s6e),e(s6e,qWr),b(f,PHe,u),b(f,ur,u),M(Tk,ur,null),e(ur,jWr),e(ur,cf),e(cf,DWr),e(cf,Zoe),e(Zoe,GWr),e(cf,OWr),e(cf,ere),e(ere,VWr),e(cf,XWr),e(ur,zWr),e(ur,Mk),e(Mk,WWr),e(Mk,l6e),e(l6e,QWr),e(Mk,UWr),e(ur,HWr),e(ur,Yt),M(Ek,Yt,null),e(Yt,JWr),e(Yt,i6e),e(i6e,YWr),e(Yt,KWr),e(Yt,ff),e(ff,ZWr),e(ff,d6e),e(d6e,eQr),e(ff,oQr),e(ff,ore),e(ore,rQr),e(ff,tQr),e(Yt,aQr),M(Y5,Yt,null),e(ur,nQr),e(ur,Wr),M(Ck,Wr,null),e(Wr,sQr),e(Wr,c6e),e(c6e,lQr),e(Wr,iQr),e(Wr,xn),e(xn,dQr),e(xn,f6e),e(f6e,cQr),e(xn,fQr),e(xn,m6e),e(m6e,mQr),e(xn,gQr),e(xn,g6e),e(g6e,hQr),e(xn,pQr),e(Wr,_Qr),e(Wr,h6e),e(h6e,K5),e(K5,p6e),e(p6e,uQr),e(K5,bQr),e(K5,rre),e(rre,vQr),e(K5,FQr),e(Wr,TQr),M(Z5,Wr,null),b(f,BHe,u),b(f,mf,u),e(mf,ew),e(ew,_6e),M(wk,_6e,null),e(mf,MQr),e(mf,u6e),e(u6e,EQr),b(f,IHe,u),b(f,br,u),M(Ak,br,null),e(br,CQr),e(br,gf),e(gf,wQr),e(gf,tre),e(tre,AQr),e(gf,LQr),e(gf,are),e(are,yQr),e(gf,xQr),e(br,$Qr),e(br,Lk),e(Lk,kQr),e(Lk,b6e),e(b6e,SQr),e(Lk,RQr),e(br,PQr),e(br,Kt),M(yk,Kt,null),e(Kt,BQr),e(Kt,v6e),e(v6e,IQr),e(Kt,NQr),e(Kt,hf),e(hf,qQr),e(hf,F6e),e(F6e,jQr),e(hf,DQr),e(hf,nre),e(nre,GQr),e(hf,OQr),e(Kt,VQr),M(ow,Kt,null),e(br,XQr),e(br,Qr),M(xk,Qr,null),e(Qr,zQr),e(Qr,T6e),e(T6e,WQr),e(Qr,QQr),e(Qr,$n),e($n,UQr),e($n,M6e),e(M6e,HQr),e($n,JQr),e($n,E6e),e(E6e,YQr),e($n,KQr),e($n,C6e),e(C6e,ZQr),e($n,eUr),e(Qr,oUr),e(Qr,w6e),e(w6e,rw),e(rw,A6e),e(A6e,rUr),e(rw,tUr),e(rw,sre),e(sre,aUr),e(rw,nUr),e(Qr,sUr),M(tw,Qr,null),b(f,NHe,u),b(f,pf,u),e(pf,aw),e(aw,L6e),M($k,L6e,null),e(pf,lUr),e(pf,y6e),e(y6e,iUr),b(f,qHe,u),b(f,vr,u),M(kk,vr,null),e(vr,dUr),e(vr,_f),e(_f,cUr),e(_f,lre),e(lre,fUr),e(_f,mUr),e(_f,ire),e(ire,gUr),e(_f,hUr),e(vr,pUr),e(vr,Sk),e(Sk,_Ur),e(Sk,x6e),e(x6e,uUr),e(Sk,bUr),e(vr,vUr),e(vr,Zt),M(Rk,Zt,null),e(Zt,FUr),e(Zt,$6e),e($6e,TUr),e(Zt,MUr),e(Zt,uf),e(uf,EUr),e(uf,k6e),e(k6e,CUr),e(uf,wUr),e(uf,dre),e(dre,AUr),e(uf,LUr),e(Zt,yUr),M(nw,Zt,null),e(vr,xUr),e(vr,Ur),M(Pk,Ur,null),e(Ur,$Ur),e(Ur,S6e),e(S6e,kUr),e(Ur,SUr),e(Ur,kn),e(kn,RUr),e(kn,R6e),e(R6e,PUr),e(kn,BUr),e(kn,P6e),e(P6e,IUr),e(kn,NUr),e(kn,B6e),e(B6e,qUr),e(kn,jUr),e(Ur,DUr),e(Ur,re),e(re,sw),e(sw,I6e),e(I6e,GUr),e(sw,OUr),e(sw,cre),e(cre,VUr),e(sw,XUr),e(re,zUr),e(re,lw),e(lw,N6e),e(N6e,WUr),e(lw,QUr),e(lw,fre),e(fre,UUr),e(lw,HUr),e(re,JUr),e(re,iw),e(iw,q6e),e(q6e,YUr),e(iw,KUr),e(iw,mre),e(mre,ZUr),e(iw,eHr),e(re,oHr),e(re,dw),e(dw,j6e),e(j6e,rHr),e(dw,tHr),e(dw,gre),e(gre,aHr),e(dw,nHr),e(re,sHr),e(re,cw),e(cw,D6e),e(D6e,lHr),e(cw,iHr),e(cw,hre),e(hre,dHr),e(cw,cHr),e(re,fHr),e(re,fw),e(fw,G6e),e(G6e,mHr),e(fw,gHr),e(fw,pre),e(pre,hHr),e(fw,pHr),e(re,_Hr),e(re,mw),e(mw,O6e),e(O6e,uHr),e(mw,bHr),e(mw,_re),e(_re,vHr),e(mw,FHr),e(re,THr),e(re,gw),e(gw,V6e),e(V6e,MHr),e(gw,EHr),e(gw,ure),e(ure,CHr),e(gw,wHr),e(re,AHr),e(re,hw),e(hw,X6e),e(X6e,LHr),e(hw,yHr),e(hw,bre),e(bre,xHr),e(hw,$Hr),e(re,kHr),e(re,pw),e(pw,z6e),e(z6e,SHr),e(pw,RHr),e(pw,vre),e(vre,PHr),e(pw,BHr),e(re,IHr),e(re,_w),e(_w,W6e),e(W6e,NHr),e(_w,qHr),e(_w,Fre),e(Fre,jHr),e(_w,DHr),e(re,GHr),e(re,uw),e(uw,Q6e),e(Q6e,OHr),e(uw,VHr),e(uw,Tre),e(Tre,XHr),e(uw,zHr),e(re,WHr),e(re,bw),e(bw,U6e),e(U6e,QHr),e(bw,UHr),e(bw,Mre),e(Mre,HHr),e(bw,JHr),e(re,YHr),e(re,vw),e(vw,H6e),e(H6e,KHr),e(vw,ZHr),e(vw,Ere),e(Ere,eJr),e(vw,oJr),e(re,rJr),e(re,Fw),e(Fw,J6e),e(J6e,tJr),e(Fw,aJr),e(Fw,Cre),e(Cre,nJr),e(Fw,sJr),e(re,lJr),e(re,Tw),e(Tw,Y6e),e(Y6e,iJr),e(Tw,dJr),e(Tw,wre),e(wre,cJr),e(Tw,fJr),e(re,mJr),e(re,Mw),e(Mw,K6e),e(K6e,gJr),e(Mw,hJr),e(Mw,Are),e(Are,pJr),e(Mw,_Jr),e(re,uJr),e(re,Ew),e(Ew,Z6e),e(Z6e,bJr),e(Ew,vJr),e(Ew,Lre),e(Lre,FJr),e(Ew,TJr),e(re,MJr),e(re,Cw),e(Cw,eAe),e(eAe,EJr),e(Cw,CJr),e(Cw,yre),e(yre,wJr),e(Cw,AJr),e(re,LJr),e(re,ww),e(ww,oAe),e(oAe,yJr),e(ww,xJr),e(ww,xre),e(xre,$Jr),e(ww,kJr),e(re,SJr),e(re,Aw),e(Aw,rAe),e(rAe,RJr),e(Aw,PJr),e(Aw,$re),e($re,BJr),e(Aw,IJr),e(re,NJr),e(re,Lw),e(Lw,tAe),e(tAe,qJr),e(Lw,jJr),e(Lw,kre),e(kre,DJr),e(Lw,GJr),e(re,OJr),e(re,yw),e(yw,aAe),e(aAe,VJr),e(yw,XJr),e(yw,Sre),e(Sre,zJr),e(yw,WJr),e(re,QJr),e(re,xw),e(xw,nAe),e(nAe,UJr),e(xw,HJr),e(xw,Rre),e(Rre,JJr),e(xw,YJr),e(re,KJr),e(re,$w),e($w,sAe),e(sAe,ZJr),e($w,eYr),e($w,Pre),e(Pre,oYr),e($w,rYr),e(re,tYr),e(re,kw),e(kw,lAe),e(lAe,aYr),e(kw,nYr),e(kw,Bre),e(Bre,sYr),e(kw,lYr),e(re,iYr),e(re,Sw),e(Sw,iAe),e(iAe,dYr),e(Sw,cYr),e(Sw,Ire),e(Ire,fYr),e(Sw,mYr),e(Ur,gYr),M(Rw,Ur,null),b(f,jHe,u),b(f,bf,u),e(bf,Pw),e(Pw,dAe),M(Bk,dAe,null),e(bf,hYr),e(bf,cAe),e(cAe,pYr),b(f,DHe,u),b(f,Fr,u),M(Ik,Fr,null),e(Fr,_Yr),e(Fr,vf),e(vf,uYr),e(vf,Nre),e(Nre,bYr),e(vf,vYr),e(vf,qre),e(qre,FYr),e(vf,TYr),e(Fr,MYr),e(Fr,Nk),e(Nk,EYr),e(Nk,fAe),e(fAe,CYr),e(Nk,wYr),e(Fr,AYr),e(Fr,ea),M(qk,ea,null),e(ea,LYr),e(ea,mAe),e(mAe,yYr),e(ea,xYr),e(ea,Ff),e(Ff,$Yr),e(Ff,gAe),e(gAe,kYr),e(Ff,SYr),e(Ff,jre),e(jre,RYr),e(Ff,PYr),e(ea,BYr),M(Bw,ea,null),e(Fr,IYr),e(Fr,Hr),M(jk,Hr,null),e(Hr,NYr),e(Hr,hAe),e(hAe,qYr),e(Hr,jYr),e(Hr,Sn),e(Sn,DYr),e(Sn,pAe),e(pAe,GYr),e(Sn,OYr),e(Sn,_Ae),e(_Ae,VYr),e(Sn,XYr),e(Sn,uAe),e(uAe,zYr),e(Sn,WYr),e(Hr,QYr),e(Hr,xe),e(xe,Iw),e(Iw,bAe),e(bAe,UYr),e(Iw,HYr),e(Iw,Dre),e(Dre,JYr),e(Iw,YYr),e(xe,KYr),e(xe,Nw),e(Nw,vAe),e(vAe,ZYr),e(Nw,eKr),e(Nw,Gre),e(Gre,oKr),e(Nw,rKr),e(xe,tKr),e(xe,qw),e(qw,FAe),e(FAe,aKr),e(qw,nKr),e(qw,Ore),e(Ore,sKr),e(qw,lKr),e(xe,iKr),e(xe,jw),e(jw,TAe),e(TAe,dKr),e(jw,cKr),e(jw,Vre),e(Vre,fKr),e(jw,mKr),e(xe,gKr),e(xe,Dw),e(Dw,MAe),e(MAe,hKr),e(Dw,pKr),e(Dw,Xre),e(Xre,_Kr),e(Dw,uKr),e(xe,bKr),e(xe,Gw),e(Gw,EAe),e(EAe,vKr),e(Gw,FKr),e(Gw,zre),e(zre,TKr),e(Gw,MKr),e(xe,EKr),e(xe,Ow),e(Ow,CAe),e(CAe,CKr),e(Ow,wKr),e(Ow,Wre),e(Wre,AKr),e(Ow,LKr),e(xe,yKr),e(xe,Vw),e(Vw,wAe),e(wAe,xKr),e(Vw,$Kr),e(Vw,Qre),e(Qre,kKr),e(Vw,SKr),e(xe,RKr),e(xe,Xw),e(Xw,AAe),e(AAe,PKr),e(Xw,BKr),e(Xw,Ure),e(Ure,IKr),e(Xw,NKr),e(xe,qKr),e(xe,zw),e(zw,LAe),e(LAe,jKr),e(zw,DKr),e(zw,Hre),e(Hre,GKr),e(zw,OKr),e(Hr,VKr),M(Ww,Hr,null),b(f,GHe,u),b(f,Tf,u),e(Tf,Qw),e(Qw,yAe),M(Dk,yAe,null),e(Tf,XKr),e(Tf,xAe),e(xAe,zKr),b(f,OHe,u),b(f,Tr,u),M(Gk,Tr,null),e(Tr,WKr),e(Tr,Mf),e(Mf,QKr),e(Mf,Jre),e(Jre,UKr),e(Mf,HKr),e(Mf,Yre),e(Yre,JKr),e(Mf,YKr),e(Tr,KKr),e(Tr,Ok),e(Ok,ZKr),e(Ok,$Ae),e($Ae,eZr),e(Ok,oZr),e(Tr,rZr),e(Tr,oa),M(Vk,oa,null),e(oa,tZr),e(oa,kAe),e(kAe,aZr),e(oa,nZr),e(oa,Ef),e(Ef,sZr),e(Ef,SAe),e(SAe,lZr),e(Ef,iZr),e(Ef,Kre),e(Kre,dZr),e(Ef,cZr),e(oa,fZr),M(Uw,oa,null),e(Tr,mZr),e(Tr,Jr),M(Xk,Jr,null),e(Jr,gZr),e(Jr,RAe),e(RAe,hZr),e(Jr,pZr),e(Jr,Rn),e(Rn,_Zr),e(Rn,PAe),e(PAe,uZr),e(Rn,bZr),e(Rn,BAe),e(BAe,vZr),e(Rn,FZr),e(Rn,IAe),e(IAe,TZr),e(Rn,MZr),e(Jr,EZr),e(Jr,Ee),e(Ee,Hw),e(Hw,NAe),e(NAe,CZr),e(Hw,wZr),e(Hw,Zre),e(Zre,AZr),e(Hw,LZr),e(Ee,yZr),e(Ee,Jw),e(Jw,qAe),e(qAe,xZr),e(Jw,$Zr),e(Jw,ete),e(ete,kZr),e(Jw,SZr),e(Ee,RZr),e(Ee,Yw),e(Yw,jAe),e(jAe,PZr),e(Yw,BZr),e(Yw,ote),e(ote,IZr),e(Yw,NZr),e(Ee,qZr),e(Ee,Kw),e(Kw,DAe),e(DAe,jZr),e(Kw,DZr),e(Kw,rte),e(rte,GZr),e(Kw,OZr),e(Ee,VZr),e(Ee,Zw),e(Zw,GAe),e(GAe,XZr),e(Zw,zZr),e(Zw,tte),e(tte,WZr),e(Zw,QZr),e(Ee,UZr),e(Ee,e6),e(e6,OAe),e(OAe,HZr),e(e6,JZr),e(e6,ate),e(ate,YZr),e(e6,KZr),e(Ee,ZZr),e(Ee,o6),e(o6,VAe),e(VAe,eet),e(o6,oet),e(o6,nte),e(nte,ret),e(o6,tet),e(Ee,aet),e(Ee,r6),e(r6,XAe),e(XAe,net),e(r6,set),e(r6,ste),e(ste,iet),e(r6,det),e(Ee,cet),e(Ee,t6),e(t6,zAe),e(zAe,fet),e(t6,met),e(t6,lte),e(lte,get),e(t6,het),e(Ee,pet),e(Ee,a6),e(a6,WAe),e(WAe,_et),e(a6,uet),e(a6,ite),e(ite,bet),e(a6,vet),e(Ee,Fet),e(Ee,n6),e(n6,QAe),e(QAe,Tet),e(n6,Met),e(n6,dte),e(dte,Eet),e(n6,Cet),e(Ee,wet),e(Ee,s6),e(s6,UAe),e(UAe,Aet),e(s6,Let),e(s6,cte),e(cte,yet),e(s6,xet),e(Ee,$et),e(Ee,l6),e(l6,HAe),e(HAe,ket),e(l6,Set),e(l6,fte),e(fte,Ret),e(l6,Pet),e(Jr,Bet),M(i6,Jr,null),b(f,VHe,u),b(f,Cf,u),e(Cf,d6),e(d6,JAe),M(zk,JAe,null),e(Cf,Iet),e(Cf,YAe),e(YAe,Net),b(f,XHe,u),b(f,Mr,u),M(Wk,Mr,null),e(Mr,qet),e(Mr,wf),e(wf,jet),e(wf,mte),e(mte,Det),e(wf,Get),e(wf,gte),e(gte,Oet),e(wf,Vet),e(Mr,Xet),e(Mr,Qk),e(Qk,zet),e(Qk,KAe),e(KAe,Wet),e(Qk,Qet),e(Mr,Uet),e(Mr,ra),M(Uk,ra,null),e(ra,Het),e(ra,ZAe),e(ZAe,Jet),e(ra,Yet),e(ra,Af),e(Af,Ket),e(Af,e7e),e(e7e,Zet),e(Af,eot),e(Af,hte),e(hte,oot),e(Af,rot),e(ra,tot),M(c6,ra,null),e(Mr,aot),e(Mr,Yr),M(Hk,Yr,null),e(Yr,not),e(Yr,o7e),e(o7e,sot),e(Yr,lot),e(Yr,Pn),e(Pn,iot),e(Pn,r7e),e(r7e,dot),e(Pn,cot),e(Pn,t7e),e(t7e,fot),e(Pn,mot),e(Pn,a7e),e(a7e,got),e(Pn,hot),e(Yr,pot),e(Yr,$e),e($e,f6),e(f6,n7e),e(n7e,_ot),e(f6,uot),e(f6,pte),e(pte,bot),e(f6,vot),e($e,Fot),e($e,m6),e(m6,s7e),e(s7e,Tot),e(m6,Mot),e(m6,_te),e(_te,Eot),e(m6,Cot),e($e,wot),e($e,g6),e(g6,l7e),e(l7e,Aot),e(g6,Lot),e(g6,ute),e(ute,yot),e(g6,xot),e($e,$ot),e($e,h6),e(h6,i7e),e(i7e,kot),e(h6,Sot),e(h6,bte),e(bte,Rot),e(h6,Pot),e($e,Bot),e($e,p6),e(p6,d7e),e(d7e,Iot),e(p6,Not),e(p6,vte),e(vte,qot),e(p6,jot),e($e,Dot),e($e,_6),e(_6,c7e),e(c7e,Got),e(_6,Oot),e(_6,Fte),e(Fte,Vot),e(_6,Xot),e($e,zot),e($e,u6),e(u6,f7e),e(f7e,Wot),e(u6,Qot),e(u6,Tte),e(Tte,Uot),e(u6,Hot),e($e,Jot),e($e,b6),e(b6,m7e),e(m7e,Yot),e(b6,Kot),e(b6,Mte),e(Mte,Zot),e(b6,ert),e($e,ort),e($e,v6),e(v6,g7e),e(g7e,rrt),e(v6,trt),e(v6,Ete),e(Ete,art),e(v6,nrt),e($e,srt),e($e,F6),e(F6,h7e),e(h7e,lrt),e(F6,irt),e(F6,Cte),e(Cte,drt),e(F6,crt),e(Yr,frt),M(T6,Yr,null),b(f,zHe,u),b(f,Lf,u),e(Lf,M6),e(M6,p7e),M(Jk,p7e,null),e(Lf,mrt),e(Lf,_7e),e(_7e,grt),b(f,WHe,u),b(f,Er,u),M(Yk,Er,null),e(Er,hrt),e(Er,yf),e(yf,prt),e(yf,wte),e(wte,_rt),e(yf,urt),e(yf,Ate),e(Ate,brt),e(yf,vrt),e(Er,Frt),e(Er,Kk),e(Kk,Trt),e(Kk,u7e),e(u7e,Mrt),e(Kk,Ert),e(Er,Crt),e(Er,ta),M(Zk,ta,null),e(ta,wrt),e(ta,b7e),e(b7e,Art),e(ta,Lrt),e(ta,xf),e(xf,yrt),e(xf,v7e),e(v7e,xrt),e(xf,$rt),e(xf,Lte),e(Lte,krt),e(xf,Srt),e(ta,Rrt),M(E6,ta,null),e(Er,Prt),e(Er,Kr),M(eS,Kr,null),e(Kr,Brt),e(Kr,F7e),e(F7e,Irt),e(Kr,Nrt),e(Kr,Bn),e(Bn,qrt),e(Bn,T7e),e(T7e,jrt),e(Bn,Drt),e(Bn,M7e),e(M7e,Grt),e(Bn,Ort),e(Bn,E7e),e(E7e,Vrt),e(Bn,Xrt),e(Kr,zrt),e(Kr,ke),e(ke,C6),e(C6,C7e),e(C7e,Wrt),e(C6,Qrt),e(C6,yte),e(yte,Urt),e(C6,Hrt),e(ke,Jrt),e(ke,w6),e(w6,w7e),e(w7e,Yrt),e(w6,Krt),e(w6,xte),e(xte,Zrt),e(w6,ett),e(ke,ott),e(ke,A6),e(A6,A7e),e(A7e,rtt),e(A6,ttt),e(A6,$te),e($te,att),e(A6,ntt),e(ke,stt),e(ke,L6),e(L6,L7e),e(L7e,ltt),e(L6,itt),e(L6,kte),e(kte,dtt),e(L6,ctt),e(ke,ftt),e(ke,y6),e(y6,y7e),e(y7e,mtt),e(y6,gtt),e(y6,Ste),e(Ste,htt),e(y6,ptt),e(ke,_tt),e(ke,x6),e(x6,x7e),e(x7e,utt),e(x6,btt),e(x6,Rte),e(Rte,vtt),e(x6,Ftt),e(ke,Ttt),e(ke,$6),e($6,$7e),e($7e,Mtt),e($6,Ett),e($6,Pte),e(Pte,Ctt),e($6,wtt),e(ke,Att),e(ke,k6),e(k6,k7e),e(k7e,Ltt),e(k6,ytt),e(k6,Bte),e(Bte,xtt),e(k6,$tt),e(ke,ktt),e(ke,S6),e(S6,S7e),e(S7e,Stt),e(S6,Rtt),e(S6,Ite),e(Ite,Ptt),e(S6,Btt),e(ke,Itt),e(ke,R6),e(R6,R7e),e(R7e,Ntt),e(R6,qtt),e(R6,Nte),e(Nte,jtt),e(R6,Dtt),e(Kr,Gtt),M(P6,Kr,null),b(f,QHe,u),b(f,$f,u),e($f,B6),e(B6,P7e),M(oS,P7e,null),e($f,Ott),e($f,B7e),e(B7e,Vtt),b(f,UHe,u),b(f,Cr,u),M(rS,Cr,null),e(Cr,Xtt),e(Cr,kf),e(kf,ztt),e(kf,qte),e(qte,Wtt),e(kf,Qtt),e(kf,jte),e(jte,Utt),e(kf,Htt),e(Cr,Jtt),e(Cr,tS),e(tS,Ytt),e(tS,I7e),e(I7e,Ktt),e(tS,Ztt),e(Cr,eat),e(Cr,aa),M(aS,aa,null),e(aa,oat),e(aa,N7e),e(N7e,rat),e(aa,tat),e(aa,Sf),e(Sf,aat),e(Sf,q7e),e(q7e,nat),e(Sf,sat),e(Sf,Dte),e(Dte,lat),e(Sf,iat),e(aa,dat),M(I6,aa,null),e(Cr,cat),e(Cr,Zr),M(nS,Zr,null),e(Zr,fat),e(Zr,j7e),e(j7e,mat),e(Zr,gat),e(Zr,In),e(In,hat),e(In,D7e),e(D7e,pat),e(In,_at),e(In,G7e),e(G7e,uat),e(In,bat),e(In,O7e),e(O7e,vat),e(In,Fat),e(Zr,Tat),e(Zr,Se),e(Se,N6),e(N6,V7e),e(V7e,Mat),e(N6,Eat),e(N6,Gte),e(Gte,Cat),e(N6,wat),e(Se,Aat),e(Se,q6),e(q6,X7e),e(X7e,Lat),e(q6,yat),e(q6,Ote),e(Ote,xat),e(q6,$at),e(Se,kat),e(Se,j6),e(j6,z7e),e(z7e,Sat),e(j6,Rat),e(j6,Vte),e(Vte,Pat),e(j6,Bat),e(Se,Iat),e(Se,D6),e(D6,W7e),e(W7e,Nat),e(D6,qat),e(D6,Xte),e(Xte,jat),e(D6,Dat),e(Se,Gat),e(Se,G6),e(G6,Q7e),e(Q7e,Oat),e(G6,Vat),e(G6,zte),e(zte,Xat),e(G6,zat),e(Se,Wat),e(Se,O6),e(O6,U7e),e(U7e,Qat),e(O6,Uat),e(O6,Wte),e(Wte,Hat),e(O6,Jat),e(Se,Yat),e(Se,V6),e(V6,H7e),e(H7e,Kat),e(V6,Zat),e(V6,Qte),e(Qte,ent),e(V6,ont),e(Se,rnt),e(Se,X6),e(X6,J7e),e(J7e,tnt),e(X6,ant),e(X6,Ute),e(Ute,nnt),e(X6,snt),e(Se,lnt),e(Se,z6),e(z6,Y7e),e(Y7e,int),e(z6,dnt),e(z6,Hte),e(Hte,cnt),e(z6,fnt),e(Se,mnt),e(Se,W6),e(W6,K7e),e(K7e,gnt),e(W6,hnt),e(W6,Jte),e(Jte,pnt),e(W6,_nt),e(Zr,unt),M(Q6,Zr,null),b(f,HHe,u),b(f,Rf,u),e(Rf,U6),e(U6,Z7e),M(sS,Z7e,null),e(Rf,bnt),e(Rf,eLe),e(eLe,vnt),b(f,JHe,u),b(f,wr,u),M(lS,wr,null),e(wr,Fnt),e(wr,Pf),e(Pf,Tnt),e(Pf,Yte),e(Yte,Mnt),e(Pf,Ent),e(Pf,Kte),e(Kte,Cnt),e(Pf,wnt),e(wr,Ant),e(wr,iS),e(iS,Lnt),e(iS,oLe),e(oLe,ynt),e(iS,xnt),e(wr,$nt),e(wr,na),M(dS,na,null),e(na,knt),e(na,rLe),e(rLe,Snt),e(na,Rnt),e(na,Bf),e(Bf,Pnt),e(Bf,tLe),e(tLe,Bnt),e(Bf,Int),e(Bf,Zte),e(Zte,Nnt),e(Bf,qnt),e(na,jnt),M(H6,na,null),e(wr,Dnt),e(wr,et),M(cS,et,null),e(et,Gnt),e(et,aLe),e(aLe,Ont),e(et,Vnt),e(et,Nn),e(Nn,Xnt),e(Nn,nLe),e(nLe,znt),e(Nn,Wnt),e(Nn,sLe),e(sLe,Qnt),e(Nn,Unt),e(Nn,lLe),e(lLe,Hnt),e(Nn,Jnt),e(et,Ynt),e(et,Re),e(Re,J6),e(J6,iLe),e(iLe,Knt),e(J6,Znt),e(J6,eae),e(eae,est),e(J6,ost),e(Re,rst),e(Re,Y6),e(Y6,dLe),e(dLe,tst),e(Y6,ast),e(Y6,oae),e(oae,nst),e(Y6,sst),e(Re,lst),e(Re,K6),e(K6,cLe),e(cLe,ist),e(K6,dst),e(K6,rae),e(rae,cst),e(K6,fst),e(Re,mst),e(Re,Z6),e(Z6,fLe),e(fLe,gst),e(Z6,hst),e(Z6,tae),e(tae,pst),e(Z6,_st),e(Re,ust),e(Re,eA),e(eA,mLe),e(mLe,bst),e(eA,vst),e(eA,aae),e(aae,Fst),e(eA,Tst),e(Re,Mst),e(Re,oA),e(oA,gLe),e(gLe,Est),e(oA,Cst),e(oA,nae),e(nae,wst),e(oA,Ast),e(Re,Lst),e(Re,rA),e(rA,hLe),e(hLe,yst),e(rA,xst),e(rA,sae),e(sae,$st),e(rA,kst),e(Re,Sst),e(Re,tA),e(tA,pLe),e(pLe,Rst),e(tA,Pst),e(tA,lae),e(lae,Bst),e(tA,Ist),e(Re,Nst),e(Re,aA),e(aA,_Le),e(_Le,qst),e(aA,jst),e(aA,iae),e(iae,Dst),e(aA,Gst),e(Re,Ost),e(Re,nA),e(nA,uLe),e(uLe,Vst),e(nA,Xst),e(nA,dae),e(dae,zst),e(nA,Wst),e(et,Qst),M(sA,et,null),b(f,YHe,u),b(f,If,u),e(If,lA),e(lA,bLe),M(fS,bLe,null),e(If,Ust),e(If,vLe),e(vLe,Hst),b(f,KHe,u),b(f,Ar,u),M(mS,Ar,null),e(Ar,Jst),e(Ar,Nf),e(Nf,Yst),e(Nf,cae),e(cae,Kst),e(Nf,Zst),e(Nf,fae),e(fae,elt),e(Nf,olt),e(Ar,rlt),e(Ar,gS),e(gS,tlt),e(gS,FLe),e(FLe,alt),e(gS,nlt),e(Ar,slt),e(Ar,sa),M(hS,sa,null),e(sa,llt),e(sa,TLe),e(TLe,ilt),e(sa,dlt),e(sa,qf),e(qf,clt),e(qf,MLe),e(MLe,flt),e(qf,mlt),e(qf,mae),e(mae,glt),e(qf,hlt),e(sa,plt),M(iA,sa,null),e(Ar,_lt),e(Ar,ot),M(pS,ot,null),e(ot,ult),e(ot,ELe),e(ELe,blt),e(ot,vlt),e(ot,qn),e(qn,Flt),e(qn,CLe),e(CLe,Tlt),e(qn,Mlt),e(qn,wLe),e(wLe,Elt),e(qn,Clt),e(qn,ALe),e(ALe,wlt),e(qn,Alt),e(ot,Llt),e(ot,Xe),e(Xe,dA),e(dA,LLe),e(LLe,ylt),e(dA,xlt),e(dA,gae),e(gae,$lt),e(dA,klt),e(Xe,Slt),e(Xe,cA),e(cA,yLe),e(yLe,Rlt),e(cA,Plt),e(cA,hae),e(hae,Blt),e(cA,Ilt),e(Xe,Nlt),e(Xe,fA),e(fA,xLe),e(xLe,qlt),e(fA,jlt),e(fA,pae),e(pae,Dlt),e(fA,Glt),e(Xe,Olt),e(Xe,mA),e(mA,$Le),e($Le,Vlt),e(mA,Xlt),e(mA,_ae),e(_ae,zlt),e(mA,Wlt),e(Xe,Qlt),e(Xe,gA),e(gA,kLe),e(kLe,Ult),e(gA,Hlt),e(gA,uae),e(uae,Jlt),e(gA,Ylt),e(Xe,Klt),e(Xe,hA),e(hA,SLe),e(SLe,Zlt),e(hA,eit),e(hA,bae),e(bae,oit),e(hA,rit),e(Xe,tit),e(Xe,pA),e(pA,RLe),e(RLe,ait),e(pA,nit),e(pA,vae),e(vae,sit),e(pA,lit),e(Xe,iit),e(Xe,_A),e(_A,PLe),e(PLe,dit),e(_A,cit),e(_A,Fae),e(Fae,fit),e(_A,mit),e(ot,git),M(uA,ot,null),b(f,ZHe,u),b(f,jf,u),e(jf,bA),e(bA,BLe),M(_S,BLe,null),e(jf,hit),e(jf,ILe),e(ILe,pit),b(f,eJe,u),b(f,Lr,u),M(uS,Lr,null),e(Lr,_it),e(Lr,Df),e(Df,uit),e(Df,Tae),e(Tae,bit),e(Df,vit),e(Df,Mae),e(Mae,Fit),e(Df,Tit),e(Lr,Mit),e(Lr,bS),e(bS,Eit),e(bS,NLe),e(NLe,Cit),e(bS,wit),e(Lr,Ait),e(Lr,la),M(vS,la,null),e(la,Lit),e(la,qLe),e(qLe,yit),e(la,xit),e(la,Gf),e(Gf,$it),e(Gf,jLe),e(jLe,kit),e(Gf,Sit),e(Gf,Eae),e(Eae,Rit),e(Gf,Pit),e(la,Bit),M(vA,la,null),e(Lr,Iit),e(Lr,rt),M(FS,rt,null),e(rt,Nit),e(rt,DLe),e(DLe,qit),e(rt,jit),e(rt,jn),e(jn,Dit),e(jn,GLe),e(GLe,Git),e(jn,Oit),e(jn,OLe),e(OLe,Vit),e(jn,Xit),e(jn,VLe),e(VLe,zit),e(jn,Wit),e(rt,Qit),e(rt,ze),e(ze,FA),e(FA,XLe),e(XLe,Uit),e(FA,Hit),e(FA,Cae),e(Cae,Jit),e(FA,Yit),e(ze,Kit),e(ze,TA),e(TA,zLe),e(zLe,Zit),e(TA,edt),e(TA,wae),e(wae,odt),e(TA,rdt),e(ze,tdt),e(ze,MA),e(MA,WLe),e(WLe,adt),e(MA,ndt),e(MA,Aae),e(Aae,sdt),e(MA,ldt),e(ze,idt),e(ze,EA),e(EA,QLe),e(QLe,ddt),e(EA,cdt),e(EA,Lae),e(Lae,fdt),e(EA,mdt),e(ze,gdt),e(ze,CA),e(CA,ULe),e(ULe,hdt),e(CA,pdt),e(CA,yae),e(yae,_dt),e(CA,udt),e(ze,bdt),e(ze,wA),e(wA,HLe),e(HLe,vdt),e(wA,Fdt),e(wA,xae),e(xae,Tdt),e(wA,Mdt),e(ze,Edt),e(ze,AA),e(AA,JLe),e(JLe,Cdt),e(AA,wdt),e(AA,$ae),e($ae,Adt),e(AA,Ldt),e(ze,ydt),e(ze,LA),e(LA,YLe),e(YLe,xdt),e(LA,$dt),e(LA,kae),e(kae,kdt),e(LA,Sdt),e(rt,Rdt),M(yA,rt,null),b(f,oJe,u),b(f,Of,u),e(Of,xA),e(xA,KLe),M(TS,KLe,null),e(Of,Pdt),e(Of,ZLe),e(ZLe,Bdt),b(f,rJe,u),b(f,yr,u),M(MS,yr,null),e(yr,Idt),e(yr,Vf),e(Vf,Ndt),e(Vf,Sae),e(Sae,qdt),e(Vf,jdt),e(Vf,Rae),e(Rae,Ddt),e(Vf,Gdt),e(yr,Odt),e(yr,ES),e(ES,Vdt),e(ES,eye),e(eye,Xdt),e(ES,zdt),e(yr,Wdt),e(yr,ia),M(CS,ia,null),e(ia,Qdt),e(ia,oye),e(oye,Udt),e(ia,Hdt),e(ia,Xf),e(Xf,Jdt),e(Xf,rye),e(rye,Ydt),e(Xf,Kdt),e(Xf,Pae),e(Pae,Zdt),e(Xf,ect),e(ia,oct),M($A,ia,null),e(yr,rct),e(yr,tt),M(wS,tt,null),e(tt,tct),e(tt,tye),e(tye,act),e(tt,nct),e(tt,Dn),e(Dn,sct),e(Dn,aye),e(aye,lct),e(Dn,ict),e(Dn,nye),e(nye,dct),e(Dn,cct),e(Dn,sye),e(sye,fct),e(Dn,mct),e(tt,gct),e(tt,lye),e(lye,kA),e(kA,iye),e(iye,hct),e(kA,pct),e(kA,Bae),e(Bae,_ct),e(kA,uct),e(tt,bct),M(SA,tt,null),b(f,tJe,u),b(f,zf,u),e(zf,RA),e(RA,dye),M(AS,dye,null),e(zf,vct),e(zf,cye),e(cye,Fct),b(f,aJe,u),b(f,xr,u),M(LS,xr,null),e(xr,Tct),e(xr,Wf),e(Wf,Mct),e(Wf,Iae),e(Iae,Ect),e(Wf,Cct),e(Wf,Nae),e(Nae,wct),e(Wf,Act),e(xr,Lct),e(xr,yS),e(yS,yct),e(yS,fye),e(fye,xct),e(yS,$ct),e(xr,kct),e(xr,da),M(xS,da,null),e(da,Sct),e(da,mye),e(mye,Rct),e(da,Pct),e(da,Qf),e(Qf,Bct),e(Qf,gye),e(gye,Ict),e(Qf,Nct),e(Qf,qae),e(qae,qct),e(Qf,jct),e(da,Dct),M(PA,da,null),e(xr,Gct),e(xr,at),M($S,at,null),e(at,Oct),e(at,hye),e(hye,Vct),e(at,Xct),e(at,Gn),e(Gn,zct),e(Gn,pye),e(pye,Wct),e(Gn,Qct),e(Gn,_ye),e(_ye,Uct),e(Gn,Hct),e(Gn,uye),e(uye,Jct),e(Gn,Yct),e(at,Kct),e(at,kS),e(kS,BA),e(BA,bye),e(bye,Zct),e(BA,eft),e(BA,jae),e(jae,oft),e(BA,rft),e(kS,tft),e(kS,IA),e(IA,vye),e(vye,aft),e(IA,nft),e(IA,Dae),e(Dae,sft),e(IA,lft),e(at,ift),M(NA,at,null),b(f,nJe,u),b(f,Uf,u),e(Uf,qA),e(qA,Fye),M(SS,Fye,null),e(Uf,dft),e(Uf,Tye),e(Tye,cft),b(f,sJe,u),b(f,$r,u),M(RS,$r,null),e($r,fft),e($r,Hf),e(Hf,mft),e(Hf,Gae),e(Gae,gft),e(Hf,hft),e(Hf,Oae),e(Oae,pft),e(Hf,_ft),e($r,uft),e($r,PS),e(PS,bft),e(PS,Mye),e(Mye,vft),e(PS,Fft),e($r,Tft),e($r,ca),M(BS,ca,null),e(ca,Mft),e(ca,Eye),e(Eye,Eft),e(ca,Cft),e(ca,Jf),e(Jf,wft),e(Jf,Cye),e(Cye,Aft),e(Jf,Lft),e(Jf,Vae),e(Vae,yft),e(Jf,xft),e(ca,$ft),M(jA,ca,null),e($r,kft),e($r,nt),M(IS,nt,null),e(nt,Sft),e(nt,wye),e(wye,Rft),e(nt,Pft),e(nt,On),e(On,Bft),e(On,Aye),e(Aye,Ift),e(On,Nft),e(On,Lye),e(Lye,qft),e(On,jft),e(On,yye),e(yye,Dft),e(On,Gft),e(nt,Oft),e(nt,xye),e(xye,DA),e(DA,$ye),e($ye,Vft),e(DA,Xft),e(DA,Xae),e(Xae,zft),e(DA,Wft),e(nt,Qft),M(GA,nt,null),lJe=!0},p(f,[u]){const NS={};u&2&&(NS.$$scope={dirty:u,ctx:f}),nm.$set(NS);const kye={};u&2&&(kye.$$scope={dirty:u,ctx:f}),Th.$set(kye);const Sye={};u&2&&(Sye.$$scope={dirty:u,ctx:f}),tp.$set(Sye);const Rye={};u&2&&(Rye.$$scope={dirty:u,ctx:f}),Xp.$set(Rye);const qS={};u&2&&(qS.$$scope={dirty:u,ctx:f}),zp.$set(qS);const Pye={};u&2&&(Pye.$$scope={dirty:u,ctx:f}),h_.$set(Pye);const Vn={};u&2&&(Vn.$$scope={dirty:u,ctx:f}),p_.$set(Vn);const Bye={};u&2&&(Bye.$$scope={dirty:u,ctx:f}),b_.$set(Bye);const Iye={};u&2&&(Iye.$$scope={dirty:u,ctx:f}),L2.$set(Iye);const Nye={};u&2&&(Nye.$$scope={dirty:u,ctx:f}),x2.$set(Nye);const jS={};u&2&&(jS.$$scope={dirty:u,ctx:f}),C0.$set(jS);const qye={};u&2&&(qye.$$scope={dirty:u,ctx:f}),A0.$set(qye);const DS={};u&2&&(DS.$$scope={dirty:u,ctx:f}),h1.$set(DS);const jye={};u&2&&(jye.$$scope={dirty:u,ctx:f}),_1.$set(jye);const GS={};u&2&&(GS.$$scope={dirty:u,ctx:f}),rb.$set(GS);const Dye={};u&2&&(Dye.$$scope={dirty:u,ctx:f}),ab.$set(Dye);const Gye={};u&2&&(Gye.$$scope={dirty:u,ctx:f}),wb.$set(Gye);const Oye={};u&2&&(Oye.$$scope={dirty:u,ctx:f}),Lb.$set(Oye);const Yf={};u&2&&(Yf.$$scope={dirty:u,ctx:f}),Lv.$set(Yf);const Vye={};u&2&&(Vye.$$scope={dirty:u,ctx:f}),xv.$set(Vye);const Xye={};u&2&&(Xye.$$scope={dirty:u,ctx:f}),iF.$set(Xye);const zye={};u&2&&(zye.$$scope={dirty:u,ctx:f}),cF.$set(zye);const OS={};u&2&&(OS.$$scope={dirty:u,ctx:f}),bF.$set(OS);const Wye={};u&2&&(Wye.$$scope={dirty:u,ctx:f}),FF.$set(Wye);const Qye={};u&2&&(Qye.$$scope={dirty:u,ctx:f}),nT.$set(Qye);const Uye={};u&2&&(Uye.$$scope={dirty:u,ctx:f}),lT.$set(Uye);const dt={};u&2&&(dt.$$scope={dirty:u,ctx:f}),KT.$set(dt);const VS={};u&2&&(VS.$$scope={dirty:u,ctx:f}),e8.$set(VS);const Hye={};u&2&&(Hye.$$scope={dirty:u,ctx:f}),t8.$set(Hye);const XS={};u&2&&(XS.$$scope={dirty:u,ctx:f}),n8.$set(XS);const Jye={};u&2&&(Jye.$$scope={dirty:u,ctx:f}),T8.$set(Jye);const ct={};u&2&&(ct.$$scope={dirty:u,ctx:f}),E8.$set(ct);const Yye={};u&2&&(Yye.$$scope={dirty:u,ctx:f}),A8.$set(Yye);const Kf={};u&2&&(Kf.$$scope={dirty:u,ctx:f}),y8.$set(Kf);const Kye={};u&2&&(Kye.$$scope={dirty:u,ctx:f}),k8.$set(Kye);const Zye={};u&2&&(Zye.$$scope={dirty:u,ctx:f}),R8.$set(Zye);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),I8.$set(L);const OA={};u&2&&(OA.$$scope={dirty:u,ctx:f}),q8.$set(OA);const e9e={};u&2&&(e9e.$$scope={dirty:u,ctx:f}),H8.$set(e9e);const o9e={};u&2&&(o9e.$$scope={dirty:u,ctx:f}),Y8.$set(o9e);const VA={};u&2&&(VA.$$scope={dirty:u,ctx:f}),aM.$set(VA);const r9e={};u&2&&(r9e.$$scope={dirty:u,ctx:f}),sM.$set(r9e);const t9e={};u&2&&(t9e.$$scope={dirty:u,ctx:f}),bM.$set(t9e);const XA={};u&2&&(XA.$$scope={dirty:u,ctx:f}),FM.$set(XA);const a9e={};u&2&&(a9e.$$scope={dirty:u,ctx:f}),CM.$set(a9e);const n9e={};u&2&&(n9e.$$scope={dirty:u,ctx:f}),AM.$set(n9e);const zA={};u&2&&(zA.$$scope={dirty:u,ctx:f}),RM.$set(zA);const s9e={};u&2&&(s9e.$$scope={dirty:u,ctx:f}),BM.$set(s9e);const l9e={};u&2&&(l9e.$$scope={dirty:u,ctx:f}),GM.$set(l9e);const WA={};u&2&&(WA.$$scope={dirty:u,ctx:f}),VM.$set(WA);const i9e={};u&2&&(i9e.$$scope={dirty:u,ctx:f}),QM.$set(i9e);const d9e={};u&2&&(d9e.$$scope={dirty:u,ctx:f}),HM.$set(d9e);const QA={};u&2&&(QA.$$scope={dirty:u,ctx:f}),KM.$set(QA);const c9e={};u&2&&(c9e.$$scope={dirty:u,ctx:f}),eE.$set(c9e);const f9e={};u&2&&(f9e.$$scope={dirty:u,ctx:f}),lE.$set(f9e);const UA={};u&2&&(UA.$$scope={dirty:u,ctx:f}),dE.$set(UA);const m9e={};u&2&&(m9e.$$scope={dirty:u,ctx:f}),mE.$set(m9e);const g9e={};u&2&&(g9e.$$scope={dirty:u,ctx:f}),hE.$set(g9e);const HA={};u&2&&(HA.$$scope={dirty:u,ctx:f}),g4.$set(HA);const h9e={};u&2&&(h9e.$$scope={dirty:u,ctx:f}),p4.$set(h9e);const p9e={};u&2&&(p9e.$$scope={dirty:u,ctx:f}),j4.$set(p9e);const JA={};u&2&&(JA.$$scope={dirty:u,ctx:f}),G4.$set(JA);const _9e={};u&2&&(_9e.$$scope={dirty:u,ctx:f}),rC.$set(_9e);const u9e={};u&2&&(u9e.$$scope={dirty:u,ctx:f}),aC.$set(u9e);const YA={};u&2&&(YA.$$scope={dirty:u,ctx:f}),mC.$set(YA);const b9e={};u&2&&(b9e.$$scope={dirty:u,ctx:f}),hC.$set(b9e);const v9e={};u&2&&(v9e.$$scope={dirty:u,ctx:f}),uC.$set(v9e);const KA={};u&2&&(KA.$$scope={dirty:u,ctx:f}),vC.$set(KA);const F9e={};u&2&&(F9e.$$scope={dirty:u,ctx:f}),DC.$set(F9e);const T9e={};u&2&&(T9e.$$scope={dirty:u,ctx:f}),OC.$set(T9e);const ZA={};u&2&&(ZA.$$scope={dirty:u,ctx:f}),ZC.$set(ZA);const M9e={};u&2&&(M9e.$$scope={dirty:u,ctx:f}),o3.$set(M9e);const E9e={};u&2&&(E9e.$$scope={dirty:u,ctx:f}),y3.$set(E9e);const e7={};u&2&&(e7.$$scope={dirty:u,ctx:f}),$3.$set(e7);const C9e={};u&2&&(C9e.$$scope={dirty:u,ctx:f}),U3.$set(C9e);const w9e={};u&2&&(w9e.$$scope={dirty:u,ctx:f}),J3.$set(w9e);const o7={};u&2&&(o7.$$scope={dirty:u,ctx:f}),Z3.$set(o7);const A9e={};u&2&&(A9e.$$scope={dirty:u,ctx:f}),o5.$set(A9e);const L9e={};u&2&&(L9e.$$scope={dirty:u,ctx:f}),t5.$set(L9e);const r7={};u&2&&(r7.$$scope={dirty:u,ctx:f}),n5.$set(r7);const y9e={};u&2&&(y9e.$$scope={dirty:u,ctx:f}),A5.$set(y9e);const x9e={};u&2&&(x9e.$$scope={dirty:u,ctx:f}),y5.$set(x9e);const t7={};u&2&&(t7.$$scope={dirty:u,ctx:f}),H5.$set(t7);const $9e={};u&2&&($9e.$$scope={dirty:u,ctx:f}),Y5.$set($9e);const k9e={};u&2&&(k9e.$$scope={dirty:u,ctx:f}),Z5.$set(k9e);const a7={};u&2&&(a7.$$scope={dirty:u,ctx:f}),ow.$set(a7);const S9e={};u&2&&(S9e.$$scope={dirty:u,ctx:f}),tw.$set(S9e);const R9e={};u&2&&(R9e.$$scope={dirty:u,ctx:f}),nw.$set(R9e);const n7={};u&2&&(n7.$$scope={dirty:u,ctx:f}),Rw.$set(n7);const P9e={};u&2&&(P9e.$$scope={dirty:u,ctx:f}),Bw.$set(P9e);const B9e={};u&2&&(B9e.$$scope={dirty:u,ctx:f}),Ww.$set(B9e);const s7={};u&2&&(s7.$$scope={dirty:u,ctx:f}),Uw.$set(s7);const I9e={};u&2&&(I9e.$$scope={dirty:u,ctx:f}),i6.$set(I9e);const N9e={};u&2&&(N9e.$$scope={dirty:u,ctx:f}),c6.$set(N9e);const l7={};u&2&&(l7.$$scope={dirty:u,ctx:f}),T6.$set(l7);const q9e={};u&2&&(q9e.$$scope={dirty:u,ctx:f}),E6.$set(q9e);const j9e={};u&2&&(j9e.$$scope={dirty:u,ctx:f}),P6.$set(j9e);const i7={};u&2&&(i7.$$scope={dirty:u,ctx:f}),I6.$set(i7);const D9e={};u&2&&(D9e.$$scope={dirty:u,ctx:f}),Q6.$set(D9e);const G9e={};u&2&&(G9e.$$scope={dirty:u,ctx:f}),H6.$set(G9e);const d7={};u&2&&(d7.$$scope={dirty:u,ctx:f}),sA.$set(d7);const O9e={};u&2&&(O9e.$$scope={dirty:u,ctx:f}),iA.$set(O9e);const V9e={};u&2&&(V9e.$$scope={dirty:u,ctx:f}),uA.$set(V9e);const c7={};u&2&&(c7.$$scope={dirty:u,ctx:f}),vA.$set(c7);const X9e={};u&2&&(X9e.$$scope={dirty:u,ctx:f}),yA.$set(X9e);const z9e={};u&2&&(z9e.$$scope={dirty:u,ctx:f}),$A.$set(z9e);const f7={};u&2&&(f7.$$scope={dirty:u,ctx:f}),SA.$set(f7);const W9e={};u&2&&(W9e.$$scope={dirty:u,ctx:f}),PA.$set(W9e);const Q9e={};u&2&&(Q9e.$$scope={dirty:u,ctx:f}),NA.$set(Q9e);const m7={};u&2&&(m7.$$scope={dirty:u,ctx:f}),jA.$set(m7);const U9e={};u&2&&(U9e.$$scope={dirty:u,ctx:f}),GA.$set(U9e)},i(f){lJe||(E(d.$$.fragment,f),E(ja.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(nm.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(My.$$.fragment,f),E(Th.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(tp.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Py.$$.fragment,f),E(Xp.$$.fragment,f),E(zp.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(h_.$$.fragment,f),E(p_.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(b_.$$.fragment,f),E(Wy.$$.fragment,f),E(L2.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(x2.$$.fragment,f),E(Yy.$$.fragment,f),E(C0.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(o9.$$.fragment,f),E(A0.$$.fragment,f),E(r9.$$.fragment,f),E(h1.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(_1.$$.fragment,f),E(l9.$$.fragment,f),E(rb.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(ab.$$.fragment,f),E(m9.$$.fragment,f),E(wb.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(_9.$$.fragment,f),E(Lb.$$.fragment,f),E(u9.$$.fragment,f),E(Lv.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(xv.$$.fragment,f),E(M9.$$.fragment,f),E(iF.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(cF.$$.fragment,f),E(L9.$$.fragment,f),E(bF.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(FF.$$.fragment,f),E(S9.$$.fragment,f),E(nT.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(lT.$$.fragment,f),E(N9.$$.fragment,f),E(KT.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(e8.$$.fragment,f),E(O9.$$.fragment,f),E(t8.$$.fragment,f),E(V9.$$.fragment,f),E(X9.$$.fragment,f),E(W9.$$.fragment,f),E(n8.$$.fragment,f),E(Q9.$$.fragment,f),E(T8.$$.fragment,f),E(U9.$$.fragment,f),E(H9.$$.fragment,f),E(Y9.$$.fragment,f),E(E8.$$.fragment,f),E(K9.$$.fragment,f),E(A8.$$.fragment,f),E(Z9.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(y8.$$.fragment,f),E(tx.$$.fragment,f),E(k8.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(R8.$$.fragment,f),E(ix.$$.fragment,f),E(I8.$$.fragment,f),E(dx.$$.fragment,f),E(cx.$$.fragment,f),E(mx.$$.fragment,f),E(q8.$$.fragment,f),E(gx.$$.fragment,f),E(H8.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(Y8.$$.fragment,f),E(bx.$$.fragment,f),E(aM.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(sM.$$.fragment,f),E(Ex.$$.fragment,f),E(bM.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(Lx.$$.fragment,f),E(FM.$$.fragment,f),E(yx.$$.fragment,f),E(CM.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(AM.$$.fragment,f),E(Px.$$.fragment,f),E(RM.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(BM.$$.fragment,f),E(jx.$$.fragment,f),E(GM.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(VM.$$.fragment,f),E(Xx.$$.fragment,f),E(QM.$$.fragment,f),E(Wx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(HM.$$.fragment,f),E(Jx.$$.fragment,f),E(KM.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(eE.$$.fragment,f),E(o$.$$.fragment,f),E(lE.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(dE.$$.fragment,f),E(s$.$$.fragment,f),E(mE.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(hE.$$.fragment,f),E(f$.$$.fragment,f),E(g4.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(p4.$$.fragment,f),E(_$.$$.fragment,f),E(j4.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(G4.$$.fragment,f),E(T$.$$.fragment,f),E(rC.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(aC.$$.fragment,f),E(A$.$$.fragment,f),E(mC.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(hC.$$.fragment,f),E(k$.$$.fragment,f),E(uC.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(vC.$$.fragment,f),E(N$.$$.fragment,f),E(DC.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(OC.$$.fragment,f),E(O$.$$.fragment,f),E(ZC.$$.fragment,f),E(V$.$$.fragment,f),E(X$.$$.fragment,f),E(W$.$$.fragment,f),E(o3.$$.fragment,f),E(Q$.$$.fragment,f),E(y3.$$.fragment,f),E(U$.$$.fragment,f),E(H$.$$.fragment,f),E(Y$.$$.fragment,f),E($3.$$.fragment,f),E(K$.$$.fragment,f),E(U3.$$.fragment,f),E(Z$.$$.fragment,f),E(ek.$$.fragment,f),E(rk.$$.fragment,f),E(J3.$$.fragment,f),E(tk.$$.fragment,f),E(Z3.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E(o5.$$.fragment,f),E(dk.$$.fragment,f),E(t5.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(n5.$$.fragment,f),E(hk.$$.fragment,f),E(A5.$$.fragment,f),E(pk.$$.fragment,f),E(_k.$$.fragment,f),E(bk.$$.fragment,f),E(y5.$$.fragment,f),E(vk.$$.fragment,f),E(H5.$$.fragment,f),E(Fk.$$.fragment,f),E(Tk.$$.fragment,f),E(Ek.$$.fragment,f),E(Y5.$$.fragment,f),E(Ck.$$.fragment,f),E(Z5.$$.fragment,f),E(wk.$$.fragment,f),E(Ak.$$.fragment,f),E(yk.$$.fragment,f),E(ow.$$.fragment,f),E(xk.$$.fragment,f),E(tw.$$.fragment,f),E($k.$$.fragment,f),E(kk.$$.fragment,f),E(Rk.$$.fragment,f),E(nw.$$.fragment,f),E(Pk.$$.fragment,f),E(Rw.$$.fragment,f),E(Bk.$$.fragment,f),E(Ik.$$.fragment,f),E(qk.$$.fragment,f),E(Bw.$$.fragment,f),E(jk.$$.fragment,f),E(Ww.$$.fragment,f),E(Dk.$$.fragment,f),E(Gk.$$.fragment,f),E(Vk.$$.fragment,f),E(Uw.$$.fragment,f),E(Xk.$$.fragment,f),E(i6.$$.fragment,f),E(zk.$$.fragment,f),E(Wk.$$.fragment,f),E(Uk.$$.fragment,f),E(c6.$$.fragment,f),E(Hk.$$.fragment,f),E(T6.$$.fragment,f),E(Jk.$$.fragment,f),E(Yk.$$.fragment,f),E(Zk.$$.fragment,f),E(E6.$$.fragment,f),E(eS.$$.fragment,f),E(P6.$$.fragment,f),E(oS.$$.fragment,f),E(rS.$$.fragment,f),E(aS.$$.fragment,f),E(I6.$$.fragment,f),E(nS.$$.fragment,f),E(Q6.$$.fragment,f),E(sS.$$.fragment,f),E(lS.$$.fragment,f),E(dS.$$.fragment,f),E(H6.$$.fragment,f),E(cS.$$.fragment,f),E(sA.$$.fragment,f),E(fS.$$.fragment,f),E(mS.$$.fragment,f),E(hS.$$.fragment,f),E(iA.$$.fragment,f),E(pS.$$.fragment,f),E(uA.$$.fragment,f),E(_S.$$.fragment,f),E(uS.$$.fragment,f),E(vS.$$.fragment,f),E(vA.$$.fragment,f),E(FS.$$.fragment,f),E(yA.$$.fragment,f),E(TS.$$.fragment,f),E(MS.$$.fragment,f),E(CS.$$.fragment,f),E($A.$$.fragment,f),E(wS.$$.fragment,f),E(SA.$$.fragment,f),E(AS.$$.fragment,f),E(LS.$$.fragment,f),E(xS.$$.fragment,f),E(PA.$$.fragment,f),E($S.$$.fragment,f),E(NA.$$.fragment,f),E(SS.$$.fragment,f),E(RS.$$.fragment,f),E(BS.$$.fragment,f),E(jA.$$.fragment,f),E(IS.$$.fragment,f),E(GA.$$.fragment,f),lJe=!0)},o(f){C(d.$$.fragment,f),C(ja.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(nm.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(My.$$.fragment,f),C(Th.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(tp.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Py.$$.fragment,f),C(Xp.$$.fragment,f),C(zp.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(h_.$$.fragment,f),C(p_.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(b_.$$.fragment,f),C(Wy.$$.fragment,f),C(L2.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(x2.$$.fragment,f),C(Yy.$$.fragment,f),C(C0.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(o9.$$.fragment,f),C(A0.$$.fragment,f),C(r9.$$.fragment,f),C(h1.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(_1.$$.fragment,f),C(l9.$$.fragment,f),C(rb.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(ab.$$.fragment,f),C(m9.$$.fragment,f),C(wb.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(_9.$$.fragment,f),C(Lb.$$.fragment,f),C(u9.$$.fragment,f),C(Lv.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(xv.$$.fragment,f),C(M9.$$.fragment,f),C(iF.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(cF.$$.fragment,f),C(L9.$$.fragment,f),C(bF.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(FF.$$.fragment,f),C(S9.$$.fragment,f),C(nT.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(lT.$$.fragment,f),C(N9.$$.fragment,f),C(KT.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(e8.$$.fragment,f),C(O9.$$.fragment,f),C(t8.$$.fragment,f),C(V9.$$.fragment,f),C(X9.$$.fragment,f),C(W9.$$.fragment,f),C(n8.$$.fragment,f),C(Q9.$$.fragment,f),C(T8.$$.fragment,f),C(U9.$$.fragment,f),C(H9.$$.fragment,f),C(Y9.$$.fragment,f),C(E8.$$.fragment,f),C(K9.$$.fragment,f),C(A8.$$.fragment,f),C(Z9.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(y8.$$.fragment,f),C(tx.$$.fragment,f),C(k8.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(R8.$$.fragment,f),C(ix.$$.fragment,f),C(I8.$$.fragment,f),C(dx.$$.fragment,f),C(cx.$$.fragment,f),C(mx.$$.fragment,f),C(q8.$$.fragment,f),C(gx.$$.fragment,f),C(H8.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(Y8.$$.fragment,f),C(bx.$$.fragment,f),C(aM.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(sM.$$.fragment,f),C(Ex.$$.fragment,f),C(bM.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(Lx.$$.fragment,f),C(FM.$$.fragment,f),C(yx.$$.fragment,f),C(CM.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(AM.$$.fragment,f),C(Px.$$.fragment,f),C(RM.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(BM.$$.fragment,f),C(jx.$$.fragment,f),C(GM.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(VM.$$.fragment,f),C(Xx.$$.fragment,f),C(QM.$$.fragment,f),C(Wx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(HM.$$.fragment,f),C(Jx.$$.fragment,f),C(KM.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(eE.$$.fragment,f),C(o$.$$.fragment,f),C(lE.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(dE.$$.fragment,f),C(s$.$$.fragment,f),C(mE.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(hE.$$.fragment,f),C(f$.$$.fragment,f),C(g4.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(p4.$$.fragment,f),C(_$.$$.fragment,f),C(j4.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(G4.$$.fragment,f),C(T$.$$.fragment,f),C(rC.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(aC.$$.fragment,f),C(A$.$$.fragment,f),C(mC.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(hC.$$.fragment,f),C(k$.$$.fragment,f),C(uC.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(vC.$$.fragment,f),C(N$.$$.fragment,f),C(DC.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(OC.$$.fragment,f),C(O$.$$.fragment,f),C(ZC.$$.fragment,f),C(V$.$$.fragment,f),C(X$.$$.fragment,f),C(W$.$$.fragment,f),C(o3.$$.fragment,f),C(Q$.$$.fragment,f),C(y3.$$.fragment,f),C(U$.$$.fragment,f),C(H$.$$.fragment,f),C(Y$.$$.fragment,f),C($3.$$.fragment,f),C(K$.$$.fragment,f),C(U3.$$.fragment,f),C(Z$.$$.fragment,f),C(ek.$$.fragment,f),C(rk.$$.fragment,f),C(J3.$$.fragment,f),C(tk.$$.fragment,f),C(Z3.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C(o5.$$.fragment,f),C(dk.$$.fragment,f),C(t5.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(n5.$$.fragment,f),C(hk.$$.fragment,f),C(A5.$$.fragment,f),C(pk.$$.fragment,f),C(_k.$$.fragment,f),C(bk.$$.fragment,f),C(y5.$$.fragment,f),C(vk.$$.fragment,f),C(H5.$$.fragment,f),C(Fk.$$.fragment,f),C(Tk.$$.fragment,f),C(Ek.$$.fragment,f),C(Y5.$$.fragment,f),C(Ck.$$.fragment,f),C(Z5.$$.fragment,f),C(wk.$$.fragment,f),C(Ak.$$.fragment,f),C(yk.$$.fragment,f),C(ow.$$.fragment,f),C(xk.$$.fragment,f),C(tw.$$.fragment,f),C($k.$$.fragment,f),C(kk.$$.fragment,f),C(Rk.$$.fragment,f),C(nw.$$.fragment,f),C(Pk.$$.fragment,f),C(Rw.$$.fragment,f),C(Bk.$$.fragment,f),C(Ik.$$.fragment,f),C(qk.$$.fragment,f),C(Bw.$$.fragment,f),C(jk.$$.fragment,f),C(Ww.$$.fragment,f),C(Dk.$$.fragment,f),C(Gk.$$.fragment,f),C(Vk.$$.fragment,f),C(Uw.$$.fragment,f),C(Xk.$$.fragment,f),C(i6.$$.fragment,f),C(zk.$$.fragment,f),C(Wk.$$.fragment,f),C(Uk.$$.fragment,f),C(c6.$$.fragment,f),C(Hk.$$.fragment,f),C(T6.$$.fragment,f),C(Jk.$$.fragment,f),C(Yk.$$.fragment,f),C(Zk.$$.fragment,f),C(E6.$$.fragment,f),C(eS.$$.fragment,f),C(P6.$$.fragment,f),C(oS.$$.fragment,f),C(rS.$$.fragment,f),C(aS.$$.fragment,f),C(I6.$$.fragment,f),C(nS.$$.fragment,f),C(Q6.$$.fragment,f),C(sS.$$.fragment,f),C(lS.$$.fragment,f),C(dS.$$.fragment,f),C(H6.$$.fragment,f),C(cS.$$.fragment,f),C(sA.$$.fragment,f),C(fS.$$.fragment,f),C(mS.$$.fragment,f),C(hS.$$.fragment,f),C(iA.$$.fragment,f),C(pS.$$.fragment,f),C(uA.$$.fragment,f),C(_S.$$.fragment,f),C(uS.$$.fragment,f),C(vS.$$.fragment,f),C(vA.$$.fragment,f),C(FS.$$.fragment,f),C(yA.$$.fragment,f),C(TS.$$.fragment,f),C(MS.$$.fragment,f),C(CS.$$.fragment,f),C($A.$$.fragment,f),C(wS.$$.fragment,f),C(SA.$$.fragment,f),C(AS.$$.fragment,f),C(LS.$$.fragment,f),C(xS.$$.fragment,f),C(PA.$$.fragment,f),C($S.$$.fragment,f),C(NA.$$.fragment,f),C(SS.$$.fragment,f),C(RS.$$.fragment,f),C(BS.$$.fragment,f),C(jA.$$.fragment,f),C(IS.$$.fragment,f),C(GA.$$.fragment,f),lJe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(em),f&&t(ft),f&&t(Oe),f&&t(Qe),f&&t(rm),w(ja,f),f&&t(Ue),f&&t(Ae),f&&t(Lo),f&&t(Da),f&&t(KQe),f&&t(Hi),w(_y),f&&t(ZQe),f&&t(Un),f&&t(eUe),w(uy,f),f&&t(oUe),f&&t(fP),f&&t(rUe),w(nm,f),f&&t(tUe),f&&t(Ji),w(by),f&&t(aUe),f&&t(yo),w(vy),w(My),w(Th),w(Ey),f&&t(nUe),f&&t(Ki),w(Cy),f&&t(sUe),f&&t(xo),w(wy),w(yy),w(tp),w(xy),f&&t(lUe),f&&t(Zi),w($y),f&&t(iUe),f&&t($o),w(ky),w(Py),w(Xp),w(zp),w(By),f&&t(dUe),f&&t(ed),w(Iy),f&&t(cUe),f&&t(ko),w(Ny),w(Dy),w(h_),w(p_),w(Gy),f&&t(fUe),f&&t(rd),w(Oy),f&&t(mUe),f&&t(So),w(Vy),w(zy),w(b_),w(Wy),w(L2),f&&t(gUe),f&&t(nd),w(Qy),f&&t(hUe),f&&t(Ro),w(Uy),w(Jy),w(x2),w(Yy),w(C0),f&&t(pUe),f&&t(id),w(Ky),f&&t(_Ue),f&&t(Po),w(Zy),w(o9),w(A0),w(r9),w(h1),f&&t(uUe),f&&t(fd),w(t9),f&&t(bUe),f&&t(Bo),w(a9),w(s9),w(_1),w(l9),w(rb),f&&t(vUe),f&&t(hd),w(i9),f&&t(FUe),f&&t(Io),w(d9),w(f9),w(ab),w(m9),w(wb),f&&t(TUe),f&&t(ud),w(g9),f&&t(MUe),f&&t(No),w(h9),w(_9),w(Lb),w(u9),w(Lv),f&&t(EUe),f&&t(Fd),w(b9),f&&t(CUe),f&&t(qo),w(v9),w(T9),w(xv),w(M9),w(iF),f&&t(wUe),f&&t(Ed),w(E9),f&&t(AUe),f&&t(jo),w(C9),w(A9),w(cF),w(L9),w(bF),f&&t(LUe),f&&t(Ad),w(y9),f&&t(yUe),f&&t(Go),w(x9),w(k9),w(FF),w(S9),w(nT),f&&t(xUe),f&&t(xd),w(R9),f&&t($Ue),f&&t(Oo),w(P9),w(I9),w(lT),w(N9),w(KT),f&&t(kUe),f&&t(Sd),w(q9),f&&t(SUe),f&&t(Vo),w(j9),w(G9),w(e8),w(O9),w(t8),f&&t(RUe),f&&t(Bd),w(V9),f&&t(PUe),f&&t(Xo),w(X9),w(W9),w(n8),w(Q9),w(T8),f&&t(BUe),f&&t(qd),w(U9),f&&t(IUe),f&&t(zo),w(H9),w(Y9),w(E8),w(K9),w(A8),f&&t(NUe),f&&t(Gd),w(Z9),f&&t(qUe),f&&t(Wo),w(ex),w(rx),w(y8),w(tx),w(k8),f&&t(jUe),f&&t(Xd),w(ax),f&&t(DUe),f&&t(Qo),w(nx),w(lx),w(R8),w(ix),w(I8),f&&t(GUe),f&&t(Qd),w(dx),f&&t(OUe),f&&t(Uo),w(cx),w(mx),w(q8),w(gx),w(H8),f&&t(VUe),f&&t(Jd),w(hx),f&&t(XUe),f&&t(Ho),w(px),w(ux),w(Y8),w(bx),w(aM),f&&t(zUe),f&&t(Zd),w(vx),f&&t(WUe),f&&t(Jo),w(Fx),w(Mx),w(sM),w(Ex),w(bM),f&&t(QUe),f&&t(rc),w(Cx),f&&t(UUe),f&&t(Yo),w(wx),w(Lx),w(FM),w(yx),w(CM),f&&t(HUe),f&&t(nc),w($x),f&&t(JUe),f&&t(Ko),w(kx),w(Rx),w(AM),w(Px),w(RM),f&&t(YUe),f&&t(ic),w(Bx),f&&t(KUe),f&&t(Zo),w(Ix),w(qx),w(BM),w(jx),w(GM),f&&t(ZUe),f&&t(fc),w(Dx),f&&t(eHe),f&&t(er),w(Gx),w(Vx),w(VM),w(Xx),w(QM),f&&t(oHe),f&&t(hc),w(Wx),f&&t(rHe),f&&t(or),w(Qx),w(Hx),w(HM),w(Jx),w(KM),f&&t(tHe),f&&t(uc),w(Yx),f&&t(aHe),f&&t(rr),w(Kx),w(e$),w(eE),w(o$),w(lE),f&&t(nHe),f&&t(Fc),w(r$),f&&t(sHe),f&&t(tr),w(t$),w(n$),w(dE),w(s$),w(mE),f&&t(lHe),f&&t(Ec),w(l$),f&&t(iHe),f&&t(ar),w(i$),w(c$),w(hE),w(f$),w(g4),f&&t(dHe),f&&t(Ac),w(m$),f&&t(cHe),f&&t(nr),w(g$),w(p$),w(p4),w(_$),w(j4),f&&t(fHe),f&&t(xc),w(u$),f&&t(mHe),f&&t(sr),w(b$),w(F$),w(G4),w(T$),w(rC),f&&t(gHe),f&&t(Sc),w(M$),f&&t(hHe),f&&t(lr),w(E$),w(w$),w(aC),w(A$),w(mC),f&&t(pHe),f&&t(Bc),w(L$),f&&t(_He),f&&t(ir),w(y$),w($$),w(hC),w(k$),w(uC),f&&t(uHe),f&&t(qc),w(R$),f&&t(bHe),f&&t(dr),w(P$),w(I$),w(vC),w(N$),w(DC),f&&t(vHe),f&&t(Gc),w(q$),f&&t(FHe),f&&t(cr),w(j$),w(G$),w(OC),w(O$),w(ZC),f&&t(THe),f&&t(Xc),w(V$),f&&t(MHe),f&&t(fr),w(X$),w(W$),w(o3),w(Q$),w(y3),f&&t(EHe),f&&t(Qc),w(U$),f&&t(CHe),f&&t(mr),w(H$),w(Y$),w($3),w(K$),w(U3),f&&t(wHe),f&&t(Jc),w(Z$),f&&t(AHe),f&&t(gr),w(ek),w(rk),w(J3),w(tk),w(Z3),f&&t(LHe),f&&t(Zc),w(nk),f&&t(yHe),f&&t(hr),w(sk),w(ik),w(o5),w(dk),w(t5),f&&t(xHe),f&&t(rf),w(ck),f&&t($He),f&&t(pr),w(fk),w(gk),w(n5),w(hk),w(A5),f&&t(kHe),f&&t(nf),w(pk),f&&t(SHe),f&&t(_r),w(_k),w(bk),w(y5),w(vk),w(H5),f&&t(RHe),f&&t(df),w(Fk),f&&t(PHe),f&&t(ur),w(Tk),w(Ek),w(Y5),w(Ck),w(Z5),f&&t(BHe),f&&t(mf),w(wk),f&&t(IHe),f&&t(br),w(Ak),w(yk),w(ow),w(xk),w(tw),f&&t(NHe),f&&t(pf),w($k),f&&t(qHe),f&&t(vr),w(kk),w(Rk),w(nw),w(Pk),w(Rw),f&&t(jHe),f&&t(bf),w(Bk),f&&t(DHe),f&&t(Fr),w(Ik),w(qk),w(Bw),w(jk),w(Ww),f&&t(GHe),f&&t(Tf),w(Dk),f&&t(OHe),f&&t(Tr),w(Gk),w(Vk),w(Uw),w(Xk),w(i6),f&&t(VHe),f&&t(Cf),w(zk),f&&t(XHe),f&&t(Mr),w(Wk),w(Uk),w(c6),w(Hk),w(T6),f&&t(zHe),f&&t(Lf),w(Jk),f&&t(WHe),f&&t(Er),w(Yk),w(Zk),w(E6),w(eS),w(P6),f&&t(QHe),f&&t($f),w(oS),f&&t(UHe),f&&t(Cr),w(rS),w(aS),w(I6),w(nS),w(Q6),f&&t(HHe),f&&t(Rf),w(sS),f&&t(JHe),f&&t(wr),w(lS),w(dS),w(H6),w(cS),w(sA),f&&t(YHe),f&&t(If),w(fS),f&&t(KHe),f&&t(Ar),w(mS),w(hS),w(iA),w(pS),w(uA),f&&t(ZHe),f&&t(jf),w(_S),f&&t(eJe),f&&t(Lr),w(uS),w(vS),w(vA),w(FS),w(yA),f&&t(oJe),f&&t(Of),w(TS),f&&t(rJe),f&&t(yr),w(MS),w(CS),w($A),w(wS),w(SA),f&&t(tJe),f&&t(zf),w(AS),f&&t(aJe),f&&t(xr),w(LS),w(xS),w(PA),w($S),w(NA),f&&t(nJe),f&&t(Uf),w(SS),f&&t(sJe),f&&t($r),w(RS),w(BS),w(jA),w(IS),w(GA)}}}const Tna={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Mna($){return _ta(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class xna extends mta{constructor(g){super();gta(this,g,Mna,Fna,hta,{})}}export{xna as default,Tna as metadata};
